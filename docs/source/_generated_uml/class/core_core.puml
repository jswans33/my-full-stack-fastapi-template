@startuml

title core

skinparam ClassAttributeIconSize 0
skinparam ClassBackgroundColor white
skinparam ClassBorderColor black
hide empty members
skinparam monochrome true

package core {
  class Settings {
      + model_config = SettingsConfigDict(env_file='../.env', env_ignore_empty=True, extra='ignore')
      + API_V1_STR: str = '/api/v1'
      + SECRET_KEY: str = secrets.token_urlsafe(32)
      + ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 8
      + FRONTEND_HOST: str = 'http://localhost:5173'
      + ENVIRONMENT: Literal['local', 'staging', 'production'] = 'local'
      + BACKEND_CORS_ORIGINS: Annotated[list[AnyUrl] | str, BeforeValidator(parse_cors)] = []
      + PROJECT_NAME: str
      + SENTRY_DSN: HttpUrl | None = None
      + POSTGRES_SERVER: str
      + POSTGRES_PORT: int = 5432
      + POSTGRES_USER: str
      + POSTGRES_PASSWORD: str = ''
      + POSTGRES_DB: str = ''
      + SMTP_TLS: bool = True
      + SMTP_SSL: bool = False
      + SMTP_PORT: int = 587
      + SMTP_HOST: str | None = None
      + SMTP_USER: str | None = None
      + SMTP_PASSWORD: str | None = None
      + EMAILS_FROM_EMAIL: EmailStr | None = None
      + EMAILS_FROM_NAME: EmailStr | None = None
      + EMAIL_RESET_TOKEN_EXPIRE_HOURS: int = 48
      + EMAIL_TEST_USER: EmailStr = 'test@example.com'
      + FIRST_SUPERUSER: EmailStr
      + FIRST_SUPERUSER_PASSWORD: str
      + LOG_LEVEL: str = 'INFO'
      + LOG_FORMAT: str = 'TEXT'
      + LOG_FILE: str | None = None
      + LOG_ROTATION: bool = False
      + LOG_ROTATION_SIZE: int = 10
      + LOG_ROTATION_BACKUPS: int = 5
  --
      + all_cors_origins(): list[str]
      + SQLALCHEMY_DATABASE_URI(): str
      + emails_enabled(): bool
  }

}

package logging {
  class LogLevel {
      + DEBUG = 'DEBUG'
      + INFO = 'INFO'
      + WARNING = 'WARNING'
      + ERROR = 'ERROR'
      + CRITICAL = 'CRITICAL'
  }

  class LogFormat {
      + TEXT = 'TEXT'
      + JSON = 'JSON'
  }

  class LogConfig {
      + level: LogLevel = Field(default=LogLevel.INFO, description='Minimum log level to record')
      + format: LogFormat = Field(default=LogFormat.TEXT, description='Format for log output (TEXT or JSON)')
      + file: str | None = Field(default=None, description='Path to log file (if file logging is enabled)')
      + rotation: bool = Field(default=False, description='Enable log rotation')
      + rotation_size: int = Field(default=10, description='Maximum size of log file before rotation (in MB)')
      + rotation_backups: int = Field(default=5, description='Number of backup files to keep')
  --
      + {classmethod} from_env(cls): 'LogConfig'
  }

  class JsonFormatter {
      + format(record: logging.LogRecord): str
  }

  class LoggingMiddleware {
  }

}

' Relationships

@enduml