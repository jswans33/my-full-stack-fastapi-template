@startuml

title utils

skinparam ClassAttributeIconSize 0
skinparam ClassBackgroundColor white
skinparam ClassBorderColor black
hide empty members
skinparam monochrome true

package utils {
  class CustomFormatter {
      - __init__()
      + formatMessage(record: logging.LogRecord): str
  }

  class Base64Engine {
      + bytemap = None
      + big = None
  --
      - __init__(charmap, big = False)
      + charmap()
      + encode_bytes(source)
      + decode_bytes(source)
      + check_repair_unused(source)
      + repair_unused(source)
      + encode_transposed_bytes(source, offsets)
      + decode_transposed_bytes(source, offsets)
      + decode_int6(source)
      + decode_int12(source)
      + decode_int24(source)
      + decode_int30(source)
      + decode_int64(source)
      + encode_int6(value)
      + encode_int12(value)
      + encode_int24(value)
      + encode_int30(value)
      + encode_int64(value)
  }

  class LazyBase64Engine {
      - __init__()
  }

  class classproperty {
      - __init__(func)
  }

  class hybrid_method {
      - __init__(func)
  }

  class memoized_property {
      - __init__(func)
      + clear_cache(obj)
      + peek_cache(obj, default = None)
  }

  class MinimalHandler {
      + {classmethod} using(cls, relaxed = False)
  }

  class TruncateMixin {
      + truncate_error = False
      + truncate_verify_reject = False
  --
      + {classmethod} using(cls, truncate_error = None)
  }

  class GenericHandler {
      + setting_kwds = None
      + context_kwds = ()
      + ident = None
      + checksum_size = None
      + checksum_chars = None
      + checksum = None
  --
      - __init__(checksum = None, use_defaults = False)
      + {classmethod} identify(cls, hash)
      + {classmethod} from_string(cls, hash)
      + to_string()
      + {classmethod} hash(cls, secret)
      + {classmethod} verify(cls, secret, hash)
      + {classmethod} genconfig(cls)
      + {classmethod} genhash(cls, secret, config)
      + {classmethod} needs_update(cls, hash, secret = None)
      + {classmethod} parsehash(cls, hash, checksum = True, sanitize = False)
      + {classmethod} bitsize(cls)
  }

  class StaticHandler {
      + setting_kwds = ()
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class HasEncodingContext {
      + context_kwds = ('encoding',)
      + default_encoding = 'utf-8'
  --
      - __init__(encoding = None)
  }

  class HasUserContext {
      + context_kwds = ('user',)
  --
      - __init__(user = None)
      + {classmethod} hash(cls, secret, user = None)
      + {classmethod} verify(cls, secret, hash, user = None)
      + {classmethod} genhash(cls, secret, config, user = None)
  }

  class HasRawChecksum {
  }

  class HasManyIdents {
      + default_ident = None
      + ident_values = None
      + ident_aliases = None
      + ident = None
  --
      + {classmethod} using(cls, default_ident = None, ident = None)
      - __init__(ident = None)
      + {classmethod} identify(cls, hash)
  }

  class HasSalt {
      + min_salt_size = 0
      + max_salt_size = None
      + salt_chars = None
      + salt = None
  --
      + default_salt_size(cls)
      + default_salt_chars(cls)
      + {classmethod} using(cls, default_salt_size = None, salt_size = None, salt = None)
      - __init__(salt = None)
      + {classmethod} bitsize(cls, salt_size = None)
  }

  class HasRawSalt {
      + salt_chars = ALL_BYTE_VALUES
  }

  class HasRounds {
      + min_rounds = 0
      + max_rounds = None
      + rounds_cost = 'linear'
      + using_rounds_kwds = ('min_desired_rounds', 'max_desired_rounds', 'min_rounds', 'max_rounds', 'default_rounds', 'vary_rounds')
      + min_desired_rounds = None
      + max_desired_rounds = None
      + default_rounds = None
      + vary_rounds = None
      + rounds = None
  --
      + {classmethod} using(cls, min_desired_rounds = None, max_desired_rounds = None, default_rounds = None, vary_rounds = None, min_rounds = None, max_rounds = None, rounds = None)
      - __init__(rounds = None)
      + {classmethod} bitsize(cls, rounds = None, vary_rounds = 0.1)
  }

  class ParallelismMixin {
      + parallelism = 1
  --
      + {classmethod} using(cls, parallelism = None)
      - __init__(parallelism = None)
  }

  class BackendMixin {
      + backends = None
  --
      + {classmethod} get_backend(cls)
      + {classmethod} has_backend(cls, name = 'any')
      + {classmethod} set_backend(cls, name = 'any', dryrun = False)
  }

  class SubclassBackendMixin {
  }

  class HasManyBackends {
  }

  class PrefixWrapper {
      + wrapped = property(_get_wrapped)
  --
      - __init__(name, wrapped, prefix = u(''), orig_prefix = u(''), lazy = False, doc = None, ident = None)
      + ident()
      + ident_values()
      + using()
      + needs_update(hash)
      + identify(hash)
      + genconfig()
      + genhash(secret, config)
      + encrypt(secret)
      + hash(secret)
      + verify(secret, hash)
  }

  class SequenceMixin {
  }

  class PipDeprecationWarning {
  }

  class Hashes {
      - __init__(hashes: Optional[Dict[str, List[str]]] = None)
      + digest_count(): int
      + is_hash_allowed(hash_name: str, hex_digest: str): bool
      + check_against_chunks(chunks: Iterable[bytes])
      + check_against_file(file: BinaryIO)
      + check_against_path(path: str)
      + has_one_of(hashes: Dict[str, str]): bool
  }

  class MissingHashes {
      - __init__()
  }

  class BrokenStdoutLoggingError {
  }

  class IndentingFormatter {
      + default_time_format = '%Y-%m-%dT%H:%M:%S'
  --
      - __init__()
      + get_message_start(formatted: str, levelno: int): str
      + format(record: logging.LogRecord): str
  }

  class IndentedRenderable <<dataclass>> {
      + renderable: RenderableType
      + indent: int
  }

  class RichPipStreamHandler {
      + KEYWORDS: ClassVar[Optional[List[str]]] = []
  --
      - __init__(stream: Optional[TextIO], no_color: bool)
      + emit(record: logging.LogRecord)
      + handleError(record: logging.LogRecord)
  }

  class BetterRotatingFileHandler {
  }

  class MaxLevelFilter {
      - __init__(level: int)
      + filter(record: logging.LogRecord): bool
  }

  class ExcludeLoggerFilter {
      + filter(record: logging.LogRecord): bool
  }

  class StreamWrapper {
      + orig_stream: TextIO
  --
      + {classmethod} from_stream(cls, orig_stream: TextIO): 'StreamWrapper'
      + encoding(): str
  }

  class HiddenText <<dataclass>> {
      + secret: str
      + redacted: str
  }

  class ConfiguredBuildBackendHookCaller {
      - __init__(config_holder, source_dir: str, build_backend: str, backend_path: Optional[str] = None, runner: Optional[Callable[..., None]] = None, python_executable: Optional[str] = None)
      + build_wheel(wheel_directory: str, config_settings: Optional[Dict[str, Union[str, List[str]]]] = None, metadata_directory: Optional[str] = None): str
      + build_sdist(sdist_directory: str, config_settings: Optional[Dict[str, Union[str, List[str]]]] = None): str
      + build_editable(wheel_directory: str, config_settings: Optional[Dict[str, Union[str, List[str]]]] = None, metadata_directory: Optional[str] = None): str
      + get_requires_for_build_wheel(config_settings: Optional[Dict[str, Union[str, List[str]]]] = None): List[str]
      + get_requires_for_build_sdist(config_settings: Optional[Dict[str, Union[str, List[str]]]] = None): List[str]
      + get_requires_for_build_editable(config_settings: Optional[Dict[str, Union[str, List[str]]]] = None): List[str]
      + prepare_metadata_for_build_wheel(metadata_directory: str, config_settings: Optional[Dict[str, Union[str, List[str]]]] = None, _allow_fallback: bool = True): str
      + prepare_metadata_for_build_editable(metadata_directory: str, config_settings: Optional[Dict[str, Union[str, List[str]]]] = None, _allow_fallback: bool = True): str
  }

  class TempDirectoryTypeRegistry {
      - __init__()
      + set_delete(kind: str, value: bool)
      + get_delete(kind: str): bool
  }

  class TempDirectory {
      - __init__(path: Optional[str] = None, delete: Union[bool, None, _Default] = _default, kind: str = 'temp', globally_managed: bool = False, ignore_cleanup_errors: bool = True)
      + path(): str
      + cleanup()
  }

  class AdjacentTempDirectory {
      + LEADING_CHARS = '-~.=%0123456789'
  --
      - __init__(original: str, delete: Optional[bool] = None)
  }

  class VerboseLogger {
      + verbose(msg: str)
  }

}

package site-packages {
  class X {
  }

  class MovedModule {
      - __init__(name, old, new = None)
  }

  class MovedAttribute {
      - __init__(name, old_mod, new_mod, old_attr = None, new_attr = None)
  }

  class Module_six_moves_urllib_parse {
  }

  class Module_six_moves_urllib_error {
  }

  class Module_six_moves_urllib_request {
  }

  class Module_six_moves_urllib_response {
  }

  class Module_six_moves_urllib_robotparser {
  }

  class Module_six_moves_urllib {
      + parse = _importer._get_module('moves.urllib_parse')
      + error = _importer._get_module('moves.urllib_error')
      + request = _importer._get_module('moves.urllib_request')
      + response = _importer._get_module('moves.urllib_response')
      + robotparser = _importer._get_module('moves.urllib_robotparser')
  }

  class Iterator {
      + next()
  }

  class Any {
  }

  class Protocol {
  }

  class SupportsInt {
  }

  class SupportsFloat {
  }

  class SupportsComplex {
  }

  class SupportsBytes {
  }

  class SupportsIndex {
  }

  class SupportsAbs {
  }

  class SupportsRound {
  }

  class Annotated {
  }

  class NoDefaultTypeMeta {
  }

  class NoDefaultType {
  }

  class TypeVar {
  }

  class ParamSpecArgs {
      - __init__(origin)
  }

  class ParamSpecKwargs {
      - __init__(origin)
  }

  class ParamSpec {
  }

  class ParamSpec {
      + args()
      + kwargs()
      - __init__(name)
  }

  class TypeVarTuple {
  }

  class TypeVarTuple {
      - __init__(name)
  }

  class deprecated {
      - __init__()
  }

  class Buffer {
  }

  class NewType {
      - __init__(name, tp)
  }

  class TypeAliasType {
      - __init__(name: str, value)
  }

  class Doc {
      - __init__()
  }

}

package alembic {
  class Config {
      + cmd_opts: Optional[Namespace] = None
      + config_file_name: Union[str, os.PathLike[str], None] = None
      + config_ini_section: str = None
  --
      - __init__(file_: Union[str, os.PathLike[str], None] = None, ini_section: str = 'alembic', output_buffer: Optional[TextIO] = None, stdout: TextIO = sys.stdout, cmd_opts: Optional[Namespace] = None, config_args: Mapping[str, Any] = util.immutabledict(), attributes: Optional[Dict[str, Any]] = None)
      + attributes(): Dict[str, Any]
      + print_stdout(text: str)
      + file_config(): ConfigParser
      + get_template_directory(): str
      + get_section(name: str, default: None = ...): Optional[Dict[str, str]]
      + get_section(name: str, default: Dict[str, str]): Dict[str, str]
      + get_section(name: str, default: Mapping[str, str]): Union[Dict[str, str], Mapping[str, str]]
      + get_section(name: str, default: Optional[Mapping[str, str]] = None): Optional[Mapping[str, str]]
      + set_main_option(name: str, value: str)
      + remove_main_option(name: str)
      + set_section_option(section: str, name: str, value: str)
      + get_section_option(section: str, name: str, default: Optional[str] = None): Optional[str]
      + get_main_option(name: str, default: str): str
      + get_main_option(name: str, default: Optional[str] = None): Optional[str]
      + get_main_option(name: str, default: Optional[str] = None): Optional[str]
      + messaging_opts(): MessagingOptions
  }

  class MessagingOptions {
      + quiet: bool
  }

  class CommandLine {
      - __init__(prog: Optional[str] = None)
      + run_cmd(config: Config, options: Namespace)
      + main(argv: Optional[Sequence[str]] = None)
  }

}

package autogenerate {
  class AutogenContext {
      + metadata: Union[MetaData, Sequence[MetaData], None] = None
      + connection: Optional[Connection] = None
      + dialect: Optional[Dialect] = None
      + imports: Set[str] = None
      + migration_context: MigrationContext = None
      + run_filters = run_object_filters
  --
      - __init__(migration_context: MigrationContext, metadata: Union[MetaData, Sequence[MetaData], None] = None, opts: Optional[Dict[str, Any]] = None, autogenerate: bool = True)
      + inspector(): Inspector
      + run_name_filters(name: Optional[str], type_: NameFilterType, parent_names: NameFilterParentNames): bool
      + run_object_filters(object_: SchemaItem, name: sqla_compat._ConstraintName, type_: NameFilterType, reflected: bool, compare_to: Optional[SchemaItem]): bool
      + sorted_tables(): List[Table]
      + table_key_to_table(): Dict[str, Table]
  }

  class RevisionContext {
      + generated_revisions: List[MigrationScript]
      + process_revision_directives: Optional[ProcessRevisionDirectiveFn]
  --
      - __init__(config: Config, script_directory: ScriptDirectory, command_args: Dict[str, Any], process_revision_directives: Optional[ProcessRevisionDirectiveFn] = None)
      + run_autogenerate(rev: _GetRevArg, migration_context: MigrationContext)
      + run_no_autogenerate(rev: _GetRevArg, migration_context: MigrationContext)
      + generate_scripts(): Iterator[Optional[Script]]
  }

  class Rewriter {
      - __init__()
      + chain(other: Union[ProcessRevisionDirectiveFn, Rewriter]): Rewriter
      + rewrites(operator: Union[Type[AddColumnOp], Type[MigrateOperation], Type[AlterColumnOp], Type[CreateTableOp], Type[ModifyTableOps]]): Callable[..., Any]
      + process_revision_directives(context: MigrationContext, revision: _GetRevArg, directives: List[MigrationScript])
  }

}

package ddl {
  class AlterTable {
      - __init__(table_name: str, schema: Optional[Union[quoted_name, str]] = None)
  }

  class RenameTable {
      - __init__(old_table_name: str, new_table_name: Union[quoted_name, str], schema: Optional[Union[quoted_name, str]] = None)
  }

  class AlterColumn {
      - __init__(name: str, column_name: str, schema: Optional[str] = None, existing_type: Optional[TypeEngine] = None, existing_nullable: Optional[bool] = None, existing_server_default: Optional[_ServerDefault] = None, existing_comment: Optional[str] = None)
  }

  class ColumnNullable {
      - __init__(name: str, column_name: str, nullable: bool)
  }

  class ColumnType {
      - __init__(name: str, column_name: str, type_: TypeEngine)
  }

  class ColumnName {
      - __init__(name: str, column_name: str, newname: str)
  }

  class ColumnDefault {
      - __init__(name: str, column_name: str, default: Optional[_ServerDefault])
  }

  class ComputedColumnDefault {
      - __init__(name: str, column_name: str, default: Optional[Computed])
  }

  class IdentityColumnDefault {
      - __init__(name: str, column_name: str, default: Optional[Identity], impl: DefaultImpl)
  }

  class AddColumn {
      - __init__(name: str, column: Column[Any], schema: Optional[Union[quoted_name, str]] = None)
  }

  class DropColumn {
      - __init__(name: str, column: Column[Any], schema: Optional[str] = None)
  }

  class ColumnComment {
      - __init__(name: str, column_name: str, comment: Optional[str])
  }

  class ImplMeta {
      - __init__(cls, classname: str, bases: Tuple[Type[DefaultImpl]], dict_: Dict[str, Any])
  }

  class DefaultImpl {
      + transactional_ddl = False
      + command_terminator = ';'
      + type_synonyms: Tuple[Set[str], ...] = ({'NUMERIC', 'DECIMAL'},)
      + type_arg_extract: Sequence[str] = ()
      + identity_attrs_ignore: Tuple[str, ...] = ('order', 'on_null')
  --
      - __init__(dialect: Dialect, connection: Optional[Connection], as_sql: bool, transactional_ddl: Optional[bool], output_buffer: Optional[TextIO], context_opts: Dict[str, Any])
      + {classmethod} get_by_dialect(cls, dialect: Dialect): Type[DefaultImpl]
      + static_output(text: str)
      + version_table_impl(): Table
      + requires_recreate_in_batch(batch_op: BatchOperationsImpl): bool
      + prep_table_for_batch(batch_impl: ApplyBatchImpl, table: Table)
      + bind(): Optional[Connection]
      + execute(sql: Union[Executable, str], execution_options: Optional[dict[str, Any]] = None)
      + alter_column(table_name: str, column_name: str, nullable: Optional[bool] = None, server_default: Union[_ServerDefault, Literal[False]] = False, name: Optional[str] = None, type_: Optional[TypeEngine] = None, schema: Optional[str] = None, autoincrement: Optional[bool] = None, comment: Optional[Union[str, Literal[False]]] = False, existing_comment: Optional[str] = None, existing_type: Optional[TypeEngine] = None, existing_server_default: Optional[_ServerDefault] = None, existing_nullable: Optional[bool] = None, existing_autoincrement: Optional[bool] = None)
      + add_column(table_name: str, column: Column[Any], schema: Optional[Union[str, quoted_name]] = None)
      + drop_column(table_name: str, column: Column[Any], schema: Optional[str] = None)
      + add_constraint(const)
      + drop_constraint(const: Constraint)
      + rename_table(old_table_name: str, new_table_name: Union[str, quoted_name], schema: Optional[Union[str, quoted_name]] = None)
      + create_table(table: Table)
      + drop_table(table: Table)
      + create_index(index: Index)
      + create_table_comment(table: Table)
      + drop_table_comment(table: Table)
      + create_column_comment(column: ColumnElement[Any])
      + drop_index(index: Index)
      + bulk_insert(table: Union[TableClause, Table], rows: List[dict], multiinsert: bool = True)
      + compare_type(inspector_column: Column[Any], metadata_column: Column): bool
      + compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default)
      + correct_for_autogen_constraints(conn_uniques: Set[UniqueConstraint], conn_indexes: Set[Index], metadata_unique_constraints: Set[UniqueConstraint], metadata_indexes: Set[Index])
      + cast_for_batch_migrate(existing, existing_transfer, new_type)
      + render_ddl_sql_expr(expr: ClauseElement, is_server_default: bool = False): str
      + correct_for_autogen_foreignkeys(conn_fks: Set[ForeignKeyConstraint], metadata_fks: Set[ForeignKeyConstraint])
      + autogen_column_reflect(inspector, table, column_info)
      + start_migrations()
      + emit_begin()
      + emit_commit()
      + render_type(type_obj: TypeEngine, autogen_context: AutogenContext): Union[str, Literal[False]]
      + compare_indexes(metadata_index: Index, reflected_index: Index): ComparisonResult
      + compare_unique_constraint(metadata_constraint: UniqueConstraint, reflected_constraint: UniqueConstraint): ComparisonResult
      + adjust_reflected_dialect_options(reflected_object: Dict[str, Any], kind: str): Dict[str, Any]
  }

  class Params {
      + token0: str
      + tokens: List[str]
      + args: List[str]
      + kwargs: Dict[str, str]
  }

  class MSSQLImpl {
      + transactional_ddl = True
      + batch_separator = 'GO'
      + type_synonyms = DefaultImpl.type_synonyms + ({'VARCHAR', 'NVARCHAR'},)
      + identity_attrs_ignore = DefaultImpl.identity_attrs_ignore + ('minvalue', 'maxvalue', 'nominvalue', 'nomaxvalue', 'cycle', 'cache')
  --
      - __init__()
      + emit_begin()
      + emit_commit()
      + alter_column(table_name: str, column_name: str, nullable: Optional[bool] = None, server_default: Optional[Union[_ServerDefault, Literal[False]]] = False, name: Optional[str] = None, type_: Optional[TypeEngine] = None, schema: Optional[str] = None, existing_type: Optional[TypeEngine] = None, existing_server_default: Optional[_ServerDefault] = None, existing_nullable: Optional[bool] = None)
      + create_index(index: Index)
      + bulk_insert(table: Union[TableClause, Table], rows: List[dict])
      + drop_column(table_name: str, column: Column[Any], schema: Optional[str] = None)
      + compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default)
      + adjust_reflected_dialect_options(reflected_object: Dict[str, Any], kind: str): Dict[str, Any]
  }

  class MySQLImpl {
      + transactional_ddl = False
      + type_synonyms = DefaultImpl.type_synonyms + ({'BOOL', 'TINYINT'}, {'JSON', 'LONGTEXT'})
      + type_arg_extract = ['character set ([\\w\\-_]+)', 'collate ([\\w\\-_]+)']
  --
      + alter_column(table_name: str, column_name: str, nullable: Optional[bool] = None, server_default: Union[_ServerDefault, Literal[False]] = False, name: Optional[str] = None, type_: Optional[TypeEngine] = None, schema: Optional[str] = None, existing_type: Optional[TypeEngine] = None, existing_server_default: Optional[_ServerDefault] = None, existing_nullable: Optional[bool] = None, autoincrement: Optional[bool] = None, existing_autoincrement: Optional[bool] = None, comment: Optional[Union[str, Literal[False]]] = False, existing_comment: Optional[str] = None)
      + drop_constraint(const: Constraint)
      + compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default)
      + correct_for_autogen_constraints(conn_unique_constraints, conn_indexes, metadata_unique_constraints, metadata_indexes)
      + correct_for_autogen_foreignkeys(conn_fks, metadata_fks)
  }

  class MariaDBImpl {
  }

  class MySQLAlterDefault {
      - __init__(name: str, column_name: str, default: _ServerDefault, schema: Optional[str] = None)
  }

  class MySQLChangeColumn {
      - __init__(name: str, column_name: str, schema: Optional[str] = None, newname: Optional[str] = None, type_: Optional[TypeEngine] = None, nullable: Optional[bool] = None, default: Optional[Union[_ServerDefault, Literal[False]]] = False, autoincrement: Optional[bool] = None, comment: Optional[Union[str, Literal[False]]] = False)
  }

  class MySQLModifyColumn {
  }

  class OracleImpl {
      + transactional_ddl = False
      + batch_separator = '/'
      + command_terminator = ''
      + type_synonyms = DefaultImpl.type_synonyms + ({'VARCHAR', 'VARCHAR2'}, {'BIGINT', 'INTEGER', 'SMALLINT', 'DECIMAL', 'NUMERIC', 'NUMBER'}, {'DOUBLE', 'FLOAT', 'DOUBLE_PRECISION'})
      + identity_attrs_ignore = ()
  --
      - __init__()
      + compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default)
      + emit_begin()
      + emit_commit()
  }

  class PostgresqlImpl {
      + transactional_ddl = True
      + type_synonyms = DefaultImpl.type_synonyms + ({'FLOAT', 'DOUBLE PRECISION'},)
  --
      + create_index(index: Index)
      + prep_table_for_batch(batch_impl, table)
      + compare_server_default(inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default)
      + alter_column(table_name: str, column_name: str, nullable: Optional[bool] = None, server_default: Union[_ServerDefault, Literal[False]] = False, name: Optional[str] = None, type_: Optional[TypeEngine] = None, schema: Optional[str] = None, autoincrement: Optional[bool] = None, existing_type: Optional[TypeEngine] = None, existing_server_default: Optional[_ServerDefault] = None, existing_nullable: Optional[bool] = None, existing_autoincrement: Optional[bool] = None)
      + autogen_column_reflect(inspector, table, column_info)
      + correct_for_autogen_constraints(conn_unique_constraints, conn_indexes, metadata_unique_constraints, metadata_indexes)
      + compare_indexes(metadata_index: Index, reflected_index: Index): ComparisonResult
      + compare_unique_constraint(metadata_constraint: UniqueConstraint, reflected_constraint: UniqueConstraint): ComparisonResult
      + adjust_reflected_dialect_options(reflected_options: Dict[str, Any], kind: str): Dict[str, Any]
      + render_ddl_sql_expr(expr: ClauseElement, is_server_default: bool = False, is_index: bool = False): str
      + render_type(type_: TypeEngine, autogen_context: AutogenContext): Union[str, Literal[False]]
  }

  class PostgresqlColumnType {
      - __init__(name: str, column_name: str, type_: TypeEngine)
  }

  class CreateExcludeConstraintOp {
      + constraint_type = 'exclude'
  --
      - __init__(constraint_name: sqla_compat._ConstraintName, table_name: Union[str, quoted_name], elements: Union[Sequence[Tuple[str, str]], Sequence[Tuple[ColumnClause[Any], str]]], where: Optional[Union[ColumnElement[bool], str]] = None, schema: Optional[str] = None, _orig_constraint: Optional[ExcludeConstraint] = None)
      + {classmethod} from_constraint(cls, constraint: ExcludeConstraint): CreateExcludeConstraintOp
      + to_constraint(migration_context: Optional[MigrationContext] = None): ExcludeConstraint
      + {classmethod} create_exclude_constraint(cls, operations: Operations, constraint_name: str, table_name: str): Optional[Table]
      + {classmethod} batch_create_exclude_constraint(cls, operations: BatchOperations, constraint_name: str): Optional[Table]
  }

  class SQLiteImpl {
      + transactional_ddl = False
  --
      + requires_recreate_in_batch(batch_op: BatchOperationsImpl): bool
      + add_constraint(const: Constraint)
      + drop_constraint(const: Constraint)
      + compare_server_default(inspector_column: Column[Any], metadata_column: Column[Any], rendered_metadata_default: Optional[str], rendered_inspector_default: Optional[str]): bool
      + autogen_column_reflect(inspector: Inspector, table: Table, column_info: Dict[str, Any])
      + render_ddl_sql_expr(expr: ClauseElement, is_server_default: bool = False): str
      + cast_for_batch_migrate(existing: Column[Any], existing_transfer: Dict[str, Union[TypeEngine, Cast]], new_type: TypeEngine)
      + correct_for_autogen_constraints(conn_unique_constraints, conn_indexes, metadata_unique_constraints, metadata_indexes)
  }

  class ComparisonResult {
      + status: Literal['equal', 'different', 'skip']
      + message: str
  --
      + is_equal(): bool
      + is_different(): bool
      + is_skip(): bool
      + {classmethod} Equal(cls): ComparisonResult
      + {classmethod} Different(cls, reason: Union[str, Sequence[str]]): ComparisonResult
      + {classmethod} Skip(cls, reason: Union[str, Sequence[str]]): ComparisonResult
  }

}

package operations {
  class AbstractOperations {
      + impl: Union[DefaultImpl, BatchOperationsImpl]
  --
      - __init__(migration_context: MigrationContext, impl: Optional[BatchOperationsImpl] = None)
      + {classmethod} register_operation(cls, name: str, sourcename: Optional[str] = None): Callable[[Type[_T]], Type[_T]]
      + {classmethod} implementation_for(cls, op_cls): Callable[[_C], _C]
      + {classmethod} context(cls, migration_context: MigrationContext): Iterator[Operations]
      + batch_alter_table(table_name: str, schema: Optional[str] = None, recreate: Literal['auto', 'always', 'never'] = 'auto', partial_reordering: Optional[Tuple[Any, ...]] = None, copy_from: Optional[Table] = None, table_args: Tuple[Any, ...] = (), table_kwargs: Mapping[str, Any] = util.immutabledict(), reflect_args: Tuple[Any, ...] = (), reflect_kwargs: Mapping[str, Any] = util.immutabledict(), naming_convention: Optional[Dict[str, str]] = None): Iterator[BatchOperations]
      + get_context(): MigrationContext
      + invoke(operation: CreateTableOp): Table
      + invoke(operation: Union[AddConstraintOp, DropConstraintOp, CreateIndexOp, DropIndexOp, AddColumnOp, AlterColumnOp, AlterTableOp, CreateTableCommentOp, DropTableCommentOp, DropColumnOp, BulkInsertOp, DropTableOp, ExecuteSQLOp])
      + invoke(operation: MigrateOperation): Any
      + invoke(operation: MigrateOperation): Any
      + f(name: str): conv
      + inline_literal(value: Union[str, int], type_: Optional[TypeEngine[Any]] = None): _literal_bindparam
      + get_bind(): Connection
      + run_async(async_function: Callable[..., Awaitable[_T]]): _T
  }

  class Operations {
  }

  class BatchOperations {
      + impl: BatchOperationsImpl
  }

  class BatchOperationsImpl {
      - __init__(operations, table_name, schema, recreate, copy_from, table_args, table_kwargs, reflect_args, reflect_kwargs, naming_convention, partial_reordering)
      + dialect(): Dialect
      + impl(): DefaultImpl
      + flush()
      + alter_column()
      + add_column()
      + drop_column()
      + add_constraint(const: Constraint)
      + drop_constraint(const: Constraint)
      + rename_table()
      + create_index(idx: Index)
      + drop_index(idx: Index)
      + create_table_comment(table)
      + drop_table_comment(table)
      + create_table(table)
      + drop_table(table)
      + create_column_comment(column)
  }

  class ApplyBatchImpl {
      - __init__(impl: DefaultImpl, table: Table, table_args: tuple, table_kwargs: Dict[str, Any], reflected: bool, partial_reordering: tuple = ())
      + alter_column(table_name: str, column_name: str, nullable: Optional[bool] = None, server_default: Optional[Union[Function[Any], str, bool]] = False, name: Optional[str] = None, type_: Optional[TypeEngine] = None, autoincrement: Optional[Union[bool, Literal['auto']]] = None, comment: Union[str, Literal[False]] = False)
      + add_column(table_name: str, column: Column[Any], insert_before: Optional[str] = None, insert_after: Optional[str] = None)
      + drop_column(table_name: str, column: Union[ColumnClause[Any], Column[Any]])
      + create_column_comment(column)
      + create_table_comment(table)
      + drop_table_comment(table)
      + add_constraint(const: Constraint)
      + drop_constraint(const: Constraint)
      + create_index(idx: Index)
      + drop_index(idx: Index)
      + rename_table()
  }

  class MigrateOperation {
      + info(): Dict[Any, Any]
      + reverse(): MigrateOperation
      + to_diff_tuple(): Tuple[Any, ...]
  }

  class AddConstraintOp {
      + add_constraint_ops = util.Dispatcher()
  --
      + constraint_type(): str
      + {classmethod} register_add_constraint(cls, type_: str): Callable[[Type[_AC]], Type[_AC]]
      + {classmethod} from_constraint(cls, constraint: Constraint): AddConstraintOp
      + to_constraint(migration_context: Optional[MigrationContext] = None): Constraint
      + reverse(): DropConstraintOp
      + to_diff_tuple(): Tuple[str, Constraint]
  }

  class DropConstraintOp {
      - __init__(constraint_name: Optional[sqla_compat._ConstraintNameDefined], table_name: str, type_: Optional[str] = None)
      + reverse(): AddConstraintOp
      + to_diff_tuple(): Tuple[str, SchemaItem]
      + {classmethod} from_constraint(cls, constraint: Constraint): DropConstraintOp
      + to_constraint(): Constraint
      + {classmethod} drop_constraint(cls, operations: Operations, constraint_name: str, table_name: str, type_: Optional[str] = None)
      + {classmethod} batch_drop_constraint(cls, operations: BatchOperations, constraint_name: str, type_: Optional[str] = None)
  }

  class CreatePrimaryKeyOp {
      + constraint_type = 'primarykey'
  --
      - __init__(constraint_name: Optional[sqla_compat._ConstraintNameDefined], table_name: str, columns: Sequence[str])
      + {classmethod} from_constraint(cls, constraint: Constraint): CreatePrimaryKeyOp
      + to_constraint(migration_context: Optional[MigrationContext] = None): PrimaryKeyConstraint
      + {classmethod} create_primary_key(cls, operations: Operations, constraint_name: Optional[str], table_name: str, columns: List[str])
      + {classmethod} batch_create_primary_key(cls, operations: BatchOperations, constraint_name: Optional[str], columns: List[str])
  }

  class CreateUniqueConstraintOp {
      + constraint_type = 'unique'
  --
      - __init__(constraint_name: Optional[sqla_compat._ConstraintNameDefined], table_name: str, columns: Sequence[str])
      + {classmethod} from_constraint(cls, constraint: Constraint): CreateUniqueConstraintOp
      + to_constraint(migration_context: Optional[MigrationContext] = None): UniqueConstraint
      + {classmethod} create_unique_constraint(cls, operations: Operations, constraint_name: Optional[str], table_name: str, columns: Sequence[str]): Any
      + {classmethod} batch_create_unique_constraint(cls, operations: BatchOperations, constraint_name: str, columns: Sequence[str]): Any
  }

  class CreateForeignKeyOp {
      + constraint_type = 'foreignkey'
  --
      - __init__(constraint_name: Optional[sqla_compat._ConstraintNameDefined], source_table: str, referent_table: str, local_cols: List[str], remote_cols: List[str])
      + to_diff_tuple(): Tuple[str, ForeignKeyConstraint]
      + {classmethod} from_constraint(cls, constraint: Constraint): CreateForeignKeyOp
      + to_constraint(migration_context: Optional[MigrationContext] = None): ForeignKeyConstraint
      + {classmethod} create_foreign_key(cls, operations: Operations, constraint_name: Optional[str], source_table: str, referent_table: str, local_cols: List[str], remote_cols: List[str])
      + {classmethod} batch_create_foreign_key(cls, operations: BatchOperations, constraint_name: Optional[str], referent_table: str, local_cols: List[str], remote_cols: List[str])
  }

  class CreateCheckConstraintOp {
      + constraint_type = 'check'
  --
      - __init__(constraint_name: Optional[sqla_compat._ConstraintNameDefined], table_name: str, condition: Union[str, TextClause, ColumnElement[Any]])
      + {classmethod} from_constraint(cls, constraint: Constraint): CreateCheckConstraintOp
      + to_constraint(migration_context: Optional[MigrationContext] = None): CheckConstraint
      + {classmethod} create_check_constraint(cls, operations: Operations, constraint_name: Optional[str], table_name: str, condition: Union[str, ColumnElement[bool], TextClause])
      + {classmethod} batch_create_check_constraint(cls, operations: BatchOperations, constraint_name: str, condition: Union[str, ColumnElement[bool], TextClause])
  }

  class CreateIndexOp {
      - __init__(index_name: Optional[str], table_name: str, columns: Sequence[Union[str, TextClause, ColumnElement[Any]]])
      + reverse(): DropIndexOp
      + to_diff_tuple(): Tuple[str, Index]
      + {classmethod} from_index(cls, index: Index): CreateIndexOp
      + to_index(migration_context: Optional[MigrationContext] = None): Index
      + {classmethod} create_index(cls, operations: Operations, index_name: Optional[str], table_name: str, columns: Sequence[Union[str, TextClause, ColumnElement[Any]]])
      + {classmethod} batch_create_index(cls, operations: BatchOperations, index_name: str, columns: List[str])
  }

  class DropIndexOp {
      - __init__(index_name: Union[quoted_name, str, conv], table_name: Optional[str] = None)
      + to_diff_tuple(): Tuple[str, Index]
      + reverse(): CreateIndexOp
      + {classmethod} from_index(cls, index: Index): DropIndexOp
      + to_index(migration_context: Optional[MigrationContext] = None): Index
      + {classmethod} drop_index(cls, operations: Operations, index_name: str, table_name: Optional[str] = None)
      + {classmethod} batch_drop_index(cls, operations: BatchOperations, index_name: str)
  }

  class CreateTableOp {
      - __init__(table_name: str, columns: Sequence[SchemaItem])
      + reverse(): DropTableOp
      + to_diff_tuple(): Tuple[str, Table]
      + {classmethod} from_table(cls, table: Table): CreateTableOp
      + to_table(migration_context: Optional[MigrationContext] = None): Table
      + {classmethod} create_table(cls, operations: Operations, table_name: str): Table
  }

  class DropTableOp {
      - __init__(table_name: str)
      + to_diff_tuple(): Tuple[str, Table]
      + reverse(): CreateTableOp
      + {classmethod} from_table(cls, table: Table): DropTableOp
      + to_table(migration_context: Optional[MigrationContext] = None): Table
      + {classmethod} drop_table(cls, operations: Operations, table_name: str)
  }

  class AlterTableOp {
      - __init__(table_name: str)
  }

  class RenameTableOp {
      - __init__(old_table_name: str, new_table_name: str)
      + {classmethod} rename_table(cls, operations: Operations, old_table_name: str, new_table_name: str)
  }

  class CreateTableCommentOp {
      - __init__(table_name: str, comment: Optional[str])
      + {classmethod} create_table_comment(cls, operations: Operations, table_name: str, comment: Optional[str])
      + {classmethod} batch_create_table_comment(cls, operations: BatchOperations, comment: Optional[str])
      + reverse(): Union[CreateTableCommentOp, DropTableCommentOp]
      + to_table(migration_context: Optional[MigrationContext] = None): Table
      + to_diff_tuple(): Tuple[Any, ...]
  }

  class DropTableCommentOp {
      - __init__(table_name: str)
      + {classmethod} drop_table_comment(cls, operations: Operations, table_name: str)
      + {classmethod} batch_drop_table_comment(cls, operations: BatchOperations)
      + reverse(): CreateTableCommentOp
      + to_table(migration_context: Optional[MigrationContext] = None): Table
      + to_diff_tuple(): Tuple[Any, ...]
  }

  class AlterColumnOp {
      - __init__(table_name: str, column_name: str)
      + to_diff_tuple(): Any
      + has_changes(): bool
      + reverse(): AlterColumnOp
      + {classmethod} alter_column(cls, operations: Operations, table_name: str, column_name: str)
      + {classmethod} batch_alter_column(cls, operations: BatchOperations, column_name: str)
  }

  class AddColumnOp {
      - __init__(table_name: str, column: Column[Any])
      + reverse(): DropColumnOp
      + to_diff_tuple(): Tuple[str, Optional[str], str, Column[Any]]
      + to_column(): Column[Any]
      + {classmethod} from_column(cls, col: Column[Any]): AddColumnOp
      + {classmethod} from_column_and_tablename(cls, schema: Optional[str], tname: str, col: Column[Any]): AddColumnOp
      + {classmethod} add_column(cls, operations: Operations, table_name: str, column: Column[Any])
      + {classmethod} batch_add_column(cls, operations: BatchOperations, column: Column[Any])
  }

  class DropColumnOp {
      - __init__(table_name: str, column_name: str)
      + to_diff_tuple(): Tuple[str, Optional[str], str, Column[Any]]
      + reverse(): AddColumnOp
      + {classmethod} from_column_and_tablename(cls, schema: Optional[str], tname: str, col: Column[Any]): DropColumnOp
      + to_column(migration_context: Optional[MigrationContext] = None): Column[Any]
      + {classmethod} drop_column(cls, operations: Operations, table_name: str, column_name: str)
      + {classmethod} batch_drop_column(cls, operations: BatchOperations, column_name: str)
  }

  class BulkInsertOp {
      - __init__(table: Union[Table, TableClause], rows: List[Dict[str, Any]])
      + {classmethod} bulk_insert(cls, operations: Operations, table: Union[Table, TableClause], rows: List[Dict[str, Any]])
  }

  class ExecuteSQLOp {
      - __init__(sqltext: Union[Executable, str])
      + {classmethod} execute(cls, operations: Operations, sqltext: Union[Executable, str])
      + {classmethod} batch_execute(cls, operations: Operations, sqltext: Union[Executable, str])
      + to_diff_tuple(): Tuple[str, Union[Executable, str]]
  }

  class OpContainer {
      - __init__(ops: Sequence[MigrateOperation] = ())
      + is_empty(): bool
      + as_diffs(): Any
  }

  class ModifyTableOps {
      - __init__(table_name: str, ops: Sequence[MigrateOperation])
      + reverse(): ModifyTableOps
  }

  class UpgradeOps {
      - __init__(ops: Sequence[MigrateOperation] = (), upgrade_token: str = 'upgrades')
      + reverse_into(downgrade_ops: DowngradeOps): DowngradeOps
      + reverse(): DowngradeOps
  }

  class DowngradeOps {
      - __init__(ops: Sequence[MigrateOperation] = (), downgrade_token: str = 'downgrades')
      + reverse(): UpgradeOps
  }

  class MigrationScript {
      - __init__(rev_id: Optional[str], upgrade_ops: UpgradeOps, downgrade_ops: DowngradeOps)
      + upgrade_ops(): Optional[UpgradeOps]
      + upgrade_ops(upgrade_ops: Union[UpgradeOps, List[UpgradeOps]])
      + downgrade_ops(): Optional[DowngradeOps]
      + downgrade_ops(downgrade_ops: Union[DowngradeOps, List[DowngradeOps]])
      + upgrade_ops_list(): List[UpgradeOps]
      + downgrade_ops_list(): List[DowngradeOps]
  }

  class SchemaObjects {
      - __init__(migration_context: Optional[MigrationContext] = None)
      + primary_key_constraint(name: Optional[sqla_compat._ConstraintNameDefined], table_name: str, cols: Sequence[str], schema: Optional[str] = None): PrimaryKeyConstraint
      + foreign_key_constraint(name: Optional[sqla_compat._ConstraintNameDefined], source: str, referent: str, local_cols: List[str], remote_cols: List[str], onupdate: Optional[str] = None, ondelete: Optional[str] = None, deferrable: Optional[bool] = None, source_schema: Optional[str] = None, referent_schema: Optional[str] = None, initially: Optional[str] = None, match: Optional[str] = None): ForeignKeyConstraint
      + unique_constraint(name: Optional[sqla_compat._ConstraintNameDefined], source: str, local_cols: Sequence[str], schema: Optional[str] = None): UniqueConstraint
      + check_constraint(name: Optional[sqla_compat._ConstraintNameDefined], source: str, condition: Union[str, TextClause, ColumnElement[Any]], schema: Optional[str] = None): Union[CheckConstraint]
      + generic_constraint(name: Optional[sqla_compat._ConstraintNameDefined], table_name: str, type_: Optional[str], schema: Optional[str] = None): Any
      + metadata(): MetaData
      + table(name: str): Table
      + column(name: str, type_: TypeEngine): Column
      + index(name: Optional[str], tablename: Optional[str], columns: Sequence[Union[str, TextClause, ColumnElement[Any]]], schema: Optional[str] = None): Index
  }

  class PackageDetails {
      + version: Version
      + dependencies: List[Requirement]
  }

  class FrozenRequirement {
      - __init__(name: str, req: str, editable: bool, comments: Iterable[str] = ())
      + {classmethod} from_dist(cls, dist: BaseDistribution): 'FrozenRequirement'
  }

  class File <<dataclass>> {
      + path: str
      + content_type: Optional[str] = None
  }

  class RequirementPreparer {
      - __init__(build_dir: str, download_dir: Optional[str], src_dir: str, build_isolation: bool, check_build_deps: bool, build_tracker: BuildTracker, session: PipSession, progress_bar: str, finder: PackageFinder, require_hashes: bool, use_user_site: bool, lazy_wheel: bool, verbosity: int, legacy_resolver: bool)
      + prepare_linked_requirement(req: InstallRequirement, parallel_builds: bool = False): BaseDistribution
      + prepare_linked_requirements_more(reqs: Iterable[InstallRequirement], parallel_builds: bool = False)
      + save_linked_requirement(req: InstallRequirement)
      + prepare_editable_requirement(req: InstallRequirement): BaseDistribution
      + prepare_installed_requirement(req: InstallRequirement, skip_reason: str): BaseDistribution
  }

}

package runtime {
  class EnvironmentContext {
      + config: Config = None
      + script: ScriptDirectory = None
  --
      - __init__(config: Config, script: ScriptDirectory)
      + is_offline_mode(): bool
      + is_transactional_ddl(): bool
      + requires_connection(): bool
      + get_head_revision(): _RevNumber
      + get_head_revisions(): _RevNumber
      + get_starting_revision_argument(): _RevNumber
      + get_revision_argument(): _RevNumber
      + get_tag_argument(): Optional[str]
      + get_x_argument(as_dictionary: Literal[False]): List[str]
      + get_x_argument(as_dictionary: Literal[True]): Dict[str, str]
      + get_x_argument(as_dictionary: bool = ...): Union[List[str], Dict[str, str]]
      + get_x_argument(as_dictionary: bool = False): Union[List[str], Dict[str, str]]
      + configure(connection: Optional[Connection] = None, url: Optional[Union[str, URL]] = None, dialect_name: Optional[str] = None, dialect_opts: Optional[Dict[str, Any]] = None, transactional_ddl: Optional[bool] = None, transaction_per_migration: bool = False, output_buffer: Optional[TextIO] = None, starting_rev: Optional[str] = None, tag: Optional[str] = None, template_args: Optional[Dict[str, Any]] = None, render_as_batch: bool = False, target_metadata: Union[MetaData, Sequence[MetaData], None] = None, include_name: Optional[IncludeNameFn] = None, include_object: Optional[IncludeObjectFn] = None, include_schemas: bool = False, process_revision_directives: Optional[ProcessRevisionDirectiveFn] = None, compare_type: Union[bool, CompareType] = True, compare_server_default: Union[bool, CompareServerDefault] = False, render_item: Optional[RenderItemFn] = None, literal_binds: bool = False, upgrade_token: str = 'upgrades', downgrade_token: str = 'downgrades', alembic_module_prefix: str = 'op.', sqlalchemy_module_prefix: str = 'sa.', user_module_prefix: Optional[str] = None, on_version_apply: Optional[OnVersionApplyFn] = None)
      + run_migrations()
      + execute(sql: Union[Executable, str], execution_options: Optional[Dict[str, Any]] = None)
      + static_output(text: str)
      + begin_transaction(): Union[_ProxyTransaction, ContextManager[None, Optional[bool]]]
      + get_context(): MigrationContext
      + get_bind(): Connection
      + get_impl(): DefaultImpl
  }

  class MigrationContext {
      - __init__(dialect: Dialect, connection: Optional[Connection], opts: Dict[str, Any], environment_context: Optional[EnvironmentContext] = None)
      + {classmethod} configure(cls, connection: Optional[Connection] = None, url: Optional[Union[str, URL]] = None, dialect_name: Optional[str] = None, dialect: Optional[Dialect] = None, environment_context: Optional[EnvironmentContext] = None, dialect_opts: Optional[Dict[str, str]] = None, opts: Optional[Any] = None): MigrationContext
      + autocommit_block(): Iterator[None]
      + begin_transaction(_per_migration: bool = False): Union[_ProxyTransaction, ContextManager[None, Optional[bool]]]
      + get_current_revision(): Optional[str]
      + get_current_heads(): Tuple[str, ...]
      + stamp(script_directory: ScriptDirectory, revision: str)
      + run_migrations()
      + execute(sql: Union[Executable, str], execution_options: Optional[Dict[str, Any]] = None)
      + bind(): Optional[Connection]
      + config(): Optional[Config]
  }

  class HeadMaintainer {
      - __init__(context: MigrationContext, heads)
      + update_to_step(step: Union[RevisionStep, StampStep])
  }

  class MigrationInfo {
      + is_upgrade: bool
      + is_stamp: bool
      + up_revision_id: Optional[str]
      + up_revision_ids: Tuple[str, ...]
      + down_revision_ids: Tuple[str, ...]
      + revision_map: RevisionMap
  --
      - __init__(revision_map: RevisionMap, is_upgrade: bool, is_stamp: bool, up_revisions: Union[str, Tuple[str, ...]], down_revisions: Union[str, Tuple[str, ...]])
      + is_migration(): bool
      + source_revision_ids(): Tuple[str, ...]
      + destination_revision_ids(): Tuple[str, ...]
      + up_revision(): Optional[Revision]
      + up_revisions(): Tuple[Optional[_RevisionOrBase], ...]
      + down_revisions(): Tuple[Optional[_RevisionOrBase], ...]
      + source_revisions(): Tuple[Optional[_RevisionOrBase], ...]
      + destination_revisions(): Tuple[Optional[_RevisionOrBase], ...]
  }

  class MigrationStep {
      + from_revisions_no_deps: Tuple[str, ...]
      + to_revisions_no_deps: Tuple[str, ...]
      + is_upgrade: bool
      + migration_fn
  --
      + name(): str
      + {classmethod} upgrade_from_script(cls, revision_map: RevisionMap, script: Script): RevisionStep
      + {classmethod} downgrade_from_script(cls, revision_map: RevisionMap, script: Script): RevisionStep
      + is_downgrade(): bool
      + short_log(): str
  }

  class RevisionStep {
      - __init__(revision_map: RevisionMap, revision: Script, is_upgrade: bool)
      + doc(): Optional[str]
      + from_revisions(): Tuple[str, ...]
      + from_revisions_no_deps(): Tuple[str, ...]
      + to_revisions(): Tuple[str, ...]
      + to_revisions_no_deps(): Tuple[str, ...]
      + should_delete_branch(heads: Set[str]): bool
      + merge_branch_idents(heads: Set[str]): Tuple[List[str], str, str]
      + unmerge_branch_idents(heads: Set[str]): Tuple[str, str, Tuple[str, ...]]
      + should_create_branch(heads: Set[str]): bool
      + should_merge_branches(heads: Set[str]): bool
      + should_unmerge_branches(heads: Set[str]): bool
      + update_version_num(heads: Set[str]): Tuple[str, str]
      + delete_version_num(): str
      + insert_version_num(): str
      + info(): MigrationInfo
  }

  class StampStep {
      + doc: Optional[str] = None
  --
      - __init__(from_: Optional[Union[str, Collection[str]]], to_: Optional[Union[str, Collection[str]]], is_upgrade: bool, branch_move: bool, revision_map: Optional[RevisionMap] = None)
      + stamp_revision()
      + from_revisions()
      + to_revisions(): Tuple[str, ...]
      + from_revisions_no_deps(): Tuple[str, ...]
      + to_revisions_no_deps(): Tuple[str, ...]
      + delete_version_num(): str
      + insert_version_num(): str
      + update_version_num(heads: Set[str]): Tuple[str, str]
      + merge_branch_idents(heads: Union[Set[str], List[str]]): Union[Tuple[List[Any], str, str], Tuple[List[str], str, str]]
      + unmerge_branch_idents(heads: Set[str]): Tuple[str, str, List[str]]
      + should_delete_branch(heads: Set[str]): bool
      + should_create_branch(heads: Set[str]): Union[Set[str], bool]
      + should_merge_branches(heads: Set[str]): bool
      + should_unmerge_branches(heads: Set[str]): bool
      + info(): MigrationInfo
  }

}

package script {
  class ScriptDirectory {
      - __init__(dir: str, file_template: str = _default_file_template, truncate_slug_length: Optional[int] = 40, version_locations: Optional[List[str]] = None, sourceless: bool = False, output_encoding: str = 'utf-8', timezone: Optional[str] = None, hook_config: Optional[Mapping[str, str]] = None, recursive_version_locations: bool = False, messaging_opts: MessagingOptions = cast('MessagingOptions', util.EMPTY_DICT))
      + versions(): str
      + {classmethod} from_config(cls, config: Config): ScriptDirectory
      + walk_revisions(base: str = 'base', head: str = 'heads'): Iterator[Script]
      + get_revisions(id_: _GetRevArg): Tuple[Script, ...]
      + get_all_current(id_: Tuple[str, ...]): Set[Script]
      + get_revision(id_: str): Script
      + as_revision_number(id_: Optional[str]): Optional[Union[str, Tuple[str, ...]]]
      + iterate_revisions(upper: Union[str, Tuple[str, ...], None], lower: Union[str, Tuple[str, ...], None]): Iterator[Script]
      + get_current_head(): Optional[str]
      + get_heads(): List[str]
      + get_base(): Optional[str]
      + get_bases(): List[str]
      + run_env()
      + env_py_location(): str
      + generate_revision(revid: str, message: Optional[str], head: Optional[_RevIdType] = None, splice: Optional[bool] = False, branch_labels: Optional[_RevIdType] = None, version_path: Optional[str] = None, depends_on: Optional[_RevIdType] = None): Optional[Script]
  }

  class Script {
      + module: ModuleType
      + path: str
  --
      - __init__(module: ModuleType, rev_id: str, path: str)
      + doc(): str
      + longdoc(): str
      + log_entry(): str
      + cmd_format(verbose: bool, include_branches: bool = False, include_doc: bool = False, include_parents: bool = False, tree_indicators: bool = True): str
  }

  class RevisionError {
  }

  class RangeNotAncestorError {
      - __init__(lower: _RevisionIdentifierType, upper: _RevisionIdentifierType)
  }

  class MultipleHeads {
      - __init__(heads: Sequence[str], argument: Optional[str])
  }

  class ResolutionError {
      - __init__(message: str, argument: str)
  }

  class CycleDetected {
      + kind = 'Cycle'
  --
      - __init__(revisions: Sequence[str])
  }

  class DependencyCycleDetected {
      + kind = 'Dependency cycle'
  --
      - __init__(revisions: Sequence[str])
  }

  class LoopDetected {
      + kind = 'Self-loop'
  --
      - __init__(revision: str)
  }

  class DependencyLoopDetected {
      + kind = 'Dependency self-loop'
  --
      - __init__(revision: Sequence[str])
  }

  class RevisionMap {
      - __init__(generator: Callable[[], Iterable[Revision]])
      + heads(): Tuple[str, ...]
      + bases(): Tuple[str, ...]
      + add_revision(revision: Revision, _replace: bool = False)
      + get_current_head(branch_label: Optional[str] = None): Optional[str]
      + get_revisions(id_: Optional[_GetRevArg]): Tuple[Optional[_RevisionOrBase], ...]
      + get_revision(id_: Optional[str]): Optional[Revision]
      + filter_for_lineage(targets: Iterable[_TR], check_against: Optional[str], include_dependencies: bool = False): Tuple[_TR, ...]
      + iterate_revisions(upper: _RevisionIdentifierType, lower: _RevisionIdentifierType, implicit_base: bool = False, inclusive: bool = False, assert_relative_length: bool = True, select_for_downgrade: bool = False): Iterator[Revision]
  }

  class Revision {
      + nextrev: FrozenSet[str] = frozenset()
      + revision: str = None
      + down_revision: Optional[_RevIdType] = None
      + dependencies: Optional[_RevIdType] = None
      + branch_labels: Set[str] = None
  --
      + {classmethod} verify_rev_id(cls, revision: str)
      - __init__(revision: str, down_revision: Optional[Union[str, Tuple[str, ...]]], dependencies: Optional[Union[str, Tuple[str, ...]]] = None, branch_labels: Optional[Union[str, Tuple[str, ...]]] = None)
      + add_nextrev(revision: Revision)
      + is_head(): bool
      + is_base(): bool
      + is_branch_point(): bool
      + is_merge_point(): bool
  }

}

package testing {
  class TestBase {
      + is_sqlalchemy_future = sqla_2
  --
      + ops_context(migration_context)
      + migration_context(connection)
      + as_sql_migration_context(connection)
      + connection()
  }

  class TablesTest {
  }

  class AlterColRoundTripFixture {
      + setUp()
      + tearDown()
  }

  class SuiteRequirements {
      + schemas()
      + autocommit_isolation()
      + materialized_views()
      + unique_constraint_reflection()
      + sequences()
      + foreign_key_match()
      + foreign_key_constraint_reflection()
      + check_constraints_w_enforcement()
      + reflects_pk_names()
      + reflects_fk_options()
      + sqlalchemy_1x()
      + sqlalchemy_2()
      + asyncio()
      + comments()
      + alter_column()
      + computed_columns()
      + autoincrement_on_composite_pk()
      + fk_ondelete_is_reflected()
      + fk_onupdate_is_reflected()
      + fk_onupdate()
      + fk_ondelete_restrict()
      + fk_onupdate_restrict()
      + fk_ondelete_noaction()
      + fk_initially()
      + fk_deferrable()
      + fk_deferrable_is_reflected()
      + fk_names()
      + integer_subtype_comparisons()
      + no_name_normalize()
      + identity_columns()
      + identity_columns_alter()
  }

  class CompareTable {
      - __init__(table)
  }

  class CompareColumn {
      - __init__(column)
  }

  class CompareIndex {
      - __init__(index, name_only = False)
  }

  class CompareCheckConstraint {
      - __init__(constraint)
  }

  class CompareForeignKey {
      - __init__(constraint)
  }

  class ComparePrimaryKey {
      - __init__(constraint)
  }

  class CompareUniqueConstraint {
      - __init__(constraint)
  }

  class Config <<dataclass>> {
      + module_base: Path
      + template_base: Path
      + section_header = 'mako_testing'
      + converters = {Path: make_path}
  }

  class TemplateTest {
      + indicates_unbound_local_error(rendered_output, unbound_var)
  }

  class PlainCacheImpl {
      - __init__(cache)
      + get_or_create(key, creation_function)
      + put(key, value)
      + get(key)
      + invalidate(key)
  }

  class ConfigError {
  }

  class MissingConfig {
  }

  class MissingConfigSection {
  }

  class MissingConfigItem {
  }

  class ConfigValueTypeError {
  }

  class ReadsCfg <<dataclass>> {
      + section_header: ClassVar[str]
      + converters: ClassVar[Optional[dict]] = None
  --
      + {classmethod} from_cfg_file(cls, filespec: Union[Path, str])
  }

  class AssertsCompiledSQL {
      + assert_compile(clause, result, params = None, checkparams = None, for_executemany = False, check_literal_execute = None, check_post_param = None, dialect = None, checkpositional = None, check_prefetch = None, use_default_dialect = False, allow_dialect_select = False, supports_default_values = True, supports_default_metavalue = True, literal_binds = False, render_postcompile = False, schema_translate_map = None, render_schema_translate = False, default_schema_name = None, from_linting = False, check_param_order = True, use_literal_execute_for_simple_int = False)
  }

  class ComparesTables {
      + assert_tables_equal(table, reflected_table, strict_types = False, strict_constraints = True)
      + assert_types_base(c1, c2)
  }

  class AssertsExecutionResults {
      + assert_result(result, class_)
      + assert_list(result, class_, list_)
      + assert_row(class_, rowobj, desc)
      + assert_unordered_result(result, cls)
      + sql_execution_asserter(db = None)
      + assert_sql_execution(db, callable_)
      + assert_sql(db, callable_, rules)
      + assert_sql_count(db, callable_, count)
      + assert_execution(db)
      + assert_statement_count(db, count)
      + assert_statement_count_multi_db(dbs, counts)
  }

  class ComparesIndexes {
      + compare_table_index_with_expected(table: schema.Table, expected: list, dialect_name: str)
  }

  class AssertRule {
      + is_consumed = False
      + errormessage = None
      + consume_statement = True
  --
      + process_statement(execute_observed)
      + no_more_statements()
  }

  class SQLMatchRule {
  }

  class CursorSQL {
      - __init__(statement, params = None, consume_statement = True)
      + process_statement(execute_observed)
  }

  class CompiledSQL {
      - __init__(statement, params = None, dialect = 'default', enable_returning = True)
      + process_statement(execute_observed)
  }

  class RegexSQL {
      - __init__(regex, params = None, dialect = 'default', enable_returning = False)
  }

  class DialectSQL {
  }

  class CountStatements {
      - __init__(count)
      + process_statement(execute_observed)
      + no_more_statements()
  }

  class AllOf {
      - __init__()
      + process_statement(execute_observed)
  }

  class EachOf {
      - __init__()
      + process_statement(execute_observed)
      + no_more_statements()
  }

  class Conditional {
      - __init__(condition, rules, else_rules)
  }

  class Or {
      + process_statement(execute_observed)
  }

  class SQLExecuteObserved {
      - __init__(context, clauseelement, multiparams, params)
  }

  class SQLCursorExecuteObserved {
  }

  class SQLAsserter {
      - __init__()
      + assert_()
  }

  class Variation {
      - __init__(case, argname, case_names)
      + name()
      + fail(): NoReturn
      + {classmethod} idfn(cls, variation)
      + {classmethod} generate_cases(cls, argname, cases)
  }

  class Config {
      - __init__(db, db_opts, options, file_config)
      + {classmethod} register(cls, db, db_opts, options, file_config)
      + {classmethod} set_as_current(cls, config, namespace)
      + {classmethod} push_engine(cls, db, namespace)
      + {classmethod} push(cls, config, namespace)
      + {classmethod} pop(cls, namespace)
      + {classmethod} reset(cls, namespace)
      + {classmethod} all_configs(cls)
      + {classmethod} all_dbs(cls)
      + skip_test(msg)
  }

  class ConnectionKiller {
      - __init__()
      + add_pool(pool)
      + add_engine(engine, scope)
      + rollback_all()
      + checkin_all()
      + close_all()
      + prepare_for_drop_tables(connection)
      + after_test()
      + after_test_outside_fixtures(test)
      + stop_test_class_inside_fixtures()
      + stop_test_class_outside_fixtures()
      + final_cleanup()
      + assert_all_closed()
  }

  class ReconnectFixture {
      - __init__(dbapi)
      + connect()
      + shutdown(stop = False)
      + restart()
  }

  class DBAPIProxyCursor {
      - __init__(engine, conn)
      + execute(stmt, parameters = None)
      + executemany(stmt, params)
  }

  class DBAPIProxyConnection {
      - __init__(engine, conn, cursor_cls)
      + cursor()
      + close()
  }

  class BasicEntity {
      - __init__()
  }

  class ComparableMixin {
  }

  class ComparableEntity {
  }

  class compound {
      - __init__()
      + as_skips()
      + add()
      + not_()
      + enabled()
      + enabled_for_config(config)
      + matching_config_reasons(config)
      + fail_if()
  }

  class Predicate {
      + {classmethod} as_predicate(cls, predicate, description = None)
  }

  class BooleanPredicate {
      - __init__(value, description = None)
  }

  class SpecPredicate {
      - __init__(db, op = None, spec = None, description = None)
  }

  class LambdaPredicate {
      - __init__(lambda_, description = None, args = None, kw = None)
  }

  class NotPredicate {
      - __init__(predicate, description = None)
  }

  class OrPredicate {
      - __init__(predicates, description = None)
  }

  class User {
  }

  class Order {
  }

  class Dingaling {
  }

  class EmailUser {
  }

  class Address {
  }

  class Child1 {
  }

  class Child2 {
  }

  class Parent {
  }

  class Screen {
      - __init__(obj, parent = None)
  }

  class Mixin {
      + email_address = Column(String)
  }

  class AddressWMixin {
  }

  class Foo {
      - __init__(moredata, stuff = 'im stuff')
  }

  class Bar {
      - __init__(x, y)
  }

  class OldSchool {
      - __init__(x, y)
  }

  class OldSchoolWithoutCompare {
      - __init__(x, y)
  }

  class BarWithoutCompare {
      - __init__(x, y)
  }

  class NotComparable {
      - __init__(data)
  }

  class BrokenComparable {
      - __init__(data)
  }

  class ProfileStatsFile {
      - __init__(filename, sort = 'cumulative', dump = None)
      + platform_key()
      + has_stats()
      + result(callcount)
      + reset_count()
      + replace(callcount)
  }

  class register {
      - __init__(decorator = None)
      + {classmethod} init(cls, fn)
      + {classmethod} init_decorator(cls, decorator)
      + for_db()
  }

  class Requirements {
  }

  class SuiteRequirements {
      + create_table()
      + drop_table()
      + table_ddl_if_exists()
      + index_ddl_if_exists()
      + uuid_data_type()
      + foreign_keys()
      + foreign_keys_reflect_as_index()
      + unique_index_reflect_as_unique_constraints()
      + unique_constraints_reflect_as_index()
      + table_value_constructor()
      + standard_cursor_sql()
      + on_update_cascade()
      + non_updating_cascade()
      + deferrable_fks()
      + on_update_or_deferrable_fks()
      + queue_pool()
      + self_referential_foreign_keys()
      + foreign_key_ddl()
      + named_constraints()
      + implicitly_named_constraints()
      + unusual_column_name_characters()
      + subqueries()
      + offset()
      + bound_limit_offset()
      + sql_expression_limit_offset()
      + parens_in_union_contained_select_w_limit_offset()
      + parens_in_union_contained_select_wo_limit_offset()
      + boolean_col_expressions()
      + nullable_booleans()
      + nullsordering()
      + standalone_binds()
      + standalone_null_binds_whereclause()
      + intersect()
      + except_()
      + window_functions()
      + ctes()
      + ctes_with_update_delete()
      + ctes_on_dml()
      + autoincrement_insert()
      + fetch_rows_post_commit()
      + group_by_complex_expression()
      + sane_rowcount()
      + sane_multi_rowcount()
      + sane_rowcount_w_returning()
      + empty_inserts()
      + empty_inserts_executemany()
      + insert_from_select()
      + delete_returning()
      + insert_returning()
      + update_returning()
      + insert_executemany_returning()
      + insertmanyvalues()
      + tuple_in()
      + tuple_in_w_empty()
      + duplicate_names_in_cursor_description()
      + denormalized_names()
      + multivalues_inserts()
      + implements_get_lastrowid()
      + arraysize()
      + emulated_lastrowid()
      + emulated_lastrowid_even_with_sequences()
      + dbapi_lastrowid()
      + views()
      + schemas()
      + cross_schema_fk_reflection()
      + foreign_key_constraint_name_reflection()
      + implicit_default_schema()
      + default_schema_name_switch()
      + server_side_cursors()
      + sequences()
      + no_sequences()
      + sequences_optional()
      + supports_lastrowid()
      + no_lastrowid_support()
      + reflects_pk_names()
      + table_reflection()
      + reflect_tables_no_columns()
      + comment_reflection()
      + comment_reflection_full_unicode()
      + constraint_comment_reflection()
      + view_column_reflection()
      + view_reflection()
      + schema_reflection()
      + schema_create_delete()
      + primary_key_constraint_reflection()
      + foreign_key_constraint_reflection()
      + foreign_key_constraint_option_reflection_ondelete()
      + fk_constraint_option_reflection_ondelete_restrict()
      + fk_constraint_option_reflection_ondelete_noaction()
      + foreign_key_constraint_option_reflection_onupdate()
      + fk_constraint_option_reflection_onupdate_restrict()
      + temp_table_reflection()
      + temp_table_reflect_indexes()
      + temp_table_names()
      + has_temp_table()
      + temporary_tables()
      + temporary_views()
      + index_reflection()
      + index_reflects_included_columns()
      + indexes_with_ascdesc()
      + reflect_indexes_with_ascdesc()
      + reflect_indexes_with_ascdesc_as_expression()
      + indexes_with_expressions()
      + reflect_indexes_with_expressions()
      + unique_constraint_reflection()
      + inline_check_constraint_reflection()
      + check_constraint_reflection()
      + duplicate_key_raises_integrity_error()
      + unbounded_varchar()
      + unicode_data_no_special_types()
      + unicode_data()
      + unicode_ddl()
      + symbol_names_w_double_quote()
      + datetime_interval()
      + datetime_literals()
      + datetime()
      + datetime_timezone()
      + time_timezone()
      + date_implicit_bound()
      + time_implicit_bound()
      + datetime_implicit_bound()
      + datetime_microseconds()
      + timestamp_microseconds()
      + timestamp_microseconds_implicit_bound()
      + datetime_historic()
      + date()
      + date_coerces_from_datetime()
      + date_historic()
      + time()
      + time_microseconds()
      + binary_comparisons()
      + binary_literals()
      + autocommit()
      + isolation_level()
      + get_isolation_levels(config)
      + get_isolation_level_values()
      + dialect_level_isolation_level_param()
      + array_type()
      + json_type()
      + json_array_indexes()
      + json_index_supplementary_unicode_element()
      + legacy_unconditional_json_extract()
      + precision_numerics_general()
      + precision_numerics_enotation_small()
      + precision_numerics_enotation_large()
      + precision_numerics_many_significant_digits()
      + cast_precision_numerics_many_significant_digits()
      + implicit_decimal_binds()
      + numeric_received_as_decimal_untyped()
      + nested_aggregates()
      + recursive_fk_cascade()
      + precision_numerics_retains_significant_digits()
      + infinity_floats()
      + float_or_double_precision_behaves_generically()
      + precision_generic_float_type()
      + literal_float_coercion()
      + floats_to_four_decimals()
      + fetch_null_from_numeric()
      + float_is_numeric()
      + text_type()
      + empty_strings_varchar()
      + empty_strings_text()
      + expressions_against_unbounded_text()
      + selectone()
      + savepoints()
      + two_phase_transactions()
      + update_from()
      + delete_from()
      + update_where_target_in_subquery()
      + mod_operator_as_percent_sign()
      + percent_schema_names()
      + order_by_col_from_union()
      + order_by_label_with_expression()
      + order_by_collation()
      + get_order_by_collation(config)
      + unicode_connections()
      + graceful_disconnects()
      + independent_connections()
      + independent_readonly_connections()
      + skip_mysql_on_windows()
      + ad_hoc_engines()
      + no_windows()
      + timing_intensive()
      + memory_intensive()
      + threading_with_mock()
      + sqlalchemy2_stubs()
      + no_sqlalchemy2_stubs()
      + python38()
      + python39()
      + python310()
      + python311()
      + python312()
      + cpython()
      + is64bit()
      + patch_library()
      + predictable_gc()
      + no_coverage()
      + sqlite()
      + cextensions()
      + async_dialect()
      + asyncio()
      + no_greenlet()
      + greenlet()
      + computed_columns()
      + computed_columns_stored()
      + computed_columns_virtual()
      + computed_columns_default_persisted()
      + computed_columns_reflect_persisted()
      + supports_distinct_on()
      + supports_is_distinct_from()
      + identity_columns()
      + identity_columns_standard()
      + regexp_match()
      + regexp_replace()
      + fetch_first()
      + fetch_percent()
      + fetch_ties()
      + fetch_no_order_by()
      + fetch_offset_with_options()
      + fetch_expression()
      + autoincrement_without_sequence()
      + generic_classes()
      + json_deserializer_binary()
      + reflect_table_options()
      + materialized_views()
      + materialized_views_reflect_pk()
      + supports_bitwise_or()
      + supports_bitwise_and()
      + supports_bitwise_not()
      + supports_bitwise_xor()
      + supports_bitwise_shift()
      + like_escapes()
  }

  class eq_type_affinity {
      - __init__(target)
  }

  class eq_compile_type {
      - __init__(target)
  }

  class eq_clause_element {
      - __init__(target)
  }

  class RandomSet {
      + pop()
      + union(other)
      + difference(other)
      + intersection(other)
      + copy()
  }

  class adict {
      + get_all = __call__
  }

}

package plugin {
  class PluggableSchemaValidator {
      - __init__(schema: CoreSchema, schema_type, schema_type_path: SchemaTypePath, schema_kind: SchemaKind, config: CoreConfig | None, plugins: Iterable[PydanticPluginProtocol], plugin_settings: dict[str, Any])
  }

  class SchemaTypePath {
      + module: str
      + name: str
  }

  class PydanticPluginProtocol {
      + new_schema_validator(schema: CoreSchema, schema_type, schema_type_path: SchemaTypePath, schema_kind: SchemaKind, config: CoreConfig | None, plugin_settings: dict[str, object]): tuple[ValidatePythonHandlerProtocol | None, ValidateJsonHandlerProtocol | None, ValidateStringsHandlerProtocol | None]
  }

  class BaseValidateHandlerProtocol {
      + on_enter: Callable[..., None]
  --
      + on_success(result)
      + on_error(error: ValidationError)
      + on_exception(exception: Exception)
  }

  class ValidatePythonHandlerProtocol {
      + on_enter(input)
  }

  class ValidateJsonHandlerProtocol {
      + on_enter(input: str | bytes | bytearray)
  }

  class ValidateStringsHandlerProtocol {
      + on_enter(input: StringInput)
  }

  class FixtureFunctions {
      + skip_test_exception()
      + combinations()
      + param_ident()
      + fixture()
      + get_current_test_name()
      + mark_base_test_class(): Any
      + add_to_marker()
  }

  class CallableAction {
  }

  class CallableAction {
      - __init__(option_strings, dest, default = False, required = False, help = None)
  }

  class XDistHooks {
      + pytest_configure_node(node)
      + pytest_testnodedown(node, error)
  }

  class PytestFixtureFunctions {
      + skip_test_exception()
      + add_to_marker()
      + mark_base_test_class()
      + combinations()
      + param_ident()
      + fixture()
      + get_current_test_name()
      + async_test(fn)
  }

}

package suite {
  class AutogenerateCommentsTest {
      + test_existing_table_comment_no_change()
      + test_add_table_comment()
      + test_remove_table_comment()
      + test_alter_table_comment()
      + test_existing_column_comment_no_change()
      + test_add_column_comment()
      + test_remove_column_comment()
      + test_alter_column_comment()
  }

  class AutogenerateComputedTest {
      + test_add_computed_column()
      + test_remove_computed_column()
      + test_cant_change_computed_warning(test_case)
      + test_computed_unchanged(test_case)
  }

  class AlterColumnTest {
      + test_all_existings_filled(pk)
      + test_all_existings_filled_in_notnull(pk)
      + test_all_existings_filled_in_comment(pk)
      + test_all_existings_filled_in_server_default(pk)
  }

  class AutoincrementTest {
      + test_alter_column_autoincrement_none()
      + test_alter_column_autoincrement_pk_false()
      + test_alter_column_autoincrement_pk_implicit_true()
      + test_alter_column_autoincrement_pk_explicit_true()
      + test_alter_column_autoincrement_nonpk_false()
      + test_alter_column_autoincrement_nonpk_implicit_false()
      + test_alter_column_autoincrement_nonpk_explicit_true()
      + test_alter_column_autoincrement_compositepk_false()
      + test_alter_column_autoincrement_compositepk_implicit_false()
      + test_alter_column_autoincrement_compositepk_explicit_true()
  }

  class AutogenerateForeignKeysTest {
      + test_remove_fk()
      + test_add_fk()
      + test_no_change()
      + test_no_change_composite_fk()
      + test_casing_convention_changed_so_put_drops_first()
      + test_add_composite_fk_with_name()
      + test_remove_composite_fk()
      + test_add_fk_colkeys()
      + test_no_change_colkeys()
  }

  class IncludeHooksTest {
      + test_remove_connection_fk(hook_type)
      + test_add_metadata_fk()
      + test_change_fk(hook_type)
  }

  class AutogenerateFKOptionsTest {
      + test_add_ondelete()
      + test_remove_ondelete()
      + test_nochange_ondelete()
      + test_add_onupdate()
      + test_remove_onupdate()
      + test_nochange_onupdate()
      + test_nochange_ondelete_restrict()
      + test_nochange_onupdate_restrict()
      + test_nochange_ondelete_noaction()
      + test_nochange_onupdate_noaction()
      + test_change_ondelete_from_restrict()
      + test_change_onupdate_from_restrict()
      + test_ondelete_onupdate_combo()
      + test_add_initially_deferred()
      + test_remove_initially_deferred()
      + test_add_initially_immediate_plus_deferrable()
      + test_remove_initially_immediate_plus_deferrable()
      + test_add_initially_deferrable_nochange_one()
      + test_add_initially_deferrable_nochange_two()
      + test_add_initially_deferrable_nochange_three()
      + test_add_deferrable()
      + test_remove_deferrable()
  }

  class AutogenerateIdentityTest {
      + test_add_identity_column()
      + test_remove_identity_column()
      + test_no_change_identity_column()
      + test_dialect_kwargs_changes()
      + test_change_identity(before, after)
      + test_add_identity_to_column()
      + test_remove_identity_from_column()
  }

  class MigrationTransactionTest {
      + conn = None
  --
      + teardown_method()
      + test_proxy_transaction_rollback()
      + test_proxy_transaction_commit()
      + test_proxy_transaction_contextmanager_commit()
      + test_proxy_transaction_contextmanager_rollback()
      + test_proxy_transaction_contextmanager_explicit_rollback()
      + test_proxy_transaction_contextmanager_explicit_commit()
      + test_transaction_per_migration_transactional_ddl()
      + test_transaction_per_migration_non_transactional_ddl()
      + test_transaction_per_all_transactional_ddl()
      + test_transaction_per_all_non_transactional_ddl()
      + test_transaction_per_all_sqlmode()
      + test_transaction_per_migration_sqlmode()
      + test_autocommit_block()
      + test_autocommit_block_no_transaction()
      + test_autocommit_block_transactional_ddl_sqlmode()
      + test_autocommit_block_nontransactional_ddl_sqlmode()
  }

  class BackendAlterColumnTest {
      + test_rename_column()
      + test_modify_type_int_str()
      + test_add_server_default_int()
      + test_modify_server_default_int()
      + test_modify_nullable_to_non()
      + test_modify_non_nullable_to_nullable()
  }

  class ModelOne {
      + schema = None
  }

  class AutogenTest {
      + configure_opts: Dict[Any, Any] = {}
  --
      + {classmethod} setup_class(cls)
      + {classmethod} teardown_class(cls)
      + setUp()
      + tearDown()
  }

  class AutogenFixtureTest {
      + setUp()
      + tearDown()
  }

  class CTETest {
      + run_inserts = 'each'
      + run_deletes = 'each'
  --
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_select_nonrecursive_round_trip(connection)
      + test_select_recursive_round_trip(connection)
      + test_insert_from_select_round_trip(connection)
      + test_update_from_round_trip(connection)
      + test_delete_from_round_trip(connection)
      + test_delete_scalar_subq_round_trip(connection)
  }

  class TableDDLTest {
      + test_create_table()
      + test_create_table_schema()
      + test_drop_table()
      + test_underscore_names()
      + test_add_table_comment(connection)
      + test_drop_table_comment(connection)
      + test_create_table_if_not_exists(connection)
      + test_create_index_if_not_exists(connection)
      + test_drop_table_if_exists(connection)
      + test_drop_index_if_exists(connection)
  }

  class FutureTableDDLTest {
  }

  class LongNameBlowoutTest {
      + fk(metadata, connection)
      + pk(metadata, connection)
      + ix(metadata, connection)
      + uq(metadata, connection)
      + ck(metadata, connection)
      + test_long_convention_name(type_, metadata, connection)
  }

  class DeprecatedCompoundSelectTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_plain_union(connection)
      + test_limit_offset_selectable_in_unions(connection)
      + test_order_by_selectable_in_unions(connection)
      + test_distinct_selectable_in_unions(connection)
      + test_limit_offset_aliased_selectable_in_unions(connection)
  }

  class PingTest {
      + test_do_ping()
  }

  class ArgSignatureTest {
      + all_subclasses(request)
      + test_all_visit_methods_accept_kw(all_subclasses)
  }

  class ExceptionTest {
      + run_deletes = 'each'
  --
      + {classmethod} define_tables(cls, metadata)
      + test_integrity_error()
      + test_exception_with_non_ascii()
  }

  class IsolationLevelTest {
      + test_default_isolation_level()
      + test_non_default_isolation_level()
      + test_all_levels()
      + test_invalid_level_execution_option(connection_no_trans)
      + test_invalid_level_engine_param(testing_engine)
      + test_dialect_user_setting_is_restored(testing_engine)
  }

  class AutocommitIsolationTest {
      + run_deletes = 'each'
  --
      + {classmethod} define_tables(cls, metadata)
      + test_autocommit_on(connection_no_trans)
      + test_autocommit_off(connection_no_trans)
      + test_turn_autocommit_off_via_default_iso_level(connection_no_trans)
      + test_dialect_autocommit_is_restored(testing_engine, use_dialect_setting)
  }

  class EscapingTest {
      + test_percent_sign_round_trip()
  }

  class WeCanSetDefaultSchemaWEventsTest {
      + test_control_case()
      + test_wont_work_wo_insert()
      + test_schema_change_on_connect()
      + test_schema_change_works_w_transactions()
  }

  class FutureWeCanSetDefaultSchemaWEventsTest {
  }

  class DifficultParametersTest {
      + tough_parameters = testing.combinations(('boring',), ('per cent',), ('per % cent',), ('%percent',), ('par(ens)',), ('percent%(ens)yah',), ('col:ons',), ('_starts_with_underscore',), ('dot.s',), ('more :: %colons%',), ('_name',), ('___name',), ('[BracketsAndCase]',), ('42numbers',), ('percent%signs',), ('has spaces',), ('/slashes/',), ('more/slashes',), ('q?marks',), ('1param',), ('1col:on',), argnames='paramname')
  --
      + test_round_trip_same_named_column(paramname, connection, metadata)
      + multirow_fixture(metadata, connection)
      + test_standalone_bindparam_escape(paramname, connection, multirow_fixture)
      + test_standalone_bindparam_escape_expanding(paramname, connection, multirow_fixture)
  }

  class ReturningGuardsTest {
      + {classmethod} define_tables(cls, metadata)
      + run_stmt(connection)
      + test_insert_single(connection, run_stmt)
      + test_insert_many(connection, run_stmt)
      + test_update_single(connection, run_stmt)
      + test_update_many(connection, run_stmt)
      + test_delete_single(connection, run_stmt)
      + test_delete_many(connection, run_stmt)
  }

  class LastrowidTest {
      + run_deletes = 'each'
  --
      + {classmethod} define_tables(cls, metadata)
      + test_autoincrement_on_insert(connection)
      + test_last_inserted_id(connection)
      + test_native_lastrowid_autoinc(connection)
  }

  class InsertBehaviorTest {
      + run_deletes = 'each'
  --
      + {classmethod} define_tables(cls, metadata)
      + test_no_results_for_non_returning_insert(connection, style, executemany)
      + test_autoclose_on_insert(connection)
      + test_autoclose_on_insert_implicit_returning(connection)
      + test_empty_insert(connection)
      + test_empty_insert_multiple(connection)
      + test_insert_from_select_autoinc(connection)
      + test_insert_from_select_autoinc_no_rows(connection)
      + test_insert_from_select(connection)
      + test_insert_from_select_with_defaults(connection)
  }

  class ReturningTest {
      + run_create_tables = 'each'
  --
      + {classmethod} define_tables(cls, metadata)
      + test_explicit_returning_pk_autocommit(connection)
      + test_explicit_returning_pk_no_autocommit(connection)
      + test_autoincrement_on_insert_implicit_returning(connection)
      + test_last_inserted_id_implicit_returning(connection)
      + test_insertmanyvalues_returning(connection)
      + test_insert_w_floats(connection, metadata, sort_by_parameter_order, type_, value, do_rounding, multiple_rows)
      + test_imv_returning_datatypes(connection, metadata, sort_by_parameter_order, type_, value, multiple_rows)
  }

  class OneConnectionTablesTest {
      + {classmethod} setup_bind(cls)
  }

  class HasTableTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} define_views(cls, metadata)
      + {classmethod} temp_table_name(cls)
      + {classmethod} define_temp_tables(cls, metadata)
      + test_has_table()
      + test_has_table_cache(metadata)
      + test_has_table_schema()
      + test_has_table_nonexistent_schema()
      + test_has_table_view(connection)
      + test_has_table_temp_table(connection)
      + test_has_table_temp_view(connection)
      + test_has_table_view_schema(connection)
  }

  class HasIndexTest {
      + kind = testing.combinations('dialect', 'inspector', argnames='kind')
  --
      + {classmethod} define_tables(cls, metadata)
      + test_has_index(kind, connection, metadata)
      + test_has_index_schema(kind, connection)
  }

  class BizarroCharacterFKResolutionTest {
      + test_fk_ref(connection, metadata, use_composite, tablename, columnname)
  }

  class QuotedNameArgumentTest {
      + run_create_tables = 'once'
  --
      + {classmethod} define_tables(cls, metadata)
      + quote_fixtures(fn)
      + test_get_table_options(name)
      + test_get_view_definition(name)
      + test_get_columns(name)
      + test_get_pk_constraint(name)
      + test_get_foreign_keys(name)
      + test_get_indexes(name)
      + test_get_unique_constraints(name)
      + test_get_table_comment(name)
      + test_get_check_constraints(name)
  }

  class ComponentReflectionTest {
      + run_inserts = None
      + run_deletes = None
  --
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} define_reflected_tables(cls, metadata, schema)
      + {classmethod} temp_table_name(cls)
      + {classmethod} define_temp_tables(cls, metadata)
      + {classmethod} define_views(cls, metadata, schema)
      + exp_options(schema = None, scope = ObjectScope.ANY, kind = ObjectKind.ANY, filter_names = None)
      + exp_comments(schema = None, scope = ObjectScope.ANY, kind = ObjectKind.ANY, filter_names = None)
      + exp_columns(schema = None, scope = ObjectScope.ANY, kind = ObjectKind.ANY, filter_names = None)
      + exp_pks(schema = None, scope = ObjectScope.ANY, kind = ObjectKind.ANY, filter_names = None)
      + exp_fks(schema = None, scope = ObjectScope.ANY, kind = ObjectKind.ANY, filter_names = None)
      + exp_indexes(schema = None, scope = ObjectScope.ANY, kind = ObjectKind.ANY, filter_names = None)
      + exp_ucs(schema = None, scope = ObjectScope.ANY, kind = ObjectKind.ANY, filter_names = None, all_ = False)
      + exp_ccs(schema = None, scope = ObjectScope.ANY, kind = ObjectKind.ANY, filter_names = None)
      + test_get_schema_names(connection)
      + test_has_schema(connection)
      + test_get_schema_names_w_translate_map(connection)
      + test_has_schema_w_translate_map(connection)
      + test_schema_cache(connection)
      + test_dialect_initialize()
      + test_get_default_schema_name(connection)
      + test_get_table_names(connection, order_by, use_schema)
      + test_get_view_names(connection, use_schema)
      + test_get_temp_table_names(connection)
      + test_get_temp_view_names(connection)
      + test_get_comments(connection)
      + test_get_comments_with_schema(connection)
      + test_get_columns(connection, use_views, use_schema)
      + test_reflect_table_temp_table(connection)
      + test_get_temp_table_columns(connection)
      + test_get_temp_view_columns(connection)
      + test_get_pk_constraint(connection, use_schema)
      + test_get_foreign_keys(connection, use_schema)
      + test_get_inter_schema_foreign_keys(connection)
      + test_get_indexes(connection, use_schema)
      + test_get_noncol_index(connection, tname, ixname)
      + test_get_temp_table_unique_constraints(connection)
      + test_get_temp_table_indexes(connection)
      + test_get_unique_constraints(metadata, connection, use_schema)
      + test_get_view_definition(connection, use_schema)
      + test_get_view_definition_does_not_exist(connection)
      + test_autoincrement_col(connection)
      + test_get_table_options(use_schema)
      + test_multi_get_table_options(use_schema)
      + get_multi_exp(connection)
      + test_multi_get_table_options_tables(get_multi_exp, schema, scope, kind, use_filter)
      + test_get_multi_table_comment(get_multi_exp, schema, scope, kind, use_filter)
      + test_get_multi_columns(get_multi_exp, schema, scope, kind, use_filter)
      + test_get_multi_pk_constraint(get_multi_exp, schema, scope, kind, use_filter)
      + test_get_multi_foreign_keys(get_multi_exp, schema, scope, kind, use_filter)
      + test_get_multi_indexes(get_multi_exp, schema, scope, kind, use_filter)
      + test_get_multi_unique_constraints(get_multi_exp, schema, scope, kind, use_filter)
      + test_get_multi_check_constraints(get_multi_exp, schema, scope, kind, use_filter)
      + test_not_existing_table(method, connection)
      + test_unreflectable(connection)
      + test_metadata(connection, use_schema, views)
      + test_comments_unicode(connection, metadata)
      + test_comments_unicode_full(connection, metadata)
  }

  class TableNoColumnsTest {
      + table_no_columns(connection, metadata)
      + view_no_columns(connection, metadata)
      + test_reflect_table_no_columns(connection, table_no_columns)
      + test_get_columns_table_no_columns(connection, table_no_columns)
      + test_reflect_incl_table_no_columns(connection, table_no_columns)
      + test_reflect_view_no_columns(connection, view_no_columns)
      + test_get_columns_view_no_columns(connection, view_no_columns)
  }

  class ComponentReflectionTestExtra {
      + use_schema_fixture(request)
      + inspect_for_table(metadata, connection, use_schema_fixture)
      + ck_eq(reflected, expected)
      + test_check_constraint_no_constraint(metadata, inspect_for_table)
      + test_check_constraint_inline(metadata, inspect_for_table, constraint_name)
      + test_check_constraint_standalone(metadata, inspect_for_table, constraint_name)
      + test_check_constraint_mixed(metadata, inspect_for_table)
      + test_reflect_expression_based_indexes(metadata, connection)
      + test_reflect_covering_index(metadata, connection)
      + test_numeric_reflection(connection, metadata)
      + test_varchar_reflection(connection, metadata)
      + test_nullable_reflection(connection, metadata)
      + test_get_foreign_key_options(connection, metadata, expected, ondelete, onupdate)
  }

  class NormalizedNameTest {
      + {classmethod} define_tables(cls, metadata)
      + test_reflect_lowercase_forced_tables()
      + test_get_table_names()
  }

  class ComputedReflectionTest {
      + test_computed_col_default_not_set()
      + test_get_column_returns_computed()
      + check_column(data, column, sqltext, persisted)
      + test_get_column_returns_persisted()
      + test_get_column_returns_persisted_with_schema()
  }

  class IdentityReflectionTest {
      + run_inserts = None
      + run_deletes = None
  --
      + {classmethod} define_tables(cls, metadata)
      + check(value, exp, approx)
      + test_reflect_identity()
      + test_reflect_identity_schema()
  }

  class CompositeKeyReflectionTest {
      + {classmethod} define_tables(cls, metadata)
      + test_pk_column_order(connection)
      + test_fk_column_order(connection)
  }

  class RowFetchTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_via_attr(connection)
      + test_via_string(connection)
      + test_via_int(connection)
      + test_via_col_object(connection)
      + test_row_with_dupe_names(connection)
      + test_row_w_scalar_select(connection)
  }

  class PercentSchemaNamesTest {
      + {classmethod} define_tables(cls, metadata)
      + test_single_roundtrip(connection)
      + test_executemany_roundtrip(connection)
      + test_executemany_returning_roundtrip(connection)
  }

  class ServerSideCursorsTest {
      + stringify(str_)
      + test_ss_cursor_status(engine_ss_arg, statement, cursor_ss_status)
      + test_conn_option()
      + test_stmt_enabled_conn_option_disabled()
      + test_aliases_and_ss()
      + test_roundtrip_fetchall(metadata)
      + test_roundtrip_fetchmany(metadata)
  }

  class RowCountTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_basic(connection)
      + test_non_rowcount_scenarios_no_raise(connection, statement, close_first)
      + test_update_rowcount1(connection)
      + test_update_rowcount2(connection)
      + test_update_delete_rowcount_return_defaults(connection, implicit_returning, dml)
      + test_raw_sql_rowcount(connection)
      + test_text_rowcount(connection)
      + test_delete_rowcount(connection)
      + test_multi_update_rowcount(connection)
      + test_multi_delete_rowcount(connection)
  }

  class CollateTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_collate_order_by()
  }

  class OrderByLabelTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_plain()
      + test_composed_int()
      + test_composed_multiple()
      + test_plain_desc()
      + test_composed_int_desc()
      + test_group_by_composed()
  }

  class ValuesExpressionTest {
      + test_tuples(connection)
  }

  class FetchLimitOffsetTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_simple_limit(connection)
      + test_limit_render_multiple_times(connection)
      + test_simple_fetch(connection)
      + test_simple_offset(connection)
      + test_simple_limit_offset(connection, cases)
      + test_simple_fetch_offset(connection)
      + test_fetch_offset_no_order(connection)
      + test_simple_offset_zero(connection)
      + test_limit_offset_nobinds()
      + test_fetch_offset_nobinds()
      + test_bound_limit(connection)
      + test_bound_offset(connection)
      + test_bound_limit_offset(connection)
      + test_bound_fetch_offset(connection)
      + test_expr_offset(connection)
      + test_expr_limit(connection)
      + test_expr_limit_offset(connection)
      + test_expr_fetch_offset(connection)
      + test_simple_limit_expr_offset(connection)
      + test_expr_limit_simple_offset(connection)
      + test_simple_fetch_ties(connection)
      + test_fetch_offset_ties(connection)
      + test_fetch_offset_ties_exact_number(connection)
      + test_simple_fetch_percent(connection)
      + test_fetch_offset_percent(connection)
      + test_simple_fetch_percent_ties(connection)
      + test_fetch_offset_percent_ties(connection)
  }

  class SameNamedSchemaTableTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_simple_join_both_tables(connection)
      + test_simple_join_whereclause_only(connection)
      + test_subquery(connection)
  }

  class JoinTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_inner_join_fk()
      + test_inner_join_true()
      + test_inner_join_false()
      + test_outer_join_false()
      + test_outer_join_fk()
  }

  class CompoundSelectTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_plain_union()
      + test_select_from_plain_union()
      + test_limit_offset_selectable_in_unions()
      + test_order_by_selectable_in_unions()
      + test_distinct_selectable_in_unions()
      + test_limit_offset_in_unions_from_alias()
      + test_limit_offset_aliased_selectable_in_unions()
  }

  class PostCompileParamsTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_compile()
      + test_compile_literal_binds()
      + test_execute()
      + test_execute_expanding_plus_literal_execute()
      + test_execute_tuple_expanding_plus_literal_execute()
      + test_execute_tuple_expanding_plus_literal_heterogeneous_execute()
  }

  class ExpandingBoundInTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_multiple_empty_sets_bindparam()
      + test_multiple_empty_sets_direct()
      + test_empty_heterogeneous_tuples_bindparam()
      + test_empty_heterogeneous_tuples_direct()
      + test_empty_homogeneous_tuples_bindparam()
      + test_empty_homogeneous_tuples_direct()
      + test_bound_in_scalar_bindparam()
      + test_bound_in_scalar_direct()
      + test_nonempty_in_plus_empty_notin()
      + test_empty_in_plus_notempty_notin()
      + test_typed_str_in()
      + test_untyped_str_in()
      + test_bound_in_two_tuple_bindparam()
      + test_bound_in_two_tuple_direct()
      + test_bound_in_heterogeneous_two_tuple_bindparam()
      + test_bound_in_heterogeneous_two_tuple_direct()
      + test_bound_in_heterogeneous_two_tuple_text_bindparam()
      + test_bound_in_heterogeneous_two_tuple_typed_bindparam_non_tuple()
      + test_bound_in_heterogeneous_two_tuple_text_bindparam_non_tuple()
      + test_empty_set_against_integer_bindparam()
      + test_empty_set_against_integer_direct()
      + test_empty_set_against_integer_negation_bindparam()
      + test_empty_set_against_integer_negation_direct()
      + test_empty_set_against_string_bindparam()
      + test_empty_set_against_string_direct()
      + test_empty_set_against_string_negation_bindparam()
      + test_empty_set_against_string_negation_direct()
      + test_null_in_empty_set_is_false_bindparam(connection)
      + test_null_in_empty_set_is_false_direct(connection)
  }

  class LikeFunctionsTest {
      + run_inserts = 'once'
      + run_deletes = None
  --
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_startswith_unescaped()
      + test_startswith_autoescape()
      + test_startswith_sqlexpr()
      + test_startswith_escape()
      + test_startswith_autoescape_escape()
      + test_endswith_unescaped()
      + test_endswith_sqlexpr()
      + test_endswith_autoescape()
      + test_endswith_escape()
      + test_endswith_autoescape_escape()
      + test_contains_unescaped()
      + test_contains_autoescape()
      + test_contains_escape()
      + test_contains_autoescape_escape()
      + test_not_regexp_match()
      + test_regexp_replace()
      + test_regexp_match(text, expected)
  }

  class ComputedColumnTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_select_all()
      + test_select_columns()
  }

  class IdentityColumnTest {
      + run_inserts = 'once'
      + run_deletes = 'once'
  --
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_select_all(connection)
      + test_select_columns(connection)
      + test_insert_always_error(connection)
  }

  class IdentityAutoincrementTest {
      + {classmethod} define_tables(cls, metadata)
      + test_autoincrement_with_identity(connection)
  }

  class ExistsTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_select_exists(connection)
      + test_select_exists_false(connection)
  }

  class DistinctOnTest {
      + test_distinct_on()
  }

  class IsOrIsNotDistinctFromTest {
      + {classmethod} define_tables(cls, metadata)
      + test_is_or_is_not_distinct_from(col_a_value, col_b_value, expected_row_count_for_is, connection)
  }

  class WindowFunctionTest {
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_window(connection)
      + test_window_rows_between(connection)
  }

  class BitwiseTest {
      + run_inserts = 'once'
      + run_deletes = 'once'
      + inserted_data = [{'a': i, 'b': i + 1} for i in range(10)]
  --
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_bitwise(case, expected, connection)
  }

  class SequenceTest {
      + run_create_tables = 'each'
  --
      + {classmethod} define_tables(cls, metadata)
      + test_insert_roundtrip(connection)
      + test_insert_lastrowid(connection)
      + test_nextval_direct(connection)
      + test_optional_seq(connection)
      + test_insert_roundtrip_no_implicit_returning(connection)
      + test_insert_roundtrip_translate(connection, implicit_returning)
      + test_nextval_direct_schema_translate(connection)
  }

  class SequenceCompilerTest {
      + test_literal_binds_inline_compile(connection)
  }

  class HasSequenceTest {
      + run_deletes = None
  --
      + {classmethod} define_tables(cls, metadata)
      + test_has_sequence(connection)
      + test_has_sequence_cache(connection, metadata)
      + test_has_sequence_other_object(connection)
      + test_has_sequence_schema(connection)
      + test_has_sequence_neg(connection)
      + test_has_sequence_schemas_neg(connection)
      + test_has_sequence_default_not_in_remote(connection)
      + test_has_sequence_remote_not_in_default(connection)
      + test_get_sequence_names(connection)
      + test_get_sequence_names_no_sequence_schema(connection)
      + test_get_sequence_names_sequences_schema(connection)
  }

  class HasSequenceTestEmpty {
      + test_get_sequence_names_no_sequence(connection)
  }

  class UnicodeVarcharTest {
      + datatype = Unicode(255)
  --
      + test_empty_strings_varchar(connection)
      + test_null_strings_varchar(connection)
  }

  class UnicodeTextTest {
      + datatype = UnicodeText()
  --
      + test_empty_strings_text(connection)
      + test_null_strings_text(connection)
  }

  class ArrayTest {
      + {classmethod} define_tables(cls, metadata)
      + test_array_roundtrip(connection)
      + test_literal_simple(literal_round_trip)
      + test_literal_complex(literal_round_trip)
  }

  class BinaryTest {
      + {classmethod} define_tables(cls, metadata)
      + test_binary_roundtrip(connection, data)
      + test_pickle_roundtrip(connection)
  }

  class TextTest {
      + supports_whereclause()
      + {classmethod} define_tables(cls, metadata)
      + test_text_roundtrip(connection)
      + test_text_empty_strings(connection)
      + test_text_null_strings(connection)
      + test_literal(literal_round_trip)
      + test_literal_non_ascii(literal_round_trip)
      + test_literal_quoting(literal_round_trip)
      + test_literal_backslashes(literal_round_trip)
      + test_literal_percentsigns(literal_round_trip)
  }

  class StringTest {
      + test_nolength_string()
      + test_literal(literal_round_trip)
      + test_literal_non_ascii(literal_round_trip)
      + test_dont_truncate_rightside(metadata, connection, expr, expected)
      + test_literal_quoting(literal_round_trip)
      + test_literal_backslashes(literal_round_trip)
      + test_concatenate_binary(connection)
      + test_concatenate_clauselist(connection)
  }

  class IntervalTest {
      + datatype = Interval
      + data = datetime.timedelta(days=1, seconds=4)
  --
      + test_literal(literal_round_trip)
      + test_select_direct_literal_interval(connection)
      + test_arithmetic_operation_literal_interval(connection)
      + arithmetic_table_fixture(cls, metadata, connection)
      + test_arithmetic_operation_table_interval_and_literal_interval(connection, arithmetic_table_fixture)
      + test_arithmetic_operation_table_date_and_literal_interval(connection, arithmetic_table_fixture)
  }

  class PrecisionIntervalTest {
      + datatype = Interval(day_precision=9, second_precision=9)
      + data = datetime.timedelta(days=103, seconds=4)
  }

  class DateTimeTest {
      + datatype = DateTime
      + data = datetime.datetime(2012, 10, 15, 12, 57, 18)
  --
      + test_select_direct(connection)
  }

  class DateTimeTZTest {
      + datatype = DateTime(timezone=True)
      + data = datetime.datetime(2012, 10, 15, 12, 57, 18, tzinfo=datetime.timezone.utc)
  --
      + test_select_direct(connection)
  }

  class DateTimeMicrosecondsTest {
      + datatype = DateTime
      + data = datetime.datetime(2012, 10, 15, 12, 57, 18, 39642)
  }

  class TimestampMicrosecondsTest {
      + datatype = TIMESTAMP
      + data = datetime.datetime(2012, 10, 15, 12, 57, 18, 396)
  --
      + test_select_direct(connection)
  }

  class TimeTest {
      + datatype = Time
      + data = datetime.time(12, 57, 18)
  --
      + test_select_direct(connection)
  }

  class TimeTZTest {
      + datatype = Time(timezone=True)
      + data = datetime.time(12, 57, 18, tzinfo=datetime.timezone.utc)
  --
      + test_select_direct(connection)
  }

  class TimeMicrosecondsTest {
      + datatype = Time
      + data = datetime.time(12, 57, 18, 396)
  --
      + test_select_direct(connection)
  }

  class DateTest {
      + datatype = Date
      + data = datetime.date(2012, 10, 15)
  --
      + test_select_direct(connection)
  }

  class DateTimeCoercedToDateTimeTest {
      + datatype = Date
      + data = datetime.datetime(2012, 10, 15, 12, 57, 18)
      + compare = datetime.date(2012, 10, 15)
  --
      + test_select_direct(connection)
  }

  class DateTimeHistoricTest {
      + datatype = DateTime
      + data = datetime.datetime(1850, 11, 10, 11, 52, 35)
  --
      + test_select_direct(connection)
  }

  class DateHistoricTest {
      + datatype = Date
      + data = datetime.date(1727, 4, 1)
  --
      + test_select_direct(connection)
  }

  class IntegerTest {
      + test_literal(literal_round_trip)
      + test_huge_int_auto_accommodation(connection, intvalue)
      + test_huge_int(integer_round_trip, intvalue)
      + integer_round_trip(metadata, connection)
  }

  class CastTypeDecoratorTest {
      + string_as_int()
      + test_special_type(metadata, connection, string_as_int)
  }

  class TrueDivTest {
      + test_truediv_integer(connection, left, right, expected)
      + test_floordiv_integer(connection, left, right, expected)
      + test_truediv_numeric(connection, left, right, expected)
      + test_truediv_float(connection, left, right, expected)
      + test_floordiv_numeric(connection, left, right, expected)
      + test_truediv_integer_bound(connection)
      + test_floordiv_integer_bound(connection)
  }

  class NumericTest {
      + do_numeric_test(metadata, connection)
      + test_render_literal_numeric(literal_round_trip)
      + test_render_literal_numeric_asfloat(literal_round_trip)
      + test_render_literal_float(literal_round_trip)
      + test_float_custom_scale(do_numeric_test)
      + test_numeric_as_decimal(do_numeric_test)
      + test_numeric_as_float(do_numeric_test)
      + test_infinity_floats(do_numeric_test)
      + test_numeric_null_as_decimal(do_numeric_test)
      + test_numeric_null_as_float(do_numeric_test)
      + test_float_as_decimal(do_numeric_test)
      + test_float_as_float(do_numeric_test)
      + test_float_coerce_round_trip(connection)
      + test_decimal_coerce_round_trip(connection)
      + test_decimal_coerce_round_trip_w_cast(connection)
      + test_precision_decimal(do_numeric_test)
      + test_enotation_decimal(do_numeric_test)
      + test_enotation_decimal_large(do_numeric_test)
      + test_many_significant_digits(do_numeric_test)
      + test_numeric_no_decimal(do_numeric_test)
      + test_float_is_not_numeric(connection, cls_)
  }

  class BooleanTest {
      + {classmethod} define_tables(cls, metadata)
      + test_render_literal_bool(literal_round_trip)
      + test_round_trip(connection)
      + test_null(connection)
      + test_whereclause()
  }

  class JSONTest {
      + datatype = JSON
  --
      + {classmethod} define_tables(cls, metadata)
      + test_round_trip_data1(connection)
      + test_round_trip_pretty_large_data(connection, unicode_, length)
      + test_index_typed_access(datatype, value)
      + test_index_typed_comparison(datatype, value)
      + test_path_typed_comparison(datatype, value)
      + test_single_element_round_trip(element)
      + test_round_trip_custom_json()
      + test_round_trip_none_as_sql_null(connection, insert_type)
      + test_round_trip_json_null_as_json_null(connection)
      + test_round_trip_none_as_json_null(connection, insert_type)
      + test_unicode_round_trip()
      + test_eval_none_flag_orm(connection)
  }

  class JSONLegacyStringCastIndexTest {
      + datatype = JSON
      + data1 = {'key1': 'value1', 'key2': 'value2'}
      + data2 = {"Key 'One'": 'value1', 'key two': 'value2', 'key three': "value ' three '"}
      + data3 = {'key1': [1, 2, 3], 'key2': ['one', 'two', 'three'], 'key3': [{'four': 'five'}, {'six': 'seven'}]}
      + data4 = ['one', 'two', 'three']
      + data5 = {'nested': {'elem1': [{'a': 'b', 'c': 'd'}, {'e': 'f', 'g': 'h'}], 'elem2': {'elem3': {'elem4': 'elem5'}}}}
      + data6 = {'a': 5, 'b': 'some value', 'c': {'foo': 'bar'}}
  --
      + {classmethod} define_tables(cls, metadata)
      + test_string_cast_crit_spaces_in_key()
      + test_string_cast_crit_simple_int()
      + test_string_cast_crit_mixed_path()
      + test_string_cast_crit_string_path()
      + test_string_cast_crit_against_string_basic()
  }

  class EnumTest {
      + enum_values = ('a', 'b', 'a%', 'b%percent', 'réveillé')
      + datatype = Enum(*enum_values, name='myenum')
  --
      + {classmethod} define_tables(cls, metadata)
      + test_round_trip(data, connection)
      + test_round_trip_executemany(connection)
      + test_round_trip_executemany_returning(connection)
  }

  class UuidTest {
      + datatype = Uuid
  --
      + {classmethod} define_tables(cls, metadata)
      + test_uuid_round_trip(connection)
      + test_uuid_text_round_trip(connection)
      + test_literal_uuid(literal_round_trip)
      + test_literal_text(literal_round_trip)
      + test_literal_nonnative_uuid(literal_round_trip)
      + test_literal_nonnative_text(literal_round_trip)
      + test_uuid_returning(connection)
  }

  class NativeUUIDTest {
      + datatype = UUID
  }

  class UnicodeSchemaTest {
      + {classmethod} define_tables(cls, metadata)
      + test_insert(connection)
      + test_col_targeting(connection)
      + test_reflect(connection)
      + test_repr()
  }

  class SimpleUpdateDeleteTest {
      + run_deletes = 'each'
  --
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} insert_data(cls, connection)
      + test_update(connection)
      + test_delete(connection)
      + test_update_returning(connection, criteria)
      + test_delete_returning(connection, criteria)
  }

}

package util {
  class EncodedIO {
      + close()
  }

  class CommandError {
  }

  class AutogenerateDiffsDetected {
      - __init__(message: str, revision_context: RevisionContext, diffs: List[Tuple[Any, ...]])
  }

  class ModuleClsProxy {
      + {classmethod} create_module_class_proxy(cls, globals_: MutableMapping[str, Any], locals_: MutableMapping[str, Any])
  }

  class Dispatcher {
      - __init__(uselist: bool = False)
      + dispatch_for(target, qualifier: str = 'default'): Callable[[_C], _C]
      + dispatch(obj, qualifier: str = 'default'): Any
      + branch(): Dispatcher
  }

  class LifoQueue {
  }

  class Retry {
      + DEFAULT_ALLOWED_METHODS = frozenset(['HEAD', 'GET', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'])
      + RETRY_AFTER_STATUS_CODES = frozenset([413, 429, 503])
      + DEFAULT_REMOVE_HEADERS_ON_REDIRECT = frozenset(['Cookie', 'Authorization'])
      + DEFAULT_BACKOFF_MAX = 120
  --
      - __init__(total = 10, connect = None, read = None, redirect = None, status = None, other = None, allowed_methods = _Default, status_forcelist = None, backoff_factor = 0, raise_on_redirect = True, raise_on_status = True, history = None, respect_retry_after_header = True, remove_headers_on_redirect = _Default, method_whitelist = _Default)
      + new()
      + {classmethod} from_int(cls, retries, redirect = True, default = None)
      + get_backoff_time()
      + parse_retry_after(retry_after)
      + get_retry_after(response)
      + sleep_for_retry(response = None)
      + sleep(response = None)
      + is_retry(method, status_code, has_retry_after = False)
      + is_exhausted()
      + increment(method = None, url = None, response = None, error = None, _pool = None, _stacktrace = None)
  }

  class SSLTransport {
      - __init__(socket, ssl_context, server_hostname = None, suppress_ragged_eofs = True)
      + fileno()
      + read(len = 1024, buffer = None)
      + recv(len = 1024, flags = 0)
      + recv_into(buffer, nbytes = None, flags = 0)
      + sendall(data, flags = 0)
      + send(data, flags = 0)
      + makefile(mode = 'r', buffering = None, encoding = None, errors = None, newline = None)
      + unwrap()
      + close()
      + getpeercert(binary_form = False)
      + version()
      + cipher()
      + selected_alpn_protocol()
      + selected_npn_protocol()
      + shared_ciphers()
      + compression()
      + settimeout(value)
      + gettimeout()
  }

  class SSLContext {
      - __init__(protocol_version)
      + load_cert_chain(certfile, keyfile)
      + load_verify_locations(cafile = None, capath = None, cadata = None)
      + set_ciphers(cipher_suite)
      + wrap_socket(socket, server_hostname = None, server_side = False)
  }

  class CertificateError {
  }

  class Timeout {
      + DEFAULT_TIMEOUT = _GLOBAL_DEFAULT_TIMEOUT
  --
      - __init__(total = None, connect = _Default, read = _Default)
      + {classmethod} resolve_default_timeout(cls, timeout)
      + {classmethod} from_float(cls, timeout)
      + clone()
      + start_connect()
      + get_connect_duration()
      + connect_timeout()
      + read_timeout()
  }

  class Url {
      + hostname()
      + request_uri()
      + netloc()
      + url()
  }

  class NoWayToWaitForSocketError {
  }

  class FullArgSpec {
      + args: List[str]
      + varargs: Optional[str]
      + varkw: Optional[str]
      + defaults: Optional[Tuple[Any, ...]]
      + kwonlyargs: List[str]
      + kwonlydefaults: Optional[Dict[str, Any]]
      + annotations: Dict[str, Any]
  }

  class safe_reraise {
  }

  class PluginLoader {
      - __init__(group: str, auto_fn: Optional[Callable[..., Any]] = None)
      + clear()
      + load(name: str): Any
      + register(name: str, modulepath: str, objname: str)
  }

  class portable_instancemethod {
      - __init__(meth, kwargs = ())
  }

  class generic_fn_descriptor {
      + fget: Callable[..., _T_co]
  --
      - __init__(fget: Callable[..., _T_co], doc: Optional[str] = None)
      + {classmethod} reset(cls, obj, name: str)
  }

  class HasMemoized {
      + {classmethod} memoized_instancemethod(cls, fn: _F): _F
  }

  class memoized_attribute {
      + fget: Callable[..., _T]
  --
      - __init__(fget: Callable[..., _T], doc: Optional[str] = None)
  }

  class MemoizedSlots {
  }

  class classproperty {
      + fget: Callable[[Any], Any]
  --
      - __init__(fget: Callable[[Any], Any])
  }

  class hybridproperty {
      - __init__(func: Callable[..., _T])
      + classlevel(func: Callable[..., Any]): hybridproperty[_T]
  }

  class rw_hybridproperty {
      - __init__(func: Callable[..., _T])
      + setter(func: Callable[..., Any]): rw_hybridproperty[_T]
      + classlevel(func: Callable[..., Any]): rw_hybridproperty[_T]
  }

  class hybridmethod {
      - __init__(func: Callable[..., _T])
      + classlevel(func: Callable[..., Any]): hybridmethod[_T]
  }

  class symbol {
      + name: str
      + symbols: Dict[str, symbol] = {}
  }

  class TypingOnly {
  }

  class EnsureKWArg {
      + ensure_kwarg: str
  }

  class Empty {
  }

  class Full {
  }

  class QueueCommon {
      + maxsize: int
      + use_lifo: bool
  --
      - __init__(maxsize: int = 0, use_lifo: bool = False)
      + empty(): bool
      + full(): bool
      + qsize(): int
      + put_nowait(item: _T)
      + put(item: _T, block: bool = True, timeout: Optional[float] = None)
      + get_nowait(): _T
      + get(block: bool = True, timeout: Optional[float] = None): _T
  }

  class Queue {
      + queue: Deque[_T]
  --
      - __init__(maxsize: int = 0, use_lifo: bool = False)
      + qsize(): int
      + empty(): bool
      + full(): bool
      + put(item: _T, block: bool = True, timeout: Optional[float] = None)
      + put_nowait(item: _T)
      + get(block: bool = True, timeout: Optional[float] = None): _T
      + get_nowait(): _T
  }

  class AsyncAdaptedQueue {
      - __init__(maxsize: int = 0, use_lifo: bool = False)
      + empty(): bool
      + full()
      + qsize()
      + put_nowait(item: _T)
      + put(item: _T, block: bool = True, timeout: Optional[float] = None)
      + get_nowait(): _T
      + get(block: bool = True, timeout: Optional[float] = None): _T
  }

  class FallbackAsyncAdaptedQueue {
  }

  class code_writer_cmd {
      + parser: ArgumentParser
      + args: Namespace
      + suppress_output: bool
      + diffs_detected: bool
      + source_root: Path
      + pyproject_toml_path: Path
  --
      - __init__(tool_script: str)
      + run_zimports(tempfile: str)
      + run_black(tempfile: str)
      + write_status()
      + write_output_file_from_text(text: str, destination_path: Union[str, Path])
      + write_output_file_from_tempfile(tempfile: str, destination_path: str)
      + add_arguments(): Iterator[ArgumentParser]
      + run_program(): Iterator[None]
  }

  class ArgsTypeProtocol {
  }

  class GenericProtocol {
  }

  class SupportsKeysAndGetItem {
      + keys(): Iterable[_KT]
  }

  class DescriptorProto {
  }

  class DescriptorReference {
  }

  class RODescriptorReference {
  }

  class CallableReference {
  }

  class FacadeDict {
      + copy(): NoReturn
  }

  class Properties {
      - __init__(data: Dict[str, _T])
      + as_readonly(): ReadOnlyProperties[_T]
      + update(value: Dict[str, _T])
      + get(key: str): Optional[_T]
      + get(key: str, default: Union[_DT, _T]): Union[_DT, _T]
      + get(key: str, default: Optional[Union[_DT, _T]] = None): Optional[Union[_T, _DT]]
      + keys(): List[str]
      + values(): List[_T]
      + items(): List[Tuple[str, _T]]
      + has_key(key: str): bool
      + clear()
  }

  class OrderedProperties {
      - __init__()
  }

  class ReadOnlyProperties {
  }

  class WeakSequence {
      - __init__(__elements: Sequence[_T] = ())
      + append(item)
  }

  class OrderedIdentitySet {
      - __init__(iterable: Optional[Iterable[Any]] = None)
  }

  class PopulateDict {
      - __init__(creator: Callable[[_KT], _VT])
  }

  class WeakPopulateDict {
      - __init__(creator_method: types.MethodType)
  }

  class UniqueAppender {
      + data: Union[Iterable[_T], Set[_T], List[_T]]
  --
      - __init__(data: Union[Iterable[_T], Set[_T], List[_T]], via: Optional[str] = None)
      + append(item: _T)
  }

  class LRUCache {
      + capacity: int
      + threshold: float
      + size_alert: Optional[Callable[[LRUCache[_KT, _VT]], None]]
  --
      - __init__(capacity: int = 100, threshold: float = 0.5, size_alert: Optional[Callable[..., None]] = None)
      + get(key: _KT): Optional[_VT]
      + get(key: _KT, default: Union[_VT, _T]): Union[_VT, _T]
      + get(key: _KT, default: Optional[Union[_VT, _T]] = None): Optional[Union[_VT, _T]]
      + values(): ValuesView[_VT]
      + size_threshold(): float
  }

  class ScopedRegistry {
      + createfunc: _CreateFuncType[_T]
      + scopefunc: _ScopeFuncType
      + registry
  --
      - __init__(createfunc: Callable[[], _T], scopefunc: Callable[[], Any])
      + has(): bool
      + set(obj: _T)
      + clear()
  }

  class ThreadLocalRegistry {
      - __init__(createfunc: Callable[[], _T])
      + has(): bool
      + set(obj: _T)
      + clear()
  }

  class greenlet {
      + dead: bool
      + gr_context: Optional[Context]
  --
      - __init__(fn: Callable[..., Any], driver: greenlet)
      + throw(): Any
      + switch(value): Any
  }

  class AsyncAdaptedLock {
      + mutex(): asyncio.Lock
  }

  class ReadOnlyContainer {
  }

  class ImmutableDictBase {
      + clear(): NoReturn
      + pop(key, default: Optional[Any] = None): NoReturn
      + popitem(): NoReturn
      + setdefault(key, default: Optional[Any] = None): NoReturn
      + update(): NoReturn
  }

  class immutabledict {
      - __init__()
      + union(__d: Optional[Mapping[_KT, _VT]] = None): immutabledict[_KT, _VT]
      + merge_with(): immutabledict[_KT, _VT]
  }

  class OrderedSet {
      - __init__(d: Optional[Iterable[_T]] = None)
      + copy(): OrderedSet[_T]
      + add(element: _T)
      + remove(element: _T)
      + pop(): _T
      + insert(pos: int, element: _T)
      + discard(element: _T)
      + clear()
      + update()
      + union(): OrderedSet[Union[_T, _S]]
      + intersection(): OrderedSet[_T]
      + symmetric_difference(other: Iterable[_T]): OrderedSet[_T]
      + difference(): OrderedSet[_T]
      + intersection_update()
      + symmetric_difference_update(other: Iterable[Any])
      + difference_update()
  }

  class IdentitySet {
      - __init__(iterable: Optional[Iterable[Any]] = None)
      + add(value)
      + remove(value)
      + discard(value)
      + pop(): Any
      + clear()
      + issubset(iterable: Iterable[Any]): bool
      + issuperset(iterable: Iterable[Any]): bool
      + union(iterable: Iterable[Any]): IdentitySet
      + update(iterable: Iterable[Any])
      + difference(iterable: Iterable[Any]): IdentitySet
      + difference_update(iterable: Iterable[Any])
      + intersection(iterable: Iterable[Any]): IdentitySet
      + intersection_update(iterable: Iterable[Any])
      + symmetric_difference(iterable: Iterable[Any]): IdentitySet
      + symmetric_difference_update(iterable: Iterable[Any])
      + copy(): IdentitySet
  }

  class ChunksAndContentLength {
      + chunks: typing.Iterable[bytes] | None
      + content_length: int | None
  }

  class RequestHistory {
      + method: str | None
      + url: str | None
      + error: Exception | None
      + status: int | None
      + redirect_location: str | None
  }

  class Retry {
      + DEFAULT_ALLOWED_METHODS = frozenset(['HEAD', 'GET', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'])
      + RETRY_AFTER_STATUS_CODES = frozenset([413, 429, 503])
      + DEFAULT_REMOVE_HEADERS_ON_REDIRECT = frozenset(['Cookie', 'Authorization', 'Proxy-Authorization'])
      + DEFAULT_BACKOFF_MAX = 120
      + DEFAULT: typing.ClassVar[Retry]
  --
      - __init__(total: bool | int | None = 10, connect: int | None = None, read: int | None = None, redirect: bool | int | None = None, status: int | None = None, other: int | None = None, allowed_methods: typing.Collection[str] | None = DEFAULT_ALLOWED_METHODS, status_forcelist: typing.Collection[int] | None = None, backoff_factor: float = 0, backoff_max: float = DEFAULT_BACKOFF_MAX, raise_on_redirect: bool = True, raise_on_status: bool = True, history: tuple[RequestHistory, ...] | None = None, respect_retry_after_header: bool = True, remove_headers_on_redirect: typing.Collection[str] = DEFAULT_REMOVE_HEADERS_ON_REDIRECT, backoff_jitter: float = 0.0)
      + new(): Self
      + {classmethod} from_int(cls, retries: Retry | bool | int | None, redirect: bool | int | None = True, default: Retry | bool | int | None = None): Retry
      + get_backoff_time(): float
      + parse_retry_after(retry_after: str): float
      + get_retry_after(response: BaseHTTPResponse): float | None
      + sleep_for_retry(response: BaseHTTPResponse): bool
      + sleep(response: BaseHTTPResponse | None = None)
      + is_retry(method: str, status_code: int, has_retry_after: bool = False): bool
      + is_exhausted(): bool
      + increment(method: str | None = None, url: str | None = None, response: BaseHTTPResponse | None = None, error: Exception | None = None, _pool: ConnectionPool | None = None, _stacktrace: TracebackType | None = None): Self
  }

  class SSLTransport {
      - __init__(socket: socket.socket, ssl_context: ssl.SSLContext, server_hostname: str | None = None, suppress_ragged_eofs: bool = True)
      + fileno(): int
      + read(len: int = 1024, buffer: typing.Any | None = None): int | bytes
      + recv(buflen: int = 1024, flags: int = 0): int | bytes
      + recv_into(buffer: _WriteBuffer, nbytes: int | None = None, flags: int = 0): None | int | bytes
      + sendall(data: bytes, flags: int = 0)
      + send(data: bytes, flags: int = 0): int
      + makefile(mode: str, buffering: int | None = None): typing.BinaryIO | typing.TextIO | socket.SocketIO
      + unwrap()
      + close()
      + getpeercert(binary_form: typing.Literal[False] = ...): _TYPE_PEER_CERT_RET_DICT | None
      + getpeercert(binary_form: typing.Literal[True]): bytes | None
      + getpeercert(binary_form: bool = False): _TYPE_PEER_CERT_RET
      + version(): str | None
      + cipher(): tuple[str, str, int] | None
      + selected_alpn_protocol(): str | None
      + shared_ciphers(): list[tuple[str, str, int]] | None
      + compression(): str | None
      + settimeout(value: float | None)
      + gettimeout(): float | None
  }

  class CertificateError {
  }

  class Timeout {
      + DEFAULT_TIMEOUT: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT
  --
      - __init__(total: _TYPE_TIMEOUT = None, connect: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT, read: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT)
      + {static} resolve_default_timeout(timeout: _TYPE_TIMEOUT): float | None
      + {classmethod} from_float(cls, timeout: _TYPE_TIMEOUT): Timeout
      + clone(): Timeout
      + start_connect(): float
      + get_connect_duration(): float
      + connect_timeout(): _TYPE_TIMEOUT
      + read_timeout(): float | None
  }

  class Url {
      + hostname(): str | None
      + request_uri(): str
      + authority(): str | None
      + netloc(): str | None
      + url(): str
  }

}

package annotated_types {
  class Case {
      + annotation
      + valid_cases: Iterable[Any]
      + invalid_cases: Iterable[Any]
  }

  class SupportsGt {
  }

  class SupportsGe {
  }

  class SupportsLt {
  }

  class SupportsLe {
  }

  class SupportsMod {
  }

  class SupportsDiv {
  }

  class BaseMetadata {
  }

  class Gt <<dataclass>> {
      + gt: SupportsGt
  }

  class Ge <<dataclass>> {
      + ge: SupportsGe
  }

  class Lt <<dataclass>> {
      + lt: SupportsLt
  }

  class Le <<dataclass>> {
      + le: SupportsLe
  }

  class GroupedMetadata {
  }

  class Interval <<dataclass>> {
      + gt: Union[SupportsGt, None] = None
      + ge: Union[SupportsGe, None] = None
      + lt: Union[SupportsLt, None] = None
      + le: Union[SupportsLe, None] = None
  }

  class MultipleOf <<dataclass>> {
      + multiple_of: Union[SupportsDiv, SupportsMod]
  }

  class MinLen <<dataclass>> {
      + min_length: Annotated[int, Ge(0)]
  }

  class MaxLen <<dataclass>> {
      + max_length: Annotated[int, Ge(0)]
  }

  class Len <<dataclass>> {
      + min_length: Annotated[int, Ge(0)] = 0
      + max_length: Optional[Annotated[int, Ge(0)]] = None
  }

  class Timezone <<dataclass>> {
      + tz: Union[str, tzinfo, EllipsisType, None]
  }

  class Unit <<dataclass>> {
      + unit: str
  }

  class Predicate <<dataclass>> {
      + func: Callable[[Any], bool]
  }

  class Not <<dataclass>> {
      + func: Callable[[Any], bool]
  }

  class DocInfo <<dataclass>> {
      + documentation: str
  }

}

package anyio {
  class BlockingPortal {
      - __init__()
      + call(func: Callable[[Unpack[PosArgsT]], Awaitable[T_Retval]]): T_Retval
      + call(func: Callable[[Unpack[PosArgsT]], T_Retval]): T_Retval
      + call(func: Callable[[Unpack[PosArgsT]], Awaitable[T_Retval] | T_Retval]): T_Retval
      + start_task_soon(func: Callable[[Unpack[PosArgsT]], Awaitable[T_Retval]]): Future[T_Retval]
      + start_task_soon(func: Callable[[Unpack[PosArgsT]], T_Retval]): Future[T_Retval]
      + start_task_soon(func: Callable[[Unpack[PosArgsT]], Awaitable[T_Retval] | T_Retval]): Future[T_Retval]
      + start_task(func: Callable[..., Awaitable[T_Retval]]): tuple[Future[T_Retval], Any]
      + wrap_async_context_manager(cm: AbstractAsyncContextManager[T_co]): AbstractContextManager[T_co]
  }

  class BlockingPortalProvider <<dataclass>> {
      + backend: str = 'asyncio'
      + backend_options: dict[str, Any] | None = None
  }

  class RunvarToken {
      - __init__(var: RunVar[T], value: T | Literal[_NoValueSet.NO_VALUE_SET])
  }

  class RunVar {
      + NO_VALUE_SET: Literal[_NoValueSet.NO_VALUE_SET] = _NoValueSet.NO_VALUE_SET
  --
      - __init__(name: str, default: T | Literal[_NoValueSet.NO_VALUE_SET] = NO_VALUE_SET)
      + get(default: D): T | D
      + get(): T
      + get(default: D | Literal[_NoValueSet.NO_VALUE_SET] = NO_VALUE_SET): T | D
      + set(value: T): RunvarToken[T]
      + reset(token: RunvarToken[T])
  }

  class Worker {
      + last_used: float = 0
  --
      + initialize()
      + destroy()
  }

}

package abc {
  class AsyncBackend {
      + {classmethod} run(cls, func: Callable[[Unpack[PosArgsT]], Awaitable[T_Retval]], args: tuple[Unpack[PosArgsT]], kwargs: dict[str, Any], options: dict[str, Any]): T_Retval
      + {classmethod} current_token(cls): object
      + {classmethod} current_time(cls): float
      + {classmethod} cancelled_exception_class(cls): type[BaseException]
      + {classmethod} create_cancel_scope(cls): CancelScope
      + {classmethod} current_effective_deadline(cls): float
      + {classmethod} create_task_group(cls): TaskGroup
      + {classmethod} create_event(cls): Event
      + {classmethod} create_lock(cls): Lock
      + {classmethod} create_semaphore(cls, initial_value: int): Semaphore
      + {classmethod} create_capacity_limiter(cls, total_tokens: float): CapacityLimiter
      + {classmethod} check_cancelled(cls)
      + {classmethod} run_async_from_thread(cls, func: Callable[[Unpack[PosArgsT]], Awaitable[T_Retval]], args: tuple[Unpack[PosArgsT]], token: object): T_Retval
      + {classmethod} run_sync_from_thread(cls, func: Callable[[Unpack[PosArgsT]], T_Retval], args: tuple[Unpack[PosArgsT]], token: object): T_Retval
      + {classmethod} create_blocking_portal(cls): BlockingPortal
      + {classmethod} setup_process_pool_exit_at_shutdown(cls, workers: set[Process])
      + {classmethod} create_tcp_listener(cls, sock: socket): SocketListener
      + {classmethod} create_unix_listener(cls, sock: socket): SocketListener
      + {classmethod} current_default_thread_limiter(cls): CapacityLimiter
      + {classmethod} open_signal_receiver(cls): AbstractContextManager[AsyncIterator[Signals]]
      + {classmethod} get_current_task(cls): TaskInfo
      + {classmethod} get_running_tasks(cls): Sequence[TaskInfo]
      + {classmethod} create_test_runner(cls, options: dict[str, Any]): TestRunner
  }

  class AsyncResource {
  }

  class SocketAttribute {
      + family: AddressFamily = typed_attribute()
      + local_address: SockAddrType = typed_attribute()
      + local_port: int = typed_attribute()
      + raw_socket: socket.socket = typed_attribute()
      + remote_address: SockAddrType = typed_attribute()
      + remote_port: int = typed_attribute()
  }

  class SocketStream {
  }

  class UNIXSocketStream {
  }

  class SocketListener {
  }

  class UDPSocket {
  }

  class ConnectedUDPSocket {
  }

  class UNIXDatagramSocket {
  }

  class ConnectedUNIXDatagramSocket {
  }

  class UnreliableObjectReceiveStream {
  }

  class UnreliableObjectSendStream {
  }

  class UnreliableObjectStream {
  }

  class ObjectReceiveStream {
  }

  class ObjectSendStream {
  }

  class ObjectStream {
  }

  class ByteReceiveStream {
  }

  class ByteSendStream {
  }

  class ByteStream {
  }

  class Listener {
  }

  class Process {
      + terminate()
      + kill()
      + send_signal(signal: Signals)
      + pid(): int
      + returncode(): int | None
      + stdin(): ByteSendStream | None
      + stdout(): ByteReceiveStream | None
      + stderr(): ByteReceiveStream | None
  }

  class TaskStatus {
      + started()
      + started(value: T_contra)
      + started(value: T_contra | None = None)
  }

  class TaskGroup {
      + cancel_scope: CancelScope
  --
      + start_soon(func: Callable[[Unpack[PosArgsT]], Awaitable[Any]])
  }

  class TestRunner {
      + run_asyncgen_fixture(fixture_func: Callable[..., AsyncGenerator[_T, Any]], kwargs: dict[str, Any]): Iterable[_T]
      + run_fixture(fixture_func: Callable[..., Coroutine[Any, Any, _T]], kwargs: dict[str, Any]): _T
      + run_test(test_func: Callable[..., Coroutine[Any, Any, Any]], kwargs: dict[str, Any])
  }

}

package streams {
  class BufferedByteReceiveStream <<dataclass>> {
      + receive_stream: AnyByteReceiveStream
  --
      + buffer(): bytes
      + extra_attributes(): Mapping[Any, Callable[[], Any]]
  }

  class FileStreamAttribute {
      + file: BinaryIO = typed_attribute()
      + path: Path = typed_attribute()
      + fileno: int = typed_attribute()
  }

  class FileReadStream {
  }

  class FileWriteStream {
  }

  class MemoryObjectStreamStatistics {
      + current_buffer_used: int
      + max_buffer_size: float
      + open_send_streams: int
      + open_receive_streams: int
      + tasks_waiting_send: int
      + tasks_waiting_receive: int
  }

  class MemoryObjectItemReceiver <<dataclass>> {
      + task_info: TaskInfo = field(init=False, default_factory=get_current_task)
      + item: T_Item = field(init=False)
  }

  class MemoryObjectStreamState <<dataclass>> {
      + max_buffer_size: float = field()
      + buffer: deque[T_Item] = field(init=False, default_factory=deque)
      + open_send_channels: int = field(init=False, default=0)
      + open_receive_channels: int = field(init=False, default=0)
      + waiting_receivers: OrderedDict[Event, MemoryObjectItemReceiver[T_Item]] = field(init=False, default_factory=OrderedDict)
      + waiting_senders: OrderedDict[Event, T_Item] = field(init=False, default_factory=OrderedDict)
  --
      + statistics(): MemoryObjectStreamStatistics
  }

  class MemoryObjectReceiveStream <<dataclass>> {
      + receive_nowait(): T_co
      + clone(): MemoryObjectReceiveStream[T_co]
      + close()
      + statistics(): MemoryObjectStreamStatistics
  }

  class MemoryObjectSendStream <<dataclass>> {
      + send_nowait(item: T_contra)
      + clone(): MemoryObjectSendStream[T_contra]
      + close()
      + statistics(): MemoryObjectStreamStatistics
  }

  class StapledByteStream <<dataclass>> {
      + send_stream: ByteSendStream
      + receive_stream: ByteReceiveStream
  --
      + extra_attributes(): Mapping[Any, Callable[[], Any]]
  }

  class StapledObjectStream <<dataclass>> {
      + send_stream: ObjectSendStream[T_Item]
      + receive_stream: ObjectReceiveStream[T_Item]
  --
      + extra_attributes(): Mapping[Any, Callable[[], Any]]
  }

  class MultiListener <<dataclass>> {
      + listeners: Sequence[Listener[T_Stream]]
  --
      + extra_attributes(): Mapping[Any, Callable[[], Any]]
  }

  class TextReceiveStream <<dataclass>> {
      + transport_stream: AnyByteReceiveStream
      + encoding: InitVar[str] = 'utf-8'
      + errors: InitVar[str] = 'strict'
  --
      + extra_attributes(): Mapping[Any, Callable[[], Any]]
  }

  class TextSendStream <<dataclass>> {
      + transport_stream: AnyByteSendStream
      + encoding: InitVar[str] = 'utf-8'
      + errors: str = 'strict'
  --
      + extra_attributes(): Mapping[Any, Callable[[], Any]]
  }

  class TextStream <<dataclass>> {
      + transport_stream: AnyByteStream
      + encoding: InitVar[str] = 'utf-8'
      + errors: InitVar[str] = 'strict'
  --
      + extra_attributes(): Mapping[Any, Callable[[], Any]]
  }

  class TLSAttribute {
      + alpn_protocol: str | None = typed_attribute()
      + channel_binding_tls_unique: bytes = typed_attribute()
      + cipher: tuple[str, str, int] = typed_attribute()
      + peer_certificate: None | dict[str, str | _PCTRTTT | _PCTRTT] = typed_attribute()
      + peer_certificate_binary: bytes | None = typed_attribute()
      + server_side: bool = typed_attribute()
      + shared_ciphers: list[tuple[str, str, int]] | None = typed_attribute()
      + ssl_object: ssl.SSLObject = typed_attribute()
      + standard_compatible: bool = typed_attribute()
      + tls_version: str = typed_attribute()
  }

  class TLSStream <<dataclass>> {
      + transport_stream: AnyByteStream
      + standard_compatible: bool
  --
      + extra_attributes(): Mapping[Any, Callable[[], Any]]
  }

  class TLSListener <<dataclass>> {
      + listener: Listener[Any]
      + ssl_context: ssl.SSLContext
      + standard_compatible: bool = True
      + handshake_timeout: float = 30
  --
      + extra_attributes(): Mapping[Any, Callable[[], Any]]
  }

}

package _backends {
  class Runner {
      - __init__()
      + close()
      + get_loop(): AbstractEventLoop
      + run(coro: Coroutine[T_Retval]): T_Retval
  }

  class CancelScope {
      - __init__(deadline: float = math.inf, shield: bool = False)
      + cancel()
      + deadline(): float
      + deadline(value: float)
      + cancel_called(): bool
      + cancelled_caught(): bool
      + shield(): bool
      + shield(value: bool)
  }

  class TaskState {
      - __init__(parent_id: int | None, cancel_scope: CancelScope | None)
  }

  class TaskGroup {
      - __init__()
      + start_soon(func: Callable[[Unpack[PosArgsT]], Awaitable[Any]])
  }

  class WorkerThread {
      + MAX_IDLE_TIME = 10
  --
      - __init__(root_task: asyncio.Task, workers: set[WorkerThread], idle_workers: deque[WorkerThread])
      + run()
      + stop(f: asyncio.Task | None = None)
  }

  class BlockingPortal {
      - __init__()
  }

  class StreamReaderWrapper <<dataclass>> {
  }

  class StreamWriterWrapper <<dataclass>> {
  }

  class Process <<dataclass>> {
      + terminate()
      + kill()
      + send_signal(signal: int)
      + pid(): int
      + returncode(): int | None
      + stdin(): abc.ByteSendStream | None
      + stdout(): abc.ByteReceiveStream | None
      + stderr(): abc.ByteReceiveStream | None
  }

  class StreamProtocol {
      + read_queue: deque[bytes]
      + read_event: asyncio.Event
      + write_event: asyncio.Event
      + exception: Exception | None = None
      + is_at_eof: bool = False
  --
      + connection_made(transport: asyncio.BaseTransport)
      + connection_lost(exc: Exception | None)
      + data_received(data: bytes)
      + eof_received(): bool | None
      + pause_writing()
      + resume_writing()
  }

  class DatagramProtocol {
      + read_queue: deque[tuple[bytes, IPSockAddrType]]
      + read_event: asyncio.Event
      + write_event: asyncio.Event
      + exception: Exception | None = None
  --
      + connection_made(transport: asyncio.BaseTransport)
      + connection_lost(exc: Exception | None)
      + datagram_received(data: bytes, addr: IPSockAddrType)
      + error_received(exc: Exception)
      + pause_writing()
      + resume_writing()
  }

  class SocketStream {
      - __init__(transport: asyncio.Transport, protocol: StreamProtocol)
  }

  class UNIXSocketStream {
  }

  class TCPSocketListener {
      - __init__(raw_socket: socket.socket)
  }

  class UNIXSocketListener {
      - __init__(raw_socket: socket.socket)
  }

  class UDPSocket {
      - __init__(transport: asyncio.DatagramTransport, protocol: DatagramProtocol)
  }

  class ConnectedUDPSocket {
      - __init__(transport: asyncio.DatagramTransport, protocol: DatagramProtocol)
  }

  class UNIXDatagramSocket {
  }

  class ConnectedUNIXDatagramSocket {
  }

  class Event {
      - __init__()
      + set()
      + is_set(): bool
      + statistics(): EventStatistics
  }

  class Lock {
      - __init__()
      + acquire_nowait()
      + locked(): bool
      + release()
      + statistics(): LockStatistics
  }

  class Semaphore {
      - __init__(initial_value: int)
      + acquire_nowait()
      + release()
      + value(): int
      + max_value(): int | None
      + statistics(): SemaphoreStatistics
  }

  class CapacityLimiter {
      - __init__(total_tokens: float)
      + total_tokens(): float
      + total_tokens(value: float)
      + borrowed_tokens(): int
      + available_tokens(): float
      + acquire_nowait()
      + acquire_on_behalf_of_nowait(borrower: object)
      + release()
      + release_on_behalf_of(borrower: object)
      + statistics(): CapacityLimiterStatistics
  }

  class AsyncIOTaskInfo {
      - __init__(task: asyncio.Task)
      + has_pending_cancellation(): bool
  }

  class TestRunner {
      - __init__()
      + get_loop(): AbstractEventLoop
      + run_asyncgen_fixture(fixture_func: Callable[..., AsyncGenerator[T_Retval, Any]], kwargs: dict[str, Any]): Iterable[T_Retval]
      + run_fixture(fixture_func: Callable[..., Coroutine[Any, Any, T_Retval]], kwargs: dict[str, Any]): T_Retval
      + run_test(test_func: Callable[..., Coroutine[Any, Any, Any]], kwargs: dict[str, Any])
  }

  class AsyncIOBackend {
      + {classmethod} run(cls, func: Callable[[Unpack[PosArgsT]], Awaitable[T_Retval]], args: tuple[Unpack[PosArgsT]], kwargs: dict[str, Any], options: dict[str, Any]): T_Retval
      + {classmethod} current_token(cls): object
      + {classmethod} current_time(cls): float
      + {classmethod} cancelled_exception_class(cls): type[BaseException]
      + {classmethod} create_cancel_scope(cls): CancelScope
      + {classmethod} current_effective_deadline(cls): float
      + {classmethod} create_task_group(cls): abc.TaskGroup
      + {classmethod} create_event(cls): abc.Event
      + {classmethod} create_lock(cls): abc.Lock
      + {classmethod} create_semaphore(cls, initial_value: int): abc.Semaphore
      + {classmethod} create_capacity_limiter(cls, total_tokens: float): abc.CapacityLimiter
      + {classmethod} check_cancelled(cls)
      + {classmethod} run_async_from_thread(cls, func: Callable[[Unpack[PosArgsT]], Awaitable[T_Retval]], args: tuple[Unpack[PosArgsT]], token: object): T_Retval
      + {classmethod} run_sync_from_thread(cls, func: Callable[[Unpack[PosArgsT]], T_Retval], args: tuple[Unpack[PosArgsT]], token: object): T_Retval
      + {classmethod} create_blocking_portal(cls): abc.BlockingPortal
      + {classmethod} setup_process_pool_exit_at_shutdown(cls, workers: set[abc.Process])
      + {classmethod} create_tcp_listener(cls, sock: socket.socket): SocketListener
      + {classmethod} create_unix_listener(cls, sock: socket.socket): SocketListener
      + {classmethod} current_default_thread_limiter(cls): CapacityLimiter
      + {classmethod} open_signal_receiver(cls): AbstractContextManager[AsyncIterator[Signals]]
      + {classmethod} get_current_task(cls): TaskInfo
      + {classmethod} get_running_tasks(cls): Sequence[TaskInfo]
      + {classmethod} create_test_runner(cls, options: dict[str, Any]): TestRunner
  }

  class CancelScope {
      - __init__(original: trio.CancelScope | None = None)
      + cancel()
      + deadline(): float
      + deadline(value: float)
      + cancel_called(): bool
      + cancelled_caught(): bool
      + shield(): bool
      + shield(value: bool)
  }

  class TaskGroup {
      - __init__()
      + start_soon(func: Callable[[Unpack[PosArgsT]], Awaitable[Any]])
  }

  class BlockingPortal {
      - __init__()
  }

  class ReceiveStreamWrapper <<dataclass>> {
  }

  class SendStreamWrapper <<dataclass>> {
  }

  class Process <<dataclass>> {
      + terminate()
      + kill()
      + send_signal(signal: Signals)
      + pid(): int
      + returncode(): int | None
      + stdin(): abc.ByteSendStream | None
      + stdout(): abc.ByteReceiveStream | None
      + stderr(): abc.ByteReceiveStream | None
  }

  class SocketStream {
      - __init__(trio_socket: TrioSocketType)
  }

  class UNIXSocketStream {
  }

  class TCPSocketListener {
      - __init__(raw_socket: socket.socket)
  }

  class UNIXSocketListener {
      - __init__(raw_socket: socket.socket)
  }

  class UDPSocket {
      - __init__(trio_socket: TrioSocketType)
  }

  class ConnectedUDPSocket {
      - __init__(trio_socket: TrioSocketType)
  }

  class UNIXDatagramSocket {
      - __init__(trio_socket: TrioSocketType)
  }

  class ConnectedUNIXDatagramSocket {
      - __init__(trio_socket: TrioSocketType)
  }

  class Event {
      - __init__()
      + is_set(): bool
      + statistics(): EventStatistics
      + set()
  }

  class Lock {
      - __init__()
      + acquire_nowait()
      + locked(): bool
      + release()
      + statistics(): LockStatistics
  }

  class Semaphore {
      - __init__(initial_value: int)
      + acquire_nowait()
      + max_value(): int | None
      + value(): int
      + release()
      + statistics(): SemaphoreStatistics
  }

  class CapacityLimiter {
      - __init__(total_tokens: float | None = None)
      + total_tokens(): float
      + total_tokens(value: float)
      + borrowed_tokens(): int
      + available_tokens(): float
      + acquire_nowait()
      + acquire_on_behalf_of_nowait(borrower: object)
      + release()
      + release_on_behalf_of(borrower: object)
      + statistics(): CapacityLimiterStatistics
  }

  class TestRunner {
      - __init__()
      + run_asyncgen_fixture(fixture_func: Callable[..., AsyncGenerator[T_Retval, Any]], kwargs: dict[str, Any]): Iterable[T_Retval]
      + run_fixture(fixture_func: Callable[..., Coroutine[Any, Any, T_Retval]], kwargs: dict[str, Any]): T_Retval
      + run_test(test_func: Callable[..., Coroutine[Any, Any, Any]], kwargs: dict[str, Any])
  }

  class TrioTaskInfo {
      - __init__(task: trio.lowlevel.Task)
      + has_pending_cancellation(): bool
  }

  class TrioBackend {
      + {classmethod} run(cls, func: Callable[[Unpack[PosArgsT]], Awaitable[T_Retval]], args: tuple[Unpack[PosArgsT]], kwargs: dict[str, Any], options: dict[str, Any]): T_Retval
      + {classmethod} current_token(cls): object
      + {classmethod} current_time(cls): float
      + {classmethod} cancelled_exception_class(cls): type[BaseException]
      + {classmethod} create_cancel_scope(cls): abc.CancelScope
      + {classmethod} current_effective_deadline(cls): float
      + {classmethod} create_task_group(cls): abc.TaskGroup
      + {classmethod} create_event(cls): abc.Event
      + {classmethod} create_lock(cls): Lock
      + {classmethod} create_semaphore(cls, initial_value: int): abc.Semaphore
      + {classmethod} create_capacity_limiter(cls, total_tokens: float): CapacityLimiter
      + {classmethod} check_cancelled(cls)
      + {classmethod} run_async_from_thread(cls, func: Callable[[Unpack[PosArgsT]], Awaitable[T_Retval]], args: tuple[Unpack[PosArgsT]], token: object): T_Retval
      + {classmethod} run_sync_from_thread(cls, func: Callable[[Unpack[PosArgsT]], T_Retval], args: tuple[Unpack[PosArgsT]], token: object): T_Retval
      + {classmethod} create_blocking_portal(cls): abc.BlockingPortal
      + {classmethod} setup_process_pool_exit_at_shutdown(cls, workers: set[abc.Process])
      + {classmethod} create_tcp_listener(cls, sock: socket.socket): abc.SocketListener
      + {classmethod} create_unix_listener(cls, sock: socket.socket): abc.SocketListener
      + {classmethod} current_default_thread_limiter(cls): CapacityLimiter
      + {classmethod} open_signal_receiver(cls): AbstractContextManager[AsyncIterator[Signals]]
      + {classmethod} get_current_task(cls): TaskInfo
      + {classmethod} get_running_tasks(cls): Sequence[TaskInfo]
      + {classmethod} create_test_runner(cls, options: dict[str, Any]): TestRunner
  }

  class AnyIOStream {
      - __init__(stream: anyio.abc.ByteStream)
      + get_extra_info(info: str): typing.Any
  }

  class AnyIOBackend {
  }

  class AutoBackend {
  }

  class NetworkStream {
      + read(max_bytes: int, timeout: float | None = None): bytes
      + write(buffer: bytes, timeout: float | None = None)
      + close()
      + start_tls(ssl_context: ssl.SSLContext, server_hostname: str | None = None, timeout: float | None = None): NetworkStream
      + get_extra_info(info: str): typing.Any
  }

  class NetworkBackend {
      + connect_tcp(host: str, port: int, timeout: float | None = None, local_address: str | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None): NetworkStream
      + connect_unix_socket(path: str, timeout: float | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None): NetworkStream
      + sleep(seconds: float)
  }

  class AsyncNetworkStream {
      + get_extra_info(info: str): typing.Any
  }

  class AsyncNetworkBackend {
  }

  class MockSSLObject {
      - __init__(http2: bool)
      + selected_alpn_protocol(): str
  }

  class MockStream {
      - __init__(buffer: list[bytes], http2: bool = False)
      + read(max_bytes: int, timeout: float | None = None): bytes
      + write(buffer: bytes, timeout: float | None = None)
      + close()
      + start_tls(ssl_context: ssl.SSLContext, server_hostname: str | None = None, timeout: float | None = None): NetworkStream
      + get_extra_info(info: str): typing.Any
  }

  class MockBackend {
      - __init__(buffer: list[bytes], http2: bool = False)
      + connect_tcp(host: str, port: int, timeout: float | None = None, local_address: str | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None): NetworkStream
      + connect_unix_socket(path: str, timeout: float | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None): NetworkStream
      + sleep(seconds: float)
  }

  class AsyncMockStream {
      - __init__(buffer: list[bytes], http2: bool = False)
      + get_extra_info(info: str): typing.Any
  }

  class AsyncMockBackend {
      - __init__(buffer: list[bytes], http2: bool = False)
  }

  class TLSinTLSStream {
      + TLS_RECORD_SIZE = 16384
  --
      - __init__(sock: socket.socket, ssl_context: ssl.SSLContext, server_hostname: str | None = None, timeout: float | None = None)
      + read(max_bytes: int, timeout: float | None = None): bytes
      + write(buffer: bytes, timeout: float | None = None)
      + close()
      + start_tls(ssl_context: ssl.SSLContext, server_hostname: str | None = None, timeout: float | None = None): NetworkStream
      + get_extra_info(info: str): typing.Any
  }

  class SyncStream {
      - __init__(sock: socket.socket)
      + read(max_bytes: int, timeout: float | None = None): bytes
      + write(buffer: bytes, timeout: float | None = None)
      + close()
      + start_tls(ssl_context: ssl.SSLContext, server_hostname: str | None = None, timeout: float | None = None): NetworkStream
      + get_extra_info(info: str): typing.Any
  }

  class SyncBackend {
      + connect_tcp(host: str, port: int, timeout: float | None = None, local_address: str | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None): NetworkStream
      + connect_unix_socket(path: str, timeout: float | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None): NetworkStream
  }

  class TrioStream {
      - __init__(stream: trio.abc.Stream)
      + get_extra_info(info: str): typing.Any
  }

  class TrioBackend {
  }

}

package _core {
  class Selector {
      - __init__()
      + start()
      + add_reader(fd: FileDescriptorLike, callback: Callable[[], Any])
      + add_writer(fd: FileDescriptorLike, callback: Callable[[], Any])
      + remove_reader(fd: FileDescriptorLike): bool
      + remove_writer(fd: FileDescriptorLike): bool
      + run()
  }

  class BrokenResourceError {
  }

  class BrokenWorkerProcess {
  }

  class BrokenWorkerIntepreter {
      - __init__(excinfo)
  }

  class BusyResourceError {
      - __init__(action: str)
  }

  class ClosedResourceError {
  }

  class DelimiterNotFound {
      - __init__(max_bytes: int)
  }

  class EndOfStream {
  }

  class IncompleteRead {
      - __init__()
  }

  class TypedAttributeLookupError {
  }

  class WouldBlock {
  }

  class AsyncFile {
      - __init__(fp: IO[AnyStr])
      + wrapped(): IO[AnyStr]
  }

  class Path {
      - __init__()
      + parts(): tuple[str, ...]
      + drive(): str
      + root(): str
      + anchor(): str
      + parents(): Sequence[Path]
      + parent(): Path
      + name(): str
      + suffix(): str
      + suffixes(): list[str]
      + stem(): str
      + as_posix(): str
      + as_uri(): str
      + is_relative_to(other: str | PathLike[str]): bool
      + glob(pattern: str): AsyncIterator[Path]
      + is_absolute(): bool
      + is_reserved(): bool
      + iterdir(): AsyncIterator[Path]
      + joinpath(): Path
      + rglob(pattern: str): AsyncIterator[Path]
      + with_name(name: str): Path
      + with_stem(stem: str): Path
      + with_suffix(suffix: str): Path
      + with_segments(): Path
  }

  class create_memory_object_stream {
  }

  class EventStatistics <<dataclass>> {
      + tasks_waiting: int
  }

  class CapacityLimiterStatistics <<dataclass>> {
      + borrowed_tokens: int
      + total_tokens: float
      + borrowers: tuple[object, ...]
      + tasks_waiting: int
  }

  class LockStatistics <<dataclass>> {
      + locked: bool
      + owner: TaskInfo | None
      + tasks_waiting: int
  }

  class ConditionStatistics <<dataclass>> {
      + tasks_waiting: int
      + lock_statistics: LockStatistics
  }

  class SemaphoreStatistics <<dataclass>> {
      + tasks_waiting: int
  }

  class Event {
      + set()
      + is_set(): bool
      + statistics(): EventStatistics
  }

  class EventAdapter {
      + set()
      + is_set(): bool
      + statistics(): EventStatistics
  }

  class Lock {
      + acquire_nowait()
      + release()
      + locked(): bool
      + statistics(): LockStatistics
  }

  class LockAdapter {
      - __init__()
      + acquire_nowait()
      + release()
      + locked(): bool
      + statistics(): LockStatistics
  }

  class Condition {
      - __init__(lock: Lock | None = None)
      + acquire_nowait()
      + release()
      + locked(): bool
      + notify(n: int = 1)
      + notify_all()
      + statistics(): ConditionStatistics
  }

  class Semaphore {
      - __init__(initial_value: int)
      + acquire_nowait()
      + release()
      + value(): int
      + max_value(): int | None
      + statistics(): SemaphoreStatistics
  }

  class SemaphoreAdapter {
      - __init__(initial_value: int)
      + acquire_nowait()
      + release()
      + value(): int
      + max_value(): int | None
      + statistics(): SemaphoreStatistics
  }

  class CapacityLimiter {
      + total_tokens(): float
      + total_tokens(value: float)
      + borrowed_tokens(): int
      + available_tokens(): float
      + acquire_nowait()
      + acquire_on_behalf_of_nowait(borrower: object)
      + release()
      + release_on_behalf_of(borrower: object)
      + statistics(): CapacityLimiterStatistics
  }

  class CapacityLimiterAdapter {
      - __init__(total_tokens: float)
      + total_tokens(): float
      + total_tokens(value: float)
      + borrowed_tokens(): int
      + available_tokens(): float
      + acquire_nowait()
      + acquire_on_behalf_of_nowait(borrower: object)
      + release()
      + release_on_behalf_of(borrower: object)
      + statistics(): CapacityLimiterStatistics
  }

  class ResourceGuard {
      - __init__(action: str = 'using')
  }

  class CancelScope {
      + cancel()
      + deadline(): float
      + deadline(value: float)
      + cancel_called(): bool
      + cancelled_caught(): bool
      + shield(): bool
      + shield(value: bool)
  }

  class TaskInfo {
      - __init__(id: int, parent_id: int | None, name: str | None, coro: Generator[Any, Any, Any] | Awaitable[Any])
      + has_pending_cancellation(): bool
  }

  class TypedAttributeSet {
  }

  class TypedAttributeProvider {
      + extra_attributes(): Mapping[T_Attr, Callable[[], T_Attr]]
      + extra(attribute: T_Attr): T_Attr
      + extra(attribute: T_Attr, default: T_Default): T_Attr | T_Default
      + extra(attribute, default: object = undefined): object
  }

}

package cachetools {
  class Cache {
      - __init__(maxsize, getsizeof = None)
      + get(key, default = None)
      + pop(key, default = __marker)
      + setdefault(key, default = None)
      + maxsize()
      + currsize()
      + {static} getsizeof(value)
  }

  class FIFOCache {
      - __init__(maxsize, getsizeof = None)
      + popitem()
  }

  class LFUCache {
      - __init__(maxsize, getsizeof = None)
      + popitem()
  }

  class LRUCache {
      - __init__(maxsize, getsizeof = None)
      + popitem()
  }

  class MRUCache {
      - __init__(maxsize, getsizeof = None)
      + popitem()
  }

  class RRCache {
      - __init__(maxsize, choice = random.choice, getsizeof = None)
      + choice()
      + popitem()
  }

  class TTLCache {
      - __init__(maxsize, ttl, timer = time.monotonic, getsizeof = None)
      + ttl()
      + expire(time = None)
      + popitem()
  }

  class TLRUCache {
      - __init__(maxsize, ttu, timer = time.monotonic, getsizeof = None)
      + ttu()
      + expire(time = None)
      + popitem()
  }

}

package chardet {
  class Big5Prober {
      - __init__()
      + charset_name(): str
      + language(): str
  }

  class CharDistributionAnalysis {
      + ENOUGH_DATA_THRESHOLD = 1024
      + SURE_YES = 0.99
      + SURE_NO = 0.01
      + MINIMUM_DATA_THRESHOLD = 3
  --
      - __init__()
      + reset()
      + feed(char: Union[bytes, bytearray], char_len: int)
      + get_confidence(): float
      + got_enough_data(): bool
      + get_order(_: Union[bytes, bytearray]): int
  }

  class EUCTWDistributionAnalysis {
      - __init__()
      + get_order(byte_str: Union[bytes, bytearray]): int
  }

  class EUCKRDistributionAnalysis {
      - __init__()
      + get_order(byte_str: Union[bytes, bytearray]): int
  }

  class JOHABDistributionAnalysis {
      - __init__()
      + get_order(byte_str: Union[bytes, bytearray]): int
  }

  class GB2312DistributionAnalysis {
      - __init__()
      + get_order(byte_str: Union[bytes, bytearray]): int
  }

  class Big5DistributionAnalysis {
      - __init__()
      + get_order(byte_str: Union[bytes, bytearray]): int
  }

  class SJISDistributionAnalysis {
      - __init__()
      + get_order(byte_str: Union[bytes, bytearray]): int
  }

  class EUCJPDistributionAnalysis {
      - __init__()
      + get_order(byte_str: Union[bytes, bytearray]): int
  }

  class CharSetGroupProber {
      - __init__(lang_filter: LanguageFilter = LanguageFilter.NONE)
      + reset()
      + charset_name(): Optional[str]
      + language(): Optional[str]
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
      + get_confidence(): float
  }

  class CharSetProber {
      + SHORTCUT_THRESHOLD = 0.95
  --
      - __init__(lang_filter: LanguageFilter = LanguageFilter.NONE)
      + reset()
      + charset_name(): Optional[str]
      + language(): Optional[str]
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
      + state(): ProbingState
      + get_confidence(): float
      + {static} filter_high_byte_only(buf: Union[bytes, bytearray]): bytes
      + {static} filter_international_words(buf: Union[bytes, bytearray]): bytearray
      + {static} remove_xml_tags(buf: Union[bytes, bytearray]): bytes
  }

  class CodingStateMachine {
      - __init__(sm: CodingStateMachineDict)
      + reset()
      + next_state(c: int): int
      + get_current_charlen(): int
      + get_coding_state_machine(): str
      + language(): str
  }

  class CodingStateMachineDict {
      + class_table: Tuple[int, ...]
      + class_factor: int
      + state_table: Tuple[int, ...]
      + char_len_table: Tuple[int, ...]
      + name: str
      + language: str
  }

  class CP949Prober {
      - __init__()
      + charset_name(): str
      + language(): str
  }

  class InputState {
      + PURE_ASCII = 0
      + ESC_ASCII = 1
      + HIGH_BYTE = 2
  }

  class LanguageFilter {
      + NONE = 0
      + CHINESE_SIMPLIFIED = 1
      + CHINESE_TRADITIONAL = 2
      + JAPANESE = 4
      + KOREAN = 8
      + NON_CJK = 16
      + ALL = 31
      + CHINESE = CHINESE_SIMPLIFIED | CHINESE_TRADITIONAL
      + CJK = CHINESE | JAPANESE | KOREAN
  }

  class ProbingState {
      + DETECTING = 0
      + FOUND_IT = 1
      + NOT_ME = 2
  }

  class MachineState {
      + START = 0
      + ERROR = 1
      + ITS_ME = 2
  }

  class SequenceLikelihood {
      + NEGATIVE = 0
      + UNLIKELY = 1
      + LIKELY = 2
      + POSITIVE = 3
  --
      + {classmethod} get_num_categories(cls): int
  }

  class CharacterCategory {
      + UNDEFINED = 255
      + LINE_BREAK = 254
      + SYMBOL = 253
      + DIGIT = 252
      + CONTROL = 251
  }

  class EscCharSetProber {
      - __init__(lang_filter: LanguageFilter = LanguageFilter.NONE)
      + reset()
      + charset_name(): Optional[str]
      + language(): Optional[str]
      + get_confidence(): float
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
  }

  class EUCJPProber {
      - __init__()
      + reset()
      + charset_name(): str
      + language(): str
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
      + get_confidence(): float
  }

  class EUCKRProber {
      - __init__()
      + charset_name(): str
      + language(): str
  }

  class EUCTWProber {
      - __init__()
      + charset_name(): str
      + language(): str
  }

  class GB2312Prober {
      - __init__()
      + charset_name(): str
      + language(): str
  }

  class HebrewProber {
      + SPACE = 32
      + FINAL_KAF = 234
      + NORMAL_KAF = 235
      + FINAL_MEM = 237
      + NORMAL_MEM = 238
      + FINAL_NUN = 239
      + NORMAL_NUN = 240
      + FINAL_PE = 243
      + NORMAL_PE = 244
      + FINAL_TSADI = 245
      + NORMAL_TSADI = 246
      + MIN_FINAL_CHAR_DISTANCE = 5
      + MIN_MODEL_DISTANCE = 0.01
      + VISUAL_HEBREW_NAME = 'ISO-8859-8'
      + LOGICAL_HEBREW_NAME = 'windows-1255'
  --
      - __init__()
      + reset()
      + set_model_probers(logical_prober: SingleByteCharSetProber, visual_prober: SingleByteCharSetProber)
      + is_final(c: int): bool
      + is_non_final(c: int): bool
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
      + charset_name(): str
      + language(): str
      + state(): ProbingState
  }

  class JOHABProber {
      - __init__()
      + charset_name(): str
      + language(): str
  }

  class JapaneseContextAnalysis {
      + NUM_OF_CATEGORY = 6
      + DONT_KNOW = -1
      + ENOUGH_REL_THRESHOLD = 100
      + MAX_REL_THRESHOLD = 1000
      + MINIMUM_DATA_THRESHOLD = 4
  --
      - __init__()
      + reset()
      + feed(byte_str: Union[bytes, bytearray], num_bytes: int)
      + got_enough_data(): bool
      + get_confidence(): float
      + get_order(_: Union[bytes, bytearray]): Tuple[int, int]
  }

  class SJISContextAnalysis {
      - __init__()
      + charset_name(): str
      + get_order(byte_str: Union[bytes, bytearray]): Tuple[int, int]
  }

  class EUCJPContextAnalysis {
      + get_order(byte_str: Union[bytes, bytearray]): Tuple[int, int]
  }

  class Latin1Prober {
      - __init__()
      + reset()
      + charset_name(): str
      + language(): str
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
      + get_confidence(): float
  }

  class MacRomanProber {
      - __init__()
      + reset()
      + charset_name(): str
      + language(): str
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
      + get_confidence(): float
  }

  class MultiByteCharSetProber {
      - __init__(lang_filter: LanguageFilter = LanguageFilter.NONE)
      + reset()
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
      + get_confidence(): float
  }

  class MBCSGroupProber {
      - __init__(lang_filter: LanguageFilter = LanguageFilter.NONE)
  }

  class ResultDict {
      + encoding: Optional[str]
      + confidence: float
      + language: Optional[str]
  }

  class SingleByteCharSetModel {
      + charset_name: str
      + language: str
      + char_to_order_map: Dict[int, int]
      + language_model: Dict[int, Dict[int, int]]
      + typical_positive_ratio: float
      + keep_ascii_letters: bool
      + alphabet: str
  }

  class SingleByteCharSetProber {
      + SAMPLE_SIZE = 64
      + SB_ENOUGH_REL_THRESHOLD = 1024
      + POSITIVE_SHORTCUT_THRESHOLD = 0.95
      + NEGATIVE_SHORTCUT_THRESHOLD = 0.05
  --
      - __init__(model: SingleByteCharSetModel, is_reversed: bool = False, name_prober: Optional[CharSetProber] = None)
      + reset()
      + charset_name(): Optional[str]
      + language(): Optional[str]
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
      + get_confidence(): float
  }

  class SBCSGroupProber {
      - __init__()
  }

  class SJISProber {
      - __init__()
      + reset()
      + charset_name(): str
      + language(): str
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
      + get_confidence(): float
  }

  class UniversalDetector {
      + MINIMUM_THRESHOLD = 0.2
      + HIGH_BYTE_DETECTOR = re.compile(b'[\x80-\xff]')
      + ESC_DETECTOR = re.compile(b'(\x1b|~{)')
      + WIN_BYTE_DETECTOR = re.compile(b'[\x80-\x9f]')
      + ISO_WIN_MAP = {'iso-8859-1': 'Windows-1252', 'iso-8859-2': 'Windows-1250', 'iso-8859-5': 'Windows-1251', 'iso-8859-6': 'Windows-1256', 'iso-8859-7': 'Windows-1253', 'iso-8859-8': 'Windows-1255', 'iso-8859-9': 'Windows-1254', 'iso-8859-13': 'Windows-1257'}
      + LEGACY_MAP = {'ascii': 'Windows-1252', 'iso-8859-1': 'Windows-1252', 'tis-620': 'ISO-8859-11', 'iso-8859-9': 'Windows-1254', 'gb2312': 'GB18030', 'euc-kr': 'CP949', 'utf-16le': 'UTF-16'}
  --
      - __init__(lang_filter: LanguageFilter = LanguageFilter.ALL, should_rename_legacy: bool = False)
      + input_state(): int
      + has_win_bytes(): bool
      + charset_probers(): List[CharSetProber]
      + reset()
      + feed(byte_str: Union[bytes, bytearray])
      + close(): ResultDict
  }

  class UTF1632Prober {
      + MIN_CHARS_FOR_DETECTION = 20
      + EXPECTED_RATIO = 0.94
  --
      - __init__()
      + reset()
      + charset_name(): str
      + language(): str
      + approx_32bit_chars(): float
      + approx_16bit_chars(): float
      + is_likely_utf32be(): bool
      + is_likely_utf32le(): bool
      + is_likely_utf16be(): bool
      + is_likely_utf16le(): bool
      + validate_utf32_characters(quad: List[int])
      + validate_utf16_characters(pair: List[int])
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
      + state(): ProbingState
      + get_confidence(): float
  }

  class UTF8Prober {
      + ONE_CHAR_PROB = 0.5
  --
      - __init__()
      + reset()
      + charset_name(): str
      + language(): str
      + feed(byte_str: Union[bytes, bytearray]): ProbingState
      + get_confidence(): float
  }

}

package cli {
  class Command {
      + usage: str = ''
      + ignore_require_venv: bool = False
  --
      - __init__(name: str, summary: str, isolated: bool = False)
      + add_options()
      + handle_pip_version_check(options: Values)
      + run(options: Values, args: List[str]): int
      + parse_args(args: List[str]): Tuple[Values, List[str]]
      + main(args: List[str]): int
  }

  class PipOption {
      + TYPES = Option.TYPES + ('path', 'package_name')
      + TYPE_CHECKER = Option.TYPE_CHECKER.copy()
  }

  class CommandContextMixIn {
      - __init__()
      + main_context(): Generator[None, None, None]
      + enter_context(context_provider: ContextManager[_T]): _T
  }

  class SessionCommandMixin {
      - __init__()
      + get_default_session(options: Values): 'PipSession'
  }

  class IndexGroupCommand {
      + handle_pip_version_check(options: Values)
  }

  class PrettyHelpFormatter {
      - __init__()
      + format_option_strings(option: optparse.Option): str
      + format_heading(heading: str): str
      + format_usage(usage: str): str
      + format_description(description: Optional[str]): str
      + format_epilog(epilog: Optional[str]): str
      + indent_lines(text: str, indent: str): str
  }

  class UpdatingDefaultsHelpFormatter {
      + expand_default(option: optparse.Option): str
  }

  class CustomOptionParser {
      + insert_option_group(idx: int): optparse.OptionGroup
      + option_list_all(): List[optparse.Option]
  }

  class ConfigOptionParser {
      - __init__()
      + check_default(option: optparse.Option, key: str, val): Any
      + get_default_values(): optparse.Values
      + error(msg: str)
  }

  class RequirementCommand {
      - __init__()
      + {static} determine_resolver_variant(options: Values): str
      + {classmethod} make_requirement_preparer(cls, temp_build_dir: TempDirectory, options: Values, build_tracker: BuildTracker, session: PipSession, finder: PackageFinder, use_user_site: bool, download_dir: Optional[str] = None, verbosity: int = 0): RequirementPreparer
      + {classmethod} make_resolver(cls, preparer: RequirementPreparer, finder: PackageFinder, options: Values, wheel_cache: Optional[WheelCache] = None, use_user_site: bool = False, ignore_installed: bool = True, ignore_requires_python: bool = False, force_reinstall: bool = False, upgrade_strategy: str = 'to-satisfy-only', use_pep517: Optional[bool] = None, py_version_info: Optional[Tuple[int, ...]] = None): BaseResolver
      + get_requirements(args: List[str], options: Values, finder: PackageFinder, session: PipSession): List[InstallRequirement]
      + {static} trace_basic_info(finder: PackageFinder)
  }

  class SpinnerInterface {
      + spin()
      + finish(final_status: str)
  }

  class InteractiveSpinner {
      - __init__(message: str, file: Optional[IO[str]] = None, spin_chars: str = '-\\|/', min_update_interval_seconds: float = 0.125)
      + spin()
      + finish(final_status: str)
  }

  class NonInteractiveSpinner {
      - __init__(message: str, min_update_interval_seconds: float = 60.0)
      + spin()
      + finish(final_status: str)
  }

  class RateLimiter {
      - __init__(min_update_interval_seconds: float)
      + ready(): bool
      + reset()
  }

}

package metadata {
  class Language {
      - __init__(name: Optional[str] = None, iso_code: Optional[str] = None, use_ascii: bool = True, charsets: Optional[List[str]] = None, alphabet: Optional[str] = None, wiki_start_pages: Optional[List[str]] = None)
  }

  class BaseEntryPoint {
      + name(): str
      + value(): str
      + group(): str
  }

  class RequiresEntry {
      + requirement: str
      + extra: str
      + marker: str
  }

  class BaseDistribution {
      + {classmethod} from_directory(cls, directory: str): 'BaseDistribution'
      + {classmethod} from_metadata_file_contents(cls, metadata_contents: bytes, filename: str, project_name: str): 'BaseDistribution'
      + {classmethod} from_wheel(cls, wheel: 'Wheel', name: str): 'BaseDistribution'
      + location(): Optional[str]
      + editable_project_location(): Optional[str]
      + installed_location(): Optional[str]
      + info_location(): Optional[str]
      + installed_by_distutils(): bool
      + installed_as_egg(): bool
      + installed_with_setuptools_egg_info(): bool
      + installed_with_dist_info(): bool
      + canonical_name(): NormalizedName
      + version(): Version
      + raw_version(): str
      + setuptools_filename(): str
      + direct_url(): Optional[DirectUrl]
      + installer(): str
      + requested(): bool
      + editable(): bool
      + local(): bool
      + in_usersite(): bool
      + in_site_packages(): bool
      + is_file(path: InfoPath): bool
      + iter_distutils_script_names(): Iterator[str]
      + read_text(path: InfoPath): str
      + iter_entry_points(): Iterable[BaseEntryPoint]
      + metadata(): email.message.Message
      + metadata_dict(): Dict[str, Any]
      + metadata_version(): Optional[str]
      + raw_name(): str
      + requires_python(): SpecifierSet
      + iter_dependencies(extras: Collection[str] = ()): Iterable[Requirement]
      + iter_raw_dependencies(): Iterable[str]
      + iter_provided_extras(): Iterable[NormalizedName]
      + iter_declared_entries(): Optional[Iterator[str]]
  }

  class BaseEnvironment {
      + {classmethod} default(cls): 'BaseEnvironment'
      + {classmethod} from_paths(cls, paths: Optional[List[str]]): 'BaseEnvironment'
      + get_distribution(name: str): Optional['BaseDistribution']
      + iter_all_distributions(): Iterator[BaseDistribution]
      + iter_installed_distributions(local_only: bool = True, skip: Container[str] = stdlib_pkgs, include_editables: bool = True, editables_only: bool = False, user_only: bool = False): Iterator[BaseDistribution]
  }

  class Wheel {
      + location: str
  --
      + as_zipfile(): zipfile.ZipFile
  }

  class FilesystemWheel {
      - __init__(location: str)
      + as_zipfile(): zipfile.ZipFile
  }

  class MemoryWheel {
      - __init__(location: str, stream: IO[bytes])
      + as_zipfile(): zipfile.ZipFile
  }

  class EntryPoint {
      + name: str
      + value: str
      + group: str
  }

  class InMemoryMetadata {
      - __init__(metadata: Mapping[str, bytes], wheel_name: str)
      + has_metadata(name: str): bool
      + get_metadata(name: str): str
      + get_metadata_lines(name: str): Iterable[str]
      + metadata_isdir(name: str): bool
      + metadata_listdir(name: str): List[str]
      + run_script(script_name: str, namespace: str)
  }

  class Distribution {
      - __init__(dist: pkg_resources.Distribution)
      + {classmethod} from_directory(cls, directory: str): BaseDistribution
      + {classmethod} from_metadata_file_contents(cls, metadata_contents: bytes, filename: str, project_name: str): BaseDistribution
      + {classmethod} from_wheel(cls, wheel: Wheel, name: str): BaseDistribution
      + location(): Optional[str]
      + installed_location(): Optional[str]
      + info_location(): Optional[str]
      + installed_by_distutils(): bool
      + canonical_name(): NormalizedName
      + version(): Version
      + raw_version(): str
      + is_file(path: InfoPath): bool
      + iter_distutils_script_names(): Iterator[str]
      + read_text(path: InfoPath): str
      + iter_entry_points(): Iterable[BaseEntryPoint]
      + iter_dependencies(extras: Collection[str] = ()): Iterable[Requirement]
      + iter_provided_extras(): Iterable[NormalizedName]
  }

  class Environment {
      - __init__(ws: pkg_resources.WorkingSet)
      + {classmethod} default(cls): BaseEnvironment
      + {classmethod} from_paths(cls, paths: Optional[List[str]]): BaseEnvironment
      + get_distribution(name: str): Optional[BaseDistribution]
  }

  class Backend {
      + NAME: 'Literal["importlib", "pkg_resources"]'
      + Distribution: Type[BaseDistribution]
      + Environment: Type[BaseEnvironment]
  }

}

package charset_normalizer {
  class ResultDict {
      + encoding: str | None
      + language: str
      + confidence: float | None
  }

  class MessDetectorPlugin {
      + eligible(character: str): bool
      + feed(character: str)
      + reset()
      + ratio(): float
  }

  class TooManySymbolOrPunctuationPlugin {
      - __init__()
      + eligible(character: str): bool
      + feed(character: str)
      + reset()
      + ratio(): float
  }

  class TooManyAccentuatedPlugin {
      - __init__()
      + eligible(character: str): bool
      + feed(character: str)
      + reset()
      + ratio(): float
  }

  class UnprintablePlugin {
      - __init__()
      + eligible(character: str): bool
      + feed(character: str)
      + reset()
      + ratio(): float
  }

  class SuspiciousDuplicateAccentPlugin {
      - __init__()
      + eligible(character: str): bool
      + feed(character: str)
      + reset()
      + ratio(): float
  }

  class SuspiciousRange {
      - __init__()
      + eligible(character: str): bool
      + feed(character: str)
      + reset()
      + ratio(): float
  }

  class SuperWeirdWordPlugin {
      - __init__()
      + eligible(character: str): bool
      + feed(character: str)
      + reset()
      + ratio(): float
  }

  class CjkInvalidStopPlugin {
      - __init__()
      + eligible(character: str): bool
      + feed(character: str)
      + reset()
      + ratio(): float
  }

  class ArchaicUpperLowerPlugin {
      - __init__()
      + eligible(character: str): bool
      + feed(character: str)
      + reset()
      + ratio(): float
  }

  class ArabicIsolatedFormPlugin {
      - __init__()
      + reset()
      + eligible(character: str): bool
      + feed(character: str)
      + ratio(): float
  }

  class CharsetMatch {
      - __init__(payload: bytes, guessed_encoding: str, mean_mess_ratio: float, has_sig_or_bom: bool, languages: CoherenceMatches, decoded_payload: str | None = None, preemptive_declaration: str | None = None)
      + multi_byte_usage(): float
      + add_submatch(other: CharsetMatch)
      + encoding(): str
      + encoding_aliases(): list[str]
      + bom(): bool
      + byte_order_mark(): bool
      + languages(): list[str]
      + language(): str
      + chaos(): float
      + coherence(): float
      + percent_chaos(): float
      + percent_coherence(): float
      + raw(): bytes
      + submatch(): list[CharsetMatch]
      + has_submatch(): bool
      + alphabets(): list[str]
      + could_be_from_charset(): list[str]
      + output(encoding: str = 'utf_8'): bytes
      + fingerprint(): str
  }

  class CharsetMatches {
      - __init__(results: list[CharsetMatch] | None = None)
      + append(item: CharsetMatch)
      + best(): CharsetMatch | None
      + first(): CharsetMatch | None
  }

  class CliDetectionResult {
      - __init__(path: str, encoding: str | None, encoding_aliases: list[str], alternative_encodings: list[str], language: str, alphabets: list[str], has_sig_or_bom: bool, chaos: float, coherence: float, unicode_path: str | None, is_preferred: bool)
      + to_json(): str
  }

}

package click {
  class ParameterSource {
      + COMMANDLINE = enum.auto()
      + ENVIRONMENT = enum.auto()
      + DEFAULT = enum.auto()
      + DEFAULT_MAP = enum.auto()
      + PROMPT = enum.auto()
  }

  class Context {
      + formatter_class: t.Type['HelpFormatter'] = HelpFormatter
  --
      - __init__(command: 'Command', parent: t.Optional['Context'] = None, info_name: t.Optional[str] = None, obj: t.Optional[t.Any] = None, auto_envvar_prefix: t.Optional[str] = None, default_map: t.Optional[t.MutableMapping[str, t.Any]] = None, terminal_width: t.Optional[int] = None, max_content_width: t.Optional[int] = None, resilient_parsing: bool = False, allow_extra_args: t.Optional[bool] = None, allow_interspersed_args: t.Optional[bool] = None, ignore_unknown_options: t.Optional[bool] = None, help_option_names: t.Optional[t.List[str]] = None, token_normalize_func: t.Optional[t.Callable[[str], str]] = None, color: t.Optional[bool] = None, show_default: t.Optional[bool] = None)
      + to_info_dict(): t.Dict[str, t.Any]
      + scope(cleanup: bool = True): t.Iterator['Context']
      + meta(): t.Dict[str, t.Any]
      + make_formatter(): HelpFormatter
      + with_resource(context_manager: t.ContextManager[V]): V
      + call_on_close(f: t.Callable[..., t.Any]): t.Callable[..., t.Any]
      + close()
      + command_path(): str
      + find_root(): 'Context'
      + find_object(object_type: t.Type[V]): t.Optional[V]
      + ensure_object(object_type: t.Type[V]): V
      + lookup_default(name: str, call: 'te.Literal[True]' = True): t.Optional[t.Any]
      + lookup_default(name: str, call: 'te.Literal[False]' = ...): t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]
      + lookup_default(name: str, call: bool = True): t.Optional[t.Any]
      + fail(message: str): 'te.NoReturn'
      + abort(): 'te.NoReturn'
      + exit(code: int = 0): 'te.NoReturn'
      + get_usage(): str
      + get_help(): str
      + invoke(__self, __callback: 't.Callable[..., V]'): V
      + invoke(__self, __callback: 'Command'): t.Any
      + invoke(__self, __callback: t.Union['Command', 't.Callable[..., V]']): t.Union[t.Any, V]
      + forward(__self, __cmd: 'Command'): t.Any
      + set_parameter_source(name: str, source: ParameterSource)
      + get_parameter_source(name: str): t.Optional[ParameterSource]
  }

  class BaseCommand {
      + context_class: t.Type[Context] = Context
      + allow_extra_args = False
      + allow_interspersed_args = True
      + ignore_unknown_options = False
  --
      - __init__(name: t.Optional[str], context_settings: t.Optional[t.MutableMapping[str, t.Any]] = None)
      + to_info_dict(ctx: Context): t.Dict[str, t.Any]
      + get_usage(ctx: Context): str
      + get_help(ctx: Context): str
      + make_context(info_name: t.Optional[str], args: t.List[str], parent: t.Optional[Context] = None): Context
      + parse_args(ctx: Context, args: t.List[str]): t.List[str]
      + invoke(ctx: Context): t.Any
      + shell_complete(ctx: Context, incomplete: str): t.List['CompletionItem']
      + main(args: t.Optional[t.Sequence[str]] = None, prog_name: t.Optional[str] = None, complete_var: t.Optional[str] = None, standalone_mode: 'te.Literal[True]' = True): 'te.NoReturn'
      + main(args: t.Optional[t.Sequence[str]] = None, prog_name: t.Optional[str] = None, complete_var: t.Optional[str] = None, standalone_mode: bool = ...): t.Any
      + main(args: t.Optional[t.Sequence[str]] = None, prog_name: t.Optional[str] = None, complete_var: t.Optional[str] = None, standalone_mode: bool = True, windows_expand_args: bool = True): t.Any
  }

  class Command {
      - __init__(name: t.Optional[str], context_settings: t.Optional[t.MutableMapping[str, t.Any]] = None, callback: t.Optional[t.Callable[..., t.Any]] = None, params: t.Optional[t.List['Parameter']] = None, help: t.Optional[str] = None, epilog: t.Optional[str] = None, short_help: t.Optional[str] = None, options_metavar: t.Optional[str] = '[OPTIONS]', add_help_option: bool = True, no_args_is_help: bool = False, hidden: bool = False, deprecated: bool = False)
      + to_info_dict(ctx: Context): t.Dict[str, t.Any]
      + get_usage(ctx: Context): str
      + get_params(ctx: Context): t.List['Parameter']
      + format_usage(ctx: Context, formatter: HelpFormatter)
      + collect_usage_pieces(ctx: Context): t.List[str]
      + get_help_option_names(ctx: Context): t.List[str]
      + get_help_option(ctx: Context): t.Optional['Option']
      + make_parser(ctx: Context): OptionParser
      + get_help(ctx: Context): str
      + get_short_help_str(limit: int = 45): str
      + format_help(ctx: Context, formatter: HelpFormatter)
      + format_help_text(ctx: Context, formatter: HelpFormatter)
      + format_options(ctx: Context, formatter: HelpFormatter)
      + format_epilog(ctx: Context, formatter: HelpFormatter)
      + parse_args(ctx: Context, args: t.List[str]): t.List[str]
      + invoke(ctx: Context): t.Any
      + shell_complete(ctx: Context, incomplete: str): t.List['CompletionItem']
  }

  class MultiCommand {
      + allow_extra_args = True
      + allow_interspersed_args = False
  --
      - __init__(name: t.Optional[str] = None, invoke_without_command: bool = False, no_args_is_help: t.Optional[bool] = None, subcommand_metavar: t.Optional[str] = None, chain: bool = False, result_callback: t.Optional[t.Callable[..., t.Any]] = None)
      + to_info_dict(ctx: Context): t.Dict[str, t.Any]
      + collect_usage_pieces(ctx: Context): t.List[str]
      + format_options(ctx: Context, formatter: HelpFormatter)
      + result_callback(replace: bool = False): t.Callable[[F], F]
      + format_commands(ctx: Context, formatter: HelpFormatter)
      + parse_args(ctx: Context, args: t.List[str]): t.List[str]
      + invoke(ctx: Context): t.Any
      + resolve_command(ctx: Context, args: t.List[str]): t.Tuple[t.Optional[str], t.Optional[Command], t.List[str]]
      + get_command(ctx: Context, cmd_name: str): t.Optional[Command]
      + list_commands(ctx: Context): t.List[str]
      + shell_complete(ctx: Context, incomplete: str): t.List['CompletionItem']
  }

  class Group {
      + command_class: t.Optional[t.Type[Command]] = None
      + group_class: t.Optional[t.Union[t.Type['Group'], t.Type[type]]] = None
  --
      - __init__(name: t.Optional[str] = None, commands: t.Optional[t.Union[t.MutableMapping[str, Command], t.Sequence[Command]]] = None)
      + add_command(cmd: Command, name: t.Optional[str] = None)
      + command(__func: t.Callable[..., t.Any]): Command
      + command(): t.Callable[[t.Callable[..., t.Any]], Command]
      + command(): t.Union[t.Callable[[t.Callable[..., t.Any]], Command], Command]
      + group(__func: t.Callable[..., t.Any]): 'Group'
      + group(): t.Callable[[t.Callable[..., t.Any]], 'Group']
      + group(): t.Union[t.Callable[[t.Callable[..., t.Any]], 'Group'], 'Group']
      + get_command(ctx: Context, cmd_name: str): t.Optional[Command]
      + list_commands(ctx: Context): t.List[str]
  }

  class CommandCollection {
      - __init__(name: t.Optional[str] = None, sources: t.Optional[t.List[MultiCommand]] = None)
      + add_source(multi_cmd: MultiCommand)
      + get_command(ctx: Context, cmd_name: str): t.Optional[Command]
      + list_commands(ctx: Context): t.List[str]
  }

  class Parameter {
      + param_type_name = 'parameter'
  --
      - __init__(param_decls: t.Optional[t.Sequence[str]] = None, type: t.Optional[t.Union[types.ParamType, t.Any]] = None, required: bool = False, default: t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]] = None, callback: t.Optional[t.Callable[[Context, 'Parameter', t.Any], t.Any]] = None, nargs: t.Optional[int] = None, multiple: bool = False, metavar: t.Optional[str] = None, expose_value: bool = True, is_eager: bool = False, envvar: t.Optional[t.Union[str, t.Sequence[str]]] = None, shell_complete: t.Optional[t.Callable[[Context, 'Parameter', str], t.Union[t.List['CompletionItem'], t.List[str]]]] = None)
      + to_info_dict(): t.Dict[str, t.Any]
      + human_readable_name(): str
      + make_metavar(): str
      + get_default(ctx: Context, call: 'te.Literal[True]' = True): t.Optional[t.Any]
      + get_default(ctx: Context, call: bool = ...): t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]
      + get_default(ctx: Context, call: bool = True): t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]
      + add_to_parser(parser: OptionParser, ctx: Context)
      + consume_value(ctx: Context, opts: t.Mapping[str, t.Any]): t.Tuple[t.Any, ParameterSource]
      + type_cast_value(ctx: Context, value: t.Any): t.Any
      + value_is_missing(value: t.Any): bool
      + process_value(ctx: Context, value: t.Any): t.Any
      + resolve_envvar_value(ctx: Context): t.Optional[str]
      + value_from_envvar(ctx: Context): t.Optional[t.Any]
      + handle_parse_result(ctx: Context, opts: t.Mapping[str, t.Any], args: t.List[str]): t.Tuple[t.Any, t.List[str]]
      + get_help_record(ctx: Context): t.Optional[t.Tuple[str, str]]
      + get_usage_pieces(ctx: Context): t.List[str]
      + get_error_hint(ctx: Context): str
      + shell_complete(ctx: Context, incomplete: str): t.List['CompletionItem']
  }

  class Option {
      + param_type_name = 'option'
  --
      - __init__(param_decls: t.Optional[t.Sequence[str]] = None, show_default: t.Union[bool, str, None] = None, prompt: t.Union[bool, str] = False, confirmation_prompt: t.Union[bool, str] = False, prompt_required: bool = True, hide_input: bool = False, is_flag: t.Optional[bool] = None, flag_value: t.Optional[t.Any] = None, multiple: bool = False, count: bool = False, allow_from_autoenv: bool = True, type: t.Optional[t.Union[types.ParamType, t.Any]] = None, help: t.Optional[str] = None, hidden: bool = False, show_choices: bool = True, show_envvar: bool = False)
      + to_info_dict(): t.Dict[str, t.Any]
      + add_to_parser(parser: OptionParser, ctx: Context)
      + get_help_record(ctx: Context): t.Optional[t.Tuple[str, str]]
      + get_default(ctx: Context, call: 'te.Literal[True]' = True): t.Optional[t.Any]
      + get_default(ctx: Context, call: bool = ...): t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]
      + get_default(ctx: Context, call: bool = True): t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]
      + prompt_for_value(ctx: Context): t.Any
      + resolve_envvar_value(ctx: Context): t.Optional[str]
      + value_from_envvar(ctx: Context): t.Optional[t.Any]
      + consume_value(ctx: Context, opts: t.Mapping[str, 'Parameter']): t.Tuple[t.Any, ParameterSource]
  }

  class Argument {
      + param_type_name = 'argument'
  --
      - __init__(param_decls: t.Sequence[str], required: t.Optional[bool] = None)
      + human_readable_name(): str
      + make_metavar(): str
      + get_usage_pieces(ctx: Context): t.List[str]
      + get_error_hint(ctx: Context): str
      + add_to_parser(parser: OptionParser, ctx: Context)
  }

  class HelpOption {
      - __init__(param_decls: t.Optional[t.Sequence[str]] = None)
      + {static} show_help(ctx: Context, param: Parameter, value: bool)
  }

  class ClickException {
      + exit_code = 1
  --
      - __init__(message: str)
      + format_message(): str
      + show(file: t.Optional[t.IO[t.Any]] = None)
  }

  class UsageError {
      + exit_code = 2
  --
      - __init__(message: str, ctx: t.Optional['Context'] = None)
      + show(file: t.Optional[t.IO[t.Any]] = None)
  }

  class BadParameter {
      - __init__(message: str, ctx: t.Optional['Context'] = None, param: t.Optional['Parameter'] = None, param_hint: t.Optional[str] = None)
      + format_message(): str
  }

  class MissingParameter {
      - __init__(message: t.Optional[str] = None, ctx: t.Optional['Context'] = None, param: t.Optional['Parameter'] = None, param_hint: t.Optional[str] = None, param_type: t.Optional[str] = None)
      + format_message(): str
  }

  class NoSuchOption {
      - __init__(option_name: str, message: t.Optional[str] = None, possibilities: t.Optional[t.Sequence[str]] = None, ctx: t.Optional['Context'] = None)
      + format_message(): str
  }

  class BadOptionUsage {
      - __init__(option_name: str, message: str, ctx: t.Optional['Context'] = None)
  }

  class BadArgumentUsage {
  }

  class FileError {
      - __init__(filename: str, hint: t.Optional[str] = None)
      + format_message(): str
  }

  class Abort {
  }

  class Exit {
      - __init__(code: int = 0)
  }

  class HelpFormatter {
      - __init__(indent_increment: int = 2, width: t.Optional[int] = None, max_width: t.Optional[int] = None)
      + write(string: str)
      + indent()
      + dedent()
      + write_usage(prog: str, args: str = '', prefix: t.Optional[str] = None)
      + write_heading(heading: str)
      + write_paragraph()
      + write_text(text: str)
      + write_dl(rows: t.Sequence[t.Tuple[str, str]], col_max: int = 30, col_spacing: int = 2)
      + section(name: str): t.Iterator[None]
      + indentation(): t.Iterator[None]
      + getvalue(): str
  }

  class Option {
      - __init__(obj: 'CoreOption', opts: t.Sequence[str], dest: t.Optional[str], action: t.Optional[str] = None, nargs: int = 1, const: t.Optional[t.Any] = None)
      + takes_value(): bool
      + process(value: t.Any, state: 'ParsingState')
  }

  class Argument {
      - __init__(obj: 'CoreArgument', dest: t.Optional[str], nargs: int = 1)
      + process(value: t.Union[t.Optional[str], t.Sequence[t.Optional[str]]], state: 'ParsingState')
  }

  class ParsingState {
      - __init__(rargs: t.List[str])
  }

  class OptionParser {
      - __init__(ctx: t.Optional['Context'] = None)
      + add_option(obj: 'CoreOption', opts: t.Sequence[str], dest: t.Optional[str], action: t.Optional[str] = None, nargs: int = 1, const: t.Optional[t.Any] = None)
      + add_argument(obj: 'CoreArgument', dest: t.Optional[str], nargs: int = 1)
      + parse_args(args: t.List[str]): t.Tuple[t.Dict[str, t.Any], t.List[str], t.List['CoreParameter']]
  }

  class CompletionItem {
      - __init__(value: t.Any, type: str = 'plain', help: t.Optional[str] = None)
  }

  class ShellComplete {
      + name: t.ClassVar[str]
      + source_template: t.ClassVar[str]
  --
      - __init__(cli: BaseCommand, ctx_args: t.MutableMapping[str, t.Any], prog_name: str, complete_var: str)
      + func_name(): str
      + source_vars(): t.Dict[str, t.Any]
      + source(): str
      + get_completion_args(): t.Tuple[t.List[str], str]
      + get_completions(args: t.List[str], incomplete: str): t.List[CompletionItem]
      + format_completion(item: CompletionItem): str
      + complete(): str
  }

  class BashComplete {
      + name = 'bash'
      + source_template = _SOURCE_BASH
  --
      + source(): str
      + get_completion_args(): t.Tuple[t.List[str], str]
      + format_completion(item: CompletionItem): str
  }

  class ZshComplete {
      + name = 'zsh'
      + source_template = _SOURCE_ZSH
  --
      + get_completion_args(): t.Tuple[t.List[str], str]
      + format_completion(item: CompletionItem): str
  }

  class FishComplete {
      + name = 'fish'
      + source_template = _SOURCE_FISH
  --
      + get_completion_args(): t.Tuple[t.List[str], str]
      + format_completion(item: CompletionItem): str
  }

  class EchoingStdin {
      - __init__(input: t.BinaryIO, output: t.BinaryIO)
      + read(n: int = -1): bytes
      + read1(n: int = -1): bytes
      + readline(n: int = -1): bytes
      + readlines(): t.List[bytes]
  }

  class Result {
      - __init__(runner: 'CliRunner', stdout_bytes: bytes, stderr_bytes: t.Optional[bytes], return_value: t.Any, exit_code: int, exception: t.Optional[BaseException], exc_info: t.Optional[t.Tuple[t.Type[BaseException], BaseException, TracebackType]] = None)
      + output(): str
      + stdout(): str
      + stderr(): str
  }

  class CliRunner {
      - __init__(charset: str = 'utf-8', env: t.Optional[t.Mapping[str, t.Optional[str]]] = None, echo_stdin: bool = False, mix_stderr: bool = True)
      + get_default_prog_name(cli: 'BaseCommand'): str
      + make_env(overrides: t.Optional[t.Mapping[str, t.Optional[str]]] = None): t.Mapping[str, t.Optional[str]]
      + isolation(input: t.Optional[t.Union[str, bytes, t.IO[t.Any]]] = None, env: t.Optional[t.Mapping[str, t.Optional[str]]] = None, color: bool = False): t.Iterator[t.Tuple[io.BytesIO, t.Optional[io.BytesIO]]]
      + invoke(cli: 'BaseCommand', args: t.Optional[t.Union[str, t.Sequence[str]]] = None, input: t.Optional[t.Union[str, bytes, t.IO[t.Any]]] = None, env: t.Optional[t.Mapping[str, t.Optional[str]]] = None, catch_exceptions: bool = True, color: bool = False): Result
      + isolated_filesystem(temp_dir: t.Optional[t.Union[str, 'os.PathLike[str]']] = None): t.Iterator[str]
  }

  class ParamType {
      + is_composite: t.ClassVar[bool] = False
      + arity: t.ClassVar[int] = 1
      + name: str
      + envvar_list_splitter: t.ClassVar[t.Optional[str]] = None
  --
      + to_info_dict(): t.Dict[str, t.Any]
      + get_metavar(param: 'Parameter'): t.Optional[str]
      + get_missing_message(param: 'Parameter'): t.Optional[str]
      + convert(value: t.Any, param: t.Optional['Parameter'], ctx: t.Optional['Context']): t.Any
      + split_envvar_value(rv: str): t.Sequence[str]
      + fail(message: str, param: t.Optional['Parameter'] = None, ctx: t.Optional['Context'] = None): 't.NoReturn'
      + shell_complete(ctx: 'Context', param: 'Parameter', incomplete: str): t.List['CompletionItem']
  }

  class CompositeParamType {
      + is_composite = True
  --
      + arity(): int
  }

  class FuncParamType {
      - __init__(func: t.Callable[[t.Any], t.Any])
      + to_info_dict(): t.Dict[str, t.Any]
      + convert(value: t.Any, param: t.Optional['Parameter'], ctx: t.Optional['Context']): t.Any
  }

  class UnprocessedParamType {
      + name = 'text'
  --
      + convert(value: t.Any, param: t.Optional['Parameter'], ctx: t.Optional['Context']): t.Any
  }

  class StringParamType {
      + name = 'text'
  --
      + convert(value: t.Any, param: t.Optional['Parameter'], ctx: t.Optional['Context']): t.Any
  }

  class Choice {
      + name = 'choice'
  --
      - __init__(choices: t.Sequence[str], case_sensitive: bool = True)
      + to_info_dict(): t.Dict[str, t.Any]
      + get_metavar(param: 'Parameter'): str
      + get_missing_message(param: 'Parameter'): str
      + convert(value: t.Any, param: t.Optional['Parameter'], ctx: t.Optional['Context']): t.Any
      + shell_complete(ctx: 'Context', param: 'Parameter', incomplete: str): t.List['CompletionItem']
  }

  class DateTime {
      + name = 'datetime'
  --
      - __init__(formats: t.Optional[t.Sequence[str]] = None)
      + to_info_dict(): t.Dict[str, t.Any]
      + get_metavar(param: 'Parameter'): str
      + convert(value: t.Any, param: t.Optional['Parameter'], ctx: t.Optional['Context']): t.Any
  }

  class IntParamType {
      + name = 'integer'
  }

  class IntRange {
      + name = 'integer range'
  }

  class FloatParamType {
      + name = 'float'
  }

  class FloatRange {
      + name = 'float range'
  --
      - __init__(min: t.Optional[float] = None, max: t.Optional[float] = None, min_open: bool = False, max_open: bool = False, clamp: bool = False)
  }

  class BoolParamType {
      + name = 'boolean'
  --
      + convert(value: t.Any, param: t.Optional['Parameter'], ctx: t.Optional['Context']): t.Any
  }

  class UUIDParameterType {
      + name = 'uuid'
  --
      + convert(value: t.Any, param: t.Optional['Parameter'], ctx: t.Optional['Context']): t.Any
  }

  class File {
      + name = 'filename'
      + envvar_list_splitter: t.ClassVar[str] = os.path.pathsep
  --
      - __init__(mode: str = 'r', encoding: t.Optional[str] = None, errors: t.Optional[str] = 'strict', lazy: t.Optional[bool] = None, atomic: bool = False)
      + to_info_dict(): t.Dict[str, t.Any]
      + resolve_lazy_flag(value: 't.Union[str, os.PathLike[str]]'): bool
      + convert(value: t.Union[str, 'os.PathLike[str]', t.IO[t.Any]], param: t.Optional['Parameter'], ctx: t.Optional['Context']): t.IO[t.Any]
      + shell_complete(ctx: 'Context', param: 'Parameter', incomplete: str): t.List['CompletionItem']
  }

  class Path {
      + envvar_list_splitter: t.ClassVar[str] = os.path.pathsep
  --
      - __init__(exists: bool = False, file_okay: bool = True, dir_okay: bool = True, writable: bool = False, readable: bool = True, resolve_path: bool = False, allow_dash: bool = False, path_type: t.Optional[t.Type[t.Any]] = None, executable: bool = False)
      + to_info_dict(): t.Dict[str, t.Any]
      + coerce_path_result(value: 't.Union[str, os.PathLike[str]]'): 't.Union[str, bytes, os.PathLike[str]]'
      + convert(value: 't.Union[str, os.PathLike[str]]', param: t.Optional['Parameter'], ctx: t.Optional['Context']): 't.Union[str, bytes, os.PathLike[str]]'
      + shell_complete(ctx: 'Context', param: 'Parameter', incomplete: str): t.List['CompletionItem']
  }

  class Tuple {
      - __init__(types: t.Sequence[t.Union[t.Type[t.Any], ParamType]])
      + to_info_dict(): t.Dict[str, t.Any]
      + name(): str
      + arity(): int
      + convert(value: t.Any, param: t.Optional['Parameter'], ctx: t.Optional['Context']): t.Any
  }

  class LazyFile {
      - __init__(filename: t.Union[str, 'os.PathLike[str]'], mode: str = 'r', encoding: t.Optional[str] = None, errors: t.Optional[str] = 'strict', atomic: bool = False)
      + open(): t.IO[t.Any]
      + close()
      + close_intelligently()
  }

  class KeepOpenFile {
      - __init__(file: t.IO[t.Any])
  }

  class PacifyFlushWrapper {
      - __init__(wrapped: t.IO[t.Any])
      + flush()
  }

  class ProgressBar {
      - __init__(iterable: t.Optional[t.Iterable[V]], length: t.Optional[int] = None, fill_char: str = '#', empty_char: str = ' ', bar_template: str = '%(bar)s', info_sep: str = '  ', show_eta: bool = True, show_percent: t.Optional[bool] = None, show_pos: bool = False, item_show_func: t.Optional[t.Callable[[t.Optional[V]], t.Optional[str]]] = None, label: t.Optional[str] = None, file: t.Optional[t.TextIO] = None, color: t.Optional[bool] = None, update_min_steps: int = 1, width: int = 30)
      + render_finish()
      + pct(): float
      + time_per_iteration(): float
      + eta(): float
      + format_eta(): str
      + format_pos(): str
      + format_pct(): str
      + format_bar(): str
      + format_progress_line(): str
      + render_progress()
      + make_step(n_steps: int)
      + update(n_steps: int, current_item: t.Optional[V] = None)
      + finish()
      + generator(): t.Iterator[V]
  }

  class Editor {
      - __init__(editor: t.Optional[str] = None, env: t.Optional[t.Mapping[str, str]] = None, require_save: bool = True, extension: str = '.txt')
      + get_editor(): str
      + edit_file(filename: str)
      + edit(text: t.Optional[t.AnyStr]): t.Optional[t.AnyStr]
  }

  class TextWrapper {
      + extra_indent(indent: str): t.Iterator[None]
      + indent_only(text: str): str
  }

  class Py_buffer {
  }

  class ConsoleStream {
      - __init__(text_stream: t.TextIO, byte_stream: t.BinaryIO)
      + name(): str
      + write(x: t.AnyStr): int
      + writelines(lines: t.Iterable[t.AnyStr])
      + isatty(): bool
  }

}

package colorama {
  class AnsiCodes {
      - __init__()
  }

  class AnsiCursor {
      + UP(n = 1)
      + DOWN(n = 1)
      + FORWARD(n = 1)
      + BACK(n = 1)
      + POS(x = 1, y = 1)
  }

  class AnsiFore {
      + BLACK = 30
      + RED = 31
      + GREEN = 32
      + YELLOW = 33
      + BLUE = 34
      + MAGENTA = 35
      + CYAN = 36
      + WHITE = 37
      + RESET = 39
      + LIGHTBLACK_EX = 90
      + LIGHTRED_EX = 91
      + LIGHTGREEN_EX = 92
      + LIGHTYELLOW_EX = 93
      + LIGHTBLUE_EX = 94
      + LIGHTMAGENTA_EX = 95
      + LIGHTCYAN_EX = 96
      + LIGHTWHITE_EX = 97
  }

  class AnsiBack {
      + BLACK = 40
      + RED = 41
      + GREEN = 42
      + YELLOW = 43
      + BLUE = 44
      + MAGENTA = 45
      + CYAN = 46
      + WHITE = 47
      + RESET = 49
      + LIGHTBLACK_EX = 100
      + LIGHTRED_EX = 101
      + LIGHTGREEN_EX = 102
      + LIGHTYELLOW_EX = 103
      + LIGHTBLUE_EX = 104
      + LIGHTMAGENTA_EX = 105
      + LIGHTCYAN_EX = 106
      + LIGHTWHITE_EX = 107
  }

  class AnsiStyle {
      + BRIGHT = 1
      + DIM = 2
      + NORMAL = 22
      + RESET_ALL = 0
  }

  class StreamWrapper {
      - __init__(wrapped, converter)
      + write(text)
      + isatty()
      + closed()
  }

  class AnsiToWin32 {
      + ANSI_CSI_RE = re.compile('\x01?\x1b\\[((?:\\d|;)*)([a-zA-Z])\x02?')
      + ANSI_OSC_RE = re.compile('\x01?\x1b\\]([^\x07]*)(\x07)\x02?')
  --
      - __init__(wrapped, convert = None, strip = None, autoreset = False)
      + should_wrap()
      + get_win32_calls()
      + write(text)
      + reset_all()
      + write_and_convert(text)
      + write_plain_text(text, start, end)
      + convert_ansi(paramstring, command)
      + extract_params(command, paramstring)
      + call_win32(command, params)
      + convert_osc(text)
      + flush()
  }

  class CONSOLE_SCREEN_BUFFER_INFO {
  }

  class WinColor {
      + BLACK = 0
      + BLUE = 1
      + GREEN = 2
      + CYAN = 3
      + RED = 4
      + MAGENTA = 5
      + YELLOW = 6
      + GREY = 7
  }

  class WinStyle {
      + NORMAL = 0
      + BRIGHT = 8
      + BRIGHT_BACKGROUND = 128
  }

  class WinTerm {
      - __init__()
      + get_attrs()
      + set_attrs(value)
      + reset_all(on_stderr = None)
      + fore(fore = None, light = False, on_stderr = False)
      + back(back = None, light = False, on_stderr = False)
      + style(style = None, on_stderr = False)
      + set_console(attrs = None, on_stderr = False)
      + get_position(handle)
      + set_cursor_position(position = None, on_stderr = False)
      + cursor_adjust(x, y, on_stderr = False)
      + erase_screen(mode = 0, on_stderr = False)
      + erase_line(mode = 0, on_stderr = False)
      + set_title(title)
  }

}

package tests {
  class StreamWrapperTest {
      + testIsAProxy()
      + testDelegatesWrite()
      + testDelegatesContext()
      + testProxyNoContextManager()
      + test_closed_shouldnt_raise_on_closed_stream()
      + test_closed_shouldnt_raise_on_detached_stream()
  }

  class AnsiToWin32Test {
      + testInit()
      + testStripIsTrueOnWindows()
      + testStripIsFalseOffWindows()
      + testWriteStripsAnsi()
      + testWriteDoesNotStripAnsi()
      + assert_autoresets(convert, autoreset = True)
      + testWriteAutoresets()
      + testWriteAndConvertWritesPlainText()
      + testWriteAndConvertStripsAllValidAnsi()
      + testWriteAndConvertSkipsEmptySnippets()
      + testWriteAndConvertCallsWin32WithParamsAndCommand()
      + test_reset_all_shouldnt_raise_on_closed_orig_stdout()
      + test_wrap_shouldnt_raise_on_closed_orig_stdout()
      + test_wrap_shouldnt_raise_on_missing_closed_attr()
      + testExtractParams()
      + testCallWin32UsesLookup()
      + test_osc_codes()
      + test_native_windows_ansi()
  }

  class AnsiTest {
      + setUp()
      + tearDown()
      + testForeAttributes()
      + testBackAttributes()
      + testStyleAttributes()
  }

  class InitTest {
      + setUp()
      + tearDown()
      + assertWrapped()
      + assertNotWrapped()
      + testInitWrapsOnWindows(_)
      + testInitDoesntWrapOnEmulatedWindows(_)
      + testInitDoesntWrapOnNonWindows()
      + testInitDoesntWrapIfNone()
      + testInitAutoresetOnWrapsOnAllPlatforms()
      + testInitWrapOffDoesntWrapOnWindows()
      + testInitWrapOffIncompatibleWithAutoresetOn()
      + testAutoResetPassedOn(mockATW32, _)
      + testAutoResetChangeable(mockATW32)
      + testAtexitRegisteredOnlyOnce(mockRegister)
  }

  class JustFixWindowsConsoleTest {
      + tearDown()
      + testJustFixWindowsConsole()
  }

  class IsattyTest {
      + test_TTY()
      + test_nonTTY()
      + test_withPycharm()
      + test_withPycharmTTYOverride()
      + test_withPycharmNonTTYOverride()
      + test_withPycharmNoneOverride()
      + test_withPycharmStreamWrapped()
  }

  class StreamTTY {
      + isatty()
  }

  class StreamNonTTY {
      + isatty()
  }

  class WinTermTest {
      + testInit(mockWin32)
      + testGetAttrs()
      + testResetAll(mockWin32)
      + testFore()
      + testBack()
      + testStyle()
      + testSetConsole(mockWin32)
      + testSetConsoleOnStderr(mockWin32)
  }

  class BaseTestCase {
      + {static} do_equal_p(tests, att = 'cssText', raising = True)
      + {static} do_raise_p(tests, raising = True)
      + do_equal_r(tests, att = 'cssText')
      + do_raise_r(tests, att = '_setCssText')
      + do_raise_r_list(tests, err, att = '_setCssText')
  }

  class Queue {
      - __init__()
      + write(chars)
      + read(size = -1)
  }

  class TestCodec {
      + test_detectencoding_str()
      + test_detectencoding_unicode()
      + test_fixencoding()
      + test_decoder()
      + test_encoder()
      + test_decode_force()
  }

  class TestCSSCharsetRule {
      + test_init()
      + test_InvalidModificationErr()
      + test_init_encoding()
      + test_encoding()
      + test_cssText()
      + test_repr()
      + test_reprANDstr()
  }

  class TestCSSComment {
      + test_csstext()
      + test_InvalidModificationErr()
      + test_reprANDstr()
  }

  class TestCSSFontFaceRule {
      + test_init()
      + test_cssText()
      + test_style()
      + test_properties()
      + test_incomplete()
      + test_InvalidModificationErr()
      + test_valid()
      + test_reprANDstr()
  }

  class TestCSSImportRule {
      + test_init()
      + test_cssText()
      + test_href()
      + test_hrefFound()
      + test_hreftype()
      + test_media()
      + test_name()
      + test_styleSheet()
      + test_incomplete()
      + test_InvalidModificationErr()
      + test_reprANDstr()
  }

  class TestCSSMediaRule {
      + test_init()
      + test_iter()
      + test_refs()
      + test_cssRules()
      + test_cssText()
      + test_media()
      + test_name()
      + test_deleteRuleIndex()
      + test_deleteRule()
      + test_add()
      + test_insertRule()
      + test_InvalidModificationErr()
      + test_incomplete()
      + test_reprANDstr()
  }

  class TestCSSNamespaceRule {
      + test_init()
      + test_cssText()
      + test_namespaceURI()
      + test_prefix()
      + test_InvalidModificationErr()
      + test_incomplete()
      + test_reprANDstr()
  }

  class TestCSSPageRule {
      + test_init()
      + test_InvalidModificationErr()
      + test_incomplete()
      + test_cssText()
      + test_cssText2()
      + test_selectorText()
      + test_specificity()
      + test_cssRules()
      + test_style()
      + test_properties()
      + test_reprANDstr()
  }

  class TestCSSProperties {
      + test_toDOMname()
      + test_toCSSname()
      + test_CSS2Properties()
  }

  class TestCSSRule {
      + setup_method()
      + test_init()
      + test_parentRule_parentStyleSheet_type()
      + test_CSSMediaRule_cssRules_parentRule_parentStyleSheet_type()
      + test_readonly()
  }

  class TestCSSRuleList {
      + test_init()
      + test_rulesOfType()
  }

  class TestCSSStyleDeclaration {
      + setup_method()
      + test_init()
      + test_items()
      + test__contains__()
      + test__iter__item()
      + test_keys()
      + test_parse()
      + test_serialize()
      + test_children()
      + test_cssText()
      + test_getCssText()
      + test_parentRule()
      + test_getProperty()
      + test_getProperties()
      + test_getPropertyCSSValue()
      + test_getPropertyValue()
      + test_getPropertyPriority()
      + test_removeProperty()
      + test_setProperty()
      + test_setProperty2()
      + test_length()
      + test_nameParameter()
      + test_css2properties()
      + test_reprANDstr()
      + test_valid()
  }

  class TestCSSStyleRule {
      + test_init()
      + test_refs()
      + test_cssText()
      + test_selectorList()
      + test_selectorText()
      + test_style()
      + test_incomplete()
      + test_reprANDstr()
      + test_valid()
  }

  class TestCSSStyleSheet {
      + setup_method()
      + test_init()
      + test_iter()
      + test_refs()
      + test_cssRules()
      + test_cssText()
      + test_cssText_HierarchyRequestErr()
      + test_cssText_SyntaxErr()
      + test_encoding()
      + test_namespaces1()
      + test_namespaces2()
      + test_namespaces3()
      + test_namespaces4()
      + test_namespaces5()
      + test_deleteRuleIndex()
      + test_deleteRule()
      + test_add()
      + test_addimport()
      + test_insertRule()
      + test_insertRule_charset()
      + test_insertRule_import()
      + test_insertRule_namespace()
      + test_insertRule_media_page_style()
      + test_insertRule_unknownandcomment()
      + test_HTMLComments()
      + test_incomplete()
      + test_NoModificationAllowedErr()
      + test_reprANDstr()
      + test_valid()
  }

  class TestCSSUnknownRule {
      + test_init()
      + test_cssText()
      + test_InvalidModificationErr()
      + test_reprANDstr()
  }

  class TestCSSutils {
      + exp = '@import "import/import2.css";\n.import {\n    /* ./import.css */\n    background-image: url(images/example.gif)\n    }'
  --
      + test_parseString()
      + test_parseFile(monkeypatch)
      + test_parseUrl()
      + test_setCSSSerializer()
      + test_parseStyle()
      + test_getUrls()
      + test_replaceUrls()
      + test_resolveImports()
  }

  class TestCSSutilsImport {
      + test_import_all()
  }

  class TestCSSValue {
      + setup_method()
      + test_init()
      + test_escapes()
      + test_cssText()
      + test_cssText2()
      + test_incomplete()
      + test_cssValueType()
      + test_readonly()
      + test_reprANDstr()
  }

  class TestCSSPrimitiveValue {
      + test_init()
      + test_CSS_UNKNOWN()
      + test_CSS_NUMBER_AND_OTHER_DIMENSIONS()
      + test_CSS_STRING_AND_OTHER()
      + test_getFloat()
      + test_setFloat()
      + test_getString()
      + test_setString()
      + test_typeRGBColor()
      + test_reprANDstr()
  }

  class TestCSSValueList {
      + test_init()
      + test_numbers()
      + test_reprANDstr()
  }

  class TestCSSVariablesDeclaration {
      + setup_method()
      + test_init()
      + test__contains__()
      + test_items()
      + test_keys()
      + test_cssText()
      + test_xVariable()
      + test_imports()
      + test_parentRule()
      + test_reprANDstr()
  }

  class TestCSSVariablesRule {
      + test_init()
      + test_InvalidModificationErr()
      + test_incomplete()
      + test_cssText()
      + test_media()
      + test_variables()
      + test_reprANDstr()
  }

  class TestDOMImplementation {
      + test_createCSSStyleSheet(domimpl)
      + test_createDocument(domimpl)
      + test_createDocumentType(domimpl)
      + test_hasFeature(domimpl)
  }

  class TestAutoEncoding {
      + test_getTextTypeByMediaType()
      + test_getTextType()
      + test_encodingByMediaType()
      + test_getMetaInfo()
      + test_detectXMLEncoding()
      + test_tryEncodings()
      + test_getEncodingInfo()
  }

  class TestErrorHandler {
      + test_calls()
      + test_linecol()
      + test_handlers()
      + test_parsevalidation()
  }

  class TestHelper {
      + test_normalize()
      + test_string()
      + test_stringvalue()
      + test_uri()
      + test_urivalue()
  }

  class TestMarginRule {
      + test_init()
      + test_InvalidModificationErr()
      + test_incomplete()
      + test_cssText()
      + test_reprANDstr()
  }

  class TestMediaList {
      + setup_method()
      + test_set()
      + test_appendMedium()
      + test_appendAll()
      + {static} media_msg(text)
      + test_append2All()
      + test_delete()
      + test_item()
      + test_mediaText()
      + test_comments()
      + test_reprANDstr()
  }

  class TestMediaQuery {
      + setup_method()
      + test_mediaText()
      + test_mediaType()
      + test_comments()
      + test_reprANDstr()
  }

  class TestCSSParser {
      + test_init()
      + test_parseComments()
      + test_parseUrl()
      + test_parseUrl_404()
      + test_parseString()
      + test_validate()
      + test_fetcher()
      + test_roundtrip()
      + test_escapes()
      + test_invalidstring()
      + test_invalid()
      + test_nesting()
      + test_specialcases()
      + test_iehack()
      + test_attributes()
  }

  class TestProd {
      + test_init()
      + test_initMatch()
      + test_initToSeq()
      + test_initToStore()
      + test_matches()
  }

  class TestSequence {
      + test_init()
      + test_initminmax()
      + test_optional()
      + test_reset()
      + test_matches()
      + test_nextProd()
  }

  class TestChoice {
      + test_init()
      + test_matches()
      + test_nested()
      + test_reset()
  }

  class TestProdParser {
      + setup_method()
      + test_parse_keepS()
      + test_combi()
  }

  class TestProfiles {
      + M1 = {'testvalue': 'x'}
      + P1 = {'-test-tokenmacro': '({num}{w}){1,2}', '-test-macro': '{ident}|{percentage}', '-test-custommacro': '{testvalue}', '-test-funcval': lambda v: int(v) > 0}
  --
      + test_knownNames()
      + test_profiles()
      + test_validate2()
      + test_addProfile()
      + test_removeProfile()
      + test_validateWithProfile(params, results)
      + test_propertiesByProfile()
      + test_csscolorlevel3()
      + test_validate()
      + test_validateWithProfile_fonts(params, results)
  }

  class TestProperties {
      + setup_method()
      + test_properties()
      + test_validate()
  }

  class TestProperty {
      + setup_method()
      + test_init()
      + test_cssText()
      + test_name()
      + test_literalname()
      + test_validate()
      + test_priority()
      + test_value()
      + test_reprANDstr()
  }

  class TestCSSCombine {
      + C = '@namespace s2"uri";s2|sheet-1{top:1px}s2|sheet-2{top:2px}proxy{top:3px}'
  --
      + test_combine()
      + test_combine_resolveVariables()
  }

  class TestSelector {
      + setup_method()
      + test_init()
      + test_element()
      + test_namespaces()
      + test_default_namespace()
      + test_parent()
      + test_selectorText()
      + test_specificity()
      + test_reprANDstr()
  }

  class TestSelectorList {
      + setup_method()
      + test_init()
      + test_parentRule()
      + test_appendSelector()
      + test_selectorText()
      + test_reprANDstr()
  }

  class TestPreferences {
      + test_resolveVariables()
      + test_useDefaults()
      + test_useMinified()
      + test_defaultAtKeyword()
      + test_defaultPropertyName()
      + test_defaultPropertyPriority()
      + test_importHrefFormat()
      + test_indent()
      + test_indentClosingBrace()
      + test_keepAllProperties()
      + test_keepComments()
      + test_keepEmptyRules()
      + test_keepUnknownAtRules()
      + test_keepUsedNamespaceRulesOnly()
      + test_lineNumbers()
      + test_lineSeparator()
      + test_listItemSpacer()
      + test_minimizeColorHash()
      + test_omitLastSemicolon()
      + test_normalizedVarNames()
      + test_paranthesisSpacer()
      + test_propertyNameSpacer()
      + test_selectorCombinatorSpacer()
      + test_spacer()
      + test_validOnly()
  }

  class TestCSSSerializer {
      + test_canonical()
      + test_CSSStyleSheet()
      + test_Property()
      + test_escapestring()
  }

  class TestSettings {
      + test_set()
  }

  class TestStyleSheet {
      + test_init()
  }

  class TestTokenizer {
      + testsall = {'äöüß€': [('IDENT', 'äöüß€', 1, 1)], ' a ': [('S', ' ', 1, 1), ('IDENT', 'a', 1, 2), ('S', ' ', 1, 3)], '_a': [('IDENT', '_a', 1, 1)], '-a': [('IDENT', '-a', 1, 1)], '--a': [('IDENT', '--a', 1, 1)], 'aA-_\x80ÿ': [('IDENT', 'aA-_\x80ÿ', 1, 1)], 'a1': [('IDENT', 'a1', 1, 1)], '\\44 b': [('IDENT', 'Db', 1, 1)], '\\44  b': [('IDENT', 'D', 1, 1), ('S', ' ', 1, 5), ('IDENT', 'b', 1, 6)], '\\44\nb': [('IDENT', 'Db', 1, 1)], '\\44\rb': [('IDENT', 'Db', 1, 1)], '\\44\x0cb': [('IDENT', 'Db', 1, 1)], '\\44\n*': [('IDENT', 'D', 1, 1), ('CHAR', '*', 2, 1)], '\\44  a': [('IDENT', 'D', 1, 1), ('S', ' ', 1, 5), ('IDENT', 'a', 1, 6)], '\\44\\ x': [('IDENT', 'D\\ x', 1, 1)], '\\44  ': [('IDENT', 'D', 1, 1), ('S', ' ', 1, 5)], '\\44': [('IDENT', 'D', 1, 1)], '\\\\': [('IDENT', '\\\\', 1, 1)], '\\{': [('IDENT', '\\{', 1, 1)], '\\"': [('IDENT', '\\"', 1, 1)], '\\(': [('IDENT', '\\(', 1, 1)], '\\1 \\22 \\333 \\4444 \\55555 \\666666 \\777777 7 \\7777777': [('IDENT', '\x01"̳䑄\U00055555\\666666 \\777777 7', 1, 1) if sys.maxunicode > 65536 else ('IDENT', '\x01"̳䑄\\55555 \\666666 \\777777 7', 1, 1), ('S', ' ', 1, 43), ('IDENT', '\\7777777', 1, 44)], 'and(': [('IDENT', 'and', 1, 1), ('CHAR', '(', 1, 4)], '\\1 b': [('IDENT', '\x01b', 1, 1)], '\\123 b': [('IDENT', 'ģb', 1, 1)], '\\1234 b': [('IDENT', 'ሴb', 1, 1)], '\\12345 b': [('IDENT', '𒍅b', 1, 1) if sys.maxunicode > 65536 else ('IDENT', '\\12345 b', 1, 1)], '\\123456 b': [('IDENT', '\\123456 b', 1, 1)], '\\1234567 b': [('IDENT', '\\1234567', 1, 1), ('S', ' ', 1, 9), ('IDENT', 'b', 1, 10)], '\\{\\}\\(\\)\\[\\]\\#\\@\\.\\,': [('IDENT', '\\{\\}\\(\\)\\[\\]\\#\\@\\.\\,', 1, 1)], ' "" ': [('S', ' ', 1, 1), ('STRING', '""', 1, 2), ('S', ' ', 1, 4)], ' "\'" ': [('S', ' ', 1, 1), ('STRING', '"\'"', 1, 2), ('S', ' ', 1, 5)], " '' ": [('S', ' ', 1, 1), ('STRING', "''", 1, 2), ('S', ' ', 1, 4)], "'\\\n'": [('STRING', "''", 1, 1)], "'\\\n\\\n\\\n'": [('STRING', "''", 1, 1)], "'\\\x0c'": [('STRING', "''", 1, 1)], "'\\\r'": [('STRING', "''", 1, 1)], "'1\\\n2'": [('STRING', "'12'", 1, 1)], "'1\\\r\n2'": [('STRING', "'12'", 1, 1)], '"\\61|\\0061"': [('STRING', '"a|a"', 1, 1)], ' #a ': [('S', ' ', 1, 1), ('HASH', '#a', 1, 2), ('S', ' ', 1, 4)], '#ccc': [('HASH', '#ccc', 1, 1)], '#111': [('HASH', '#111', 1, 1)], '#a1a1a1': [('HASH', '#a1a1a1', 1, 1)], '#1a1a1a': [('HASH', '#1a1a1a', 1, 1)], ' 0 ': [('S', ' ', 1, 1), ('NUMBER', '0', 1, 2), ('S', ' ', 1, 3)], ' 0.1 ': [('S', ' ', 1, 1), ('NUMBER', '0.1', 1, 2), ('S', ' ', 1, 5)], ' .0 ': [('S', ' ', 1, 1), ('NUMBER', '.0', 1, 2), ('S', ' ', 1, 4)], ' -0 ': [('S', ' ', 1, 1), ('NUMBER', '-0', 1, 2), ('S', ' ', 1, 4)], ' 0% ': [('S', ' ', 1, 1), ('PERCENTAGE', '0%', 1, 2), ('S', ' ', 1, 4)], ' .5% ': [('S', ' ', 1, 1), ('PERCENTAGE', '.5%', 1, 2), ('S', ' ', 1, 5)], ' url() ': [('S', ' ', 1, 1), ('URI', 'url()', 1, 2), ('S', ' ', 1, 7)], ' url(a) ': [('S', ' ', 1, 1), ('URI', 'url(a)', 1, 2), ('S', ' ', 1, 8)], ' url("a") ': [('S', ' ', 1, 1), ('URI', 'url("a")', 1, 2), ('S', ' ', 1, 10)], ' url( a ) ': [('S', ' ', 1, 1), ('URI', 'url( a )', 1, 2), ('S', ' ', 1, 10)], ' <!-- ': [('S', ' ', 1, 1), ('CDO', '<!--', 1, 2), ('S', ' ', 1, 6)], '"<!--""-->"': [('STRING', '"<!--"', 1, 1), ('STRING', '"-->"', 1, 7)], ' --> ': [('S', ' ', 1, 1), ('CDC', '-->', 1, 2), ('S', ' ', 1, 5)], ' ': [('S', ' ', 1, 1)], '  ': [('S', '  ', 1, 1)], '\r': [('S', '\r', 1, 1)], '\n': [('S', '\n', 1, 1)], '\r\n': [('S', '\r\n', 1, 1)], '\x0c': [('S', '\x0c', 1, 1)], '\t': [('S', '\t', 1, 1)], '\r\n\r\n\x0c\t ': [('S', '\r\n\r\n\x0c\t ', 1, 1)], '/*x*/ ': [('COMMENT', '/*x*/', 1, 1), ('S', ' ', 1, 6)], ' x( ': [('S', ' ', 1, 1), ('FUNCTION', 'x(', 1, 2), ('S', ' ', 1, 4)], ' ~= ': [('S', ' ', 1, 1), ('INCLUDES', '~=', 1, 2), ('S', ' ', 1, 4)], '~==': [('INCLUDES', '~=', 1, 1), ('CHAR', '=', 1, 3)], ' |= ': [('S', ' ', 1, 1), ('DASHMATCH', '|=', 1, 2), ('S', ' ', 1, 4)], '|==': [('DASHMATCH', '|=', 1, 1), ('CHAR', '=', 1, 3)], ' @ ': [('S', ' ', 1, 1), ('CHAR', '@', 1, 2), ('S', ' ', 1, 3)], ' { ': [('S', ' ', 1, 1), ('CHAR', '{', 1, 2), ('S', ' ', 1, 3)], ' + ': [('S', ' ', 1, 1), ('CHAR', '+', 1, 2), ('S', ' ', 1, 3)], ' > ': [('S', ' ', 1, 1), ('CHAR', '>', 1, 2), ('S', ' ', 1, 3)], ' , ': [('S', ' ', 1, 1), ('CHAR', ',', 1, 2), ('S', ' ', 1, 3)], ' . ': [('S', ' ', 1, 1), ('CHAR', '.', 1, 2), ('S', ' ', 1, 3)]}
      + tests3 = {' u+0 ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'u+0', 1, 2), ('S', ' ', 1, 5)], ' u+01 ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'u+01', 1, 2), ('S', ' ', 1, 6)], ' u+012 ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'u+012', 1, 2), ('S', ' ', 1, 7)], ' u+0123 ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'u+0123', 1, 2), ('S', ' ', 1, 8)], ' u+01234 ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'u+01234', 1, 2), ('S', ' ', 1, 9)], ' u+012345 ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'u+012345', 1, 2), ('S', ' ', 1, 10)], ' u+0123456 ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'u+012345', 1, 2), ('NUMBER', '6', 1, 10), ('S', ' ', 1, 11)], ' U+123456 ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'U+123456', 1, 2), ('S', ' ', 1, 10)], ' \\55+abcdef ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'U+abcdef', 1, 2), ('S', ' ', 1, 12)], ' \\75+abcdef ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'u+abcdef', 1, 2), ('S', ' ', 1, 12)], ' u+0-1 ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'u+0-1', 1, 2), ('S', ' ', 1, 7)], ' u+0-1, u+123456-abcdef ': [('S', ' ', 1, 1), ('UNICODE-RANGE', 'u+0-1', 1, 2), ('CHAR', ',', 1, 7), ('S', ' ', 1, 8), ('UNICODE-RANGE', 'u+123456-abcdef', 1, 9), ('S', ' ', 1, 24)], 'c\\olor': [('IDENT', 'c\\olor', 1, 1)], '-1': [('NUMBER', '-1', 1, 1)], '-1px': [('DIMENSION', '-1px', 1, 1)], ' @x ': [('S', ' ', 1, 1), ('ATKEYWORD', '@x', 1, 2), ('S', ' ', 1, 4)], '@X': [('ATKEYWORD', '@X', 1, 1)], '@\\x': [('ATKEYWORD', '@\\x', 1, 1)], '@1x': [('CHAR', '@', 1, 1), ('DIMENSION', '1x', 1, 2)], ' 0px ': [('S', ' ', 1, 1), ('DIMENSION', '0px', 1, 2), ('S', ' ', 1, 5)], ' 1s ': [('S', ' ', 1, 1), ('DIMENSION', '1s', 1, 2), ('S', ' ', 1, 4)], '0.2EM': [('DIMENSION', '0.2EM', 1, 1)], '1p\\x': [('DIMENSION', '1p\\x', 1, 1)], '1PX': [('DIMENSION', '1PX', 1, 1)], ' - 0 ': [('S', ' ', 1, 1), ('CHAR', '-', 1, 2), ('S', ' ', 1, 3), ('NUMBER', '0', 1, 4), ('S', ' ', 1, 5)], ' + 0 ': [('S', ' ', 1, 1), ('CHAR', '+', 1, 2), ('S', ' ', 1, 3), ('NUMBER', '0', 1, 4), ('S', ' ', 1, 5)], ' ^= ': [('S', ' ', 1, 1), ('PREFIXMATCH', '^=', 1, 2), ('S', ' ', 1, 4)], '^==': [('PREFIXMATCH', '^=', 1, 1), ('CHAR', '=', 1, 3)], ' $= ': [('S', ' ', 1, 1), ('SUFFIXMATCH', '$=', 1, 2), ('S', ' ', 1, 4)], '$==': [('SUFFIXMATCH', '$=', 1, 1), ('CHAR', '=', 1, 3)], ' *= ': [('S', ' ', 1, 1), ('SUBSTRINGMATCH', '*=', 1, 2), ('S', ' ', 1, 4)], '*==': [('SUBSTRINGMATCH', '*=', 1, 1), ('CHAR', '=', 1, 3)], 'þÿ ': [('BOM', 'þÿ', 1, 1), ('S', ' ', 1, 1)], ' þÿ ': [('S', ' ', 1, 1), ('IDENT', 'þÿ', 1, 2), ('S', ' ', 1, 4)], 'ï»¿ ': [('BOM', 'ï»¿', 1, 1), ('S', ' ', 1, 1)], ' ï»¿ ': [('S', ' ', 1, 1), ('IDENT', 'ï»¿', 1, 2), ('S', ' ', 1, 5)]}
      + tests2 = {' @import ': [('S', ' ', 1, 1), ('IMPORT_SYM', '@import', 1, 2), ('S', ' ', 1, 9)], '@IMPORT': [('IMPORT_SYM', '@IMPORT', 1, 1)], '@\\49\r\nMPORT': [('IMPORT_SYM', '@\\49\r\nMPORT', 1, 1)], '@\\i\\m\\p\\o\\r\\t': [('IMPORT_SYM', '@\\i\\m\\p\\o\\r\\t', 1, 1)], '@\\I\\M\\P\\O\\R\\T': [('IMPORT_SYM', '@\\I\\M\\P\\O\\R\\T', 1, 1)], '@\\49 \\04d\\0050\\0004f\\000052\\54': [('IMPORT_SYM', '@\\49 \\04d\\0050\\0004f\\000052\\54', 1, 1)], '@\\69 \\06d\\0070\\0006f\\000072\\74': [('IMPORT_SYM', '@\\69 \\06d\\0070\\0006f\\000072\\74', 1, 1)], ' @page ': [('S', ' ', 1, 1), ('PAGE_SYM', '@page', 1, 2), ('S', ' ', 1, 7)], '@PAGE': [('PAGE_SYM', '@PAGE', 1, 1)], '@\\pa\\ge': [('PAGE_SYM', '@\\pa\\ge', 1, 1)], '@\\PA\\GE': [('PAGE_SYM', '@\\PA\\GE', 1, 1)], '@\\50\\41\\47\\45': [('PAGE_SYM', '@\\50\\41\\47\\45', 1, 1)], '@\\70\\61\\67\\65': [('PAGE_SYM', '@\\70\\61\\67\\65', 1, 1)], ' @media ': [('S', ' ', 1, 1), ('MEDIA_SYM', '@media', 1, 2), ('S', ' ', 1, 8)], '@MEDIA': [('MEDIA_SYM', '@MEDIA', 1, 1)], '@\\med\\ia': [('MEDIA_SYM', '@\\med\\ia', 1, 1)], '@\\MED\\IA': [('MEDIA_SYM', '@\\MED\\IA', 1, 1)], '@\\4d\n\\45\r\\44\t\\49\r\nA': [('MEDIA_SYM', '@\\4d\n\\45\r\\44\t\\49\r\nA', 1, 1)], '@\\4d\n\\45\r\\44\t\\49\r\\41\x0c': [('MEDIA_SYM', '@\\4d\n\\45\r\\44\t\\49\r\\41\x0c', 1, 1)], '@\\6d\n\\65\r\\64\t\\69\r\\61\x0c': [('MEDIA_SYM', '@\\6d\n\\65\r\\64\t\\69\r\\61\x0c', 1, 1)], ' @font-face ': [('S', ' ', 1, 1), ('FONT_FACE_SYM', '@font-face', 1, 2), ('S', ' ', 1, 12)], '@FONT-FACE': [('FONT_FACE_SYM', '@FONT-FACE', 1, 1)], '@f\\o\\n\\t\\-face': [('FONT_FACE_SYM', '@f\\o\\n\\t\\-face', 1, 1)], '@F\\O\\N\\T\\-FACE': [('FONT_FACE_SYM', '@F\\O\\N\\T\\-FACE', 1, 1)], '@\\46\\4f\\4e\\54\\-\\46\\41\\43\\45': [('FONT_FACE_SYM', '@\\46\\4f\\4e\\54\\-\\46\\41\\43\\45', 1, 1)], '@\\66\\6f\\6e\\74\\-\\66\\61\\63\\65': [('FONT_FACE_SYM', '@\\66\\6f\\6e\\74\\-\\66\\61\\63\\65', 1, 1)], '@charset  ': [('CHARSET_SYM', '@charset ', 1, 1), ('S', ' ', 1, 10)], ' @charset  ': [('S', ' ', 1, 1), ('CHARSET_SYM', '@charset ', 1, 2), ('S', ' ', 1, 11)], '@charset': [('ATKEYWORD', '@charset', 1, 1)], '@CHARSET ': [('ATKEYWORD', '@CHARSET', 1, 1), ('S', ' ', 1, 9)], '@cha\\rset ': [('ATKEYWORD', '@cha\\rset', 1, 1), ('S', ' ', 1, 10)], ' @namespace ': [('S', ' ', 1, 1), ('NAMESPACE_SYM', '@namespace', 1, 2), ('S', ' ', 1, 12)], '@NAMESPACE': [('NAMESPACE_SYM', '@NAMESPACE', 1, 1)], '@\\na\\me\\s\\pace': [('NAMESPACE_SYM', '@\\na\\me\\s\\pace', 1, 1)], '@\\NA\\ME\\S\\PACE': [('NAMESPACE_SYM', '@\\NA\\ME\\S\\PACE', 1, 1)], '@\\4e\\41\\4d\\45\\53\\50\\41\\43\\45': [('NAMESPACE_SYM', '@\\4e\\41\\4d\\45\\53\\50\\41\\43\\45', 1, 1)], '@\\6e\\61\\6d\\65\\73\\70\\61\\63\\65': [('NAMESPACE_SYM', '@\\6e\\61\\6d\\65\\73\\70\\61\\63\\65', 1, 1)], ' @unknown ': [('S', ' ', 1, 1), ('ATKEYWORD', '@unknown', 1, 2), ('S', ' ', 1, 10)], ' "\\na"\na': [('S', ' ', 1, 1), ('STRING', '"\\na"', 1, 2), ('S', '\n', 1, 7), ('IDENT', 'a', 2, 1)], " '\\na'\na": [('S', ' ', 1, 1), ('STRING', "'\\na'", 1, 2), ('S', '\n', 1, 7), ('IDENT', 'a', 2, 1)], ' "\\r\\n\\t\\n\\ra"a': [('S', ' ', 1, 1), ('STRING', '"\\r\\n\\t\\n\\ra"', 1, 2), ('IDENT', 'a', 1, 15)], ' !important ': [('S', ' ', 1, 1), ('CHAR', '!', 1, 2), ('IDENT', 'important', 1, 3), ('S', ' ', 1, 12)], '! /*1*/ important ': [('CHAR', '!', 1, 1), ('S', ' ', 1, 2), ('COMMENT', '/*1*/', 1, 3), ('S', ' ', 1, 8), ('IDENT', 'important', 1, 9), ('S', ' ', 1, 18)], '! important': [('CHAR', '!', 1, 1), ('S', ' ', 1, 2), ('IDENT', 'important', 1, 3)], '!\n\timportant': [('CHAR', '!', 1, 1), ('S', '\n\t', 1, 2), ('IDENT', 'important', 2, 2)], '!IMPORTANT': [('CHAR', '!', 1, 1), ('IDENT', 'IMPORTANT', 1, 2)], '!\\i\\m\\p\\o\\r\\ta\\n\\t': [('CHAR', '!', 1, 1), ('IDENT', '\\i\\m\\p\\o\\r\\ta\\n\\t', 1, 2)], '!\\I\\M\\P\\O\\R\\Ta\\N\\T': [('CHAR', '!', 1, 1), ('IDENT', '\\I\\M\\P\\O\\R\\Ta\\N\\T', 1, 2)], '!\\49\\4d\\50\\4f\\52\\54\\41\\4e\\54': [('CHAR', '!', 1, 1), ('IDENT', 'IMPORTANT', 1, 2)], '!\\69\\6d\\70\\6f\\72\\74\\61\\6e\\74': [('CHAR', '!', 1, 1), ('IDENT', 'important', 1, 2)]}
      + tests2only = {' { ': [('S', ' ', 1, 1), ('LBRACE', '{', 1, 2), ('S', ' ', 1, 3)], ' + ': [('S', ' ', 1, 1), ('PLUS', '+', 1, 2), ('S', ' ', 1, 3)], ' > ': [('S', ' ', 1, 1), ('GREATER', '>', 1, 2), ('S', ' ', 1, 3)], ' , ': [('S', ' ', 1, 1), ('COMMA', ',', 1, 2), ('S', ' ', 1, 3)], ' . ': [('S', ' ', 1, 1), ('CLASS', '.', 1, 2), ('S', ' ', 1, 3)]}
      + testsfullsheet = {'\\65\r\nb': [('IDENT', 'eb', 1, 1)], '"\\""': [('STRING', '"\\""', 1, 1)], '"\\" "': [('STRING', '"\\" "', 1, 1)], "'\\''": [('STRING', "'\\''", 1, 1)], ' "\na': [('S', ' ', 1, 1), ('INVALID', '"', 1, 2), ('S', '\n', 1, 3), ('IDENT', 'a', 2, 1)], ' "\\na\na': [('S', ' ', 1, 1), ('INVALID', '"\\na', 1, 2), ('S', '\n', 1, 6), ('IDENT', 'a', 2, 1)], ' "\\r\\n\\t\\n\\ra\na': [('S', ' ', 1, 1), ('INVALID', '"\\r\\n\\t\\n\\ra', 1, 2), ('S', '\n', 1, 14), ('IDENT', 'a', 2, 1)], 'ur\\l(a)': [('URI', 'ur\\l(a)', 1, 1)], 'url(a)': [('URI', 'url(a)', 1, 1)], '\\55r\\4c(a)': [('URI', 'UrL(a)', 1, 1)], '\\75r\\6c(a)': [('URI', 'url(a)', 1, 1)], ' url())': [('S', ' ', 1, 1), ('URI', 'url()', 1, 2), ('CHAR', ')', 1, 7)], 'url("x"))': [('URI', 'url("x")', 1, 1), ('CHAR', ')', 1, 9)], "url('x'))": [('URI', "url('x')", 1, 1), ('CHAR', ')', 1, 9)]}
      + testsfullsheetfalse = {'/*': [('CHAR', '/', 1, 1), ('CHAR', '*', 1, 2)], ' " ': [('S', ' ', 1, 1), ('INVALID', '" ', 1, 2)], ' \'abc"with quote" in it': [('S', ' ', 1, 1), ('INVALID', '\'abc"with quote" in it', 1, 2)], 'url(a': [('FUNCTION', 'url(', 1, 1), ('IDENT', 'a', 1, 5)], 'url("a': [('FUNCTION', 'url(', 1, 1), ('INVALID', '"a', 1, 5)], "url('a": [('FUNCTION', 'url(', 1, 1), ('INVALID', "'a", 1, 5)], "UR\\l('a": [('FUNCTION', 'UR\\l(', 1, 1), ('INVALID', "'a", 1, 6)]}
      + testsfullsheettrue = {'/*': [('COMMENT', '/**/', 1, 1)], ' " ': [('S', ' ', 1, 1), ('STRING', '" "', 1, 2)], ' \'abc"with quote" in it': [('S', ' ', 1, 1), ('STRING', '\'abc"with quote" in it\'', 1, 2)], 'url(a': [('URI', 'url(a)', 1, 1)], 'url( a': [('URI', 'url( a)', 1, 1)], 'url("a': [('URI', 'url("a")', 1, 1)], 'url( "a ': [('URI', 'url( "a ")', 1, 1)], "url('a": [('URI', "url('a')", 1, 1)], 'url("a"': [('URI', 'url("a")', 1, 1)], "url('a'": [('URI', "url('a')", 1, 1)]}
  --
      + setup_method()
      + test_tokenize()
      + test_tokenizefullsheet()
  }

  class TestTokenizerUtils {
      + has_at_cases = [('foo', 0, 'foo', True), ('foo', 0, 'f', True), ('foo', 1, 'o', True), ('foo', 1, 'oo', True), ('foo', 4, 'foo', False), ('foo', 0, 'bar', False), ('foo', 0, 'foobar', False)]
      + suffix_eq_cases = [('foobar', 0, 'foobar', True), ('foobar', 3, 'bar', True), ('foobar', 3, 'foo', False), ('foobar', 10, 'bar', False)]
  --
      + test_has_at(string, pos, text, expected)
      + test_suffix_eq(string, pos, suffix, expected)
  }

  class TestListSeq {
      + test_all()
  }

  class TestBase {
      + test_normalize()
      + test_tokenupto()
  }

  class Test_readUrl {
      + test_readUrl()
      + test_defaultFetcher()
  }

  class TestLazyRegex {
      + setup_method()
      + test_public_interface()
      + test_ensure()
      + test_calling()
      + test_matching()
      + test_matching_with_position_parameters()
      + test_searching()
      + test_searching_with_position_parameters()
      + test_split()
      + test_findall()
      + test_finditer()
      + test_sub()
      + test_subn()
      + test_groups()
      + test_groupindex()
      + test_flags()
      + test_pattern()
  }

  class TestPropertyValue {
      + test_init()
      + test_cssText()
      + test_list()
      + test_comments()
      + test_incomplete()
      + test_readonly()
      + test_reprANDstr()
  }

  class TestValue {
      + test_init()
      + test_cssText()
  }

  class TestColorValue {
      + test_init()
      + test_cssText()
      + test_rgb()
  }

  class TestURIValue {
      + test_init()
      + test_absoluteUri()
      + test_cssText()
  }

  class TestDimensionValue {
      + test_init()
      + test_cssText()
  }

  class TestCSSFunction {
      + test_init()
      + test_cssText()
  }

  class TestCSSVariable {
      + test_init()
      + test_cssText()
      + test_cssValueType()
  }

  class TestCSSPrimitiveValue {
      + test_init()
      + test_CSS_UNKNOWN()
      + test_CSS_NUMBER_AND_OTHER_DIMENSIONS()
      + test_CSS_STRING_AND_OTHER()
      + test_getFloat()
      + test_setFloat()
      + test_getString()
      + test_setString()
      + test_typeRGBColor()
  }

  class TestX {
      + test_priority()
  }

  class RunCallable {
  }

  class G {
  }

  class A {
  }

  class B {
      + doing_it = False
  }

  class C {
  }

  class LeakCheckError {
  }

  class ignores_types_in_strict_leakcheck {
      - __init__(types)
  }

  class ContextVarsTests {
      + test_context_propagated_by_context_run()
      + test_context_propagated_by_setting_attribute()
      + test_context_not_propagated()
      + test_context_shared()
      + test_break_ctxvars()
      + test_not_broken_if_using_attribute_instead_of_context_run()
      + test_context_assignment_while_running()
      + test_context_assignment_different_thread()
      + test_context_assignment_wrong_type()
  }

  class NoContextVarsTests {
      + test_contextvars_errors()
  }

  class CPPTests {
      + test_exception_switch()
      + test_unhandled_nonstd_exception_aborts()
      + test_unhandled_std_exception_aborts()
      + test_unhandled_std_exception_as_greenlet_function_aborts()
      + test_unhandled_exception_in_greenlet_aborts()
  }

  class CAPITests {
      + test_switch()
      + test_switch_kwargs()
      + test_setparent()
      + test_getcurrent()
      + test_new_greenlet()
      + test_raise_greenlet_dead()
      + test_raise_greenlet_error()
      + test_throw()
      + test_non_traceback_param()
      + test_instance_of_wrong_type()
      + test_not_throwable()
  }

  class GCTests {
      + test_dead_circular_ref()
      + test_circular_greenlet()
      + test_inactive_ref()
      + test_finalizer_crash()
  }

  class genlet {
      + parent = None
      + next = __next__
  --
      - __init__()
      + run()
  }

  class GeneratorTests {
      + test_generator()
  }

  class genlet {
      + parent = None
      + next = __next__
  --
      - __init__()
      + run()
      + set_child(child)
  }

  class NestedGeneratorTests {
      + test_layered_genlets()
      + test_permutations()
      + test_genlet_simple()
      + test_genlet_bad()
      + test_nested_genlets()
  }

  class SomeError {
  }

  class TestGreenlet {
      + test_simple()
      + test_switch_no_run_raises_AttributeError()
      + test_throw_no_run_raises_AttributeError()
      + test_parent_equals_None()
      + test_run_equals_None()
      + test_two_children()
      + test_two_recursive_children()
      + test_threads()
      + test_exception()
      + test_send_exception()
      + test_dealloc()
      + test_dealloc_catches_GreenletExit_throws_other()
      + test_dealloc_other_thread()
      + test_frame()
      + test_thread_bug()
      + test_switch_kwargs()
      + test_switch_kwargs_to_parent()
      + test_switch_to_another_thread()
      + test_exc_state()
      + test_instance_dict()
      + test_running_greenlet_has_no_run()
      + test_deepcopy()
      + test_parent_restored_on_kill()
      + test_parent_return_failure()
      + test_throw_exception_not_lost()
      + test_throw_to_dead_thread_doesnt_crash()
      + test_throw_to_dead_thread_doesnt_crash_wait()
      + test_recursive_startup()
      + test_threaded_updatecurrent()
      + test_dealloc_switch_args_not_lost()
      + test_tuple_subclass()
      + test_abstract_subclasses()
      + test_implicit_parent_with_threads()
      + test_issue_245_reference_counting_subclass_no_threads()
      + test_issue_245_reference_counting_subclass_threads()
      + test_falling_off_end_switches_to_unstarted_parent_raises_error()
      + test_falling_off_end_switches_to_unstarted_parent_works()
      + test_switch_to_dead_greenlet_with_unstarted_perverse_parent()
      + test_switch_to_dead_greenlet_reparent()
      + test_can_access_f_back_of_suspended_greenlet()
      + test_get_stack_with_nested_c_calls()
      + test_frames_always_exposed()
  }

  class TestGreenletSetParentErrors {
      + test_threaded_reparent()
      + test_unexpected_reparenting()
      + test_unexpected_reparenting_thread_running()
      + test_cannot_delete_parent()
      + test_cannot_delete_parent_of_main()
      + test_main_greenlet_parent_is_none()
      + test_set_parent_wrong_types()
      + test_trivial_cycle()
      + test_trivial_cycle_main()
      + test_deeper_cycle()
  }

  class TestRepr {
      + assertEndsWith(got, suffix)
      + test_main_while_running()
      + test_main_in_background()
      + test_initial()
      + test_main_from_other_thread()
      + test_dead()
      + test_formatting_produces_native_str()
  }

  class TestMainGreenlet {
      + test_main_greenlet_type_can_be_subclassed()
      + test_main_greenlet_is_greenlet()
  }

  class TestBrokenGreenlets {
      + test_failed_to_initialstub()
      + test_failed_to_switch_into_running()
      + test_failed_to_slp_switch_into_running()
      + test_reentrant_switch_two_greenlets()
      + test_reentrant_switch_three_greenlets()
      + test_reentrant_switch_three_greenlets2()
      + test_reentrant_switch_GreenletAlreadyStartedInPython()
      + test_reentrant_switch_run_callable_has_del()
  }

  class TestTrashCanReEnter {
      + test_it()
      + check_it()
  }

  class HasFinalizerTracksInstances {
      + EXTANT_INSTANCES = set()
  --
      - __init__(msg)
      + {classmethod} reset(cls)
  }

  class TestLeaks {
      + UNTRACK_ATTEMPTS = 100
  --
      + test_arg_refs()
      + test_kwarg_refs()
      + test_threaded_leak()
      + test_threaded_adv_leak()
      + assertClocksUsed()
      + test_issue251_killing_cross_thread_leaks_list()
      + test_issue251_with_cleanup_disabled()
      + test_issue251_issue252_need_to_collect_in_background()
      + test_issue251_issue252_need_to_collect_in_background_cleanup_disabled()
      + test_issue251_issue252_explicit_reference_not_collectable()
      + test_untracked_memory_doesnt_increase()
      + test_untracked_memory_doesnt_increase_unfinished_thread_dealloc_in_thread()
      + test_untracked_memory_doesnt_increase_unfinished_thread_dealloc_in_main()
  }

  class Test {
      + test_stack_saved()
  }

  class ThrowTests {
      + test_class()
      + test_val()
      + test_kill()
      + test_throw_goes_to_original_parent()
      + test_non_traceback_param()
      + test_instance_of_wrong_type()
      + test_not_throwable()
  }

  class SomeError {
  }

  class GreenletTracer {
      + oldtrace = None
  --
      - __init__(error_on_trace = False)
  }

  class TestGreenletTracing {
      + test_a_greenlet_tracing()
      + test_b_exception_disables_tracing()
      + test_set_same_tracer_twice()
  }

  class PythonTracer {
      + oldtrace = None
  --
      - __init__()
  }

  class TestPythonTracing {
      + maxDiff = None
  --
      + test_trace_events_trivial()
      + test_trace_events_into_greenlet_func_already_set()
      + test_trace_events_into_greenlet_subclass_already_set()
      + test_trace_events_from_greenlet_func_sets_profiler()
      + test_trace_events_from_greenlet_subclass_sets_profiler()
      + test_trace_events_multiple_greenlets_switching()
      + test_trace_events_multiple_greenlets_switching_siblings()
  }

  class VersionTests {
      + test_version()
  }

  class WeakRefTests {
      + test_dead_weakref()
      + test_inactive_weakref()
      + test_dealloc_weakref()
  }

  class TestCaseMetaClass {
  }

  class TestCase {
      + cleanup_attempt_sleep_duration = 0.001
      + cleanup_max_sleep_seconds = 1
      + greenlets_before_test = 0
      + threads_before_test = 0
      + main_greenlets_before_test = 0
      + expect_greenlet_leak = False
  --
      + wait_for_pending_cleanups(initial_active_threads = None, initial_main_greenlets = None)
      + count_objects(kind = list, exact_kind = True)
      + count_greenlets()
      + setUp()
      + tearDown()
      + get_expected_returncodes_for_aborted_process()
      + get_process_uss()
      + run_script(script_name, show_output = True)
      + assertScriptRaises(script_name, exitcodes = None)
  }

  class ConnectionPair {
      - __init__()
      + conns(): ValuesView[Connection]
      + send(role: Type[Sentinel], send_events: Union[List[Event], Event], expect: Union[List[Event], Event, Literal['match']] = 'match'): bytes
  }

  class SingleMindedRequestHandler {
      + translate_path(path: str): str
  }

  class H11RequestHandler {
      + handle()
  }

  class TestCase {
  }

  class HtpasswdFileTest {
      + descriptionPrefix = 'HtpasswdFile'
      + sample_01 = b'user2:2CHkkwa2AtqGs\nuser3:{SHA}3ipNV1GrBtxPmHFC21fCbVCSXIo=\nuser4:pass4\nuser1:$apr1$t4tc7jTh$GPIWVUo8sQKJlUdV8V5vu0\n'
      + sample_02 = b'user3:{SHA}3ipNV1GrBtxPmHFC21fCbVCSXIo=\nuser4:pass4\n'
      + sample_03 = b'user2:pass2x\nuser3:{SHA}3ipNV1GrBtxPmHFC21fCbVCSXIo=\nuser4:pass4\nuser1:$apr1$t4tc7jTh$GPIWVUo8sQKJlUdV8V5vu0\nuser5:pass5\n'
      + sample_04_utf8 = b'user\xc3\xa6:2CHkkwa2AtqGs\n'
      + sample_04_latin1 = b'user\xe6:2CHkkwa2AtqGs\n'
      + sample_dup = b'user1:pass1\nuser1:pass2\n'
      + sample_05 = b'user2:2CHkkwa2AtqGs\nuser3:{SHA}3ipNV1GrBtxPmHFC21fCbVCSXIo=\nuser4:pass4\nuser1:$apr1$t4tc7jTh$GPIWVUo8sQKJlUdV8V5vu0\nuser5:$2a$12$yktDxraxijBZ360orOyCOePFGhuis/umyPNJoL5EbsLk.s6SWdrRO\nuser6:$5$rounds=110000$cCRp/xUUGVgwR4aP$p0.QKFS5qLNRqw1/47lXYiAcgIjJK.WjCO8nrEKuUK.\n'
  --
      + test_00_constructor_autoload()
      + test_00_from_path()
      + test_01_delete()
      + test_01_delete_autosave()
      + test_02_set_password()
      + test_02_set_password_autosave()
      + test_02_set_password_default_scheme()
      + test_03_users()
      + test_04_check_password()
      + test_05_load()
      + test_06_save()
      + test_07_encodings()
      + test_08_get_hash()
      + test_09_to_string()
      + test_10_repr()
      + test_11_malformed()
      + test_12_from_string()
      + test_13_whitespace()
      + test_htpasswd_cmd_verify()
      + test_htpasswd_cmd_verify_bcrypt()
  }

  class HtdigestFileTest {
      + descriptionPrefix = 'HtdigestFile'
      + sample_01 = b'user2:realm:549d2a5f4659ab39a80dac99e159ab19\nuser3:realm:a500bb8c02f6a9170ae46af10c898744\nuser4:realm:ab7b5d5f28ccc7666315f508c7358519\nuser1:realm:2a6cf53e7d8f8cf39d946dc880b14128\n'
      + sample_02 = b'user3:realm:a500bb8c02f6a9170ae46af10c898744\nuser4:realm:ab7b5d5f28ccc7666315f508c7358519\n'
      + sample_03 = b'user2:realm:5ba6d8328943c23c64b50f8b29566059\nuser3:realm:a500bb8c02f6a9170ae46af10c898744\nuser4:realm:ab7b5d5f28ccc7666315f508c7358519\nuser1:realm:2a6cf53e7d8f8cf39d946dc880b14128\nuser5:realm:03c55fdc6bf71552356ad401bdb9af19\n'
      + sample_04_utf8 = b'user\xc3\xa6:realm\xc3\xa6:549d2a5f4659ab39a80dac99e159ab19\n'
      + sample_04_latin1 = b'user\xe6:realm\xe6:549d2a5f4659ab39a80dac99e159ab19\n'
  --
      + test_00_constructor_autoload()
      + test_01_delete()
      + test_01_delete_autosave()
      + test_02_set_password()
      + test_03_users()
      + test_04_check_password()
      + test_05_load()
      + test_06_save()
      + test_07_realms()
      + test_08_get_hash()
      + test_09_encodings()
      + test_10_to_string()
      + test_11_malformed()
  }

  class AppsTest {
      + test_master_context()
      + test_custom_app_context()
      + test_django16_context()
      + test_django_context()
      + test_ldap_nocrypt_context()
      + test_ldap_context()
      + test_ldap_mysql_context()
      + test_postgres_context()
      + test_phppass_context()
      + test_phpbb3_context()
      + test_roundup_context()
  }

  class CryptContextTest {
      + descriptionPrefix = 'CryptContext'
      + sample_1_schemes = ['des_crypt', 'md5_crypt', 'bsdi_crypt', 'sha512_crypt']
      + sample_1_handlers = [get_crypt_handler(name) for name in sample_1_schemes]
      + sample_1_dict = dict(schemes=sample_1_schemes, default='md5_crypt', all__vary_rounds=0.1, bsdi_crypt__max_rounds=30001, bsdi_crypt__default_rounds=25001, sha512_crypt__max_rounds=50000, sha512_crypt__min_rounds=40000)
      + sample_1_resolved_dict = merge_dicts(sample_1_dict, schemes=sample_1_handlers)
      + sample_1_unnormalized = u('[passlib]\nschemes = des_crypt, md5_crypt, bsdi_crypt, sha512_crypt\ndefault = md5_crypt\n; this is using %...\nall__vary_rounds = 10%%\nbsdi_crypt__default_rounds = 25001\nbsdi_crypt__max_rounds = 30001\nsha512_crypt__max_rounds = 50000\nsha512_crypt__min_rounds = 40000\n')
      + sample_1_unicode = u('[passlib]\nschemes = des_crypt, md5_crypt, bsdi_crypt, sha512_crypt\ndefault = md5_crypt\nall__vary_rounds = 0.1\nbsdi_crypt__default_rounds = 25001\nbsdi_crypt__max_rounds = 30001\nsha512_crypt__max_rounds = 50000\nsha512_crypt__min_rounds = 40000\n\n')
      + sample_1_path = os.path.join(here, 'sample1.cfg')
      + sample_1b_unicode = sample_1_unicode.replace(u('\n'), u('\r\n'))
      + sample_1b_path = os.path.join(here, 'sample1b.cfg')
      + sample_1c_bytes = sample_1_unicode.replace(u('[passlib]'), u('[mypolicy]')).encode('utf-16')
      + sample_1c_path = os.path.join(here, 'sample1c.cfg')
      + sample_2_dict = dict(bsdi_crypt__min_rounds=29001, bsdi_crypt__max_rounds=35001, bsdi_crypt__default_rounds=31001, sha512_crypt__min_rounds=45000)
      + sample_2_unicode = '[passlib]\nbsdi_crypt__min_rounds = 29001\nbsdi_crypt__max_rounds = 35001\nbsdi_crypt__default_rounds = 31001\nsha512_crypt__min_rounds = 45000\n'
      + sample_12_dict = merge_dicts(sample_1_dict, sample_2_dict)
      + sample_3_dict = dict(default='sha512_crypt')
      + sample_123_dict = merge_dicts(sample_12_dict, sample_3_dict)
      + sample_4_dict = dict(schemes=['des_crypt', 'md5_crypt', 'phpass', 'bsdi_crypt', 'sha256_crypt'], deprecated=['des_crypt'], default='sha256_crypt', bsdi_crypt__max_rounds=31, bsdi_crypt__default_rounds=25, bsdi_crypt__vary_rounds=0, sha256_crypt__max_rounds=3000, sha256_crypt__min_rounds=2000, sha256_crypt__default_rounds=3000, phpass__ident='H', phpass__default_rounds=7)
      + nonstring_vectors = [(None, {}), (None, {'scheme': 'des_crypt'}), (1, {}), ((), {})]
  --
      + setUp()
      + test_01_constructor()
      + test_02_from_string()
      + test_03_from_path()
      + test_04_copy()
      + test_09_repr()
      + test_10_load()
      + test_11_load_rollback()
      + test_12_update()
      + test_20_options()
      + test_21_schemes()
      + test_22_deprecated()
      + test_23_default()
      + test_24_vary_rounds()
      + assertHandlerDerivedFrom(handler, base, msg = None)
      + test_30_schemes()
      + test_31_default_scheme()
      + test_32_handler()
      + test_33_options()
      + test_34_to_dict()
      + test_35_to_string()
      + test_40_basic()
      + test_41_genconfig()
      + test_42_genhash()
      + test_43_hash()
      + test_43_hash_legacy(use_16_legacy = False)
      + test_44_identify()
      + test_45_verify()
      + test_46_needs_update()
      + test_47_verify_and_update()
      + test_48_context_kwds()
      + test_50_rounds_limits()
      + test_51_linear_vary_rounds()
      + test_52_log2_vary_rounds()
      + assert_rounds_range(context, scheme, lower, upper)
      + test_harden_verify_parsing()
      + test_dummy_verify()
      + test_61_autodeprecate()
      + test_disabled_hashes()
  }

  class DelayHash {
      + name = 'delay_hash'
      + checksum_chars = uh.LOWER_HEX_CHARS
      + checksum_size = 40
      + delay = 0
  }

  class dummy_2 {
      + name = 'dummy_2'
  }

  class LazyCryptContextTest {
      + descriptionPrefix = 'LazyCryptContext'
  --
      + setUp()
      + test_kwd_constructor()
      + test_callable_constructor()
  }

  class CryptPolicyTest {
      + descriptionPrefix = 'CryptPolicy'
      + sample_config_1s = '[passlib]\nschemes = des_crypt, md5_crypt, bsdi_crypt, sha512_crypt\ndefault = md5_crypt\nall.vary_rounds = 10%%\nbsdi_crypt.max_rounds = 30000\nbsdi_crypt.default_rounds = 25000\nsha512_crypt.max_rounds = 50000\nsha512_crypt.min_rounds = 40000\n'
      + sample_config_1s_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'sample_config_1s.cfg'))
      + sample_config_1pd = dict(schemes=['des_crypt', 'md5_crypt', 'bsdi_crypt', 'sha512_crypt'], default='md5_crypt', all__vary_rounds=0.1, bsdi_crypt__max_rounds=30000, bsdi_crypt__default_rounds=25000, sha512_crypt__max_rounds=50000, sha512_crypt__min_rounds=40000)
      + sample_config_1pid = {'schemes': 'des_crypt, md5_crypt, bsdi_crypt, sha512_crypt', 'default': 'md5_crypt', 'all.vary_rounds': 0.1, 'bsdi_crypt.max_rounds': 30000, 'bsdi_crypt.default_rounds': 25000, 'sha512_crypt.max_rounds': 50000, 'sha512_crypt.min_rounds': 40000}
      + sample_config_1prd = dict(schemes=[hash.des_crypt, hash.md5_crypt, hash.bsdi_crypt, hash.sha512_crypt], default='md5_crypt', all__vary_rounds=0.1, bsdi_crypt__max_rounds=30000, bsdi_crypt__default_rounds=25000, sha512_crypt__max_rounds=50000, sha512_crypt__min_rounds=40000)
      + sample_config_2s = '[passlib]\nbsdi_crypt.min_rounds = 29000\nbsdi_crypt.max_rounds = 35000\nbsdi_crypt.default_rounds = 31000\nsha512_crypt.min_rounds = 45000\n'
      + sample_config_2pd = dict(bsdi_crypt__min_rounds=29000, bsdi_crypt__max_rounds=35000, bsdi_crypt__default_rounds=31000, sha512_crypt__min_rounds=45000)
      + sample_config_12pd = dict(schemes=['des_crypt', 'md5_crypt', 'bsdi_crypt', 'sha512_crypt'], default='md5_crypt', all__vary_rounds=0.1, bsdi_crypt__min_rounds=29000, bsdi_crypt__max_rounds=35000, bsdi_crypt__default_rounds=31000, sha512_crypt__max_rounds=50000, sha512_crypt__min_rounds=45000)
      + sample_config_3pd = dict(default='sha512_crypt')
      + sample_config_123pd = dict(schemes=['des_crypt', 'md5_crypt', 'bsdi_crypt', 'sha512_crypt'], default='sha512_crypt', all__vary_rounds=0.1, bsdi_crypt__min_rounds=29000, bsdi_crypt__max_rounds=35000, bsdi_crypt__default_rounds=31000, sha512_crypt__max_rounds=50000, sha512_crypt__min_rounds=45000)
      + sample_config_4s = '\n[passlib]\nschemes = sha512_crypt\nall.vary_rounds = 10%%\ndefault.sha512_crypt.max_rounds = 20000\nadmin.all.vary_rounds = 5%%\nadmin.sha512_crypt.max_rounds = 40000\n'
      + sample_config_4pd = dict(schemes=['sha512_crypt'], all__vary_rounds=0.1, sha512_crypt__max_rounds=20000, admin__all__vary_rounds=0.05, admin__sha512_crypt__max_rounds=40000)
      + sample_config_5s = sample_config_1s + 'deprecated = des_crypt\nadmin__context__deprecated = des_crypt, bsdi_crypt\n'
      + sample_config_5pd = sample_config_1pd.copy()
      + sample_config_5pid = sample_config_1pid.copy()
      + sample_config_5prd = sample_config_1prd.copy()
  --
      + setUp()
      + test_00_constructor()
      + test_01_from_path_simple()
      + test_01_from_path()
      + test_02_from_string()
      + test_03_from_source()
      + test_04_from_sources()
      + test_05_replace()
      + test_06_forbidden()
      + test_10_has_schemes()
      + test_11_iter_handlers()
      + test_12_get_handler()
      + test_13_get_options()
      + test_14_handler_is_deprecated()
      + test_15_min_verify_time()
      + test_20_iter_config()
      + test_21_to_dict()
      + test_22_to_string()
  }

  class CryptContextTest {
      + descriptionPrefix = 'CryptContext'
      + sample_policy_1 = dict(schemes=['des_crypt', 'md5_crypt', 'phpass', 'bsdi_crypt', 'sha256_crypt'], deprecated=['des_crypt'], default='sha256_crypt', bsdi_crypt__max_rounds=30, bsdi_crypt__default_rounds=25, bsdi_crypt__vary_rounds=0, sha256_crypt__max_rounds=3000, sha256_crypt__min_rounds=2000, sha256_crypt__default_rounds=3000, phpass__ident='H', phpass__default_rounds=7)
  --
      + setUp()
      + test_00_constructor()
      + test_01_replace()
      + test_02_no_handlers()
      + test_12_hash_needs_update()
      + test_30_nonstring_hash()
  }

  class dummy_2 {
      + name = 'dummy_2'
  }

  class LazyCryptContextTest {
      + descriptionPrefix = 'LazyCryptContext'
  --
      + setUp()
      + test_kwd_constructor()
      + test_callable_constructor()
  }

  class MD4_SSL_Test {
      + descriptionPrefix = "hashlib.new('md4')"
  --
      + setUp()
  }

  class MD4_Builtin_Test {
      + descriptionPrefix = 'passlib.crypto._md4.md4()'
  --
      + setUp()
  }

  class DesTest {
      + descriptionPrefix = 'passlib.crypto.des'
      + des_test_vectors = [(0, 0, 10134873677816210343), (18446744073709551615, 18446744073709551615, 8311870395893341272), (3458764513820540928, 1152921504606846977, 10776672327577195899), (1229782938247303441, 1229782938247303441, 17583031148182684979), (81985529216486895, 1229782938247303441, 1686191225890296621), (1229782938247303441, 81985529216486895, 9969529180854481629), (0, 0, 10134873677816210343), (18364758544493064720, 81985529216486895, 17093932802483993796), (8980477021735513687, 117611255094011714, 7570369612612015003), (86088881178490734, 6689337107006052314, 8806961764262204017), (549741787767056006, 164614723499094386, 9695893007742818714), (4055886516176695710, 5856169732564009994, 8176434030039898922), (340327136592049590, 4827089350059065250, 12625836341772173461), (77609513531011790, 404019981405066298, 9702267560690899035), (103848277426812390, 528848464848052690, 924322050668092425), (4839539656546808830, 8513233451820730474, 16890586767283661690), (551430852305365526, 4313623329492117506, 16129161034940226063), (317663223366892335, 2780233246153072794, 6652164766532288648), (4021832892757538118, 1607044272340030002, 732660321565846391), (2236079052714821214, 7711690988273491146, 17229628950091290458), (6359121586699264374, 21346945391353954, 9853609588653157974), (168909270948622343, 5191868619451491058, 11671519704656251734), (5294331816167286159, 4860862602324950266, 8052186200196056406), (5742192969548264359, 517143888688272018, 3396528426238910892), (5325890758360836543, 215703803915661610, 6515408130789920330), (108949354149783254, 2133963297529473218, 6866867443762671169), (2042522189576687599, 3482745036057028954, 7204282554404960147), (72340172838076673, 81985529216486895, 7024271870936510720), (2242545357694045710, 81985529216486895, 15822700226042971654), (16212643094166696446, 81985529216486895, 17131642157689064647), (0, 18446744073709551615, 3843066582818235473), (18446744073709551615, 0, 14603677490891316142), (81985529216486895, 0, 15408028147960528141), (18364758544493064720, 18446744073709551615, 3038715925749023474)]
  --
      + test_01_expand()
      + test_02_shrink()
      + test_03_encrypt_bytes()
      + test_04_encrypt_ints()
  }

  class HashInfoTest {
      + descriptionPrefix = 'passlib.crypto.digest'
      + norm_hash_formats = ['hashlib', 'iana']
      + norm_hash_samples = [('md5', 'md5', 'SCRAM-MD5-PLUS', 'MD-5'), ('sha1', 'sha-1', 'SCRAM-SHA-1', 'SHA1'), ('sha256', 'sha-256', 'SHA_256', 'sha2-256'), ('ripemd160', 'ripemd-160', 'SCRAM-RIPEMD-160', 'RIPEmd160', 'ripemd', 'SCRAM-RIPEMD'), ('sha4_256', 'sha4-256', 'SHA4-256', 'SHA-4-256'), ('test128', 'test-128', 'TEST128'), ('test2', 'test2', 'TEST-2'), ('test3_128', 'test3-128', 'TEST-3-128')]
  --
      + test_norm_hash_name()
      + test_lookup_hash_ctor()
      + test_lookup_hash_w_unknown_name()
      + test_mock_fips_mode()
      + test_lookup_hash_metadata()
      + test_lookup_hash_alt_types()
  }

  class Pbkdf1_Test {
      + descriptionPrefix = 'passlib.crypto.digest.pbkdf1'
      + pbkdf1_tests = [(b'password', hb('78578E5A5D63CB06'), 1000, 16, 'sha1', hb('dc19847e05c64d2faf10ebfb4a3d2a20')), (b'password', b'salt', 1000, 0, 'md5', b''), (b'password', b'salt', 1000, 1, 'md5', hb('84')), (b'password', b'salt', 1000, 8, 'md5', hb('8475c6a8531a5d27')), (b'password', b'salt', 1000, 16, 'md5', hb('8475c6a8531a5d27e386cd496457812c')), (b'password', b'salt', 1000, None, 'md5', hb('8475c6a8531a5d27e386cd496457812c')), (b'password', b'salt', 1000, None, 'sha1', hb('4a8fd48e426ed081b535be5769892fa396293efb'))]
  --
      + test_known()
      + test_border()
  }

  class Pbkdf2Test {
      + descriptionPrefix = 'passlib.crypto.digest.pbkdf2_hmac() <backends: %s>' % ', '.join(PBKDF2_BACKENDS)
      + pbkdf2_test_vectors = [(hb('cdedb5281bb2f801565a1122b2563515'), b'password', b'ATHENA.MIT.EDUraeburn', 1, 16), (hb('01dbee7f4a9e243e988b62c73cda935d'), b'password', b'ATHENA.MIT.EDUraeburn', 2, 16), (hb('01dbee7f4a9e243e988b62c73cda935da05378b93244ec8f48a99e61ad799d86'), b'password', b'ATHENA.MIT.EDUraeburn', 2, 32), (hb('5c08eb61fdf71e4e4ec3cf6ba1f5512ba7e52ddbc5e5142f708a31e2e62b1e13'), b'password', b'ATHENA.MIT.EDUraeburn', 1200, 32), (hb('d1daa78615f287e6a1c8b120d7062a493f98d203e6be49a6adf4fa574b6e64ee'), b'password', b'\x124VxxV4\x12', 5, 32), (hb('139c30c0966bc32ba55fdbf212530ac9c5ec59f1a452f5cc9ad940fea0598ed1'), b'X' * 64, b'pass phrase equals block size', 1200, 32), (hb('9ccad6d468770cd51b10e6a68721be611a8b4d282601db3b36be9246915ec82a'), b'X' * 65, b'pass phrase exceeds block size', 1200, 32), (hb('0c60c80f961f0e71f3a9b524af6012062fe037a6'), b'password', b'salt', 1, 20), (hb('ea6c014dc72d6f8ccd1ed92ace1d41f0d8de8957'), b'password', b'salt', 2, 20), (hb('4b007901b765489abead49d926f721d065a429c1'), b'password', b'salt', 4096, 20), (hb('3d2eec4fe41c849b80c8d83662c0e44a8b291a964cf2f07038'), b'passwordPASSWORDpassword', b'saltSALTsaltSALTsaltSALTsaltSALTsalt', 4096, 25), (hb('56fa6aa75548099dcc37d7f03425e0c3'), b'pass\x00word', b'sa\x00lt', 4096, 16), (hb('887CFF169EA8335235D8004242AA7D6187A41E3187DF0CE14E256D85ED97A97357AAA8FF0A3871AB9EEFF458392F462F495487387F685B7472FC6C29E293F0A0'), b'hello', hb('9290F727ED06C38BA4549EF7DE25CF5642659211B7FC076F2D28FEFD71784BB8D8F6FB244A8CC5C06240631B97008565A120764C0EE9C2CB0073994D79080136'), 10000, 64, 'sha512'), (hb('55ac046e56e3089fec1691c22544b605f94185216dde0465e68b9d57c20dacbc49ca9cccf179b645991664b39d77ef317c71b845b1e30bd509112041d3a19783'), b'passwd', b'salt', 1, 64, 'sha256'), (hb('4ddcd8f60b98be21830cee5ef22701f9641a4418d04c0414aeff08876b34ab56a1d425a1225833549adb841b51c9b3176a272bdebba1d078478f62b397f33c8d'), b'Password', b'NaCl', 80000, 64, 'sha256'), (hb('120fb6cffcf8b32c43e7225256c4f837a86548c92ccc35480805987cb70be17b'), b'password', b'salt', 1, 32, 'sha256'), (hb('ae4d0c95af6b46d32d0adff928f06dd02a303f8ef3c251dfd6e2d85a95474c43'), b'password', b'salt', 2, 32, 'sha256'), (hb('c5e478d59288c841aa530db6845c4c8d962893a001ce4e11a4963873aa98134a'), b'password', b'salt', 4096, 32, 'sha256'), (hb('348c89dbcbd32b2f32d814b8116e84cf2b17347ebc1800181c4e2a1fb8dd53e1c635518c7dac47e9'), b'passwordPASSWORDpassword', b'saltSALTsaltSALTsaltSALTsaltSALTsalt', 4096, 40, 'sha256'), (hb('9e83f279c040f2a11aa4a02b24c418f2d3cb39560c9627fa4f47e3bcc2897c3d'), b'', b'salt', 1024, 32, 'sha256'), (hb('ea5808411eb0c7e830deab55096cee582761e22a9bc034e3ece925225b07bf46'), b'password', b'', 1024, 32, 'sha256'), (hb('89b69d0516f829893c696226650a8687'), b'pass\x00word', b'sa\x00lt', 4096, 16, 'sha256'), (hb('867f70cf1ade02cff3752599a3a53dc4af34c7a669815ae5d513554e1c8cf252'), b'password', b'salt', 1, 32, 'sha512'), (hb('e1d9c16aa681708a45f5c7c4e215ceb66e011a2e9f0040713f18aefdb866d53c'), b'password', b'salt', 2, 32, 'sha512'), (hb('d197b1b33db0143e018b12f3d1d1479e6cdebdcc97c5c0f87f6902e072f457b5'), b'password', b'salt', 4096, 32, 'sha512'), (hb('6e23f27638084b0f7ea1734e0d9841f55dd29ea60a834466f3396bac801fac1eeb63802f03a0b4acd7603e3699c8b74437be83ff01ad7f55dac1ef60f4d56480c35ee68fd52c6936'), b'passwordPASSWORDpassword', b'saltSALTsaltSALTsaltSALTsaltSALTsalt', 1, 72, 'sha512'), (hb('0c60c80f961f0e71f3a9b524af6012062fe037a6'), b'password', b'salt', 1, 20, 'sha1'), (hb('e248fb6b13365146f8ac6307cc222812'), b'secret', b'salt', 10, 16, 'sha1'), (hb('e248fb6b13365146f8ac6307cc2228127872da6d'), b'secret', b'salt', 10, None, 'sha1'), (hb('b1d5485772e6f76d5ebdc11b38d3eff0a5b2bd50dc11f937e86ecacd0cd40d1b9113e0734e3b76a3'), b'secret', b'salt', 62, 40, 'md5'), (hb('ea014cc01f78d3883cac364bb5d054e2be238fb0b6081795a9d84512126e3129062104d2183464c4'), b'secret', b'salt', 62, 40, 'md4')]
  --
      + test_known()
      + test_backends()
      + test_border()
      + test_default_keylen()
  }

  class ScryptEngineTest {
      + descriptionPrefix = 'passlib.crypto.scrypt._builtin'
  --
      + test_smix()
      + test_bmix()
      + test_salsa()
  }

  class BuiltinScryptTest {
      + backend = 'builtin'
  --
      + setUp()
      + test_missing_backend()
  }

  class ScryptPackageTest {
      + backend = 'scrypt'
  --
      + test_default_backend()
  }

  class StdlibScryptTest {
      + backend = 'stdlib'
  --
      + test_default_backend()
  }

  class FakeUser {
      + saved_passwords()
      + pop_saved_passwords()
      + save(update_fields = None)
  }

  class Meta {
      + app_label = __name__
  }

  class DjangoBehaviorTest {
      + descriptionPrefix = 'verify django behavior'
      + patched = False
      + config = stock_config
  --
      + context()
      + assert_unusable_password(user)
      + assert_valid_password(user, hash = UNSET, saved = None)
      + test_extension_config()
      + test_default_algorithm()
      + test_empty_password()
      + test_unusable_flag()
      + test_none_hash_value()
      + test_empty_hash_value()
      + test_invalid_hash_values()
      + test_available_schemes()
  }

  class ExtensionBehaviorTest {
      + descriptionPrefix = 'verify extension behavior'
      + config = dict(schemes='sha256_crypt,md5_crypt,des_crypt', deprecated='des_crypt')
  --
      + setUp()
  }

  class DjangoExtensionTest {
      + descriptionPrefix = 'passlib.ext.django plugin'
  --
      + test_00_patch_control()
      + test_01_overwrite_detection()
      + test_02_handler_wrapper()
      + test_11_config_disabled()
      + test_12_config_presets()
      + test_13_config_defaults()
      + test_14_config_invalid()
      + test_21_category_setting()
  }

  class HashersTest {
      + patchAttr = get_unbound_method_function(TestCase.patchAttr)
      + test_pbkdf2_upgrade_new_hasher = _OMIT
      + test_check_password_calls_harden_runtime = _OMIT
      + test_bcrypt_harden_runtime = _OMIT
      + test_pbkdf2_harden_runtime = _OMIT
  --
      + setUp()
      + tearDown()
  }

  class HashersTest {
      + test_external_django_hasher_tests()
  }

  class apr_md5_crypt_test {
      + handler = hash.apr_md5_crypt
      + known_correct_hashes = [('myPassword', '$apr1$r31.....$HqJZimcKQFAMYayBlzkrA/'), (UPASS_TABLE, '$apr1$bzYrOHUx$a1FcpXuQDJV3vPY20CS6N1')]
      + known_malformed_hashes = ['$apr1$r31.....$HqJZimcKQFAMYayBlzkrA!']
  }

  class bigcrypt_test {
      + handler = hash.bigcrypt
      + known_correct_hashes = [('passphrase', 'qiyh4XPJGsOZ2MEAyLkfWqeQ'), ('This is very long passwd', 'f8.SVpL2fvwjkAnxn8/rgTkwvrif6bjYB5c'), (UPASS_TABLE, 'SEChBAyMbMNhgGLyP7kD1HZU')]
      + known_unidentified_hashes = ['qiyh4XPJGsOZ2MEAyLkfWqef8.SVpL2fvwjkAnxn8/rgTkwvrif6bjYB5cd']
      + known_other_hashes = [row for row in HandlerCase.known_other_hashes if row[0] != 'des_crypt']
  --
      + test_90_internal()
  }

  class crypt16_test {
      + handler = hash.crypt16
      + known_correct_hashes = [('passphrase', 'qi8H8R7OM4xMUNMPuRAZxlY.'), ('printf', 'aaCjFz4Sh8Eg2QSqAReePlq6'), ('printf', 'AA/xje2RyeiSU0iBY3PDwjYo'), ('LOLOAQICI82QB4IP', '/.FcK3mad6JwYt8LVmDqz9Lc'), ('LOLOAQICI', '/.FcK3mad6JwYSaRHJoTPzY2'), ('LOLOAQIC', '/.FcK3mad6JwYelhbtlysKy6'), ('L', '/.CIu/PzYCkl6elhbtlysKy6'), (UPASS_TABLE, 'YeDc9tKkkmDvwP7buzpwhoqQ')]
  }

  class fshp_test {
      + handler = hash.fshp
      + known_correct_hashes = [('test', '{FSHP0|0|1}qUqP5cyxm6YcTAhz05Hph5gvu9M='), ('test', '{FSHP1|8|4096}MTIzNDU2NzjTdHcmoXwNc0ff9+ArUHoN0CvlbPZpxFi1C6RDM/MHSA=='), ('OrpheanBeholderScryDoubt', '{FSHP1|8|4096}GVSUFDAjdh0vBosn1GUhzGLHP7BmkbCZVH/3TQqGIjADXpc+6NCg3g=='), ('ExecuteOrder66', '{FSHP3|16|8192}0aY7rZQ+/PR+Rd5/I9ssRM7cjguyT8ibypNaSp/U1uziNO3BVlg5qPUng+zHUDQC3ao/JbzOnIBUtAeWHEy7a2vZeZ7jAwyJJa2EqOsq4Io='), (UPASS_TABLE, '{FSHP1|16|16384}9v6/l3Lu/d9by5nznpOScqQo8eKu/b/CKli3RCkgYg4nRTgZu5y659YV8cCZ68UL')]
      + known_unidentified_hashes = ['{FSHX0|0|1}qUqP5cyxm6YcTAhz05Hph5gvu9M=', 'FSHP0|0|1}qUqP5cyxm6YcTAhz05Hph5gvu9M=']
      + known_malformed_hashes = ['{FSHP0|0|1}qUqP5cyxm6YcTAhz05Hph5gvu9M', '{FSHP0|1|1}qUqP5cyxm6YcTAhz05Hph5gvu9M=', '{FSHP0|0|A}qUqP5cyxm6YcTAhz05Hph5gvu9M=']
  --
      + test_90_variant()
  }

  class hex_md4_test {
      + handler = hash.hex_md4
      + known_correct_hashes = [('password', '8a9d093f14f8701df17732b2bb182c74'), (UPASS_TABLE, '876078368c47817ce5f9115f3a42cf74')]
  }

  class hex_md5_test {
      + handler = hash.hex_md5
      + known_correct_hashes = [('password', '5f4dcc3b5aa765d61d8327deb882cf99'), (UPASS_TABLE, '05473f8a19f66815e737b33264a0d0b0')]
  --
      + test_mock_fips_mode()
  }

  class hex_sha1_test {
      + handler = hash.hex_sha1
      + known_correct_hashes = [('password', '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8'), (UPASS_TABLE, 'e059b2628e3a3e2de095679de9822c1d1466e0f0')]
  }

  class hex_sha256_test {
      + handler = hash.hex_sha256
      + known_correct_hashes = [('password', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8'), (UPASS_TABLE, '6ed729e19bf24d3d20f564375820819932029df05547116cfc2cc868a27b4493')]
  }

  class hex_sha512_test {
      + handler = hash.hex_sha512
      + known_correct_hashes = [('password', 'b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86'), (UPASS_TABLE, 'd91bb0a23d66dca07a1781fd63ae6a05f6919ee5fc368049f350c9f293b078a18165d66097cf0d89fdfbeed1ad6e7dba2344e57348cd6d51308c843a06f29caf')]
  }

  class htdigest_test {
      + handler = hash.htdigest
      + known_correct_hashes = [(('Circle Of Life', 'Mufasa', 'testrealm@host.com'), '939e7578ed9e3c518a452acee763bce9'), ((UPASS_TABLE, UPASS_USD, UPASS_WAV), '4dabed2727d583178777fab468dd1f17')]
      + known_unidentified_hashes = ['939e7578edAe3c518a452acee763bce9', '939e7578edxe3c518a452acee763bce9']
  --
      + test_80_user()
      + populate_context(secret, kwds)
  }

  class ldap_md5_test {
      + handler = hash.ldap_md5
      + known_correct_hashes = [('helloworld', '{MD5}/F4DjTilcDIIVEHn/nAQsA=='), (UPASS_TABLE, '{MD5}BUc/ihn2aBXnN7MyZKDQsA==')]
  }

  class ldap_sha1_test {
      + handler = hash.ldap_sha1
      + known_correct_hashes = [('helloworld', '{SHA}at+xg6SiyUovktq1redipHiJpaE='), (UPASS_TABLE, '{SHA}4FmyYo46Pi3glWed6YIsHRRm4PA=')]
  }

  class ldap_salted_md5_test {
      + handler = hash.ldap_salted_md5
      + known_correct_hashes = [('testing1234', '{SMD5}UjFY34os/pnZQ3oQOzjqGu4yeXE='), (UPASS_TABLE, '{SMD5}Z0ioJ58LlzUeRxm3K6JPGAvBGIM='), ('test', '{SMD5}LnuZPJhiaY95/4lmVFpg548xBsD4P4cw'), ('test', '{SMD5}XRlncfRzvGi0FDzgR98tUgBg7B3jXOs9p9S615qTkg=='), ('test', '{SMD5}FbAkzOMOxRbMp6Nn4hnZuel9j9Gas7a2lvI+x5hT6j0=')]
      + known_malformed_hashes = ['{SMD5}IGVhwK+anvspmfDt2t0vgGjt/Q==', '{SMD5}LnuZPJhiaY95/4lmVFpg548xBsD4P4c', '{SMD5}LnuZPJhiaY95/4lmVFpg548xBsD4P4cw{SMD5}LnuZPJhiaY95/4lmVFpg548xBsD4P4cw=', '{SMD5}LnuZPJhiaY95/4lmV=pg548xBsD4P4cw', '{SMD5}LnuZPJhiaY95/4lmVFpg548xBsD4P===']
  }

  class ldap_salted_sha1_test {
      + handler = hash.ldap_salted_sha1
      + known_correct_hashes = [('testing123', '{SSHA}0c0blFTXXNuAMHECS4uxrj3ZieMoWImr'), ('secret', '{SSHA}0H+zTv8o4MR4H43n03eCsvw1luG8LdB7'), (UPASS_TABLE, '{SSHA}3yCSD1nLZXznra4N8XzZgAL+s1sQYsx5'), ('test', '{SSHA}P90+qijSp8MJ1tN25j5o1PflUvlqjXHOGeOckw=='), ('test', '{SSHA}/ZMF5KymNM+uEOjW+9STKlfCFj51bg3BmBNCiPHeW2ttbU0='), ('test', '{SSHA}Pfx6Vf48AT9x3FVv8znbo8WQkEVSipHSWovxXmvNWUvp/d/7')]
      + known_malformed_hashes = ['{SSHA}ZQK3Yvtvl6wtIRoISgMGPkcWU7Nfq5U=', '{SSHA}P90+qijSp8MJ1tN25j5o1PflUvlqjXHOGeOck', '{SSHA}P90+qijSp8MJ1tN25j5o1PflUvlqjXHOGeOckw=', '{SSHA}P90+qijSp8MJ1tN25j5o1Pf=UvlqjXHOGeOckw==', '{SSHA}P90+qijSp8MJ1tN25j5o1PflUvlqjXHOGeOck===']
  }

  class ldap_salted_sha256_test {
      + handler = hash.ldap_salted_sha256
      + known_correct_hashes = [('password', '{SSHA256}x1tymSTVjozxQ2PtT46ysrzhZxbcskK0o2f8hEFx7fAQQmhtDSEkJA=='), ('test', '{SSHA256}xfqc9aOR6z15YaEk3/Ufd7UL9+JozB/1EPmCDTizL0GkdA7BuNda6w=='), ('toomanysecrets', '{SSHA256}RrTKrg6HFXcjJ+eDAq4UtbODxOr9RLeG+I69FoJvutcbY0zpfU+p1Q=='), (u('letmèïn'), '{SSHA256}km7UjUTBZN8a+gf1ND2/qn15N7LsO/jmGYJXvyTfJKAbI0RoLWWslQ=='), ('test', '{SSHA256}TFv2RpwyO0U9mA0Hk8FsXRa1I+4dNUtv27Qa8dzGVLinlDIm'), ('test', '{SSHA256}J6MFQdkfjdmXz9UyUPb773kekJdm4dgSL4y8WQEQW11VipHSundOKaV0LsV4L6U='), ('test', '{SSHA256}uBLazLaiBaPb6Cpnvq2XTYDkvXbYIuqRW1anMKk85d1/j1GqFQIgpHSOMUYIIcS4')]
      + known_malformed_hashes = ['{SSHA256}Lpdyr1+lR+rtxgp3SpQnUuNw33ENivTl28nzF2ZI4Gm41/o=', '{SSHA256}TFv2RpwyO0U9mA0Hk8FsXRa1I+4dNUtv27Qa8dzGVLinlDI@', '{SSHA256}TFv2RpwyO0U9mA0Hk8FsXRa1I+4dNUtv27Qa8dzGVLinlDI', '{SSHA256}TFv2RpwyO0U9mA0Hk8FsXRa1I+4dNUtv27Qa8dzGVLinlDIm===']
  }

  class ldap_salted_sha512_test {
      + handler = hash.ldap_salted_sha512
      + known_correct_hashes = [('toomanysecrets', '{SSHA512}wExp4xjiCHS0zidJDC4UJq9EEeIebAQPJ1PWSwfhxWjfutI9XiiKuHm2AE41cEFfK+8HyI8bh+ztbczUGsvVFIgICWWPt7qu'), (u('letmèïn'), '{SSHA512}mpNUSmZc3TNx+RnPwkIAVMf7ocEKLPrIoQNsg4Eu8dHvyCeb2xzHp5A6n4tF7ntknSvfvRZaJII4ImvNJlYsgiwAm0FMqR+3'), ('password', '{SSHA512}f/lFQskkl7PdMsTGJxHZq8LDt/l+UqRMm6/pj4pV7/xZkcOaKCgvQqp+KCeXc/Vd4RY6vEHWn4y0DnFcQ6wgyv9fyxk='), ('test', '{SSHA512}Tgx/uhHnlM9/GgQvI31dN7cheDXg7WypZwaaIkyRsgV/BKIzBG3G/wUd9o1dpi06p3SYzMedg0lvTc3b6CtdO0Xo/f9/L+Uc'), ('test', '{SSHA512}Yg9DQ2wURCFGwobu7R2O6cq7nVbnGMPrFCX0aPQ9kj/y1hd6k9PEzkgWCB5aXdPwPzNrVb0PkiHiBnG1CxFiT+B8L8U='), ('test', '{SSHA512}5ecDGWs5RY4xLszUO6hAcl90W3wAozGQoI4Gqj8xSZdcfU1lVEM4aY8s+4xVeLitcn7BO8i7xkzMFWLoxas7SeHc23sP4dx77937PyeE0A=='), ('test', '{SSHA512}6FQv5W47HGg2MFBFZofoiIbO8KRW75Pm51NKoInpthYQQ5ujazHGhVGzrj3JXgA7j0k+UNmkHdbJjdY5xcUHPzynFEII4fwfIySEcG5NKSU=')]
      + known_malformed_hashes = ['{SSHA512}zFnn4/8x8GveUaMqgrYWyIWqFQ0Irt6gADPtRk4Uv3nUC6uR5cD8+YdQni/0ZNij9etm6p17kSFuww3M6l+d6AbAeA==', '{SSHA512}Tgx/uhHnlM9/GgQvI31dN7cheDXg7WypZwaaIkyRsgV/BKIzBG3G/wUd9o1dpi06p3SYzMedg0lvTc3b6CtdO0Xo/f9/L+U', '{SSHA512}Tgx/uhHnlM9/GgQvI31dN7cheDXg7WypZwaaIkyRsgV/BKIzBG3G/wUd9o1dpi06p3SYzMedg0lvTc3b6CtdO0Xo/f9/L+U@', '{SSHA512}Tgx/uhHnlM9/GgQvI31dN7cheDXg7WypZwaaIkyRsgV/BKIzBG3G/wUd9o1dpi06p3SYzMedg0lvTc3b6CtdO0Xo/f9/L+U===']
  }

  class ldap_plaintext_test {
      + handler = hash.ldap_plaintext
      + known_correct_hashes = [('password', 'password'), (UPASS_TABLE, UPASS_TABLE if PY3 else PASS_TABLE_UTF8), (PASS_TABLE_UTF8, UPASS_TABLE if PY3 else PASS_TABLE_UTF8)]
      + known_unidentified_hashes = ['{FOO}bar', '']
      + known_other_hashes = [('ldap_md5', '{MD5}/F4DjTilcDIIVEHn/nAQsA==')]
  }

  class FuzzHashGenerator {
      + random_password()
  }

  class lmhash_test {
      + handler = hash.lmhash
      + secret_case_insensitive = True
      + known_correct_hashes = [('OLDPASSWORD', 'c9b81d939d6fd80cd408e6b105741864'), ('NEWPASSWORD', '09eeab5aa415d6e4d408e6b105741864'), ('welcome', 'c23413a8a1e7665faad3b435b51404ee'), ('', 'aad3b435b51404eeaad3b435b51404ee'), ('zzZZZzz', 'a5e6066de61c3e35aad3b435b51404ee'), ('passphrase', '855c3697d9979e78ac404c4ba2c66533'), ('Yokohama', '5ecd9236d21095ce7584248b8d2c9f9e'), (u('ENCYCLOPÆDIA'), 'fed6416bffc9750d48462b9d7aaac065'), (u('encyclopædia'), 'fed6416bffc9750d48462b9d7aaac065'), ((u('Æ'), None), '25d8ab4a0659c97aaad3b435b51404ee'), ((u('Æ'), 'cp437'), '25d8ab4a0659c97aaad3b435b51404ee'), ((u('Æ'), 'latin-1'), '184eecbbe9991b44aad3b435b51404ee'), ((u('Æ'), 'utf-8'), '00dd240fcfab20b8aad3b435b51404ee')]
      + known_unidentified_hashes = ['855c3697d9979e78ac404c4ba2c6653X']
  --
      + test_90_raw()
  }

  class msdcc_test {
      + handler = hash.msdcc
      + user_case_insensitive = True
      + known_correct_hashes = [(('Asdf999', 'sevans'), 'b1176c2587478785ec1037e5abc916d0'), (('ASDqwe123', 'jdoe'), '592cdfbc3f1ef77ae95c75f851e37166'), (('test1', 'test1'), '64cd29e36a8431a2b111378564a10631'), (('test2', 'test2'), 'ab60bdb4493822b175486810ac2abe63'), (('test3', 'test3'), '14dd041848e12fc48c0aa7a416a4a00c'), (('test4', 'test4'), 'b945d24866af4b01a6d89b9d932a153c'), (('1234qwer!@#$', 'Administrator'), '7b69d06ef494621e3f47b9802fe7776d'), (('password', 'user'), '2d9f0b052932ad18b87f315641921cda'), (('', 'root'), '176a4c2bd45ac73687676c2f09045353'), (('test1', 'TEST1'), '64cd29e36a8431a2b111378564a10631'), (('okolada', 'nineteen_characters'), '290efa10307e36a79b3eebf2a6b29455'), ((u('ü'), u('ü')), '48f84e6f73d6d5305f6558a33fa2c9bb'), ((u('üü'), u('üü')), '593246a8335cf0261799bda2a2a9c623'), ((u('€€'), 'user'), '9121790702dda0fa5d353014c334c2ce'), ((UPASS_TABLE, 'bob'), 'fcb82eb4212865c7ac3503156ca3f349')]
      + known_alternate_hashes = [('B1176C2587478785EC1037E5ABC916D0', ('Asdf999', 'sevans'), 'b1176c2587478785ec1037e5abc916d0')]
  }

  class msdcc2_test {
      + handler = hash.msdcc2
      + user_case_insensitive = True
      + known_correct_hashes = [(('test1', 'test1'), '607bbe89611e37446e736f7856515bf8'), (('qerwt', 'Joe'), 'e09b38f84ab0be586b730baf61781e30'), (('12345', 'Joe'), '6432f517a900b3fc34ffe57f0f346e16'), (('', 'bin'), 'c0cbe0313a861062e29f92ede58f9b36'), (('w00t', 'nineteen_characters'), '87136ae0a18b2dafe4a41d555425b2ed'), (('w00t', 'eighteencharacters'), 'fc5df74eca97afd7cd5abb0032496223'), (('longpassword', 'twentyXXX_characters'), 'cfc6a1e33eb36c3d4f84e4c2606623d2'), (('longpassword', 'twentyoneX_characters'), '99ff74cea552799da8769d30b2684bee'), (('longpassword', 'twentytwoXX_characters'), '0a721bdc92f27d7fb23b87a445ec562f'), (('test2', 'TEST2'), 'c6758e5be7fc943d00b97972a8a97620'), (('test3', 'test3'), '360e51304a2d383ea33467ab0b639cc4'), (('test4', 'test4'), '6f79ee93518306f071c47185998566ae'), ((u('ü'), 'joe'), 'bdb80f2c4656a8b8591bd27d39064a54'), ((u('€€'), 'joe'), '1e1e20f482ff748038e47d801d0d1bda'), ((u('üü'), 'admin'), '0839e4a07c00f18a8c65cf5b985b9e73'), ((UPASS_TABLE, 'bob'), 'cad511dc9edefcf69201da72efb6bb55')]
  }

  class mssql2000_test {
      + handler = hash.mssql2000
      + secret_case_insensitive = 'verify-only'
      + known_correct_hashes = [('Test', '0x010034767D5C0CFA5FDCA28C4A56085E65E882E71CB0ED2503412FD54D6119FFF04129A1D72E7C3194F7284A7F3A'), ('TEST', '0x010034767D5C2FD54D6119FFF04129A1D72E7C3194F7284A7F3A2FD54D6119FFF04129A1D72E7C3194F7284A7F3A'), ('x', '0x010086489146C46DD7318D2514D1AC706457CBF6CD3DF8407F071DB4BBC213939D484BF7A766E974F03C96524794'), ('AAAA', '0x0100CF465B7B12625EF019E157120D58DD46569AC7BF4118455D12625EF019E157120D58DD46569AC7BF4118455D'), ('123', '0x01002D60BA07FE612C8DE537DF3BFCFA49CD9968324481C1A8A8FE612C8DE537DF3BFCFA49CD9968324481C1A8A8'), ('12345', '0x01005B20054332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B3'), ('foo', '0x0100A607BA7C54A24D17B565C59F1743776A10250F581D482DA8B6D6261460D3F53B279CC6913CE747006A2E3254'), ('bar', '0x01000508513EADDF6DB7DDD270CCA288BF097F2FF69CC2DB74FBB9644D6901764F999BAB9ECB80DE578D92E3F80D'), ('canard', '0x01008408C523CF06DCB237835D701C165E68F9460580132E28ED8BC558D22CEDF8801F4503468A80F9C52A12C0A3'), ('lapin', '0x0100BF088517935FC9183FE39FDEC77539FD5CB52BA5F5761881E5B9638641A79DBF0F1501647EC941F3355440A2'), (UPASS_USD, '0x0100624C0961B28E39FEE13FD0C35F57B4523F0DA1861C11D5A5B28E39FEE13FD0C35F57B4523F0DA1861C11D5A5'), (UPASS_TABLE, '0x010083104228FAD559BE52477F2131E538BE9734E5C4B0ADEFD7F6D784B03C98585DC634FE2B8CA3A6DFFEC729B4')]
      + known_alternate_hashes = [('0x01005b20054332752e1bc2e7c5df0f9ebfe486e9bee063e8d3b332752e1bc2e7c5df0f9ebfe486e9bee063e8d3b3', '12345', '0x01005B20054332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B3')]
      + known_unidentified_hashes = ['0X01005B20054332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B3', '0x02005B20054332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B3', '0x01005B20054332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3', '0x01005B20054332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B3AF', '0x01005B20054332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B3']
      + known_malformed_hashes = [b'0x01005B200543327G2E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B3', u('0x01005B200543327G2E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B3')]
  }

  class mssql2005_test {
      + handler = hash.mssql2005
      + known_correct_hashes = [('TEST', '0x010034767D5C2FD54D6119FFF04129A1D72E7C3194F7284A7F3A'), ('toto', '0x01004086CEB6BF932BC4151A1AF1F13CD17301D70816A8886908'), ('123', '0x01004A335DCEDB366D99F564D460B1965B146D6184E4E1025195'), ('123', '0x0100E11D573F359629B344990DCD3D53DE82CF8AD6BBA7B638B6'), ('AAAA', '0x010036D726AE86834E97F20B198ACD219D60B446AC5E48C54F30'), ('toto', '0x01004086CEB6BF932BC4151A1AF1F13CD17301D70816A8886908'), ('titi', '0x01004086CEB60ED526885801C23B366965586A43D3DEAC6DD3FD'), ('foo', '0x0100A607BA7C54A24D17B565C59F1743776A10250F581D482DA8'), ('bar', '0x01000508513EADDF6DB7DDD270CCA288BF097F2FF69CC2DB74FB'), ('canard', '0x01008408C523CF06DCB237835D701C165E68F9460580132E28ED'), ('lapin', '0x0100BF088517935FC9183FE39FDEC77539FD5CB52BA5F5761881'), ('Test', '0x010034767D5C0CFA5FDCA28C4A56085E65E882E71CB0ED250341'), ('Test', '0x0100993BF2315F36CC441485B35C4D84687DC02C78B0E680411F'), ('x', '0x010086489146C46DD7318D2514D1AC706457CBF6CD3DF8407F07'), ('AAAA', '0x0100CF465B7B12625EF019E157120D58DD46569AC7BF4118455D'), ('123', '0x01002D60BA07FE612C8DE537DF3BFCFA49CD9968324481C1A8A8'), ('12345', '0x01005B20054332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B3'), (UPASS_USD, '0x0100624C0961B28E39FEE13FD0C35F57B4523F0DA1861C11D5A5'), (UPASS_TABLE, '0x010083104228FAD559BE52477F2131E538BE9734E5C4B0ADEFD7')]
      + known_alternate_hashes = [('0x01005b20054332752e1bc2e7c5df0f9ebfe486e9bee063e8d3b3', '12345', '0x01005B20054332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B3')]
      + known_unidentified_hashes = ['0X010036D726AE86834E97F20B198ACD219D60B446AC5E48C54F30', '0x020036D726AE86834E97F20B198ACD219D60B446AC5E48C54F30', '0x010036D726AE86834E97F20B198ACD219D60B446AC5E48C54F', '0x010036D726AE86834E97F20B198ACD219D60B446AC5E48C54F3012', '0x01005B20054332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B332752E1BC2E7C5DF0F9EBFE486E9BEE063E8D3B3']
      + known_malformed_hashes = ['0x010036D726AE86G34E97F20B198ACD219D60B446AC5E48C54F30']
  }

  class mysql323_test {
      + handler = hash.mysql323
      + known_correct_hashes = [('drew', '697a7de87c5390b2'), ('password', '5d2e19393cc5ef67'), ('mypass', '6f8c114b58f2ce9e'), (UPASS_TABLE, '4ef327ca5491c8d7')]
      + known_unidentified_hashes = ['6z8c114b58f2ce9e']
  --
      + test_90_whitespace()
  }

  class FuzzHashGenerator {
      + accept_password_pair(secret, other)
  }

  class mysql41_test {
      + handler = hash.mysql41
      + known_correct_hashes = [('verysecretpassword', '*2C905879F74F28F8570989947D06A8429FB943E6'), ('12345678123456781234567812345678', '*F9F1470004E888963FB466A5452C9CBD9DF6239C'), ("' OR 1 /*'", '*97CF7A3ACBE0CA58D5391AC8377B5D9AC11D46D9'), ('mypass', '*6C8989366EAF75BB670AD8EA7A7FC1176A95CEF4'), (UPASS_TABLE, '*E7AFE21A9CFA2FC9D15D942AE8FB5C240FE5837B')]
      + known_unidentified_hashes = ['*6Z8989366EAF75BB670AD8EA7A7FC1176A95CEF4']
  }

  class nthash_test {
      + handler = hash.nthash
      + known_correct_hashes = [('OLDPASSWORD', u('6677b2c394311355b54f25eec5bfacf5')), ('NEWPASSWORD', u('256781a62031289d3c2c98c14f1efc8c')), ('', '31d6cfe0d16ae931b73c59d7e0c089c0'), ('tigger', 'b7e0ea9fbffcf6dd83086e905089effd'), (b'\xc3\xbc', '8bd6e4fb88e01009818749c5443ea712'), (b'\xc3\xbc\xc3\xbc', 'cc1260adb6985ca749f150c7e0b22063'), (b'\xe2\x82\xac', '030926b781938db4365d46adc7cfbcb8'), (b'\xe2\x82\xac\xe2\x82\xac', '682467b963bb4e61943e170a04f7db46'), ('passphrase', '7f8fe03093cc84b267b109625f6bbf4b')]
      + known_unidentified_hashes = ['7f8fe03093cc84b267b109625f6bbfxb']
  }

  class bsd_nthash_test {
      + handler = hash.bsd_nthash
      + known_correct_hashes = [('passphrase', '$3$$7f8fe03093cc84b267b109625f6bbf4b'), (b'\xc3\xbc', '$3$$8bd6e4fb88e01009818749c5443ea712')]
      + known_unidentified_hashes = ['$3$$7f8fe03093cc84b267b109625f6bbfxb']
  }

  class oracle10_test {
      + handler = hash.oracle10
      + secret_case_insensitive = True
      + user_case_insensitive = True
      + known_correct_hashes = [(('tiger', 'scott'), 'F894844C34402B67'), ((u('ttTiGGeR'), u('ScO')), '7AA1A84E31ED7771'), (('d_syspw', 'SYSTEM'), '1B9F1F9A5CB9EB31'), (('strat_passwd', 'strat_user'), 'AEBEDBB4EFB5225B'), (('#95LWEIGHTS', 'USER'), '000EA4D72A142E29'), (('CIAO2010', 'ALFREDO'), 'EB026A76F0650F7B'), (('GLOUGlou', 'Bob'), 'CDC6B483874B875B'), (('GLOUGLOUTER', 'bOB'), 'EF1F9139DB2D5279'), (('LONG_MOT_DE_PASSE_OUI', 'BOB'), 'EC8147ABB3373D53'), ((UPASS_TABLE, 'System'), 'B915A853F297B281')]
      + known_unidentified_hashes = ['F894844C34402B6Z']
  }

  class oracle11_test {
      + handler = hash.oracle11
      + known_correct_hashes = [('abc123', 'S:5FDAB69F543563582BA57894FE1C1361FB8ED57B903603F2C52ED1B4D642'), ('SyStEm123!@#', 'S:450F957ECBE075D2FA009BA822A9E28709FBC3DA82B44D284DDABEC14C42'), ('oracle', 'S:3437FF72BD69E3FB4D10C750B92B8FB90B155E26227B9AB62D94F54E5951'), ('11g', 'S:61CE616647A4F7980AFD7C7245261AF25E0AFE9C9763FCF0D54DA667D4E6'), ('11g', 'S:B9E7556F53500C8C78A58F50F24439D79962DE68117654B6700CE7CC71CF'), ('SHAlala', 'S:2BFCFDF5895014EE9BB2B9BA067B01E0389BB5711B7B5F82B7235E9E182C'), (UPASS_TABLE, 'S:51586343E429A6DF024B8F242F2E9F8507B1096FACD422E29142AA4974B0')]
  }

  class phpass_test {
      + handler = hash.phpass
      + known_correct_hashes = [('test12345', '$P$9IQRaTwmfeRo7ud9Fh4E2PdI0S3r.L0'), ('test1', '$H$9aaaaaSXBjgypwqm.JsMssPLiS8YQ00'), ('123456', '$H$9PE8jEklgZhgLmZl5.HYJAzfGCQtzi1'), ('123456', '$H$9pdx7dbOW3Nnt32sikrjAxYFjX8XoK1'), ('thisisalongertestPW', '$P$912345678LIjjb6PhecupozNBmDndU0'), ('JohnRipper', '$P$612345678si5M0DDyPpmRCmcltU/YW/'), ('JohnRipper', '$H$712345678WhEyvy1YWzT4647jzeOmo0'), ('JohnRipper', '$P$B12345678L6Lpt4BxNotVIMILOa9u81'), ('', '$P$7JaFQsPzJSuenezefD/3jHgt5hVfNH0'), ('compL3X!', '$P$FiS0N5L672xzQx1rt1vgdJQRYKnQM9/'), (UPASS_TABLE, '$P$7SMy8VxnfsIy2Sxm7fJxDSdil.h7TW.')]
      + known_malformed_hashes = ['$P$9IQRaTwmfeRo7ud9Fh4E2PdI0S3r!L0']
  }

  class plaintext_test {
      + handler = hash.plaintext
      + accepts_all_hashes = True
      + known_correct_hashes = [('', ''), ('password', 'password'), (UPASS_TABLE, UPASS_TABLE if PY3 else PASS_TABLE_UTF8), (PASS_TABLE_UTF8, UPASS_TABLE if PY3 else PASS_TABLE_UTF8)]
  }

  class postgres_md5_test {
      + handler = hash.postgres_md5
      + known_correct_hashes = [(('mypass', 'postgres'), 'md55fba2ea04fd36069d2574ea71c8efe9d'), (('mypass', 'root'), 'md540c31989b20437833f697e485811254b'), (('testpassword', 'testuser'), 'md5d4fc5129cc2c25465a5370113ae9835f'), ((UPASS_TABLE, 'postgres'), 'md5cb9f11283265811ce076db86d18a22d2')]
      + known_unidentified_hashes = ['md54zc31989b20437833f697e485811254b']
  }

  class RoundupTest {
      + test_pairs()
  }

  class sun_md5_crypt_test {
      + handler = hash.sun_md5_crypt
      + known_correct_hashes = [('Gpcs3_adm', '$md5$zrdhpMlZ$$wBvMOEqbSjU.hu5T2VEP01'), ('aa12345678', '$md5$vyy8.OVF$$FY4TWzuauRl4.VQNobqMY.'), ('this', '$md5$3UqYqndY$$6P.aaWOoucxxq.l00SS9k0'), ('passwd', '$md5$RPgLF6IJ$WTvAlUJ7MqH5xak2FMEwS/'), (UPASS_TABLE, '$md5,rounds=5000$10VYDzAA$$1arAVtMA3trgE1qJ2V0Ez1')]
      + known_correct_configs = [('$md5$3UqYqndY$', 'this', '$md5$3UqYqndY$$6P.aaWOoucxxq.l00SS9k0'), ('$md5$3UqYqndY$$.................DUMMY', 'this', '$md5$3UqYqndY$$6P.aaWOoucxxq.l00SS9k0'), ('$md5$3UqYqndY', 'this', '$md5$3UqYqndY$HIZVnfJNGCPbDZ9nIRSgP1'), ('$md5$3UqYqndY$.................DUMMY', 'this', '$md5$3UqYqndY$HIZVnfJNGCPbDZ9nIRSgP1')]
      + known_malformed_hashes = ['$md5,rounds=5000', '$md5,rounds=500A$xxxx', '$md5,rounds=0500$xxxx', '$md5,rounds=0$xxxx', '$md5$RPgL!6IJ$WTvAlUJ7MqH5xak2FMEwS/', '$md5$RPgLa6IJ$WTvAlUJ7MqH5xak2FMEwS', '$md5$RPgLa6IJ$WTvAlUJ7MqH5xak2FMEwS/.', '$md5$3UqYqndY$$', '$md5$RPgLa6IJ$$$WTvAlUJ7MqH5xak2FMEwS/']
      + platform_crypt_support = [('solaris', True), ('freebsd|openbsd|netbsd|linux|darwin', False)]
  --
      + do_verify(secret, hash)
  }

  class unix_disabled_test {
      + handler = hash.unix_disabled
      + known_correct_hashes = [('password', '!'), (UPASS_TABLE, '*')]
      + known_unidentified_hashes = ['$1$xxx', 'abc', './az', '{SHA}xxx']
  --
      + test_76_hash_border()
      + test_90_special()
  }

  class unix_fallback_test {
      + handler = hash.unix_fallback
      + accepts_all_hashes = True
      + known_correct_hashes = [('password', '!'), (UPASS_TABLE, '!')]
  --
      + setUp()
      + test_90_wildcard()
      + test_91_preserves_existing()
  }

  class argon2_argon2_cffi_test {
      + known_correct_hashes = _base_argon2_test.known_correct_hashes + [('password', '$argon2i$m=65536,t=2,p=4$c29tZXNhbHQAAAAAAAAAAA$QWLzI4TY9HkL2ZTLc8g6SinwdhZewYrzz9zxCo0bkGY'), ('password', '$argon2i$v=19$m=65536,t=2,p=4$c29tZXNhbHQ$IMit9qkFULCMA/ViizL57cnTLOa5DiVM9eMwpAvPwr4'), ('password', '$argon2d$v=19$m=65536,t=2,p=4$c29tZXNhbHQ$cZn5d+rFh+ZfuRhm2iGUGgcrW5YLeM6q7L3vBsdmFA0'), ('password', '$argon2id$v=19$m=65536,t=2,p=4$c29tZXNhbHQ$GpZ3sK/oH9p7VIiV56G/64Zo/8GaUw434IimaPqxwCo'), ('password\x00', '$argon2i$v=19$m=65536,t=2,p=4$c29tZXNhbHQ$Vpzuc0v0SrP88LcVvmg+z5RoOYpMDKH/lt6O+CZabIQ')]
  }

  class argon2_argon2pure_test {
      + handler = hash.argon2.using(memory_cost=32, parallelism=2)
      + known_correct_hashes = _base_argon2_test.known_correct_hashes[:]
  }

  class FuzzHashGenerator {
      + random_rounds()
  }

  class bcrypt_os_crypt_test {
      + known_correct_hashes = [row for row in _bcrypt_test.known_correct_hashes if is_safe_crypt_input(row[0])]
      + has_os_crypt_fallback = False
  }

  class bcrypt_sha256_os_crypt_test {
      + has_os_crypt_fallback = False
  }

  class cisco_pix_test {
      + handler = hash.cisco_pix
      + known_correct_hashes = _PixAsaSharedTest.pix_asa_shared_hashes + [(('0123456789abc', ''), 'eacOpB7vE7ZDukSF'), (('0123456789abc', '3'), 'ylJTd/qei66WZe3w'), (('0123456789abc', '36'), 'hDx8QRlUhwd6bU8N'), (('0123456789abc', '365'), 'vYOOtnkh1HXcMrM7'), (('0123456789abc', '3333'), 'ylJTd/qei66WZe3w'), (('0123456789abc', '3636'), 'hDx8QRlUhwd6bU8N'), (('0123456789abc', '3653'), 'vYOOtnkh1HXcMrM7'), (('0123456789abc', 'user'), 'f4/.SALxqDo59mfV'), (('0123456789abc', 'user1234'), 'f4/.SALxqDo59mfV'), (('0123456789abcd', ''), '6r8888iMxEoPdLp4'), (('0123456789abcd', '3'), 'f5lvmqWYj9gJqkIH'), (('0123456789abcd', '36'), 'OJJ1Khg5HeAYBH1c'), (('0123456789abcd', '365'), 'OJJ1Khg5HeAYBH1c'), (('0123456789abcd', '3333'), 'f5lvmqWYj9gJqkIH'), (('0123456789abcd', '3636'), 'OJJ1Khg5HeAYBH1c'), (('0123456789abcd', '3653'), 'OJJ1Khg5HeAYBH1c'), (('0123456789abcd', 'adm'), 'DbPLCFIkHc2SiyDk'), (('0123456789abcd', 'adma'), 'DbPLCFIkHc2SiyDk'), (('0123456789abcd', 'user'), 'WfO2UiTapPkF/FSn'), (('0123456789abcd', 'user1234'), 'WfO2UiTapPkF/FSn'), (('0123456789abcde', ''), 'al1e0XFIugTYLai3'), (('0123456789abcde', '3'), 'lYbwBu.f82OIApQB'), (('0123456789abcde', '36'), 'lYbwBu.f82OIApQB'), (('0123456789abcde', '365'), 'lYbwBu.f82OIApQB'), (('0123456789abcde', '3333'), 'lYbwBu.f82OIApQB'), (('0123456789abcde', '3636'), 'lYbwBu.f82OIApQB'), (('0123456789abcde', '3653'), 'lYbwBu.f82OIApQB'), (('0123456789abcde', 'adm'), 'KgKx1UQvdR/09i9u'), (('0123456789abcde', 'adma'), 'KgKx1UQvdR/09i9u'), (('0123456789abcde', 'user'), 'qLopkenJ4WBqxaZN'), (('0123456789abcde', 'user1234'), 'qLopkenJ4WBqxaZN'), (('0123456789abcdef', ''), '.7nfVBEIEu4KbF/1'), (('0123456789abcdef', '36'), '.7nfVBEIEu4KbF/1'), (('0123456789abcdef', '365'), '.7nfVBEIEu4KbF/1'), (('0123456789abcdef', '3333'), '.7nfVBEIEu4KbF/1'), (('0123456789abcdef', '3636'), '.7nfVBEIEu4KbF/1'), (('0123456789abcdef', '3653'), '.7nfVBEIEu4KbF/1'), (('0123456789abcdef', 'user'), '.7nfVBEIEu4KbF/1'), (('0123456789abcdef', 'user1234'), '.7nfVBEIEu4KbF/1')]
  }

  class cisco_asa_test {
      + handler = hash.cisco_asa
      + known_correct_hashes = _PixAsaSharedTest.pix_asa_shared_hashes + [(('0123456789abc', ''), 'eacOpB7vE7ZDukSF'), (('0123456789abc', '36'), 'FRV9JG18UBEgX0.O'), (('0123456789abc', '365'), 'NIwkusG9hmmMy6ZQ'), (('0123456789abc', '3333'), 'NmrkP98nT7RAeKZz'), (('0123456789abc', '3636'), 'FRV9JG18UBEgX0.O'), (('0123456789abc', '3653'), 'NIwkusG9hmmMy6ZQ'), (('0123456789abc', 'user'), '8Q/FZeam5ai1A47p'), (('0123456789abc', 'user1234'), '8Q/FZeam5ai1A47p'), (('0123456789abcd', ''), '6r8888iMxEoPdLp4'), (('0123456789abcd', '3'), 'yxGoujXKPduTVaYB'), (('0123456789abcd', '36'), 'W0jckhnhjnr/DiT/'), (('0123456789abcd', '365'), 'HuVOxfMQNahaoF8u'), (('0123456789abcd', '3333'), 'yxGoujXKPduTVaYB'), (('0123456789abcd', '3636'), 'W0jckhnhjnr/DiT/'), (('0123456789abcd', '3653'), 'HuVOxfMQNahaoF8u'), (('0123456789abcd', 'adm'), 'RtOmSeoCs4AUdZqZ'), (('0123456789abcd', 'adma'), 'RtOmSeoCs4AUdZqZ'), (('0123456789abcd', 'user'), 'rrucwrcM0h25pr.m'), (('0123456789abcd', 'user1234'), 'rrucwrcM0h25pr.m'), (('0123456789abcde', ''), 'al1e0XFIugTYLai3'), (('0123456789abcde', '3'), 'nAZrQoHaL.fgrIqt'), (('0123456789abcde', '36'), '2GxIQ6ICE795587X'), (('0123456789abcde', '365'), 'QmDsGwCRBbtGEKqM'), (('0123456789abcde', '3333'), 'nAZrQoHaL.fgrIqt'), (('0123456789abcde', '3636'), '2GxIQ6ICE795587X'), (('0123456789abcde', '3653'), 'QmDsGwCRBbtGEKqM'), (('0123456789abcde', 'adm'), 'Aj2aP0d.nk62wl4m'), (('0123456789abcde', 'adma'), 'Aj2aP0d.nk62wl4m'), (('0123456789abcde', 'user'), 'etxiXfo.bINJcXI7'), (('0123456789abcde', 'user1234'), 'etxiXfo.bINJcXI7'), (('0123456789abcdef', ''), '.7nfVBEIEu4KbF/1'), (('0123456789abcdef', '36'), 'GhI8.yFSC5lwoafg'), (('0123456789abcdef', '365'), 'KFBI6cNQauyY6h/G'), (('0123456789abcdef', '3333'), 'Ghdi1IlsswgYzzMH'), (('0123456789abcdef', '3636'), 'GhI8.yFSC5lwoafg'), (('0123456789abcdef', '3653'), 'KFBI6cNQauyY6h/G'), (('0123456789abcdef', 'user'), 'IneB.wc9sfRzLPoh'), (('0123456789abcdef', 'user1234'), 'IneB.wc9sfRzLPoh'), (('0123456789abcdefq', ''), 'bKshl.EN.X3CVFRQ'), (('0123456789abcdefq', '36'), 'JAeTXHs0n30svlaG'), (('0123456789abcdefq', '365'), '4fKSSUBHT1ChGqHp'), (('0123456789abcdefq', '3333'), 'USEJbxI6.VY4ecBP'), (('0123456789abcdefq', '3636'), 'JAeTXHs0n30svlaG'), (('0123456789abcdefq', '3653'), '4fKSSUBHT1ChGqHp'), (('0123456789abcdefq', 'user'), '/dwqyD7nGdwSrDwk'), (('0123456789abcdefq', 'user1234'), '/dwqyD7nGdwSrDwk'), (('0123456789abcdefqwertyuiopa', ''), '4wp19zS3OCe.2jt5'), (('0123456789abcdefqwertyuiopa', '36'), 'PjUoGqWBKPyV9qOe'), (('0123456789abcdefqwertyuiopa', '365'), 'bfCy6xFAe5O/gzvM'), (('0123456789abcdefqwertyuiopa', '3333'), 'rd/ZMuGTJFIb2BNG'), (('0123456789abcdefqwertyuiopa', '3636'), 'PjUoGqWBKPyV9qOe'), (('0123456789abcdefqwertyuiopa', '3653'), 'bfCy6xFAe5O/gzvM'), (('0123456789abcdefqwertyuiopa', 'user'), 'zynfWw3UtszxLMgL'), (('0123456789abcdefqwertyuiopa', 'user1234'), 'zynfWw3UtszxLMgL'), (('0123456789abcdefqwertyuiopas', ''), 'W6nbOddI0SutTK7m'), (('0123456789abcdefqwertyuiopas', '36'), 'W6nbOddI0SutTK7m'), (('0123456789abcdefqwertyuiopas', '365'), 'W6nbOddI0SutTK7m'), (('0123456789abcdefqwertyuiopas', 'user'), 'W6nbOddI0SutTK7m'), (('0123456789abcdefqwertyuiopas', 'user1234'), 'W6nbOddI0SutTK7m'), (('0123456789abcdefqwertyuiopasdfgh', ''), '5hPT/iC6DnoBxo6a'), (('0123456789abcdefqwertyuiopasdfgh', '36'), '5hPT/iC6DnoBxo6a'), (('0123456789abcdefqwertyuiopasdfgh', '365'), '5hPT/iC6DnoBxo6a'), (('0123456789abcdefqwertyuiopasdfgh', 'user'), '5hPT/iC6DnoBxo6a'), (('0123456789abcdefqwertyuiopasdfgh', 'user1234'), '5hPT/iC6DnoBxo6a')]
  }

  class cisco_type7_test {
      + handler = hash.cisco_type7
      + salt_bits = 4
      + salt_type = int
      + known_correct_hashes = [('secure ', '04480E051A33490E'), ('Its time to go to lunch!', '153B1F1F443E22292D73212D5300194315591954465A0D0B59'), ('t35t:pa55w0rd', '08351F1B1D431516475E1B54382F'), ('hiImTesting:)', '020E0D7206320A325847071E5F5E'), ('cisco123', '060506324F41584B56'), ('cisco123', '1511021F07257A767B'), ('Supe&8ZUbeRp4SS', '06351A3149085123301517391C501918'), (UPASS_TABLE, '0958EDC8A9F495F6F8A5FD')]
      + known_unidentified_hashes = ['0A480E051A33490E', '99400E4812']
  --
      + test_90_decode()
      + test_91_salt()
  }

  class django_disabled_test {
      + handler = hash.django_disabled
      + disabled_contains_salt = True
      + known_correct_hashes = [('password', '!'), ('', '!'), (UPASS_TABLE, '!')]
      + known_alternate_hashes = [('!9wa845vn7098ythaehasldkfj', 'password', '!')]
  }

  class django_des_crypt_test {
      + handler = hash.django_des_crypt
      + max_django_version = (1, 9)
      + known_correct_hashes = [('password', 'crypt$c2$c2M87q...WWcU'), ('password', 'crypt$c2e86$c2M87q...WWcU'), ('passwordignoreme', 'crypt$c2.AZ$c2M87q...WWcU'), (UPASS_USD, 'crypt$c2e86$c2hN1Bxd6ZiWs'), (UPASS_TABLE, 'crypt$0.aQs$0.wB.TT0Czvlo'), (u('hellÖ'), 'crypt$sa$saykDgk3BPZ9E'), ('foo', 'crypt$MNVY.9ajgdvDQ$MNVY.9ajgdvDQ')]
      + known_alternate_hashes = [('crypt$$c2M87q...WWcU', 'password', 'crypt$c2$c2M87q...WWcU')]
      + known_unidentified_hashes = ['sha1$aa$bb']
      + known_malformed_hashes = ['crypt$c2$c2M87q', 'crypt$f$c2M87q...WWcU', 'crypt$ffe86$c2M87q...WWcU']
  }

  class django_salted_md5_test {
      + handler = hash.django_salted_md5
      + max_django_version = (1, 9)
      + known_correct_hashes = [('password', 'md5$123abcdef$c8272612932975ee80e8a35995708e80'), ('test', 'md5$3OpqnFAHW5CT$54b29300675271049a1ebae07b395e20'), (UPASS_USD, 'md5$c2e86$92105508419a81a6babfaecf876a2fa0'), (UPASS_TABLE, 'md5$d9eb8$01495b32852bffb27cf5d4394fe7a54c')]
      + known_unidentified_hashes = ['sha1$aa$bb']
      + known_malformed_hashes = ['md5$aa$bb']
  }

  class FuzzHashGenerator {
      + random_salt_size()
  }

  class django_salted_sha1_test {
      + handler = hash.django_salted_sha1
      + max_django_version = (1, 9)
      + known_correct_hashes = [('password', 'sha1$123abcdef$e4a1877b0e35c47329e7ed7e58014276168a37ba'), ('test', 'sha1$bcwHF9Hy8lxS$6b4cfa0651b43161c6f1471ce9523acf1f751ba3'), (UPASS_USD, 'sha1$c2e86$0f75c5d7fbd100d587c127ef0b693cde611b4ada'), (UPASS_TABLE, 'sha1$6d853$ef13a4d8fb57aed0cb573fe9c82e28dc7fd372d4'), ('MyPassword', 'sha1$54123$893cf12e134c3c215f3a76bd50d13f92404a54d3')]
      + known_unidentified_hashes = ['md5$aa$bb']
      + known_malformed_hashes = ['sha1$c2e86$0f75']
      + FuzzHashGenerator = django_salted_md5_test.FuzzHashGenerator
  }

  class django_pbkdf2_sha256_test {
      + handler = hash.django_pbkdf2_sha256
      + known_correct_hashes = [('not a password', 'pbkdf2_sha256$10000$kjVJaVz6qsnJ$5yPHw3rwJGECpUf70daLGhOrQ5+AMxIJdz1c3bqK1Rs='), (UPASS_TABLE, 'pbkdf2_sha256$10000$bEwAfNrH1TlQ$OgYUblFNUX1B8GfMqaCYUK/iHyO0pa7STTDdaEJBuY0=')]
  }

  class django_pbkdf2_sha1_test {
      + handler = hash.django_pbkdf2_sha1
      + known_correct_hashes = [('not a password', 'pbkdf2_sha1$10000$wz5B6WkasRoF$atJmJ1o+XfJxKq1+Nu1f1i57Z5I='), (UPASS_TABLE, 'pbkdf2_sha1$10000$KZKWwvqb8BfL$rw5pWsxJEU4JrZAQhHTCO+u0f5Y=')]
  }

  class django_bcrypt_test {
      + handler = hash.django_bcrypt
      + max_django_version = (2, 0)
      + fuzz_salts_need_bcrypt_repair = True
      + known_correct_hashes = [('', 'bcrypt$$2a$06$DCq7YPn5Rq63x1Lad4cll.TV4S6ytwfsfvkgY8jIucDrjc8deX1s.'), ('abcdefghijklmnopqrstuvwxyz', 'bcrypt$$2a$10$fVH8e28OQRj9tqiDXs1e1uxpsjN0c7II7YPKXua2NAKYvM6iQk7dq'), (UPASS_TABLE, 'bcrypt$$2a$05$Z17AXnnlpzddNUvnC6cZNOSwMA/8oNiKnHTHTwLlBijfucQQlHjaG')]
  --
      + populate_settings(kwds)
  }

  class FuzzHashGenerator {
      + random_rounds()
      + random_ident()
  }

  class django_bcrypt_sha256_test {
      + handler = hash.django_bcrypt_sha256
      + forbidden_characters = None
      + fuzz_salts_need_bcrypt_repair = True
      + known_correct_hashes = [('', 'bcrypt_sha256$$2a$06$/3OeRpbOf8/l6nPPRdZPp.nRiyYqPobEZGdNRBWihQhiFDh1ws1tu'), (UPASS_LETMEIN, 'bcrypt_sha256$$2a$08$NDjSAIcas.EcoxCRiArvT.MkNiPYVhrsrnJsRkLueZOoV1bsQqlmC'), (UPASS_TABLE, 'bcrypt_sha256$$2a$06$kCXUnRFQptGg491siDKNTu8RxjBGSjALHRuvhPYNFsa4Ea5d9M48u'), (repeat_string('abc123', 72), 'bcrypt_sha256$$2a$06$Tg/oYyZTyAf.Nb3qSgN61OySmyXA8FoY4PjGizjE1QSDfuL5MXNni'), (repeat_string('abc123', 72) + 'qwr', 'bcrypt_sha256$$2a$06$Tg/oYyZTyAf.Nb3qSgN61Ocy0BEz1RK6xslSNi8PlaLX2pe7x/KQG'), (repeat_string('abc123', 72) + 'xyz', 'bcrypt_sha256$$2a$06$Tg/oYyZTyAf.Nb3qSgN61OvY2zoRVUa2Pugv2ExVOUT2YmhvxUFUa')]
      + known_malformed_hashers = ['bcrypt_sha256$xyz$2a$06$/3OeRpbOf8/l6nPPRdZPp.nRiyYqPobEZGdNRBWihQhiFDh1ws1tu']
  --
      + populate_settings(kwds)
  }

  class FuzzHashGenerator {
      + random_rounds()
      + random_ident()
  }

  class django_argon2_test {
      + handler = hash.django_argon2
      + known_correct_hashes = [('password', 'argon2$argon2i$v=19$m=256,t=1,p=1$c29tZXNhbHQ$AJFIsNZTMKTAewB4+ETN1A'), ('password', 'argon2$argon2i$v=19$m=380,t=2,p=2$c29tZXNhbHQ$SrssP8n7m/12VWPM8dvNrw'), (UPASS_LETMEIN, 'argon2$argon2i$v=19$m=512,t=2,p=2$V25jN1l4UUJZWkR1$MxpA1BD2Gh7+D79gaAw6sQ')]
  --
      + setUpWarnings()
      + do_stub_encrypt(handler = None)
      + test_03_legacy_hash_workflow()
  }

  class FuzzHashGenerator {
      + random_type()
      + random_rounds()
  }

  class ldap_pbkdf2_test {
      + test_wrappers()
  }

  class atlassian_pbkdf2_sha1_test {
      + handler = hash.atlassian_pbkdf2_sha1
      + known_correct_hashes = [('admin', '{PKCS5S2}c4xaeTQM0lUieMS3V5voiexyX9XhqC2dBd5ecVy60IPksHChwoTAVYFrhsgoq8/p'), (UPASS_WAV, '{PKCS5S2}cE9Yq6Am5tQGdHSHhky2XLeOnURwzaLBG2sur7FHKpvy2u0qDn6GcVGRjlmJoIUy')]
      + known_malformed_hashes = ['{PKCS5S2}c4xaeTQM0lUieMS3V5voiexyX9XhqC2dBd5ecVy!0IPksHChwoTAVYFrhsgoq8/p{PKCS5S2}c4xaeTQM0lUieMS3V5voiexyX9XhqC2dBd5ecVy60IPksHChwoTAVYFrhsgoq8/{PKCS5S2}c4xaeTQM0lUieMS3V5voiexyX9XhqC2dBd5ecVy60IPksHChwoTAVYFrhsgoq8/=']
  }

  class pbkdf2_sha1_test {
      + handler = hash.pbkdf2_sha1
      + known_correct_hashes = [('password', '$pbkdf2$1212$OB.dtnSEXZK8U5cgxU/GYQ$y5LKPOplRmok7CZp/aqVDVg8zGI'), (UPASS_WAV, '$pbkdf2$1212$THDqatpidANpadlLeTeOEg$HV3oi1k5C5LQCgG1BMOL.BX4YZc')]
      + known_malformed_hashes = ['$pbkdf2$01212$THDqatpidANpadlLeTeOEg$HV3oi1k5C5LQCgG1BMOL.BX4YZc', '$pbkdf2$$THDqatpidANpadlLeTeOEg$HV3oi1k5C5LQCgG1BMOL.BX4YZc', '$pbkdf2$1212$THDqatpidANpadlLeTeOEg$HV3oi1k5C5LQCgG1BMOL.BX4YZc$']
  }

  class pbkdf2_sha256_test {
      + handler = hash.pbkdf2_sha256
      + known_correct_hashes = [('password', '$pbkdf2-sha256$1212$4vjV83LKPjQzk31VI4E0Vw$hsYF68OiOUPdDZ1Fg.fJPeq1h/gXXY7acBp9/6c.tmQ'), (UPASS_WAV, '$pbkdf2-sha256$1212$3SABFJGDtyhrQMVt1uABPw$WyaUoqCLgvz97s523nF4iuOqZNbp5Nt8do/cuaa7AiI')]
  }

  class pbkdf2_sha512_test {
      + handler = hash.pbkdf2_sha512
      + known_correct_hashes = [('password', '$pbkdf2-sha512$1212$RHY0Fr3IDMSVO/RSZyb5ow$eNLfBK.eVozomMr.1gYa17k9B7KIK25NOEshvhrSX.esqY3s.FvWZViXz4KoLlQI.BzY/YTNJOiKc5gBYFYGww'), (UPASS_WAV, '$pbkdf2-sha512$1212$KkbvoKGsAIcF8IslDR6skQ$8be/PRmd88Ps8fmPowCJttH9G3vgxpG.Krjt3KT.NP6cKJ0V4Prarqf.HBwz0dCkJ6xgWnSj2ynXSV7MlvMa8Q')]
  }

  class cta_pbkdf2_sha1_test {
      + handler = hash.cta_pbkdf2_sha1
      + known_correct_hashes = [(u('hashy the ☃'), '$p5k2$1000$ZxK4ZBJCfQg=$jJZVscWtO--p1-xIZl6jhO2LKR0='), ('password', '$p5k2$1$$h1TDLGSw9ST8UMAPeIE13i0t12c='), (UPASS_WAV, '$p5k2$4321$OTg3NjU0MzIx$jINJrSvZ3LXeIbUdrJkRpN62_WQ=')]
  }

  class dlitz_pbkdf2_sha1_test {
      + handler = hash.dlitz_pbkdf2_sha1
      + known_correct_hashes = [('cloadm', '$p5k2$$exec$r1EWMCMk7Rlv3L/RNcFXviDefYa0hlql'), ('gnu', '$p5k2$c$u9HvcT4d$Sd1gwSVCLZYAuqZ25piRnbBEoAesaa/g'), ('dcl', '$p5k2$d$tUsch7fU$nqDkaxMDOFBeJsTSfABsyn.PYUXilHwL'), ('spam', '$p5k2$3e8$H0NX9mT/$wk/sE8vv6OMKuMaqazCJYDSUhWY9YB2J'), (UPASS_WAV, '$p5k2$$KosHgqNo$9mjN8gqjt02hDoP0c2J0ABtLIwtot8cQ')]
  }

  class grub_pbkdf2_sha512_test {
      + handler = hash.grub_pbkdf2_sha512
      + known_correct_hashes = [(UPASS_WAV, 'grub.pbkdf2.sha512.10000.BCAC1CEC5E4341C8C511C5297FA877BE91C2817B32A35A3ECF5CA6B8B257F751.6968526A2A5B1AEEE0A29A9E057336B48D388FFB3F600233237223C2104DE1752CEC35B0DD1ED49563398A282C0F471099C2803FBA47C7919CABC43192C68F60'), ('toomanysecrets', 'grub.pbkdf2.sha512.10000.9B436BB6978682363D5C449BBEAB322676946C632208BC1294D51F47174A9A3B04A7E4785986CD4EA7470FAB8FE9F6BD522D1FC6C51109A8596FB7AD487C4493.0FE5EF169AFFCB67D86E2581B1E251D88C777B98BA2D3256ECC9F765D84956FC5CA5C4B6FD711AA285F0A04DCF4634083F9A20F4B6F339A52FBD6BED618E527B')]
  }

  class scram_test {
      + handler = hash.scram
      + known_correct_hashes = [('pencil', '$scram$4096$QSXCR.Q6sek8bf92$sha-1=HZbuOlKbWl.eR8AfIposuKbhX30'), ('pencil', '$scram$4096$QSXCR.Q6sek8bf92$sha-1=HZbuOlKbWl.eR8AfIposuKbhX30,sha-256=qXUXrlcvnaxxWG00DdRgVioR2gnUpuX5r.3EZ1rdhVY,sha-512=lzgniLFcvglRLS0gt.C4gy.NurS3OIOVRAU1zZOV4P.qFiVFO2/edGQSu/kD1LwdX0SNV/KsPdHSwEl5qRTuZQ'), (u('IX à'), '$scram$6400$0BojBCBE6P2/N4bQ$sha-1=YniLes.b8WFMvBhtSACZyyvxeCc'), (u('Ⅸ\u3000à'), '$scram$6400$0BojBCBE6P2/N4bQ$sha-1=YniLes.b8WFMvBhtSACZyyvxeCc'), (u('\xadIX à'), '$scram$6400$0BojBCBE6P2/N4bQ$sha-1=YniLes.b8WFMvBhtSACZyyvxeCc')]
      + known_malformed_hashes = ['$scram$04096$QSXCR.Q6sek8bf92$sha-1=HZbuOlKbWl.eR8AfIposuKbhX30', '$scram$409A$QSXCR.Q6sek8bf92$sha-1=HZbuOlKbWl.eR8AfIposuKbhX30', '$scram$4096$QSXCR.Q6sek8bf9-$sha-1=HZbuOlKbWl.eR8AfIposuKbhX30', '$scram$4096$QSXCR.Q6sek8bf92$sha-1=HZbuOlKbWl.eR8AfIposuKbhX3-', '$scram$4096$QSXCR.Q6sek8bf92', '$scram$4096$QSXCR.Q6sek8bf92$', '$scram$4096$QSXCR.Q6sek8bf92$sha-1=HZbuOlKbWl.eR8AfIposuKbhX30$', '$scram$4096$QSXCR.Q6sek8bf92$sha-1=HZbuOlKbWl.eR8AfIposuKbhX30sha-256=qXUXrlcvnaxxWG00DdRgVioR2gnUpuX5r.3EZ1rdhVY', '$scram$4096$QSXCR.Q6sek8bf92$sha-1=HZbuOlKbWl.eR8AfIposuKbhX30,shaxxx-190=HZbuOlKbWl.eR8AfIposuKbhX30', '$scram$4096$QSXCR.Q6sek8bf92$sha-256=HZbuOlKbWl.eR8AfIposuKbhX30', '$scram$4096$QSXCR.Q6sek8bf92$sha1=HZbuOlKbWl.eR8AfIposuKbhX30']
  --
      + setUp()
      + test_90_algs()
      + test_90_checksums()
      + test_91_extract_digest_info()
      + test_92_extract_digest_algs()
      + test_93_derive_digest()
      + test_94_saslprep()
      + test_94_using_w_default_algs(param = 'default_algs')
      + test_94_using_w_algs()
      + test_94_needs_update_algs()
      + test_95_context_algs()
      + test_96_full_verify()
  }

  class HostsTest {
      + check_unix_disabled(ctx)
      + test_linux_context()
      + test_bsd_contexts()
      + test_host_context()
  }

  class UtilsTest {
      + descriptionPrefix = 'passlib.pwd'
  --
      + test_self_info_rate()
  }

  class WordGeneratorTest {
      + descriptionPrefix = 'passlib.pwd.genword()'
  --
      + setUp()
      + assertResultContents(results, count, chars, unique = True)
      + test_general()
      + test_returns()
      + test_charset()
  }

  class PhraseGeneratorTest {
      + descriptionPrefix = 'passlib.pwd.genphrase()'
  --
      + assertResultContents(results, count, words, unique = True, sep = ' ')
      + test_general()
      + test_entropy()
      + test_returns()
      + test_wordset()
  }

  class dummy_0 {
      + name = 'dummy_0'
  }

  class alt_dummy_0 {
      + name = 'dummy_0'
  }

  class RegistryTest {
      + descriptionPrefix = 'passlib.registry'
  --
      + setUp()
      + test_hash_proxy()
      + test_register_crypt_handler_path()
      + test_register_crypt_handler()
      + test_get_crypt_handler()
      + test_list_crypt_handlers()
      + test_handlers()
  }

  class AppWalletTest {
      + descriptionPrefix = 'passlib.totp.AppWallet'
  --
      + test_secrets_types()
      + test_secrets_tags()
      + test_default_tag()
      + require_aes_support(canary = None)
      + test_decrypt_key()
      + test_decrypt_key_needs_recrypt()
      + assertSaneResult(result, wallet, key, tag = '1', needs_recrypt = False)
      + test_encrypt_key()
      + test_encrypt_cost_timing()
  }

  class TotpTest {
      + descriptionPrefix = 'passlib.totp.TOTP'
      + vector_defaults = dict(format='base32', alg='sha1', period=30, digits=8)
      + vectors = [[dict(key='ACDEFGHJKL234567', digits=6), (1412873399, '221105'), (1412873400, '178491'), (1412873401, '178491'), (1412873429, '178491'), (1412873430, '915114')], [dict(key='ACDEFGHJKL234567', digits=8), (1412873399, '20221105'), (1412873400, '86178491'), (1412873401, '86178491'), (1412873429, '86178491'), (1412873430, '03915114')], [dict(key='S3JD-VB7Q-D2R7-JPXX', digits=6), (1419622709, '000492'), (1419622739, '897212')], [dict(key=RFC_KEY_BYTES_20, format='raw', alg='sha1'), (59, '94287082'), (1111111109, '07081804'), (1111111111, '14050471'), (1234567890, '89005924'), (2000000000, '69279037'), (20000000000, '65353130')], [dict(key=RFC_KEY_BYTES_32, format='raw', alg='sha256'), (59, '46119246'), (1111111109, '68084774'), (1111111111, '67062674'), (1234567890, '91819424'), (2000000000, '90698825'), (20000000000, '77737706')], [dict(key=RFC_KEY_BYTES_64, format='raw', alg='sha512'), (59, '90693936'), (1111111109, '25091201'), (1111111111, '99943326'), (1234567890, '93441116'), (2000000000, '38618901'), (20000000000, '47863826')], [dict(key='JBSWY3DPEHPK3PXP', digits=6), (1409192430, '727248'), (1419890990, '122419')], [dict(key='JBSWY3DPEHPK3PXP', digits=9, period=41), (1419891152, '662331049')], [dict(key=RFC_KEY_BYTES_20, format='raw', period=60), (1111111111, '19360094')], [dict(key=RFC_KEY_BYTES_32, format='raw', alg='sha256', period=60), (1111111111, '40857319')], [dict(key=RFC_KEY_BYTES_64, format='raw', alg='sha512', period=60), (1111111111, '37023009')]]
  --
      + setUp()
      + randtime()
      + randotp(cls = None)
      + test_randotp()
      + iter_test_vectors()
      + test_ctor_w_new()
      + test_ctor_w_size()
      + test_ctor_w_key_and_format()
      + test_ctor_w_alg()
      + test_ctor_w_digits()
      + test_ctor_w_period()
      + test_ctor_w_label()
      + test_ctor_w_issuer()
      + test_using_w_period()
      + test_using_w_now()
      + test_normalize_token_instance(otp = None)
      + test_normalize_token_class()
      + test_normalize_time()
      + test_key_attrs()
      + test_totp_token()
      + test_generate()
      + test_generate_w_reference_vectors()
      + assertTotpMatch(match, time, skipped = 0, period = 30, window = 30, msg = '')
      + test_totp_match_w_valid_token()
      + test_totp_match_w_older_token()
      + test_totp_match_w_new_token()
      + test_totp_match_w_invalid_token()
      + assertVerifyMatches(expect_skipped, token, time, otp, gen_time = None)
      + assertVerifyRaises(exc_class, token, time, otp, gen_time = None)
      + test_match_w_window()
      + test_match_w_skew()
      + test_match_w_reuse()
      + test_match_w_token_normalization()
      + test_match_w_reference_vectors()
      + test_verify()
      + test_from_source()
      + test_from_uri()
      + test_to_uri()
      + test_from_dict()
      + test_to_dict()
  }

  class MiscTest {
      + test_compat()
      + test_classproperty()
      + test_deprecated_function()
      + test_memoized_property()
      + test_getrandbytes()
      + test_getrandstr(seed)
      + test_generate_password()
      + test_is_crypt_context()
      + test_genseed()
      + test_crypt()
      + test_consteq()
      + test_saslprep()
      + test_splitcomma()
      + test_utf8_truncate()
  }

  class CodecTest {
      + test_bytes()
      + test_to_bytes()
      + test_to_unicode()
      + test_to_native_str()
      + test_is_ascii_safe()
      + test_is_same_codec()
  }

  class Base64EngineTest {
      + test_constructor()
      + test_ab64_decode()
      + test_ab64_encode()
      + test_b64s_decode()
      + test_b64s_encode()
  }

  class H64_Test {
      + engine = h64
      + descriptionPrefix = 'h64 codec'
      + encoded_data = [(b'', b''), (b'U', b'J/'), (b'U\xaa', b'Jd8'), (b'U\xaaU', b'JdOJ'), (b'U\xaaU\xaa', b'JdOJe0'), (b'U\xaaU\xaaU', b'JdOJeK3'), (b'U\xaaU\xaaU\xaa', b'JdOJeKZe'), (b'U\xaaU\xaf', b'JdOJj0'), (b'U\xaaU\xaa_', b'JdOJey3')]
      + encoded_ints = [(b'z.', 63, 12), (b'.z', 4032, 12)]
  }

  class H64Big_Test {
      + engine = h64big
      + descriptionPrefix = 'h64big codec'
      + encoded_data = [(b'', b''), (b'U', b'JE'), (b'U\xaa', b'JOc'), (b'U\xaaU', b'JOdJ'), (b'U\xaaU\xaa', b'JOdJeU'), (b'U\xaaU\xaaU', b'JOdJeZI'), (b'U\xaaU\xaaU\xaa', b'JOdJeZKe'), (b'U\xaaU\xaf', b'JOdJfk'), (b'U\xaaU\xaa_', b'JOdJeZw')]
      + encoded_ints = [(b'.z', 63, 12), (b'z.', 4032, 12)]
  }

  class SkeletonTest {
      + test_00_static_handler()
      + test_01_calc_checksum_hack()
      + test_10_identify()
      + test_11_norm_checksum()
      + test_12_norm_checksum_raw()
      + test_20_norm_salt()
      + test_30_init_rounds()
      + test_40_backends()
      + test_41_backends()
      + test_50_norm_ident()
      + test_91_parsehash()
      + test_92_bitsize()
  }

  class dummy_handler_in_registry {
      - __init__(name)
  }

  class PrefixWrapperTest {
      + test_00_lazy_loading()
      + test_01_active_loading()
      + test_02_explicit()
      + test_10_wrapped_attributes()
      + test_11_wrapped_methods()
      + test_12_ident()
      + test_13_repr()
      + test_14_bad_hash()
  }

  class UnsaltedHash {
      + name = 'unsalted_test_hash'
      + checksum_chars = uh.LOWER_HEX_CHARS
      + checksum_size = 40
  }

  class SaltedHash {
      + name = 'salted_test_hash'
      + setting_kwds = ('salt',)
      + min_salt_size = 2
      + max_salt_size = 4
      + checksum_size = 40
      + salt_chars = uh.LOWER_HEX_CHARS
      + checksum_chars = uh.LOWER_HEX_CHARS
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class UnsaltedHashTest {
      + handler = UnsaltedHash
      + known_correct_hashes = [('password', '61cfd32684c47de231f1f982c214e884133762c0'), (UPASS_TEMP, '96b329d120b97ff81ada770042e44ba87343ad2b')]
  --
      + test_bad_kwds()
  }

  class SaltedHashTest {
      + handler = SaltedHash
      + known_correct_hashes = [('password', '@salt77d71f8fe74f314dac946766c1ac4a2a58365482c0'), (UPASS_TEMP, '@salt9f978a9bfe360d069b0c13f2afecd570447407fa7e48')]
  --
      + test_bad_kwds()
  }

  class Legacy_MD4_Test {
      + descriptionPrefix = 'passlib.utils.md4.md4()'
  --
      + setUp()
      + get_md4_const()
  }

  class UtilsTest {
      + descriptionPrefix = 'passlib.utils.pbkdf2'
      + ndn_formats = ['hashlib', 'iana']
      + ndn_values = [('md5', 'md5', 'SCRAM-MD5-PLUS', 'MD-5'), ('sha1', 'sha-1', 'SCRAM-SHA-1', 'SHA1'), ('sha256', 'sha-256', 'SHA_256', 'sha2-256'), ('ripemd160', 'ripemd-160', 'SCRAM-RIPEMD-160', 'RIPEmd160', 'ripemd', 'SCRAM-RIPEMD'), ('test128', 'test-128', 'TEST128'), ('test2', 'test2', 'TEST-2'), ('test3_128', 'test3-128', 'TEST-3-128')]
  --
      + setUp()
      + test_norm_hash_name()
  }

  class Pbkdf1_Test {
      + descriptionPrefix = 'passlib.utils.pbkdf2.pbkdf1()'
      + pbkdf1_tests = [(b'password', hb('78578E5A5D63CB06'), 1000, 16, 'sha1', hb('dc19847e05c64d2faf10ebfb4a3d2a20')), (b'password', b'salt', 1000, 0, 'md5', b''), (b'password', b'salt', 1000, 1, 'md5', hb('84')), (b'password', b'salt', 1000, 8, 'md5', hb('8475c6a8531a5d27')), (b'password', b'salt', 1000, 16, 'md5', hb('8475c6a8531a5d27e386cd496457812c')), (b'password', b'salt', 1000, None, 'md5', hb('8475c6a8531a5d27e386cd496457812c')), (b'password', b'salt', 1000, None, 'sha1', hb('4a8fd48e426ed081b535be5769892fa396293efb'))]
  --
      + setUp()
      + test_known()
      + test_border()
  }

  class Pbkdf2_Test {
      + descriptionPrefix = 'passlib.utils.pbkdf2.pbkdf2()'
      + pbkdf2_test_vectors = [(hb('cdedb5281bb2f801565a1122b2563515'), b'password', b'ATHENA.MIT.EDUraeburn', 1, 16), (hb('01dbee7f4a9e243e988b62c73cda935d'), b'password', b'ATHENA.MIT.EDUraeburn', 2, 16), (hb('01dbee7f4a9e243e988b62c73cda935da05378b93244ec8f48a99e61ad799d86'), b'password', b'ATHENA.MIT.EDUraeburn', 2, 32), (hb('5c08eb61fdf71e4e4ec3cf6ba1f5512ba7e52ddbc5e5142f708a31e2e62b1e13'), b'password', b'ATHENA.MIT.EDUraeburn', 1200, 32), (hb('d1daa78615f287e6a1c8b120d7062a493f98d203e6be49a6adf4fa574b6e64ee'), b'password', b'\x124VxxV4\x12', 5, 32), (hb('139c30c0966bc32ba55fdbf212530ac9c5ec59f1a452f5cc9ad940fea0598ed1'), b'X' * 64, b'pass phrase equals block size', 1200, 32), (hb('9ccad6d468770cd51b10e6a68721be611a8b4d282601db3b36be9246915ec82a'), b'X' * 65, b'pass phrase exceeds block size', 1200, 32), (hb('0c60c80f961f0e71f3a9b524af6012062fe037a6'), b'password', b'salt', 1, 20), (hb('ea6c014dc72d6f8ccd1ed92ace1d41f0d8de8957'), b'password', b'salt', 2, 20), (hb('4b007901b765489abead49d926f721d065a429c1'), b'password', b'salt', 4096, 20), (hb('3d2eec4fe41c849b80c8d83662c0e44a8b291a964cf2f07038'), b'passwordPASSWORDpassword', b'saltSALTsaltSALTsaltSALTsaltSALTsalt', 4096, 25), (hb('56fa6aa75548099dcc37d7f03425e0c3'), b'pass\x00word', b'sa\x00lt', 4096, 16), (hb('887CFF169EA8335235D8004242AA7D6187A41E3187DF0CE14E256D85ED97A97357AAA8FF0A3871AB9EEFF458392F462F495487387F685B7472FC6C29E293F0A0'), b'hello', hb('9290F727ED06C38BA4549EF7DE25CF5642659211B7FC076F2D28FEFD71784BB8D8F6FB244A8CC5C06240631B97008565A120764C0EE9C2CB0073994D79080136'), 10000, 64, 'hmac-sha512'), (hb('e248fb6b13365146f8ac6307cc222812'), b'secret', b'salt', 10, 16, 'hmac-sha1'), (hb('e248fb6b13365146f8ac6307cc2228127872da6d'), b'secret', b'salt', 10, None, 'hmac-sha1')]
  --
      + setUp()
      + test_known()
      + test_border()
      + test_default_keylen()
      + test_custom_prf()
  }

  class UtilTest {
      + setUp()
      + test_lmhash()
      + test_nthash()
  }

  class TestCase {
      + descriptionPrefix = None
      + resetWarningState = True
      + longMessage = True
      + assertNotEquals = assertEquals
      + assertRegexMatches = assertEquals
      + has_real_subtest = hasattr(_TestCase, 'subTest')
  --
      + shortDescription()
      + setUp()
      + setUpWarnings()
      + assertRaises(_exc_type, _callable = None)
      + assertEquals()
      + assertWarning(warning, message_re = None, message = None, category = None, filename_re = None, filename = None, lineno = None, msg = None)
      + assertWarningList(wlist = None, desc = None, msg = None)
      + consumeWarningList(wlist, desc = None)
      + require_stringprep()
      + require_TEST_MODE(level)
      + require_writeable_filesystem()
      + getRandom(name = 'default', seed = None)
      + subTest()
      + mktemp()
      + patchAttr(obj, attr, value, require_existing = True, wrap = False)
      + getLogger()
  }

  class HandlerCase {
      + handler = None
      + backend = None
      + known_correct_hashes = []
      + known_correct_configs = []
      + known_alternate_hashes = []
      + known_unidentified_hashes = []
      + known_malformed_hashes = []
      + known_other_hashes = [('des_crypt', '6f8c114b58f2c'), ('md5_crypt', '$1$dOHYPKoP$tnxS1T8Q6VVn3kpV8cN6o.'), ('sha512_crypt', '$6$rounds=123456$asaltof16chars..$BtCwjqMJGx5hrJhZywWvt0RLE8uZ4oPwcelCjmw2kSYu.Ec6ycULevoBK25fs2xXgMNrCzIMVcgEJAstJeonj1')]
      + stock_passwords = [u('test'), u('€¥$'), b'\xe2\x82\xac\xc2\xa5$']
      + secret_case_insensitive = False
      + accepts_all_hashes = False
      + disabled_contains_salt = False
      + filter_config_warnings = False
      + fuzz_salts_need_bcrypt_repair = False
      + known_parsehash_results = []
      + fuzz_verifiers = ('fuzz_verifier_default',)
  --
      + forbidden_characters(cls)
      + descriptionPrefix()
      + {classmethod} iter_known_hashes(cls)
      + get_sample_hash()
      + check_verify(secret, hash, msg = None, negate = False)
      + check_returned_native_str(result, func_name)
      + populate_settings(kwds)
      + populate_context(secret, kwds)
      + do_encrypt(secret, use_encrypt = False, handler = None, context = None)
      + do_verify(secret, hash, handler = None)
      + do_identify(hash)
      + do_genconfig()
      + do_genhash(secret, config)
      + do_stub_encrypt(handler = None, context = None)
      + {classmethod} create_backend_case(cls, backend)
      + setUp()
      + test_01_required_attributes()
      + test_02_config_workflow()
      + test_02_using_workflow()
      + test_03_hash_workflow(use_16_legacy = False)
      + test_03_legacy_hash_workflow()
      + test_04_hash_types()
      + test_05_backends()
      + require_salt()
      + require_salt_info()
      + test_10_optional_salt_attributes()
      + salt_bits()
      + test_11_unique_salt()
      + test_12_min_salt_size()
      + test_13_max_salt_size()
      + prepare_salt(salt)
      + test_14_salt_chars()
      + salt_type()
      + test_15_salt_type()
      + test_using_salt_size()
      + require_rounds_info()
      + test_20_optional_rounds_attributes()
      + test_21_min_rounds()
      + test_21b_max_rounds()
      + test_has_rounds_using_harness()
      + test_has_rounds_using_w_min_rounds()
      + test_has_rounds_replace_w_max_rounds()
      + test_has_rounds_using_w_default_rounds()
      + test_has_rounds_using_w_rounds()
      + test_has_rounds_using_w_vary_rounds_parsing()
      + test_has_rounds_using_w_vary_rounds_generation()
      + test_has_rounds_using_and_needs_update()
      + require_many_idents()
      + test_30_HasManyIdents()
      + test_has_many_idents_using()
      + test_truncate_error_setting()
      + test_secret_wo_truncate_size()
      + test_secret_w_truncate_size()
      + test_61_secret_case_sensitive()
      + test_62_secret_border()
      + test_63_large_secret()
      + test_64_forbidden_chars()
      + is_secret_8bit(secret)
      + expect_os_crypt_failure(secret)
      + test_70_hashes()
      + test_71_alternates()
      + test_72_configs()
      + test_73_unidentified()
      + test_74_malformed()
      + test_75_foreign()
      + test_76_hash_border()
      + require_parsehash()
      + test_70_parsehash()
      + assert_is_masked(value)
      + test_71_parsehash_results()
      + test_77_fuzz_input(threaded = False)
      + test_78_fuzz_threading()
      + max_fuzz_time()
      + fuzz_thread_count()
      + get_fuzz_verifiers(threaded = False)
      + fuzz_verifier_default()
      + test_disable_and_enable()
  }

  class FuzzHashGenerator {
      + password_alphabet = u('qwertyASDF1234<>.@*#! áəБℓ')
      + password_encoding = 'utf-8'
      + settings_map = dict(rounds='random_rounds', salt_size='random_salt_size', ident='random_ident')
      + context_map = {}
  --
      - __init__(test, rng)
      + generate()
      + randintgauss(lower, upper, mu, sigma)
      + random_rounds()
      + random_salt_size()
      + random_ident()
      + random_password_pair()
      + random_password()
      + accept_password_pair(secret, other)
  }

  class OsCryptMixin {
      + platform_crypt_support = []
      + backend = 'os_crypt'
      + using_patched_crypt = False
  --
      + setUp()
      + has_os_crypt_fallback()
      + test_80_faulty_crypt()
      + test_81_crypt_fallback()
      + test_82_crypt_support()
      + fuzz_verifier_crypt()
      + crypt_supports_variant(hash)
  }

  class UserHandlerMixin {
      + default_user = 'user'
      + requires_user = True
      + user_case_insensitive = False
  --
      + test_80_user()
      + test_81_user_case()
      + test_82_user_salt()
      + populate_context(secret, kwds)
  }

  class FuzzHashGenerator {
      + context_map = HandlerCase.FuzzHashGenerator.context_map.copy()
      + user_alphabet = u('asdQWE123')
  --
      + random_user()
  }

  class EncodingHandlerMixin {
      + stock_passwords = [u('test'), b'test', u('¬º')]
  --
      + populate_context(secret, kwds)
  }

  class FuzzHashGenerator {
      + password_alphabet = u('qwerty1234<>.@*#! ¬')
  }

  class reset_warnings {
      - __init__(reset_filter = 'always', reset_registry = '.*')
  }

  class dummy_bad {
      + name = 'dummy_bad'
  }

  class alt_dummy_bad {
      + name = 'dummy_bad'
  }

}

package cssselect {
  class SelectorError {
  }

  class SelectorSyntaxError {
  }

  class Selector {
      - __init__(tree: Tree, pseudo_element: PseudoElement | None = None)
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class Class {
      - __init__(selector: Tree, class_name: str)
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class FunctionalPseudoElement {
      - __init__(name: str, arguments: Sequence[Token])
      + argument_types(): list[str]
      + canonical(): str
  }

  class Function {
      - __init__(selector: Tree, name: str, arguments: Sequence[Token])
      + argument_types(): list[str]
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class Pseudo {
      - __init__(selector: Tree, ident: str)
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class Negation {
      - __init__(selector: Tree, subselector: Tree)
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class Relation {
      - __init__(selector: Tree, combinator: Token, subselector: Selector)
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class Matching {
      - __init__(selector: Tree, selector_list: Iterable[Tree])
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class SpecificityAdjustment {
      - __init__(selector: Tree, selector_list: list[Tree])
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class Attrib {
      - __init__(selector: Tree, namespace: str | None, attrib: str, operator: Literal['exists'], value: None)
      - __init__(selector: Tree, namespace: str | None, attrib: str, operator: str, value: Token)
      - __init__(selector: Tree, namespace: str | None, attrib: str, operator: str, value: Token | None)
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class Element {
      - __init__(namespace: str | None = None, element: str | None = None)
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class Hash {
      - __init__(selector: Tree, id: str)
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class CombinedSelector {
      - __init__(selector: Tree, combinator: str, subselector: Tree)
      + canonical(): str
      + specificity(): tuple[int, int, int]
  }

  class Token {
      + pos: int
  --
      + is_delim(): bool
      + type(): str
      + value(): str | None
      + css(): str
  }

  class EOFToken {
  }

  class TokenMacros {
      + unicode_escape = '\\\\([0-9a-f]{1,6})(?:\\r\\n|[ \\n\\r\\t\\f])?'
      + escape = unicode_escape + '|\\\\[^\\n\\r\\f0-9a-f]'
      + string_escape = '\\\\(?:\\n|\\r\\n|\\r|\\f)|' + escape
      + nonascii = '[^\\0-\\177]'
      + nmchar = f'[_a-z0-9-]|{escape}|{nonascii}'
      + nmstart = f'[_a-z]|{escape}|{nonascii}'
  }

  class MatchFunc {
  }

  class TokenStream {
      - __init__(tokens: Iterable[Token], source: str | None = None)
      + next(): Token
      + peek(): Token
      + next_ident(): str
      + next_ident_or_star(): str | None
      + skip_whitespace()
  }

  class ExpressionError {
  }

  class XPathExpr {
      - __init__(path: str = '', element: str = '*', condition: str = '', star_prefix: bool = False)
      + add_condition(condition: str, conjuction: str = 'and'): Self
      + add_name_test()
      + add_star_prefix()
      + join(combiner: str, other: XPathExpr, closing_combiner: str | None = None, has_inner_condition: bool = False): Self
  }

  class GenericTranslator {
      + combinator_mapping = {' ': 'descendant', '>': 'child', '+': 'direct_adjacent', '~': 'indirect_adjacent'}
      + attribute_operator_mapping = {'exists': 'exists', '=': 'equals', '~=': 'includes', '|=': 'dashmatch', '^=': 'prefixmatch', '$=': 'suffixmatch', '*=': 'substringmatch', '!=': 'different'}
      + id_attribute = 'id'
      + lang_attribute = 'xml:lang'
      + lower_case_element_names = False
      + lower_case_attribute_names = False
      + lower_case_attribute_values = False
      + xpathexpr_cls = XPathExpr
      + xpath_link_pseudo = pseudo_never_matches
      + xpath_visited_pseudo = pseudo_never_matches
      + xpath_hover_pseudo = pseudo_never_matches
      + xpath_active_pseudo = pseudo_never_matches
      + xpath_focus_pseudo = pseudo_never_matches
      + xpath_target_pseudo = pseudo_never_matches
      + xpath_enabled_pseudo = pseudo_never_matches
      + xpath_disabled_pseudo = pseudo_never_matches
      + xpath_checked_pseudo = pseudo_never_matches
  --
      + css_to_xpath(css: str, prefix: str = 'descendant-or-self::'): str
      + selector_to_xpath(selector: Selector, prefix: str = 'descendant-or-self::', translate_pseudo_elements: bool = False): str
      + xpath_pseudo_element(xpath: XPathExpr, pseudo_element: PseudoElement): XPathExpr
      + {static} xpath_literal(s: str): str
      + xpath(parsed_selector: Tree): XPathExpr
      + xpath_combinedselector(combined: CombinedSelector): XPathExpr
      + xpath_negation(negation: Negation): XPathExpr
      + xpath_relation(relation: Relation): XPathExpr
      + xpath_matching(matching: Matching): XPathExpr
      + xpath_specificityadjustment(matching: SpecificityAdjustment): XPathExpr
      + xpath_function(function: Function): XPathExpr
      + xpath_pseudo(pseudo: Pseudo): XPathExpr
      + xpath_attrib(selector: Attrib): XPathExpr
      + xpath_class(class_selector: Class): XPathExpr
      + xpath_hash(id_selector: Hash): XPathExpr
      + xpath_element(selector: Element): XPathExpr
      + xpath_descendant_combinator(left: XPathExpr, right: XPathExpr): XPathExpr
      + xpath_child_combinator(left: XPathExpr, right: XPathExpr): XPathExpr
      + xpath_direct_adjacent_combinator(left: XPathExpr, right: XPathExpr): XPathExpr
      + xpath_indirect_adjacent_combinator(left: XPathExpr, right: XPathExpr): XPathExpr
      + xpath_relation_descendant_combinator(left: XPathExpr, right: XPathExpr): XPathExpr
      + xpath_relation_child_combinator(left: XPathExpr, right: XPathExpr): XPathExpr
      + xpath_relation_direct_adjacent_combinator(left: XPathExpr, right: XPathExpr): XPathExpr
      + xpath_relation_indirect_adjacent_combinator(left: XPathExpr, right: XPathExpr): XPathExpr
      + xpath_nth_child_function(xpath: XPathExpr, function: Function, last: bool = False, add_name_test: bool = True): XPathExpr
      + xpath_nth_last_child_function(xpath: XPathExpr, function: Function): XPathExpr
      + xpath_nth_of_type_function(xpath: XPathExpr, function: Function): XPathExpr
      + xpath_nth_last_of_type_function(xpath: XPathExpr, function: Function): XPathExpr
      + xpath_contains_function(xpath: XPathExpr, function: Function): XPathExpr
      + xpath_lang_function(xpath: XPathExpr, function: Function): XPathExpr
      + xpath_root_pseudo(xpath: XPathExpr): XPathExpr
      + xpath_scope_pseudo(xpath: XPathExpr): XPathExpr
      + xpath_first_child_pseudo(xpath: XPathExpr): XPathExpr
      + xpath_last_child_pseudo(xpath: XPathExpr): XPathExpr
      + xpath_first_of_type_pseudo(xpath: XPathExpr): XPathExpr
      + xpath_last_of_type_pseudo(xpath: XPathExpr): XPathExpr
      + xpath_only_child_pseudo(xpath: XPathExpr): XPathExpr
      + xpath_only_of_type_pseudo(xpath: XPathExpr): XPathExpr
      + xpath_empty_pseudo(xpath: XPathExpr): XPathExpr
      + pseudo_never_matches(xpath: XPathExpr): XPathExpr
      + xpath_attrib_exists(xpath: XPathExpr, name: str, value: str | None): XPathExpr
      + xpath_attrib_equals(xpath: XPathExpr, name: str, value: str | None): XPathExpr
      + xpath_attrib_different(xpath: XPathExpr, name: str, value: str | None): XPathExpr
      + xpath_attrib_includes(xpath: XPathExpr, name: str, value: str | None): XPathExpr
      + xpath_attrib_dashmatch(xpath: XPathExpr, name: str, value: str | None): XPathExpr
      + xpath_attrib_prefixmatch(xpath: XPathExpr, name: str, value: str | None): XPathExpr
      + xpath_attrib_suffixmatch(xpath: XPathExpr, name: str, value: str | None): XPathExpr
      + xpath_attrib_substringmatch(xpath: XPathExpr, name: str, value: str | None): XPathExpr
  }

  class HTMLTranslator {
      + lang_attribute = 'lang'
  --
      - __init__(xhtml: bool = False)
      + xpath_checked_pseudo(xpath: XPathExpr): XPathExpr
      + xpath_lang_function(xpath: XPathExpr, function: Function): XPathExpr
      + xpath_link_pseudo(xpath: XPathExpr): XPathExpr
      + xpath_disabled_pseudo(xpath: XPathExpr): XPathExpr
      + xpath_enabled_pseudo(xpath: XPathExpr): XPathExpr
  }

}

package cssutils {
  class IncrementalDecoder {
      + errors = property(_geterrors, _seterrors)
  --
      - __init__(errors = 'strict', encoding = None, force = True)
      + iterdecode(input)
      + decode(input, final = False)
      + reset()
      + getstate()
      + setstate(state)
  }

  class IncrementalEncoder {
      + errors = property(_geterrors, _seterrors)
  --
      - __init__(errors = 'strict', encoding = None)
      + iterencode(input)
      + encode(input, final = False)
      + reset()
      + getstate()
      + setstate(state)
  }

  class StreamWriter {
      + errors = property(_geterrors, _seterrors)
  --
      - __init__(stream, errors = 'strict', encoding = None, header = False)
      + encode(input, errors = 'strict')
  }

  class StreamReader {
      + errors = property(_geterrors, _seterrors)
  --
      - __init__(stream, errors = 'strict', encoding = None, force = True)
      + decode(input, errors = 'strict')
  }

  class CSSProductions {
  }

  class CSSProductions {
      + EOF = True
      + CHARSET_SYM = 'CHARSET_SYM'
      + FONT_FACE_SYM = 'FONT_FACE_SYM'
      + MEDIA_SYM = 'MEDIA_SYM'
      + IMPORT_SYM = 'IMPORT_SYM'
      + NAMESPACE_SYM = 'NAMESPACE_SYM'
      + PAGE_SYM = 'PAGE_SYM'
      + VARIABLES_SYM = 'VARIABLES_SYM'
  }

  class ErrorHandler {
      + instance = None
  --
      - __init__(log = None, defaultloglevel = logging.INFO, raiseExceptions = True)
  }

  class Deprecated {
      - __init__(msg)
  }

  class CSSParser {
      - __init__(log = None, loglevel = None, raiseExceptions = None, fetcher = None, parseComments = True, validate = True)
      + parseStyle(cssText, encoding = 'utf-8', validate = None)
      + parseString(cssText, encoding = None, href = None, media = None, title = None, validate = None)
      + parseFile(filename, encoding = None, href = None, media = None, title = None, validate = None)
      + parseUrl(href, encoding = None, media = None, title = None, validate = None)
      + setFetcher(fetcher = None)
  }

  class ParseError {
  }

  class Done {
  }

  class Exhausted {
  }

  class Missing {
  }

  class NoMatch {
  }

  class Choice {
      - __init__()
      + reset()
      + matches(token)
      + nextProd(token)
  }

  class Sequence {
      + optional = property(lambda self: self._min == 0)
  --
      - __init__()
      + matches(token)
      + reset()
      + nextProd(token)
  }

  class Prod {
      - __init__(name, match, optional = False, toSeq = None, toStore = None, stop = False, stopAndKeep = False, stopIfNoMoreMatch = False, nextSor = False, mayEnd = False, storeToken = None, exception = None)
      + matches(token)
      + reset()
  }

  class ProdParser {
      - __init__(clear = True)
      + parse(text, name, productions, keepS = False, checkS = False, store = None, emptyOk = False, debug = False)
  }

  class PreDef {
      + types = cssutils.cssproductions.CSSProductions
      + reHexcolor = re.compile('^\\#(?:[0-9abcdefABCDEF]{3}|[0-9abcdefABCDEF]{6})$')
  --
      + {static} calc(toSeq = None, nextSor = False)
      + {static} char(name = 'char', char = ',', toSeq = None, stop = False, stopAndKeep = False, mayEnd = False, stopIfNoMoreMatch = False, optional = False, nextSor = False)
      + {static} comma(optional = False, toSeq = None)
      + {static} comment(parent = None)
      + {static} dimension(nextSor = False, stop = False)
      + {static} function(toSeq = None, nextSor = False, toStore = None)
      + {static} funcEnd(stop = False, mayEnd = False)
      + {static} hexcolor(stop = False, nextSor = False)
      + {static} ident(stop = False, toStore = None, nextSor = False)
      + {static} number(stop = False, toSeq = None, nextSor = False)
      + {static} percentage(stop = False, toSeq = None, nextSor = False)
      + {static} string(stop = False, nextSor = False)
      + {static} S(name = 'whitespace', toSeq = None, optional = False)
      + {static} unary(stop = False, toSeq = None, nextSor = False)
      + {static} uri(stop = False, nextSor = False)
      + {static} unicode_range(stop = False, nextSor = False)
      + {static} variable(toSeq = None, stop = False, nextSor = False, toStore = None)
      + {static} unknownrule(name = '@', toStore = None)
  }

  class NoSuchProfileException {
  }

  class Profiles {
      + CSS_LEVEL_2 = 'CSS Level 2.1'
      + CSS3_BACKGROUNDS_AND_BORDERS = 'CSS Backgrounds and Borders Module Level 3'
      + CSS3_BASIC_USER_INTERFACE = 'CSS3 Basic User Interface Module'
      + CSS3_BOX = 'CSS Box Module Level 3'
      + CSS_BOX_LEVEL_3 = 'CSS Box Module Level 3'
      + CSS3_COLOR = 'CSS Color Module Level 3'
      + CSS_COLOR_LEVEL_3 = 'CSS Color Module Level 3'
      + CSS3_FONTS = 'CSS Fonts Module Level 3'
      + CSS3_FONT_FACE = 'CSS Fonts Module Level 3 @font-face properties'
      + CSS3_PAGED_MEDIA = 'CSS3 Paged Media Module'
      + CSS3_TEXT = 'CSS Text Level 3'
      + defaultProfiles = property(_getDefaultProfiles, _setDefaultProfiles, doc='Names of profiles to use for validation.To use e.g. the CSS2 profile set ``cssutils.profile.defaultProfiles = cssutils.profile.CSS_LEVEL_2``')
      + profiles = property(lambda self: self._profileNames, doc='Names of all profiles in order as defined.')
  --
      - __init__(log = None)
      + knownNames()
      + addProfiles(profiles)
      + addProfile(profile, properties, macros = None)
      + removeProfile(profile = None, all = False)
      + propertiesByProfile(profiles = None)
      + validate(name, value)
      + validateWithProfile(name, value, profiles = None)
  }

  class ErrorHandler {
      - __init__()
      + error(exception, token = None)
      + fatal(exception, token = None)
      + warn(exception, token = None)
  }

  class DocumentHandler {
      - __init__()
      + comment(text, line = None, col = None)
      + startDocument(encoding)
      + endDocument(source = None, line = None, col = None)
      + importStyle(uri, media, name, line = None, col = None)
      + namespaceDeclaration(prefix, uri, line = None, col = None)
      + startSelector(selectors = None, line = None, col = None)
      + endSelector(selectors = None, line = None, col = None)
      + property(name, value = 'TODO', important = False, line = None, col = None)
      + ignorableAtRule(atRule, line = None, col = None)
  }

  class EchoHandler {
      + out = property(lambda self: ''.join(self._out))
  --
      - __init__()
      + startDocument(encoding)
      + importStyle(uri, media, name, line = None, col = None)
      + namespaceDeclaration(prefix, uri, line = None, col = None)
      + startSelector(selectors = None, line = None, col = None)
      + endSelector(selectors = None, line = None, col = None)
      + property(name, value, important = False, line = None, col = None)
  }

  class Parser {
      - __init__(documentHandler = None, errorHandler = None)
      + parseString(cssText, encoding = None)
      + setDocumentHandler(handler)
      + setErrorHandler(handler)
  }

  class CSSCaptureHTMLParser {
      + curtag = ''
      + sheets = []
  --
      + handle_starttag(tag, atts)
      + handle_data(data)
      + handle_comment(data)
      + handle_endtag(tag)
  }

  class CSSCapture {
      - __init__(ua = None, log = None, defaultloglevel = logging.INFO)
      + capture(url)
      + saveto(dir, saveraw = False, minified = False)
  }

  class Preferences {
      - __init__()
      + useDefaults()
      + useMinified()
  }

  class Out {
      - __init__(ser)
      + append(val, type_ = None, space = True, keepS = False, indent = False, alwaysS = False)
      + value(delim = '', end = None, keepS = False)
  }

  class CSSSerializer {
      - __init__(prefs = None)
      + do_CSSStyleSheet(stylesheet)
      + do_CSSComment(rule)
      + do_CSSCharsetRule(rule)
      + do_CSSVariablesRule(rule)
      + do_CSSFontFaceRule(rule)
      + do_CSSImportRule(rule)
      + do_CSSNamespaceRule(rule)
      + do_CSSMediaRule(rule)
      + do_CSSPageRule(rule)
      + do_CSSPageRuleSelector(seq)
      + do_MarginRule(rule)
      + do_CSSUnknownRule(rule)
      + do_CSSStyleRule(rule)
      + do_css_SelectorList(selectorlist)
      + do_css_Selector(selector)
      + do_css_CSSVariablesDeclaration(variables)
      + do_css_CSSStyleDeclaration(style, separator = None, omit = True)
      + do_Property(property)
      + do_Property_priority(priorityseq)
      + do_css_PropertyValue(value, valuesOnly = False)
      + do_css_Value(value, valuesOnly = None)
      + do_css_ColorValue(value, valuesOnly = False)
      + do_css_CSSFunction(cssvalue, valuesOnly = False)
      + do_css_CSSCalc(cssvalue, valuesOnly = False)
      + do_css_MSValue(cssvalue, valuesOnly = False)
      + do_css_CSSVariable(variable, IGNORED = False)
      + do_stylesheets_medialist(medialist)
      + do_stylesheets_mediaquery(mediaquery)
  }

  class Tokenizer {
      + unicodesub = re.compile('\\\\[0-9a-fA-F]{1,6}(?:\\r\\n|[\\t\\r\\n\\f\\x20])?').sub
      + cleanstring = re.compile('\\\\((\\r\\n)|[\\n\\r\\f])').sub
  --
      - __init__(macros = None, productions = None, doComments = True)
      + push()
      + clear()
      + tokenize(text, fullsheet = False)
  }

  class Base {
  }

  class Base2 {
      - __init__()
  }

  class Seq {
      - __init__(readonly = True)
      + append(val, typ = None, line = None, col = None)
      + appendItem(item)
      + clear()
      + insert(index, val, typ, line = None, col = None)
      + replace(index = -1, val = None, typ = None, line = None, col = None)
      + rstrip()
      + appendToVal(val = None, index = -1)
  }

  class Item {
      + type = property(lambda self: self.__type)
      + value = property(lambda self: self.__value)
      + line = property(lambda self: self.__line)
      + col = property(lambda self: self.__col)
  --
      - __init__(value, type, line = None, col = None)
  }

  class ListSeq {
      - __init__()
      + append(item)
  }

  class LazyRegex {
      - __init__(pattern, flags = 0)
      + ensure()
      + match(string, pos = None, endpos = None)
      + search(string, pos = None, endpos = None)
      + split(string, maxsplit = 0)
      + findall(string, pos = None, endpos = None)
      + finditer(string, pos = None, endpos = None)
      + sub(repl, string, count = 0)
      + subn(repl, string, count = 0)
  }

  class DOMImplementationCSS {
      + createCSSStyleSheet(title, media)
      + createDocument()
      + createDocumentType()
      + hasFeature(feature, version)
  }

  class Replacer {
      - __init__(base)
      + {static} extract_base(uri)
  }

  class MediaCombineDisallowed {
      + {classmethod} check(cls, sheet)
      + failed()
  }

}

package css {
  class CSSCharsetRule {
      + cssText = property(fget=_getCssText, fset=_setCssText, doc='(DOM) The parsable textual representation.')
      + encoding = property(lambda self: self._encoding, _setEncoding, doc='(DOM)The encoding information used in this @charset rule.')
      + type = property(lambda self: self.CHARSET_RULE, doc='The type of this rule, as defined by a CSSRule type constant.')
      + wellformed = property(lambda self: bool(self.encoding))
  --
      - __init__(encoding = None, parentRule = None, parentStyleSheet = None, readonly = False)
  }

  class CSSComment {
      + cssText = property(_getCssText, _setCssText, doc='The parsable textual representation of this rule.')
      + type = property(lambda self: self.COMMENT, doc='The type of this rule, as defined by a CSSRule type constant.')
      + wellformed = property(lambda self: True)
  --
      - __init__(cssText = None, parentRule = None, parentStyleSheet = None, readonly = False)
  }

  class CSSFontFaceRule {
      + cssText = property(_getCssText, _setCssText, doc='(DOM) The parsable textual representation of this rule.')
      + style = property(lambda self: self._style, _setStyle, doc='(DOM) The declaration-block of this rule set, a :class:`~cssutils.css.CSSStyleDeclaration`.')
      + type = property(lambda self: self.FONT_FACE_RULE, doc='The type of this rule, as defined by a CSSRule type constant.')
      + valid = property(_getValid, doc='CSSFontFace is valid if properties `font-family` and `src` are set and all properties are valid.')
      + wellformed = property(lambda self: True)
  --
      - __init__(style = None, parentRule = None, parentStyleSheet = None, readonly = False)
  }

  class CSSImportRule {
      + cssText = property(fget=_getCssText, fset=_setCssText, doc='(DOM) The parsable textual representation of this rule.')
      + href = property(lambda self: self._href, _setHref, doc='Location of the style sheet to be imported.')
      + media = property(lambda self: self._media, _setMedia, doc='(DOM) A list of media types for this rule of type :class:`~cssutils.stylesheets.MediaList`.')
      + name = property(_getName, _setName, doc='An optional name for the imported sheet.')
      + styleSheet = property(lambda self: self._styleSheet, doc='(readonly) The style sheet referred to by this rule.')
      + type = property(lambda self: self.IMPORT_RULE, doc='The type of this rule, as defined by a CSSRule type constant.')
      + wellformed = property(_getWellformed)
  --
      - __init__(href = None, mediaText = None, name = None, parentRule = None, parentStyleSheet = None, readonly = False)
  }

  class CSSMediaRule {
      + cssText = property(_getCssText, _setCssText, doc='(DOM) The parsable textual representation of this rule.')
      + media = property(lambda self: self._media, _setMedia, doc='(DOM) A list of media types for this rule of type :class:`~cssutils.stylesheets.MediaList`.')
      + type = property(lambda self: self.MEDIA_RULE, doc='The type of this rule, as defined by a CSSRule type constant.')
      + wellformed = property(lambda self: self.media.wellformed)
  --
      - __init__(mediaText = 'all', name = None, parentRule = None, parentStyleSheet = None, readonly = False)
      + name()
      + name(name)
      + insertRule(rule, index = None)
  }

  class CSSNamespaceRule {
      + cssText = property(fget=_getCssText, fset=_setCssText, doc='(DOM) The parsable textual representation of this rule.')
      + namespaceURI = property(lambda self: self._namespaceURI, _setNamespaceURI, doc='URI (handled as simple string) of the defined namespace.')
      + prefix = property(lambda self: self._prefix, _setPrefix, doc='Prefix used for the defined namespace.')
      + type = property(lambda self: self.NAMESPACE_RULE, doc='The type of this rule, as defined by a CSSRule type constant.')
      + wellformed = property(lambda self: self.namespaceURI is not None)
  --
      - __init__(namespaceURI = None, prefix = None, cssText = None, parentRule = None, parentStyleSheet = None, readonly = False)
  }

  class CSSPageRule {
      + cssText = property(_getCssText, _setCssText, doc='(DOM) The parsable textual representation of this rule.')
      + selectorText = property(_getSelectorText, _setSelectorText, doc='(DOM) The parsable textual representation of the page selector for the rule.')
      + style = property(lambda self: self._style, _setStyle, doc='(DOM) The declaration-block of this rule set, a :class:`~cssutils.css.CSSStyleDeclaration`.')
      + specificity = property(lambda self: self._specificity, doc="Specificity of this page rule (READONLY).\nTuple of (f, g, h) where:\n\n - if the page selector has a named page, f=1; else f=0\n - if the page selector has a ':first' pseudo-class, g=1; else g=0\n - if the page selector has a ':left' or ':right' pseudo-class, h=1; else h=0\n")
      + type = property(lambda self: self.PAGE_RULE, doc='The type of this rule, as defined by a CSSRule type constant.')
      + wellformed = property(lambda self: True)
  --
      - __init__(selectorText = None, style = None, parentRule = None, parentStyleSheet = None, readonly = False)
      + keys()
      + insertRule(rule, index = None)
  }

  class CSS2Properties {
  }

  class CSSRule {
      + UNKNOWN_RULE = 0
      + STYLE_RULE = 1
      + CHARSET_RULE = 2
      + IMPORT_RULE = 3
      + MEDIA_RULE = 4
      + FONT_FACE_RULE = 5
      + PAGE_RULE = 6
      + NAMESPACE_RULE = 10
      + COMMENT = 1001
      + VARIABLES_RULE = 1008
      + MARGIN_RULE = 1006
      + atkeyword = property(lambda self: self._atkeyword, _setAtkeyword, doc='Normalized  keyword of an @rule (e.g. ``@import``).')
      + cssText = property(lambda self: '', _setCssText, doc='(DOM) The parsable textual representation of the rule. This reflects the current state of the rule and not its initial value.')
      + parentRule = property(lambda self: self._parentRule, doc='If this rule is contained inside another rule (e.g. a style rule inside an @media block), this is the containing rule. If this rule is not nested inside any other rules, this returns None.')
      + parentStyleSheet = property(_getParentStyleSheet, doc='The style sheet that contains this rule.')
      + type = property(lambda self: self.UNKNOWN_RULE, doc='The type of this rule, as defined by a CSSRule type constant.')
      + typeString = property(lambda self: CSSRule._typestrings[self.type], doc="Descriptive name of this rule's type.")
      + wellformed = property(lambda self: False, doc='If the rule is wellformed.')
  --
      - __init__(parentRule = None, parentStyleSheet = None, readonly = False)
      + parent()
  }

  class CSSRuleRules {
      + cssRules = property(lambda self: self._cssRules, _setCssRules, 'All Rules in this style sheet, a :class:`~cssutils.css.CSSRuleList`.')
  --
      - __init__(parentRule = None, parentStyleSheet = None)
      + deleteRule(index)
      + add(rule)
      + insertRule(rule, index = None)
  }

  class CSSRuleList {
      + append = __notimplemented
      + extend = __notimplemented
  --
      - __init__()
      + item(index)
      + length()
      + rulesOfType(type)
  }

  class CSSStyleDeclaration {
      + cssText = property(_getCssText, _setCssText, doc='(DOM) A parsable textual representation of the declaration block excluding the surrounding curly braces.')
      + parentRule = property(lambda self: self._parentRule, _setParentRule, doc='(DOM) The CSS rule that contains this declaration block or None if this CSSStyleDeclaration is not attached to a CSSRule.')
      + length = property(lambda self: len(list(self.__nnames())), doc='(DOM) The number of distinct properties that have been explicitly in this declaration block. The range of valid indices is 0 to length-1 inclusive. These are properties with a different ``name`` only. :meth:`item` and :attr:`length` work on the same set here.')
      + validating = property(_getValidating, _setValidating, doc='If ``True`` this declaration validates contained properties. The parent StyleSheet validation setting does *always* win though so even if validating is True it may not validate if the StyleSheet defines else!')
      + valid = property(_getValid, doc='``True`` if each property is valid.')
  --
      - __init__(cssText = '', parentRule = None, readonly = False, validating = None)
      + keys()
      + children()
      + getCssText(separator = None)
      + getProperties(name = None, all = False)
      + getProperty(name, normalize = True)
      + getPropertyCSSValue(name, normalize = True)
      + getPropertyValue(name, normalize = True, default = '')
      + getPropertyPriority(name, normalize = True)
      + removeProperty(name, normalize = True)
      + setProperty(name, value = None, priority = '', normalize = True, replace = True)
      + item(index)
  }

  class CSSStyleRule {
      + cssText = property(_getCssText, _setCssText, doc='(DOM) The parsable textual representation of this rule.')
      + selectorList = property(lambda self: self._selectorList, _setSelectorList, doc='The SelectorList of this rule.')
      + selectorText = property(lambda self: self._selectorList.selectorText, _setSelectorText, doc='(DOM) The textual representation of the selector for the rule set.')
      + style = property(lambda self: self._style, _setStyle, doc='(DOM) The declaration-block of this rule set.')
      + type = property(lambda self: self.STYLE_RULE, doc='The type of this rule, as defined by a CSSRule type constant.')
      + wellformed = property(lambda self: self.selectorList.wellformed)
      + valid = property(_getValid, doc='``True`` when the style declaration is true.')
  --
      - __init__(selectorText = None, style = None, parentRule = None, parentStyleSheet = None, readonly = False)
  }

  class CSSStyleSheet {
      + cssText = property(_getCssText, _setCssText, 'Textual representation of the stylesheet (a byte string)')
      + encoding = property(_getEncoding, _setEncoding, "(cssutils) Reflect encoding of an @charset rule or 'utf-8' (default) if set to ``None``")
      + variables = property(lambda self: self._variables, doc='A :class:`cssutils.css.CSSVariablesDeclaration` containing all available variables in this CSSStyleSheet including the ones defined in imported sheets.')
      + ownerRule = property(lambda self: self._ownerRule, doc='A ref to an @import rule if it is imported, else ``None``.')
      + valid = property(_getValid, doc='``True`` if all contained rules are valid')
  --
      - __init__(href = None, media = None, title = '', disabled = None, ownerNode = None, parentStyleSheet = None, readonly = False, ownerRule = None, validating = True)
      + cssRules()
      + cssRules(cssRules)
      + namespaces()
      + add(rule)
      + deleteRule(index)
      + insertRule(rule, index = None, inOrder = False, _clean = True)
      + setSerializer(cssserializer)
      + setSerializerPref(pref, value)
  }

  class CSSUnknownRule {
      + cssText = property(fget=_getCssText, fset=_setCssText, doc='(DOM) The parsable textual representation.')
      + type = property(lambda self: self.UNKNOWN_RULE, doc='The type of this rule, as defined by a CSSRule type constant.')
      + wellformed = property(lambda self: bool(self.atkeyword))
  --
      - __init__(cssText = '', parentRule = None, parentStyleSheet = None, readonly = False)
  }

  class CSSValue {
      + CSS_INHERIT = 0
      + CSS_PRIMITIVE_VALUE = 1
      + CSS_VALUE_LIST = 2
      + CSS_CUSTOM = 3
      + CSS_VARIABLE = 4
      + cssText = property(lambda self: cssutils.ser.do_css_CSSValue(self), _setCssText, doc='A string representation of the current value.')
      + cssValueType = property(lambda self: self._cssValueType, doc='A (readonly) code defining the type of the value.')
      + cssValueTypeString = property(lambda self: CSSValue._typestrings.get(self.cssValueType, None), doc='(readonly) Name of cssValueType.')
  --
      - __init__(cssText = None, parent = None, readonly = False)
  }

  class CSSPrimitiveValue {
      + cssValueType = CSSValue.CSS_PRIMITIVE_VALUE
      + CSS_UNKNOWN = 0
      + CSS_NUMBER = 1
      + CSS_PERCENTAGE = 2
      + CSS_EMS = 3
      + CSS_EXS = 4
      + CSS_PX = 5
      + CSS_CM = 6
      + CSS_MM = 7
      + CSS_IN = 8
      + CSS_PT = 9
      + CSS_PC = 10
      + CSS_DEG = 11
      + CSS_RAD = 12
      + CSS_GRAD = 13
      + CSS_MS = 14
      + CSS_S = 15
      + CSS_HZ = 16
      + CSS_KHZ = 17
      + CSS_DIMENSION = 18
      + CSS_STRING = 19
      + CSS_URI = 20
      + CSS_IDENT = 21
      + CSS_ATTR = 22
      + CSS_COUNTER = 23
      + CSS_RECT = 24
      + CSS_RGBCOLOR = 25
      + CSS_RGBACOLOR = 26
      + CSS_UNICODE_RANGE = 27
      + primitiveType = property(_getPrimitiveType, doc='(readonly) The type of the value as defined by the constants in this class.')
      + primitiveTypeString = property(_getPrimitiveTypeString, doc='Name of primitive type of this value.')
      + cssText = property(_getCssText, _setCssText, doc='A string representation of the current value.')
  --
      - __init__(cssText = None, parent = None, readonly = False)
      + getFloatValue(unitType = None)
      + setFloatValue(unitType, floatValue)
      + getStringValue()
      + setStringValue(stringType, stringValue)
      + getCounterValue()
      + getRGBColorValue()
      + getRectValue()
  }

  class CSSValueList {
      + cssValueType = CSSValue.CSS_VALUE_LIST
      + length = property(lambda self: len(self.__items()), doc='(DOM attribute) The number of CSSValues in the list.')
  --
      - __init__(cssText = None, parent = None, readonly = False)
      + item(index)
  }

  class CSSFunction {
      + primitiveType = CSSPrimitiveValue.CSS_UNKNOWN
      + cssText = property(lambda self: cssutils.ser.do_css_FunctionValue(self), _setCssText)
      + funcType = property(lambda self: self._funcType)
  --
      - __init__(cssText = None, parent = None, readonly = False)
  }

  class RGBColor {
      + cssText = property(lambda self: cssutils.ser.do_css_RGBColor(self), _setCssText)
      + colorType = property(lambda self: self._colorType)
  --
      - __init__(cssText = None, parent = None, readonly = False)
  }

  class CalcValue {
      + cssText = property(_getCssText, _setCssText, doc='A string representation of the current value.')
  }

  class ExpressionValue {
      + cssText = property(_getCssText, _setCssText, doc='A string representation of the current value.')
  }

  class CSSVariable {
      + cssText = property(lambda self: cssutils.ser.do_css_CSSVariable(self), _setCssText, doc='A string representation of the current variable.')
      + cssValueType = CSSValue.CSS_VARIABLE
      + name = property(lambda self: self._name)
      + value = property(_getValue)
  --
      - __init__(cssText = None, parent = None, readonly = False)
  }

  class CSSVariablesDeclaration {
      + cssText = property(_getCssText, _setCssText, doc='(DOM) A parsable textual representation of the declaration block excluding the surrounding curly braces.')
      + parentRule = property(lambda self: self._parentRule, _setParentRule, doc='(DOM) The CSS rule that contains this declaration block or None if this block is not attached to a CSSRule.')
      + length = property(lambda self: len(self._vars), doc='The number of variables that have been explicitly set in this variable declaration block. The range of valid indices is 0 to length-1 inclusive.')
  --
      - __init__(cssText = '', parentRule = None, readonly = False)
      + keys()
      + getVariableValue(variableName)
      + removeVariable(variableName)
      + setVariable(variableName, value)
      + item(index)
  }

  class CSSVariablesRule {
      + cssText = property(_getCssText, _setCssText, doc='(DOM) The parsable textual representation of this rule.')
      + media = property(doc='NOT IMPLEMENTED! As cssutils resolves variables during serializing media information is lost.')
      + variables = property(lambda self: self._variables, _setVariables, doc='(DOM) The variables of this rule set, a :class:`cssutils.css.CSSVariablesDeclaration`.')
      + type = property(lambda self: self.VARIABLES_RULE, doc='The type of this rule, as defined by a CSSRule type constant.')
      + valid = property(lambda self: True, doc='NOT IMPLEMTED REALLY (TODO)')
      + wellformed = property(lambda self: True)
  --
      - __init__(mediaText = None, variables = None, parentRule = None, parentStyleSheet = None, readonly = False)
  }

  class MarginRule {
      + margins = ['@top-left-corner', '@top-left', '@top-center', '@top-right', '@top-right-corner', '@bottom-left-corner', '@bottom-left', '@bottom-center', '@bottom-right', '@bottom-right-corner', '@left-top', '@left-middle', '@left-bottom', '@right-top', '@right-middle', '@right-bottom']
      + margin = property(lambda self: self._atkeyword, _setMargin, doc='Margin area of parent CSSPageRule. `margin` and `atkeyword` are both normalized @keyword of the @rule.')
      + atkeyword = margin
      + cssText = property(fget=_getCssText, fset=_setCssText, doc='(DOM) The parsable textual representation.')
      + style = property(lambda self: self._style, _setStyle, doc='(DOM) The declaration-block of this rule set.')
      + type = property(lambda self: self.MARGIN_RULE, doc='The type of this rule, as defined by a CSSRule type constant.')
      + wellformed = property(lambda self: bool(self.atkeyword))
  --
      - __init__(margin = None, style = None, parentRule = None, parentStyleSheet = None, readonly = False)
  }

  class Property {
      + cssText = property(fget=_getCssText, fset=_setCssText, doc='A parsable textual representation.')
      + name = property(lambda self: self._name, _setName, doc='Name of this property.')
      + literalname = property(lambda self: self._literalname, doc='Readonly literal (not normalized) name of this property')
      + propertyValue = property(lambda self: self.seqs[1], _setPropertyValue, doc='(cssutils) PropertyValue object of property')
      + value = property(_getValue, _setValue, doc='The textual value of this Properties propertyValue.')
      + literalpriority = property(lambda self: self._literalpriority, doc='Readonly literal (not normalized) priority of this property')
      + valid = property(validate, doc='Check if value of this property is valid in the properties context.')
      + cssValue = property(_getCSSValue, _setCSSValue, doc='(DEPRECATED) Use ``property.propertyValue`` instead.')
  --
      - __init__(name = None, value = None, priority = '', _mediaQuery = False, parent = None)
      + priority()
      + priority(priority)
      + parent()
      + parent(parent)
      + validate()
  }

  class Constants {
      + S = ' '
      + simple_selector_sequence = 'type_selector universal HASH class attrib pseudo negation '
      + simple_selector_sequence2 = 'HASH class attrib pseudo negation '
      + element_name = 'element_name'
      + negation_arg = 'type_selector universal HASH class attrib pseudo'
      + negationend = ')'
      + attname = 'prefix attribute'
      + attname2 = 'attribute'
      + attcombinator = 'combinator ]'
      + attvalue = 'value'
      + attend = ']'
      + expressionstart = 'PLUS - DIMENSION NUMBER STRING IDENT'
      + expression = expressionstart + ' )'
      + combinator = ' combinator'
  }

  class New <<dataclass>> {
      + selector: Selector
      + namespaces: dict[str, str]
      + context: list[str] = dataclasses.field(default_factory=lambda: [''])
      + element: str | None = None
      + specificity: list[int] = dataclasses.field(default_factory=lambda: [0] * 4)
      + wellformed: bool = True
  --
      + append(seq, val, typ = None, token = None)
      + productions()
  }

  class Selector {
      + parent = property(lambda self: self._parent, doc='(DOM) The SelectorList that contains this Selector or None if this Selector is not attached to a SelectorList.')
      + selectorText = property(_getSelectorText, _setSelectorText, doc='(DOM) The parsable textual representation of the selector.')
      + specificity = property(lambda self: self._specificity, doc='Specificity of this selector (READONLY).\n                Tuple of (a, b, c, d) where:\n\n                a\n                    presence of style in document, always 0 if not used on a\n                    document\n                b\n                    number of ID selectors\n                c\n                    number of .class selectors\n                d\n                    number of Element (type) selectors')
      + wellformed = property(lambda self: bool(len(self.seq)))
      + parentList = property(_getParentList, doc='DEPRECATED, see property parent instead')
  --
      - __init__(selectorText = None, parent = None, readonly = False)
      + element()
  }

  class SelectorList {
      + selectorText = property(_getSelectorText, _setSelectorText, doc='(cssutils) The textual representation of the selector for a rule set.')
      + length = property(lambda self: len(self), doc='The number of :class:`~cssutils.css.Selector` objects in the list.')
      + parentRule = property(lambda self: self._parentRule, doc='(DOM) The CSS rule that contains this SelectorList or ``None`` if this SelectorList is not attached to a CSSRule.')
      + wellformed = property(lambda self: bool(len(self.seq)))
  --
      - __init__(selectorText = None, parentRule = None, readonly = False)
      + append(newSelector)
      + appendSelector(newSelector)
  }

  class PropertyValue {
      + cssText = property(lambda self: cssutils.ser.do_css_PropertyValue(self), _setCssText, doc='A string representation of the current value.')
      + length = property(lambda self: len(self), doc='Number of values set.')
      + value = property(lambda self: cssutils.ser.do_css_PropertyValue(self, valuesOnly=True), doc='A string representation of the current value without any comments used for validation.')
  --
      - __init__(cssText = None, parent = None, readonly = False)
      + item(index)
  }

  class Value {
      + IDENT = 'IDENT'
      + STRING = 'STRING'
      + UNICODE_RANGE = 'UNICODE-RANGE'
      + URI = 'URI'
      + DIMENSION = 'DIMENSION'
      + NUMBER = 'NUMBER'
      + PERCENTAGE = 'PERCENTAGE'
      + COLOR_VALUE = 'COLOR_VALUE'
      + HASH = 'HASH'
      + FUNCTION = 'FUNCTION'
      + CALC = 'CALC'
      + VARIABLE = 'VARIABLE'
      + cssText = property(lambda self: cssutils.ser.do_css_Value(self), _setCssText, doc='String value of this value.')
      + value = property(lambda self: self._value, _setValue, doc='Actual value if possible: An int or float or else  a string')
  --
      - __init__(cssText = None, parent = None, readonly = False)
      + type()
  }

  class ColorValue {
      + type = Value.COLOR_VALUE
      + cssText = property(lambda self: cssutils.ser.do_css_ColorValue(self), _setCssText, doc='String value of this value.')
      + value = property(lambda self: cssutils.ser.do_css_CSSFunction(self, True), doc='Same as cssText but without comments.')
      + colorType = property(lambda self: self._colorType, doc='IDENT (red), HASH (#f00) or FUNCTION (rgb(255, 0, 0).')
      + name = property(_getName, doc='Name of the color if known (in ColorValue.COLORS) else None')
      + red = property(lambda self: self._red, doc='red part as integer between 0 and 255')
  --
      + type()
      + green()
      + blue()
      + alpha()
  }

  class DimensionValue {
      + cssText = property(lambda self: cssutils.ser.do_css_Value(self), _setCssText, doc='String value of this value including dimension.')
      + dimension = property(lambda self: self._dimension, doc='Dimension if a DIMENSION or PERCENTAGE value, else None')
  }

  class URIValue {
      + cssText = property(lambda self: cssutils.ser.do_css_Value(self), _setCssText, doc='String value of this value.')
      + uri = property(lambda self: self._value, _setUri, doc='Actual URL without delimiters or the empty string')
      + absoluteUri = property(absoluteUri, doc=absoluteUri.__doc__)
  --
      + absoluteUri()
  }

  class CSSFunction {
      + cssText = property(lambda self: cssutils.ser.do_css_CSSFunction(self), _setCssText, doc='String value of this value.')
      + value = property(lambda self: cssutils.ser.do_css_CSSFunction(self, True), doc='Same as cssText but without comments.')
      + type = property(lambda self: Value.FUNCTION, doc='Type is fixed to Value.FUNCTION.')
  }

  class MSValue {
      + cssText = property(lambda self: cssutils.ser.do_css_MSValue(self), _setCssText, doc='String value of this value.')
  }

  class CSSCalc {
      + cssText = property(lambda self: cssutils.ser.do_css_CSSCalc(self), _setCssText, doc='String representation of calc function.')
      + type = property(lambda self: Value.CALC, doc='Type is fixed to Value.CALC.')
  }

  class CSSVariable {
      + cssText = property(lambda self: cssutils.ser.do_css_CSSVariable(self), _setCssText, doc='String representation of variable.')
      + name = property(lambda self: self._name, doc='The name identifier of this variable referring to a value in a :class:`cssutils.css.CSSVariablesDeclaration`.')
      + type = property(lambda self: Value.VARIABLE, doc='Type is fixed to Value.VARIABLE.')
      + value = property(_getValue, doc='The resolved actual value or None.')
  --
      + fallback()
  }

}

package stylesheets {
  class MediaList {
      + length = property(lambda self: len(list(self)), doc='The number of media in the list (DOM readonly).')
      + mediaText = property(_getMediaText, _setMediaText, doc='The parsable textual representation of the media list.')
      + parentRule = property(lambda self: self._parentRule, doc='The CSSRule (e.g. an @media or @import rule this list is part of or None')
      + wellformed = property(lambda self: self._wellformed)
  --
      - __init__(mediaText = None, parentRule = None, readonly = False)
      + appendMedium(newMedium)
      + append(newMedium)
      + deleteMedium(oldMedium)
      + item(index)
  }

  class MediaQuery {
      + MEDIA_TYPES = ['all', 'braille', 'handheld', 'print', 'projection', 'speech', 'screen', 'tty', 'tv', 'embossed']
      + mediaText = property(_getMediaText, _setMediaText, doc='The parsable textual representation of the media list.')
      + mediaType = property(lambda self: self._mediaType, _setMediaType, doc='The media type of this MediaQuery (one of ``MEDIA_TYPES``) but only if it is a simple MediaType!')
      + wellformed = property(lambda self: self._wellformed)
  --
      - __init__(mediaText = None, readonly = False, _partof = False)
  }

  class StyleSheet {
      + alternate = property(lambda self: self._alternate, doc='Not used in cssutils yet.')
      + href = property(lambda self: self._href, doc='If the style sheet is a linked style sheet, the value of this attribute is its location. For inline style sheets, the value of this attribute is None. See the href attribute definition for the LINK element in HTML 4.0, and the href pseudo-attribute for the XML style sheet processing instruction.')
      + ownerNode = property(lambda self: self._ownerNode, doc='Not used in cssutils yet.')
      + parentStyleSheet = property(lambda self: self._parentStyleSheet, doc='For style sheet languages that support the concept of style sheet inclusion, this attribute represents the including style sheet, if one exists. If the style sheet is a top-level style sheet, or the style sheet language does not support inclusion, the value of this attribute is None.')
      + type = property(lambda self: self._type, doc='This specifies the style sheet language for this style sheet. The style sheet language is specified as a content type (e.g. ``text/css``). The content type is often specified in the ownerNode. Also see the type attribute definition for the LINK element in HTML 4.0, and the type pseudo-attribute for the XML style sheet processing instruction. For CSS this is always ``text/css``.')
  --
      - __init__(type = 'text/css', href = None, media = None, title = '', ownerNode = None, parentStyleSheet = None, alternate = False, disabled = None, validating = True)
  }

  class StyleSheetList {
      + length = property(lambda self: len(self), doc='The number of :class:`StyleSheet` objects in the list. The range  of valid child stylesheet indices is 0 to length-1 inclusive.')
  --
      + item(index)
  }

}

package dateutil {
  class relativedelta {
      - __init__(dt1 = None, dt2 = None, years = 0, months = 0, days = 0, leapdays = 0, weeks = 0, hours = 0, minutes = 0, seconds = 0, microseconds = 0, year = None, month = None, day = None, weekday = None, yearday = None, nlyearday = None, hour = None, minute = None, second = None, microsecond = None)
      + weeks()
      + weeks(value)
      + normalized()
  }

  class weekday {
      - __init__(wkday, n = None)
  }

  class rrulebase {
      - __init__(cache = False)
      + count()
      + before(dt, inc = False)
      + after(dt, inc = False)
      + xafter(dt, count = None, inc = False)
      + between(after, before, inc = False, count = 1)
  }

  class rrule {
      - __init__(freq, dtstart = None, interval = 1, wkst = None, count = None, until = None, bysetpos = None, bymonth = None, bymonthday = None, byyearday = None, byeaster = None, byweekno = None, byweekday = None, byhour = None, byminute = None, bysecond = None, cache = False)
      + replace()
  }

  class rruleset {
      - __init__(cache = False)
      + rrule(rrule)
      + rdate(rdate)
      + exrule(exrule)
      + exdate(exdate)
  }

  class weekday {
      - __init__(weekday, n = None)
  }

}

package parser {
  class isoparser {
      - __init__(sep = None)
      + isoparse(dt_str)
      + parse_isodate(datestr)
      + parse_isotime(timestr)
      + parse_tzstr(tzstr, zero_as_utc = True)
  }

  class parserinfo {
      + JUMP = [' ', '.', ',', ';', '-', '/', "'", 'at', 'on', 'and', 'ad', 'm', 't', 'of', 'st', 'nd', 'rd', 'th']
      + WEEKDAYS = [('Mon', 'Monday'), ('Tue', 'Tuesday'), ('Wed', 'Wednesday'), ('Thu', 'Thursday'), ('Fri', 'Friday'), ('Sat', 'Saturday'), ('Sun', 'Sunday')]
      + MONTHS = [('Jan', 'January'), ('Feb', 'February'), ('Mar', 'March'), ('Apr', 'April'), ('May', 'May'), ('Jun', 'June'), ('Jul', 'July'), ('Aug', 'August'), ('Sep', 'Sept', 'September'), ('Oct', 'October'), ('Nov', 'November'), ('Dec', 'December')]
      + HMS = [('h', 'hour', 'hours'), ('m', 'minute', 'minutes'), ('s', 'second', 'seconds')]
      + AMPM = [('am', 'a'), ('pm', 'p')]
      + UTCZONE = ['UTC', 'GMT', 'Z', 'z']
      + PERTAIN = ['of']
      + TZOFFSET = {}
  --
      - __init__(dayfirst = False, yearfirst = False)
      + jump(name)
      + weekday(name)
      + month(name)
      + hms(name)
      + ampm(name)
      + pertain(name)
      + utczone(name)
      + tzoffset(name)
      + convertyear(year, century_specified = False)
      + validate(res)
  }

  class parser {
      - __init__(info = None)
      + parse(timestr, default = None, ignoretz = False, tzinfos = None)
  }

  class ParserError {
  }

  class UnknownTimezoneWarning {
  }

  class HttpParserError {
  }

  class HttpParserCallbackError {
  }

  class HttpParserInvalidStatusError {
  }

  class HttpParserInvalidMethodError {
  }

  class HttpParserInvalidURLError {
  }

  class HttpParserUpgrade {
  }

}

package tz {
  class tzutc {
      + utcoffset(dt)
      + dst(dt)
      + tzname(dt)
      + is_ambiguous(dt)
      + fromutc(dt)
  }

  class tzoffset {
      - __init__(name, offset)
      + utcoffset(dt)
      + dst(dt)
      + tzname(dt)
      + fromutc(dt)
      + is_ambiguous(dt)
  }

  class tzlocal {
      - __init__()
      + utcoffset(dt)
      + dst(dt)
      + tzname(dt)
      + is_ambiguous(dt)
  }

  class tzfile {
      - __init__(fileobj, filename = None)
      + fromutc(dt)
      + is_ambiguous(dt, idx = None)
      + utcoffset(dt)
      + dst(dt)
      + tzname(dt)
  }

  class tzrange {
      - __init__(stdabbr, stdoffset = None, dstabbr = None, dstoffset = None, start = None, end = None)
      + transitions(year)
  }

  class tzstr {
      - __init__(s, posix_offset = False)
  }

  class tzical {
      - __init__(fileobj)
      + keys()
      + get(tzid = None)
  }

  class tzres {
      + p_wchar = ctypes.POINTER(wintypes.WCHAR)
  --
      - __init__(tzres_loc = 'tzres.dll')
      + load_name(offset)
      + name_from_string(tzname_str)
  }

  class tzwinbase {
      - __init__()
      + {static} list()
      + display()
      + transitions(year)
  }

  class tzwin {
      - __init__(name)
  }

  class tzwinlocal {
      - __init__()
  }

  class tzrangebase {
      - __init__()
      + utcoffset(dt)
      + dst(dt)
      + tzname(dt)
      + fromutc(dt)
      + is_ambiguous(dt)
  }

  class DeprecatedTzFormatWarning {
  }

}

package zoneinfo {
  class tzfile {
  }

  class ZoneInfoFile {
      - __init__(zonefile_stream = None)
      + get(name, default = None)
  }

}

package dns {
  class AsyncLibraryNotFoundError {
  }

  class Resolver {
  }

  class Policy {
      - __init__()
      + ok_to_sign(_: DNSKEY): bool
      + ok_to_validate(_: DNSKEY): bool
      + ok_to_create_ds(_: DSDigest): bool
      + ok_to_validate_ds(_: DSDigest): bool
  }

  class SimpleDeny {
      - __init__(deny_sign, deny_validate, deny_create_ds, deny_validate_ds)
      + ok_to_sign(key: DNSKEY): bool
      + ok_to_validate(key: DNSKEY): bool
      + ok_to_create_ds(algorithm: DSDigest): bool
      + ok_to_validate_ds(algorithm: DSDigest): bool
  }

  class Algorithm {
      + RSAMD5 = 1
      + DH = 2
      + DSA = 3
      + ECC = 4
      + RSASHA1 = 5
      + DSANSEC3SHA1 = 6
      + RSASHA1NSEC3SHA1 = 7
      + RSASHA256 = 8
      + RSASHA512 = 10
      + ECCGOST = 12
      + ECDSAP256SHA256 = 13
      + ECDSAP384SHA384 = 14
      + ED25519 = 15
      + ED448 = 16
      + INDIRECT = 252
      + PRIVATEDNS = 253
      + PRIVATEOID = 254
  }

  class DSDigest {
      + NULL = 0
      + SHA1 = 1
      + SHA256 = 2
      + GOST = 3
      + SHA384 = 4
  }

  class NSEC3Hash {
      + SHA1 = 1
  }

  class OptionType {
      + NSID = 3
      + DAU = 5
      + DHU = 6
      + N3U = 7
      + ECS = 8
      + EXPIRE = 9
      + COOKIE = 10
      + KEEPALIVE = 11
      + PADDING = 12
      + CHAIN = 13
      + EDE = 15
      + REPORTCHANNEL = 18
  }

  class Option {
      - __init__(otype: Union[OptionType, str])
      + to_wire(file: Optional[Any] = None): Optional[bytes]
      + to_text(): str
      + {classmethod} from_wire_parser(cls, otype: OptionType, parser: 'dns.wire.Parser'): 'Option'
  }

  class GenericOption {
      - __init__(otype: Union[OptionType, str], data: Union[bytes, str])
      + to_wire(file: Optional[Any] = None): Optional[bytes]
      + to_text(): str
      + {classmethod} from_wire_parser(cls, otype: Union[OptionType, str], parser: 'dns.wire.Parser'): Option
  }

  class ECSOption {
      - __init__(address: str, srclen: Optional[int] = None, scopelen: int = 0)
      + to_text(): str
      + {static} from_text(text: str): Option
      + to_wire(file: Optional[Any] = None): Optional[bytes]
      + {classmethod} from_wire_parser(cls, otype: Union[OptionType, str], parser: 'dns.wire.Parser'): Option
  }

  class EDECode {
      + OTHER = 0
      + UNSUPPORTED_DNSKEY_ALGORITHM = 1
      + UNSUPPORTED_DS_DIGEST_TYPE = 2
      + STALE_ANSWER = 3
      + FORGED_ANSWER = 4
      + DNSSEC_INDETERMINATE = 5
      + DNSSEC_BOGUS = 6
      + SIGNATURE_EXPIRED = 7
      + SIGNATURE_NOT_YET_VALID = 8
      + DNSKEY_MISSING = 9
      + RRSIGS_MISSING = 10
      + NO_ZONE_KEY_BIT_SET = 11
      + NSEC_MISSING = 12
      + CACHED_ERROR = 13
      + NOT_READY = 14
      + BLOCKED = 15
      + CENSORED = 16
      + FILTERED = 17
      + PROHIBITED = 18
      + STALE_NXDOMAIN_ANSWER = 19
      + NOT_AUTHORITATIVE = 20
      + NOT_SUPPORTED = 21
      + NO_REACHABLE_AUTHORITY = 22
      + NETWORK_ERROR = 23
      + INVALID_DATA = 24
  }

  class EDEOption {
      - __init__(code: Union[EDECode, str], text: Optional[str] = None)
      + to_text(): str
      + to_wire(file: Optional[Any] = None): Optional[bytes]
      + {classmethod} from_wire_parser(cls, otype: Union[OptionType, str], parser: 'dns.wire.Parser'): Option
  }

  class NSIDOption {
      - __init__(nsid: bytes)
      + to_wire(file = None): Optional[bytes]
      + to_text(): str
      + {classmethod} from_wire_parser(cls, otype: Union[OptionType, str], parser: dns.wire.Parser): Option
  }

  class CookieOption {
      - __init__(client: bytes, server: bytes)
      + to_wire(file = None): Optional[bytes]
      + to_text(): str
      + {classmethod} from_wire_parser(cls, otype: Union[OptionType, str], parser: dns.wire.Parser): Option
  }

  class ReportChannelOption {
      - __init__(agent_domain: dns.name.Name)
      + to_wire(file = None): Optional[bytes]
      + to_text(): str
      + {classmethod} from_wire_parser(cls, otype: Union[OptionType, str], parser: dns.wire.Parser): Option
  }

  class EntropyPool {
      - __init__(seed: Optional[bytes] = None)
      + stir(entropy: bytes)
      + random_8(): int
      + random_16(): int
      + random_32(): int
      + random_between(first: int, last: int): int
  }

  class IntEnum {
      + {classmethod} from_text(cls: Type[TIntEnum], text: str): TIntEnum
      + {classmethod} to_text(cls: Type[TIntEnum], value: int): str
      + {classmethod} make(cls: Type[TIntEnum], value: Union[int, str]): TIntEnum
  }

  class DNSException {
      + msg: Optional[str] = None
      + supp_kwargs: Set[str] = set()
      + fmt: Optional[str] = None
  --
      - __init__()
  }

  class FormError {
  }

  class SyntaxError {
  }

  class UnexpectedEnd {
  }

  class TooBig {
  }

  class Timeout {
      + supp_kwargs = {'timeout'}
      + fmt = 'The DNS operation timed out after {timeout:.3f} seconds'
  --
      - __init__()
  }

  class UnsupportedAlgorithm {
  }

  class AlgorithmKeyMismatch {
  }

  class ValidationFailure {
  }

  class DeniedByPolicy {
  }

  class ExceptionWrapper {
      - __init__(exception_class)
  }

  class Flag {
      + QR = 32768
      + AA = 1024
      + TC = 512
      + RD = 256
      + RA = 128
      + AD = 32
      + CD = 16
  }

  class EDNSFlag {
      + DO = 32768
  }

  class Dict {
      - __init__(dictionary, no_copy: bool = False, map_factory: Callable[[], collections.abc.MutableMapping] = dict)
  }

  class ShortHeader {
  }

  class TrailingJunk {
  }

  class UnknownHeaderField {
  }

  class BadEDNS {
  }

  class BadTSIG {
  }

  class UnknownTSIGKey {
  }

  class Truncated {
      + supp_kwargs = {'message'}
  --
      - __init__()
      + message()
  }

  class NotQueryResponse {
  }

  class ChainTooLong {
  }

  class AnswerForNXDOMAIN {
  }

  class NoPreviousName {
  }

  class MessageSection {
      + QUESTION = 0
      + ANSWER = 1
      + AUTHORITY = 2
      + ADDITIONAL = 3
  }

  class MessageError {
      - __init__(exception: Exception, offset: int)
  }

  class Message {
      - __init__(id: Optional[int] = None)
      + question(): List[dns.rrset.RRset]
      + question(v)
      + answer(): List[dns.rrset.RRset]
      + answer(v)
      + authority(): List[dns.rrset.RRset]
      + authority(v)
      + additional(): List[dns.rrset.RRset]
      + additional(v)
      + to_text(origin: Optional[dns.name.Name] = None, relativize: bool = True): str
      + is_response(other: 'Message'): bool
      + section_number(section: List[dns.rrset.RRset]): int
      + section_from_number(number: int): List[dns.rrset.RRset]
      + find_rrset(section: SectionType, name: dns.name.Name, rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE, deleting: Optional[dns.rdataclass.RdataClass] = None, create: bool = False, force_unique: bool = False, idna_codec: Optional[dns.name.IDNACodec] = None): dns.rrset.RRset
      + get_rrset(section: SectionType, name: dns.name.Name, rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE, deleting: Optional[dns.rdataclass.RdataClass] = None, create: bool = False, force_unique: bool = False, idna_codec: Optional[dns.name.IDNACodec] = None): Optional[dns.rrset.RRset]
      + section_count(section: SectionType): int
      + to_wire(origin: Optional[dns.name.Name] = None, max_size: int = 0, multi: bool = False, tsig_ctx: Optional[Any] = None, prepend_length: bool = False, prefer_truncation: bool = False): bytes
      + use_tsig(keyring, keyname: Optional[Union[dns.name.Name, str]] = None, fudge: int = 300, original_id: Optional[int] = None, tsig_error: int = 0, other_data: bytes = b'', algorithm: Union[dns.name.Name, str] = dns.tsig.default_algorithm)
      + keyname(): Optional[dns.name.Name]
      + keyalgorithm(): Optional[dns.name.Name]
      + mac(): Optional[bytes]
      + tsig_error(): Optional[int]
      + had_tsig(): bool
      + use_edns(edns: Optional[Union[int, bool]] = 0, ednsflags: int = 0, payload: int = DEFAULT_EDNS_PAYLOAD, request_payload: Optional[int] = None, options: Optional[List[dns.edns.Option]] = None, pad: int = 0)
      + edns(): int
      + ednsflags(): int
      + ednsflags(v)
      + payload(): int
      + options(): Tuple
      + want_dnssec(wanted: bool = True)
      + rcode(): dns.rcode.Rcode
      + set_rcode(rcode: dns.rcode.Rcode)
      + opcode(): dns.opcode.Opcode
      + set_opcode(opcode: dns.opcode.Opcode)
      + get_options(otype: dns.edns.OptionType): List[dns.edns.Option]
      + extended_errors(): List[dns.edns.EDEOption]
  }

  class ChainingResult {
      - __init__(canonical_name: dns.name.Name, answer: Optional[dns.rrset.RRset], minimum_ttl: int, cnames: List[dns.rrset.RRset])
  }

  class QueryMessage {
      + resolve_chaining(): ChainingResult
      + canonical_name(): dns.name.Name
  }

  class CopyMode {
      + NOTHING = 0
      + QUESTION = 1
      + EVERYTHING = 2
  }

  class NameRelation {
      + NONE = 0
      + SUPERDOMAIN = 1
      + SUBDOMAIN = 2
      + EQUAL = 3
      + COMMONANCESTOR = 4
  }

  class EmptyLabel {
  }

  class BadEscape {
  }

  class BadPointer {
  }

  class BadLabelType {
  }

  class NeedAbsoluteNameOrOrigin {
  }

  class NameTooLong {
  }

  class LabelTooLong {
  }

  class AbsoluteConcatenation {
  }

  class NoParent {
  }

  class NoIDNA2008 {
  }

  class IDNAException {
      + supp_kwargs = {'idna_exception'}
      + fmt = 'IDNA processing exception: {idna_exception}'
  --
      - __init__()
  }

  class NeedSubdomainOfOrigin {
  }

  class IDNACodec {
      - __init__()
      + is_idna(label: bytes): bool
      + encode(label: str): bytes
      + decode(label: bytes): str
  }

  class IDNA2003Codec {
      - __init__(strict_decode: bool = False)
      + encode(label: str): bytes
      + decode(label: bytes): str
  }

  class IDNA2008Codec {
      - __init__(uts_46: bool = False, transitional: bool = False, allow_pure_ascii: bool = False, strict_decode: bool = False)
      + encode(label: str): bytes
      + decode(label: bytes): str
  }

  class Name {
      - __init__(labels: Iterable[Union[bytes, str]])
      + is_absolute(): bool
      + is_wild(): bool
      + fullcompare(other: 'Name'): Tuple[NameRelation, int, int]
      + is_subdomain(other: 'Name'): bool
      + is_superdomain(other: 'Name'): bool
      + canonicalize(): 'Name'
      + to_text(omit_final_dot: bool = False): str
      + to_unicode(omit_final_dot: bool = False, idna_codec: Optional[IDNACodec] = None): str
      + to_digestable(origin: Optional['Name'] = None): bytes
      + to_wire(file: Optional[Any] = None, compress: Optional[CompressType] = None, origin: Optional['Name'] = None, canonicalize: bool = False): Optional[bytes]
      + split(depth: int): Tuple['Name', 'Name']
      + concatenate(other: 'Name'): 'Name'
      + relativize(origin: 'Name'): 'Name'
      + derelativize(origin: 'Name'): 'Name'
      + choose_relativity(origin: Optional['Name'] = None, relativize: bool = True): 'Name'
      + parent(): 'Name'
      + predecessor(origin: 'Name', prefix_ok: bool = True): 'Name'
      + successor(origin: 'Name', prefix_ok: bool = True): 'Name'
  }

  class NameDict {
      - __init__()
      + has_key(key)
      + get_deepest_match(name)
  }

  class Nameserver {
      - __init__()
      + kind(): str
      + is_always_max_size(): bool
      + answer_nameserver(): str
      + answer_port(): int
      + query(request: dns.message.QueryMessage, timeout: float, source: Optional[str], source_port: int, max_size: bool, one_rr_per_rrset: bool = False, ignore_trailing: bool = False): dns.message.Message
  }

  class AddressAndPortNameserver {
      - __init__(address: str, port: int)
      + kind(): str
      + is_always_max_size(): bool
      + answer_nameserver(): str
      + answer_port(): int
  }

  class Do53Nameserver {
      - __init__(address: str, port: int = 53)
      + kind()
      + query(request: dns.message.QueryMessage, timeout: float, source: Optional[str], source_port: int, max_size: bool, one_rr_per_rrset: bool = False, ignore_trailing: bool = False): dns.message.Message
  }

  class DoHNameserver {
      - __init__(url: str, bootstrap_address: Optional[str] = None, verify: Union[bool, str] = True, want_get: bool = False, http_version: dns.query.HTTPVersion = dns.query.HTTPVersion.DEFAULT)
      + kind()
      + is_always_max_size(): bool
      + answer_nameserver(): str
      + answer_port(): int
      + query(request: dns.message.QueryMessage, timeout: float, source: Optional[str], source_port: int, max_size: bool = False, one_rr_per_rrset: bool = False, ignore_trailing: bool = False): dns.message.Message
  }

  class DoTNameserver {
      - __init__(address: str, port: int = 853, hostname: Optional[str] = None, verify: Union[bool, str] = True)
      + kind()
      + query(request: dns.message.QueryMessage, timeout: float, source: Optional[str], source_port: int, max_size: bool = False, one_rr_per_rrset: bool = False, ignore_trailing: bool = False): dns.message.Message
  }

  class DoQNameserver {
      - __init__(address: str, port: int = 853, verify: Union[bool, str] = True, server_hostname: Optional[str] = None)
      + kind()
      + query(request: dns.message.QueryMessage, timeout: float, source: Optional[str], source_port: int, max_size: bool = False, one_rr_per_rrset: bool = False, ignore_trailing: bool = False): dns.message.Message
  }

  class NodeKind {
      + REGULAR = 0
      + NEUTRAL = 1
      + CNAME = 2
  --
      + {classmethod} classify(cls, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType): 'NodeKind'
      + {classmethod} classify_rdataset(cls, rdataset: dns.rdataset.Rdataset): 'NodeKind'
  }

  class Node {
      - __init__()
      + to_text(name: dns.name.Name): str
      + find_rdataset(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE, create: bool = False): dns.rdataset.Rdataset
      + get_rdataset(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE, create: bool = False): Optional[dns.rdataset.Rdataset]
      + delete_rdataset(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE)
      + replace_rdataset(replacement: dns.rdataset.Rdataset)
      + classify(): NodeKind
      + is_immutable(): bool
  }

  class ImmutableNode {
      - __init__(node)
      + find_rdataset(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE, create: bool = False): dns.rdataset.Rdataset
      + get_rdataset(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE, create: bool = False): Optional[dns.rdataset.Rdataset]
      + delete_rdataset(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE)
      + replace_rdataset(replacement: dns.rdataset.Rdataset)
      + is_immutable(): bool
  }

  class Opcode {
      + QUERY = 0
      + IQUERY = 1
      + STATUS = 2
      + NOTIFY = 4
      + UPDATE = 5
  }

  class UnknownOpcode {
  }

  class ssl {
      + CERT_NONE = 0
  --
      + {classmethod} create_default_context(cls)
  }

  class WantReadException {
  }

  class WantWriteException {
  }

  class SSLContext {
  }

  class SSLSocket {
  }

  class UnexpectedSource {
  }

  class BadResponse {
  }

  class NoDOH {
  }

  class NoDOQ {
  }

  class HTTPVersion {
      + DEFAULT = 0
      + HTTP_1 = 1
      + H1 = 1
      + HTTP_2 = 2
      + H2 = 2
      + HTTP_3 = 3
      + H3 = 3
  }

  class UDPMode {
      + NEVER = 0
      + TRY_FIRST = 1
      + ONLY = 2
  }

  class Rcode {
      + NOERROR = 0
      + FORMERR = 1
      + SERVFAIL = 2
      + NXDOMAIN = 3
      + NOTIMP = 4
      + REFUSED = 5
      + YXDOMAIN = 6
      + YXRRSET = 7
      + NXRRSET = 8
      + NOTAUTH = 9
      + NOTZONE = 10
      + DSOTYPENI = 11
      + BADVERS = 16
      + BADSIG = 16
      + BADKEY = 17
      + BADTIME = 18
      + BADMODE = 19
      + BADNAME = 20
      + BADALG = 21
      + BADTRUNC = 22
      + BADCOOKIE = 23
  }

  class UnknownRcode {
  }

  class NoRelativeRdataOrdering {
  }

  class Rdata {
      - __init__(rdclass, rdtype)
      + covers(): dns.rdatatype.RdataType
      + extended_rdatatype(): int
      + to_text(origin: Optional[dns.name.Name] = None, relativize: bool = True): str
      + to_wire(file: Optional[Any] = None, compress: Optional[dns.name.CompressType] = None, origin: Optional[dns.name.Name] = None, canonicalize: bool = False): Optional[bytes]
      + to_generic(origin: Optional[dns.name.Name] = None): 'dns.rdata.GenericRdata'
      + to_digestable(origin: Optional[dns.name.Name] = None): bytes
      + {classmethod} from_text(cls, rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, tok: dns.tokenizer.Tokenizer, origin: Optional[dns.name.Name] = None, relativize: bool = True, relativize_to: Optional[dns.name.Name] = None): 'Rdata'
      + {classmethod} from_wire_parser(cls, rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, parser: dns.wire.Parser, origin: Optional[dns.name.Name] = None): 'Rdata'
      + replace(): 'Rdata'
  }

  class GenericRdata {
      - __init__(rdclass, rdtype, data)
      + to_text(origin: Optional[dns.name.Name] = None, relativize: bool = True): str
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class RdatatypeExists {
      + supp_kwargs = {'rdclass', 'rdtype'}
      + fmt = 'The rdata type with class {rdclass:d} and rdtype {rdtype:d} ' + 'already exists.'
  }

  class RdataClass {
      + RESERVED0 = 0
      + IN = 1
      + INTERNET = IN
      + CH = 3
      + CHAOS = CH
      + HS = 4
      + HESIOD = HS
      + NONE = 254
      + ANY = 255
  }

  class UnknownRdataclass {
  }

  class DifferingCovers {
  }

  class IncompatibleTypes {
  }

  class Rdataset {
      - __init__(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE, ttl: int = 0)
      + update_ttl(ttl: int)
      + add(rd: dns.rdata.Rdata, ttl: Optional[int] = None)
      + union_update(other)
      + intersection_update(other)
      + update(other)
      + to_text(name: Optional[dns.name.Name] = None, origin: Optional[dns.name.Name] = None, relativize: bool = True, override_rdclass: Optional[dns.rdataclass.RdataClass] = None, want_comments: bool = False): str
      + to_wire(name: dns.name.Name, file, compress: Optional[dns.name.CompressType] = None, origin: Optional[dns.name.Name] = None, override_rdclass: Optional[dns.rdataclass.RdataClass] = None, want_shuffle: bool = True): int
      + match(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType): bool
      + processing_order(): List[dns.rdata.Rdata]
  }

  class ImmutableRdataset {
      - __init__(rdataset: Rdataset)
      + update_ttl(ttl)
      + add(rd, ttl = None)
      + union_update(other)
      + intersection_update(other)
      + update(other)
      + clear()
      + copy()
      + union(other)
      + intersection(other)
      + difference(other)
      + symmetric_difference(other)
  }

  class RdataType {
      + TYPE0 = 0
      + NONE = 0
      + A = 1
      + NS = 2
      + MD = 3
      + MF = 4
      + CNAME = 5
      + SOA = 6
      + MB = 7
      + MG = 8
      + MR = 9
      + NULL = 10
      + WKS = 11
      + PTR = 12
      + HINFO = 13
      + MINFO = 14
      + MX = 15
      + TXT = 16
      + RP = 17
      + AFSDB = 18
      + X25 = 19
      + ISDN = 20
      + RT = 21
      + NSAP = 22
      + NSAP_PTR = 23
      + SIG = 24
      + KEY = 25
      + PX = 26
      + GPOS = 27
      + AAAA = 28
      + LOC = 29
      + NXT = 30
      + SRV = 33
      + NAPTR = 35
      + KX = 36
      + CERT = 37
      + A6 = 38
      + DNAME = 39
      + OPT = 41
      + APL = 42
      + DS = 43
      + SSHFP = 44
      + IPSECKEY = 45
      + RRSIG = 46
      + NSEC = 47
      + DNSKEY = 48
      + DHCID = 49
      + NSEC3 = 50
      + NSEC3PARAM = 51
      + TLSA = 52
      + SMIMEA = 53
      + HIP = 55
      + NINFO = 56
      + CDS = 59
      + CDNSKEY = 60
      + OPENPGPKEY = 61
      + CSYNC = 62
      + ZONEMD = 63
      + SVCB = 64
      + HTTPS = 65
      + SPF = 99
      + UNSPEC = 103
      + NID = 104
      + L32 = 105
      + L64 = 106
      + LP = 107
      + EUI48 = 108
      + EUI64 = 109
      + TKEY = 249
      + TSIG = 250
      + IXFR = 251
      + AXFR = 252
      + MAILB = 253
      + MAILA = 254
      + ANY = 255
      + URI = 256
      + CAA = 257
      + AVC = 258
      + AMTRELAY = 260
      + RESINFO = 261
      + WALLET = 262
      + TA = 32768
      + DLV = 32769
  }

  class UnknownRdatatype {
  }

  class Renderer {
      - __init__(id = None, flags = 0, max_size = 65535, origin = None)
      + add_question(qname, rdtype, rdclass = dns.rdataclass.IN)
      + add_rrset(section, rrset)
      + add_rdataset(section, name, rdataset)
      + add_opt(opt, pad = 0, opt_size = 0, tsig_size = 0)
      + add_edns(edns, ednsflags, payload, options = None)
      + add_tsig(keyname, secret, fudge, id, tsig_error, other_data, request_mac, algorithm = dns.tsig.default_algorithm)
      + add_multi_tsig(ctx, keyname, secret, fudge, id, tsig_error, other_data, request_mac, algorithm = dns.tsig.default_algorithm)
      + write_header()
      + get_wire()
      + reserve(size: int)
      + release_reserved()
  }

  class NXDOMAIN {
      + supp_kwargs = {'qnames', 'responses'}
      + fmt = None
  --
      - __init__()
      + canonical_name()
      + qnames()
      + responses()
      + response(qname)
  }

  class YXDOMAIN {
  }

  class LifetimeTimeout {
      + msg = 'The resolution lifetime expired.'
      + fmt = f'{msg[:-1]} after {{timeout:.3f}} seconds: {{errors}}'
      + supp_kwargs = {'timeout', 'errors'}
  --
      - __init__()
  }

  class NoAnswer {
      + fmt = 'The DNS response does not contain an answer to the question: {query}'
      + supp_kwargs = {'response'}
  --
      - __init__()
      + response()
  }

  class NoNameservers {
      + msg = 'All nameservers failed to answer the query.'
      + fmt = f'{msg[:-1]} {{query}}: {{errors}}'
      + supp_kwargs = {'request', 'errors'}
  --
      - __init__()
  }

  class NotAbsolute {
  }

  class NoRootSOA {
  }

  class NoMetaqueries {
  }

  class NoResolverConfiguration {
  }

  class Answer {
      - __init__(qname: dns.name.Name, rdtype: dns.rdatatype.RdataType, rdclass: dns.rdataclass.RdataClass, response: dns.message.QueryMessage, nameserver: Optional[str] = None, port: Optional[int] = None)
  }

  class Answers {
  }

  class HostAnswers {
      + {classmethod} make(cls, v6: Optional[Answer] = None, v4: Optional[Answer] = None, add_empty: bool = True): 'HostAnswers'
      + addresses_and_families(family: int = socket.AF_UNSPEC): Iterator[Tuple[str, int]]
      + addresses(family: int = socket.AF_UNSPEC): Iterator[str]
      + canonical_name(): dns.name.Name
  }

  class CacheStatistics {
      - __init__(hits: int = 0, misses: int = 0)
      + reset()
      + clone(): 'CacheStatistics'
  }

  class CacheBase {
      - __init__()
      + reset_statistics()
      + hits(): int
      + misses(): int
      + get_statistics_snapshot(): CacheStatistics
  }

  class Cache {
      - __init__(cleaning_interval: float = 300.0)
      + get(key: CacheKey): Optional[Answer]
      + put(key: CacheKey, value: Answer)
      + flush(key: Optional[CacheKey] = None)
  }

  class LRUCacheNode {
      - __init__(key, value)
      + link_after(node: 'LRUCacheNode')
      + unlink()
  }

  class LRUCache {
      - __init__(max_size: int = 100000)
      + set_max_size(max_size: int)
      + get(key: CacheKey): Optional[Answer]
      + get_hits_for_key(key: CacheKey): int
      + put(key: CacheKey, value: Answer)
      + flush(key: Optional[CacheKey] = None)
  }

  class BaseResolver {
      + domain: dns.name.Name
      + nameserver_ports: Dict[str, int]
      + port: int
      + search: List[dns.name.Name]
      + use_search_by_default: bool
      + timeout: float
      + lifetime: float
      + keyring: Optional[Any]
      + keyname: Optional[Union[dns.name.Name, str]]
      + keyalgorithm: Union[dns.name.Name, str]
      + edns: int
      + ednsflags: int
      + ednsoptions: Optional[List[dns.edns.Option]]
      + payload: int
      + cache
      + flags: Optional[int]
      + retry_servfail: bool
      + rotate: bool
      + ndots: Optional[int]
  --
      - __init__(filename: str = '/etc/resolv.conf', configure: bool = True)
      + reset()
      + read_resolv_conf(f)
      + read_registry()
      + use_tsig(keyring, keyname: Optional[Union[dns.name.Name, str]] = None, algorithm: Union[dns.name.Name, str] = dns.tsig.default_algorithm)
      + use_edns(edns: Optional[Union[int, bool]] = 0, ednsflags: int = 0, payload: int = dns.message.DEFAULT_EDNS_PAYLOAD, options: Optional[List[dns.edns.Option]] = None)
      + set_flags(flags: int)
      + nameservers(): Sequence[Union[str, dns.nameserver.Nameserver]]
      + nameservers(nameservers: Sequence[Union[str, dns.nameserver.Nameserver]])
  }

  class Resolver {
      + resolve(qname: Union[dns.name.Name, str], rdtype: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.A, rdclass: Union[dns.rdataclass.RdataClass, str] = dns.rdataclass.IN, tcp: bool = False, source: Optional[str] = None, raise_on_no_answer: bool = True, source_port: int = 0, lifetime: Optional[float] = None, search: Optional[bool] = None): Answer
      + query(qname: Union[dns.name.Name, str], rdtype: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.A, rdclass: Union[dns.rdataclass.RdataClass, str] = dns.rdataclass.IN, tcp: bool = False, source: Optional[str] = None, raise_on_no_answer: bool = True, source_port: int = 0, lifetime: Optional[float] = None): Answer
      + resolve_address(ipaddr: str): Answer
      + resolve_name(name: Union[dns.name.Name, str], family: int = socket.AF_UNSPEC): HostAnswers
      + canonical_name(name: Union[dns.name.Name, str]): dns.name.Name
      + try_ddr(lifetime: float = 5.0)
  }

  class RRset {
      - __init__(name: dns.name.Name, rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE, deleting: Optional[dns.rdataclass.RdataClass] = None)
      + match(): bool
      + full_match(name: dns.name.Name, rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType, deleting: Optional[dns.rdataclass.RdataClass] = None): bool
      + to_text(origin: Optional[dns.name.Name] = None, relativize: bool = True): str
      + to_wire(file, compress: Optional[dns.name.CompressType] = None, origin: Optional[dns.name.Name] = None): int
      + to_rdataset(): dns.rdataset.Rdataset
  }

  class Serial {
      - __init__(value: int, bits: int = 32)
  }

  class Set {
      - __init__(items = None)
      + add(item)
      + remove(item)
      + discard(item)
      + pop()
      + copy()
      + union_update(other)
      + intersection_update(other)
      + difference_update(other)
      + symmetric_difference_update(other)
      + union(other)
      + intersection(other)
      + difference(other)
      + symmetric_difference(other)
      + update(other)
      + clear()
      + issubset(other)
      + issuperset(other)
      + isdisjoint(other)
  }

  class UngetBufferFull {
  }

  class Token {
      - __init__(ttype: int, value = '', has_escape: bool = False, comment: Optional[str] = None)
      + is_eof(): bool
      + is_eol(): bool
      + is_whitespace(): bool
      + is_identifier(): bool
      + is_quoted_string(): bool
      + is_comment(): bool
      + is_delimiter(): bool
      + is_eol_or_eof(): bool
      + unescape(): 'Token'
      + unescape_to_bytes(): 'Token'
  }

  class Tokenizer {
      - __init__(f = sys.stdin, filename: Optional[str] = None, idna_codec: Optional[dns.name.IDNACodec] = None)
      + where(): Tuple[str, int]
      + skip_whitespace(): int
      + get(want_leading: bool = False, want_comment: bool = False): Token
      + unget(token: Token)
      + next()
      + get_int(base: int = 10): int
      + get_uint8(): int
      + get_uint16(base: int = 10): int
      + get_uint32(base: int = 10): int
      + get_uint48(base: int = 10): int
      + get_string(max_length: Optional[int] = None): str
      + get_identifier(): str
      + get_remaining(max_tokens: Optional[int] = None): List[Token]
      + concatenate_remaining_identifiers(allow_empty: bool = False): str
      + as_name(token: Token, origin: Optional[dns.name.Name] = None, relativize: bool = False, relativize_to: Optional[dns.name.Name] = None): dns.name.Name
      + get_name(origin: Optional[dns.name.Name] = None, relativize: bool = False, relativize_to: Optional[dns.name.Name] = None): dns.name.Name
      + get_eol_as_token(): Token
      + get_eol(): str
      + get_ttl(): int
  }

  class TransactionManager {
      + reader(): 'Transaction'
      + writer(replacement: bool = False): 'Transaction'
      + origin_information(): Tuple[Optional[dns.name.Name], bool, Optional[dns.name.Name]]
      + get_class(): dns.rdataclass.RdataClass
      + from_wire_origin(): Optional[dns.name.Name]
  }

  class DeleteNotExact {
  }

  class ReadOnly {
  }

  class AlreadyEnded {
  }

  class Transaction {
      - __init__(manager: TransactionManager, replacement: bool = False, read_only: bool = False)
      + get(name: Optional[Union[dns.name.Name, str]], rdtype: Union[dns.rdatatype.RdataType, str], covers: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.NONE): dns.rdataset.Rdataset
      + get_node(name: dns.name.Name): Optional[dns.node.Node]
      + add()
      + replace()
      + delete()
      + delete_exact()
      + name_exists(name: Union[dns.name.Name, str]): bool
      + update_serial(value: int = 1, relative: bool = True, name: dns.name.Name = dns.name.empty)
      + changed(): bool
      + commit()
      + rollback()
      + check_put_rdataset(check: CheckPutRdatasetType)
      + check_delete_rdataset(check: CheckDeleteRdatasetType)
      + check_delete_name(check: CheckDeleteNameType)
      + iterate_rdatasets(): Iterator[Tuple[dns.name.Name, dns.rdataset.Rdataset]]
      + iterate_names(): Iterator[dns.name.Name]
  }

  class BadTime {
  }

  class BadSignature {
  }

  class BadKey {
  }

  class BadAlgorithm {
  }

  class PeerError {
  }

  class PeerBadKey {
  }

  class PeerBadSignature {
  }

  class PeerBadTime {
  }

  class PeerBadTruncation {
  }

  class GSSTSig {
      - __init__(gssapi_context)
      + update(data)
      + sign()
      + verify(expected)
  }

  class GSSTSigAdapter {
      - __init__(keyring)
      + {classmethod} parse_tkey_and_step(cls, key, message, keyname)
  }

  class HMACTSig {
      - __init__(key, algorithm)
      + update(data)
      + sign()
      + verify(expected)
  }

  class Key {
      - __init__(name, secret, algorithm = default_algorithm)
  }

  class BadTTL {
  }

  class UpdateSection {
      + ZONE = 0
      + PREREQ = 1
      + UPDATE = 2
      + ADDITIONAL = 3
  }

  class UpdateMessage {
      - __init__(zone: Optional[Union[dns.name.Name, str]] = None, rdclass: dns.rdataclass.RdataClass = dns.rdataclass.IN, keyring: Optional[Any] = None, keyname: Optional[dns.name.Name] = None, keyalgorithm: Union[dns.name.Name, str] = dns.tsig.default_algorithm, id: Optional[int] = None)
      + zone(): List[dns.rrset.RRset]
      + zone(v)
      + prerequisite(): List[dns.rrset.RRset]
      + prerequisite(v)
      + update(): List[dns.rrset.RRset]
      + update(v)
      + add(name: Union[dns.name.Name, str])
      + delete(name: Union[dns.name.Name, str])
      + replace(name: Union[dns.name.Name, str])
      + present(name: Union[dns.name.Name, str])
      + absent(name: Union[dns.name.Name, str], rdtype: Optional[Union[dns.rdatatype.RdataType, str]] = None)
  }

  class UseTransaction {
  }

  class Zone {
      + node_factory = Node
  --
      - __init__(origin: Optional[Union[dns.name.Name, str]], rdclass: dns.rdataclass.RdataClass = dns.rdataclass.IN, relativize: bool = True, pruning_policy: Optional[Callable[['Zone', Version], Optional[bool]]] = None)
      + reader(id: Optional[int] = None, serial: Optional[int] = None): Transaction
      + writer(replacement: bool = False): Transaction
      + set_max_versions(max_versions: Optional[int])
      + set_pruning_policy(policy: Optional[Callable[['Zone', Version], Optional[bool]]])
      + find_node(name: Union[dns.name.Name, str], create: bool = False): dns.node.Node
      + delete_node(name: Union[dns.name.Name, str])
      + find_rdataset(name: Union[dns.name.Name, str], rdtype: Union[dns.rdatatype.RdataType, str], covers: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.NONE, create: bool = False): dns.rdataset.Rdataset
      + get_rdataset(name: Union[dns.name.Name, str], rdtype: Union[dns.rdatatype.RdataType, str], covers: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.NONE, create: bool = False): Optional[dns.rdataset.Rdataset]
      + delete_rdataset(name: Union[dns.name.Name, str], rdtype: Union[dns.rdatatype.RdataType, str], covers: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.NONE)
      + replace_rdataset(name: Union[dns.name.Name, str], replacement: dns.rdataset.Rdataset)
  }

  class DnsInfo {
      - __init__()
  }

  class Parser {
      - __init__(wire: bytes, current: int = 0)
      + remaining(): int
      + get_bytes(size: int): bytes
      + get_counted_bytes(length_size: int = 1): bytes
      + get_remaining(): bytes
      + get_uint8(): int
      + get_uint16(): int
      + get_uint32(): int
      + get_uint48(): int
      + get_struct(format: str): Tuple
      + get_name(origin: Optional['dns.name.Name'] = None): 'dns.name.Name'
      + seek(where: int)
      + restrict_to(size: int): Iterator
      + restore_furthest(): Iterator
  }

  class TransferError {
      - __init__(rcode)
  }

  class SerialWentBackwards {
  }

  class UseTCP {
  }

  class Inbound {
      - __init__(txn_manager: dns.transaction.TransactionManager, rdtype: dns.rdatatype.RdataType = dns.rdatatype.AXFR, serial: Optional[int] = None, is_udp: bool = False)
      + process_message(message: dns.message.Message): bool
  }

  class BadZone {
  }

  class NoSOA {
  }

  class NoNS {
  }

  class UnknownOrigin {
  }

  class UnsupportedDigestScheme {
  }

  class UnsupportedDigestHashAlgorithm {
  }

  class NoDigest {
  }

  class DigestVerificationFailure {
  }

  class Zone {
      + node_factory: Callable[[], dns.node.Node] = dns.node.Node
      + map_factory: Callable[[], MutableMapping[dns.name.Name, dns.node.Node]] = dict
      + writable_version_factory: Optional[Callable[[], 'WritableVersion']] = None
      + immutable_version_factory: Optional[Callable[[], 'ImmutableVersion']] = None
  --
      - __init__(origin: Optional[Union[dns.name.Name, str]], rdclass: dns.rdataclass.RdataClass = dns.rdataclass.IN, relativize: bool = True)
      + keys()
      + values()
      + items()
      + get(key)
      + find_node(name: Union[dns.name.Name, str], create: bool = False): dns.node.Node
      + get_node(name: Union[dns.name.Name, str], create: bool = False): Optional[dns.node.Node]
      + delete_node(name: Union[dns.name.Name, str])
      + find_rdataset(name: Union[dns.name.Name, str], rdtype: Union[dns.rdatatype.RdataType, str], covers: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.NONE, create: bool = False): dns.rdataset.Rdataset
      + get_rdataset(name: Union[dns.name.Name, str], rdtype: Union[dns.rdatatype.RdataType, str], covers: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.NONE, create: bool = False): Optional[dns.rdataset.Rdataset]
      + delete_rdataset(name: Union[dns.name.Name, str], rdtype: Union[dns.rdatatype.RdataType, str], covers: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.NONE)
      + replace_rdataset(name: Union[dns.name.Name, str], replacement: dns.rdataset.Rdataset)
      + find_rrset(name: Union[dns.name.Name, str], rdtype: Union[dns.rdatatype.RdataType, str], covers: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.NONE): dns.rrset.RRset
      + get_rrset(name: Union[dns.name.Name, str], rdtype: Union[dns.rdatatype.RdataType, str], covers: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.NONE): Optional[dns.rrset.RRset]
      + iterate_rdatasets(rdtype: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.ANY, covers: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.NONE): Iterator[Tuple[dns.name.Name, dns.rdataset.Rdataset]]
      + iterate_rdatas(rdtype: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.ANY, covers: Union[dns.rdatatype.RdataType, str] = dns.rdatatype.NONE): Iterator[Tuple[dns.name.Name, int, dns.rdata.Rdata]]
      + to_file(f, sorted: bool = True, relativize: bool = True, nl: Optional[str] = None, want_comments: bool = False, want_origin: bool = False)
      + to_text(sorted: bool = True, relativize: bool = True, nl: Optional[str] = None, want_comments: bool = False, want_origin: bool = False): str
      + check_origin()
      + get_soa(txn: Optional[dns.transaction.Transaction] = None): dns.rdtypes.ANY.SOA.SOA
      + compute_digest(hash_algorithm: DigestHashAlgorithm, scheme: DigestScheme = DigestScheme.SIMPLE): dns.rdtypes.ANY.ZONEMD.ZONEMD
      + verify_digest(zonemd: Optional[dns.rdtypes.ANY.ZONEMD.ZONEMD] = None)
      + reader(): 'Transaction'
      + writer(replacement: bool = False): 'Transaction'
      + origin_information(): Tuple[Optional[dns.name.Name], bool, Optional[dns.name.Name]]
      + get_class()
  }

  class VersionedNode {
      - __init__()
  }

  class ImmutableVersionedNode {
      - __init__(node)
      + find_rdataset(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE, create: bool = False): dns.rdataset.Rdataset
      + get_rdataset(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE, create: bool = False): Optional[dns.rdataset.Rdataset]
      + delete_rdataset(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType = dns.rdatatype.NONE)
      + replace_rdataset(replacement: dns.rdataset.Rdataset)
      + is_immutable(): bool
  }

  class Version {
      - __init__(zone: Zone, id: int, nodes: Optional[MutableMapping[dns.name.Name, dns.node.Node]] = None, origin: Optional[dns.name.Name] = None)
      + get_node(name: dns.name.Name): Optional[dns.node.Node]
      + get_rdataset(name: dns.name.Name, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType): Optional[dns.rdataset.Rdataset]
      + keys()
      + items()
  }

  class WritableVersion {
      - __init__(zone: Zone, replacement: bool = False)
      + delete_node(name: dns.name.Name)
      + put_rdataset(name: dns.name.Name, rdataset: dns.rdataset.Rdataset)
      + delete_rdataset(name: dns.name.Name, rdtype: dns.rdatatype.RdataType, covers: dns.rdatatype.RdataType)
  }

  class ImmutableVersion {
      - __init__(version: WritableVersion)
  }

  class Transaction {
      - __init__(zone, replacement, version = None, make_immutable = False)
      + zone()
  }

  class UnknownOrigin {
  }

  class CNAMEAndOtherData {
  }

  class Reader {
      - __init__(tok: dns.tokenizer.Tokenizer, rdclass: dns.rdataclass.RdataClass, txn: dns.transaction.Transaction, allow_include: bool = False, allow_directives: Union[bool, Iterable[str]] = True, force_name: Optional[dns.name.Name] = None, force_ttl: Optional[int] = None, force_rdclass: Optional[dns.rdataclass.RdataClass] = None, force_rdtype: Optional[dns.rdatatype.RdataType] = None, default_ttl: Optional[int] = None)
      + read()
  }

  class RRsetsReaderTransaction {
      - __init__(manager, replacement, read_only)
  }

  class RRSetsReaderManager {
      - __init__(origin = dns.name.root, relativize = False, rdclass = dns.rdataclass.IN)
      + reader()
      + writer(replacement = False)
      + get_class()
      + origin_information()
      + set_rrsets(rrsets)
  }

  class DigestScheme {
      + SIMPLE = 1
  }

  class DigestHashAlgorithm {
      + SHA384 = 1
      + SHA512 = 2
  }

  class NullContext {
      - __init__(enter_result = None)
  }

  class Socket {
      - __init__(family: int, type: int)
  }

  class DatagramSocket {
  }

  class StreamSocket {
  }

  class NullTransport {
  }

  class Backend {
      + name()
      + datagram_connection_required()
      + get_transport_class()
  }

  class DatagramSocket {
      - __init__(family, transport, protocol)
  }

  class StreamSocket {
      - __init__(af, reader, writer)
  }

  class Backend {
      + name()
      + datagram_connection_required()
      + get_transport_class()
  }

  class ncls {
      - __init__()
  }

  class DatagramSocket {
      - __init__(sock)
  }

  class StreamSocket {
      - __init__(family, stream, tls = False)
  }

  class Backend {
      + name()
      + get_transport_class()
  }

}

package dnssecalgs {
  class GenericPublicKey {
      + algorithm: Algorithm
  --
      - __init__(key)
      + verify(signature: bytes, data: bytes)
      + encode_key_bytes(): bytes
      + to_dnskey(flags: int = Flag.ZONE, protocol: int = 3): DNSKEY
      + {classmethod} from_dnskey(cls, key: DNSKEY): 'GenericPublicKey'
      + {classmethod} from_pem(cls, public_pem: bytes): 'GenericPublicKey'
      + to_pem(): bytes
  }

  class GenericPrivateKey {
      + public_cls: Type[GenericPublicKey]
  --
      - __init__(key)
      + sign(data: bytes, verify: bool = False, deterministic: bool = True): bytes
      + public_key(): 'GenericPublicKey'
      + {classmethod} from_pem(cls, private_pem: bytes, password: Optional[bytes] = None): 'GenericPrivateKey'
      + to_pem(password: Optional[bytes] = None): bytes
  }

  class CryptographyPublicKey {
      + key = None
      + key_cls = None
  --
      - __init__(key)
      + {classmethod} from_pem(cls, public_pem: bytes): 'GenericPublicKey'
      + to_pem(): bytes
  }

  class CryptographyPrivateKey {
      + key = None
      + key_cls = None
      + public_cls: Type[CryptographyPublicKey]
  --
      - __init__(key)
      + public_key(): 'CryptographyPublicKey'
      + {classmethod} from_pem(cls, private_pem: bytes, password: Optional[bytes] = None): 'GenericPrivateKey'
      + to_pem(password: Optional[bytes] = None): bytes
  }

  class PublicDSA {
      + key: dsa.DSAPublicKey
      + key_cls = dsa.DSAPublicKey
      + algorithm = Algorithm.DSA
      + chosen_hash = hashes.SHA1()
  --
      + verify(signature: bytes, data: bytes)
      + encode_key_bytes(): bytes
      + {classmethod} from_dnskey(cls, key: DNSKEY): 'PublicDSA'
  }

  class PrivateDSA {
      + key: dsa.DSAPrivateKey
      + key_cls = dsa.DSAPrivateKey
      + public_cls = PublicDSA
  --
      + sign(data: bytes, verify: bool = False, deterministic: bool = True): bytes
      + {classmethod} generate(cls, key_size: int): 'PrivateDSA'
  }

  class PublicDSANSEC3SHA1 {
      + algorithm = Algorithm.DSANSEC3SHA1
  }

  class PrivateDSANSEC3SHA1 {
      + public_cls = PublicDSANSEC3SHA1
  }

  class PublicECDSA {
      + key: ec.EllipticCurvePublicKey
      + key_cls = ec.EllipticCurvePublicKey
      + algorithm: Algorithm
      + chosen_hash: hashes.HashAlgorithm
      + curve: ec.EllipticCurve
      + octets: int
  --
      + verify(signature: bytes, data: bytes)
      + encode_key_bytes(): bytes
      + {classmethod} from_dnskey(cls, key: DNSKEY): 'PublicECDSA'
  }

  class PrivateECDSA {
      + key: ec.EllipticCurvePrivateKey
      + key_cls = ec.EllipticCurvePrivateKey
      + public_cls = PublicECDSA
  --
      + sign(data: bytes, verify: bool = False, deterministic: bool = True): bytes
      + {classmethod} generate(cls): 'PrivateECDSA'
  }

  class PublicECDSAP256SHA256 {
      + algorithm = Algorithm.ECDSAP256SHA256
      + chosen_hash = hashes.SHA256()
      + curve = ec.SECP256R1()
      + octets = 32
  }

  class PrivateECDSAP256SHA256 {
      + public_cls = PublicECDSAP256SHA256
  }

  class PublicECDSAP384SHA384 {
      + algorithm = Algorithm.ECDSAP384SHA384
      + chosen_hash = hashes.SHA384()
      + curve = ec.SECP384R1()
      + octets = 48
  }

  class PrivateECDSAP384SHA384 {
      + public_cls = PublicECDSAP384SHA384
  }

  class PublicEDDSA {
      + verify(signature: bytes, data: bytes)
      + encode_key_bytes(): bytes
      + {classmethod} from_dnskey(cls, key: DNSKEY): 'PublicEDDSA'
  }

  class PrivateEDDSA {
      + public_cls: Type[PublicEDDSA]
  --
      + sign(data: bytes, verify: bool = False, deterministic: bool = True): bytes
      + {classmethod} generate(cls): 'PrivateEDDSA'
  }

  class PublicED25519 {
      + key: ed25519.Ed25519PublicKey
      + key_cls = ed25519.Ed25519PublicKey
      + algorithm = Algorithm.ED25519
  }

  class PrivateED25519 {
      + key: ed25519.Ed25519PrivateKey
      + key_cls = ed25519.Ed25519PrivateKey
      + public_cls = PublicED25519
  }

  class PublicED448 {
      + key: ed448.Ed448PublicKey
      + key_cls = ed448.Ed448PublicKey
      + algorithm = Algorithm.ED448
  }

  class PrivateED448 {
      + key: ed448.Ed448PrivateKey
      + key_cls = ed448.Ed448PrivateKey
      + public_cls = PublicED448
  }

  class PublicRSA {
      + key: rsa.RSAPublicKey
      + key_cls = rsa.RSAPublicKey
      + algorithm: Algorithm
      + chosen_hash: hashes.HashAlgorithm
  --
      + verify(signature: bytes, data: bytes)
      + encode_key_bytes(): bytes
      + {classmethod} from_dnskey(cls, key: DNSKEY): 'PublicRSA'
  }

  class PrivateRSA {
      + key: rsa.RSAPrivateKey
      + key_cls = rsa.RSAPrivateKey
      + public_cls = PublicRSA
      + default_public_exponent = 65537
  --
      + sign(data: bytes, verify: bool = False, deterministic: bool = True): bytes
      + {classmethod} generate(cls, key_size: int): 'PrivateRSA'
  }

  class PublicRSAMD5 {
      + algorithm = Algorithm.RSAMD5
      + chosen_hash = hashes.MD5()
  }

  class PrivateRSAMD5 {
      + public_cls = PublicRSAMD5
  }

  class PublicRSASHA1 {
      + algorithm = Algorithm.RSASHA1
      + chosen_hash = hashes.SHA1()
  }

  class PrivateRSASHA1 {
      + public_cls = PublicRSASHA1
  }

  class PublicRSASHA1NSEC3SHA1 {
      + algorithm = Algorithm.RSASHA1NSEC3SHA1
      + chosen_hash = hashes.SHA1()
  }

  class PrivateRSASHA1NSEC3SHA1 {
      + public_cls = PublicRSASHA1NSEC3SHA1
  }

  class PublicRSASHA256 {
      + algorithm = Algorithm.RSASHA256
      + chosen_hash = hashes.SHA256()
  }

  class PrivateRSASHA256 {
      + public_cls = PublicRSASHA256
  }

  class PublicRSASHA512 {
      + algorithm = Algorithm.RSASHA512
      + chosen_hash = hashes.SHA512()
  }

  class PrivateRSASHA512 {
      + public_cls = PublicRSASHA512
  }

}

package quic {
  class AsyncioQuicStream {
      - __init__(connection, stream_id)
  }

  class AsyncioQuicConnection {
      - __init__(connection, address, port, source, source_port, manager = None)
      + run()
  }

  class AsyncioQuicManager {
      - __init__(conf = None, verify_mode = ssl.CERT_REQUIRED, server_name = None, h3 = False)
      + connect(address, port = 853, source = None, source_port = 0, want_session_ticket = True)
  }

  class UnexpectedEOF {
  }

  class Buffer {
      - __init__()
      + put(data, is_end)
      + have(amount)
      + seen_end()
      + get(amount)
      + get_all()
  }

  class BaseQuicStream {
      - __init__(connection, stream_id)
      + id()
      + headers()
      + trailers()
      + send_h3(url, datagram, post = True)
  }

  class BaseQuicConnection {
      - __init__(connection, address, port, source = None, source_port = 0, manager = None)
      + is_h3()
      + close_stream(stream_id)
      + send_headers(stream_id, headers, is_end = False)
      + send_data(stream_id, data, is_end = False)
  }

  class AsyncQuicConnection {
  }

  class BaseQuicManager {
      - __init__(conf, verify_mode, connection_factory, server_name = None, h3 = False)
      + closed(address, port)
      + is_h3()
      + save_session_ticket(address, port, ticket)
      + save_token(address, port, token)
  }

  class AsyncQuicManager {
      + connect(address, port = 853, source = None, source_port = 0)
  }

  class SyncQuicStream {
      - __init__(connection, stream_id)
      + wait_for(amount, expiration)
      + wait_for_end(expiration)
      + receive(timeout = None)
      + send(datagram, is_end = False)
      + close()
  }

  class SyncQuicConnection {
      - __init__(connection, address, port, source, source_port, manager)
      + write(stream, data, is_end = False)
      + send_headers(stream_id, headers, is_end = False)
      + send_data(stream_id, data, is_end = False)
      + run()
      + make_stream(timeout = None)
      + close_stream(stream_id)
      + close()
  }

  class SyncQuicManager {
      - __init__(conf = None, verify_mode = ssl.CERT_REQUIRED, server_name = None, h3 = False)
      + connect(address, port = 853, source = None, source_port = 0, want_session_ticket = True, want_token = True)
      + closed(address, port)
      + save_session_ticket(address, port, ticket)
      + save_token(address, port, token)
  }

  class TrioQuicStream {
      - __init__(connection, stream_id)
  }

  class TrioQuicConnection {
      - __init__(connection, address, port, source, source_port, manager = None)
  }

  class TrioQuicManager {
      - __init__(nursery, conf = None, verify_mode = ssl.CERT_REQUIRED, server_name = None, h3 = False)
      + connect(address, port = 853, source = None, source_port = 0, want_session_ticket = True)
  }

  class AsyncQuicStream {
  }

  class AsyncQuicConnection {
  }

  class SyncQuicStream {
  }

  class SyncQuicConnection {
      + make_stream(): Any
  }

}

package rdtypes {
  class Flag {
      + SEP = 1
      + REVOKE = 128
      + ZONE = 256
  }

  class DNSKEYBase {
      - __init__(rdclass, rdtype, flags, protocol, algorithm, key)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class DSBase {
      - __init__(rdclass, rdtype, key_tag, algorithm, digest_type, digest)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class EUIBase {
      - __init__(rdclass, rdtype, eui)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class MXBase {
      - __init__(rdclass, rdtype, preference, exchange)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class UncompressedMX {
  }

  class UncompressedDowncasingMX {
  }

  class NSBase {
      - __init__(rdclass, rdtype, target)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class UncompressedNS {
  }

  class UnknownParamKey {
  }

  class ParamKey {
      + MANDATORY = 0
      + ALPN = 1
      + NO_DEFAULT_ALPN = 2
      + PORT = 3
      + IPV4HINT = 4
      + ECH = 5
      + IPV6HINT = 6
      + DOHPATH = 7
      + OHTTP = 8
  }

  class Emptiness {
      + NEVER = 0
      + ALWAYS = 1
      + ALLOWED = 2
  }

  class Param {
      + {classmethod} emptiness(cls)
  }

  class GenericParam {
      - __init__(value)
      + {classmethod} emptiness(cls)
      + {classmethod} from_value(cls, value)
      + to_text()
      + {classmethod} from_wire_parser(cls, parser, origin = None)
      + to_wire(file, origin = None)
  }

  class MandatoryParam {
      - __init__(keys)
      + {classmethod} from_value(cls, value)
      + to_text()
      + {classmethod} from_wire_parser(cls, parser, origin = None)
      + to_wire(file, origin = None)
  }

  class ALPNParam {
      - __init__(ids)
      + {classmethod} from_value(cls, value)
      + to_text()
      + {classmethod} from_wire_parser(cls, parser, origin = None)
      + to_wire(file, origin = None)
  }

  class NoDefaultALPNParam {
      + {classmethod} emptiness(cls)
      + {classmethod} from_value(cls, value)
      + to_text()
      + {classmethod} from_wire_parser(cls, parser, origin = None)
      + to_wire(file, origin = None)
  }

  class PortParam {
      - __init__(port)
      + {classmethod} from_value(cls, value)
      + to_text()
      + {classmethod} from_wire_parser(cls, parser, origin = None)
      + to_wire(file, origin = None)
  }

  class IPv4HintParam {
      - __init__(addresses)
      + {classmethod} from_value(cls, value)
      + to_text()
      + {classmethod} from_wire_parser(cls, parser, origin = None)
      + to_wire(file, origin = None)
  }

  class IPv6HintParam {
      - __init__(addresses)
      + {classmethod} from_value(cls, value)
      + to_text()
      + {classmethod} from_wire_parser(cls, parser, origin = None)
      + to_wire(file, origin = None)
  }

  class ECHParam {
      - __init__(ech)
      + {classmethod} from_value(cls, value)
      + to_text()
      + {classmethod} from_wire_parser(cls, parser, origin = None)
      + to_wire(file, origin = None)
  }

  class OHTTPParam {
      + {classmethod} emptiness(cls)
      + {classmethod} from_value(cls, value)
      + to_text()
      + {classmethod} from_wire_parser(cls, parser, origin = None)
      + to_wire(file, origin = None)
  }

  class SVCBBase {
      - __init__(rdclass, rdtype, priority, target, params)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class TLSABase {
      - __init__(rdclass, rdtype, usage, selector, mtype, cert)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class TXTBase {
      - __init__(rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, strings: Iterable[Union[bytes, str]])
      + to_text(origin: Optional[dns.name.Name] = None, relativize: bool = True): str
      + {classmethod} from_text(cls, rdclass: dns.rdataclass.RdataClass, rdtype: dns.rdatatype.RdataType, tok: dns.tokenizer.Tokenizer, origin: Optional[dns.name.Name] = None, relativize: bool = True, relativize_to: Optional[dns.name.Name] = None): dns.rdata.Rdata
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class Gateway {
      + name = ''
  --
      - __init__(type, gateway = None)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, gateway_type, tok, origin = None, relativize = True, relativize_to = None)
      + to_wire(file, compress = None, origin = None, canonicalize = False)
      + {classmethod} from_wire_parser(cls, gateway_type, parser, origin = None)
  }

  class Bitmap {
      + type_name = ''
  --
      - __init__(windows = None)
      + to_text(): str
      + {classmethod} from_text(cls, tok: 'dns.tokenizer.Tokenizer'): 'Bitmap'
      + {classmethod} from_rdtypes(cls, rdtypes: List[dns.rdatatype.RdataType]): 'Bitmap'
      + to_wire(file)
      + {classmethod} from_wire_parser(cls, parser: 'dns.wire.Parser'): 'Bitmap'
  }

}

package ANY {
  class AFSDB {
      + subtype()
      + hostname()
  }

  class Relay {
      + name = 'AMTRELAY relay'
  --
      + relay()
  }

  class AMTRELAY {
      - __init__(rdclass, rdtype, precedence, discovery_optional, relay_type, relay)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class AVC {
  }

  class CAA {
      - __init__(rdclass, rdtype, flags, tag, value)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class CDNSKEY {
  }

  class CDS {
  }

  class CERT {
      - __init__(rdclass, rdtype, certificate_type, key_tag, algorithm, certificate)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class CNAME {
  }

  class Bitmap {
      + type_name = 'CSYNC'
  }

  class CSYNC {
      - __init__(rdclass, rdtype, serial, flags, windows)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class DLV {
  }

  class DNAME {
  }

  class DNSKEY {
  }

  class DS {
  }

  class EUI48 {
      + byte_len = 6
      + text_len = byte_len * 3 - 1
  }

  class EUI64 {
      + byte_len = 8
      + text_len = byte_len * 3 - 1
  }

  class GPOS {
      - __init__(rdclass, rdtype, latitude, longitude, altitude)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
      + float_latitude()
      + float_longitude()
      + float_altitude()
  }

  class HINFO {
      - __init__(rdclass, rdtype, cpu, os)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class HIP {
      - __init__(rdclass, rdtype, hit, algorithm, key, servers)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class ISDN {
      - __init__(rdclass, rdtype, address, subaddress)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class L32 {
      - __init__(rdclass, rdtype, preference, locator32)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class L64 {
      - __init__(rdclass, rdtype, preference, locator64)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class LOC {
      - __init__(rdclass, rdtype, latitude, longitude, altitude, size = _default_size, hprec = _default_hprec, vprec = _default_vprec)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
      + float_latitude()
      + float_longitude()
  }

  class LP {
      - __init__(rdclass, rdtype, preference, fqdn)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class MX {
  }

  class NID {
      - __init__(rdclass, rdtype, preference, nodeid)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class NINFO {
  }

  class NS {
  }

  class Bitmap {
      + type_name = 'NSEC'
  }

  class NSEC {
      - __init__(rdclass, rdtype, next, windows)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class Bitmap {
      + type_name = 'NSEC3'
  }

  class NSEC3 {
      - __init__(rdclass, rdtype, algorithm, flags, iterations, salt, next, windows)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
      + next_name(origin = None)
  }

  class NSEC3PARAM {
      - __init__(rdclass, rdtype, algorithm, flags, iterations, salt)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class OPENPGPKEY {
      - __init__(rdclass, rdtype, key)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class OPT {
      - __init__(rdclass, rdtype, options)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
      + payload()
  }

  class PTR {
  }

  class RESINFO {
  }

  class RP {
      - __init__(rdclass, rdtype, mbox, txt)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class BadSigTime {
  }

  class RRSIG {
      - __init__(rdclass, rdtype, type_covered, algorithm, labels, original_ttl, expiration, inception, key_tag, signer, signature)
      + covers()
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class RT {
  }

  class SMIMEA {
  }

  class SOA {
      - __init__(rdclass, rdtype, mname, rname, serial, refresh, retry, expire, minimum)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class SPF {
  }

  class SSHFP {
      - __init__(rdclass, rdtype, algorithm, fp_type, fingerprint)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class TKEY {
      + SERVER_ASSIGNMENT = 1
      + DIFFIE_HELLMAN_EXCHANGE = 2
      + GSSAPI_NEGOTIATION = 3
      + RESOLVER_ASSIGNMENT = 4
      + KEY_DELETION = 5
  --
      - __init__(rdclass, rdtype, algorithm, inception, expiration, mode, error, key, other = b'')
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class TLSA {
  }

  class TSIG {
      - __init__(rdclass, rdtype, algorithm, time_signed, fudge, mac, original_id, error, other)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class TXT {
  }

  class URI {
      - __init__(rdclass, rdtype, priority, weight, target)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class WALLET {
  }

  class X25 {
      - __init__(rdclass, rdtype, address)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class ZONEMD {
      - __init__(rdclass, rdtype, serial, scheme, hash_algorithm, digest)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

}

package CH {
  class A {
      - __init__(rdclass, rdtype, domain, address)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

}

package IN {
  class A {
      - __init__(rdclass, rdtype, address)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class AAAA {
      - __init__(rdclass, rdtype, address)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class APLItem {
      - __init__(family, negation, address, prefix)
      + to_wire(file)
  }

  class APL {
      - __init__(rdclass, rdtype, items)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class DHCID {
      - __init__(rdclass, rdtype, data)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class HTTPS {
  }

  class Gateway {
      + name = 'IPSECKEY gateway'
  }

  class IPSECKEY {
      - __init__(rdclass, rdtype, precedence, gateway_type, algorithm, gateway, key)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class KX {
  }

  class NAPTR {
      - __init__(rdclass, rdtype, order, preference, flags, service, regexp, replacement)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class NSAP {
      - __init__(rdclass, rdtype, address)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class NSAP_PTR {
  }

  class PX {
      - __init__(rdclass, rdtype, preference, map822, mapx400)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class SRV {
      - __init__(rdclass, rdtype, priority, weight, port, target)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

  class SVCB {
  }

  class WKS {
      - __init__(rdclass, rdtype, address, protocol, bitmap)
      + to_text(origin = None, relativize = True)
      + {classmethod} from_text(cls, rdclass, rdtype, tok, origin = None, relativize = True, relativize_to = None)
      + {classmethod} from_wire_parser(cls, rdclass, rdtype, parser, origin = None)
  }

}

package dotenv {
  class IPythonDotEnv {
      + dotenv(line)
  }

  class DotEnv {
      - __init__(dotenv_path: Optional[StrPath], stream: Optional[IO[str]] = None, verbose: bool = False, encoding: Optional[str] = None, interpolate: bool = True, override: bool = True)
      + dict(): Dict[str, Optional[str]]
      + parse(): Iterator[Tuple[str, Optional[str]]]
      + set_as_environment_variables(): bool
      + get(key: str): Optional[str]
  }

  class Original {
      + string: str
      + line: int
  }

  class Binding {
      + key: Optional[str]
      + value: Optional[str]
      + original: Original
      + error: bool
  }

  class Position {
      - __init__(chars: int, line: int)
      + {classmethod} start(cls): 'Position'
      + set(other: 'Position')
      + advance(string: str)
  }

  class Error {
  }

  class Reader {
      - __init__(stream: IO[str])
      + has_next(): bool
      + set_mark()
      + get_marked(): Original
      + peek(count: int): str
      + read(count: int): str
      + read_regex(regex: Pattern[str]): Sequence[str]
  }

  class Atom {
      + resolve(env: Mapping[str, Optional[str]]): str
  }

  class Literal {
      - __init__(value: str)
      + resolve(env: Mapping[str, Optional[str]]): str
  }

  class Variable {
      - __init__(name: str, default: Optional[str])
      + resolve(env: Mapping[str, Optional[str]]): str
  }

}

package emails {
  class HTTPLoaderError {
  }

  class BadHeaderError {
  }

  class IncompleteMessage {
  }

  class BaseMessage {
      + attachment_cls = BaseFile
      + filestore_cls = MemoryFileStore
      + policy = None
      + mail_from = property(get_mail_from, set_mail_from)
      + mail_to = property(get_mail_to, set_mail_to)
      + cc = property(get_cc, set_cc)
      + bcc = property(get_bcc, set_bcc)
      + html = property(get_html, set_html)
      + text = property(get_text, set_text)
      + subject = property(get_subject, set_subject)
      + date = property(get_date, set_date)
      + message_date = date
  --
      - __init__(charset = None, message_id = None, date = None, subject = None, mail_from = None, mail_to = None, headers = None, html = None, text = None, attachments = None, cc = None, bcc = None, headers_encoding = None)
      + set_mail_from(mail_from)
      + get_mail_from()
      + set_mail_to(mail_to)
      + get_mail_to()
      + set_cc(addr)
      + get_cc()
      + set_bcc(addr)
      + get_bcc()
      + get_recipients_emails()
      + set_headers(headers)
      + set_html(html, url = None)
      + get_html()
      + set_text(text, url = None)
      + get_text()
      + html_body()
      + text_body()
      + set_subject(value)
      + get_subject()
      + render()
      + set_date(value)
      + get_date()
      + message_id()
      + message_id(value)
      + attachments()
      + attach()
  }

  class MessageBuildMixin {
      + ROOT_PREAMBLE = 'This is a multi-part message in MIME format.\n'
      + ADDRESS_HEADERS = set(['from', 'sender', 'reply-to', 'to', 'cc', 'bcc', 'resent-from', 'resent-sender', 'resent-to', 'resent-cc', 'resent-bcc'])
      + before_build = None
      + after_build = None
      + encode_name_header = encode_address_header
      + message = as_message
  --
      + encode_header(value)
      + encode_address_header(pair)
      + set_header(msg, key, value, encode = True)
      + build_message(message_cls = None)
      + as_message(message_cls = None)
      + as_string(message_cls = None)
  }

  class MessageSendMixin {
      + smtp_pool_factory = ObjectFactory
      + smtp_cls = SMTPBackend
  --
      + smtp_pool()
      + send(to = None, set_mail_to = True, mail_from = None, set_mail_from = False, render = None, smtp_mail_options = None, smtp_rcpt_options = None, smtp = None)
  }

  class MessageTransformerMixin {
      + transformer_cls = None
  --
      + create_transformer(transformer_cls = None)
      + destroy_transformer()
      + transformer()
      + transform()
      + set_html()
  }

  class MessageSignMixin {
      + signer_cls = DKIMSigner
      + dkim = sign
  --
      + sign()
      + sign_message(msg)
      + sign_string(message_string)
  }

  class Message {
  }

  class DjangoMessageProxy {
      - __init__(message, recipients = None, context = None)
      + recipients()
      + message()
  }

  class DKIMSigner {
      - __init__(selector, domain, key = None, ignore_sign_errors = False)
      + get_sign_string(message)
      + get_sign_header(message)
      + sign_message(msg)
      + sign_message_string(message_string)
  }

  class LocalPremailer {
      - __init__(html, local_loader = None, attribute_name = None)
  }

  class HTMLParser {
      + default_parser_method = 'html'
      + default_output_method = 'xml'
  --
      - __init__(html, method = None, output_method = None)
      + html()
      + tree()
      + to_string(encoding = 'utf-8')
      + apply_to_images(func, images = True, backgrounds = True, styles_uri = True)
      + apply_to_links(func)
      + add_content_type_meta(content_type = 'text/html', charset = 'utf-8', element_cls = etree.Element)
      + save()
  }

  class BaseTransformer {
      + UNSAFE_TAGS = ['script', 'object', 'iframe', 'frame', 'base', 'meta', 'link', 'style']
      + attachment_store_cls = MemoryFileStore
      + attachment_file_cls = LazyHTTPFile
      + html_attribute_name = 'data-emails'
  --
      - __init__(html, local_loader = None, attachment_store = None, requests_params = None, method = None, base_url = None)
      + get_absolute_url(url)
      + attribute_value(el)
      + get_premailer()
      + premailer()
      + remove_unsafe_tags()
      + load_and_transform(css_inline = True, remove_unsafe_tags = True, make_links_absolute = True, set_content_type_meta = True, update_stylesheet = False, load_images = True, images_inline = False)
      + make_all_images_inline()
      + synchronize_inline_images(inline_names = None, non_inline_names = None)
  }

  class Transformer {
  }

  class MessageTransformer {
      - __init__(message)
      + save()
  }

  class cached_property {
      - __init__(func)
  }

  class CachedDnsName {
      + get_fqdn()
  }

  class MessageID {
      - __init__(domain = None, idstring = None)
  }

  class MIMEMixin {
      + as_string(unixfrom = False, linesep = '\n')
  }

  class SafeMIMEText {
      - __init__(text, subtype, charset)
  }

  class SafeMIMEMultipart {
      - __init__(_subtype = 'mixed', boundary = None, _subparts = None, encoding = None)
  }

}

package backend {
  class ObjectFactory {
      - __init__(cls)
      + invalidate(k)
  }

  class Response {
      - __init__(exception = None, backend = None)
      + set_exception(exc)
      + raise_if_needed()
      + error()
      + success()
  }

  class SMTPResponse {
      - __init__(exception = None, backend = None)
      + set_status(command, code, text)
      + success()
  }

}

package smtp {
  class SMTPBackend {
      + DEFAULT_SOCKET_TIMEOUT = 5
      + connection_cls = SMTPClientWithResponse
      + connection_ssl_cls = SMTPClientWithResponse_SSL
      + response_cls = SMTPResponse
  --
      - __init__(ssl = False, fail_silently = True)
      + get_client()
      + close()
      + make_response(exception = None)
      + retry_on_disconnect(func)
      + sendmail(from_addr, to_addrs, msg, mail_options = None, rcpt_options = None)
  }

  class SMTPClientWithResponse {
      - __init__(parent)
      + initialize()
      + quit()
      + sendmail(from_addr, to_addrs, msg, mail_options = None, rcpt_options = None)
  }

  class SMTPClientWithResponse_SSL {
      - __init__()
      + quit()
      + sendmail()
  }

  class SMTPClientWithResponse_SSL {
      - __init__()
  }

  class SMTPConnectNetworkError {
      + {classmethod} from_ioerror(cls, exc)
  }

}

package compat {
  class OrderedDict {
      - __init__()
      + clear()
      + popitem(last = True)
      + keys()
      + values()
      + items()
      + iterkeys()
      + itervalues()
      + iteritems()
      + update()
      + pop(key, default = __marker)
      + setdefault(key, default = None)
      + copy()
      + {classmethod} fromkeys(cls, iterable, value = None)
      + viewkeys()
      + viewvalues()
      + viewitems()
  }

  class OrderedSet {
      - __init__(iterable = None)
      + add(key)
      + discard(key)
      + pop(last = True)
  }

  class OrderedDict {
      - __init__()
      + clear()
      + popitem(last = True)
      + keys()
      + values()
      + items()
      + iterkeys()
      + itervalues()
      + iteritems()
      + update()
      + pop(key, default = __marker)
      + setdefault(key, default = None)
      + copy()
      + {classmethod} fromkeys(cls, iterable, value = None)
  }

  class nullcontext {
      - __init__(enter_result = None)
  }

}

package django {
  class DjangoMessageMixin {
      + encoding()
      + recipients()
      + from_email()
      + send(mail_to = None, set_mail_to = True, mail_from = None, set_mail_from = False, context = None, connection = None, to = None)
  }

  class DjangoMessage {
  }

  class quirks {
      + none_causes_check_password_error = DJANGO_VERSION >= (2, 1)
      + empty_is_usable_password = DJANGO_VERSION >= (2, 1)
      + invalid_is_usable_password = DJANGO_VERSION >= (2, 1)
  }

  class DjangoTranslator {
      + context = None
  --
      - __init__(context = None)
      + reset_hashers()
      + passlib_to_django_name(passlib_name)
      + passlib_to_django(passlib_hasher, cached = True)
      + django_to_passlib_name(django_name)
      + django_to_passlib(django_name, cached = True)
      + resolve_django_hasher(django_name, cached = True)
  }

  class DjangoContextAdapter {
      + context = None
      + is_password_usable = None
      + enabled = True
      + patched = False
      + HASHERS_PATH = 'django.contrib.auth.hashers'
      + MODELS_PATH = 'django.contrib.auth.models'
      + USER_CLASS_PATH = MODELS_PATH + ':User'
      + FORMS_PATH = 'django.contrib.auth.forms'
      + patch_locations = [(USER_CLASS_PATH + '.check_password', 'user_check_password', dict(method=True)), (USER_CLASS_PATH + '.set_password', 'user_set_password', dict(method=True)), (HASHERS_PATH + ':', 'check_password'), (HASHERS_PATH + ':', 'make_password'), (HASHERS_PATH + ':', 'get_hashers'), (HASHERS_PATH + ':', 'get_hasher'), (HASHERS_PATH + ':', 'identify_hasher'), (MODELS_PATH + ':', 'check_password'), (MODELS_PATH + ':', 'make_password'), (FORMS_PATH + ':', 'get_hasher'), (FORMS_PATH + ':', 'identify_hasher')]
  --
      - __init__(context = None, get_user_category = None)
      + reset_hashers()
      + get_hashers()
      + get_hasher(algorithm = 'default')
      + identify_hasher(encoded)
      + make_password(password, salt = None, hasher = 'default')
      + check_password(password, encoded, setter = None, preferred = 'default')
      + user_check_password(user, password)
      + user_set_password(user, password)
      + get_user_category(user)
      + install_patch()
      + remove_patch()
      + load_model()
  }

  class ProxyProperty {
      - __init__(attr)
  }

  class RavenResolver {
      + resolve(path, urlconf = None)
  }

  class DjangoIntegration {
      + identifier = 'django'
      + transaction_style = ''
      + middleware_spans = None
      + signals_spans = None
      + cache_spans = None
      + signals_denylist = []
  --
      - __init__(transaction_style = 'url', middleware_spans = True, signals_spans = True, cache_spans = False, signals_denylist = None)
      + {static} setup_once()
  }

  class DjangoRequestExtractor {
      + env()
      + cookies()
      + raw_data()
      + form()
      + files()
      + size_of_file(file)
      + parsed_body()
  }

}

package loader {
  class ReRules {
      + re_meta = b'(?i)(?<=<meta).*?(?=>)'
      + re_is_http_equiv = b'http-equiv="?\'?content-type"?\'?'
      + re_parse_http_equiv = b'content="?\'?([^"\'>]+)'
      + re_charset = b'charset="?\'?([\\w-]+)"?\'?'
  --
      - __init__(conv = None)
  }

  class FileNotFound {
  }

  class BaseLoader {
      + get_file(name)
      + list_files()
      + content(filename, is_html = False, decode = True, guess_charset = False, charset = 'utf-8')
      + find_index_file(filename = None, extensions = ('.html', '.htm'), stop_names = ('index',), raise_if_not_found = True)
      + find_index_html(filename = None)
      + find_index_text(filename = None)
  }

  class FileSystemLoader {
      - __init__(searchpath, encoding = 'utf-8', base_path = None)
      + get_file(filename)
      + list_files()
  }

  class ZipLoader {
      + common_filename_charsets = ['ascii', 'cp866', 'cp1251', 'utf-8']
  --
      - __init__(file, encoding = 'utf-8', base_path = None)
      + get_file(name)
      + list_files()
  }

  class MsgLoader {
      + common_charsets = ['ascii', 'utf-8', 'utf-16', 'windows-1252', 'cp850', 'windows-1251']
  --
      - __init__(msg, base_path = None)
      + decode_text(text, charset = None)
      + clean_content_id(content_id)
      + extract_part_text(part)
      + add_html_part(part)
      + add_text_part(part)
      + add_attachment_part(part)
      + parse()
      + get_file(name)
      + list_files()
      + attachments()
      + html()
      + text()
      + decode_header_value(v)
      + decode_address_header_value(value, skip_invalid = False)
      + filter_header(name)
      + copy_header_to_message(message, name, value)
      + copy_headers_to_message(message)
  }

  class LoadError {
  }

  class IndexFileNotFound {
  }

  class InvalidHtmlFile {
  }

}

package packages {
  class X {
  }

  class MovedModule {
      - __init__(name, old, new = None)
  }

  class MovedAttribute {
      - __init__(name, old_mod, new_mod, old_attr = None, new_attr = None)
  }

  class Module_six_moves_urllib_parse {
  }

  class Module_six_moves_urllib_error {
  }

  class Module_six_moves_urllib_request {
  }

  class Module_six_moves_urllib_response {
  }

  class Module_six_moves_urllib_robotparser {
  }

  class Module_six_moves_urllib {
      + parse = _importer._get_module('moves.urllib_parse')
      + error = _importer._get_module('moves.urllib_error')
      + request = _importer._get_module('moves.urllib_request')
      + response = _importer._get_module('moves.urllib_response')
      + robotparser = _importer._get_module('moves.urllib_robotparser')
  }

  class Iterator {
      + next()
  }

}

package dkim {
  class ASN1FormatError {
  }

  class InvalidCanonicalizationPolicyError {
  }

  class Simple {
      + name = b'simple'
  --
      + {static} canonicalize_headers(headers)
      + {static} canonicalize_body(body)
  }

  class Relaxed {
      + name = b'relaxed'
  --
      + {static} canonicalize_headers(headers)
      + {static} canonicalize_body(body)
  }

  class CanonicalizationPolicy {
      - __init__(header_algorithm, body_algorithm)
      + {classmethod} from_c_value(cls, c)
      + to_c_value()
      + canonicalize_headers(headers)
      + canonicalize_body(body)
  }

  class DigestTooLargeError {
  }

  class UnparsableKeyError {
  }

  class NullHandler {
      + emit(record)
  }

  class InvalidTagValueList {
  }

  class DuplicateTag {
  }

  class InvalidTagSpec {
  }

  class DKIMException {
  }

  class InternalError {
  }

  class KeyFormatError {
  }

  class MessageFormatError {
  }

  class ParameterError {
  }

  class ValidationError {
  }

  class DKIM {
      + RFC5322_SINGLETON = ('date', 'from', 'sender', 'reply-to', 'to', 'cc', 'bcc', 'message-id', 'in-reply-to', 'references')
      + FROZEN = ('from', 'date', 'subject')
      + SHOULD = ('sender', 'reply-to', 'subject', 'date', 'message-id', 'to', 'cc', 'mime-version', 'content-type', 'content-transfer-encoding', 'content-id', 'content- description', 'resent-date', 'resent-from', 'resent-sender', 'resent-to', 'resent-cc', 'resent-message-id', 'in-reply-to', 'references', 'list-id', 'list-help', 'list-unsubscribe', 'list-subscribe', 'list-post', 'list-owner', 'list-archive')
      + SHOULD_NOT = ('return-path', 'received', 'comments', 'keywords', 'bcc', 'resent-bcc', 'dkim-signature')
  --
      - __init__(message = None, logger = None, signature_algorithm = b'rsa-sha256', minkey = 1024)
      + add_frozen(s)
      + set_message(message)
      + default_sign_headers()
      + all_sign_headers()
      + sign(selector, domain, privkey, identity = None, canonicalize = (b'relaxed', b'simple'), include_headers = None, length = False)
      + verify(idx = 0, dnsfunc = get_txt)
  }

}

package store {
  class BaseFile {
      + data = property(get_data, set_data)
      + uri = property(get_uri, set_uri)
      + filename = property(get_filename, set_filename)
      + mime_type = property(get_mime_type)
      + content_disposition = property(get_content_disposition, set_content_disposition)
  --
      - __init__()
      + as_dict(fields = None)
      + get_data()
      + set_data(value)
      + get_uri()
      + set_uri(value)
      + get_filename()
      + set_filename(value)
      + get_mime_type()
      + get_content_disposition()
      + set_content_disposition(value)
      + is_inline()
      + is_inline(value)
      + content_id()
      + mime()
      + reset_mime()
      + fetch()
  }

  class LazyHTTPFile {
      + data = property(get_data, set_data)
  --
      - __init__(requests_args = None)
      + fetch()
      + get_data()
      + set_data(v)
      + mime_type()
      + headers()
  }

  class FileStore {
  }

  class MemoryFileStore {
      + file_cls = BaseFile
  --
      - __init__(file_cls = None)
      + keys()
      + as_dict()
      + remove(uri)
      + unique_filename(filename, uri = None)
      + add(value, replace = False)
      + by_uri(uri)
      + by_filename(filename)
  }

}

package template {
  class BaseTemplate {
      - __init__(template_text)
      + set_template_text(template_text)
      + render()
      + compile_template()
      + template()
  }

  class StringTemplate {
      + compile_template()
      + render()
  }

  class JinjaTemplate {
      + DEFAULT_JINJA_ENVIRONMENT = {}
  --
      - __init__(template_text, environment = None)
      + compile_template()
      + render()
  }

  class MakoTemplate {
      + compile_template()
      + render()
  }

}

package email_validator {
  class EmailNotValidError {
  }

  class EmailSyntaxError {
  }

  class EmailUndeliverableError {
  }

  class ValidatedEmail {
      + original: str
      + normalized: str
      + local_part: str
      + domain: str
      + domain_address: object
      + ascii_email: Optional[str]
      + ascii_local_part: Optional[str]
      + ascii_domain: str
      + smtputf8: bool
      + mx: List[Tuple[int, str]]
      + mx_fallback_type: Optional[str]
      + display_name: Optional[str]
  --
      + email(): str
      + as_constructor(): str
      + as_dict(): Dict[str, Any]
  }

  class LocalPartValidationResult {
      + local_part: str
      + ascii_local_part: Optional[str]
      + smtputf8: bool
  }

  class DomainNameValidationResult {
      + ascii_domain: str
      + domain: str
  }

  class DomainLiteralValidationResult {
      + domain_address: Union[ipaddress.IPv4Address, ipaddress.IPv6Address]
      + domain: str
  }

}

package encutils {
  class EncodingInfo {
      - __init__()
  }

}

package fastapi {
  class FastAPI {
      - __init__()
      + openapi(): Dict[str, Any]
      + setup()
      + add_api_route(path: str, endpoint: Callable[..., Any])
      + api_route(path: str): Callable[[DecoratedCallable], DecoratedCallable]
      + add_api_websocket_route(path: str, endpoint: Callable[..., Any], name: Optional[str] = None)
      + websocket(path: Annotated[str, Doc('\n                WebSocket path.\n                ')], name: Annotated[Optional[str], Doc('\n                A name for the WebSocket. Only used internally.\n                ')] = None): Callable[[DecoratedCallable], DecoratedCallable]
      + include_router(router: Annotated[routing.APIRouter, Doc('The `APIRouter` to include.')])
      + get(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + put(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + post(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + delete(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + options(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + head(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + patch(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + trace(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + websocket_route(path: str, name: Union[str, None] = None): Callable[[DecoratedCallable], DecoratedCallable]
      + on_event(event_type: Annotated[str, Doc('\n                The type of event. `startup` or `shutdown`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + middleware(middleware_type: Annotated[str, Doc('\n                The type of middleware. Currently only supports `http`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + exception_handler(exc_class_or_status_code: Annotated[Union[int, Type[Exception]], Doc('\n                The Exception class this would handle, or a status code.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
  }

  class BackgroundTasks {
      + add_task(func: Annotated[Callable[P, Any], Doc('\n                The function to call after the response is sent.\n\n                It can be a regular `def` function or an `async def` function.\n                ')])
  }

  class UploadFile {
      + file: Annotated[BinaryIO, Doc('The standard Python file object (non-async).')]
      + filename: Annotated[Optional[str], Doc('The original file name.')]
      + size: Annotated[Optional[int], Doc('The size of the file in bytes.')]
      + headers: Annotated[Headers, Doc('The headers of the request.')]
      + content_type: Annotated[Optional[str], Doc('The content type of the request, from the headers.')]
  --
      + {classmethod} validate(cls: Type['UploadFile'], v): Any
  }

  class DefaultPlaceholder {
      - __init__(value)
  }

  class HTTPException {
      - __init__(status_code: Annotated[int, Doc('\n                HTTP status code to send to the client.\n                ')], detail: Annotated[Any, Doc('\n                Any data to be sent to the client in the `detail` key of the JSON\n                response.\n                ')] = None, headers: Annotated[Optional[Dict[str, str]], Doc('\n                Any headers to send to the client in the response.\n                ')] = None)
  }

  class WebSocketException {
      - __init__(code: Annotated[int, Doc('\n                A closing code from the\n                [valid codes defined in the specification](https://datatracker.ietf.org/doc/html/rfc6455#section-7.4.1).\n                ')], reason: Annotated[Union[str, None], Doc('\n                The reason to close the WebSocket connection.\n\n                It is UTF-8-encoded data. The interpretation of the reason is up to the\n                application, it is not specified by the WebSocket specification.\n\n                It could contain text that could be human-readable or interpretable\n                by the client code, etc.\n                ')] = None)
  }

  class FastAPIError {
  }

  class ValidationException {
      - __init__(errors: Sequence[Any])
      + errors(): Sequence[Any]
  }

  class RequestValidationError {
      - __init__(errors: Sequence[Any])
  }

  class WebSocketRequestValidationError {
  }

  class ResponseValidationError {
      - __init__(errors: Sequence[Any])
  }

  class ParamTypes {
      + query = 'query'
      + header = 'header'
      + path = 'path'
      + cookie = 'cookie'
  }

  class Param {
      + in_: ParamTypes
  --
      - __init__(default = Undefined)
  }

  class Path {
      + in_ = ParamTypes.path
  --
      - __init__(default = ...)
  }

  class Query {
      + in_ = ParamTypes.query
  --
      - __init__(default = Undefined)
  }

  class Header {
      + in_ = ParamTypes.header
  --
      - __init__(default = Undefined)
  }

  class Cookie {
      + in_ = ParamTypes.cookie
  --
      - __init__(default = Undefined)
  }

  class Body {
      - __init__(default = Undefined)
  }

  class Form {
      - __init__(default = Undefined)
  }

  class File {
      - __init__(default = Undefined)
  }

  class Depends {
      - __init__(dependency: Optional[Callable[..., Any]] = None)
  }

  class Security {
      - __init__(dependency: Optional[Callable[..., Any]] = None)
  }

  class UJSONResponse {
      + render(content): bytes
  }

  class ORJSONResponse {
      + render(content): bytes
  }

  class APIWebSocketRoute {
      - __init__(path: str, endpoint: Callable[..., Any])
      + matches(scope: Scope): Tuple[Match, Scope]
  }

  class APIRoute {
      - __init__(path: str, endpoint: Callable[..., Any])
      + get_route_handler(): Callable[[Request], Coroutine[Any, Any, Response]]
      + matches(scope: Scope): Tuple[Match, Scope]
  }

  class APIRouter {
      - __init__()
      + route(path: str, methods: Optional[List[str]] = None, name: Optional[str] = None, include_in_schema: bool = True): Callable[[DecoratedCallable], DecoratedCallable]
      + add_api_route(path: str, endpoint: Callable[..., Any])
      + api_route(path: str): Callable[[DecoratedCallable], DecoratedCallable]
      + add_api_websocket_route(path: str, endpoint: Callable[..., Any], name: Optional[str] = None)
      + websocket(path: Annotated[str, Doc('\n                WebSocket path.\n                ')], name: Annotated[Optional[str], Doc('\n                A name for the WebSocket. Only used internally.\n                ')] = None): Callable[[DecoratedCallable], DecoratedCallable]
      + websocket_route(path: str, name: Union[str, None] = None): Callable[[DecoratedCallable], DecoratedCallable]
      + include_router(router: Annotated['APIRouter', Doc('The `APIRouter` to include.')])
      + get(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + put(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + post(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + delete(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + options(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + head(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + patch(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + trace(path: Annotated[str, Doc('\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
      + on_event(event_type: Annotated[str, Doc('\n                The type of event. `startup` or `shutdown`.\n                ')]): Callable[[DecoratedCallable], DecoratedCallable]
  }

  class BaseConfig {
  }

  class ErrorWrapper {
  }

  class ModelField <<dataclass>> {
      + field_info: FieldInfo
      + name: str
      + mode: Literal['validation', 'serialization'] = 'validation'
  --
      + alias(): str
      + required(): bool
      + default(): Any
      + type_(): Any
      + get_default(): Any
      + validate(value, values: Dict[str, Any] = {}): Tuple[Any, Union[List[Dict[str, Any]], None]]
      + serialize(value): Any
  }

  class GenerateJsonSchema <<dataclass>> {
      + ref_template: str
  }

  class PydanticSchemaGenerationError {
  }

}

package dependencies {
  class SecurityRequirement <<dataclass>> {
      + security_scheme: SecurityBase
      + scopes: Optional[Sequence[str]] = None
  }

  class Dependant <<dataclass>> {
      + path_params: List[ModelField] = field(default_factory=list)
      + query_params: List[ModelField] = field(default_factory=list)
      + header_params: List[ModelField] = field(default_factory=list)
      + cookie_params: List[ModelField] = field(default_factory=list)
      + body_params: List[ModelField] = field(default_factory=list)
      + dependencies: List['Dependant'] = field(default_factory=list)
      + security_requirements: List[SecurityRequirement] = field(default_factory=list)
      + name: Optional[str] = None
      + call: Optional[Callable[..., Any]] = None
      + request_param_name: Optional[str] = None
      + websocket_param_name: Optional[str] = None
      + http_connection_param_name: Optional[str] = None
      + response_param_name: Optional[str] = None
      + background_tasks_param_name: Optional[str] = None
      + security_scopes_param_name: Optional[str] = None
      + security_scopes: Optional[List[str]] = None
      + use_cache: bool = True
      + path: Optional[str] = None
      + cache_key: Tuple[Optional[Callable[..., Any]], Tuple[str, ...]] = field(init=False)
  }

  class ParamDetails <<dataclass>> {
      + type_annotation
      + depends: Optional[params.Depends]
      + field: Optional[ModelField]
  }

  class SolvedDependency <<dataclass>> {
      + values: Dict[str, Any]
      + errors: List[Any]
      + background_tasks: Optional[StarletteBackgroundTasks]
      + response: Response
      + dependency_cache: Dict[Tuple[Callable[..., Any], Tuple[str]], Any]
  }

}

package middleware {
  class AuthenticationMiddleware {
      - __init__(app: ASGIApp, backend: AuthenticationBackend, on_error: typing.Callable[[HTTPConnection, AuthenticationError], Response] | None = None)
      + {static} default_on_error(conn: HTTPConnection, exc: Exception): Response
  }

  class BaseHTTPMiddleware {
      - __init__(app: ASGIApp, dispatch: DispatchFunction | None = None)
  }

  class CORSMiddleware {
      - __init__(app: ASGIApp, allow_origins: typing.Sequence[str] = (), allow_methods: typing.Sequence[str] = ('GET',), allow_headers: typing.Sequence[str] = (), allow_credentials: bool = False, allow_origin_regex: str | None = None, expose_headers: typing.Sequence[str] = (), max_age: int = 600)
      + is_allowed_origin(origin: str): bool
      + preflight_response(request_headers: Headers): Response
      + {static} allow_explicit_origin(headers: MutableHeaders, origin: str)
  }

  class ServerErrorMiddleware {
      - __init__(app: ASGIApp, handler: typing.Callable[[Request, Exception], typing.Any] | None = None, debug: bool = False)
      + format_line(index: int, line: str, frame_lineno: int, frame_index: int): str
      + generate_frame_html(frame: inspect.FrameInfo, is_collapsed: bool): str
      + generate_html(exc: Exception, limit: int = 7): str
      + generate_plain_text(exc: Exception): str
      + debug_response(request: Request, exc: Exception): Response
      + error_response(request: Request, exc: Exception): Response
  }

  class ExceptionMiddleware {
      - __init__(app: ASGIApp, handlers: typing.Mapping[typing.Any, typing.Callable[[Request, Exception], Response]] | None = None, debug: bool = False)
      + add_exception_handler(exc_class_or_status_code: int | type[Exception], handler: typing.Callable[[Request, Exception], Response])
      + http_exception(request: Request, exc: Exception): Response
  }

  class GZipMiddleware {
      - __init__(app: ASGIApp, minimum_size: int = 500, compresslevel: int = 9)
  }

  class IdentityResponder {
      + content_encoding: str
  --
      - __init__(app: ASGIApp, minimum_size: int)
      + apply_compression(body: bytes): bytes
  }

  class GZipResponder {
      + content_encoding = 'gzip'
  --
      - __init__(app: ASGIApp, minimum_size: int, compresslevel: int = 9)
      + apply_compression(body: bytes): bytes
  }

  class HTTPSRedirectMiddleware {
      - __init__(app: ASGIApp)
  }

  class SessionMiddleware {
      - __init__(app: ASGIApp, secret_key: str | Secret, session_cookie: str = 'session', max_age: int | None = 14 * 24 * 60 * 60, path: str = '/', same_site: typing.Literal['lax', 'strict', 'none'] = 'lax', https_only: bool = False, domain: str | None = None)
  }

  class TrustedHostMiddleware {
      - __init__(app: ASGIApp, allowed_hosts: typing.Sequence[str] | None = None, www_redirect: bool = True)
  }

  class WSGIMiddleware {
      - __init__(app: typing.Callable[..., typing.Any])
  }

  class WSGIResponder {
      + stream_send: ObjectSendStream[typing.MutableMapping[str, typing.Any]]
      + stream_receive: ObjectReceiveStream[typing.MutableMapping[str, typing.Any]]
  --
      - __init__(app: typing.Callable[..., typing.Any], scope: Scope)
      + start_response(status: str, response_headers: list[tuple[str, str]], exc_info: typing.Any = None)
      + wsgi(environ: dict[str, typing.Any], start_response: typing.Callable[..., typing.Any])
  }

  class Middleware {
      - __init__(cls: _MiddlewareFactory[P])
  }

  class ASGI2Middleware {
      - __init__(app: 'ASGI2Application')
  }

  class MessageLoggerMiddleware {
      - __init__(app: 'ASGI3Application')
  }

  class ProxyHeadersMiddleware {
      - __init__(app: ASGI3Application, trusted_hosts: list[str] | str = '127.0.0.1')
  }

  class WSGIResponder {
      - __init__(app: WSGIApp, executor: concurrent.futures.ThreadPoolExecutor, scope: HTTPScope)
      + start_response(status: str, response_headers: Iterable[tuple[str, str]], exc_info: ExcInfo | None = None)
      + wsgi(environ: Environ, start_response: StartResponse)
  }

}

package openapi {
  class EmailStr {
      + {classmethod} validate(cls, v): str
  }

  class BaseModelWithConfig {
  }

  class Config {
      + extra = 'allow'
  }

  class Contact {
      + name: Optional[str] = None
      + url: Optional[AnyUrl] = None
      + email: Optional[EmailStr] = None
  }

  class License {
      + name: str
      + identifier: Optional[str] = None
      + url: Optional[AnyUrl] = None
  }

  class Info {
      + title: str
      + summary: Optional[str] = None
      + description: Optional[str] = None
      + termsOfService: Optional[str] = None
      + contact: Optional[Contact] = None
      + license: Optional[License] = None
      + version: str
  }

  class ServerVariable {
      + enum: Annotated[Optional[List[str]], Field(min_length=1)] = None
      + default: str
      + description: Optional[str] = None
  }

  class Server {
      + url: Union[AnyUrl, str]
      + description: Optional[str] = None
      + variables: Optional[Dict[str, ServerVariable]] = None
  }

  class Reference {
      + ref: str = Field(alias='$ref')
  }

  class Discriminator {
      + propertyName: str
      + mapping: Optional[Dict[str, str]] = None
  }

  class XML {
      + name: Optional[str] = None
      + namespace: Optional[str] = None
      + prefix: Optional[str] = None
      + attribute: Optional[bool] = None
      + wrapped: Optional[bool] = None
  }

  class ExternalDocumentation {
      + description: Optional[str] = None
      + url: AnyUrl
  }

  class Schema {
      + schema_: Optional[str] = Field(default=None, alias='$schema')
      + vocabulary: Optional[str] = Field(default=None, alias='$vocabulary')
      + id: Optional[str] = Field(default=None, alias='$id')
      + anchor: Optional[str] = Field(default=None, alias='$anchor')
      + dynamicAnchor: Optional[str] = Field(default=None, alias='$dynamicAnchor')
      + ref: Optional[str] = Field(default=None, alias='$ref')
      + dynamicRef: Optional[str] = Field(default=None, alias='$dynamicRef')
      + defs: Optional[Dict[str, 'SchemaOrBool']] = Field(default=None, alias='$defs')
      + comment: Optional[str] = Field(default=None, alias='$comment')
      + allOf: Optional[List['SchemaOrBool']] = None
      + anyOf: Optional[List['SchemaOrBool']] = None
      + oneOf: Optional[List['SchemaOrBool']] = None
      + not_: Optional['SchemaOrBool'] = Field(default=None, alias='not')
      + if_: Optional['SchemaOrBool'] = Field(default=None, alias='if')
      + then: Optional['SchemaOrBool'] = None
      + else_: Optional['SchemaOrBool'] = Field(default=None, alias='else')
      + dependentSchemas: Optional[Dict[str, 'SchemaOrBool']] = None
      + prefixItems: Optional[List['SchemaOrBool']] = None
      + items: Optional[Union['SchemaOrBool', List['SchemaOrBool']]] = None
      + contains: Optional['SchemaOrBool'] = None
      + properties: Optional[Dict[str, 'SchemaOrBool']] = None
      + patternProperties: Optional[Dict[str, 'SchemaOrBool']] = None
      + additionalProperties: Optional['SchemaOrBool'] = None
      + propertyNames: Optional['SchemaOrBool'] = None
      + unevaluatedItems: Optional['SchemaOrBool'] = None
      + unevaluatedProperties: Optional['SchemaOrBool'] = None
      + type: Optional[str] = None
      + enum: Optional[List[Any]] = None
      + const: Optional[Any] = None
      + multipleOf: Optional[float] = Field(default=None, gt=0)
      + maximum: Optional[float] = None
      + exclusiveMaximum: Optional[float] = None
      + minimum: Optional[float] = None
      + exclusiveMinimum: Optional[float] = None
      + maxLength: Optional[int] = Field(default=None, ge=0)
      + minLength: Optional[int] = Field(default=None, ge=0)
      + pattern: Optional[str] = None
      + maxItems: Optional[int] = Field(default=None, ge=0)
      + minItems: Optional[int] = Field(default=None, ge=0)
      + uniqueItems: Optional[bool] = None
      + maxContains: Optional[int] = Field(default=None, ge=0)
      + minContains: Optional[int] = Field(default=None, ge=0)
      + maxProperties: Optional[int] = Field(default=None, ge=0)
      + minProperties: Optional[int] = Field(default=None, ge=0)
      + required: Optional[List[str]] = None
      + dependentRequired: Optional[Dict[str, Set[str]]] = None
      + format: Optional[str] = None
      + contentEncoding: Optional[str] = None
      + contentMediaType: Optional[str] = None
      + contentSchema: Optional['SchemaOrBool'] = None
      + title: Optional[str] = None
      + description: Optional[str] = None
      + default: Optional[Any] = None
      + deprecated: Optional[bool] = None
      + readOnly: Optional[bool] = None
      + writeOnly: Optional[bool] = None
      + examples: Optional[List[Any]] = None
      + discriminator: Optional[Discriminator] = None
      + xml: Optional[XML] = None
      + externalDocs: Optional[ExternalDocumentation] = None
      + example: Annotated[Optional[Any], typing_deprecated('Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead.')] = None
  }

  class Example {
      + summary: Optional[str]
      + description: Optional[str]
      + value: Optional[Any]
      + externalValue: Optional[AnyUrl]
  }

  class Config {
      + extra = 'allow'
  }

  class ParameterInType {
      + query = 'query'
      + header = 'header'
      + path = 'path'
      + cookie = 'cookie'
  }

  class Encoding {
      + contentType: Optional[str] = None
      + headers: Optional[Dict[str, Union['Header', Reference]]] = None
      + style: Optional[str] = None
      + explode: Optional[bool] = None
      + allowReserved: Optional[bool] = None
  }

  class MediaType {
      + schema_: Optional[Union[Schema, Reference]] = Field(default=None, alias='schema')
      + example: Optional[Any] = None
      + examples: Optional[Dict[str, Union[Example, Reference]]] = None
      + encoding: Optional[Dict[str, Encoding]] = None
  }

  class ParameterBase {
      + description: Optional[str] = None
      + required: Optional[bool] = None
      + deprecated: Optional[bool] = None
      + style: Optional[str] = None
      + explode: Optional[bool] = None
      + allowReserved: Optional[bool] = None
      + schema_: Optional[Union[Schema, Reference]] = Field(default=None, alias='schema')
      + example: Optional[Any] = None
      + examples: Optional[Dict[str, Union[Example, Reference]]] = None
      + content: Optional[Dict[str, MediaType]] = None
  }

  class Parameter {
      + name: str
      + in_: ParameterInType = Field(alias='in')
  }

  class Header {
  }

  class RequestBody {
      + description: Optional[str] = None
      + content: Dict[str, MediaType]
      + required: Optional[bool] = None
  }

  class Link {
      + operationRef: Optional[str] = None
      + operationId: Optional[str] = None
      + parameters: Optional[Dict[str, Union[Any, str]]] = None
      + requestBody: Optional[Union[Any, str]] = None
      + description: Optional[str] = None
      + server: Optional[Server] = None
  }

  class Response {
      + description: str
      + headers: Optional[Dict[str, Union[Header, Reference]]] = None
      + content: Optional[Dict[str, MediaType]] = None
      + links: Optional[Dict[str, Union[Link, Reference]]] = None
  }

  class Operation {
      + tags: Optional[List[str]] = None
      + summary: Optional[str] = None
      + description: Optional[str] = None
      + externalDocs: Optional[ExternalDocumentation] = None
      + operationId: Optional[str] = None
      + parameters: Optional[List[Union[Parameter, Reference]]] = None
      + requestBody: Optional[Union[RequestBody, Reference]] = None
      + responses: Optional[Dict[str, Union[Response, Any]]] = None
      + callbacks: Optional[Dict[str, Union[Dict[str, 'PathItem'], Reference]]] = None
      + deprecated: Optional[bool] = None
      + security: Optional[List[Dict[str, List[str]]]] = None
      + servers: Optional[List[Server]] = None
  }

  class PathItem {
      + ref: Optional[str] = Field(default=None, alias='$ref')
      + summary: Optional[str] = None
      + description: Optional[str] = None
      + get: Optional[Operation] = None
      + put: Optional[Operation] = None
      + post: Optional[Operation] = None
      + delete: Optional[Operation] = None
      + options: Optional[Operation] = None
      + head: Optional[Operation] = None
      + patch: Optional[Operation] = None
      + trace: Optional[Operation] = None
      + servers: Optional[List[Server]] = None
      + parameters: Optional[List[Union[Parameter, Reference]]] = None
  }

  class SecuritySchemeType {
      + apiKey = 'apiKey'
      + http = 'http'
      + oauth2 = 'oauth2'
      + openIdConnect = 'openIdConnect'
  }

  class SecurityBase {
      + type_: SecuritySchemeType = Field(alias='type')
      + description: Optional[str] = None
  }

  class APIKeyIn {
      + query = 'query'
      + header = 'header'
      + cookie = 'cookie'
  }

  class APIKey {
      + type_: SecuritySchemeType = Field(default=SecuritySchemeType.apiKey, alias='type')
      + in_: APIKeyIn = Field(alias='in')
      + name: str
  }

  class HTTPBase {
      + type_: SecuritySchemeType = Field(default=SecuritySchemeType.http, alias='type')
      + scheme: str
  }

  class HTTPBearer {
      + scheme: Literal['bearer'] = 'bearer'
      + bearerFormat: Optional[str] = None
  }

  class OAuthFlow {
      + refreshUrl: Optional[str] = None
      + scopes: Dict[str, str] = {}
  }

  class OAuthFlowImplicit {
      + authorizationUrl: str
  }

  class OAuthFlowPassword {
      + tokenUrl: str
  }

  class OAuthFlowClientCredentials {
      + tokenUrl: str
  }

  class OAuthFlowAuthorizationCode {
      + authorizationUrl: str
      + tokenUrl: str
  }

  class OAuthFlows {
      + implicit: Optional[OAuthFlowImplicit] = None
      + password: Optional[OAuthFlowPassword] = None
      + clientCredentials: Optional[OAuthFlowClientCredentials] = None
      + authorizationCode: Optional[OAuthFlowAuthorizationCode] = None
  }

  class OAuth2 {
      + type_: SecuritySchemeType = Field(default=SecuritySchemeType.oauth2, alias='type')
      + flows: OAuthFlows
  }

  class OpenIdConnect {
      + type_: SecuritySchemeType = Field(default=SecuritySchemeType.openIdConnect, alias='type')
      + openIdConnectUrl: str
  }

  class Components {
      + schemas: Optional[Dict[str, Union[Schema, Reference]]] = None
      + responses: Optional[Dict[str, Union[Response, Reference]]] = None
      + parameters: Optional[Dict[str, Union[Parameter, Reference]]] = None
      + examples: Optional[Dict[str, Union[Example, Reference]]] = None
      + requestBodies: Optional[Dict[str, Union[RequestBody, Reference]]] = None
      + headers: Optional[Dict[str, Union[Header, Reference]]] = None
      + securitySchemes: Optional[Dict[str, Union[SecurityScheme, Reference]]] = None
      + links: Optional[Dict[str, Union[Link, Reference]]] = None
      + callbacks: Optional[Dict[str, Union[Dict[str, PathItem], Reference, Any]]] = None
      + pathItems: Optional[Dict[str, Union[PathItem, Reference]]] = None
  }

  class Tag {
      + name: str
      + description: Optional[str] = None
      + externalDocs: Optional[ExternalDocumentation] = None
  }

  class OpenAPI {
      + openapi: str
      + info: Info
      + jsonSchemaDialect: Optional[str] = None
      + servers: Optional[List[Server]] = None
      + paths: Optional[Dict[str, Union[PathItem, Any]]] = None
      + webhooks: Optional[Dict[str, Union[PathItem, Reference]]] = None
      + components: Optional[Components] = None
      + security: Optional[List[Dict[str, List[str]]]] = None
      + tags: Optional[List[Tag]] = None
      + externalDocs: Optional[ExternalDocumentation] = None
  }

}

package security {
  class APIKeyBase {
      + {static} check_api_key(api_key: Optional[str], auto_error: bool): Optional[str]
  }

  class APIKeyQuery {
      - __init__()
  }

  class APIKeyHeader {
      - __init__()
  }

  class APIKeyCookie {
      - __init__()
  }

  class SecurityBase {
      + model: SecurityBaseModel
      + scheme_name: str
  }

  class HTTPBasicCredentials {
      + username: Annotated[str, Doc('The HTTP Basic username.')]
      + password: Annotated[str, Doc('The HTTP Basic password.')]
  }

  class HTTPAuthorizationCredentials {
      + scheme: Annotated[str, Doc('\n            The HTTP authorization scheme extracted from the header value.\n            ')]
      + credentials: Annotated[str, Doc('\n            The HTTP authorization credentials extracted from the header value.\n            ')]
  }

  class HTTPBase {
      - __init__()
  }

  class HTTPBasic {
      - __init__()
  }

  class HTTPBearer {
      - __init__()
  }

  class HTTPDigest {
      - __init__()
  }

  class OAuth2PasswordRequestForm {
      - __init__()
  }

  class OAuth2PasswordRequestFormStrict {
      - __init__(grant_type: Annotated[str, Form(pattern='^password$'), Doc('\n                The OAuth2 spec says it is required and MUST be the fixed string\n                "password". This dependency is strict about it. If you want to be\n                permissive, use instead the `OAuth2PasswordRequestForm` dependency\n                class.\n                ')], username: Annotated[str, Form(), Doc('\n                `username` string. The OAuth2 spec requires the exact field name\n                `username`.\n                ')], password: Annotated[str, Form(), Doc('\n                `password` string. The OAuth2 spec requires the exact field name\n                `password".\n                ')], scope: Annotated[str, Form(), Doc('\n                A single string with actually several scopes separated by spaces. Each\n                scope is also a string.\n\n                For example, a single string with:\n\n                ```python\n                "items:read items:write users:read profile openid"\n                ````\n\n                would represent the scopes:\n\n                * `items:read`\n                * `items:write`\n                * `users:read`\n                * `profile`\n                * `openid`\n                ')] = '', client_id: Annotated[Union[str, None], Form(), Doc("\n                If there's a `client_id`, it can be sent as part of the form fields.\n                But the OAuth2 specification recommends sending the `client_id` and\n                `client_secret` (if any) using HTTP Basic auth.\n                ")] = None, client_secret: Annotated[Union[str, None], Form(), Doc("\n                If there's a `client_password` (and a `client_id`), they can be sent\n                as part of the form fields. But the OAuth2 specification recommends\n                sending the `client_id` and `client_secret` (if any) using HTTP Basic\n                auth.\n                ")] = None)
  }

  class OAuth2 {
      - __init__()
  }

  class OAuth2PasswordBearer {
      - __init__(tokenUrl: Annotated[str, Doc('\n                The URL to obtain the OAuth2 token. This would be the *path operation*\n                that has `OAuth2PasswordRequestForm` as a dependency.\n                ')], scheme_name: Annotated[Optional[str], Doc('\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                ')] = None, scopes: Annotated[Optional[Dict[str, str]], Doc('\n                The OAuth2 scopes that would be required by the *path operations* that\n                use this dependency.\n                ')] = None, description: Annotated[Optional[str], Doc('\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                ')] = None, auto_error: Annotated[bool, Doc('\n                By default, if no HTTP Authorization header is provided, required for\n                OAuth2 authentication, it will automatically cancel the request and\n                send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OAuth2\n                or in a cookie).\n                ')] = True)
  }

  class OAuth2AuthorizationCodeBearer {
      - __init__(authorizationUrl: str, tokenUrl: Annotated[str, Doc('\n                The URL to obtain the OAuth2 token.\n                ')], refreshUrl: Annotated[Optional[str], Doc('\n                The URL to refresh the token and obtain a new one.\n                ')] = None, scheme_name: Annotated[Optional[str], Doc('\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                ')] = None, scopes: Annotated[Optional[Dict[str, str]], Doc('\n                The OAuth2 scopes that would be required by the *path operations* that\n                use this dependency.\n                ')] = None, description: Annotated[Optional[str], Doc('\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                ')] = None, auto_error: Annotated[bool, Doc('\n                By default, if no HTTP Authorization header is provided, required for\n                OAuth2 authentication, it will automatically cancel the request and\n                send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OAuth2\n                or in a cookie).\n                ')] = True)
  }

  class SecurityScopes {
      - __init__(scopes: Annotated[Optional[List[str]], Doc('\n                This will be filled by FastAPI.\n                ')] = None)
  }

  class OpenIdConnect {
      - __init__()
  }

}

package fastapi_cli {
  class ModuleData <<dataclass>> {
      + module_import_str: str
      + extra_sys_path: Path
      + module_paths: List[Path]
  }

  class ImportData <<dataclass>> {
      + app_name: str
      + module_data: ModuleData
      + import_string: str
  }

  class FastAPICLIException {
  }

}

package h11 {
  class NEED_DATA {
  }

  class PAUSED {
  }

  class Connection {
      - __init__(our_role: Type[Sentinel], max_incomplete_event_size: int = DEFAULT_MAX_INCOMPLETE_EVENT_SIZE)
      + states(): Dict[Type[Sentinel], Type[Sentinel]]
      + our_state(): Type[Sentinel]
      + their_state(): Type[Sentinel]
      + they_are_waiting_for_100_continue(): bool
      + start_next_cycle()
      + trailing_data(): Tuple[bytes, bool]
      + receive_data(data: bytes)
      + next_event(): Union[Event, Type[NEED_DATA], Type[PAUSED]]
      + send(event: Event): Optional[bytes]
      + send_with_data_passthrough(event: Event): Optional[List[bytes]]
      + send_failed()
  }

  class Event {
  }

  class Request <<dataclass>> {
      + method: bytes
      + headers: Headers
      + target: bytes
      + http_version: bytes
  --
      - __init__()
  }

  class InformationalResponse <<dataclass>> {
  }

  class Response <<dataclass>> {
  }

  class Data <<dataclass>> {
      + data: bytes
      + chunk_start: bool
      + chunk_end: bool
  --
      - __init__(data: bytes, chunk_start: bool = False, chunk_end: bool = False)
  }

  class EndOfMessage <<dataclass>> {
      + headers: Headers
  --
      - __init__()
  }

  class ConnectionClosed <<dataclass>> {
  }

  class Headers {
      - __init__(full_items: List[Tuple[bytes, bytes, bytes]])
      + raw_items(): List[Tuple[bytes, bytes]]
  }

  class ContentLengthReader {
      - __init__(length: int)
      + read_eof(): NoReturn
  }

  class ChunkedReader {
      - __init__()
      + read_eof(): NoReturn
  }

  class Http10Reader {
      + read_eof(): EndOfMessage
  }

  class ReceiveBuffer {
      - __init__()
      + maybe_extract_at_most(count: int): Optional[bytearray]
      + maybe_extract_next_line(): Optional[bytearray]
      + maybe_extract_lines(): Optional[List[bytearray]]
      + is_next_line_obviously_invalid_request_line(): bool
  }

  class CLIENT {
  }

  class SERVER {
  }

  class IDLE {
  }

  class SEND_RESPONSE {
  }

  class SEND_BODY {
  }

  class DONE {
  }

  class MUST_CLOSE {
  }

  class CLOSED {
  }

  class ERROR {
  }

  class MIGHT_SWITCH_PROTOCOL {
  }

  class SWITCHED_PROTOCOL {
  }

  class ConnectionState {
      - __init__()
      + process_error(role: Type[Sentinel])
      + process_keep_alive_disabled()
      + process_client_switch_proposal(switch_event: Type[Sentinel])
      + process_event(role: Type[Sentinel], event_type: Type[Event], server_switch_event: Optional[Type[Sentinel]] = None)
      + start_next_cycle()
  }

  class ProtocolError {
      - __init__(msg: str, error_status_hint: int = 400)
  }

  class LocalProtocolError {
  }

  class RemoteProtocolError {
  }

  class Sentinel {
  }

  class BodyWriter {
      + send_data(data: bytes, write: Writer)
      + send_eom(headers: Headers, write: Writer)
  }

  class ContentLengthWriter {
      - __init__(length: int)
      + send_data(data: bytes, write: Writer)
      + send_eom(headers: Headers, write: Writer)
  }

  class ChunkedWriter {
      + send_data(data: bytes, write: Writer)
      + send_eom(headers: Headers, write: Writer)
  }

  class Http10Writer {
      + send_data(data: bytes, write: Writer)
      + send_eom(headers: Headers, write: Writer)
  }

}

package httpcore {
  class ConnectionNotAvailable {
  }

  class ProxyError {
  }

  class UnsupportedProtocol {
  }

  class ProtocolError {
  }

  class RemoteProtocolError {
  }

  class LocalProtocolError {
  }

  class TimeoutException {
  }

  class PoolTimeout {
  }

  class ConnectTimeout {
  }

  class ReadTimeout {
  }

  class WriteTimeout {
  }

  class NetworkError {
  }

  class ConnectError {
  }

  class ReadError {
  }

  class WriteError {
  }

  class ByteStream {
      - __init__(content: bytes)
  }

  class Origin {
      - __init__(scheme: bytes, host: bytes, port: int)
  }

  class URL {
      - __init__(url: bytes | str = '')
      + origin(): Origin
  }

  class Request {
      - __init__(method: bytes | str, url: URL | bytes | str)
  }

  class Response {
      - __init__(status: int)
      + content(): bytes
      + read(): bytes
      + iter_stream(): typing.Iterator[bytes]
      + close()
  }

  class Proxy {
      - __init__(url: URL | bytes | str, auth: tuple[bytes | str, bytes | str] | None = None, headers: HeadersAsMapping | HeadersAsSequence | None = None, ssl_context: ssl.SSLContext | None = None)
  }

  class AsyncLock {
      - __init__()
      + setup()
  }

  class AsyncThreadLock {
  }

  class AsyncEvent {
      - __init__()
      + setup()
      + set()
  }

  class AsyncSemaphore {
      - __init__(bound: int)
      + setup()
  }

  class AsyncShieldCancellation {
      - __init__()
  }

  class Lock {
      - __init__()
  }

  class ThreadLock {
      - __init__()
  }

  class Event {
      - __init__()
      + set()
      + wait(timeout: float | None = None)
  }

  class Semaphore {
      - __init__(bound: int)
      + acquire()
      + release()
  }

  class ShieldCancellation {
  }

  class Trace {
      - __init__(name: str, logger: logging.Logger, request: Request | None = None, kwargs: dict[str, typing.Any] | None = None)
      + trace(name: str, info: dict[str, typing.Any])
  }

  class AnyIOBackend {
      - __init__()
  }

  class TrioBackend {
      - __init__()
  }

}

package _async {
  class AsyncHTTPConnection {
      - __init__(origin: Origin, ssl_context: ssl.SSLContext | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, retries: int = 0, local_address: str | None = None, uds: str | None = None, network_backend: AsyncNetworkBackend | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None)
      + can_handle_request(origin: Origin): bool
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
      + info(): str
  }

  class AsyncPoolRequest {
      - __init__(request: Request)
      + assign_to_connection(connection: AsyncConnectionInterface | None)
      + clear_connection()
      + is_queued(): bool
  }

  class AsyncConnectionPool {
      - __init__(ssl_context: ssl.SSLContext | None = None, proxy: Proxy | None = None, max_connections: int | None = 10, max_keepalive_connections: int | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, retries: int = 0, local_address: str | None = None, uds: str | None = None, network_backend: AsyncNetworkBackend | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None)
      + create_connection(origin: Origin): AsyncConnectionInterface
      + connections(): list[AsyncConnectionInterface]
  }

  class PoolByteStream {
      - __init__(stream: typing.AsyncIterable[bytes], pool_request: AsyncPoolRequest, pool: AsyncConnectionPool)
  }

  class HTTPConnectionState {
      + NEW = 0
      + ACTIVE = 1
      + IDLE = 2
      + CLOSED = 3
  }

  class AsyncHTTP11Connection {
      + READ_NUM_BYTES = 64 * 1024
      + MAX_INCOMPLETE_EVENT_SIZE = 100 * 1024
  --
      - __init__(origin: Origin, stream: AsyncNetworkStream, keepalive_expiry: float | None = None)
      + can_handle_request(origin: Origin): bool
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
      + info(): str
  }

  class HTTP11ConnectionByteStream {
      - __init__(connection: AsyncHTTP11Connection, request: Request)
  }

  class AsyncHTTP11UpgradeStream {
      - __init__(stream: AsyncNetworkStream, leading_data: bytes)
      + get_extra_info(info: str): typing.Any
  }

  class HTTPConnectionState {
      + ACTIVE = 1
      + IDLE = 2
      + CLOSED = 3
  }

  class AsyncHTTP2Connection {
      + READ_NUM_BYTES = 64 * 1024
      + CONFIG = h2.config.H2Configuration(validate_inbound_headers=False)
  --
      - __init__(origin: Origin, stream: AsyncNetworkStream, keepalive_expiry: float | None = None)
      + can_handle_request(origin: Origin): bool
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
      + info(): str
  }

  class HTTP2ConnectionByteStream {
      - __init__(connection: AsyncHTTP2Connection, request: Request, stream_id: int)
  }

  class AsyncHTTPProxy {
      - __init__(proxy_url: URL | bytes | str, proxy_auth: tuple[bytes | str, bytes | str] | None = None, proxy_headers: HeadersAsMapping | HeadersAsSequence | None = None, ssl_context: ssl.SSLContext | None = None, proxy_ssl_context: ssl.SSLContext | None = None, max_connections: int | None = 10, max_keepalive_connections: int | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, retries: int = 0, local_address: str | None = None, uds: str | None = None, network_backend: AsyncNetworkBackend | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None)
      + create_connection(origin: Origin): AsyncConnectionInterface
  }

  class AsyncForwardHTTPConnection {
      - __init__(proxy_origin: Origin, remote_origin: Origin, proxy_headers: HeadersAsMapping | HeadersAsSequence | None = None, keepalive_expiry: float | None = None, network_backend: AsyncNetworkBackend | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None, proxy_ssl_context: ssl.SSLContext | None = None)
      + can_handle_request(origin: Origin): bool
      + info(): str
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
  }

  class AsyncTunnelHTTPConnection {
      - __init__(proxy_origin: Origin, remote_origin: Origin, ssl_context: ssl.SSLContext | None = None, proxy_ssl_context: ssl.SSLContext | None = None, proxy_headers: typing.Sequence[tuple[bytes, bytes]] | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, network_backend: AsyncNetworkBackend | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None)
      + can_handle_request(origin: Origin): bool
      + info(): str
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
  }

  class AsyncRequestInterface {
  }

  class AsyncConnectionInterface {
      + info(): str
      + can_handle_request(origin: Origin): bool
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
  }

  class AsyncSOCKSProxy {
      - __init__(proxy_url: URL | bytes | str, proxy_auth: tuple[bytes | str, bytes | str] | None = None, ssl_context: ssl.SSLContext | None = None, max_connections: int | None = 10, max_keepalive_connections: int | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, retries: int = 0, network_backend: AsyncNetworkBackend | None = None)
      + create_connection(origin: Origin): AsyncConnectionInterface
  }

  class AsyncSocks5Connection {
      - __init__(proxy_origin: Origin, remote_origin: Origin, proxy_auth: tuple[bytes, bytes] | None = None, ssl_context: ssl.SSLContext | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, network_backend: AsyncNetworkBackend | None = None)
      + can_handle_request(origin: Origin): bool
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
      + info(): str
  }

  class AsyncHTTP2Connection {
      - __init__()
  }

  class AsyncSOCKSProxy {
      - __init__()
  }

}

package _sync {
  class HTTPConnection {
      - __init__(origin: Origin, ssl_context: ssl.SSLContext | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, retries: int = 0, local_address: str | None = None, uds: str | None = None, network_backend: NetworkBackend | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None)
      + handle_request(request: Request): Response
      + can_handle_request(origin: Origin): bool
      + close()
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
      + info(): str
  }

  class PoolRequest {
      - __init__(request: Request)
      + assign_to_connection(connection: ConnectionInterface | None)
      + clear_connection()
      + wait_for_connection(timeout: float | None = None): ConnectionInterface
      + is_queued(): bool
  }

  class ConnectionPool {
      - __init__(ssl_context: ssl.SSLContext | None = None, proxy: Proxy | None = None, max_connections: int | None = 10, max_keepalive_connections: int | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, retries: int = 0, local_address: str | None = None, uds: str | None = None, network_backend: NetworkBackend | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None)
      + create_connection(origin: Origin): ConnectionInterface
      + connections(): list[ConnectionInterface]
      + handle_request(request: Request): Response
      + close()
  }

  class PoolByteStream {
      - __init__(stream: typing.Iterable[bytes], pool_request: PoolRequest, pool: ConnectionPool)
      + close()
  }

  class HTTPConnectionState {
      + NEW = 0
      + ACTIVE = 1
      + IDLE = 2
      + CLOSED = 3
  }

  class HTTP11Connection {
      + READ_NUM_BYTES = 64 * 1024
      + MAX_INCOMPLETE_EVENT_SIZE = 100 * 1024
  --
      - __init__(origin: Origin, stream: NetworkStream, keepalive_expiry: float | None = None)
      + handle_request(request: Request): Response
      + close()
      + can_handle_request(origin: Origin): bool
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
      + info(): str
  }

  class HTTP11ConnectionByteStream {
      - __init__(connection: HTTP11Connection, request: Request)
      + close()
  }

  class HTTP11UpgradeStream {
      - __init__(stream: NetworkStream, leading_data: bytes)
      + read(max_bytes: int, timeout: float | None = None): bytes
      + write(buffer: bytes, timeout: float | None = None)
      + close()
      + start_tls(ssl_context: ssl.SSLContext, server_hostname: str | None = None, timeout: float | None = None): NetworkStream
      + get_extra_info(info: str): typing.Any
  }

  class HTTPConnectionState {
      + ACTIVE = 1
      + IDLE = 2
      + CLOSED = 3
  }

  class HTTP2Connection {
      + READ_NUM_BYTES = 64 * 1024
      + CONFIG = h2.config.H2Configuration(validate_inbound_headers=False)
  --
      - __init__(origin: Origin, stream: NetworkStream, keepalive_expiry: float | None = None)
      + handle_request(request: Request): Response
      + close()
      + can_handle_request(origin: Origin): bool
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
      + info(): str
  }

  class HTTP2ConnectionByteStream {
      - __init__(connection: HTTP2Connection, request: Request, stream_id: int)
      + close()
  }

  class HTTPProxy {
      - __init__(proxy_url: URL | bytes | str, proxy_auth: tuple[bytes | str, bytes | str] | None = None, proxy_headers: HeadersAsMapping | HeadersAsSequence | None = None, ssl_context: ssl.SSLContext | None = None, proxy_ssl_context: ssl.SSLContext | None = None, max_connections: int | None = 10, max_keepalive_connections: int | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, retries: int = 0, local_address: str | None = None, uds: str | None = None, network_backend: NetworkBackend | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None)
      + create_connection(origin: Origin): ConnectionInterface
  }

  class ForwardHTTPConnection {
      - __init__(proxy_origin: Origin, remote_origin: Origin, proxy_headers: HeadersAsMapping | HeadersAsSequence | None = None, keepalive_expiry: float | None = None, network_backend: NetworkBackend | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None, proxy_ssl_context: ssl.SSLContext | None = None)
      + handle_request(request: Request): Response
      + can_handle_request(origin: Origin): bool
      + close()
      + info(): str
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
  }

  class TunnelHTTPConnection {
      - __init__(proxy_origin: Origin, remote_origin: Origin, ssl_context: ssl.SSLContext | None = None, proxy_ssl_context: ssl.SSLContext | None = None, proxy_headers: typing.Sequence[tuple[bytes, bytes]] | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, network_backend: NetworkBackend | None = None, socket_options: typing.Iterable[SOCKET_OPTION] | None = None)
      + handle_request(request: Request): Response
      + can_handle_request(origin: Origin): bool
      + close()
      + info(): str
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
  }

  class RequestInterface {
      + request(method: bytes | str, url: URL | bytes | str): Response
      + stream(method: bytes | str, url: URL | bytes | str): typing.Iterator[Response]
      + handle_request(request: Request): Response
  }

  class ConnectionInterface {
      + close()
      + info(): str
      + can_handle_request(origin: Origin): bool
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
  }

  class SOCKSProxy {
      - __init__(proxy_url: URL | bytes | str, proxy_auth: tuple[bytes | str, bytes | str] | None = None, ssl_context: ssl.SSLContext | None = None, max_connections: int | None = 10, max_keepalive_connections: int | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, retries: int = 0, network_backend: NetworkBackend | None = None)
      + create_connection(origin: Origin): ConnectionInterface
  }

  class Socks5Connection {
      - __init__(proxy_origin: Origin, remote_origin: Origin, proxy_auth: tuple[bytes, bytes] | None = None, ssl_context: ssl.SSLContext | None = None, keepalive_expiry: float | None = None, http1: bool = True, http2: bool = False, network_backend: NetworkBackend | None = None)
      + handle_request(request: Request): Response
      + can_handle_request(origin: Origin): bool
      + close()
      + is_available(): bool
      + has_expired(): bool
      + is_idle(): bool
      + is_closed(): bool
      + info(): str
  }

  class HTTP2Connection {
      - __init__()
  }

  class SOCKSProxy {
      - __init__()
  }

}

package httpx {
  class Auth {
      + requires_request_body = False
      + requires_response_body = False
  --
      + auth_flow(request: Request): typing.Generator[Request, Response, None]
      + sync_auth_flow(request: Request): typing.Generator[Request, Response, None]
  }

  class FunctionAuth {
      - __init__(func: typing.Callable[[Request], Request])
      + auth_flow(request: Request): typing.Generator[Request, Response, None]
  }

  class BasicAuth {
      - __init__(username: str | bytes, password: str | bytes)
      + auth_flow(request: Request): typing.Generator[Request, Response, None]
  }

  class NetRCAuth {
      - __init__(file: str | None = None)
      + auth_flow(request: Request): typing.Generator[Request, Response, None]
  }

  class DigestAuth {
      - __init__(username: str | bytes, password: str | bytes)
      + auth_flow(request: Request): typing.Generator[Request, Response, None]
  }

  class UseClientDefault {
  }

  class ClientState {
      + UNOPENED = 1
      + OPENED = 2
      + CLOSED = 3
  }

  class BoundSyncStream {
      - __init__(stream: SyncByteStream, response: Response, start: float)
      + close()
  }

  class BoundAsyncStream {
      - __init__(stream: AsyncByteStream, response: Response, start: float)
  }

  class BaseClient {
      - __init__()
      + is_closed(): bool
      + trust_env(): bool
      + timeout(): Timeout
      + timeout(timeout: TimeoutTypes)
      + event_hooks(): dict[str, list[EventHook]]
      + event_hooks(event_hooks: dict[str, list[EventHook]])
      + auth(): Auth | None
      + auth(auth: AuthTypes)
      + base_url(): URL
      + base_url(url: URL | str)
      + headers(): Headers
      + headers(headers: HeaderTypes)
      + cookies(): Cookies
      + cookies(cookies: CookieTypes)
      + params(): QueryParams
      + params(params: QueryParamTypes)
      + build_request(method: str, url: URL | str): Request
  }

  class Client {
      - __init__()
      + request(method: str, url: URL | str): Response
      + stream(method: str, url: URL | str): typing.Iterator[Response]
      + send(request: Request): Response
      + get(url: URL | str): Response
      + options(url: URL | str): Response
      + head(url: URL | str): Response
      + post(url: URL | str): Response
      + put(url: URL | str): Response
      + patch(url: URL | str): Response
      + delete(url: URL | str): Response
      + close()
  }

  class AsyncClient {
      - __init__()
  }

  class UnsetType {
  }

  class Timeout {
      - __init__(timeout: TimeoutTypes | UnsetType = UNSET)
      + as_dict(): dict[str, float | None]
  }

  class Limits {
      - __init__()
  }

  class Proxy {
      - __init__(url: URL | str)
      + raw_auth(): tuple[bytes, bytes] | None
  }

  class ByteStream {
      - __init__(stream: bytes)
  }

  class IteratorByteStream {
      + CHUNK_SIZE = 65536
  --
      - __init__(stream: Iterable[bytes])
  }

  class AsyncIteratorByteStream {
      + CHUNK_SIZE = 65536
  --
      - __init__(stream: AsyncIterable[bytes])
  }

  class UnattachedStream {
  }

  class ContentDecoder {
      + decode(data: bytes): bytes
      + flush(): bytes
  }

  class IdentityDecoder {
      + decode(data: bytes): bytes
      + flush(): bytes
  }

  class DeflateDecoder {
      - __init__()
      + decode(data: bytes): bytes
      + flush(): bytes
  }

  class GZipDecoder {
      - __init__()
      + decode(data: bytes): bytes
      + flush(): bytes
  }

  class BrotliDecoder {
      - __init__()
      + decode(data: bytes): bytes
      + flush(): bytes
  }

  class ZStandardDecoder {
      - __init__()
      + decode(data: bytes): bytes
      + flush(): bytes
  }

  class MultiDecoder {
      - __init__(children: typing.Sequence[ContentDecoder])
      + decode(data: bytes): bytes
      + flush(): bytes
  }

  class ByteChunker {
      - __init__(chunk_size: int | None = None)
      + decode(content: bytes): list[bytes]
      + flush(): list[bytes]
  }

  class TextChunker {
      - __init__(chunk_size: int | None = None)
      + decode(content: str): list[str]
      + flush(): list[str]
  }

  class TextDecoder {
      - __init__(encoding: str = 'utf-8')
      + decode(data: bytes): str
      + flush(): str
  }

  class LineDecoder {
      - __init__()
      + decode(text: str): list[str]
      + flush(): list[str]
  }

  class HTTPError {
      - __init__(message: str)
      + request(): Request
      + request(request: Request)
  }

  class RequestError {
      - __init__(message: str)
  }

  class TransportError {
  }

  class TimeoutException {
  }

  class ConnectTimeout {
  }

  class ReadTimeout {
  }

  class WriteTimeout {
  }

  class PoolTimeout {
  }

  class NetworkError {
  }

  class ReadError {
  }

  class WriteError {
  }

  class ConnectError {
  }

  class CloseError {
  }

  class ProxyError {
  }

  class UnsupportedProtocol {
  }

  class ProtocolError {
  }

  class LocalProtocolError {
  }

  class RemoteProtocolError {
  }

  class DecodingError {
  }

  class TooManyRedirects {
  }

  class HTTPStatusError {
      - __init__(message: str)
  }

  class InvalidURL {
      - __init__(message: str)
  }

  class CookieConflict {
      - __init__(message: str)
  }

  class StreamError {
      - __init__(message: str)
  }

  class StreamConsumed {
      - __init__()
  }

  class StreamClosed {
      - __init__()
  }

  class ResponseNotRead {
      - __init__()
  }

  class RequestNotRead {
      - __init__()
  }

  class Headers {
      - __init__(headers: HeaderTypes | None = None, encoding: str | None = None)
      + encoding(): str
      + encoding(value: str)
      + raw(): list[tuple[bytes, bytes]]
      + keys(): typing.KeysView[str]
      + values(): typing.ValuesView[str]
      + items(): typing.ItemsView[str, str]
      + multi_items(): list[tuple[str, str]]
      + get(key: str, default: typing.Any = None): typing.Any
      + get_list(key: str, split_commas: bool = False): list[str]
      + update(headers: HeaderTypes | None = None)
      + copy(): Headers
  }

  class Request {
      - __init__(method: str, url: URL | str)
      + content(): bytes
      + read(): bytes
  }

  class Response {
      - __init__(status_code: int)
      + elapsed(): datetime.timedelta
      + elapsed(elapsed: datetime.timedelta)
      + request(): Request
      + request(value: Request)
      + http_version(): str
      + reason_phrase(): str
      + url(): URL
      + content(): bytes
      + text(): str
      + encoding(): str | None
      + encoding(value: str)
      + charset_encoding(): str | None
      + is_informational(): bool
      + is_success(): bool
      + is_redirect(): bool
      + is_client_error(): bool
      + is_server_error(): bool
      + is_error(): bool
      + has_redirect_location(): bool
      + raise_for_status(): Response
      + json(): typing.Any
      + cookies(): Cookies
      + links(): dict[str | None, dict[str, str]]
      + num_bytes_downloaded(): int
      + read(): bytes
      + iter_bytes(chunk_size: int | None = None): typing.Iterator[bytes]
      + iter_text(chunk_size: int | None = None): typing.Iterator[str]
      + iter_lines(): typing.Iterator[str]
      + iter_raw(chunk_size: int | None = None): typing.Iterator[bytes]
      + close()
  }

  class Cookies {
      - __init__(cookies: CookieTypes | None = None)
      + extract_cookies(response: Response)
      + set_cookie_header(request: Request)
      + set(name: str, value: str, domain: str = '', path: str = '/')
      + get(name: str, default: str | None = None, domain: str | None = None, path: str | None = None): str | None
      + delete(name: str, domain: str | None = None, path: str | None = None)
      + clear(domain: str | None = None, path: str | None = None)
      + update(cookies: CookieTypes | None = None)
  }

  class DataField {
      - __init__(name: str, value: str | bytes | int | float | None)
      + render_headers(): bytes
      + render_data(): bytes
      + get_length(): int
      + render(): typing.Iterator[bytes]
  }

  class FileField {
      + CHUNK_SIZE = 64 * 1024
  --
      - __init__(name: str, value: FileTypes)
      + get_length(): int | None
      + render_headers(): bytes
      + render_data(): typing.Iterator[bytes]
      + render(): typing.Iterator[bytes]
  }

  class MultipartStream {
      - __init__(data: RequestData, files: RequestFiles, boundary: bytes | None = None)
      + iter_chunks(): typing.Iterator[bytes]
      + get_content_length(): int | None
      + get_headers(): dict[str, str]
  }

  class codes {
      + CONTINUE = (100, 'Continue')
      + SWITCHING_PROTOCOLS = (101, 'Switching Protocols')
      + PROCESSING = (102, 'Processing')
      + EARLY_HINTS = (103, 'Early Hints')
      + OK = (200, 'OK')
      + CREATED = (201, 'Created')
      + ACCEPTED = (202, 'Accepted')
      + NON_AUTHORITATIVE_INFORMATION = (203, 'Non-Authoritative Information')
      + NO_CONTENT = (204, 'No Content')
      + RESET_CONTENT = (205, 'Reset Content')
      + PARTIAL_CONTENT = (206, 'Partial Content')
      + MULTI_STATUS = (207, 'Multi-Status')
      + ALREADY_REPORTED = (208, 'Already Reported')
      + IM_USED = (226, 'IM Used')
      + MULTIPLE_CHOICES = (300, 'Multiple Choices')
      + MOVED_PERMANENTLY = (301, 'Moved Permanently')
      + FOUND = (302, 'Found')
      + SEE_OTHER = (303, 'See Other')
      + NOT_MODIFIED = (304, 'Not Modified')
      + USE_PROXY = (305, 'Use Proxy')
      + TEMPORARY_REDIRECT = (307, 'Temporary Redirect')
      + PERMANENT_REDIRECT = (308, 'Permanent Redirect')
      + BAD_REQUEST = (400, 'Bad Request')
      + UNAUTHORIZED = (401, 'Unauthorized')
      + PAYMENT_REQUIRED = (402, 'Payment Required')
      + FORBIDDEN = (403, 'Forbidden')
      + NOT_FOUND = (404, 'Not Found')
      + METHOD_NOT_ALLOWED = (405, 'Method Not Allowed')
      + NOT_ACCEPTABLE = (406, 'Not Acceptable')
      + PROXY_AUTHENTICATION_REQUIRED = (407, 'Proxy Authentication Required')
      + REQUEST_TIMEOUT = (408, 'Request Timeout')
      + CONFLICT = (409, 'Conflict')
      + GONE = (410, 'Gone')
      + LENGTH_REQUIRED = (411, 'Length Required')
      + PRECONDITION_FAILED = (412, 'Precondition Failed')
      + REQUEST_ENTITY_TOO_LARGE = (413, 'Request Entity Too Large')
      + REQUEST_URI_TOO_LONG = (414, 'Request-URI Too Long')
      + UNSUPPORTED_MEDIA_TYPE = (415, 'Unsupported Media Type')
      + REQUESTED_RANGE_NOT_SATISFIABLE = (416, 'Requested Range Not Satisfiable')
      + EXPECTATION_FAILED = (417, 'Expectation Failed')
      + IM_A_TEAPOT = (418, "I'm a teapot")
      + MISDIRECTED_REQUEST = (421, 'Misdirected Request')
      + UNPROCESSABLE_ENTITY = (422, 'Unprocessable Entity')
      + LOCKED = (423, 'Locked')
      + FAILED_DEPENDENCY = (424, 'Failed Dependency')
      + TOO_EARLY = (425, 'Too Early')
      + UPGRADE_REQUIRED = (426, 'Upgrade Required')
      + PRECONDITION_REQUIRED = (428, 'Precondition Required')
      + TOO_MANY_REQUESTS = (429, 'Too Many Requests')
      + REQUEST_HEADER_FIELDS_TOO_LARGE = (431, 'Request Header Fields Too Large')
      + UNAVAILABLE_FOR_LEGAL_REASONS = (451, 'Unavailable For Legal Reasons')
      + INTERNAL_SERVER_ERROR = (500, 'Internal Server Error')
      + NOT_IMPLEMENTED = (501, 'Not Implemented')
      + BAD_GATEWAY = (502, 'Bad Gateway')
      + SERVICE_UNAVAILABLE = (503, 'Service Unavailable')
      + GATEWAY_TIMEOUT = (504, 'Gateway Timeout')
      + HTTP_VERSION_NOT_SUPPORTED = (505, 'HTTP Version Not Supported')
      + VARIANT_ALSO_NEGOTIATES = (506, 'Variant Also Negotiates')
      + INSUFFICIENT_STORAGE = (507, 'Insufficient Storage')
      + LOOP_DETECTED = (508, 'Loop Detected')
      + NOT_EXTENDED = (510, 'Not Extended')
      + NETWORK_AUTHENTICATION_REQUIRED = (511, 'Network Authentication Required')
  --
      + {classmethod} get_reason_phrase(cls, value: int): str
      + {classmethod} is_informational(cls, value: int): bool
      + {classmethod} is_success(cls, value: int): bool
      + {classmethod} is_redirect(cls, value: int): bool
      + {classmethod} is_client_error(cls, value: int): bool
      + {classmethod} is_server_error(cls, value: int): bool
      + {classmethod} is_error(cls, value: int): bool
  }

  class SyncByteStream {
      + close()
  }

  class AsyncByteStream {
  }

  class ParseResult {
      + scheme: str
      + userinfo: str
      + host: str
      + port: int | None
      + path: str
      + query: str | None
      + fragment: str | None
  --
      + authority(): str
      + netloc(): str
      + copy_with(): ParseResult
  }

  class URL {
      - __init__(url: URL | str = '')
      + scheme(): str
      + raw_scheme(): bytes
      + userinfo(): bytes
      + username(): str
      + password(): str
      + host(): str
      + raw_host(): bytes
      + port(): int | None
      + netloc(): bytes
      + path(): str
      + query(): bytes
      + params(): QueryParams
      + raw_path(): bytes
      + fragment(): str
      + is_absolute_url(): bool
      + is_relative_url(): bool
      + copy_with(): URL
      + copy_set_param(key: str, value: typing.Any = None): URL
      + copy_add_param(key: str, value: typing.Any = None): URL
      + copy_remove_param(key: str): URL
      + copy_merge_params(params: QueryParamTypes): URL
      + join(url: URL | str): URL
      + raw(): tuple[bytes, bytes, int, bytes]
  }

  class QueryParams {
      - __init__()
      + keys(): typing.KeysView[str]
      + values(): typing.ValuesView[str]
      + items(): typing.ItemsView[str, str]
      + multi_items(): list[tuple[str, str]]
      + get(key: typing.Any, default: typing.Any = None): typing.Any
      + get_list(key: str): list[str]
      + set(key: str, value: typing.Any = None): QueryParams
      + add(key: str, value: typing.Any = None): QueryParams
      + remove(key: str): QueryParams
      + merge(params: QueryParamTypes | None = None): QueryParams
      + update(params: QueryParamTypes | None = None)
  }

  class URLPattern {
      - __init__(pattern: str)
      + matches(other: URL): bool
      + priority(): tuple[int, int, int]
  }

}

package _transports {
  class ASGIResponseStream {
      - __init__(body: list[bytes])
  }

  class ASGITransport {
      - __init__(app: _ASGIApp, raise_app_exceptions: bool = True, root_path: str = '', client: tuple[str, int] = ('127.0.0.1', 123))
  }

  class BaseTransport {
      + handle_request(request: Request): Response
      + close()
  }

  class AsyncBaseTransport {
  }

  class ResponseStream {
      - __init__(httpcore_stream: typing.Iterable[bytes])
      + close()
  }

  class HTTPTransport {
      - __init__(verify: ssl.SSLContext | str | bool = True, cert: CertTypes | None = None, trust_env: bool = True, http1: bool = True, http2: bool = False, limits: Limits = DEFAULT_LIMITS, proxy: ProxyTypes | None = None, uds: str | None = None, local_address: str | None = None, retries: int = 0, socket_options: typing.Iterable[SOCKET_OPTION] | None = None)
      + handle_request(request: Request): Response
      + close()
  }

  class AsyncResponseStream {
      - __init__(httpcore_stream: typing.AsyncIterable[bytes])
  }

  class AsyncHTTPTransport {
      - __init__(verify: ssl.SSLContext | str | bool = True, cert: CertTypes | None = None, trust_env: bool = True, http1: bool = True, http2: bool = False, limits: Limits = DEFAULT_LIMITS, proxy: ProxyTypes | None = None, uds: str | None = None, local_address: str | None = None, retries: int = 0, socket_options: typing.Iterable[SOCKET_OPTION] | None = None)
  }

  class MockTransport {
      - __init__(handler: SyncHandler | AsyncHandler)
      + handle_request(request: Request): Response
  }

  class WSGIByteStream {
      - __init__(result: typing.Iterable[bytes])
      + close()
  }

  class WSGITransport {
      - __init__(app: WSGIApplication, raise_app_exceptions: bool = True, script_name: str = '', remote_addr: str = '127.0.0.1', wsgi_errors: typing.TextIO | None = None)
      + handle_request(request: Request): Response
  }

}

package idna {
  class Codec {
      + encode(data: str, errors: str = 'strict'): Tuple[bytes, int]
      + decode(data: bytes, errors: str = 'strict'): Tuple[str, int]
  }

  class IncrementalEncoder {
  }

  class IncrementalDecoder {
  }

  class StreamWriter {
  }

  class StreamReader {
  }

  class IDNAError {
  }

  class IDNABidiError {
  }

  class InvalidCodepoint {
  }

  class InvalidCodepointContext {
  }

  class Codec {
      + encode(data: str, errors: str = 'strict'): Tuple[bytes, int]
      + decode(data: bytes, errors: str = 'strict'): Tuple[str, int]
  }

  class IncrementalEncoder {
  }

  class IncrementalDecoder {
  }

  class StreamWriter {
  }

  class StreamReader {
  }

  class IDNAError {
  }

  class IDNABidiError {
  }

  class InvalidCodepoint {
  }

  class InvalidCodepointContext {
  }

}

package jinja2 {
  class Bucket {
      - __init__(environment: 'Environment', key: str, checksum: str)
      + reset()
      + load_bytecode(f: t.BinaryIO)
      + write_bytecode(f: t.IO[bytes])
      + bytecode_from_string(string: bytes)
      + bytecode_to_string(): bytes
  }

  class BytecodeCache {
      + load_bytecode(bucket: Bucket)
      + dump_bytecode(bucket: Bucket)
      + clear()
      + get_cache_key(name: str, filename: t.Optional[t.Union[str]] = None): str
      + get_source_checksum(source: str): str
      + get_bucket(environment: 'Environment', name: str, filename: t.Optional[str], source: str): Bucket
      + set_bucket(bucket: Bucket)
  }

  class FileSystemBytecodeCache {
      - __init__(directory: t.Optional[str] = None, pattern: str = '__jinja2_%s.cache')
      + load_bytecode(bucket: Bucket)
      + dump_bytecode(bucket: Bucket)
      + clear()
  }

  class MemcachedBytecodeCache {
      - __init__(client: '_MemcachedClient', prefix: str = 'jinja2/bytecode/', timeout: t.Optional[int] = None, ignore_memcache_errors: bool = True)
      + load_bytecode(bucket: Bucket)
      + dump_bytecode(bucket: Bucket)
  }

  class MacroRef {
      - __init__(node: t.Union[nodes.Macro, nodes.CallBlock])
  }

  class Frame {
      - __init__(eval_ctx: EvalContext, parent: t.Optional['Frame'] = None, level: t.Optional[int] = None)
      + copy(): 'te.Self'
      + inner(isolated: bool = False): 'Frame'
      + soft(): 'te.Self'
  }

  class VisitorExit {
  }

  class DependencyFinderVisitor {
      - __init__()
      + visit_Filter(node: nodes.Filter)
      + visit_Test(node: nodes.Test)
      + visit_Block(node: nodes.Block)
  }

  class UndeclaredNameVisitor {
      - __init__(names: t.Iterable[str])
      + visit_Name(node: nodes.Name)
      + visit_Block(node: nodes.Block)
  }

  class CompilerExit {
  }

  class CodeGenerator {
      + visit_Add = _make_binop('+')
      + visit_Sub = _make_binop('-')
      + visit_Mul = _make_binop('*')
      + visit_Div = _make_binop('/')
      + visit_FloorDiv = _make_binop('//')
      + visit_Pow = _make_binop('**')
      + visit_Mod = _make_binop('%')
      + visit_And = _make_binop('and')
      + visit_Or = _make_binop('or')
      + visit_Pos = _make_unop('+')
      + visit_Neg = _make_unop('-')
      + visit_Not = _make_unop('not ')
  --
      - __init__(environment: 'Environment', name: t.Optional[str], filename: t.Optional[str], stream: t.Optional[t.TextIO] = None, defer_init: bool = False, optimized: bool = True)
      + optimized(): bool
      + fail(msg: str, lineno: int): 'te.NoReturn'
      + temporary_identifier(): str
      + buffer(frame: Frame)
      + return_buffer_contents(frame: Frame, force_unescaped: bool = False)
      + indent()
      + outdent(step: int = 1)
      + start_write(frame: Frame, node: t.Optional[nodes.Node] = None)
      + end_write(frame: Frame)
      + simple_write(s: str, frame: Frame, node: t.Optional[nodes.Node] = None)
      + blockvisit(nodes: t.Iterable[nodes.Node], frame: Frame)
      + write(x: str)
      + writeline(x: str, node: t.Optional[nodes.Node] = None, extra: int = 0)
      + newline(node: t.Optional[nodes.Node] = None, extra: int = 0)
      + signature(node: t.Union[nodes.Call, nodes.Filter, nodes.Test], frame: Frame, extra_kwargs: t.Optional[t.Mapping[str, t.Any]] = None)
      + pull_dependencies(nodes: t.Iterable[nodes.Node])
      + enter_frame(frame: Frame)
      + leave_frame(frame: Frame, with_python_scope: bool = False)
      + choose_async(async_value: str = 'async ', sync_value: str = ''): str
      + func(name: str): str
      + macro_body(node: t.Union[nodes.Macro, nodes.CallBlock], frame: Frame): t.Tuple[Frame, MacroRef]
      + macro_def(macro_ref: MacroRef, frame: Frame)
      + position(node: nodes.Node): str
      + dump_local_context(frame: Frame): str
      + write_commons()
      + push_parameter_definitions(frame: Frame)
      + pop_parameter_definitions()
      + mark_parameter_stored(target: str)
      + push_context_reference(target: str)
      + pop_context_reference()
      + get_context_ref(): str
      + get_resolve_func(): str
      + derive_context(frame: Frame): str
      + parameter_is_undeclared(target: str): bool
      + push_assign_tracking()
      + pop_assign_tracking(frame: Frame)
      + visit_Template(node: nodes.Template, frame: t.Optional[Frame] = None)
      + visit_Block(node: nodes.Block, frame: Frame)
      + visit_Extends(node: nodes.Extends, frame: Frame)
      + visit_Include(node: nodes.Include, frame: Frame)
      + visit_Import(node: nodes.Import, frame: Frame)
      + visit_FromImport(node: nodes.FromImport, frame: Frame)
      + visit_For(node: nodes.For, frame: Frame)
      + visit_If(node: nodes.If, frame: Frame)
      + visit_Macro(node: nodes.Macro, frame: Frame)
      + visit_CallBlock(node: nodes.CallBlock, frame: Frame)
      + visit_FilterBlock(node: nodes.FilterBlock, frame: Frame)
      + visit_With(node: nodes.With, frame: Frame)
      + visit_ExprStmt(node: nodes.ExprStmt, frame: Frame)
      + visit_Output(node: nodes.Output, frame: Frame)
      + visit_Assign(node: nodes.Assign, frame: Frame)
      + visit_AssignBlock(node: nodes.AssignBlock, frame: Frame)
      + visit_Name(node: nodes.Name, frame: Frame)
      + visit_NSRef(node: nodes.NSRef, frame: Frame)
      + visit_Const(node: nodes.Const, frame: Frame)
      + visit_TemplateData(node: nodes.TemplateData, frame: Frame)
      + visit_Tuple(node: nodes.Tuple, frame: Frame)
      + visit_List(node: nodes.List, frame: Frame)
      + visit_Dict(node: nodes.Dict, frame: Frame)
      + visit_Concat(node: nodes.Concat, frame: Frame)
      + visit_Compare(node: nodes.Compare, frame: Frame)
      + visit_Operand(node: nodes.Operand, frame: Frame)
      + visit_Getattr(node: nodes.Getattr, frame: Frame)
      + visit_Getitem(node: nodes.Getitem, frame: Frame)
      + visit_Slice(node: nodes.Slice, frame: Frame)
      + visit_Filter(node: nodes.Filter, frame: Frame)
      + visit_Test(node: nodes.Test, frame: Frame)
      + visit_CondExpr(node: nodes.CondExpr, frame: Frame)
      + visit_Call(node: nodes.Call, frame: Frame, forward_caller: bool = False)
      + visit_Keyword(node: nodes.Keyword, frame: Frame)
      + visit_MarkSafe(node: nodes.MarkSafe, frame: Frame)
      + visit_MarkSafeIfAutoescape(node: nodes.MarkSafeIfAutoescape, frame: Frame)
      + visit_EnvironmentAttribute(node: nodes.EnvironmentAttribute, frame: Frame)
      + visit_ExtensionAttribute(node: nodes.ExtensionAttribute, frame: Frame)
      + visit_ImportedName(node: nodes.ImportedName, frame: Frame)
      + visit_InternalName(node: nodes.InternalName, frame: Frame)
      + visit_ContextReference(node: nodes.ContextReference, frame: Frame)
      + visit_DerivedContextReference(node: nodes.DerivedContextReference, frame: Frame)
      + visit_Continue(node: nodes.Continue, frame: Frame)
      + visit_Break(node: nodes.Break, frame: Frame)
      + visit_Scope(node: nodes.Scope, frame: Frame)
      + visit_OverlayScope(node: nodes.OverlayScope, frame: Frame)
      + visit_EvalContextModifier(node: nodes.EvalContextModifier, frame: Frame)
      + visit_ScopedEvalContextModifier(node: nodes.ScopedEvalContextModifier, frame: Frame)
  }

  class Environment {
      + sandboxed = False
      + overlayed = False
      + linked_to: t.Optional['Environment'] = None
      + shared = False
      + code_generator_class: t.Type['CodeGenerator'] = CodeGenerator
      + concat = ''.join
      + context_class: t.Type[Context] = Context
      + template_class: t.Type['Template']
  --
      - __init__(block_start_string: str = BLOCK_START_STRING, block_end_string: str = BLOCK_END_STRING, variable_start_string: str = VARIABLE_START_STRING, variable_end_string: str = VARIABLE_END_STRING, comment_start_string: str = COMMENT_START_STRING, comment_end_string: str = COMMENT_END_STRING, line_statement_prefix: t.Optional[str] = LINE_STATEMENT_PREFIX, line_comment_prefix: t.Optional[str] = LINE_COMMENT_PREFIX, trim_blocks: bool = TRIM_BLOCKS, lstrip_blocks: bool = LSTRIP_BLOCKS, newline_sequence: "te.Literal['\\n', '\\r\\n', '\\r']" = NEWLINE_SEQUENCE, keep_trailing_newline: bool = KEEP_TRAILING_NEWLINE, extensions: t.Sequence[t.Union[str, t.Type['Extension']]] = (), optimized: bool = True, undefined: t.Type[Undefined] = Undefined, finalize: t.Optional[t.Callable[..., t.Any]] = None, autoescape: t.Union[bool, t.Callable[[t.Optional[str]], bool]] = False, loader: t.Optional['BaseLoader'] = None, cache_size: int = 400, auto_reload: bool = True, bytecode_cache: t.Optional['BytecodeCache'] = None, enable_async: bool = False)
      + add_extension(extension: t.Union[str, t.Type['Extension']])
      + extend()
      + overlay(block_start_string: str = missing, block_end_string: str = missing, variable_start_string: str = missing, variable_end_string: str = missing, comment_start_string: str = missing, comment_end_string: str = missing, line_statement_prefix: t.Optional[str] = missing, line_comment_prefix: t.Optional[str] = missing, trim_blocks: bool = missing, lstrip_blocks: bool = missing, newline_sequence: "te.Literal['\\n', '\\r\\n', '\\r']" = missing, keep_trailing_newline: bool = missing, extensions: t.Sequence[t.Union[str, t.Type['Extension']]] = missing, optimized: bool = missing, undefined: t.Type[Undefined] = missing, finalize: t.Optional[t.Callable[..., t.Any]] = missing, autoescape: t.Union[bool, t.Callable[[t.Optional[str]], bool]] = missing, loader: t.Optional['BaseLoader'] = missing, cache_size: int = missing, auto_reload: bool = missing, bytecode_cache: t.Optional['BytecodeCache'] = missing, enable_async: bool = missing): 'te.Self'
      + lexer(): Lexer
      + iter_extensions(): t.Iterator['Extension']
      + getitem(obj: t.Any, argument: t.Union[str, t.Any]): t.Union[t.Any, Undefined]
      + getattr(obj: t.Any, attribute: str): t.Any
      + call_filter(name: str, value: t.Any, args: t.Optional[t.Sequence[t.Any]] = None, kwargs: t.Optional[t.Mapping[str, t.Any]] = None, context: t.Optional[Context] = None, eval_ctx: t.Optional[EvalContext] = None): t.Any
      + call_test(name: str, value: t.Any, args: t.Optional[t.Sequence[t.Any]] = None, kwargs: t.Optional[t.Mapping[str, t.Any]] = None, context: t.Optional[Context] = None, eval_ctx: t.Optional[EvalContext] = None): t.Any
      + parse(source: str, name: t.Optional[str] = None, filename: t.Optional[str] = None): nodes.Template
      + lex(source: str, name: t.Optional[str] = None, filename: t.Optional[str] = None): t.Iterator[t.Tuple[int, str, str]]
      + preprocess(source: str, name: t.Optional[str] = None, filename: t.Optional[str] = None): str
      + compile(source: t.Union[str, nodes.Template], name: t.Optional[str] = None, filename: t.Optional[str] = None, raw: 'te.Literal[False]' = False, defer_init: bool = False): CodeType
      + compile(source: t.Union[str, nodes.Template], name: t.Optional[str] = None, filename: t.Optional[str] = None, raw: 'te.Literal[True]' = ..., defer_init: bool = False): str
      + compile(source: t.Union[str, nodes.Template], name: t.Optional[str] = None, filename: t.Optional[str] = None, raw: bool = False, defer_init: bool = False): t.Union[str, CodeType]
      + compile_expression(source: str, undefined_to_none: bool = True): 'TemplateExpression'
      + compile_templates(target: t.Union[str, 'os.PathLike[str]'], extensions: t.Optional[t.Collection[str]] = None, filter_func: t.Optional[t.Callable[[str], bool]] = None, zip: t.Optional[str] = 'deflated', log_function: t.Optional[t.Callable[[str], None]] = None, ignore_errors: bool = True)
      + list_templates(extensions: t.Optional[t.Collection[str]] = None, filter_func: t.Optional[t.Callable[[str], bool]] = None): t.List[str]
      + handle_exception(source: t.Optional[str] = None): 'te.NoReturn'
      + join_path(template: str, parent: str): str
      + get_template(name: t.Union[str, 'Template'], parent: t.Optional[str] = None, globals: t.Optional[t.MutableMapping[str, t.Any]] = None): 'Template'
      + select_template(names: t.Iterable[t.Union[str, 'Template']], parent: t.Optional[str] = None, globals: t.Optional[t.MutableMapping[str, t.Any]] = None): 'Template'
      + get_or_select_template(template_name_or_list: t.Union[str, 'Template', t.List[t.Union[str, 'Template']]], parent: t.Optional[str] = None, globals: t.Optional[t.MutableMapping[str, t.Any]] = None): 'Template'
      + from_string(source: t.Union[str, nodes.Template], globals: t.Optional[t.MutableMapping[str, t.Any]] = None, template_class: t.Optional[t.Type['Template']] = None): 'Template'
      + make_globals(d: t.Optional[t.MutableMapping[str, t.Any]]): t.MutableMapping[str, t.Any]
  }

  class Template {
      + environment_class: t.Type[Environment] = Environment
      + environment: Environment
      + globals: t.MutableMapping[str, t.Any]
      + name: t.Optional[str]
      + filename: t.Optional[str]
      + blocks: t.Dict[str, t.Callable[[Context], t.Iterator[str]]]
      + root_render_func: t.Callable[[Context], t.Iterator[str]]
  --
      + {classmethod} from_code(cls, environment: Environment, code: CodeType, globals: t.MutableMapping[str, t.Any], uptodate: t.Optional[t.Callable[[], bool]] = None): 'Template'
      + {classmethod} from_module_dict(cls, environment: Environment, module_dict: t.MutableMapping[str, t.Any], globals: t.MutableMapping[str, t.Any]): 'Template'
      + render(): str
      + stream(): 'TemplateStream'
      + generate(): t.Iterator[str]
      + new_context(vars: t.Optional[t.Dict[str, t.Any]] = None, shared: bool = False, locals: t.Optional[t.Mapping[str, t.Any]] = None): Context
      + make_module(vars: t.Optional[t.Dict[str, t.Any]] = None, shared: bool = False, locals: t.Optional[t.Mapping[str, t.Any]] = None): 'TemplateModule'
      + module(): 'TemplateModule'
      + get_corresponding_lineno(lineno: int): int
      + is_up_to_date(): bool
      + debug_info(): t.List[t.Tuple[int, int]]
  }

  class TemplateModule {
      - __init__(template: Template, context: Context, body_stream: t.Optional[t.Iterable[str]] = None)
  }

  class TemplateExpression {
      - __init__(template: Template, undefined_to_none: bool)
  }

  class TemplateStream {
      - __init__(gen: t.Iterator[str])
      + dump(fp: t.Union[str, t.IO[bytes]], encoding: t.Optional[str] = None, errors: t.Optional[str] = 'strict')
      + disable_buffering()
      + enable_buffering(size: int = 5)
  }

  class TemplateError {
      - __init__(message: t.Optional[str] = None)
      + message(): t.Optional[str]
  }

  class TemplateNotFound {
      + message: t.Optional[str] = None
  --
      - __init__(name: t.Optional[t.Union[str, 'Undefined']], message: t.Optional[str] = None)
  }

  class TemplatesNotFound {
      - __init__(names: t.Sequence[t.Union[str, 'Undefined']] = (), message: t.Optional[str] = None)
  }

  class TemplateSyntaxError {
      - __init__(message: str, lineno: int, name: t.Optional[str] = None, filename: t.Optional[str] = None)
  }

  class TemplateAssertionError {
  }

  class TemplateRuntimeError {
  }

  class UndefinedError {
  }

  class SecurityError {
  }

  class FilterArgumentError {
  }

  class Extension {
      + identifier: t.ClassVar[str]
      + tags: t.Set[str] = set()
      + priority = 100
  --
      - __init__(environment: Environment)
      + bind(environment: Environment): 'te.Self'
      + preprocess(source: str, name: t.Optional[str], filename: t.Optional[str] = None): str
      + filter_stream(stream: 'TokenStream'): t.Union['TokenStream', t.Iterable['Token']]
      + parse(parser: 'Parser'): t.Union[nodes.Node, t.List[nodes.Node]]
      + attr(name: str, lineno: t.Optional[int] = None): nodes.ExtensionAttribute
      + call_method(name: str, args: t.Optional[t.List[nodes.Expr]] = None, kwargs: t.Optional[t.List[nodes.Keyword]] = None, dyn_args: t.Optional[nodes.Expr] = None, dyn_kwargs: t.Optional[nodes.Expr] = None, lineno: t.Optional[int] = None): nodes.Call
  }

  class InternationalizationExtension {
      + tags = {'trans'}
  --
      - __init__(environment: Environment)
      + parse(parser: 'Parser'): t.Union[nodes.Node, t.List[nodes.Node]]
  }

  class ExprStmtExtension {
      + tags = {'do'}
  --
      + parse(parser: 'Parser'): nodes.ExprStmt
  }

  class LoopControlExtension {
      + tags = {'break', 'continue'}
  --
      + parse(parser: 'Parser'): t.Union[nodes.Break, nodes.Continue]
  }

  class DebugExtension {
      + tags = {'debug'}
  --
      + parse(parser: 'Parser'): nodes.Output
  }

  class HasHTML {
  }

  class Symbols {
      - __init__(parent: t.Optional['Symbols'] = None, level: t.Optional[int] = None)
      + analyze_node(node: nodes.Node)
      + find_load(target: str): t.Optional[t.Any]
      + find_ref(name: str): t.Optional[str]
      + ref(name: str): str
      + copy(): 'te.Self'
      + store(name: str)
      + declare_parameter(name: str): str
      + load(name: str)
      + branch_update(branch_symbols: t.Sequence['Symbols'])
      + dump_stores(): t.Dict[str, str]
      + dump_param_targets(): t.Set[str]
  }

  class RootVisitor {
      + visit_Template = _simple_visit
      + visit_Block = _simple_visit
      + visit_Macro = _simple_visit
      + visit_FilterBlock = _simple_visit
      + visit_Scope = _simple_visit
      + visit_If = _simple_visit
      + visit_ScopedEvalContextModifier = _simple_visit
  --
      - __init__(symbols: 'Symbols')
      + visit_AssignBlock(node: nodes.AssignBlock)
      + visit_CallBlock(node: nodes.CallBlock)
      + visit_OverlayScope(node: nodes.OverlayScope)
      + visit_For(node: nodes.For, for_branch: str = 'body')
      + visit_With(node: nodes.With)
      + generic_visit(node: nodes.Node)
  }

  class FrameSymbolVisitor {
      - __init__(symbols: 'Symbols')
      + visit_Name(node: nodes.Name, store_as_param: bool = False)
      + visit_NSRef(node: nodes.NSRef)
      + visit_If(node: nodes.If)
      + visit_Macro(node: nodes.Macro)
      + visit_Import(node: nodes.Import)
      + visit_FromImport(node: nodes.FromImport)
      + visit_Assign(node: nodes.Assign)
      + visit_For(node: nodes.For)
      + visit_CallBlock(node: nodes.CallBlock)
      + visit_FilterBlock(node: nodes.FilterBlock)
      + visit_With(node: nodes.With)
      + visit_AssignBlock(node: nodes.AssignBlock)
      + visit_Scope(node: nodes.Scope)
      + visit_Block(node: nodes.Block)
      + visit_OverlayScope(node: nodes.OverlayScope)
  }

  class Failure {
      - __init__(message: str, cls: t.Type[TemplateSyntaxError] = TemplateSyntaxError)
  }

  class Token {
      + lineno: int
      + type: str
      + value: str
  --
      + test(expr: str): bool
      + test_any(): bool
  }

  class TokenStreamIterator {
      - __init__(stream: 'TokenStream')
  }

  class TokenStream {
      - __init__(generator: t.Iterable[Token], name: t.Optional[str], filename: t.Optional[str])
      + eos(): bool
      + push(token: Token)
      + look(): Token
      + skip(n: int = 1)
      + next_if(expr: str): t.Optional[Token]
      + skip_if(expr: str): bool
      + close()
      + expect(expr: str): Token
  }

  class OptionalLStrip {
  }

  class Lexer {
      - __init__(environment: 'Environment')
      + tokenize(source: str, name: t.Optional[str] = None, filename: t.Optional[str] = None, state: t.Optional[str] = None): TokenStream
      + wrap(stream: t.Iterable[t.Tuple[int, str, str]], name: t.Optional[str] = None, filename: t.Optional[str] = None): t.Iterator[Token]
      + tokeniter(source: str, name: t.Optional[str], filename: t.Optional[str] = None, state: t.Optional[str] = None): t.Iterator[t.Tuple[int, str, str]]
  }

  class BaseLoader {
      + has_source_access = True
  --
      + get_source(environment: 'Environment', template: str): t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
      + list_templates(): t.List[str]
      + load(environment: 'Environment', name: str, globals: t.Optional[t.MutableMapping[str, t.Any]] = None): 'Template'
  }

  class FileSystemLoader {
      - __init__(searchpath: t.Union[str, 'os.PathLike[str]', t.Sequence[t.Union[str, 'os.PathLike[str]']]], encoding: str = 'utf-8', followlinks: bool = False)
      + get_source(environment: 'Environment', template: str): t.Tuple[str, str, t.Callable[[], bool]]
      + list_templates(): t.List[str]
  }

  class PackageLoader {
      - __init__(package_name: str, package_path: 'str' = 'templates', encoding: str = 'utf-8')
      + get_source(environment: 'Environment', template: str): t.Tuple[str, str, t.Optional[t.Callable[[], bool]]]
      + list_templates(): t.List[str]
  }

  class DictLoader {
      - __init__(mapping: t.Mapping[str, str])
      + get_source(environment: 'Environment', template: str): t.Tuple[str, None, t.Callable[[], bool]]
      + list_templates(): t.List[str]
  }

  class FunctionLoader {
      - __init__(load_func: t.Callable[[str], t.Optional[t.Union[str, t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]]]])
      + get_source(environment: 'Environment', template: str): t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
  }

  class PrefixLoader {
      - __init__(mapping: t.Mapping[str, BaseLoader], delimiter: str = '/')
      + get_loader(template: str): t.Tuple[BaseLoader, str]
      + get_source(environment: 'Environment', template: str): t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
      + load(environment: 'Environment', name: str, globals: t.Optional[t.MutableMapping[str, t.Any]] = None): 'Template'
      + list_templates(): t.List[str]
  }

  class ChoiceLoader {
      - __init__(loaders: t.Sequence[BaseLoader])
      + get_source(environment: 'Environment', template: str): t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
      + load(environment: 'Environment', name: str, globals: t.Optional[t.MutableMapping[str, t.Any]] = None): 'Template'
      + list_templates(): t.List[str]
  }

  class ModuleLoader {
      + has_source_access = False
  --
      - __init__(path: t.Union[str, 'os.PathLike[str]', t.Sequence[t.Union[str, 'os.PathLike[str]']]])
      + {static} get_template_key(name: str): str
      + {static} get_module_filename(name: str): str
      + load(environment: 'Environment', name: str, globals: t.Optional[t.MutableMapping[str, t.Any]] = None): 'Template'
  }

  class TrackingCodeGenerator {
      - __init__(environment: 'Environment')
      + write(x: str)
      + enter_frame(frame: Frame)
  }

  class NativeCodeGenerator {
  }

  class NativeEnvironment {
      + code_generator_class = NativeCodeGenerator
      + concat = staticmethod(native_concat)
  }

  class NativeTemplate {
      + environment_class = NativeEnvironment
  --
      + render(): t.Any
  }

  class Impossible {
  }

  class NodeType {
  }

  class EvalContext {
      - __init__(environment: 'Environment', template_name: t.Optional[str] = None)
      + save(): t.Mapping[str, t.Any]
      + revert(old: t.Mapping[str, t.Any])
  }

  class Node {
      + fields: t.Tuple[str, ...] = ()
      + attributes: t.Tuple[str, ...] = ('lineno', 'environment')
      + abstract = True
      + lineno: int
      + environment: t.Optional['Environment']
  --
      - __init__()
      + iter_fields(exclude: t.Optional[t.Container[str]] = None, only: t.Optional[t.Container[str]] = None): t.Iterator[t.Tuple[str, t.Any]]
      + iter_child_nodes(exclude: t.Optional[t.Container[str]] = None, only: t.Optional[t.Container[str]] = None): t.Iterator['Node']
      + find(node_type: t.Type[_NodeBound]): t.Optional[_NodeBound]
      + find_all(node_type: t.Union[t.Type[_NodeBound], t.Tuple[t.Type[_NodeBound], ...]]): t.Iterator[_NodeBound]
      + set_ctx(ctx: str): 'Node'
      + set_lineno(lineno: int, override: bool = False): 'Node'
      + set_environment(environment: 'Environment'): 'Node'
      + dump(): str
  }

  class Stmt {
      + abstract = True
  }

  class Helper {
      + abstract = True
  }

  class Template {
      + fields = ('body',)
      + body: t.List[Node]
  }

  class Output {
      + fields = ('nodes',)
      + nodes: t.List['Expr']
  }

  class Extends {
      + fields = ('template',)
      + template: 'Expr'
  }

  class For {
      + fields = ('target', 'iter', 'body', 'else_', 'test', 'recursive')
      + target: Node
      + iter: Node
      + body: t.List[Node]
      + else_: t.List[Node]
      + test: t.Optional[Node]
      + recursive: bool
  }

  class If {
      + fields = ('test', 'body', 'elif_', 'else_')
      + test: Node
      + body: t.List[Node]
      + elif_: t.List['If']
      + else_: t.List[Node]
  }

  class Macro {
      + fields = ('name', 'args', 'defaults', 'body')
      + name: str
      + args: t.List['Name']
      + defaults: t.List['Expr']
      + body: t.List[Node]
  }

  class CallBlock {
      + fields = ('call', 'args', 'defaults', 'body')
      + call: 'Call'
      + args: t.List['Name']
      + defaults: t.List['Expr']
      + body: t.List[Node]
  }

  class FilterBlock {
      + fields = ('body', 'filter')
      + body: t.List[Node]
      + filter: 'Filter'
  }

  class With {
      + fields = ('targets', 'values', 'body')
      + targets: t.List['Expr']
      + values: t.List['Expr']
      + body: t.List[Node]
  }

  class Block {
      + fields = ('name', 'body', 'scoped', 'required')
      + name: str
      + body: t.List[Node]
      + scoped: bool
      + required: bool
  }

  class Include {
      + fields = ('template', 'with_context', 'ignore_missing')
      + template: 'Expr'
      + with_context: bool
      + ignore_missing: bool
  }

  class Import {
      + fields = ('template', 'target', 'with_context')
      + template: 'Expr'
      + target: str
      + with_context: bool
  }

  class FromImport {
      + fields = ('template', 'names', 'with_context')
      + template: 'Expr'
      + names: t.List[t.Union[str, t.Tuple[str, str]]]
      + with_context: bool
  }

  class ExprStmt {
      + fields = ('node',)
      + node: Node
  }

  class Assign {
      + fields = ('target', 'node')
      + target: 'Expr'
      + node: Node
  }

  class AssignBlock {
      + fields = ('target', 'filter', 'body')
      + target: 'Expr'
      + filter: t.Optional['Filter']
      + body: t.List[Node]
  }

  class Expr {
      + abstract = True
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Any
      + can_assign(): bool
  }

  class BinExpr {
      + fields = ('left', 'right')
      + left: Expr
      + right: Expr
      + operator: str
      + abstract = True
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Any
  }

  class UnaryExpr {
      + fields = ('node',)
      + node: Expr
      + operator: str
      + abstract = True
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Any
  }

  class Name {
      + fields = ('name', 'ctx')
      + name: str
      + ctx: str
  --
      + can_assign(): bool
  }

  class NSRef {
      + fields = ('name', 'attr')
      + name: str
      + attr: str
  --
      + can_assign(): bool
  }

  class Literal {
      + abstract = True
  }

  class Const {
      + fields = ('value',)
      + value: t.Any
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Any
      + {classmethod} from_untrusted(cls, value: t.Any, lineno: t.Optional[int] = None, environment: 't.Optional[Environment]' = None): 'Const'
  }

  class TemplateData {
      + fields = ('data',)
      + data: str
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): str
  }

  class Tuple {
      + fields = ('items', 'ctx')
      + items: t.List[Expr]
      + ctx: str
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Tuple[t.Any, ...]
      + can_assign(): bool
  }

  class List {
      + fields = ('items',)
      + items: t.List[Expr]
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.List[t.Any]
  }

  class Dict {
      + fields = ('items',)
      + items: t.List['Pair']
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Dict[t.Any, t.Any]
  }

  class Pair {
      + fields = ('key', 'value')
      + key: Expr
      + value: Expr
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Tuple[t.Any, t.Any]
  }

  class Keyword {
      + fields = ('key', 'value')
      + key: str
      + value: Expr
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Tuple[str, t.Any]
  }

  class CondExpr {
      + fields = ('test', 'expr1', 'expr2')
      + test: Expr
      + expr1: Expr
      + expr2: t.Optional[Expr]
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Any
  }

  class Filter {
      + node: t.Optional[Expr]
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Any
  }

  class Test {
  }

  class Call {
      + fields = ('node', 'args', 'kwargs', 'dyn_args', 'dyn_kwargs')
      + node: Expr
      + args: t.List[Expr]
      + kwargs: t.List[Keyword]
      + dyn_args: t.Optional[Expr]
      + dyn_kwargs: t.Optional[Expr]
  }

  class Getitem {
      + fields = ('node', 'arg', 'ctx')
      + node: Expr
      + arg: Expr
      + ctx: str
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Any
  }

  class Getattr {
      + fields = ('node', 'attr', 'ctx')
      + node: Expr
      + attr: str
      + ctx: str
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Any
  }

  class Slice {
      + fields = ('start', 'stop', 'step')
      + start: t.Optional[Expr]
      + stop: t.Optional[Expr]
      + step: t.Optional[Expr]
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): slice
  }

  class Concat {
      + fields = ('nodes',)
      + nodes: t.List[Expr]
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): str
  }

  class Compare {
      + fields = ('expr', 'ops')
      + expr: Expr
      + ops: t.List['Operand']
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Any
  }

  class Operand {
      + fields = ('op', 'expr')
      + op: str
      + expr: Expr
  }

  class Mul {
      + operator = '*'
  }

  class Div {
      + operator = '/'
  }

  class FloorDiv {
      + operator = '//'
  }

  class Add {
      + operator = '+'
  }

  class Sub {
      + operator = '-'
  }

  class Mod {
      + operator = '%'
  }

  class Pow {
      + operator = '**'
  }

  class And {
      + operator = 'and'
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Any
  }

  class Or {
      + operator = 'or'
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Any
  }

  class Not {
      + operator = 'not'
  }

  class Neg {
      + operator = '-'
  }

  class Pos {
      + operator = '+'
  }

  class EnvironmentAttribute {
      + fields = ('name',)
      + name: str
  }

  class ExtensionAttribute {
      + fields = ('identifier', 'name')
      + identifier: str
      + name: str
  }

  class ImportedName {
      + fields = ('importname',)
      + importname: str
  }

  class InternalName {
      + fields = ('name',)
      + name: str
  --
      - __init__()
  }

  class MarkSafe {
      + fields = ('expr',)
      + expr: Expr
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): Markup
  }

  class MarkSafeIfAutoescape {
      + fields = ('expr',)
      + expr: Expr
  --
      + as_const(eval_ctx: t.Optional[EvalContext] = None): t.Union[Markup, t.Any]
  }

  class ContextReference {
  }

  class DerivedContextReference {
  }

  class Continue {
  }

  class Break {
  }

  class Scope {
      + fields = ('body',)
      + body: t.List[Node]
  }

  class OverlayScope {
      + fields = ('context', 'body')
      + context: Expr
      + body: t.List[Node]
  }

  class EvalContextModifier {
      + fields = ('options',)
      + options: t.List[Keyword]
  }

  class ScopedEvalContextModifier {
      + fields = ('body',)
      + body: t.List[Node]
  }

  class Optimizer {
      - __init__(environment: 't.Optional[Environment]')
      + generic_visit(node: nodes.Node): nodes.Node
  }

  class Parser {
      - __init__(environment: 'Environment', source: str, name: t.Optional[str] = None, filename: t.Optional[str] = None, state: t.Optional[str] = None)
      + fail(msg: str, lineno: t.Optional[int] = None, exc: t.Type[TemplateSyntaxError] = TemplateSyntaxError): 'te.NoReturn'
      + fail_unknown_tag(name: str, lineno: t.Optional[int] = None): 'te.NoReturn'
      + fail_eof(end_tokens: t.Optional[t.Tuple[str, ...]] = None, lineno: t.Optional[int] = None): 'te.NoReturn'
      + is_tuple_end(extra_end_rules: t.Optional[t.Tuple[str, ...]] = None): bool
      + free_identifier(lineno: t.Optional[int] = None): nodes.InternalName
      + parse_statement(): t.Union[nodes.Node, t.List[nodes.Node]]
      + parse_statements(end_tokens: t.Tuple[str, ...], drop_needle: bool = False): t.List[nodes.Node]
      + parse_set(): t.Union[nodes.Assign, nodes.AssignBlock]
      + parse_for(): nodes.For
      + parse_if(): nodes.If
      + parse_with(): nodes.With
      + parse_autoescape(): nodes.Scope
      + parse_block(): nodes.Block
      + parse_extends(): nodes.Extends
      + parse_import_context(node: _ImportInclude, default: bool): _ImportInclude
      + parse_include(): nodes.Include
      + parse_import(): nodes.Import
      + parse_from(): nodes.FromImport
      + parse_signature(node: _MacroCall)
      + parse_call_block(): nodes.CallBlock
      + parse_filter_block(): nodes.FilterBlock
      + parse_macro(): nodes.Macro
      + parse_print(): nodes.Output
      + parse_assign_target(with_tuple: bool = ..., name_only: 'te.Literal[True]' = ...): nodes.Name
      + parse_assign_target(with_tuple: bool = True, name_only: bool = False, extra_end_rules: t.Optional[t.Tuple[str, ...]] = None, with_namespace: bool = False): t.Union[nodes.NSRef, nodes.Name, nodes.Tuple]
      + parse_assign_target(with_tuple: bool = True, name_only: bool = False, extra_end_rules: t.Optional[t.Tuple[str, ...]] = None, with_namespace: bool = False): t.Union[nodes.NSRef, nodes.Name, nodes.Tuple]
      + parse_expression(with_condexpr: bool = True): nodes.Expr
      + parse_condexpr(): nodes.Expr
      + parse_or(): nodes.Expr
      + parse_and(): nodes.Expr
      + parse_not(): nodes.Expr
      + parse_compare(): nodes.Expr
      + parse_math1(): nodes.Expr
      + parse_concat(): nodes.Expr
      + parse_math2(): nodes.Expr
      + parse_pow(): nodes.Expr
      + parse_unary(with_filter: bool = True): nodes.Expr
      + parse_primary(with_namespace: bool = False): nodes.Expr
      + parse_tuple(simplified: bool = False, with_condexpr: bool = True, extra_end_rules: t.Optional[t.Tuple[str, ...]] = None, explicit_parentheses: bool = False, with_namespace: bool = False): t.Union[nodes.Tuple, nodes.Expr]
      + parse_list(): nodes.List
      + parse_dict(): nodes.Dict
      + parse_postfix(node: nodes.Expr): nodes.Expr
      + parse_filter_expr(node: nodes.Expr): nodes.Expr
      + parse_subscript(node: nodes.Expr): t.Union[nodes.Getattr, nodes.Getitem]
      + parse_subscribed(): nodes.Expr
      + parse_call_args(): t.Tuple[t.List[nodes.Expr], t.List[nodes.Keyword], t.Optional[nodes.Expr], t.Optional[nodes.Expr]]
      + parse_call(node: nodes.Expr): nodes.Call
      + parse_filter(node: t.Optional[nodes.Expr], start_inline: bool = False): t.Optional[nodes.Expr]
      + parse_test(node: nodes.Expr): nodes.Expr
      + subparse(end_tokens: t.Optional[t.Tuple[str, ...]] = None): t.List[nodes.Node]
      + parse(): nodes.Template
  }

  class LoopRenderFunc {
  }

  class TemplateReference {
      - __init__(context: 'Context')
  }

  class Context {
      + keys = _dict_method_all(dict.keys)
      + values = _dict_method_all(dict.values)
      + items = _dict_method_all(dict.items)
  --
      - __init__(environment: 'Environment', parent: t.Dict[str, t.Any], name: t.Optional[str], blocks: t.Dict[str, t.Callable[['Context'], t.Iterator[str]]], globals: t.Optional[t.MutableMapping[str, t.Any]] = None)
      + super(name: str, current: t.Callable[['Context'], t.Iterator[str]]): t.Union['BlockReference', 'Undefined']
      + get(key: str, default: t.Any = None): t.Any
      + resolve(key: str): t.Union[t.Any, 'Undefined']
      + resolve_or_missing(key: str): t.Any
      + get_exported(): t.Dict[str, t.Any]
      + get_all(): t.Dict[str, t.Any]
      + call(__self, __obj: t.Callable[..., t.Any]): t.Union[t.Any, 'Undefined']
      + derived(locals: t.Optional[t.Dict[str, t.Any]] = None): 'Context'
  }

  class BlockReference {
      - __init__(name: str, context: 'Context', stack: t.List[t.Callable[['Context'], t.Iterator[str]]], depth: int)
      + super(): t.Union['BlockReference', 'Undefined']
  }

  class LoopContext {
      + index0 = -1
  --
      - __init__(iterable: t.Iterable[V], undefined: t.Type['Undefined'], recurse: t.Optional['LoopRenderFunc'] = None, depth0: int = 0)
      + length(): int
      + depth(): int
      + index(): int
      + revindex0(): int
      + revindex(): int
      + first(): bool
      + last(): bool
      + previtem(): t.Union[t.Any, 'Undefined']
      + nextitem(): t.Union[t.Any, 'Undefined']
      + cycle(): V
      + changed(): bool
  }

  class AsyncLoopContext {
  }

  class Macro {
      - __init__(environment: 'Environment', func: t.Callable[..., str], name: str, arguments: t.List[str], catch_kwargs: bool, catch_varargs: bool, caller: bool, default_autoescape: t.Optional[bool] = None)
  }

  class Undefined {
      - __init__(hint: t.Optional[str] = None, obj: t.Any = missing, name: t.Optional[str] = None, exc: t.Type[TemplateRuntimeError] = UndefinedError)
  }

  class ChainableUndefined {
  }

  class DebugUndefined {
  }

  class StrictUndefined {
  }

  class SandboxedEnvironment {
      + sandboxed = True
      + default_binop_table: t.Dict[str, t.Callable[[t.Any, t.Any], t.Any]] = {'+': operator.add, '-': operator.sub, '*': operator.mul, '/': operator.truediv, '//': operator.floordiv, '**': operator.pow, '%': operator.mod}
      + default_unop_table: t.Dict[str, t.Callable[[t.Any], t.Any]] = {'+': operator.pos, '-': operator.neg}
      + intercepted_binops: t.FrozenSet[str] = frozenset()
      + intercepted_unops: t.FrozenSet[str] = frozenset()
  --
      - __init__()
      + is_safe_attribute(obj: t.Any, attr: str, value: t.Any): bool
      + is_safe_callable(obj: t.Any): bool
      + call_binop(context: Context, operator: str, left: t.Any, right: t.Any): t.Any
      + call_unop(context: Context, operator: str, arg: t.Any): t.Any
      + getitem(obj: t.Any, argument: t.Union[str, t.Any]): t.Union[t.Any, Undefined]
      + getattr(obj: t.Any, attribute: str): t.Union[t.Any, Undefined]
      + unsafe_undefined(obj: t.Any, attribute: str): Undefined
      + wrap_str_format(value: t.Any): t.Optional[t.Callable[..., str]]
      + call(__self, __context: Context, __obj: t.Any): t.Any
  }

  class ImmutableSandboxedEnvironment {
      + is_safe_attribute(obj: t.Any, attr: str, value: t.Any): bool
  }

  class SandboxedFormatter {
      - __init__(env: Environment)
      + get_field(field_name: str, args: t.Sequence[t.Any], kwargs: t.Mapping[str, t.Any]): t.Tuple[t.Any, str]
  }

  class SandboxedEscapeFormatter {
  }

  class LRUCache {
      - __init__(capacity: int)
      + copy(): 'te.Self'
      + get(key: t.Any, default: t.Any = None): t.Any
      + setdefault(key: t.Any, default: t.Any = None): t.Any
      + clear()
      + items(): t.Iterable[t.Tuple[t.Any, t.Any]]
      + values(): t.Iterable[t.Any]
      + keys(): t.Iterable[t.Any]
  }

  class Cycler {
      - __init__()
      + reset()
      + current(): t.Any
      + next(): t.Any
  }

  class Joiner {
      - __init__(sep: str = ', ')
  }

  class Namespace {
      - __init__()
  }

  class VisitCallable {
  }

  class NodeVisitor {
      + get_visitor(node: Node): 't.Optional[VisitCallable]'
      + visit(node: Node): t.Any
      + generic_visit(node: Node): t.Any
  }

  class NodeTransformer {
      + generic_visit(node: Node): Node
      + visit_list(node: Node): t.List[Node]
  }

}

package jwt {
  class Algorithm {
      + compute_hash_digest(bytestr: bytes): bytes
      + prepare_key(key): Any
      + sign(msg: bytes, key): bytes
      + verify(msg: bytes, key, sig: bytes): bool
      + {static} to_jwk(key_obj, as_dict: Literal[True]): JWKDict
      + {static} to_jwk(key_obj, as_dict: Literal[False] = False): str
      + {static} to_jwk(key_obj, as_dict: bool = False): JWKDict | str
      + {static} from_jwk(jwk: str | JWKDict): Any
  }

  class NoneAlgorithm {
      + prepare_key(key: str | None)
      + sign(msg: bytes, key: None): bytes
      + verify(msg: bytes, key: None, sig: bytes): bool
      + {static} to_jwk(key_obj, as_dict: bool = False): NoReturn
      + {static} from_jwk(jwk: str | JWKDict): NoReturn
  }

  class HMACAlgorithm {
      + SHA256: ClassVar[HashlibHash] = hashlib.sha256
      + SHA384: ClassVar[HashlibHash] = hashlib.sha384
      + SHA512: ClassVar[HashlibHash] = hashlib.sha512
  --
      - __init__(hash_alg: HashlibHash)
      + prepare_key(key: str | bytes): bytes
      + {static} to_jwk(key_obj: str | bytes, as_dict: Literal[True]): JWKDict
      + {static} to_jwk(key_obj: str | bytes, as_dict: Literal[False] = False): str
      + {static} to_jwk(key_obj: str | bytes, as_dict: bool = False): JWKDict | str
      + {static} from_jwk(jwk: str | JWKDict): bytes
      + sign(msg: bytes, key: bytes): bytes
      + verify(msg: bytes, key: bytes, sig: bytes): bool
  }

  class RSAAlgorithm {
      + SHA256: ClassVar[type[hashes.HashAlgorithm]] = hashes.SHA256
      + SHA384: ClassVar[type[hashes.HashAlgorithm]] = hashes.SHA384
      + SHA512: ClassVar[type[hashes.HashAlgorithm]] = hashes.SHA512
  --
      - __init__(hash_alg: type[hashes.HashAlgorithm])
      + prepare_key(key: AllowedRSAKeys | str | bytes): AllowedRSAKeys
      + {static} to_jwk(key_obj: AllowedRSAKeys, as_dict: Literal[True]): JWKDict
      + {static} to_jwk(key_obj: AllowedRSAKeys, as_dict: Literal[False] = False): str
      + {static} to_jwk(key_obj: AllowedRSAKeys, as_dict: bool = False): JWKDict | str
      + {static} from_jwk(jwk: str | JWKDict): AllowedRSAKeys
      + sign(msg: bytes, key: RSAPrivateKey): bytes
      + verify(msg: bytes, key: RSAPublicKey, sig: bytes): bool
  }

  class ECAlgorithm {
      + SHA256: ClassVar[type[hashes.HashAlgorithm]] = hashes.SHA256
      + SHA384: ClassVar[type[hashes.HashAlgorithm]] = hashes.SHA384
      + SHA512: ClassVar[type[hashes.HashAlgorithm]] = hashes.SHA512
  --
      - __init__(hash_alg: type[hashes.HashAlgorithm])
      + prepare_key(key: AllowedECKeys | str | bytes): AllowedECKeys
      + sign(msg: bytes, key: EllipticCurvePrivateKey): bytes
      + verify(msg: bytes, key: AllowedECKeys, sig: bytes): bool
      + {static} to_jwk(key_obj: AllowedECKeys, as_dict: Literal[True]): JWKDict
      + {static} to_jwk(key_obj: AllowedECKeys, as_dict: Literal[False] = False): str
      + {static} to_jwk(key_obj: AllowedECKeys, as_dict: bool = False): JWKDict | str
      + {static} from_jwk(jwk: str | JWKDict): AllowedECKeys
  }

  class RSAPSSAlgorithm {
      + sign(msg: bytes, key: RSAPrivateKey): bytes
      + verify(msg: bytes, key: RSAPublicKey, sig: bytes): bool
  }

  class OKPAlgorithm {
      - __init__()
      + prepare_key(key: AllowedOKPKeys | str | bytes): AllowedOKPKeys
      + sign(msg: str | bytes, key: Ed25519PrivateKey | Ed448PrivateKey): bytes
      + verify(msg: str | bytes, key: AllowedOKPKeys, sig: str | bytes): bool
      + {static} to_jwk(key: AllowedOKPKeys, as_dict: Literal[True]): JWKDict
      + {static} to_jwk(key: AllowedOKPKeys, as_dict: Literal[False] = False): str
      + {static} to_jwk(key: AllowedOKPKeys, as_dict: bool = False): JWKDict | str
      + {static} from_jwk(jwk: str | JWKDict): AllowedOKPKeys
  }

  class PyJWK {
      - __init__(jwk_data: JWKDict, algorithm: str | None = None)
      + {static} from_dict(obj: JWKDict, algorithm: str | None = None): PyJWK
      + {static} from_json(data: str, algorithm: None = None): PyJWK
      + key_type(): str | None
      + key_id(): str | None
      + public_key_use(): str | None
  }

  class PyJWKSet {
      - __init__(keys: list[JWKDict])
      + {static} from_dict(obj: dict[str, Any]): PyJWKSet
      + {static} from_json(data: str): PyJWKSet
  }

  class PyJWTSetWithTimestamp {
      - __init__(jwk_set: PyJWKSet)
      + get_jwk_set(): PyJWKSet
      + get_timestamp(): float
  }

  class PyJWS {
      + header_typ = 'JWT'
  --
      - __init__(algorithms: Sequence[str] | None = None, options: dict[str, Any] | None = None)
      + register_algorithm(alg_id: str, alg_obj: Algorithm)
      + unregister_algorithm(alg_id: str)
      + get_algorithms(): list[str]
      + get_algorithm_by_name(alg_name: str): Algorithm
      + encode(payload: bytes, key: AllowedPrivateKeys | PyJWK | str | bytes, algorithm: str | None = None, headers: dict[str, Any] | None = None, json_encoder: type[json.JSONEncoder] | None = None, is_payload_detached: bool = False, sort_headers: bool = True): str
      + decode_complete(jwt: str | bytes, key: AllowedPublicKeys | PyJWK | str | bytes = '', algorithms: Sequence[str] | None = None, options: dict[str, Any] | None = None, detached_payload: bytes | None = None): dict[str, Any]
      + decode(jwt: str | bytes, key: AllowedPublicKeys | PyJWK | str | bytes = '', algorithms: Sequence[str] | None = None, options: dict[str, Any] | None = None, detached_payload: bytes | None = None): Any
      + get_unverified_header(jwt: str | bytes): dict[str, Any]
  }

  class PyJWT {
      - __init__(options: dict[str, Any] | None = None)
      + encode(payload: dict[str, Any], key: AllowedPrivateKeys | PyJWK | str | bytes, algorithm: str | None = None, headers: dict[str, Any] | None = None, json_encoder: type[json.JSONEncoder] | None = None, sort_headers: bool = True): str
      + decode_complete(jwt: str | bytes, key: AllowedPublicKeys | PyJWK | str | bytes = '', algorithms: Sequence[str] | None = None, options: dict[str, Any] | None = None, verify: bool | None = None, detached_payload: bytes | None = None, audience: str | Iterable[str] | None = None, issuer: str | Sequence[str] | None = None, subject: str | None = None, leeway: float | timedelta = 0): dict[str, Any]
      + decode(jwt: str | bytes, key: AllowedPublicKeys | PyJWK | str | bytes = '', algorithms: Sequence[str] | None = None, options: dict[str, Any] | None = None, verify: bool | None = None, detached_payload: bytes | None = None, audience: str | Iterable[str] | None = None, subject: str | None = None, issuer: str | Sequence[str] | None = None, leeway: float | timedelta = 0): Any
  }

  class PyJWTError {
  }

  class InvalidTokenError {
  }

  class DecodeError {
  }

  class InvalidSignatureError {
  }

  class ExpiredSignatureError {
  }

  class InvalidAudienceError {
  }

  class InvalidIssuerError {
  }

  class InvalidIssuedAtError {
  }

  class ImmatureSignatureError {
  }

  class InvalidKeyError {
  }

  class InvalidAlgorithmError {
  }

  class MissingRequiredClaimError {
      - __init__(claim: str)
  }

  class PyJWKError {
  }

  class MissingCryptographyError {
  }

  class PyJWKSetError {
  }

  class PyJWKClientError {
  }

  class PyJWKClientConnectionError {
  }

  class InvalidSubjectError {
  }

  class InvalidJTIError {
  }

  class PyJWKClient {
      - __init__(uri: str, cache_keys: bool = False, max_cached_keys: int = 16, cache_jwk_set: bool = True, lifespan: int = 300, headers: Optional[Dict[str, Any]] = None, timeout: int = 30, ssl_context: Optional[SSLContext] = None)
      + fetch_data(): Any
      + get_jwk_set(refresh: bool = False): PyJWKSet
      + get_signing_keys(refresh: bool = False): List[PyJWK]
      + get_signing_key(kid: str): PyJWK
      + get_signing_key_from_jwt(token: str): PyJWK
      + {static} match_kid(signing_keys: List[PyJWK], kid: str): Optional[PyJWK]
  }

  class JWKSetCache {
      - __init__(lifespan: int)
      + put(jwk_set: PyJWKSet)
      + get(): Optional[PyJWKSet]
      + is_expired(): bool
  }

  class RemovedInPyjwt3Warning {
  }

}

package lxml {
  class ElementMaker {
      - __init__(typemap = None, namespace = None, nsmap = None, makeelement = None)
  }

  class LxmlTranslator {
      + xpath_contains_function(xpath, function)
  }

  class LxmlHTMLTranslator {
  }

  class CSSSelector {
      - __init__(css, namespaces = None, translator = 'xml')
  }

  class LXMLOutputChecker {
      + empty_tags = ('param', 'img', 'area', 'br', 'basefont', 'input', 'base', 'meta', 'link', 'col')
  --
      + get_default_parser()
      + check_output(want, got, optionflags)
      + get_parser(want, got, optionflags)
      + compare_docs(want, got)
      + text_compare(want, got, strip)
      + tag_compare(want, got)
      + output_difference(example, got, optionflags)
      + html_empty_tag(el, html = True)
      + format_doc(doc, html, indent, prefix = '')
      + format_text(text, strip = True)
      + format_tag(el)
      + format_end_tag(el)
      + collect_diff(want, got, html, indent)
      + collect_diff_tag(want, got)
      + collect_diff_end_tag(want, got)
      + collect_diff_text(want, got, strip = True)
  }

  class LHTMLOutputChecker {
      + get_default_parser()
  }

  class FatalIncludeError {
  }

  class LimitedRecursiveIncludeError {
  }

  class SaxError {
  }

  class ElementTreeContentHandler {
      + etree = property(_get_etree, doc=_get_etree.__doc__)
      + ignorableWhitespace = characters
  --
      - __init__(makeelement = None)
      + setDocumentLocator(locator)
      + startDocument()
      + endDocument()
      + startPrefixMapping(prefix, uri)
      + endPrefixMapping(prefix)
      + startElementNS(ns_name, qname, attributes = None)
      + processingInstruction(target, data)
      + endElementNS(ns_name, qname)
      + startElement(name, attributes = None)
      + endElement(name)
      + characters(data)
  }

  class ElementTreeProducer {
      - __init__(element_or_tree, content_handler)
      + saxify()
  }

}

package html {
  class DEL_START {
  }

  class DEL_END {
  }

  class NoDeletes {
  }

  class token {
      + hide_when_equal = False
  --
      + html()
  }

  class tag_token {
      + html()
  }

  class href_token {
      + hide_when_equal = True
  --
      + html()
  }

  class InsensitiveSequenceMatcher {
      + threshold = 2
  --
      + get_matching_blocks()
  }

  class FormNotFound {
  }

  class DefaultErrorCreator {
      + insert_before = True
      + block_inside = True
      + error_container_tag = 'div'
      + error_message_class = 'error-message'
      + error_block_class = 'error-block'
      + default_message = 'Invalid'
  --
      - __init__()
  }

  class HTMLParser {
      - __init__(strict = False)
  }

  class XHTMLParser {
      - __init__(strict = False)
  }

  class DocumentType {
      - __init__(name, publicId, systemId)
  }

  class Document {
      - __init__()
      + appendChild(element)
  }

  class TreeBuilder {
      + documentClass = Document
      + doctypeClass = DocumentType
      + elementClass = None
      + commentClass = None
      + fragmentClass = Document
  --
      - __init__()
      + reset()
      + getDocument()
      + getFragment()
      + insertDoctype(name, publicId, systemId)
      + insertComment(data, parent = None)
      + insertRoot(name)
  }

  class SetMixin {
      + issubset = MutableSet.__le__
      + issuperset = MutableSet.__ge__
      + union = MutableSet.__or__
      + intersection = MutableSet.__and__
      + difference = MutableSet.__sub__
      + symmetric_difference = MutableSet.__xor__
  --
      + copy()
      + update(other)
      + intersection_update(other)
      + difference_update(other)
      + symmetric_difference_update(other)
      + discard(item)
  }

  class Classes {
      - __init__(attributes)
      + add(value)
      + discard(value)
      + remove(value)
      + update(values)
      + toggle(value)
  }

  class HtmlMixin {
      + set(key, value = None)
      + classes()
      + classes(classes)
      + base_url()
      + forms()
      + body()
      + head()
      + label()
      + label(label)
      + label()
      + drop_tree()
      + drop_tag()
      + find_rel_links(rel)
      + find_class(class_name)
      + get_element_by_id(id)
      + text_content()
      + cssselect(expr, translator = 'html')
      + make_links_absolute(base_url = None, resolve_base_href = True, handle_failures = None)
      + resolve_base_href(handle_failures = None)
      + iterlinks()
      + rewrite_links(link_repl_func, resolve_base_href = True, base_href = None)
  }

  class HtmlComment {
  }

  class HtmlElement {
  }

  class HtmlProcessingInstruction {
  }

  class HtmlEntity {
  }

  class HtmlElementClassLookup {
      - __init__(classes = None, mixins = None)
      + lookup(node_type, document, namespace, name)
  }

  class FormElement {
      + inputs()
      + fields()
      + fields(value)
      + form_values()
      + action()
      + action(value)
      + action()
      + method()
      + method(value)
  }

  class FieldsDict {
      - __init__(inputs)
      + keys()
  }

  class InputGetter {
      - __init__(form)
      + keys()
      + items()
  }

  class InputMixin {
      + name()
      + name(value)
      + name()
  }

  class TextareaElement {
      + value()
      + value(value)
      + value()
  }

  class SelectElement {
      + value()
      + value(value)
      + value()
      + value_options()
      + multiple()
      + multiple(value)
  }

  class MultipleSelectOptions {
      - __init__(select)
      + options()
      + add(item)
      + remove(item)
  }

  class RadioGroup {
      + value()
      + value(value)
      + value()
      + value_options()
  }

  class CheckboxGroup {
      + value()
      + value(value)
      + value()
      + value_options()
  }

  class CheckboxValues {
      - __init__(group)
      + add(value)
      + remove(value)
  }

  class InputElement {
      + value()
      + value(value)
      + value()
      + type()
      + type(value)
      + checkable()
      + checked()
      + checked(value)
  }

  class LabelElement {
      + for_element()
      + for_element(other)
      + for_element()
  }

  class HTMLParser {
      - __init__()
  }

  class XHTMLParser {
      - __init__()
  }

}

package isoschematron {
  class Schematron {
      + ASSERTS_ONLY = svrl_validation_errors
      + ASSERTS_AND_REPORTS = _etree.XPath('//svrl:failed-assert | //svrl:successful-report', namespaces={'svrl': SVRL_NS})
  --
      - __init__(etree = None, file = None, include = True, expand = True, include_params = {}, expand_params = {}, compile_params = {}, store_schematron = False, store_xslt = False, store_report = False, phase = None, error_finder = ASSERTS_ONLY, validate_schema = schematron_schema_valid_supported)
      + schematron()
      + validator_xslt()
      + validation_report()
  }

}

package mako {
  class PythonCode {
      - __init__(code)
  }

  class ArgumentList {
      - __init__(code)
  }

  class PythonFragment {
      - __init__(code)
  }

  class FunctionDecl {
      - __init__(code, allow_kwargs = True)
      + get_argument_expressions(as_call = False)
      + allargnames()
  }

  class FunctionArgs {
      - __init__(code)
  }

  class Cache {
      + impl = None
      + id = None
      + starttime = None
      + put = set
  --
      - __init__(template)
      + get_or_create(key, creation_function)
      + set(key, value)
      + get(key)
      + invalidate(key)
      + invalidate_body()
      + invalidate_def(name)
      + invalidate_closure(name)
  }

  class CacheImpl {
      + pass_context = False
  --
      - __init__(cache)
      + get_or_create(key, creation_function)
      + set(key, value)
      + get(key)
      + invalidate(key)
  }

  class LoopVariable {
      - __init__()
      + visitControlLine(node)
      + visitCode(node)
      + visitExpression(node)
  }

  class MakoException {
  }

  class RuntimeException {
  }

  class CompileException {
      - __init__(message, source, lineno, pos, filename)
  }

  class SyntaxException {
      - __init__(message, source, lineno, pos, filename)
  }

  class UnsupportedError {
  }

  class NameConflictError {
  }

  class TemplateLookupException {
  }

  class TopLevelLookupException {
  }

  class RichTraceback {
      - __init__(error = None, traceback = None)
      + errorname()
      + traceback()
      + reverse_records()
      + reverse_traceback()
  }

  class Decode {
  }

  class XMLEntityEscaper {
      - __init__(codepoint2name, name2codepoint)
      + escape_entities(text)
      + escape(text)
      + unescape(text)
  }

  class Lexer {
      - __init__(text, filename = None, input_encoding = None, preprocessor = None)
      + exception_kwargs()
      + match(regexp, flags = None)
      + match_reg(reg)
      + parse_until_text(watch_nesting)
      + append_node(nodecls)
      + decode_raw_stream(text, decode_raw, known_encoding, filename)
      + parse()
      + match_tag_start()
      + match_tag_end()
      + match_end()
      + match_percent()
      + match_text()
      + match_python_block()
      + match_expression()
      + match_control_line()
      + match_comment()
  }

  class TemplateCollection {
      + has_template(uri)
      + get_template(uri, relativeto = None)
      + filename_to_uri(uri, filename)
      + adjust_uri(uri, filename)
  }

  class TemplateLookup {
      - __init__(directories = None, module_directory = None, filesystem_checks = True, collection_size = -1, format_exceptions = False, error_handler = None, output_encoding = None, encoding_errors = 'strict', cache_args = None, cache_impl = 'beaker', cache_enabled = True, cache_type = None, cache_dir = None, cache_url = None, modulename_callable = None, module_writer = None, default_filters = None, buffer_filters = (), strict_undefined = False, imports = None, future_imports = None, enable_loop = True, input_encoding = None, preprocessor = None, lexer_cls = None, include_error_handler = None)
      + get_template(uri)
      + adjust_uri(uri, relativeto)
      + filename_to_uri(filename)
      + put_string(uri, text)
      + put_template(uri, template)
  }

  class Node {
      - __init__(source, lineno, pos, filename)
      + exception_kwargs()
      + get_children()
      + accept_visitor(visitor)
  }

  class TemplateNode {
      - __init__(filename)
      + get_children()
  }

  class ControlLine {
      + has_loop_context = False
  --
      - __init__(keyword, isend, text)
      + get_children()
      + declared_identifiers()
      + undeclared_identifiers()
      + is_ternary(keyword)
  }

  class Text {
      - __init__(content)
  }

  class Code {
      - __init__(text, ismodule)
      + declared_identifiers()
      + undeclared_identifiers()
  }

  class Comment {
      - __init__(text)
  }

  class Expression {
      - __init__(text, escapes)
      + declared_identifiers()
      + undeclared_identifiers()
  }

  class Tag {
      - __init__(keyword, attributes, expressions, nonexpressions, required)
      + is_root()
      + get_children()
      + declared_identifiers()
      + undeclared_identifiers()
  }

  class IncludeTag {
      - __init__(keyword, attributes)
      + declared_identifiers()
      + undeclared_identifiers()
  }

  class NamespaceTag {
      - __init__(keyword, attributes)
      + declared_identifiers()
  }

  class TextTag {
      - __init__(keyword, attributes)
      + undeclared_identifiers()
  }

  class DefTag {
      + is_anonymous = False
      + is_block = False
  --
      - __init__(keyword, attributes)
      + funcname()
      + get_argument_expressions()
      + declared_identifiers()
      + undeclared_identifiers()
  }

  class BlockTag {
      + is_block = True
  --
      - __init__(keyword, attributes)
      + is_anonymous()
      + funcname()
      + get_argument_expressions()
      + declared_identifiers()
      + undeclared_identifiers()
  }

  class CallTag {
      - __init__(keyword, attributes)
      + declared_identifiers()
      + undeclared_identifiers()
  }

  class CallNamespaceTag {
      - __init__(namespace, defname, attributes)
      + declared_identifiers()
      + undeclared_identifiers()
  }

  class InheritTag {
      - __init__(keyword, attributes)
  }

  class PageTag {
      - __init__(keyword, attributes)
      + declared_identifiers()
  }

  class PythonPrinter {
      - __init__(stream)
      + start_source(lineno)
      + write_blanks(num)
      + write_indented_block(block, starting_lineno = None)
      + writelines()
      + writeline(line)
      + close()
  }

  class FindIdentifiers {
      + visit_SetComp = visit_ListComp
      + visit_GeneratorExp = visit_ListComp
  --
      - __init__(listener)
      + visit_ClassDef(node)
      + visit_Assign(node)
      + visit_ExceptHandler(node)
      + visit_Lambda(node)
      + visit_FunctionDef(node)
      + visit_ListComp(node)
      + visit_DictComp(node)
      + visit_For(node)
      + visit_Name(node)
      + visit_Import(node)
      + visit_ImportFrom(node)
  }

  class FindTuple {
      - __init__(listener, code_factory)
      + visit_Tuple(node)
  }

  class ParseFunc {
      - __init__(listener)
      + visit_FunctionDef(node)
  }

  class ExpressionGenerator {
      - __init__(astnode)
      + value()
  }

  class Context {
      - __init__(buffer)
      + lookup()
      + kwargs()
      + push_caller(caller)
      + pop_caller()
      + keys()
      + get(key, default = None)
      + write(string)
      + writer()
  }

  class CallerStack {
      - __init__()
  }

  class Undefined {
  }

  class LoopStack {
      - __init__()
  }

  class LoopContext {
      - __init__(iterable)
      + reverse_index()
      + first()
      + last()
      + even()
      + odd()
      + cycle()
  }

  class Namespace {
      + callables = ()
      + module = None
      + template = None
      + context = None
      + filename = None
      + uri = None
  --
      - __init__(name, context, callables = None, inherits = None, populate_self = True, calling_uri = None)
      + attr()
      + get_namespace(uri)
      + get_template(uri)
      + get_cached(key)
      + cache()
      + include_file(uri)
  }

  class TemplateNamespace {
      - __init__(name, context, template = None, templateuri = None, callables = None, inherits = None, populate_self = True, calling_uri = None)
      + module()
      + filename()
      + uri()
  }

  class ModuleNamespace {
      - __init__(name, context, module, callables = None, inherits = None, populate_self = True, calling_uri = None)
      + filename()
  }

  class Template {
      + lexer_cls = Lexer
  --
      - __init__(text = None, filename = None, uri = None, format_exceptions = False, error_handler = None, lookup = None, output_encoding = None, encoding_errors = 'strict', module_directory = None, cache_args = None, cache_impl = 'beaker', cache_enabled = True, cache_type = None, cache_dir = None, cache_url = None, module_filename = None, input_encoding = None, module_writer = None, default_filters = None, buffer_filters = (), strict_undefined = False, imports = None, future_imports = None, enable_loop = True, preprocessor = None, lexer_cls = None, include_error_handler = None)
      + reserved_names()
      + source()
      + code()
      + cache()
      + cache_dir()
      + cache_url()
      + cache_type()
      + render()
      + render_unicode()
      + render_context(context)
      + has_def(name)
      + get_def(name)
      + list_defs()
      + last_modified()
  }

  class ModuleTemplate {
      - __init__(module, module_filename = None, template = None, template_filename = None, module_source = None, template_source = None, output_encoding = None, encoding_errors = 'strict', format_exceptions = False, error_handler = None, lookup = None, cache_args = None, cache_impl = 'beaker', cache_enabled = True, cache_type = None, cache_dir = None, cache_url = None, include_error_handler = None)
  }

  class DefTemplate {
      - __init__(parent, callable_)
      + get_def(name)
  }

  class ModuleInfo {
      - __init__(module, module_filename, template, template_filename, module_source, template_source, template_uri)
      + {classmethod} get_module_source_metadata(cls, module_source, full_line_map = False)
      + code()
      + source()
  }

  class PluginLoader {
      - __init__(group)
      + load(name)
      + register(name, modulepath, objname)
  }

  class memoized_property {
      - __init__(fget, doc = None)
  }

  class memoized_instancemethod {
      - __init__(fget, doc = None)
  }

  class SetLikeDict {
      + union(other)
  }

  class FastEncodingBuffer {
      - __init__(encoding = None, errors = 'strict')
      + truncate()
      + getvalue()
  }

  class LRUCache {
      - __init__(capacity, threshold = 0.5)
      + values()
      + setdefault(key, value)
  }

  class NodeVisitor {
      + get_visitor(node)
      + visit(node)
      + generic_visit(node)
  }

  class NodeTransformer {
      + generic_visit(node)
  }

  class SourceGenerator {
      + visit_List = sequence_visit('[', ']')
      + visit_Set = sequence_visit('{', '}')
      + visit_ListComp = generator_visit('[', ']')
      + visit_GeneratorExp = generator_visit('(', ')')
      + visit_SetComp = generator_visit('{', '}')
  --
      - __init__(indent_with)
      + write(x)
      + newline(n = 1)
      + body(statements)
      + body_or_else(node)
      + signature(node)
      + decorators(node)
      + visit_Assign(node)
      + visit_AugAssign(node)
      + visit_ImportFrom(node)
      + visit_Import(node)
      + visit_Expr(node)
      + visit_FunctionDef(node)
      + visit_ClassDef(node)
      + visit_If(node)
      + visit_For(node)
      + visit_While(node)
      + visit_With(node)
      + visit_Pass(node)
      + visit_Print(node)
      + visit_Delete(node)
      + visit_TryExcept(node)
      + visit_TryFinally(node)
      + visit_Global(node)
      + visit_Nonlocal(node)
      + visit_Return(node)
      + visit_Break(node)
      + visit_Continue(node)
      + visit_Raise(node)
      + visit_Attribute(node)
      + visit_Call(node)
      + visit_Name(node)
      + visit_NameConstant(node)
      + visit_arg(node)
      + visit_Str(node)
      + visit_Bytes(node)
      + visit_Num(node)
      + visit_Constant(node)
      + visit_Tuple(node)
      + sequence_visit(left, right)
      + visit_Dict(node)
      + visit_BinOp(node)
      + visit_BoolOp(node)
      + visit_Compare(node)
      + visit_UnaryOp(node)
      + visit_Subscript(node)
      + visit_Slice(node)
      + visit_ExtSlice(node)
      + visit_Yield(node)
      + visit_Lambda(node)
      + visit_Ellipsis(node)
      + generator_visit(left, right)
      + visit_DictComp(node)
      + visit_IfExp(node)
      + visit_Starred(node)
      + visit_Repr(node)
      + visit_alias(node)
      + visit_comprehension(node)
      + visit_excepthandler(node)
  }

}

package ext {
  class BabelMakoExtractor {
      - __init__(keywords, comment_tags, options)
      + process_python(code, code_lineno, translator_strings)
  }

  class BeakerCacheImpl {
      - __init__(cache)
      + get_or_create(key, creation_function)
      + put(key, value)
      + get(key)
      + invalidate(key)
  }

  class MessageExtractor {
      + use_bytes = True
  --
      + process_file(fileobj)
      + extract_nodes(nodes)
  }

  class LinguaMakoExtractor {
      + use_bytes = False
      + extensions = ['.mako']
      + default_config = {'encoding': 'utf-8', 'comment-tags': ''}
  --
      + process_python(code, code_lineno, translator_strings)
  }

  class MakoLexer {
      + name = 'Mako'
      + aliases = ['mako']
      + filenames = ['*.mao']
      + tokens = {'root': [('(\\s*)(\\%)(\\s*end(?:\\w+))(\\n|\\Z)', bygroups(Text, Comment.Preproc, Keyword, Other)), ('(\\s*)(\\%(?!%))([^\\n]*)(\\n|\\Z)', bygroups(Text, Comment.Preproc, using(PythonLexer), Other)), ('(\\s*)(##[^\\n]*)(\\n|\\Z)', bygroups(Text, Comment.Preproc, Other)), ('(?s)<%doc>.*?</%doc>', Comment.Preproc), ('(<%)([\\w\\.\\:]+)', bygroups(Comment.Preproc, Name.Builtin), 'tag'), ('(</%)([\\w\\.\\:]+)(>)', bygroups(Comment.Preproc, Name.Builtin, Comment.Preproc)), ('<%(?=([\\w\\.\\:]+))', Comment.Preproc, 'ondeftags'), ('(?s)(<%(?:!?))(.*?)(%>)', bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc)), ('(\\$\\{)(.*?)(\\})', bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc)), ("(?sx)\n                (.+?)               # anything, followed by:\n                (?:\n                 (?<=\\n)(?=%(?!%)|\\#\\#) |  # an eval or comment line\n                 (?=\\#\\*) |          # multiline comment\n                 (?=</?%) |         # a python block\n                                    # call start or end\n                 (?=\\$\\{) |         # a substitution\n                 (?<=\\n)(?=\\s*%) |\n                                    # - don't consume\n                 (\\\\\\n) |           # an escaped newline\n                 \\Z                 # end of string\n                )\n            ", bygroups(Other, Operator)), ('\\s+', Text)], 'ondeftags': [('<%', Comment.Preproc), ('(?<=<%)(include|inherit|namespace|page)', Name.Builtin), include('tag')], 'tag': [('((?:\\w+)\\s*=)\\s*(".*?")', bygroups(Name.Attribute, String)), ('/?\\s*>', Comment.Preproc, '#pop'), ('\\s+', Text)], 'attr': [('".*?"', String, '#pop'), ("'.*?'", String, '#pop'), ('[^\\s>]+', String, '#pop')]}
  }

  class MakoHtmlLexer {
      + name = 'HTML+Mako'
      + aliases = ['html+mako']
  --
      - __init__()
  }

  class MakoXmlLexer {
      + name = 'XML+Mako'
      + aliases = ['xml+mako']
  --
      - __init__()
  }

  class MakoJavascriptLexer {
      + name = 'JavaScript+Mako'
      + aliases = ['js+mako', 'javascript+mako']
  --
      - __init__()
  }

  class MakoCssLexer {
      + name = 'CSS+Mako'
      + aliases = ['css+mako']
  --
      - __init__()
  }

  class TGPlugin {
      - __init__(extra_vars_func = None, options = None, extension = 'mak')
      + load_template(templatename, template_string = None)
      + render(info, format = 'html', fragment = False, template = None)
  }

  class AssociationProxyExtensionType {
      + ASSOCIATION_PROXY = 'ASSOCIATION_PROXY'
  }

  class AssociationProxy {
      + is_attribute = True
      + extension_type = AssociationProxyExtensionType.ASSOCIATION_PROXY
  --
      - __init__(target_collection: str, attr: str)
      + for_class(class_: Type[Any], obj: Optional[object] = None): AssociationProxyInstance[_T]
  }

  class AssociationProxyInstance {
      + collection_class: Optional[Type[Any]]
      + parent: _AssociationProxyProtocol[_T]
      + target_class: Type[Any]
  --
      - __init__(parent: _AssociationProxyProtocol[_T], owning_class: Type[Any], target_class: Type[Any], value_attr: str)
      + {classmethod} for_proxy(cls, parent: AssociationProxy[_T], owning_class: Type[Any], parent_instance): AssociationProxyInstance[_T]
      + remote_attr(): SQLORMOperations[_T]
      + local_attr(): SQLORMOperations[Any]
      + attr(): Tuple[SQLORMOperations[Any], SQLORMOperations[_T]]
      + scalar(): bool
      + info(): _InfoType
      + get(obj: Literal[None]): _Self
      + get(obj): _T
      + get(obj): Union[Optional[_T], AssociationProxyInstance[_T]]
      + set(obj, values: _T)
      + delete(obj)
      + any(criterion: Optional[_ColumnExpressionArgument[bool]] = None): ColumnElement[bool]
      + has(criterion: Optional[_ColumnExpressionArgument[bool]] = None): ColumnElement[bool]
  }

  class AmbiguousAssociationProxyInstance {
      + get(obj): Any
      + any(criterion: Optional[_ColumnExpressionArgument[bool]] = None): NoReturn
      + has(criterion: Optional[_ColumnExpressionArgument[bool]] = None): NoReturn
  }

  class ObjectAssociationProxyInstance {
      + contains(other): ColumnElement[bool]
  }

  class ColumnAssociationProxyInstance {
      + operate(op: operators.OperatorType): ColumnElement[Any]
  }

  class PythonNameForTableType {
  }

  class NameForScalarRelationshipType {
  }

  class NameForCollectionRelationshipType {
  }

  class GenerateRelationshipType {
  }

  class AutomapBase {
      + classes: ClassVar[Properties[Type[Any]]]
      + by_module: ClassVar[ByModuleProperties]
      + metadata: ClassVar[MetaData]
  --
      + {classmethod} prepare(cls: Type[AutomapBase], autoload_with: Optional[Engine] = None, engine: Optional[Any] = None, reflect: bool = False, schema: Optional[str] = None, classname_for_table: Optional[PythonNameForTableType] = None, modulename_for_table: Optional[PythonNameForTableType] = None, collection_class: Optional[Any] = None, name_for_scalar_relationship: Optional[NameForScalarRelationshipType] = None, name_for_collection_relationship: Optional[NameForCollectionRelationshipType] = None, generate_relationship: Optional[GenerateRelationshipType] = None, reflection_options: Union[Dict[_KT, _VT], immutabledict[_KT, _VT]] = util.EMPTY_DICT)
  }

  class Bakery {
      - __init__(cls_, cache)
  }

  class BakedQuery {
      - __init__(bakery, initial_fn, args = ())
      + {classmethod} bakery(cls, size = 200, _size_alert = None)
      + add_criteria(fn)
      + with_criteria(fn)
      + for_session(session)
      + spoil(full = False)
      + to_query(query_or_session)
  }

  class Result {
      - __init__(bq, session)
      + params()
      + with_post_criteria(fn)
      + count()
      + scalar()
      + first()
      + one()
      + one_or_none()
      + all()
      + get(ident)
  }

  class ShardChooser {
  }

  class IdentityChooser {
  }

  class ShardedQuery {
      - __init__()
      + set_shard(shard_id: ShardIdentifier): Self
  }

  class ShardedSession {
      + shard_chooser: ShardChooser
      + identity_chooser: IdentityChooser
      + execute_chooser: Callable[[ORMExecuteState], Iterable[Any]]
  --
      - __init__(shard_chooser: ShardChooser, identity_chooser: Optional[IdentityChooser] = None, execute_chooser: Optional[Callable[[ORMExecuteState], Iterable[Any]]] = None, shards: Optional[Dict[str, Any]] = None, query_cls: Type[Query[_T]] = ShardedQuery)
      + connection_callable(mapper: Optional[Mapper[_T]] = None, instance: Optional[Any] = None, shard_id: Optional[ShardIdentifier] = None): Connection
      + get_bind(mapper: Optional[_EntityBindKey[_O]] = None): _SessionBind
      + bind_shard(shard_id: ShardIdentifier, bind: Union[Engine, OptionEngine])
  }

  class set_shard_id {
      - __init__(shard_id: ShardIdentifier, propagate_to_loaders: bool = True)
  }

  class HybridExtensionType {
      + HYBRID_METHOD = 'HYBRID_METHOD'
      + HYBRID_PROPERTY = 'HYBRID_PROPERTY'
  }

  class hybrid_method {
      + is_attribute = True
      + extension_type = HybridExtensionType.HYBRID_METHOD
  --
      - __init__(func: Callable[Concatenate[Any, _P], _R], expr: Optional[Callable[Concatenate[Any, _P], SQLCoreOperations[_R]]] = None)
      + inplace(): Self
      + expression(expr: Callable[Concatenate[Any, _P], SQLCoreOperations[_R]]): hybrid_method[_P, _R]
  }

  class hybrid_property {
      + is_attribute = True
      + extension_type = HybridExtensionType.HYBRID_PROPERTY
  --
      - __init__(fget: _HybridGetterType[_T], fset: Optional[_HybridSetterType[_T]] = None, fdel: Optional[_HybridDeleterType[_T]] = None, expr: Optional[_HybridExprCallableType[_T]] = None, custom_comparator: Optional[Comparator[_T]] = None, update_expr: Optional[_HybridUpdaterType[_T]] = None)
      + overrides(): Self
      + inplace(): _InPlace[_T]
      + getter(fget: _HybridGetterType[_T]): hybrid_property[_T]
      + setter(fset: _HybridSetterType[_T]): hybrid_property[_T]
      + deleter(fdel: _HybridDeleterType[_T]): hybrid_property[_T]
      + expression(expr: _HybridExprCallableType[_T]): hybrid_property[_T]
      + comparator(comparator: _HybridComparatorCallableType[_T]): hybrid_property[_T]
      + update_expression(meth: _HybridUpdaterType[_T]): hybrid_property[_T]
  }

  class Comparator {
      - __init__(expression: Union[_HasClauseElement[_T], SQLColumnExpression[_T]])
      + property(): interfaces.MapperProperty[_T]
      + adapt_to_entity(adapt_to_entity: AliasedInsp[Any]): Comparator[_T]
  }

  class ExprComparator {
      - __init__(cls: Type[Any], expression: Union[_HasClauseElement[_T], SQLColumnExpression[_T]], hybrid: hybrid_property[_T])
      + info(): _InfoType
      + property(): MapperProperty[_T]
      + operate(op: OperatorType): ColumnElement[Any]
      + reverse_operate(op: OperatorType, other): ColumnElement[Any]
  }

  class index_property {
      - __init__(attr_name, index, default = _NO_DEFAULT_ARGUMENT, datatype = None, mutable = True, onebased = True)
      + fget(instance)
      + fset(instance, value)
      + fdel(instance)
      + expr(model)
  }

  class ExtendedInstrumentationRegistry {
      + unregister(class_)
      + opt_manager_of_class(cls)
      + manager_of_class(cls)
      + state_of(instance)
      + dict_of(instance)
  }

  class InstrumentationManager {
      - __init__(class_)
      + manage(class_, manager)
      + unregister(class_, manager)
      + manager_getter(class_)
      + instrument_attribute(class_, key, inst)
      + post_configure_attribute(class_, key, inst)
      + install_descriptor(class_, key, inst)
      + uninstall_descriptor(class_, key)
      + install_member(class_, key, implementation)
      + uninstall_member(class_, key)
      + instrument_collection_class(class_, key, collection_class)
      + get_instance_dict(class_, instance)
      + initialize_instance_dict(class_, instance)
      + install_state(class_, instance, state)
      + remove_state(class_, instance)
      + state_getter(class_)
      + dict_getter(class_)
  }

  class MutableBase {
      + {classmethod} coerce(cls, key: str, value): Optional[Any]
  }

  class Mutable {
      + changed()
      + {classmethod} associate_with_attribute(cls, attribute: InstrumentedAttribute[_O])
      + {classmethod} associate_with(cls, sqltype: type)
      + {classmethod} as_mutable(cls, sqltype: _TypeEngineArgument[_T]): TypeEngine[_T]
  }

  class MutableComposite {
      + changed()
  }

  class MutableDict {
      + update()
      + popitem(): Tuple[_KT, _VT]
      + clear()
      + {classmethod} coerce(cls, key: str, value): MutableDict[_KT, _VT] | None
  }

  class MutableList {
      + is_scalar(value: _T | Iterable[_T]): TypeGuard[_T]
      + is_iterable(value: _T | Iterable[_T]): TypeGuard[Iterable[_T]]
      + pop(): _T
      + append(x: _T)
      + extend(x: Iterable[_T])
      + insert(i: SupportsIndex, x: _T)
      + remove(i: _T)
      + clear()
      + sort()
      + reverse()
      + {classmethod} coerce(cls, key: str, value: MutableList[_T] | _T): Optional[MutableList[_T]]
  }

  class MutableSet {
      + update()
      + intersection_update()
      + difference_update()
      + symmetric_difference_update()
      + add(elem: _T)
      + remove(elem: _T)
      + discard(elem: _T)
      + pop(): _T
      + clear()
      + {classmethod} coerce(cls, index: str, value): Optional[MutableSet[_T]]
  }

  class OrderingList {
      + ordering_attr: str
      + ordering_func: OrderingFunc
      + reorder_on_append: bool
  --
      - __init__(ordering_attr: Optional[str] = None, ordering_func: Optional[OrderingFunc] = None, reorder_on_append: bool = False)
      + reorder()
      + append(entity)
      + insert(index, entity)
      + remove(entity)
      + pop(index = -1)
  }

  class Serializer {
      + persistent_id(obj)
  }

  class Deserializer {
      - __init__(file, metadata = None, scoped_session = None, engine = None)
      + get_engine()
      + persistent_load(id_)
  }

}

package markdown_it {
  class MarkdownIt {
      - __init__(config: str | PresetType = 'commonmark', options_update: Mapping[str, Any] | None = None)
      + set(options: OptionsType)
      + configure(presets: str | PresetType, options_update: Mapping[str, Any] | None = None): MarkdownIt
      + get_all_rules(): dict[str, list[str]]
      + get_active_rules(): dict[str, list[str]]
      + enable(names: str | Iterable[str], ignoreInvalid: bool = False): MarkdownIt
      + disable(names: str | Iterable[str], ignoreInvalid: bool = False): MarkdownIt
      + reset_rules(): Generator[None, None, None]
      + add_render_rule(name: str, function: Callable[..., Any], fmt: str = 'html')
      + use(plugin: Callable[..., None]): MarkdownIt
      + parse(src: str, env: EnvType | None = None): list[Token]
      + render(src: str, env: EnvType | None = None): Any
      + parseInline(src: str, env: EnvType | None = None): list[Token]
      + renderInline(src: str, env: EnvType | None = None): Any
      + validateLink(url: str): bool
      + normalizeLink(url: str): str
      + normalizeLinkText(link: str): str
  }

  class ParserBlock {
      - __init__()
      + tokenize(state: StateBlock, startLine: int, endLine: int)
      + parse(src: str, md: MarkdownIt, env: EnvType, outTokens: list[Token]): list[Token] | None
  }

  class ParserCore {
      - __init__()
      + process(state: StateCore)
  }

  class ParserInline {
      - __init__()
      + skipToken(state: StateInline)
      + tokenize(state: StateInline)
      + parse(src: str, md: MarkdownIt, env: EnvType, tokens: list[Token]): list[Token]
  }

  class RendererProtocol {
      + render(tokens: Sequence[Token], options: OptionsDict, env: EnvType): Any
  }

  class RendererHTML {
      - __init__(parser = None)
      + render(tokens: Sequence[Token], options: OptionsDict, env: EnvType): str
      + renderInline(tokens: Sequence[Token], options: OptionsDict, env: EnvType): str
      + renderToken(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType): str
      + {static} renderAttrs(token: Token): str
      + renderInlineAsText(tokens: Sequence[Token] | None, options: OptionsDict, env: EnvType): str
      + code_inline(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType): str
      + code_block(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType): str
      + fence(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType): str
      + image(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType): str
      + hardbreak(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType): str
      + softbreak(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType): str
      + text(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType): str
      + html_block(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType): str
      + html_inline(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType): str
  }

  class StateBase {
      - __init__(src: str, md: MarkdownIt, env: EnvType)
      + src(): str
      + src(value: str)
      + srcCharCode(): tuple[int, ...]
  }

  class RuleOptionsType {
      + alt: list[str]
  }

  class Rule <<dataclass>> {
      + name: str
      + enabled: bool
      + fn: RuleFuncTv = field(repr=False)
      + alt: list[str]
  }

  class Ruler {
      - __init__()
      + at(ruleName: str, fn: RuleFuncTv, options: RuleOptionsType | None = None)
      + before(beforeName: str, ruleName: str, fn: RuleFuncTv, options: RuleOptionsType | None = None)
      + after(afterName: str, ruleName: str, fn: RuleFuncTv, options: RuleOptionsType | None = None)
      + push(ruleName: str, fn: RuleFuncTv, options: RuleOptionsType | None = None)
      + enable(names: str | Iterable[str], ignoreInvalid: bool = False): list[str]
      + enableOnly(names: str | Iterable[str], ignoreInvalid: bool = False): list[str]
      + disable(names: str | Iterable[str], ignoreInvalid: bool = False): list[str]
      + getRules(chainName: str = ''): list[RuleFuncTv]
      + get_all_rules(): list[str]
      + get_active_rules(): list[str]
  }

  class Token {
      + type: str
      + tag: str
      + nesting: Literal[-1, 0, 1]
      + attrs: dict[str, str | int | float] = dc.field(default_factory=dict)
      + map: list[int] | None = None
      + level: int = 0
      + children: list[Token] | None = None
      + content: str = ''
      + markup: str = ''
      + info: str = ''
      + meta: dict[Any, Any] = dc.field(default_factory=dict)
      + block: bool = False
      + hidden: bool = False
  --
      + attrIndex(name: str): int
      + attrItems(): list[tuple[str, str | int | float]]
      + attrPush(attrData: tuple[str, str | int | float])
      + attrSet(name: str, value: str | int | float)
      + attrGet(name: str): None | str | int | float
      + attrJoin(name: str, value: str)
      + copy(): Token
      + as_dict(): MutableMapping[str, Any]
      + {classmethod} from_dict(cls, dct: MutableMapping[str, Any]): Token
  }

  class SyntaxTreeNode {
      - __init__(tokens: Sequence[Token] = ())
      + to_tokens(): list[Token]
      + children(): list[_NodeType]
      + children(value: list[_NodeType])
      + parent(): _NodeType | None
      + parent(value: _NodeType | None)
      + is_root(): bool
      + is_nested(): bool
      + siblings(): Sequence[_NodeType]
      + type(): str
      + next_sibling(): _NodeType | None
      + previous_sibling(): _NodeType | None
      + pretty(): str
      + walk(): Generator[_NodeType, None, None]
      + tag(): str
      + attrs(): dict[str, str | int | float]
      + attrGet(name: str): None | str | int | float
      + map(): tuple[int, int] | None
      + level(): int
      + content(): str
      + markup(): str
      + info(): str
      + meta(): dict[Any, Any]
      + block(): bool
      + hidden(): bool
  }

  class OptionsType {
      + maxNesting: int
      + html: bool
      + linkify: bool
      + typographer: bool
      + quotes: str
      + xhtmlOut: bool
      + breaks: bool
      + langPrefix: str
      + highlight: Callable[[str, str, str], str] | None
  }

  class PresetType {
      + options: OptionsType
      + components: MutableMapping[str, MutableMapping[str, list[str]]]
  }

  class OptionsDict {
      - __init__(options: OptionsType)
      + maxNesting(): int
      + maxNesting(value: int)
      + html(): bool
      + html(value: bool)
      + linkify(): bool
      + linkify(value: bool)
      + typographer(): bool
      + typographer(value: bool)
      + quotes(): str
      + quotes(value: str)
      + xhtmlOut(): bool
      + xhtmlOut(value: bool)
      + breaks(): bool
      + breaks(value: bool)
      + langPrefix(): str
      + langPrefix(value: str)
      + highlight(): Callable[[str, str, str], str] | None
      + highlight(value: Callable[[str, str, str], str] | None)
  }

}

package presets {
  class gfm_like {
      + {static} make(): PresetType
  }

}

package rules_block {
  class StateBlock {
      - __init__(src: str, md: MarkdownIt, env: EnvType, tokens: list[Token])
      + push(ttype: str, tag: str, nesting: Literal[-1, 0, 1]): Token
      + isEmpty(line: int): bool
      + skipEmptyLines(from_pos: int): int
      + skipSpaces(pos: int): int
      + skipSpacesBack(pos: int, minimum: int): int
      + skipChars(pos: int, code: int): int
      + skipCharsStr(pos: int, ch: str): int
      + skipCharsBack(pos: int, code: int, minimum: int): int
      + skipCharsStrBack(pos: int, ch: str, minimum: int): int
      + getLines(begin: int, end: int, indent: int, keepLastLF: bool): str
      + is_code_block(line: int): bool
  }

}

package rules_core {
  class StateCore {
      - __init__(src: str, md: MarkdownIt, env: EnvType, tokens: list[Token] | None = None)
  }

}

package rules_inline {
  class Delimiter <<dataclass>> {
      + marker: int
      + length: int
      + token: int
      + end: int
      + open: bool
      + close: bool
      + level: bool | None = None
  }

  class StateInline {
      - __init__(src: str, md: MarkdownIt, env: EnvType, outTokens: list[Token])
      + pushPending(): Token
      + push(ttype: str, tag: str, nesting: Literal[-1, 0, 1]): Token
      + scanDelims(start: int, canSplitWord: bool): Scanned
  }

}

package markupsafe {
  class Markup {
      + join(): te.Self
      + split(sep: str | None = None, maxsplit: t.SupportsIndex = -1): list[te.Self]
      + rsplit(sep: str | None = None, maxsplit: t.SupportsIndex = -1): list[te.Self]
      + splitlines(keepends: bool = False): list[te.Self]
      + unescape(): str
      + striptags(): str
      + {classmethod} escape(): te.Self
      + capitalize(): te.Self
      + title(): te.Self
      + lower(): te.Self
      + upper(): te.Self
      + replace(): te.Self
      + ljust(): te.Self
      + rjust(): te.Self
      + lstrip(): te.Self
      + rstrip(): te.Self
      + center(): te.Self
      + strip(): te.Self
      + translate(): str
      + expandtabs(tabsize: t.SupportsIndex = 8): te.Self
      + swapcase(): te.Self
      + zfill(): te.Self
      + casefold(): te.Self
      + removeprefix(): te.Self
      + removesuffix(suffix: str): te.Self
      + partition(): tuple[te.Self, te.Self, te.Self]
      + rpartition(): tuple[te.Self, te.Self, te.Self]
      + format(): te.Self
      + format_map(): te.Self
  }

  class EscapeFormatter {
      - __init__(escape: _TPEscape)
      + format_field(value: t.Any, format_spec: str): str
  }

}

package mdurl {
  class MutableURL {
      - __init__()
      + parse(url: str, slashes_denote_host: bool): 'MutableURL'
      + parse_host(host: str)
  }

  class URL {
      + protocol: str | None
      + slashes: bool
      + auth: str | None
      + port: str | None
      + hostname: str | None
      + hash: str | None
      + search: str | None
      + pathname: str | None
  }

}

package more_itertools {
  class peekable {
      - __init__(iterable)
      + peek(default = _marker)
      + prepend()
  }

  class bucket {
      - __init__(iterable, key, validator = None)
  }

  class numeric_range {
      - __init__()
      + count(value)
      + index(value)
  }

  class islice_extended {
      - __init__(iterable)
  }

  class SequenceView {
      - __init__(target)
  }

  class seekable {
      - __init__(iterable, maxlen = None)
      + peek(default = _marker)
      + elements()
      + seek(index)
      + relative_seek(count)
  }

  class run_length {
      + {static} encode(iterable)
      + {static} decode(iterable)
  }

  class time_limited {
      - __init__(limit_seconds, iterable)
  }

  class AbortThread {
  }

  class callback_iter {
      - __init__(func, callback_kwd = 'callback', wait_seconds = 0.1)
      + done()
      + result()
  }

  class countable {
      - __init__(iterable)
  }

  class UnequalIterablesError {
      - __init__(details = None)
  }

}

package passlib {
  class HtpasswdFile {
      - __init__(path = None, default_scheme = None, context = htpasswd_context)
      + users()
      + set_password(user, password)
      + update(user, password)
      + get_hash(user)
      + set_hash(user, hash)
      + find(user)
      + delete(user)
      + check_password(user, password)
      + verify(user, password)
  }

  class HtdigestFile {
      + default_realm = None
  --
      - __init__(path = None, default_realm = None)
      + realms()
      + users(realm = None)
      + set_password(user, realm = None, password = _UNSET)
      + update(user, realm, password)
      + get_hash(user, realm = None)
      + set_hash(user, realm = None, hash = _UNSET)
      + find(user, realm)
      + delete(user, realm = None)
      + delete_realm(realm)
      + check_password(user, realm = None, password = _UNSET)
      + verify(user, realm, password)
  }

  class CryptPolicy {
      + {classmethod} from_path(cls, path, section = 'passlib', encoding = 'utf-8')
      + {classmethod} from_string(cls, source, section = 'passlib', encoding = 'utf-8')
      + {classmethod} from_source(cls, source, _warn = True)
      + {classmethod} from_sources(cls, sources, _warn = True)
      + replace()
      - __init__()
      + has_schemes()
      + iter_handlers()
      + schemes(resolve = False)
      + get_handler(name = None, category = None, required = False)
      + get_min_verify_time(category = None)
      + get_options(name, category = None)
      + handler_is_deprecated(name, category = None)
      + iter_config(ini = False, resolve = False)
      + to_dict(resolve = False)
      + to_file(stream, section = 'passlib')
      + to_string(section = 'passlib', encoding = None)
  }

  class CryptContext {
      + policy = property(_get_policy, _set_policy, doc='[deprecated] returns CryptPolicy instance tied to this CryptContext')
      + mvt_estimate_max_samples = 20
      + mvt_estimate_min_samples = 10
      + mvt_estimate_max_time = 2
      + mvt_estimate_resolution = 0.01
      + harden_verify = None
      + min_verify_time = 0
  --
      + {classmethod} from_string(cls, source, section = 'passlib', encoding = 'utf-8')
      + {classmethod} from_path(cls, path, section = 'passlib', encoding = 'utf-8')
      + copy()
      + using()
      + replace()
      - __init__(schemes = None, policy = _UNSET, _autoload = True)
      + load_path(path, update = False, section = 'passlib', encoding = 'utf-8')
      + load(source, update = False, section = 'passlib', encoding = 'utf-8')
      + update()
      + schemes(resolve = False, category = None, unconfigured = False)
      + default_scheme(category = None, resolve = False, unconfigured = False)
      + handler(scheme = None, category = None, unconfigured = False)
      + context_kwds()
      + to_dict(resolve = False)
      + to_string(section = 'passlib')
      + reset_min_verify_time()
      + needs_update(hash, scheme = None, category = None, secret = None)
      + hash_needs_update(hash, scheme = None, category = None)
      + genconfig(scheme = None, category = None)
      + genhash(secret, config, scheme = None, category = None)
      + identify(hash, category = None, resolve = False, required = False, unconfigured = False)
      + hash(secret, scheme = None, category = None)
      + encrypt()
      + verify(secret, hash, scheme = None, category = None)
      + verify_and_update(secret, hash, scheme = None, category = None)
      + dummy_verify(elapsed = 0)
      + is_enabled(hash)
      + disable(hash = None)
      + enable(hash)
  }

  class LazyCryptContext {
      - __init__(schemes = None)
  }

  class UnknownBackendError {
      - __init__(hasher, backend)
  }

  class MissingBackendError {
  }

  class InternalBackendError {
  }

  class PasswordValueError {
  }

  class PasswordSizeError {
      + max_size = None
  --
      - __init__(max_size, msg = None)
  }

  class PasswordTruncateError {
      - __init__(cls, msg = None)
  }

  class PasslibSecurityError {
  }

  class TokenError {
      - __init__(msg = None)
  }

  class MalformedTokenError {
  }

  class InvalidTokenError {
  }

  class UsedTokenError {
      + expire_time = None
  --
      - __init__()
  }

  class UnknownHashError {
      - __init__(message = None, value = None)
  }

  class PasslibWarning {
  }

  class PasslibConfigWarning {
  }

  class PasslibHashWarning {
  }

  class PasslibRuntimeWarning {
  }

  class PasslibSecurityWarning {
  }

  class PasswordHash {
      + is_disabled = False
      + truncate_size = None
      + truncate_error = True
      + truncate_verify_reject = True
      + deprecated = False
  --
      + {classmethod} hash(cls, secret)
      + {classmethod} encrypt(cls)
      + {classmethod} verify(cls, secret, hash)
      + {classmethod} using(cls, relaxed = False)
      + {classmethod} needs_update(cls, hash, secret = None)
      + {classmethod} identify(cls, hash)
      + {classmethod} genconfig(cls)
      + {classmethod} genhash(cls, secret, config)
  }

  class DisabledHash {
      + is_disabled = True
  --
      + {classmethod} disable(cls, hash = None)
      + {classmethod} enable(cls, hash)
  }

  class SequenceGenerator {
      + length = None
      + requested_entropy = 'strong'
      + rng = rng
      + symbol_count = None
  --
      - __init__(entropy = None, length = None, rng = None)
      + entropy_per_symbol()
      + entropy()
  }

  class WordGenerator {
      + charset = 'ascii_62'
      + chars = None
  --
      - __init__(chars = None, charset = None)
      + symbol_count()
  }

  class WordsetDict {
      + paths = None
  --
      - __init__()
      + set_path(key, path)
  }

  class PhraseGenerator {
      + wordset = 'eff_long'
      + words = None
      + sep = ' '
  --
      - __init__(wordset = None, words = None, sep = None)
      + symbol_count()
  }

  class AppWallet {
      + salt_size = 12
      + encrypt_cost = 14
      + default_tag = None
  --
      - __init__(secrets = None, default_tag = None, encrypt_cost = None, secrets_path = None)
      + has_secrets()
      + get_secret(tag)
      + encrypt_key(key)
      + decrypt_key(enckey)
  }

  class TOTP {
      + min_json_version = 1
      + json_version = 1
      + wallet = None
      + now = _time.time
      + digits = 6
      + alg = 'sha1'
      + label = None
      + issuer = None
      + period = 30
      + changed = False
  --
      + {classmethod} using(cls, digits = None, alg = None, period = None, issuer = None, wallet = None, now = None)
      + {classmethod} new(cls)
      - __init__(key = None, format = 'base32', new = False, digits = None, alg = None, size = None, period = None, label = None, issuer = None, changed = False)
      + key()
      + key(value)
      + encrypted_key()
      + encrypted_key(value)
      + hex_key()
      + base32_key()
      + pretty_key(format = 'base32', sep = '-')
      + {classmethod} normalize_time(cls, time)
      + normalize_token(self_or_cls, token)
      + generate(time = None)
      + {classmethod} verify(cls, token, source)
      + match(token, time = None, window = 30, skew = 0, last_counter = None)
      + {classmethod} from_source(cls, source)
      + {classmethod} from_uri(cls, uri)
      + to_uri(label = None, issuer = None)
      + {classmethod} from_json(cls, source)
      + to_json(encrypt = None)
      + {classmethod} from_dict(cls, source)
      + to_dict(encrypt = None)
  }

  class TotpToken {
      + totp = None
      + token = None
      + counter = None
  --
      - __init__(totp, token, counter)
      + start_time()
      + expire_time()
      + remaining()
      + valid()
  }

  class TotpMatch {
      + totp = None
      + counter = 0
      + time = 0
      + window = 30
  --
      - __init__(totp, counter, time, window = 30)
      + expected_counter()
      + skipped()
      + expire_time()
      + cache_seconds()
      + cache_time()
  }

}

package crypto {
  class HashInfo {
      + name = None
      + iana_name = None
      + aliases = ()
      + const = None
      + digest_size = None
      + block_size = None
      + error_text = None
      + unknown = False
  --
      - __init__(const, names, required = True)
      + supported()
      + supported_by_fastpbkdf2()
      + supported_by_hashlib_pbkdf2()
  }

  class md4 {
      + name = 'md4'
      + digest_size = 16
      + digestsize = 16
      + block_size = 64
  --
      - __init__(content = None)
      + update(content)
      + copy()
      + digest()
      + hexdigest()
  }

}

package scrypt {
  class ScryptEngine {
      + n = 0
      + r = 0
      + p = 0
      + smix_bytes = 0
      + iv_bytes = 0
      + bmix_len = 0
      + bmix_half_len = 0
      + bmix_struct = None
      + integerify = None
  --
      + {classmethod} execute(cls, secret, salt, n, r, p, keylen)
      - __init__(n, r, p)
      + run(secret, salt, keylen)
      + smix(input)
      + bmix(source, target)
  }

}

package _blowfish {
  class BlowfishEngine {
      - __init__()
      + {static} key_to_words(data, size = 18)
      + encipher(l, r)
      + expand(key_words)
      + eks_salted_expand(key_words, salt_words)
      + eks_repeated_expand(key_words, salt_words, rounds)
      + repeat_encipher(l, r, count)
  }

  class BlowfishEngine {
      + encipher(l, r)
      + expand(key_words)
  }

}

package handlers {
  class argon2 {
      + backends = ('argon2_cffi', 'argon2pure')
  }

  class bcrypt {
      + backends = ('bcrypt', 'pybcrypt', 'bcryptor', 'os_crypt', 'builtin')
  }

  class bcrypt_sha256 {
      + name = 'bcrypt_sha256'
      + ident_values = (IDENT_2A, IDENT_2B)
      + ident_aliases = (lambda ident_values: dict((item for item in bcrypt.ident_aliases.items() if item[1] in ident_values)))(ident_values)
      + default_ident = IDENT_2B
      + version = 2
      + prefix = u('$bcrypt-sha256$')
  --
      + {classmethod} using(cls, version = None)
      + {classmethod} identify(cls, hash)
      + {classmethod} from_string(cls, hash)
      + to_string()
      - __init__(version = None)
  }

  class cisco_pix {
      + name = 'cisco_pix'
      + truncate_size = 16
      + truncate_error = True
      + truncate_verify_reject = True
      + checksum_size = 16
      + checksum_chars = uh.HASH64_CHARS
  }

  class cisco_asa {
      + name = 'cisco_asa'
      + truncate_size = 32
  }

  class cisco_type7 {
      + name = 'cisco_type7'
      + setting_kwds = ('salt',)
      + checksum_chars = uh.UPPER_HEX_CHARS
      + min_salt_value = 0
      + max_salt_value = 52
  --
      + {classmethod} using(cls, salt = None)
      + {classmethod} from_string(cls, hash)
      - __init__(salt = None)
      + to_string()
      + {classmethod} decode(cls, hash, encoding = 'utf-8')
  }

  class des_crypt {
      + name = 'des_crypt'
      + setting_kwds = ('salt', 'truncate_error')
      + checksum_chars = uh.HASH64_CHARS
      + checksum_size = 11
      + min_salt_size = 2
      + max_salt_size = 2
      + salt_chars = uh.HASH64_CHARS
      + truncate_size = 8
      + backends = ('os_crypt', 'builtin')
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class bsdi_crypt {
      + name = 'bsdi_crypt'
      + setting_kwds = ('salt', 'rounds')
      + checksum_size = 11
      + checksum_chars = uh.HASH64_CHARS
      + min_salt_size = 4
      + max_salt_size = 4
      + salt_chars = uh.HASH64_CHARS
      + default_rounds = 5001
      + min_rounds = 1
      + max_rounds = 16777215
      + rounds_cost = 'linear'
      + backends = ('os_crypt', 'builtin')
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
      + {classmethod} using(cls)
  }

  class bigcrypt {
      + name = 'bigcrypt'
      + setting_kwds = ('salt',)
      + checksum_chars = uh.HASH64_CHARS
      + min_salt_size = 2
      + max_salt_size = 2
      + salt_chars = uh.HASH64_CHARS
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class crypt16 {
      + name = 'crypt16'
      + setting_kwds = ('salt', 'truncate_error')
      + checksum_size = 22
      + checksum_chars = uh.HASH64_CHARS
      + min_salt_size = 2
      + max_salt_size = 2
      + salt_chars = uh.HASH64_CHARS
      + truncate_size = 16
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class HexDigestHash {
      + checksum_size = None
      + checksum_chars = uh.HEX_CHARS
      + supported = True
  }

  class htdigest {
      + name = 'htdigest'
      + setting_kwds = ()
      + context_kwds = ('user', 'realm', 'encoding')
      + default_encoding = 'utf-8'
  --
      + {classmethod} hash(cls, secret, user, realm, encoding = None)
      + {classmethod} verify(cls, secret, hash, user, realm, encoding = 'utf-8')
      + {classmethod} identify(cls, hash)
      + {classmethod} genconfig(cls)
      + {classmethod} genhash(cls, secret, config, user, realm, encoding = None)
  }

  class DjangoSaltedHash {
      + setting_kwds = ('salt', 'salt_size')
      + default_salt_size = 12
      + max_salt_size = None
      + salt_chars = SALT_CHARS
      + checksum_chars = uh.LOWER_HEX_CHARS
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class DjangoVariableHash {
      + setting_kwds = DjangoSaltedHash.setting_kwds + ('rounds',)
      + min_rounds = 1
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class django_salted_sha1 {
      + name = 'django_salted_sha1'
      + django_name = 'sha1'
      + ident = u('sha1$')
      + checksum_size = 40
  }

  class django_salted_md5 {
      + name = 'django_salted_md5'
      + django_name = 'md5'
      + ident = u('md5$')
      + checksum_size = 32
  }

  class django_bcrypt_sha256 {
      + name = 'django_bcrypt_sha256'
      + django_name = 'bcrypt_sha256'
      + django_prefix = u('bcrypt_sha256$')
  --
      + {classmethod} identify(cls, hash)
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class django_pbkdf2_sha256 {
      + name = 'django_pbkdf2_sha256'
      + django_name = 'pbkdf2_sha256'
      + ident = u('pbkdf2_sha256$')
      + min_salt_size = 1
      + max_rounds = 4294967295
      + checksum_chars = uh.PADDED_BASE64_CHARS
      + checksum_size = 44
      + default_rounds = pbkdf2_sha256.default_rounds
  }

  class django_pbkdf2_sha1 {
      + name = 'django_pbkdf2_sha1'
      + django_name = 'pbkdf2_sha1'
      + ident = u('pbkdf2_sha1$')
      + checksum_size = 28
      + default_rounds = pbkdf2_sha1.default_rounds
  }

  class django_des_crypt {
      + name = 'django_des_crypt'
      + django_name = 'crypt'
      + setting_kwds = ('salt', 'salt_size', 'truncate_error')
      + ident = u('crypt$')
      + checksum_chars = uh.HASH64_CHARS
      + salt_chars = uh.HASH64_CHARS
      + checksum_size = 11
      + min_salt_size = 2
      + default_salt_size = 2
      + truncate_size = 8
      + use_duplicate_salt = True
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class django_disabled {
      + name = 'django_disabled'
      + suffix_length = 40
  --
      + {classmethod} identify(cls, hash)
      + {classmethod} verify(cls, secret, hash)
  }

  class fshp {
      + name = 'fshp'
      + setting_kwds = ('salt', 'salt_size', 'rounds', 'variant')
      + checksum_chars = uh.PADDED_BASE64_CHARS
      + ident = u('{FSHP')
      + default_salt_size = 16
      + max_salt_size = None
      + default_rounds = 480000
      + min_rounds = 1
      + max_rounds = 4294967295
      + rounds_cost = 'linear'
      + default_variant = 1
      + variant = None
  --
      + {classmethod} using(cls, variant = None)
      - __init__(variant = None)
      + checksum_alg()
      + checksum_size()
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class ldap_md5 {
      + name = 'ldap_md5'
      + ident = u('{MD5}')
  }

  class ldap_sha1 {
      + name = 'ldap_sha1'
      + ident = u('{SHA}')
  }

  class ldap_salted_md5 {
      + name = 'ldap_salted_md5'
      + ident = u('{SMD5}')
      + checksum_size = 16
  }

  class ldap_salted_sha1 {
      + name = 'ldap_salted_sha1'
      + ident = u('{SSHA}')
      + checksum_size = 20
  }

  class ldap_salted_sha256 {
      + name = 'ldap_salted_sha256'
      + ident = u('{SSHA256}')
      + checksum_size = 32
      + default_salt_size = 8
  }

  class ldap_salted_sha512 {
      + name = 'ldap_salted_sha512'
      + ident = u('{SSHA512}')
      + checksum_size = 64
      + default_salt_size = 8
  }

  class ldap_plaintext {
      + name = 'ldap_plaintext'
  --
      + {classmethod} genconfig(cls)
      + {classmethod} identify(cls, hash)
  }

  class md5_crypt {
      + name = 'md5_crypt'
      + ident = u('$1$')
      + backends = ('os_crypt', 'builtin')
  }

  class apr_md5_crypt {
      + name = 'apr_md5_crypt'
      + ident = u('$apr1$')
  }

  class unix_fallback {
      + name = 'unix_fallback'
      + context_kwds = ('enable_wildcard',)
  --
      + {classmethod} identify(cls, hash)
      - __init__(enable_wildcard = False)
      + {classmethod} verify(cls, secret, hash, enable_wildcard = False)
  }

  class unix_disabled {
      + name = 'unix_disabled'
      + setting_kwds = ('marker',)
      + context_kwds = ()
  --
      + {classmethod} using(cls, marker = None)
      + {classmethod} identify(cls, hash)
      + {classmethod} verify(cls, secret, hash)
      + {classmethod} hash(cls, secret)
      + {classmethod} genhash(cls, secret, config, marker = None)
      + {classmethod} disable(cls, hash = None)
      + {classmethod} enable(cls, hash)
  }

  class plaintext {
      + name = 'plaintext'
      + setting_kwds = ()
      + context_kwds = ('encoding',)
      + default_encoding = 'utf-8'
  --
      + {classmethod} identify(cls, hash)
      + {classmethod} hash(cls, secret, encoding = None)
      + {classmethod} verify(cls, secret, hash, encoding = None)
      + {classmethod} genconfig(cls)
      + {classmethod} genhash(cls, secret, config, encoding = None)
  }

  class mssql2000 {
      + name = 'mssql2000'
      + setting_kwds = ('salt',)
      + checksum_size = 40
      + min_salt_size = 4
      + max_salt_size = 4
  --
      + {classmethod} identify(cls, hash)
      + {classmethod} from_string(cls, hash)
      + to_string()
      + {classmethod} verify(cls, secret, hash)
  }

  class mssql2005 {
      + name = 'mssql2005'
      + setting_kwds = ('salt',)
      + checksum_size = 20
      + min_salt_size = 4
      + max_salt_size = 4
  --
      + {classmethod} identify(cls, hash)
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class mysql323 {
      + name = 'mysql323'
      + checksum_size = 16
      + checksum_chars = uh.HEX_CHARS
  }

  class mysql41 {
      + name = 'mysql41'
      + checksum_chars = uh.HEX_CHARS
      + checksum_size = 40
  }

  class oracle10 {
      + name = 'oracle10'
      + checksum_chars = uh.HEX_CHARS
      + checksum_size = 16
  }

  class oracle11 {
      + name = 'oracle11'
      + setting_kwds = ('salt',)
      + checksum_size = 40
      + checksum_chars = uh.UPPER_HEX_CHARS
      + min_salt_size = 20
      + max_salt_size = 20
      + salt_chars = uh.UPPER_HEX_CHARS
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class Pbkdf2DigestHandler {
      + setting_kwds = ('salt', 'salt_size', 'rounds')
      + checksum_chars = uh.HASH64_CHARS
      + default_salt_size = 16
      + max_salt_size = 1024
      + default_rounds = None
      + min_rounds = 1
      + max_rounds = 4294967295
      + rounds_cost = 'linear'
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class cta_pbkdf2_sha1 {
      + name = 'cta_pbkdf2_sha1'
      + setting_kwds = ('salt', 'salt_size', 'rounds')
      + ident = u('$p5k2$')
      + checksum_size = 20
      + default_salt_size = 16
      + max_salt_size = 1024
      + default_rounds = pbkdf2_sha1.default_rounds
      + min_rounds = 1
      + max_rounds = 4294967295
      + rounds_cost = 'linear'
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class dlitz_pbkdf2_sha1 {
      + name = 'dlitz_pbkdf2_sha1'
      + setting_kwds = ('salt', 'salt_size', 'rounds')
      + ident = u('$p5k2$')
      + default_salt_size = 16
      + max_salt_size = 1024
      + salt_chars = uh.HASH64_CHARS
      + default_rounds = pbkdf2_sha1.default_rounds
      + min_rounds = 1
      + max_rounds = 4294967295
      + rounds_cost = 'linear'
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class atlassian_pbkdf2_sha1 {
      + name = 'atlassian_pbkdf2_sha1'
      + setting_kwds = ('salt',)
      + ident = u('{PKCS5S2}')
      + checksum_size = 32
      + min_salt_size = 16
      + max_salt_size = 16
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class grub_pbkdf2_sha512 {
      + name = 'grub_pbkdf2_sha512'
      + setting_kwds = ('salt', 'salt_size', 'rounds')
      + ident = u('grub.pbkdf2.sha512.')
      + checksum_size = 64
      + default_salt_size = 64
      + max_salt_size = 1024
      + default_rounds = pbkdf2_sha512.default_rounds
      + min_rounds = 1
      + max_rounds = 4294967295
      + rounds_cost = 'linear'
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class phpass {
      + name = 'phpass'
      + setting_kwds = ('salt', 'rounds', 'ident')
      + checksum_chars = uh.HASH64_CHARS
      + min_salt_size = 8
      + max_salt_size = 8
      + salt_chars = uh.HASH64_CHARS
      + default_rounds = 19
      + min_rounds = 7
      + max_rounds = 30
      + rounds_cost = 'log2'
      + default_ident = u('$P$')
      + ident_values = (u('$P$'), u('$H$'))
      + ident_aliases = {u('P'): u('$P$'), u('H'): u('$H$')}
  --
      + {classmethod} from_string(cls, hash)
      + to_string()
  }

  class postgres_md5 {
      + name = 'postgres_md5'
      + checksum_chars = uh.HEX_CHARS
      + checksum_size = 32
  }

  class scram {
      + name = 'scram'
      + setting_kwds = ('salt', 'salt_size', 'rounds', 'algs')
      + ident = u('$scram$')
      + default_salt_size = 12
      + max_salt_size = 1024
      + default_rounds = 100000
      + min_rounds = 1
      + max_rounds = 2 ** 32 - 1
      + rounds_cost = 'linear'
      + default_algs = ['sha-1', 'sha-256', 'sha-512']
      + algs = None
  --
      + {classmethod} extract_digest_info(cls, hash, alg)
      + {classmethod} extract_digest_algs(cls, hash, format = 'iana')
      + {classmethod} derive_digest(cls, password, salt, rounds, alg)
      + {classmethod} from_string(cls, hash)
      + to_string()
      + {classmethod} using(cls, default_algs = None, algs = None)
      - __init__(algs = None)
      + {classmethod} verify(cls, secret, hash, full = False)
  }

  class scrypt {
      + name = 'scrypt'
      + setting_kwds = ('ident', 'salt', 'salt_size', 'rounds', 'block_size', 'parallelism')
      + checksum_size = 32
      + default_ident = IDENT_SCRYPT
      + ident_values = (IDENT_SCRYPT, IDENT_7)
      + default_salt_size = 16
      + max_salt_size = 1024
      + default_rounds = 16
      + min_rounds = 1
      + max_rounds = 31
      + rounds_cost = 'log2'
      + parallelism = 1
      + block_size = 8
  --
      + {classmethod} using(cls, block_size = None)
      + {classmethod} from_string(cls, hash)
      + {classmethod} parse(cls, hash)
      + to_string()
      - __init__(block_size = None)
      + backends(cls)
      + {classmethod} get_backend(cls)
      + {classmethod} has_backend(cls, name = 'any')
      + {classmethod} set_backend(cls, name = 'any', dryrun = False)
  }

  class sha1_crypt {
      + name = 'sha1_crypt'
      + setting_kwds = ('salt', 'salt_size', 'rounds')
      + ident = u('$sha1$')
      + checksum_size = 28
      + checksum_chars = uh.HASH64_CHARS
      + default_salt_size = 8
      + max_salt_size = 64
      + salt_chars = uh.HASH64_CHARS
      + default_rounds = 480000
      + min_rounds = 1
      + max_rounds = 4294967295
      + rounds_cost = 'linear'
      + backends = ('os_crypt', 'builtin')
  --
      + {classmethod} from_string(cls, hash)
      + to_string(config = False)
  }

  class sha256_crypt {
      + name = 'sha256_crypt'
      + ident = u('$5$')
      + checksum_size = 43
      + default_rounds = 535000
  }

  class sha512_crypt {
      + name = 'sha512_crypt'
      + ident = u('$6$')
      + checksum_size = 86
      + default_rounds = 656000
  }

  class sun_md5_crypt {
      + name = 'sun_md5_crypt'
      + setting_kwds = ('salt', 'rounds', 'bare_salt', 'salt_size')
      + checksum_chars = uh.HASH64_CHARS
      + checksum_size = 22
      + default_salt_size = 8
      + max_salt_size = None
      + salt_chars = uh.HASH64_CHARS
      + default_rounds = 34000
      + min_rounds = 0
      + max_rounds = 4294963199
      + rounds_cost = 'linear'
      + ident_values = (u('$md5$'), u('$md5,'))
      + bare_salt = False
  --
      - __init__(bare_salt = False)
      + {classmethod} identify(cls, hash)
      + {classmethod} from_string(cls, hash)
      + to_string(_withchk = True)
  }

  class lmhash {
      + name = 'lmhash'
      + setting_kwds = ('truncate_error',)
      + checksum_chars = uh.HEX_CHARS
      + checksum_size = 32
      + truncate_size = 14
      + default_encoding = 'cp437'
  --
      + {classmethod} raw(cls, secret, encoding = None)
  }

  class nthash {
      + name = 'nthash'
      + checksum_chars = uh.HEX_CHARS
      + checksum_size = 32
  --
      + {classmethod} raw(cls, secret)
      + {classmethod} raw_nthash(cls, secret, hex = False)
  }

  class msdcc {
      + name = 'msdcc'
      + checksum_chars = uh.HEX_CHARS
      + checksum_size = 32
  --
      + {classmethod} raw(cls, secret, user)
  }

  class msdcc2 {
      + name = 'msdcc2'
      + checksum_chars = uh.HEX_CHARS
      + checksum_size = 32
  --
      + {classmethod} raw(cls, secret, user)
  }

}

package pip {
  class PipImportRedirectingFinder {
      + {classmethod} find_spec(fullname, path = None, target = None)
  }

}

package _internal {
  class BuildEnvironment {
      - __init__()
      + check_requirements(reqs: Iterable[str]): Tuple[Set[Tuple[str, str]], Set[str]]
      + install_requirements(finder: 'PackageFinder', requirements: Iterable[str], prefix_as_string: str)
  }

  class NoOpBuildEnvironment {
      - __init__()
      + cleanup()
      + install_requirements(finder: 'PackageFinder', requirements: Iterable[str], prefix_as_string: str)
  }

  class Cache {
      - __init__(cache_dir: str)
      + get_path_for_link(link: Link): str
      + get(link: Link, package_name: Optional[str], supported_tags: List[Tag]): Link
  }

  class SimpleWheelCache {
      - __init__(cache_dir: str)
      + get_path_for_link(link: Link): str
      + get(link: Link, package_name: Optional[str], supported_tags: List[Tag]): Link
  }

  class EphemWheelCache {
      - __init__()
  }

  class CacheEntry {
      - __init__(link: Link, persistent: bool)
  }

  class WheelCache {
      - __init__(cache_dir: str)
      + get_path_for_link(link: Link): str
      + get_ephem_path_for_link(link: Link): str
      + get(link: Link, package_name: Optional[str], supported_tags: List[Tag]): Link
      + get_cache_entry(link: Link, package_name: Optional[str], supported_tags: List[Tag]): Optional[CacheEntry]
      + {static} record_download_origin(cache_dir: str, download_info: DirectUrl)
  }

  class Configuration {
      - __init__(isolated: bool, load_only: Optional[Kind] = None)
      + load()
      + get_file_to_edit(): Optional[str]
      + items(): Iterable[Tuple[str, Any]]
      + get_value(key: str): Any
      + set_value(key: str, value)
      + unset_value(key: str)
      + save()
      + get_environ_vars(): Iterable[Tuple[str, str]]
      + iter_config_files(): Iterable[Tuple[Kind, List[str]]]
      + get_values_in_config(variant: Kind): Dict[str, Any]
  }

  class PipError {
  }

  class DiagnosticPipError {
      + reference: str
  --
      - __init__()
  }

  class ConfigurationError {
  }

  class InstallationError {
  }

  class MissingPyProjectBuildRequires {
      + reference = 'missing-pyproject-build-system-requires'
  --
      - __init__()
  }

  class InvalidPyProjectBuildRequires {
      + reference = 'invalid-pyproject-build-system-requires'
  --
      - __init__()
  }

  class NoneMetadataError {
      - __init__(dist: 'BaseDistribution', metadata_name: str)
  }

  class UserInstallationInvalid {
  }

  class InvalidSchemeCombination {
  }

  class DistributionNotFound {
  }

  class RequirementsFileParseError {
  }

  class BestVersionAlreadyInstalled {
  }

  class BadCommand {
  }

  class CommandError {
  }

  class PreviousBuildDirError {
  }

  class NetworkConnectionError {
      - __init__(error_msg: str, response: Optional['Response'] = None, request: Optional['Request'] = None)
  }

  class InvalidWheelFilename {
  }

  class UnsupportedWheel {
  }

  class InvalidWheel {
      - __init__(location: str, name: str)
  }

  class MetadataInconsistent {
      - __init__(ireq: 'InstallRequirement', field: str, f_val: str, m_val: str)
  }

  class MetadataInvalid {
      - __init__(ireq: 'InstallRequirement', error: str)
  }

  class InstallationSubprocessError {
      + reference = 'subprocess-exited-with-error'
  --
      - __init__()
  }

  class MetadataGenerationFailed {
      + reference = 'metadata-generation-failed'
  --
      - __init__()
  }

  class HashErrors {
      - __init__()
      + append(error: 'HashError')
  }

  class HashError {
      + req: Optional['InstallRequirement'] = None
      + head = ''
      + order: int = -1
  --
      + body(): str
  }

  class VcsHashUnsupported {
      + order = 0
      + head = "Can't verify hashes for these requirements because we don't have a way to hash version control repositories:"
  }

  class DirectoryUrlHashUnsupported {
      + order = 1
      + head = "Can't verify hashes for these file:// requirements because they point to directories:"
  }

  class HashMissing {
      + order = 2
      + head = 'Hashes are required in --require-hashes mode, but they are missing from some requirements. Here is a list of those requirements along with the hashes their downloaded archives actually had. Add lines like these to your requirements files to prevent tampering. (If you did not enable --require-hashes manually, note that it turns on automatically when any package has a hash.)'
  --
      - __init__(gotten_hash: str)
      + body(): str
  }

  class HashUnpinned {
      + order = 3
      + head = 'In --require-hashes mode, all requirements must have their versions pinned with ==. These do not:'
  }

  class HashMismatch {
      + order = 4
      + head = 'THESE PACKAGES DO NOT MATCH THE HASHES FROM THE REQUIREMENTS FILE. If you have updated the package versions, please update the hashes. Otherwise, examine the package contents carefully; someone may have tampered with them.'
  --
      - __init__(allowed: Dict[str, List[str]], gots: Dict[str, '_Hash'])
      + body(): str
  }

  class UnsupportedPythonVersion {
  }

  class ConfigurationFileCouldNotBeLoaded {
      - __init__(reason: str = 'could not be loaded', fname: Optional[str] = None, error: Optional[configparser.Error] = None)
  }

  class ExternallyManagedEnvironment {
      + reference = 'externally-managed-environment'
  --
      - __init__(error: Optional[str])
      + {classmethod} from_config(cls, config: Union[pathlib.Path, str]): 'ExternallyManagedEnvironment'
  }

  class UninstallMissingRecord {
      + reference = 'uninstall-no-record-file'
  --
      - __init__()
  }

  class LegacyDistutilsInstall {
      + reference = 'uninstall-distutils-installed-package'
  --
      - __init__()
  }

  class SelfCheckState {
      - __init__(cache_dir: str)
      + key(): str
      + get(current_time: datetime.datetime): Optional[str]
      + set(pypi_version: str, current_time: datetime.datetime)
  }

  class UpgradePrompt <<dataclass>> {
      + old: str
      + new: str
  }

  class ConfigWrapper {
      + config_dict: ConfigDict
      + title: str | None
      + str_to_lower: bool
      + str_to_upper: bool
      + str_strip_whitespace: bool
      + str_min_length: int
      + str_max_length: int | None
      + extra: ExtraValues | None
      + frozen: bool
      + populate_by_name: bool
      + use_enum_values: bool
      + validate_assignment: bool
      + arbitrary_types_allowed: bool
      + from_attributes: bool
      + loc_by_alias: bool
      + alias_generator: Callable[[str], str] | AliasGenerator | None
      + model_title_generator: Callable[[type], str] | None
      + field_title_generator: Callable[[str, FieldInfo | ComputedFieldInfo], str] | None
      + ignored_types: tuple[type, ...]
      + allow_inf_nan: bool
      + json_schema_extra: JsonDict | JsonSchemaExtraCallable | None
      + json_encoders: dict[type[object], JsonEncoder] | None
      + strict: bool
      + revalidate_instances: Literal['always', 'never', 'subclass-instances']
      + ser_json_timedelta: Literal['iso8601', 'float']
      + ser_json_bytes: Literal['utf8', 'base64', 'hex']
      + val_json_bytes: Literal['utf8', 'base64', 'hex']
      + ser_json_inf_nan: Literal['null', 'constants', 'strings']
      + validate_default: bool
      + validate_return: bool
      + protected_namespaces: tuple[str | Pattern[str], ...]
      + hide_input_in_errors: bool
      + defer_build: bool
      + plugin_settings: dict[str, object] | None
      + schema_generator: type[GenerateSchema] | None
      + json_schema_serialization_defaults_required: bool
      + json_schema_mode_override: Literal['validation', 'serialization', None]
      + coerce_numbers_to_str: bool
      + regex_engine: Literal['rust-regex', 'python-re']
      + validation_error_cause: bool
      + use_attribute_docstrings: bool
      + cache_strings: bool | Literal['all', 'keys', 'none']
  --
      - __init__(config: ConfigDict | dict[str, Any] | type[Any] | None)
      + {classmethod} for_model(cls, bases: tuple[type[Any], ...], namespace: dict[str, Any], kwargs: dict[str, Any]): Self
      + core_config(title: str | None): core_schema.CoreConfig
  }

  class ConfigWrapperStack {
      - __init__(config_wrapper: ConfigWrapper)
      + tail(): ConfigWrapper
      + push(config_wrapper: ConfigWrapper | ConfigDict | None)
  }

  class CoreMetadata {
      + pydantic_js_functions: list[GetJsonSchemaFunction]
      + pydantic_js_annotation_functions: list[GetJsonSchemaFunction]
      + pydantic_js_prefer_positional_arguments: bool
      + pydantic_js_updates: JsonDict
      + pydantic_js_extra: JsonDict | JsonSchemaExtraCallable
  }

  class PydanticDataclass {
  }

  class ValidatorDecoratorInfo <<dataclass>> {
      + decorator_repr: ClassVar[str] = '@validator'
      + fields: tuple[str, ...]
      + mode: Literal['before', 'after']
      + each_item: bool
      + always: bool
      + check_fields: bool | None
  }

  class FieldValidatorDecoratorInfo <<dataclass>> {
      + decorator_repr: ClassVar[str] = '@field_validator'
      + fields: tuple[str, ...]
      + mode: FieldValidatorModes
      + check_fields: bool | None
      + json_schema_input_type
  }

  class RootValidatorDecoratorInfo <<dataclass>> {
      + decorator_repr: ClassVar[str] = '@root_validator'
      + mode: Literal['before', 'after']
  }

  class FieldSerializerDecoratorInfo <<dataclass>> {
      + decorator_repr: ClassVar[str] = '@field_serializer'
      + fields: tuple[str, ...]
      + mode: Literal['plain', 'wrap']
      + return_type
      + when_used: core_schema.WhenUsed
      + check_fields: bool | None
  }

  class ModelSerializerDecoratorInfo <<dataclass>> {
      + decorator_repr: ClassVar[str] = '@model_serializer'
      + mode: Literal['plain', 'wrap']
      + return_type
      + when_used: core_schema.WhenUsed
  }

  class ModelValidatorDecoratorInfo <<dataclass>> {
      + decorator_repr: ClassVar[str] = '@model_validator'
      + mode: Literal['wrap', 'before', 'after']
  }

  class PydanticDescriptorProxy <<dataclass>> {
      + wrapped: DecoratedType[ReturnType]
      + decorator_info: DecoratorInfo
      + shim: Callable[[Callable[..., Any]], Callable[..., Any]] | None = None
  }

  class Decorator <<dataclass>> {
      + cls_ref: str
      + cls_var_name: str
      + func: Callable[..., Any]
      + shim: Callable[[Any], Any] | None
      + info: DecoratorInfoType
  --
      + {static} build(cls_): Decorator[DecoratorInfoType]
      + bind_to_cls(cls): Decorator[DecoratorInfoType]
  }

  class DecoratorInfos <<dataclass>> {
      + validators: dict[str, Decorator[ValidatorDecoratorInfo]] = field(default_factory=dict)
      + field_validators: dict[str, Decorator[FieldValidatorDecoratorInfo]] = field(default_factory=dict)
      + root_validators: dict[str, Decorator[RootValidatorDecoratorInfo]] = field(default_factory=dict)
      + field_serializers: dict[str, Decorator[FieldSerializerDecoratorInfo]] = field(default_factory=dict)
      + model_serializers: dict[str, Decorator[ModelSerializerDecoratorInfo]] = field(default_factory=dict)
      + model_validators: dict[str, Decorator[ModelValidatorDecoratorInfo]] = field(default_factory=dict)
      + computed_fields: dict[str, Decorator[ComputedFieldInfo]] = field(default_factory=dict)
  --
      + {static} build(model_dc: type[Any]): DecoratorInfos
  }

  class V1OnlyValueValidator {
  }

  class V1ValidatorWithValues {
  }

  class V1ValidatorWithValuesKwOnly {
  }

  class V1ValidatorWithKwargs {
  }

  class V1ValidatorWithValuesAndKwargs {
  }

  class V1RootValidatorFunction {
  }

  class V2CoreBeforeRootValidator {
  }

  class V2CoreAfterRootValidator {
  }

  class MissingDefinitionForUnionRef {
      - __init__(ref: str)
  }

  class DocstringVisitor {
      - __init__()
      + visit(node: ast.AST): Any
      + visit_AnnAssign(node: ast.AnnAssign): Any
      + visit_Expr(node: ast.Expr): Any
  }

  class PydanticMetadata {
  }

  class PydanticRecursiveRef <<dataclass>> {
      + type_ref: str
  }

  class GenerateSchema {
      - __init__(config_wrapper: ConfigWrapper, ns_resolver: NsResolver | None = None, typevars_map: dict[Any, Any] | None = None)
      + clean_schema(schema: CoreSchema): CoreSchema
      + collect_definitions(schema: CoreSchema): CoreSchema
      + generate_schema(obj, from_dunder_get_core_schema: bool = True): core_schema.CoreSchema
      + match_type(obj): core_schema.CoreSchema
  }

  class CollectedInvalid {
  }

  class LimitedDict {
      - __init__(size_limit: int = _LIMITED_DICT_SIZE)
  }

  class LimitedDict {
      - __init__(size_limit: int = _LIMITED_DICT_SIZE)
  }

  class DeepChainMap {
  }

  class DeepChainMap {
      + clear()
  }

  class PydanticGenericMetadata {
      + origin: type[BaseModel] | None
      + args: tuple[Any, ...]
      + parameters: tuple[TypeVar, ...]
  }

  class MockCoreSchema {
      - __init__(error_message: str)
      + rebuild(): CoreSchema | None
  }

  class MockValSer {
      - __init__(error_message: str)
      + rebuild(): ValSer | None
  }

  class ModelMetaclass {
      + model_fields(): dict[str, FieldInfo]
      + model_computed_fields(): dict[str, ComputedFieldInfo]
  }

  class NamespacesTuple {
      + globals: GlobalsNamespace
      + locals: MappingNamespace
  }

  class LazyLocalNamespace {
      - __init__()
      + data(): dict[str, Any]
  }

  class NsResolver {
      - __init__(namespaces_tuple: NamespacesTuple | None = None, parent_namespace: MappingNamespace | None = None)
      + types_namespace(): NamespacesTuple
      + push(): Generator[None]
  }

  class PlainRepr {
  }

  class Representation {
  }

  class GenerateJsonSchemaHandler {
      - __init__(generate_json_schema: GenerateJsonSchema, handler_override: HandlerOverride | None)
      + resolve_ref_schema(maybe_ref_json_schema: JsonSchemaValue): JsonSchemaValue
  }

  class CallbackGetCoreSchemaHandler {
      - __init__(handler: Callable[[Any], core_schema.CoreSchema], generate_schema: GenerateSchema, ref_mode: Literal['to-def', 'unpack'] = 'to-def')
      + generate_schema(): core_schema.CoreSchema
      + field_name(): str | None
      + resolve_ref_schema(maybe_ref_schema: core_schema.CoreSchema): core_schema.CoreSchema
  }

  class InnerSchemaValidator {
      + core_schema: CoreSchema
      + js_schema: JsonSchemaValue | None = None
      + js_core_schema: CoreSchema | None = None
      + js_schema_update: JsonSchemaValue | None = None
  }

  class DequeValidator {
      + item_source_type: type[Any]
      + metadata: dict[str, Any]
  }

  class MappingValidator {
      + mapped_origin: type[Any]
      + keys_source_type: type[Any]
      + values_source_type: type[Any]
      + min_length: int | None = None
      + max_length: int | None = None
      + strict: bool = False
  --
      + serialize_mapping_via_dict(v, handler: core_schema.SerializerFunctionWrapHandler): Any
  }

  class ValueItems {
      - __init__(value, items: AbstractSetIntStr | MappingIntStrAny)
      + is_excluded(item): bool
      + is_included(item): bool
      + for_element(e: int | str): AbstractSetIntStr | MappingIntStrAny | None
      + {classmethod} merge(cls, base, override, intersect: bool = False): Any
      + {static} is_true(v): bool
  }

  class LazyClassAttribute {
      - __init__(name: str, get_value: Callable[[], Any])
      + value(): Any
  }

  class SafeGetItemProxy {
      + wrapped: Mapping[str, Any]
  }

  class ValidateCallWrapper {
      - __init__(function: ValidateCallSupportedTypes, config: ConfigDict | None, validate_return: bool, parent_namespace: MappingNamespace | None)
  }

}

package commands {
  class CacheCommand {
      + ignore_require_venv = True
      + usage = '\n        %prog dir\n        %prog info\n        %prog list [<pattern>] [--format=[human, abspath]]\n        %prog remove <pattern>\n        %prog purge\n    '
  --
      + add_options()
      + run(options: Values, args: List[str]): int
      + get_cache_dir(options: Values, args: List[Any])
      + get_cache_info(options: Values, args: List[Any])
      + list_cache_items(options: Values, args: List[Any])
      + format_for_human(files: List[str])
      + format_for_abspath(files: List[str])
      + remove_cache_items(options: Values, args: List[Any])
      + purge_cache(options: Values, args: List[Any])
  }

  class CheckCommand {
      + ignore_require_venv = True
      + usage = '\n      %prog [options]'
  --
      + run(options: Values, args: List[str]): int
  }

  class CompletionCommand {
      + ignore_require_venv = True
  --
      + add_options()
      + run(options: Values, args: List[str]): int
  }

  class ConfigurationCommand {
      + ignore_require_venv = True
      + usage = '\n        %prog [<file-option>] list\n        %prog [<file-option>] [--editor <editor-path>] edit\n\n        %prog [<file-option>] get command.option\n        %prog [<file-option>] set command.option value\n        %prog [<file-option>] unset command.option\n        %prog [<file-option>] debug\n    '
  --
      + add_options()
      + run(options: Values, args: List[str]): int
      + list_values(options: Values, args: List[str])
      + get_name(options: Values, args: List[str])
      + set_name_value(options: Values, args: List[str])
      + unset_name(options: Values, args: List[str])
      + list_config_values(options: Values, args: List[str])
      + print_config_file_values(variant: Kind)
      + print_env_var_values()
      + open_in_editor(options: Values, args: List[str])
  }

  class DebugCommand {
      + usage = '\n      %prog <options>'
      + ignore_require_venv = True
  --
      + add_options()
      + run(options: Values, args: List[str]): int
  }

  class DownloadCommand {
      + usage = '\n      %prog [options] <requirement specifier> [package-index-options] ...\n      %prog [options] -r <requirements file> [package-index-options] ...\n      %prog [options] <vcs project url> ...\n      %prog [options] <local project path> ...\n      %prog [options] <archive url/path> ...'
  --
      + add_options()
      + run(options: Values, args: List[str]): int
  }

  class FreezeCommand {
      + ignore_require_venv = True
      + usage = '\n      %prog [options]'
      + log_streams = ('ext://sys.stderr', 'ext://sys.stderr')
  --
      + add_options()
      + run(options: Values, args: List[str]): int
  }

  class HashCommand {
      + usage = '%prog [options] <file> ...'
      + ignore_require_venv = True
  --
      + add_options()
      + run(options: Values, args: List[str]): int
  }

  class HelpCommand {
      + usage = '\n      %prog <command>'
      + ignore_require_venv = True
  --
      + run(options: Values, args: List[str]): int
  }

  class IndexCommand {
      + ignore_require_venv = True
      + usage = '\n        %prog versions <package>\n    '
  --
      + add_options()
      + run(options: Values, args: List[str]): int
      + get_available_package_versions(options: Values, args: List[Any])
  }

  class InspectCommand {
      + ignore_require_venv = True
      + usage = '\n      %prog [options]'
  --
      + add_options()
      + run(options: Values, args: List[str]): int
  }

  class InstallCommand {
      + usage = '\n      %prog [options] <requirement specifier> [package-index-options] ...\n      %prog [options] -r <requirements file> [package-index-options] ...\n      %prog [options] [-e] <vcs project url> ...\n      %prog [options] [-e] <local project path> ...\n      %prog [options] <archive url/path> ...'
  --
      + add_options()
      + run(options: Values, args: List[str]): int
  }

  class ListCommand {
      + ignore_require_venv = True
      + usage = '\n      %prog [options]'
  --
      + add_options()
      + handle_pip_version_check(options: Values)
      + run(options: Values, args: List[str]): int
      + get_outdated(packages: '_ProcessedDists', options: Values): '_ProcessedDists'
      + get_uptodate(packages: '_ProcessedDists', options: Values): '_ProcessedDists'
      + get_not_required(packages: '_ProcessedDists', options: Values): '_ProcessedDists'
      + iter_packages_latest_infos(packages: '_ProcessedDists', options: Values): Generator['_DistWithLatestInfo', None, None]
      + output_package_listing(packages: '_ProcessedDists', options: Values)
      + output_package_listing_columns(data: List[List[str]], header: List[str])
  }

  class TransformedHit {
      + name: str
      + summary: str
      + versions: List[str]
  }

  class SearchCommand {
      + usage = '\n      %prog [options] <query>'
      + ignore_require_venv = True
  --
      + add_options()
      + run(options: Values, args: List[str]): int
      + search(query: List[str], options: Values): List[Dict[str, str]]
  }

  class ShowCommand {
      + usage = '\n      %prog [options] <package> ...'
      + ignore_require_venv = True
  --
      + add_options()
      + run(options: Values, args: List[str]): int
  }

  class UninstallCommand {
      + usage = '\n      %prog [options] <package> ...\n      %prog [options] -r <requirements file> ...'
  --
      + add_options()
      + run(options: Values, args: List[str]): int
  }

  class WheelCommand {
      + usage = '\n      %prog [options] <requirement specifier> ...\n      %prog [options] -r <requirements file> ...\n      %prog [options] [-e] <vcs project url> ...\n      %prog [options] [-e] <local project path> ...\n      %prog [options] <archive url/path> ...'
  --
      + add_options()
      + run(options: Values, args: List[str]): int
  }

}

package distributions {
  class AbstractDistribution {
      - __init__(req: InstallRequirement)
      + build_tracker_id(): Optional[str]
      + get_metadata_distribution(): BaseDistribution
      + prepare_distribution_metadata(finder: 'PackageFinder', build_isolation: bool, check_build_deps: bool)
  }

  class InstalledDistribution {
      + build_tracker_id(): Optional[str]
      + get_metadata_distribution(): BaseDistribution
      + prepare_distribution_metadata(finder: PackageFinder, build_isolation: bool, check_build_deps: bool)
  }

  class SourceDistribution {
      + build_tracker_id(): Optional[str]
      + get_metadata_distribution(): BaseDistribution
      + prepare_distribution_metadata(finder: 'PackageFinder', build_isolation: bool, check_build_deps: bool)
  }

  class WheelDistribution {
      + build_tracker_id(): Optional[str]
      + get_metadata_distribution(): BaseDistribution
      + prepare_distribution_metadata(finder: 'PackageFinder', build_isolation: bool, check_build_deps: bool)
  }

}

package index {
  class CacheablePageContent {
      - __init__(page: 'IndexContent')
  }

  class ParseLinks {
  }

  class IndexContent <<dataclass>> {
      + content: bytes
      + content_type: str
      + encoding: Optional[str]
      + url: str
      + cache_link_parsing: bool = True
  }

  class HTMLLinkParser {
      - __init__(url: str)
      + handle_starttag(tag: str, attrs: List[Tuple[str, Optional[str]]])
      + get_href(attrs: List[Tuple[str, Optional[str]]]): Optional[str]
  }

  class CollectedSources {
      + find_links: Sequence[Optional[LinkSource]]
      + index_urls: Sequence[Optional[LinkSource]]
  }

  class LinkCollector {
      - __init__(session: PipSession, search_scope: SearchScope)
      + {classmethod} create(cls, session: PipSession, options: Values, suppress_no_index: bool = False): 'LinkCollector'
      + find_links(): List[str]
      + fetch_response(location: Link): Optional[IndexContent]
      + collect_sources(project_name: str, candidates_from_page: CandidatesFromPage): CollectedSources
  }

  class LinkType {
      + candidate = enum.auto()
      + different_project = enum.auto()
      + yanked = enum.auto()
      + format_unsupported = enum.auto()
      + format_invalid = enum.auto()
      + platform_mismatch = enum.auto()
      + requires_python_mismatch = enum.auto()
  }

  class LinkEvaluator {
      - __init__(project_name: str, canonical_name: str, formats: FrozenSet[str], target_python: TargetPython, allow_yanked: bool, ignore_requires_python: Optional[bool] = None)
      + evaluate_link(link: Link): Tuple[LinkType, str]
  }

  class CandidatePreferences <<dataclass>> {
      + prefer_binary: bool = False
      + allow_all_prereleases: bool = False
  }

  class BestCandidateResult {
      - __init__(candidates: List[InstallationCandidate], applicable_candidates: List[InstallationCandidate], best_candidate: Optional[InstallationCandidate])
      + iter_all(): Iterable[InstallationCandidate]
      + iter_applicable(): Iterable[InstallationCandidate]
  }

  class CandidateEvaluator {
      + {classmethod} create(cls, project_name: str, target_python: Optional[TargetPython] = None, prefer_binary: bool = False, allow_all_prereleases: bool = False, specifier: Optional[specifiers.BaseSpecifier] = None, hashes: Optional[Hashes] = None): 'CandidateEvaluator'
      - __init__(project_name: str, supported_tags: List[Tag], specifier: specifiers.BaseSpecifier, prefer_binary: bool = False, allow_all_prereleases: bool = False, hashes: Optional[Hashes] = None)
      + get_applicable_candidates(candidates: List[InstallationCandidate]): List[InstallationCandidate]
      + sort_best_candidate(candidates: List[InstallationCandidate]): Optional[InstallationCandidate]
      + compute_best_candidate(candidates: List[InstallationCandidate]): BestCandidateResult
  }

  class PackageFinder {
      - __init__(link_collector: LinkCollector, target_python: TargetPython, allow_yanked: bool, format_control: Optional[FormatControl] = None, candidate_prefs: Optional[CandidatePreferences] = None, ignore_requires_python: Optional[bool] = None)
      + {classmethod} create(cls, link_collector: LinkCollector, selection_prefs: SelectionPreferences, target_python: Optional[TargetPython] = None): 'PackageFinder'
      + target_python(): TargetPython
      + search_scope(): SearchScope
      + search_scope(search_scope: SearchScope)
      + find_links(): List[str]
      + index_urls(): List[str]
      + trusted_hosts(): Iterable[str]
      + allow_all_prereleases(): bool
      + set_allow_all_prereleases()
      + prefer_binary(): bool
      + set_prefer_binary()
      + requires_python_skipped_reasons(): List[str]
      + make_link_evaluator(project_name: str): LinkEvaluator
      + get_install_candidate(link_evaluator: LinkEvaluator, link: Link): Optional[InstallationCandidate]
      + evaluate_links(link_evaluator: LinkEvaluator, links: Iterable[Link]): List[InstallationCandidate]
      + process_project_url(project_url: Link, link_evaluator: LinkEvaluator): List[InstallationCandidate]
      + find_all_candidates(project_name: str): List[InstallationCandidate]
      + make_candidate_evaluator(project_name: str, specifier: Optional[specifiers.BaseSpecifier] = None, hashes: Optional[Hashes] = None): CandidateEvaluator
      + find_best_candidate(project_name: str, specifier: Optional[specifiers.BaseSpecifier] = None, hashes: Optional[Hashes] = None): BestCandidateResult
      + find_requirement(req: InstallRequirement, upgrade: bool): Optional[InstallationCandidate]
  }

  class LinkSource {
      + link(): Optional[Link]
      + page_candidates(): FoundCandidates
      + file_links(): FoundLinks
  }

}

package importlib {
  class BadMetadata {
      - __init__(dist: importlib.metadata.Distribution)
  }

  class BasePath {
      + name(): str
      + parent(): 'BasePath'
  }

  class WheelDistribution {
      - __init__(files: Mapping[pathlib.PurePosixPath, bytes], info_location: pathlib.PurePosixPath)
      + {classmethod} from_zipfile(cls, zf: zipfile.ZipFile, name: str, location: str): 'WheelDistribution'
      + iterdir(path: InfoPath): Iterator[pathlib.PurePosixPath]
      + read_text(filename: str): Optional[str]
  }

  class Distribution {
      - __init__(dist: importlib.metadata.Distribution, info_location: Optional[BasePath], installed_location: Optional[BasePath])
      + {classmethod} from_directory(cls, directory: str): BaseDistribution
      + {classmethod} from_metadata_file_contents(cls, metadata_contents: bytes, filename: str, project_name: str): BaseDistribution
      + {classmethod} from_wheel(cls, wheel: Wheel, name: str): BaseDistribution
      + location(): Optional[str]
      + info_location(): Optional[str]
      + installed_location(): Optional[str]
      + canonical_name(): NormalizedName
      + version(): Version
      + raw_version(): str
      + is_file(path: InfoPath): bool
      + iter_distutils_script_names(): Iterator[str]
      + read_text(path: InfoPath): str
      + iter_entry_points(): Iterable[BaseEntryPoint]
      + iter_provided_extras(): Iterable[NormalizedName]
      + iter_dependencies(extras: Collection[str] = ()): Iterable[Requirement]
  }

  class Environment {
      - __init__(paths: Sequence[str])
      + {classmethod} default(cls): BaseEnvironment
      + {classmethod} from_paths(cls, paths: Optional[List[str]]): BaseEnvironment
      + get_distribution(name: str): Optional[BaseDistribution]
  }

}

package models {
  class InstallationCandidate <<dataclass>> {
      + name: str
      + version: Version
      + link: Link
  --
      - __init__(name: str, version: str, link: Link)
  }

  class DirectUrlValidationError {
  }

  class VcsInfo <<dataclass>> {
      + name: ClassVar = 'vcs_info'
      + vcs: str
      + commit_id: str
      + requested_revision: Optional[str] = None
  }

  class ArchiveInfo {
      + name = 'archive_info'
  --
      - __init__(hash: Optional[str] = None, hashes: Optional[Dict[str, str]] = None)
      + hash(): Optional[str]
      + hash(value: Optional[str])
  }

  class DirInfo <<dataclass>> {
      + name: ClassVar = 'dir_info'
      + editable: bool = False
  }

  class DirectUrl <<dataclass>> {
      + url: str
      + info: InfoType
      + subdirectory: Optional[str] = None
  --
      + redacted_url(): str
      + validate()
      + {classmethod} from_dict(cls, d: Dict[str, Any]): 'DirectUrl'
      + to_dict(): Dict[str, Any]
      + {classmethod} from_json(cls, s: str): 'DirectUrl'
      + to_json(): str
      + is_local_editable(): bool
  }

  class FormatControl {
      - __init__(no_binary: Optional[Set[str]] = None, only_binary: Optional[Set[str]] = None)
      + {static} handle_mutual_excludes(value: str, target: Set[str], other: Set[str])
      + get_allowed_formats(canonical_name: str): FrozenSet[str]
      + disallow_binaries()
  }

  class PackageIndex {
      - __init__(url: str, file_storage_domain: str)
  }

  class InstallationReport {
      - __init__(install_requirements: Sequence[InstallRequirement])
      + to_dict(): Dict[str, Any]
  }

  class LinkHash <<dataclass>> {
      + name: str
      + value: str
  --
      + {classmethod} find_hash_url_fragment(cls, url: str): Optional['LinkHash']
      + as_dict(): Dict[str, str]
      + as_hashes(): Hashes
      + is_hash_allowed(hashes: Optional[Hashes]): bool
  }

  class MetadataFile <<dataclass>> {
      + hashes: Optional[Dict[str, str]]
  }

  class Link {
      - __init__(url: str, comes_from: Optional[Union[str, 'IndexContent']] = None, requires_python: Optional[str] = None, yanked_reason: Optional[str] = None, metadata_file_data: Optional[MetadataFile] = None, cache_link_parsing: bool = True, hashes: Optional[Mapping[str, str]] = None)
      + {classmethod} from_json(cls, file_data: Dict[str, Any], page_url: str): Optional['Link']
      + {classmethod} from_element(cls, anchor_attribs: Dict[str, Optional[str]], page_url: str, base_url: str): Optional['Link']
      + url(): str
      + filename(): str
      + file_path(): str
      + scheme(): str
      + netloc(): str
      + path(): str
      + splitext(): Tuple[str, str]
      + ext(): str
      + url_without_fragment(): str
      + subdirectory_fragment(): Optional[str]
      + metadata_link(): Optional['Link']
      + as_hashes(): Hashes
      + hash(): Optional[str]
      + hash_name(): Optional[str]
      + show_url(): str
      + is_file(): bool
      + is_existing_dir(): bool
      + is_wheel(): bool
      + is_vcs(): bool
      + is_yanked(): bool
      + has_hash(): bool
      + is_hash_allowed(hashes: Optional[Hashes]): bool
  }

  class Scheme <<dataclass>> {
      + platlib: str
      + purelib: str
      + headers: str
      + scripts: str
      + data: str
  }

  class SearchScope <<dataclass>> {
      + find_links: List[str]
      + index_urls: List[str]
      + no_index: bool
  --
      + {classmethod} create(cls, find_links: List[str], index_urls: List[str], no_index: bool): 'SearchScope'
      + get_formatted_locations(): str
      + get_index_urls_locations(project_name: str): List[str]
  }

  class SelectionPreferences {
      - __init__(allow_yanked: bool, allow_all_prereleases: bool = False, format_control: Optional[FormatControl] = None, prefer_binary: bool = False, ignore_requires_python: Optional[bool] = None)
  }

  class TargetPython {
      - __init__(platforms: Optional[List[str]] = None, py_version_info: Optional[Tuple[int, ...]] = None, abis: Optional[List[str]] = None, implementation: Optional[str] = None)
      + format_given(): str
      + get_sorted_tags(): List[Tag]
      + get_unsorted_tags(): Set[Tag]
  }

  class Wheel {
      + wheel_file_re = re.compile('^(?P<namever>(?P<name>[^\\s-]+?)-(?P<ver>[^\\s-]*?))\n        ((-(?P<build>\\d[^-]*?))?-(?P<pyver>[^\\s-]+?)-(?P<abi>[^\\s-]+?)-(?P<plat>[^\\s-]+?)\n        \\.whl|\\.dist-info)$', re.VERBOSE)
  --
      - __init__(filename: str)
      + get_formatted_file_tags(): List[str]
      + support_index_min(tags: List[Tag]): int
      + find_most_preferred_tag(tags: List[Tag], tag_to_priority: Dict[Tag, int]): int
      + supported(tags: Iterable[Tag]): bool
  }

}

package network {
  class Credentials {
      + url: str
      + username: str
      + password: str
  }

  class KeyRingBaseProvider {
      + has_keyring: bool
  --
      + get_auth_info(url: str, username: Optional[str]): Optional[AuthInfo]
      + save_auth_info(url: str, username: str, password: str)
  }

  class KeyRingNullProvider {
      + has_keyring = False
  --
      + get_auth_info(url: str, username: Optional[str]): Optional[AuthInfo]
      + save_auth_info(url: str, username: str, password: str)
  }

  class KeyRingPythonProvider {
      + has_keyring = True
  --
      - __init__()
      + get_auth_info(url: str, username: Optional[str]): Optional[AuthInfo]
      + save_auth_info(url: str, username: str, password: str)
  }

  class KeyRingCliProvider {
      + has_keyring = True
  --
      - __init__(cmd: str)
      + get_auth_info(url: str, username: Optional[str]): Optional[AuthInfo]
      + save_auth_info(url: str, username: str, password: str)
  }

  class MultiDomainBasicAuth {
      - __init__(prompting: bool = True, index_urls: Optional[List[str]] = None, keyring_provider: str = 'auto')
      + keyring_provider(): KeyRingBaseProvider
      + keyring_provider(provider: str)
      + use_keyring(): bool
      + handle_401(resp: Response): Response
      + warn_on_401(resp: Response)
      + save_credentials(resp: Response)
  }

  class SafeFileCache {
      - __init__(directory: str)
      + get(key: str): Optional[bytes]
      + set(key: str, value: bytes, expires: Union[int, datetime, None] = None)
      + delete(key: str)
      + get_body(key: str): Optional[BinaryIO]
      + set_body(key: str, body: bytes)
  }

  class Downloader {
      - __init__(session: PipSession, progress_bar: str)
  }

  class BatchDownloader {
      - __init__(session: PipSession, progress_bar: str)
  }

  class HTTPRangeRequestUnsupported {
  }

  class LazyZipOverHTTP {
      - __init__(url: str, session: PipSession, chunk_size: int = CONTENT_CHUNK_SIZE)
      + mode(): str
      + name(): str
      + seekable(): bool
      + close()
      + closed(): bool
      + read(size: int = -1): bytes
      + readable(): bool
      + seek(offset: int, whence: int = 0): int
      + tell(): int
      + truncate(size: Optional[int] = None): int
      + writable(): bool
  }

  class LocalFSAdapter {
      + send(request: PreparedRequest, stream: bool = False, timeout: Optional[Union[float, Tuple[float, float]]] = None, verify: Union[bool, str] = True, cert: Optional[Union[str, Tuple[str, str]]] = None, proxies: Optional[Mapping[str, str]] = None): Response
      + close()
  }

  class HTTPAdapter {
  }

  class CacheControlAdapter {
  }

  class InsecureHTTPAdapter {
      + cert_verify(conn: ConnectionPool, url: str, verify: Union[bool, str], cert: Optional[Union[str, Tuple[str, str]]])
  }

  class InsecureCacheControlAdapter {
      + cert_verify(conn: ConnectionPool, url: str, verify: Union[bool, str], cert: Optional[Union[str, Tuple[str, str]]])
  }

  class PipSession {
      + timeout: Optional[int] = None
  --
      - __init__()
      + update_index_urls(new_index_urls: List[str])
      + add_trusted_host(host: str, source: Optional[str] = None, suppress_logging: bool = False)
      + iter_secure_origins(): Generator[SecureOrigin, None, None]
      + is_secure_origin(location: Link): bool
      + request(method: str, url: str): Response
  }

  class PipXmlrpcTransport {
      - __init__(index_url: str, session: PipSession, use_datetime: bool = False)
      + request(host: '_HostType', handler: str, request_body: 'SizedBuffer', verbose: bool = False): Tuple['_Marshallable', ...]
  }

}

package build {
  class TrackerId {
  }

  class BuildTracker {
      - __init__(root: str)
      + add(req: InstallRequirement, key: TrackerId)
      + remove(req: InstallRequirement, key: TrackerId)
      + cleanup()
      + track(req: InstallRequirement, key: str): Generator[None, None, None]
  }

}

package install {
  class File {
      + src_record_path: 'RecordPath'
      + dest_path: str
      + changed: bool
  --
      + save()
  }

  class ZipBackedFile {
      - __init__(src_record_path: RecordPath, dest_path: str, zip_file: ZipFile)
      + save()
  }

  class ScriptFile {
      - __init__(file: 'File')
      + save()
  }

  class MissingCallableSuffix {
      - __init__(entry_point: str)
  }

  class PipScriptMaker {
      + make(specification: str, options: Optional[Dict[str, Any]] = None): List[str]
  }

}

package req {
  class RequirementParts <<dataclass>> {
      + requirement: Optional[Requirement]
      + link: Optional[Link]
      + markers: Optional[Marker]
      + extras: Set[str]
  }

  class ParsedRequirement {
      - __init__(requirement: str, is_editable: bool, comes_from: str, constraint: bool, options: Optional[Dict[str, Any]] = None, line_source: Optional[str] = None)
  }

  class ParsedLine {
      - __init__(filename: str, lineno: int, args: str, opts: Values, constraint: bool)
  }

  class RequirementsFileParser {
      - __init__(session: 'PipSession', line_parser: LineParser)
      + parse(filename: str, constraint: bool): Generator[ParsedLine, None, None]
  }

  class OptionParsingError {
      - __init__(msg: str)
  }

  class InstallRequirement {
      - __init__(req: Optional[Requirement], comes_from: Optional[Union[str, 'InstallRequirement']], editable: bool = False, link: Optional[Link] = None, markers: Optional[Marker] = None, use_pep517: Optional[bool] = None, isolated: bool = False)
      + format_debug(): str
      + name(): Optional[str]
      + supports_pyproject_editable(): bool
      + specifier(): SpecifierSet
      + is_direct(): bool
      + is_pinned(): bool
      + match_markers(extras_requested: Optional[Iterable[str]] = None): bool
      + has_hash_options(): bool
      + hashes(trust_internet: bool = True): Hashes
      + from_path(): Optional[str]
      + ensure_build_location(build_dir: str, autodelete: bool, parallel_builds: bool): str
      + warn_on_mismatching_name()
      + check_if_exists(use_user_site: bool)
      + is_wheel(): bool
      + is_wheel_from_cache(): bool
      + unpacked_source_directory(): str
      + setup_py_path(): str
      + setup_cfg_path(): str
      + pyproject_toml_path(): str
      + load_pyproject_toml()
      + isolated_editable_sanity_check()
      + prepare_metadata()
      + metadata(): Any
      + get_dist(): BaseDistribution
      + assert_source_matches_version()
      + ensure_has_source_dir(parent_dir: str, autodelete: bool = False, parallel_builds: bool = False)
      + needs_unpacked_archive(archive_source: Path)
      + ensure_pristine_source_checkout()
      + update_editable()
      + uninstall(auto_confirm: bool = False, verbose: bool = False): Optional[UninstallPathSet]
      + archive(build_dir: Optional[str])
      + install(global_options: Optional[Sequence[str]] = None, root: Optional[str] = None, home: Optional[str] = None, prefix: Optional[str] = None, warn_script_location: bool = True, use_user_site: bool = False, pycompile: bool = True)
  }

  class RequirementSet {
      - __init__(check_supported_wheels: bool = True)
      + add_unnamed_requirement(install_req: InstallRequirement)
      + add_named_requirement(install_req: InstallRequirement)
      + has_requirement(name: str): bool
      + get_requirement(name: str): InstallRequirement
      + all_requirements(): List[InstallRequirement]
      + requirements_to_install(): List[InstallRequirement]
  }

  class StashedUninstallPathSet {
      - __init__()
      + stash(path: str): str
      + commit()
      + rollback()
      + can_rollback(): bool
  }

  class UninstallPathSet {
      - __init__(dist: BaseDistribution)
      + add(path: str)
      + add_pth(pth_file: str, entry: str)
      + remove(auto_confirm: bool = False, verbose: bool = False)
      + rollback()
      + commit()
      + {classmethod} from_dist(cls, dist: BaseDistribution): 'UninstallPathSet'
  }

  class UninstallPthEntries {
      - __init__(pth_file: str)
      + add(entry: str)
      + remove()
      + rollback(): bool
  }

  class InstallationResult <<dataclass>> {
      + name: str
  }

}

package resolution {
  class BaseResolver {
      + resolve(root_reqs: List[InstallRequirement], check_supported_wheels: bool): RequirementSet
      + get_installation_order(req_set: RequirementSet): List[InstallRequirement]
  }

}

package legacy {
  class Resolver {
      - __init__(preparer: RequirementPreparer, finder: PackageFinder, wheel_cache: Optional[WheelCache], make_install_req: InstallRequirementProvider, use_user_site: bool, ignore_dependencies: bool, ignore_installed: bool, ignore_requires_python: bool, force_reinstall: bool, upgrade_strategy: str, py_version_info: Optional[Tuple[int, ...]] = None)
      + resolve(root_reqs: List[InstallRequirement], check_supported_wheels: bool): RequirementSet
      + get_installation_order(req_set: RequirementSet): List[InstallRequirement]
  }

  class BasicAuthWebSocketServerProtocol {
      + realm: str = ''
      + username: str | None = None
  --
      - __init__()
  }

  class WebSocketClientProtocol {
      + is_client = True
      + side = 'client'
  --
      - __init__()
      + write_http_request(path: str, headers: Headers)
      + {static} process_extensions(headers: Headers, available_extensions: Sequence[ClientExtensionFactory] | None): list[Extension]
      + {static} process_subprotocol(headers: Headers, available_subprotocols: Sequence[Subprotocol] | None): Subprotocol | None
  }

  class Connect {
      + MAX_REDIRECTS_ALLOWED = int(os.environ.get('WEBSOCKETS_MAX_REDIRECTS', '10'))
      + BACKOFF_INITIAL = float(os.environ.get('WEBSOCKETS_BACKOFF_INITIAL_DELAY', '5'))
      + BACKOFF_MIN = float(os.environ.get('WEBSOCKETS_BACKOFF_MIN_DELAY', '3.1'))
      + BACKOFF_MAX = float(os.environ.get('WEBSOCKETS_BACKOFF_MAX_DELAY', '90.0'))
      + BACKOFF_FACTOR = float(os.environ.get('WEBSOCKETS_BACKOFF_FACTOR', '1.618'))
  --
      - __init__(uri: str)
      + handle_redirect(uri: str)
  }

  class InvalidStatusCode {
      - __init__(status_code: int, headers: datastructures.Headers)
  }

  class AbortHandshake {
      - __init__(status: StatusLike, headers: datastructures.HeadersLike, body: bytes = b'')
  }

  class RedirectHandshake {
      - __init__(uri: str)
  }

  class Frame {
      + fin: bool
      + opcode: frames.Opcode
      + data: bytes
      + rsv1: bool = False
      + rsv2: bool = False
      + rsv3: bool = False
  --
      + new_frame(): frames.Frame
      + check()
      + write(write: Callable[[bytes], Any])
  }

  class WebSocketCommonProtocol {
      + is_client: bool
      + side: str = 'undefined'
  --
      - __init__()
      + connection_open()
      + host(): str | None
      + port(): int | None
      + secure(): bool | None
      + local_address(): Any
      + remote_address(): Any
      + open(): bool
      + closed(): bool
      + close_code(): int | None
      + close_reason(): str | None
      + connection_closed_exc(): ConnectionClosed
      + write_frame_sync(fin: bool, opcode: int, data: bytes)
      + fail_connection(code: int = CloseCode.ABNORMAL_CLOSURE, reason: str = '')
      + abort_pings()
      + connection_made(transport: asyncio.BaseTransport)
      + connection_lost(exc: Exception | None)
      + pause_writing()
      + resume_writing()
      + data_received(data: bytes)
      + eof_received()
  }

  class WebSocketServerProtocol {
      + is_client = False
      + side = 'server'
  --
      - __init__(ws_handler: Callable[[WebSocketServerProtocol], Awaitable[Any]] | Callable[[WebSocketServerProtocol, str], Awaitable[Any]], ws_server: WebSocketServer)
      + connection_made(transport: asyncio.BaseTransport)
      + write_http_response(status: http.HTTPStatus, headers: Headers, body: bytes | None = None)
      + {static} process_origin(headers: Headers, origins: Sequence[Origin | None] | None = None): Origin | None
      + {static} process_extensions(headers: Headers, available_extensions: Sequence[ServerExtensionFactory] | None): tuple[str | None, list[Extension]]
      + process_subprotocol(headers: Headers, available_subprotocols: Sequence[Subprotocol] | None): Subprotocol | None
      + select_subprotocol(client_subprotocols: Sequence[Subprotocol], server_subprotocols: Sequence[Subprotocol]): Subprotocol | None
  }

  class WebSocketServer {
      - __init__(logger: LoggerLike | None = None)
      + wrap(server: asyncio.base_events.Server)
      + register(protocol: WebSocketServerProtocol)
      + unregister(protocol: WebSocketServerProtocol)
      + close(close_connections: bool = True)
      + get_loop(): asyncio.AbstractEventLoop
      + is_serving(): bool
      + sockets(): Iterable[socket.socket]
  }

  class Serve {
      - __init__(ws_handler: Callable[[WebSocketServerProtocol], Awaitable[Any]] | Callable[[WebSocketServerProtocol, str], Awaitable[Any]], host: str | Sequence[str] | None = None, port: int | None = None)
  }

}

package resolvelib {
  class Constraint <<dataclass>> {
      + specifier: SpecifierSet
      + hashes: Hashes
      + links: FrozenSet[Link]
  --
      + {classmethod} empty(cls): 'Constraint'
      + {classmethod} from_ireq(cls, ireq: InstallRequirement): 'Constraint'
      + is_satisfied_by(candidate: 'Candidate'): bool
  }

  class Requirement {
      + project_name(): NormalizedName
      + name(): str
      + is_satisfied_by(candidate: 'Candidate'): bool
      + get_candidate_lookup(): CandidateLookup
      + format_for_error(): str
  }

  class Candidate {
      + project_name(): NormalizedName
      + name(): str
      + version(): Version
      + is_installed(): bool
      + is_editable(): bool
      + source_link(): Optional[Link]
      + iter_dependencies(with_requires: bool): Iterable[Optional[Requirement]]
      + get_install_requirement(): Optional[InstallRequirement]
      + format_for_error(): str
  }

  class LinkCandidate {
      + is_editable = False
  --
      - __init__(link: Link, template: InstallRequirement, factory: 'Factory', name: Optional[NormalizedName] = None, version: Optional[Version] = None)
  }

  class EditableCandidate {
      + is_editable = True
  --
      - __init__(link: Link, template: InstallRequirement, factory: 'Factory', name: Optional[NormalizedName] = None, version: Optional[Version] = None)
  }

  class AlreadyInstalledCandidate {
      + is_installed = True
      + source_link = None
  --
      - __init__(dist: BaseDistribution, template: InstallRequirement, factory: 'Factory')
      + project_name(): NormalizedName
      + name(): str
      + version(): Version
      + is_editable(): bool
      + format_for_error(): str
      + iter_dependencies(with_requires: bool): Iterable[Optional[Requirement]]
      + get_install_requirement(): Optional[InstallRequirement]
  }

  class ExtrasCandidate {
      - __init__(base: BaseCandidate, extras: FrozenSet[str])
      + project_name(): NormalizedName
      + name(): str
      + version(): Version
      + format_for_error(): str
      + is_installed(): bool
      + is_editable(): bool
      + source_link(): Optional[Link]
      + iter_dependencies(with_requires: bool): Iterable[Optional[Requirement]]
      + get_install_requirement(): Optional[InstallRequirement]
  }

  class RequiresPythonCandidate {
      + is_installed = False
      + source_link = None
  --
      - __init__(py_version_info: Optional[Tuple[int, ...]])
      + project_name(): NormalizedName
      + name(): str
      + version(): Version
      + format_for_error(): str
      + iter_dependencies(with_requires: bool): Iterable[Optional[Requirement]]
      + get_install_requirement(): Optional[InstallRequirement]
  }

  class ConflictCause {
      + requirement: RequiresPythonRequirement
      + parent: Candidate
  }

  class CollectedRootRequirements {
      + requirements: List[Requirement]
      + constraints: Dict[str, Constraint]
      + user_requested: Dict[str, int]
  }

  class Factory {
      - __init__(finder: PackageFinder, preparer: RequirementPreparer, make_install_req: InstallRequirementProvider, wheel_cache: Optional[WheelCache], use_user_site: bool, force_reinstall: bool, ignore_installed: bool, ignore_requires_python: bool, py_version_info: Optional[Tuple[int, ...]] = None)
      + force_reinstall(): bool
      + find_candidates(identifier: str, requirements: Mapping[str, Iterable[Requirement]], incompatibilities: Mapping[str, Iterator[Candidate]], constraint: Constraint, prefers_installed: bool, is_satisfied_by: Callable[[Requirement, Candidate], bool]): Iterable[Candidate]
      + collect_root_requirements(root_ireqs: List[InstallRequirement]): CollectedRootRequirements
      + make_requirement_from_candidate(candidate: Candidate): ExplicitRequirement
      + make_requirements_from_spec(specifier: str, comes_from: Optional[InstallRequirement], requested_extras: Iterable[str] = ()): Iterator[Requirement]
      + make_requires_python_requirement(specifier: SpecifierSet): Optional[Requirement]
      + get_wheel_cache_entry(link: Link, name: Optional[str]): Optional[CacheEntry]
      + get_dist_to_uninstall(candidate: Candidate): Optional[BaseDistribution]
      + get_installation_error(e: 'ResolutionImpossible[Requirement, Candidate]', constraints: Dict[str, Constraint]): InstallationError
  }

  class FoundCandidates {
      - __init__(get_infos: Callable[[], Iterator[IndexCandidateInfo]], installed: Optional[Candidate], prefers_installed: bool, incompatible_ids: Set[int])
  }

  class PipProvider {
      - __init__(factory: Factory, constraints: Dict[str, Constraint], ignore_dependencies: bool, upgrade_strategy: str, user_requested: Dict[str, int])
      + identify(requirement_or_candidate: Union[Requirement, Candidate]): str
      + get_preference(identifier: str, resolutions: Mapping[str, Candidate], candidates: Mapping[str, Iterator[Candidate]], information: Mapping[str, Iterable['PreferenceInformation']], backtrack_causes: Sequence['PreferenceInformation']): 'Preference'
      + find_matches(identifier: str, requirements: Mapping[str, Iterator[Requirement]], incompatibilities: Mapping[str, Iterator[Candidate]]): Iterable[Candidate]
      + is_satisfied_by(requirement: Requirement, candidate: Candidate): bool
      + get_dependencies(candidate: Candidate): Sequence[Requirement]
      + {static} is_backtrack_cause(identifier: str, backtrack_causes: Sequence['PreferenceInformation']): bool
  }

  class PipReporter {
      - __init__()
      + rejecting_candidate(criterion, candidate: Candidate)
  }

  class PipDebuggingReporter {
      + starting()
      + starting_round(index: int)
      + ending_round(index: int, state)
      + ending(state)
      + adding_requirement(requirement: Requirement, parent: Candidate)
      + rejecting_candidate(criterion, candidate: Candidate)
      + pinning(candidate: Candidate)
  }

  class ExplicitRequirement {
      - __init__(candidate: Candidate)
      + project_name(): NormalizedName
      + name(): str
      + format_for_error(): str
      + get_candidate_lookup(): CandidateLookup
      + is_satisfied_by(candidate: Candidate): bool
  }

  class SpecifierRequirement {
      - __init__(ireq: InstallRequirement)
      + project_name(): NormalizedName
      + name(): str
      + format_for_error(): str
      + get_candidate_lookup(): CandidateLookup
      + is_satisfied_by(candidate: Candidate): bool
  }

  class SpecifierWithoutExtrasRequirement {
      - __init__(ireq: InstallRequirement)
  }

  class RequiresPythonRequirement {
      - __init__(specifier: SpecifierSet, match: Candidate)
      + project_name(): NormalizedName
      + name(): str
      + format_for_error(): str
      + get_candidate_lookup(): CandidateLookup
      + is_satisfied_by(candidate: Candidate): bool
  }

  class UnsatisfiableRequirement {
      - __init__(name: NormalizedName)
      + project_name(): NormalizedName
      + name(): str
      + format_for_error(): str
      + get_candidate_lookup(): CandidateLookup
      + is_satisfied_by(candidate: Candidate): bool
  }

  class Resolver {
      - __init__(preparer: RequirementPreparer, finder: PackageFinder, wheel_cache: Optional[WheelCache], make_install_req: InstallRequirementProvider, use_user_site: bool, ignore_dependencies: bool, ignore_installed: bool, ignore_requires_python: bool, force_reinstall: bool, upgrade_strategy: str, py_version_info: Optional[Tuple[int, ...]] = None)
      + resolve(root_reqs: List[InstallRequirement], check_supported_wheels: bool): RequirementSet
      + get_installation_order(req_set: RequirementSet): List[InstallRequirement]
  }

  class AbstractProvider {
      + identify(requirement_or_candidate)
      + get_preference(identifier, resolutions, candidates, information, backtrack_causes)
      + find_matches(identifier, requirements, incompatibilities)
      + is_satisfied_by(requirement, candidate)
      + get_dependencies(candidate)
  }

  class AbstractResolver {
      + base_exception = Exception
  --
      - __init__(provider, reporter)
      + resolve(requirements)
  }

  class BaseReporter {
      + starting()
      + starting_round(index)
      + ending_round(index, state)
      + ending(state)
      + adding_requirement(requirement, parent)
      + resolving_conflicts(causes)
      + rejecting_candidate(criterion, candidate)
      + pinning(candidate)
  }

  class ResolverException {
  }

  class RequirementsConflicted {
      - __init__(criterion)
  }

  class InconsistentCandidate {
      - __init__(candidate, criterion)
  }

  class Criterion {
      - __init__(candidates, information, incompatibilities)
      + iter_requirement()
      + iter_parent()
  }

  class ResolutionError {
  }

  class ResolutionImpossible {
      - __init__(causes)
  }

  class ResolutionTooDeep {
      - __init__(round_count)
  }

  class Resolution {
      - __init__(provider, reporter)
      + state()
      + resolve(requirements, max_rounds)
  }

  class Resolver {
      + base_exception = ResolverException
  --
      + resolve(requirements, max_rounds = 100)
  }

  class DirectedGraph {
      - __init__()
      + copy()
      + add(key)
      + remove(key)
      + connected(f, t)
      + connect(f, t)
      + iter_edges()
      + iter_children(key)
      + iter_parents(key)
  }

  class IteratorMapping {
      - __init__(mapping, accessor, appends = None)
  }

}

package vcs {
  class Bazaar {
      + name = 'bzr'
      + dirname = '.bzr'
      + repo_name = 'branch'
      + schemes = ('bzr+http', 'bzr+https', 'bzr+ssh', 'bzr+sftp', 'bzr+ftp', 'bzr+lp', 'bzr+file')
  --
      + {static} get_base_rev_args(rev: str): List[str]
      + fetch_new(dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int)
      + switch(dest: str, url: HiddenText, rev_options: RevOptions)
      + update(dest: str, url: HiddenText, rev_options: RevOptions)
      + {classmethod} get_url_rev_and_auth(cls, url: str): Tuple[str, Optional[str], AuthInfo]
      + {classmethod} get_remote_url(cls, location: str): str
      + {classmethod} get_revision(cls, location: str): str
      + {classmethod} is_commit_id_equal(cls, dest: str, name: Optional[str]): bool
  }

  class Git {
      + name = 'git'
      + dirname = '.git'
      + repo_name = 'clone'
      + schemes = ('git+http', 'git+https', 'git+ssh', 'git+git', 'git+file')
      + unset_environ = ('GIT_DIR', 'GIT_WORK_TREE')
      + default_arg_rev = 'HEAD'
  --
      + {static} get_base_rev_args(rev: str): List[str]
      + is_immutable_rev_checkout(url: str, dest: str): bool
      + get_git_version(): Tuple[int, ...]
      + {classmethod} get_current_branch(cls, location: str): Optional[str]
      + {classmethod} get_revision_sha(cls, dest: str, rev: str): Tuple[Optional[str], bool]
      + {classmethod} resolve_revision(cls, dest: str, url: HiddenText, rev_options: RevOptions): RevOptions
      + {classmethod} is_commit_id_equal(cls, dest: str, name: Optional[str]): bool
      + fetch_new(dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int)
      + switch(dest: str, url: HiddenText, rev_options: RevOptions)
      + update(dest: str, url: HiddenText, rev_options: RevOptions)
      + {classmethod} get_remote_url(cls, location: str): str
      + {classmethod} has_commit(cls, location: str, rev: str): bool
      + {classmethod} get_revision(cls, location: str, rev: Optional[str] = None): str
      + {classmethod} get_subdirectory(cls, location: str): Optional[str]
      + {classmethod} get_url_rev_and_auth(cls, url: str): Tuple[str, Optional[str], AuthInfo]
      + {classmethod} update_submodules(cls, location: str)
      + {classmethod} get_repository_root(cls, location: str): Optional[str]
      + {static} should_add_vcs_url_prefix(repo_url: str): bool
  }

  class Mercurial {
      + name = 'hg'
      + dirname = '.hg'
      + repo_name = 'clone'
      + schemes = ('hg+file', 'hg+http', 'hg+https', 'hg+ssh', 'hg+static-http')
  --
      + {static} get_base_rev_args(rev: str): List[str]
      + fetch_new(dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int)
      + switch(dest: str, url: HiddenText, rev_options: RevOptions)
      + update(dest: str, url: HiddenText, rev_options: RevOptions)
      + {classmethod} get_remote_url(cls, location: str): str
      + {classmethod} get_revision(cls, location: str): str
      + {classmethod} get_requirement_revision(cls, location: str): str
      + {classmethod} is_commit_id_equal(cls, dest: str, name: Optional[str]): bool
      + {classmethod} get_subdirectory(cls, location: str): Optional[str]
      + {classmethod} get_repository_root(cls, location: str): Optional[str]
  }

  class Subversion {
      + name = 'svn'
      + dirname = '.svn'
      + repo_name = 'checkout'
      + schemes = ('svn+ssh', 'svn+http', 'svn+https', 'svn+svn', 'svn+file')
  --
      + {classmethod} should_add_vcs_url_prefix(cls, remote_url: str): bool
      + {static} get_base_rev_args(rev: str): List[str]
      + {classmethod} get_revision(cls, location: str): str
      + {classmethod} get_netloc_and_auth(cls, netloc: str, scheme: str): Tuple[str, Tuple[Optional[str], Optional[str]]]
      + {classmethod} get_url_rev_and_auth(cls, url: str): Tuple[str, Optional[str], AuthInfo]
      + {static} make_rev_args(username: Optional[str], password: Optional[HiddenText]): CommandArgs
      + {classmethod} get_remote_url(cls, location: str): str
      + {classmethod} is_commit_id_equal(cls, dest: str, name: Optional[str]): bool
      - __init__(use_interactive: Optional[bool] = None)
      + call_vcs_version(): Tuple[int, ...]
      + get_vcs_version(): Tuple[int, ...]
      + get_remote_call_options(): CommandArgs
      + fetch_new(dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int)
      + switch(dest: str, url: HiddenText, rev_options: RevOptions)
      + update(dest: str, url: HiddenText, rev_options: RevOptions)
  }

  class RemoteNotFoundError {
  }

  class RemoteNotValidError {
      - __init__(url: str)
  }

  class RevOptions <<dataclass>> {
      + vc_class: Type['VersionControl']
      + rev: Optional[str] = None
      + extra_args: CommandArgs = field(default_factory=list)
      + branch_name: Optional[str] = None
  --
      + arg_rev(): Optional[str]
      + to_args(): CommandArgs
      + to_display(): str
      + make_new(rev: str): 'RevOptions'
  }

  class VcsSupport {
      + schemes = ['ssh', 'git', 'hg', 'bzr', 'sftp', 'svn']
  --
      - __init__()
      + backends(): List['VersionControl']
      + dirnames(): List[str]
      + all_schemes(): List[str]
      + register(cls: Type['VersionControl'])
      + unregister(name: str)
      + get_backend_for_dir(location: str): Optional['VersionControl']
      + get_backend_for_scheme(scheme: str): Optional['VersionControl']
      + get_backend(name: str): Optional['VersionControl']
  }

  class VersionControl {
      + name = ''
      + dirname = ''
      + repo_name = ''
      + schemes: Tuple[str, ...] = ()
      + unset_environ: Tuple[str, ...] = ()
      + default_arg_rev: Optional[str] = None
  --
      + {classmethod} should_add_vcs_url_prefix(cls, remote_url: str): bool
      + {classmethod} get_subdirectory(cls, location: str): Optional[str]
      + {classmethod} get_requirement_revision(cls, repo_dir: str): str
      + {classmethod} get_src_requirement(cls, repo_dir: str, project_name: str): str
      + {static} get_base_rev_args(rev: str): List[str]
      + is_immutable_rev_checkout(url: str, dest: str): bool
      + {classmethod} make_rev_options(cls, rev: Optional[str] = None, extra_args: Optional[CommandArgs] = None): RevOptions
      + {classmethod} get_netloc_and_auth(cls, netloc: str, scheme: str): Tuple[str, Tuple[Optional[str], Optional[str]]]
      + {classmethod} get_url_rev_and_auth(cls, url: str): Tuple[str, Optional[str], AuthInfo]
      + {static} make_rev_args(username: Optional[str], password: Optional[HiddenText]): CommandArgs
      + get_url_rev_options(url: HiddenText): Tuple[HiddenText, RevOptions]
      + {static} normalize_url(url: str): str
      + {classmethod} compare_urls(cls, url1: str, url2: str): bool
      + fetch_new(dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int)
      + switch(dest: str, url: HiddenText, rev_options: RevOptions)
      + update(dest: str, url: HiddenText, rev_options: RevOptions)
      + {classmethod} is_commit_id_equal(cls, dest: str, name: Optional[str]): bool
      + obtain(dest: str, url: HiddenText, verbosity: int)
      + unpack(location: str, url: HiddenText, verbosity: int)
      + {classmethod} get_remote_url(cls, location: str): str
      + {classmethod} get_revision(cls, location: str): str
      + {classmethod} run_command(cls, cmd: Union[List[str], CommandArgs], show_stdout: bool = True, cwd: Optional[str] = None, on_returncode: 'Literal["raise", "warn", "ignore"]' = 'raise', extra_ok_returncodes: Optional[Iterable[int]] = None, command_desc: Optional[str] = None, extra_environ: Optional[Mapping[str, Any]] = None, spinner: Optional[SpinnerInterface] = None, log_failed_cmd: bool = True, stdout_only: bool = False): str
      + {classmethod} is_repository_directory(cls, path: str): bool
      + {classmethod} get_repository_root(cls, location: str): Optional[str]
  }

}

package _vendor {
  class Any {
  }

  class Protocol {
  }

  class SupportsInt {
  }

  class SupportsFloat {
  }

  class SupportsComplex {
  }

  class SupportsBytes {
  }

  class SupportsIndex {
  }

  class SupportsAbs {
  }

  class SupportsRound {
  }

  class Annotated {
  }

  class NoDefaultTypeMeta {
  }

  class NoDefaultType {
  }

  class TypeVar {
  }

  class ParamSpecArgs {
      - __init__(origin)
  }

  class ParamSpecKwargs {
      - __init__(origin)
  }

  class ParamSpec {
  }

  class ParamSpec {
      + args()
      + kwargs()
      - __init__(name)
  }

  class TypeVarTuple {
  }

  class TypeVarTuple {
      - __init__(name)
  }

  class deprecated {
      - __init__()
  }

  class Buffer {
  }

  class NewType {
      - __init__(name, tp)
  }

  class TypeAliasType {
      - __init__(name: str, value)
  }

  class Doc {
      - __init__()
  }

}

package cachecontrol {
  class CacheControlAdapter {
      + invalidating_methods = {'PUT', 'PATCH', 'DELETE'}
  --
      - __init__(cache: BaseCache | None = None, cache_etags: bool = True, controller_class: type[CacheController] | None = None, serializer: Serializer | None = None, heuristic: BaseHeuristic | None = None, cacheable_methods: Collection[str] | None = None)
      + send(request: PreparedRequest, stream: bool = False, timeout: None | float | tuple[float, float] | tuple[float, None] = None, verify: bool | str = True, cert: None | bytes | str | tuple[bytes | str, bytes | str] = None, proxies: Mapping[str, str] | None = None, cacheable_methods: Collection[str] | None = None): Response
      + build_response(request: PreparedRequest, response: HTTPResponse, from_cache: bool = False, cacheable_methods: Collection[str] | None = None): Response
      + close()
  }

  class BaseCache {
      + get(key: str): bytes | None
      + set(key: str, value: bytes, expires: int | datetime | None = None)
      + delete(key: str)
      + close()
  }

  class DictCache {
      - __init__(init_dict: MutableMapping[str, bytes] | None = None)
      + get(key: str): bytes | None
      + set(key: str, value: bytes, expires: int | datetime | None = None)
      + delete(key: str)
  }

  class SeparateBodyBaseCache {
      + set_body(key: str, body: bytes)
      + get_body(key: str): IO[bytes] | None
  }

  class CacheController {
      - __init__(cache: BaseCache | None = None, cache_etags: bool = True, serializer: Serializer | None = None, status_codes: Collection[int] | None = None)
      + {classmethod} cache_url(cls, uri: str): str
      + parse_cache_control(headers: Mapping[str, str]): dict[str, int | None]
      + cached_request(request: PreparedRequest): HTTPResponse | Literal[False]
      + conditional_headers(request: PreparedRequest): dict[str, str]
      + cache_response(request: PreparedRequest, response: HTTPResponse, body: bytes | None = None, status_codes: Collection[int] | None = None)
      + update_cached_response(request: PreparedRequest, response: HTTPResponse): HTTPResponse
  }

  class CallbackFileWrapper {
      - __init__(fp: HTTPResponse, callback: Callable[[bytes], None] | None)
      + read(amt: int | None = None): bytes
  }

  class BaseHeuristic {
      + warning(response: HTTPResponse): str | None
      + update_headers(response: HTTPResponse): dict[str, str]
      + apply(response: HTTPResponse): HTTPResponse
  }

  class OneDayCache {
      + update_headers(response: HTTPResponse): dict[str, str]
  }

  class ExpiresAfter {
      - __init__()
      + update_headers(response: HTTPResponse): dict[str, str]
      + warning(response: HTTPResponse): str | None
  }

  class LastModified {
      + cacheable_by_default_statuses = {200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501}
  --
      + update_headers(resp: HTTPResponse): dict[str, str]
      + warning(resp: HTTPResponse): str | None
  }

  class Serializer {
      + serde_version = '4'
  --
      + dumps(request: PreparedRequest, response: HTTPResponse, body: bytes | None = None): bytes
      + serialize(data: dict[str, Any]): bytes
      + loads(request: PreparedRequest, data: bytes, body_file: IO[bytes] | None = None): HTTPResponse | None
      + prepare_response(request: PreparedRequest, cached: Mapping[str, Any], body_file: IO[bytes] | None = None): HTTPResponse | None
  }

}

package caches {
  class FileCache {
      + delete(key: str)
  }

  class SeparateBodyFileCache {
      + get_body(key: str): IO[bytes] | None
      + set_body(key: str, body: bytes)
      + delete(key: str)
  }

  class RedisCache {
      - __init__(conn: Redis[bytes])
      + get(key: str): bytes | None
      + set(key: str, value: bytes, expires: int | datetime | None = None)
      + delete(key: str)
      + clear()
      + close()
  }

}

package distlib {
  class CertificateError {
  }

  class Container {
      - __init__()
  }

  class ZipExtFile {
      - __init__(base)
  }

  class ZipFile {
      + open()
  }

  class ChainMap {
      - __init__()
      + get(key, default = None)
      + {classmethod} fromkeys(cls, iterable)
      + copy()
      + new_child()
      + parents()
      + popitem()
      + pop(key)
      + clear()
  }

  class OrderedDict {
      - __init__()
      + clear()
      + popitem(last = True)
      + keys()
      + values()
      + items()
      + iterkeys()
      + itervalues()
      + iteritems()
      + update()
      + pop(key, default = __marker)
      + setdefault(key, default = None)
      + copy()
      + {classmethod} fromkeys(cls, iterable, value = None)
      + viewkeys()
      + viewvalues()
      + viewitems()
  }

  class ConvertingDict {
      + get(key, default = None)
  }

  class ConvertingList {
      + pop(idx = -1)
  }

  class ConvertingTuple {
  }

  class BaseConfigurator {
      + CONVERT_PATTERN = re.compile('^(?P<prefix>[a-z]+)://(?P<suffix>.*)$')
      + WORD_PATTERN = re.compile('^\\s*(\\w+)\\s*')
      + DOT_PATTERN = re.compile('^\\.\\s*(\\w+)\\s*')
      + INDEX_PATTERN = re.compile('^\\[\\s*(\\w+)\\s*\\]\\s*')
      + DIGIT_PATTERN = re.compile('^\\d+$')
      + value_converters = {'ext': 'ext_convert', 'cfg': 'cfg_convert'}
      + importer = staticmethod(__import__)
  --
      - __init__(config)
      + resolve(s)
      + ext_convert(value)
      + cfg_convert(value)
      + convert(value)
      + configure_custom(config)
      + as_tuple(value)
  }

  class DistributionPath {
      + cache_enabled = property(_get_cache_enabled, _set_cache_enabled)
  --
      - __init__(path = None, include_egg = False)
      + clear_cache()
      + {classmethod} distinfo_dirname(cls, name, version)
      + get_distributions()
      + get_distribution(name)
      + provides_distribution(name, version = None)
      + get_file_path(name, relative_path)
      + get_exported_entries(category, name = None)
  }

  class Distribution {
      + build_time_dependency = False
      + requested = False
      + download_url = source_url
  --
      - __init__(metadata)
      + source_url()
      + name_and_version()
      + provides()
      + run_requires()
      + meta_requires()
      + build_requires()
      + test_requires()
      + dev_requires()
      + matches_requirement(req)
  }

  class BaseInstalledDistribution {
      + hasher = None
  --
      - __init__(metadata, path, env = None)
      + get_hash(data, hasher = None)
  }

  class InstalledDistribution {
      + hasher = 'sha256'
  --
      - __init__(path, metadata = None, env = None)
      + exports()
      + read_exports()
      + write_exports(exports)
      + get_resource_path(relative_path)
      + list_installed_files()
      + write_installed_files(paths, prefix, dry_run = False)
      + check_installed_files()
      + shared_locations()
      + write_shared_locations(paths, dry_run = False)
      + get_distinfo_resource(path)
      + get_distinfo_file(path)
      + list_distinfo_files()
  }

  class EggInfoDistribution {
      + requested = True
      + shared_locations = {}
  --
      - __init__(path, env = None)
      + check_installed_files()
      + list_installed_files()
      + list_distinfo_files(absolute = False)
  }

  class DependencyGraph {
      - __init__()
      + add_distribution(distribution)
      + add_edge(x, y, label = None)
      + add_missing(distribution, requirement)
      + repr_node(dist, level = 1)
      + to_dot(f, skip_disconnected = True)
      + topological_sort()
  }

  class PackageIndex {
      + boundary = b'----------ThIs_Is_tHe_distlib_index_bouNdaRY_$'
  --
      - __init__(url = None)
      + read_configuration()
      + save_configuration()
      + check_credentials()
      + register(metadata)
      + get_sign_command(filename, signer, sign_password, keystore = None)
      + run_command(cmd, input_data = None)
      + sign_file(filename, signer, sign_password, keystore = None)
      + upload_file(metadata, filename, signer = None, sign_password = None, filetype = 'sdist', pyversion = 'source', keystore = None)
      + upload_documentation(metadata, doc_dir)
      + get_verify_command(signature_filename, data_filename, keystore = None)
      + verify_signature(signature_filename, data_filename, keystore = None)
      + download_file(url, destfile, digest = None, reporthook = None)
      + send_request(req)
      + encode_request(fields, files)
      + search(terms, operator = None)
  }

  class RedirectHandler {
      + http_error_301 = http_error_302
      + http_error_303 = http_error_302
      + http_error_307 = http_error_302
  --
      + http_error_302(req, fp, code, msg, headers)
  }

  class Locator {
      + source_extensions = ('.tar.gz', '.tar.bz2', '.tar', '.zip', '.tgz', '.tbz')
      + binary_extensions = ('.egg', '.exe', '.whl')
      + excluded_extensions = ('.pdf',)
      + wheel_tags = None
      + downloadable_extensions = source_extensions + ('.whl',)
      + scheme = property(_get_scheme, _set_scheme)
  --
      - __init__(scheme = 'default')
      + get_errors()
      + clear_errors()
      + clear_cache()
      + get_distribution_names()
      + get_project(name)
      + score_url(url)
      + prefer_url(url1, url2)
      + split_filename(filename, project_name)
      + convert_url_to_download_info(url, project_name)
      + locate(requirement, prereleases = False)
  }

  class PyPIRPCLocator {
      - __init__(url)
      + get_distribution_names()
  }

  class PyPIJSONLocator {
      - __init__(url)
      + get_distribution_names()
  }

  class Page {
      - __init__(data, url)
      + links()
  }

  class SimpleScrapingLocator {
      + decoders = {'deflate': zlib.decompress, 'gzip': lambda b: gzip.GzipFile(fileobj=BytesIO(b)).read(), 'none': lambda b: b}
      + platform_dependent = re.compile('\\b(linux_(i\\d86|x86_64|arm\\w+)|win(32|_amd64)|macosx_?\\d+)\\b', re.I)
  --
      - __init__(url, timeout = None, num_workers = 10)
      + get_page(url)
      + get_distribution_names()
  }

  class DirectoryLocator {
      - __init__(path)
      + should_include(filename, parent)
      + get_distribution_names()
  }

  class JSONLocator {
      + get_distribution_names()
  }

  class DistPathLocator {
      - __init__(distpath)
  }

  class AggregatingLocator {
      + scheme = property(Locator.scheme.fget, _set_scheme)
  --
      - __init__()
      + clear_cache()
      + get_distribution_names()
  }

  class DependencyFinder {
      - __init__(locator = None)
      + add_distribution(dist)
      + remove_distribution(dist)
      + get_matcher(reqt)
      + find_providers(reqt)
      + try_to_replace(provider, other, problems)
      + find(requirement, meta_extras = None, prereleases = False)
  }

  class Manifest {
      - __init__(base = None)
      + findall()
      + add(item)
      + add_many(items)
      + sorted(wantdirs = False)
      + clear()
      + process_directive(directive)
  }

  class Evaluator {
      + operations = {'==': lambda x, y: x == y, '===': lambda x, y: x == y, '~=': lambda x, y: x == y or x > y, '!=': lambda x, y: x != y, '<': lambda x, y: x < y, '<=': lambda x, y: x == y or x < y, '>': lambda x, y: x > y, '>=': lambda x, y: x == y or x > y, 'and': lambda x, y: x and y, 'or': lambda x, y: x or y, 'in': lambda x, y: x in y, 'not in': lambda x, y: x not in y}
  --
      + evaluate(expr, context)
  }

  class MetadataMissingError {
  }

  class MetadataConflictError {
  }

  class MetadataUnrecognizedVersionError {
  }

  class MetadataInvalidError {
  }

  class LegacyMetadata {
      - __init__(path = None, fileobj = None, mapping = None, scheme = 'default')
      + set_metadata_version()
      + get_fullname(filesafe = False)
      + is_field(name)
      + is_multi_field(name)
      + read(filepath)
      + read_file(fileob)
      + write(filepath, skip_unknown = False)
      + write_file(fileobject, skip_unknown = False)
      + update(other = None)
      + set(name, value)
      + get(name, default = _MISSING)
      + check(strict = False)
      + todict(skip_missing = False)
      + add_requirements(requirements)
      + keys()
      + values()
      + items()
  }

  class Metadata {
      + METADATA_VERSION_MATCHER = re.compile('^\\d+(\\.\\d+)*$')
      + NAME_MATCHER = re.compile('^[0-9A-Z]([0-9A-Z_.-]*[0-9A-Z])?$', re.I)
      + FIELDNAME_MATCHER = re.compile('^[A-Z]([0-9A-Z-]*[0-9A-Z])?$', re.I)
      + VERSION_MATCHER = PEP440_VERSION_RE
      + SUMMARY_MATCHER = re.compile('.{1,2047}')
      + METADATA_VERSION = '2.0'
      + GENERATOR = 'distlib (%s)' % __version__
      + MANDATORY_KEYS = {'name': (), 'version': (), 'summary': ('legacy',)}
      + INDEX_KEYS = 'name version license summary description author author_email keywords platform home_page classifiers download_url'
      + DEPENDENCY_KEYS = 'extras run_requires test_requires build_requires dev_requires provides meta_requires obsoleted_by supports_environments'
      + SYNTAX_VALIDATORS = {'metadata_version': (METADATA_VERSION_MATCHER, ()), 'name': (NAME_MATCHER, ('legacy',)), 'version': (VERSION_MATCHER, ('legacy',)), 'summary': (SUMMARY_MATCHER, ('legacy',)), 'dynamic': (FIELDNAME_MATCHER, ('legacy',))}
      + common_keys = set(('name', 'version', 'license', 'keywords', 'summary'))
      + none_list = (None, list)
      + none_dict = (None, dict)
      + mapped_keys = {'run_requires': ('Requires-Dist', list), 'build_requires': ('Setup-Requires-Dist', list), 'dev_requires': none_list, 'test_requires': none_list, 'meta_requires': none_list, 'extras': ('Provides-Extra', list), 'modules': none_list, 'namespaces': none_list, 'exports': none_dict, 'commands': none_dict, 'classifiers': ('Classifier', list), 'source_url': ('Download-URL', None), 'metadata_version': ('Metadata-Version', None)}
      + LEGACY_MAPPING = {'name': 'Name', 'version': 'Version', ('extensions', 'python.details', 'license'): 'License', 'summary': 'Summary', 'description': 'Description', ('extensions', 'python.project', 'project_urls', 'Home'): 'Home-page', ('extensions', 'python.project', 'contacts', 0, 'name'): 'Author', ('extensions', 'python.project', 'contacts', 0, 'email'): 'Author-email', 'source_url': 'Download-URL', ('extensions', 'python.details', 'classifiers'): 'Classifier'}
  --
      - __init__(path = None, fileobj = None, mapping = None, scheme = 'default')
      + name_and_version()
      + provides()
      + provides(value)
      + get_requirements(reqts, extras = None, env = None)
      + dictionary()
      + dependencies()
      + dependencies(value)
      + validate()
      + todict()
      + write(path = None, fileobj = None, legacy = False, skip_unknown = True)
      + add_requirements(requirements)
  }

  class ResourceCache {
      - __init__(base = None)
      + is_stale(resource, path)
      + get(resource)
  }

  class ResourceBase {
      - __init__(finder, name)
  }

  class Resource {
      + is_container = False
  --
      + as_stream()
      + file_path()
      + bytes()
      + size()
  }

  class ResourceContainer {
      + is_container = True
  --
      + resources()
  }

  class ResourceFinder {
      - __init__(module)
      + get_cache_info(resource)
      + find(resource_name)
      + get_stream(resource)
      + get_bytes(resource)
      + get_size(resource)
      + get_resources(resource)
      + is_container(resource)
      + iterator(resource_name)
  }

  class ZipResourceFinder {
      - __init__(module)
      + get_cache_info(resource)
      + get_bytes(resource)
      + get_stream(resource)
      + get_size(resource)
      + get_resources(resource)
  }

  class ScriptMaker {
      + script_template = SCRIPT_TEMPLATE
      + executable = None
      + manifest = _DEFAULT_MANIFEST
      + variant_separator = '-'
  --
      - __init__(source_dir, target_dir, add_launchers = True, dry_run = False, fileop = None)
      + get_manifest(exename)
      + get_script_filenames(name)
      + dry_run()
      + dry_run(value)
      + make(specification, options = None)
      + make_multiple(specifications, options = None)
  }

  class cached_property {
      - __init__(func)
  }

  class FileOperator {
      + set_executable_mode = lambda s, f: s.set_mode(365, 4095, f)
  --
      - __init__(dry_run = False)
      + record_as_written(path)
      + newer(source, target)
      + copy_file(infile, outfile, check = True)
      + copy_stream(instream, outfile, encoding = None)
      + write_binary_file(path, data)
      + write_text_file(path, data, encoding)
      + set_mode(bits, mask, files)
      + ensure_dir(path)
      + byte_compile(path, optimize = False, force = False, prefix = None, hashed_invalidation = False)
      + ensure_removed(path)
      + is_writable(path)
      + commit()
      + rollback()
  }

  class ExportEntry {
      - __init__(name, prefix, suffix, flags)
      + value()
  }

  class Cache {
      - __init__(base)
      + prefix_to_dir(prefix)
      + clear()
  }

  class EventMixin {
      - __init__()
      + add(event, subscriber, append = True)
      + remove(event, subscriber)
      + get_subscribers(event)
      + publish(event)
  }

  class Sequencer {
      - __init__()
      + add_node(node)
      + remove_node(node, edges = False)
      + add(pred, succ)
      + remove(pred, succ)
      + is_step(step)
      + get_steps(final)
      + strong_connections()
      + dot()
  }

  class Progress {
      + unknown = 'UNKNOWN'
  --
      - __init__(minval = 0, maxval = 100)
      + update(curval)
      + increment(incr)
      + start()
      + stop()
      + maximum()
      + percentage()
      + format_duration(duration)
      + ETA()
      + speed()
  }

  class HTTPSConnection {
      + ca_certs = None
      + check_domain = True
  --
      + connect()
  }

  class HTTPSHandler {
      - __init__(ca_certs, check_domain = True)
      + https_open(req)
  }

  class HTTPSOnlyHandler {
      + http_open(req)
  }

  class Transport {
      - __init__(timeout, use_datetime = 0)
      + make_connection(host)
  }

  class SafeTransport {
      - __init__(timeout, use_datetime = 0)
      + make_connection(host)
  }

  class ServerProxy {
      - __init__(uri)
  }

  class CSVBase {
      + defaults = {'delimiter': str(','), 'quotechar': str('"'), 'lineterminator': str('\n')}
  }

  class CSVReader {
      - __init__()
      + next()
  }

  class CSVWriter {
      - __init__(fn)
      + writerow(row)
  }

  class Configurator {
      + value_converters = dict(BaseConfigurator.value_converters)
  --
      - __init__(config, base = None)
      + configure_custom(config)
      + inc_convert(value)
  }

  class SubprocessMixin {
      - __init__(verbose = False, progress = None)
      + reader(stream, context)
      + run_command(cmd)
  }

  class PyPIRCFile {
      + DEFAULT_REPOSITORY = 'https://upload.pypi.org/legacy/'
      + DEFAULT_REALM = 'pypi'
  --
      - __init__(fn = None, url = None)
      + read()
      + update(username, password)
  }

  class UnsupportedVersionError {
  }

  class Version {
      - __init__(s)
      + parse(s)
      + is_prerelease()
  }

  class Matcher {
      + version_class = None
  --
      + parse_requirement(s)
      - __init__(s)
      + match(version)
      + exact_version()
  }

  class NormalizedVersion {
      + PREREL_TAGS = set(['a', 'b', 'c', 'rc', 'dev'])
  --
      + parse(s)
      + is_prerelease()
  }

  class NormalizedMatcher {
      + version_class = NormalizedVersion
  }

  class LegacyVersion {
      + parse(s)
      + is_prerelease()
  }

  class LegacyMatcher {
      + version_class = LegacyVersion
      + numeric_re = re.compile('^(\\d+(\\.\\d+)*)')
  }

  class SemanticVersion {
      + parse(s)
      + is_prerelease()
  }

  class SemanticMatcher {
      + version_class = SemanticVersion
  }

  class VersionScheme {
      - __init__(key, matcher, suggester = None)
      + is_valid_version(s)
      + is_valid_matcher(s)
      + is_valid_constraint_list(s)
      + suggest(s)
  }

  class Mounter {
      - __init__()
      + add(pathname, extensions)
      + remove(pathname)
      + find_module(fullname, path = None)
      + load_module(fullname)
  }

  class Wheel {
      + wheel_version = (1, 1)
      + hash_kind = 'sha256'
  --
      - __init__(filename = None, sign = False, verify = False)
      + filename()
      + exists()
      + tags()
      + metadata()
      + get_wheel_metadata(zf)
      + info()
      + process_shebang(data)
      + get_hash(data, hash_kind = None)
      + write_record(records, record_path, archive_record_path)
      + write_records(info, libdir, archive_paths)
      + build_zip(pathname, archive_paths)
      + build(paths, tags = None, wheel_version = None)
      + skip_entry(arcname)
      + install(paths, maker)
      + is_compatible()
      + is_mountable()
      + mount(append = False)
      + unmount()
      + verify()
      + update(modifier, dest_dir = None)
  }

  class DistlibException {
  }

  class NullHandler {
      + handle(record)
      + emit(record)
      + createLock()
  }

}

package distro {
  class VersionDict {
      + major: str
      + minor: str
      + build_number: str
  }

  class InfoDict {
      + id: str
      + version: str
      + version_parts: VersionDict
      + like: str
      + codename: str
  }

  class cached_property {
      - __init__(f: Callable[[Any], Any])
  }

  class LinuxDistribution {
      - __init__(include_lsb: Optional[bool] = None, os_release_file: str = '', distro_release_file: str = '', include_uname: Optional[bool] = None, root_dir: Optional[str] = None, include_oslevel: Optional[bool] = None)
      + linux_distribution(full_distribution_name: bool = True): Tuple[str, str, str]
      + id(): str
      + name(pretty: bool = False): str
      + version(pretty: bool = False, best: bool = False): str
      + version_parts(best: bool = False): Tuple[str, str, str]
      + major_version(best: bool = False): str
      + minor_version(best: bool = False): str
      + build_number(best: bool = False): str
      + like(): str
      + codename(): str
      + info(pretty: bool = False, best: bool = False): InfoDict
      + os_release_info(): Dict[str, str]
      + lsb_release_info(): Dict[str, str]
      + distro_release_info(): Dict[str, str]
      + uname_info(): Dict[str, str]
      + oslevel_info(): str
      + os_release_attr(attribute: str): str
      + lsb_release_attr(attribute: str): str
      + distro_release_attr(attribute: str): str
      + uname_attr(attribute: str): str
  }

}

package msgpack {
  class UnpackException {
  }

  class BufferFull {
  }

  class OutOfData {
  }

  class FormatError {
  }

  class StackError {
  }

  class ExtraData {
      - __init__(unpacked, extra)
  }

  class ExtType {
  }

  class Timestamp {
      - __init__(seconds, nanoseconds = 0)
      + {static} from_bytes(b)
      + to_bytes()
      + {static} from_unix(unix_sec)
      + to_unix()
      + {static} from_unix_nano(unix_ns)
      + to_unix_nano()
      + to_datetime()
      + {static} from_datetime(dt)
  }

  class StringIO {
      - __init__(s = b'')
      + write(s)
      + getvalue()
  }

  class Unpacker {
      + next = __next__
  --
      - __init__(file_like = None, read_size = 0, use_list = True, raw = False, timestamp = 0, strict_map_key = True, object_hook = None, object_pairs_hook = None, list_hook = None, unicode_errors = None, max_buffer_size = 100 * 1024 * 1024, ext_hook = ExtType, max_str_len = -1, max_bin_len = -1, max_array_len = -1, max_map_len = -1, max_ext_len = -1)
      + feed(next_bytes)
      + read_bytes(n)
      + skip()
      + unpack()
      + read_array_header()
      + read_map_header()
      + tell()
  }

  class Packer {
      - __init__(default = None, use_single_float = False, autoreset = True, use_bin_type = True, strict_types = False, datetime = False, unicode_errors = None)
      + pack(obj)
      + pack_map_pairs(pairs)
      + pack_array_header(n)
      + pack_map_header(n)
      + pack_ext_type(typecode, data)
      + bytes()
      + reset()
      + getbuffer()
  }

}

package packaging {
  class InvalidMarker {
  }

  class UndefinedComparison {
  }

  class UndefinedEnvironmentName {
  }

  class Environment {
      + implementation_name: str
      + implementation_version: str
      + os_name: str
      + platform_machine: str
      + platform_release: str
      + platform_system: str
      + platform_version: str
      + python_full_version: str
      + platform_python_implementation: str
      + python_version: str
      + sys_platform: str
  }

  class Marker {
      - __init__(marker: str)
      + evaluate(environment: dict[str, str] | None = None): bool
  }

  class ExceptionGroup {
      + message: str
      + exceptions: list[Exception]
  --
      - __init__(message: str, exceptions: list[Exception])
  }

  class InvalidMetadata {
      + field: str
  --
      - __init__(field: str, message: str)
  }

  class RawMetadata {
      + metadata_version: str
      + name: str
      + version: str
      + platforms: list[str]
      + summary: str
      + description: str
      + keywords: list[str]
      + home_page: str
      + author: str
      + author_email: str
      + license: str
      + supported_platforms: list[str]
      + download_url: str
      + classifiers: list[str]
      + requires: list[str]
      + provides: list[str]
      + obsoletes: list[str]
      + maintainer: str
      + maintainer_email: str
      + requires_dist: list[str]
      + provides_dist: list[str]
      + obsoletes_dist: list[str]
      + requires_python: str
      + requires_external: list[str]
      + project_urls: dict[str, str]
      + description_content_type: str
      + provides_extra: list[str]
      + dynamic: list[str]
  }

  class Metadata {
      + metadata_version: _Validator[_MetadataVersion] = _Validator()
      + name: _Validator[str] = _Validator()
      + version: _Validator[version_module.Version] = _Validator()
      + dynamic: _Validator[list[str] | None] = _Validator(added='2.2')
      + platforms: _Validator[list[str] | None] = _Validator()
      + supported_platforms: _Validator[list[str] | None] = _Validator(added='1.1')
      + summary: _Validator[str | None] = _Validator()
      + description: _Validator[str | None] = _Validator()
      + description_content_type: _Validator[str | None] = _Validator(added='2.1')
      + keywords: _Validator[list[str] | None] = _Validator()
      + home_page: _Validator[str | None] = _Validator()
      + download_url: _Validator[str | None] = _Validator(added='1.1')
      + author: _Validator[str | None] = _Validator()
      + author_email: _Validator[str | None] = _Validator()
      + maintainer: _Validator[str | None] = _Validator(added='1.2')
      + maintainer_email: _Validator[str | None] = _Validator(added='1.2')
      + license: _Validator[str | None] = _Validator()
      + classifiers: _Validator[list[str] | None] = _Validator(added='1.1')
      + requires_dist: _Validator[list[requirements.Requirement] | None] = _Validator(added='1.2')
      + requires_python: _Validator[specifiers.SpecifierSet | None] = _Validator(added='1.2')
      + requires_external: _Validator[list[str] | None] = _Validator(added='1.2')
      + project_urls: _Validator[dict[str, str] | None] = _Validator(added='1.2')
      + provides_extra: _Validator[list[utils.NormalizedName] | None] = _Validator(added='2.1')
      + provides_dist: _Validator[list[str] | None] = _Validator(added='1.2')
      + obsoletes_dist: _Validator[list[str] | None] = _Validator(added='1.2')
      + requires: _Validator[list[str] | None] = _Validator(added='1.1')
      + provides: _Validator[list[str] | None] = _Validator(added='1.1')
      + obsoletes: _Validator[list[str] | None] = _Validator(added='1.1')
  --
      + {classmethod} from_raw(cls, data: RawMetadata): Metadata
      + {classmethod} from_email(cls, data: bytes | str): Metadata
  }

  class InvalidRequirement {
  }

  class Requirement {
      - __init__(requirement_string: str)
  }

  class InvalidSpecifier {
  }

  class BaseSpecifier {
      + prereleases(): bool | None
      + prereleases(value: bool)
      + contains(item: str, prereleases: bool | None = None): bool
      + filter(iterable: Iterable[UnparsedVersionVar], prereleases: bool | None = None): Iterator[UnparsedVersionVar]
  }

  class Specifier {
      - __init__(spec: str = '', prereleases: bool | None = None)
      + prereleases(): bool
      + prereleases(value: bool)
      + operator(): str
      + version(): str
      + contains(item: UnparsedVersion, prereleases: bool | None = None): bool
      + filter(iterable: Iterable[UnparsedVersionVar], prereleases: bool | None = None): Iterator[UnparsedVersionVar]
  }

  class SpecifierSet {
      - __init__(specifiers: str = '', prereleases: bool | None = None)
      + prereleases(): bool | None
      + prereleases(value: bool)
      + contains(item: UnparsedVersion, prereleases: bool | None = None, installed: bool | None = None): bool
      + filter(iterable: Iterable[UnparsedVersionVar], prereleases: bool | None = None): Iterator[UnparsedVersionVar]
  }

  class Tag {
      - __init__(interpreter: str, abi: str, platform: str)
      + interpreter(): str
      + abi(): str
      + platform(): str
  }

  class InvalidName {
  }

  class InvalidWheelFilename {
  }

  class InvalidSdistFilename {
  }

  class InvalidVersion {
  }

  class Version {
      - __init__(version: str)
      + epoch(): int
      + release(): tuple[int, ...]
      + pre(): tuple[str, int] | None
      + post(): int | None
      + dev(): int | None
      + local(): str | None
      + public(): str
      + base_version(): str
      + is_prerelease(): bool
      + is_postrelease(): bool
      + is_devrelease(): bool
      + major(): int
      + minor(): int
      + micro(): int
  }

  class ELFInvalid {
  }

  class EIClass {
      + C32 = 1
      + C64 = 2
  }

  class EIData {
      + Lsb = 1
      + Msb = 2
  }

  class EMachine {
      + I386 = 3
      + S390 = 22
      + Arm = 40
      + X8664 = 62
      + AArc64 = 183
  }

  class ELFFile {
      - __init__(f: IO[bytes])
      + interpreter(): str | None
  }

  class Node {
      - __init__(value: str)
      + serialize(): str
  }

  class Variable {
      + serialize(): str
  }

  class Value {
      + serialize(): str
  }

  class Op {
      + serialize(): str
  }

  class ParsedRequirement {
      + name: str
      + url: str
      + extras: list[str]
      + specifier: str
      + marker: MarkerList | None
  }

  class InfinityType {
  }

  class NegativeInfinityType {
  }

  class Token <<dataclass>> {
      + name: str
      + text: str
      + position: int
  }

  class ParserSyntaxError {
      - __init__(message: str)
  }

  class Tokenizer {
      - __init__(source: str)
      + consume(name: str)
      + check(name: str): bool
      + expect(name: str): Token
      + read(): Token
      + raise_syntax_error(message: str): NoReturn
      + enclosing_tokens(open_token: str, close_token: str): Iterator[None]
  }

}

package pkg_resources {
  class PEP440Warning {
  }

  class ResolutionError {
  }

  class VersionConflict {
      + dist(): Distribution
      + req(): Requirement
      + report()
      + with_context(required_by: set[Distribution | str])
  }

  class ContextualVersionConflict {
      + required_by(): set[str]
  }

  class DistributionNotFound {
      + req(): Requirement
      + requirers(): set[str] | None
      + requirers_str()
      + report()
  }

  class UnknownExtra {
  }

  class IMetadataProvider {
      + has_metadata(name: str): bool
      + get_metadata(name: str): str
      + get_metadata_lines(name: str): Iterator[str]
      + metadata_isdir(name: str): bool
      + metadata_listdir(name: str): list[str]
      + run_script(script_name: str, namespace: dict[str, Any])
  }

  class IResourceProvider {
      + get_resource_filename(manager: ResourceManager, resource_name: str): str
      + get_resource_stream(manager: ResourceManager, resource_name: str): _ResourceStream
      + get_resource_string(manager: ResourceManager, resource_name: str): bytes
      + has_resource(resource_name: str): bool
      + resource_isdir(resource_name: str): bool
      + resource_listdir(resource_name: str): list[str]
  }

  class WorkingSet {
      - __init__(entries: Iterable[str] | None = None)
      + add_entry(entry: str)
      + find(req: Requirement): Distribution | None
      + iter_entry_points(group: str, name: str | None = None)
      + run_script(requires: str, script_name: str)
      + add(dist: Distribution, entry: str | None = None, insert: bool = True, replace: bool = False)
      + resolve(requirements: Iterable[Requirement], env: Environment | None, installer: _InstallerTypeT[_DistributionT], replace_conflicting: bool = False, extras: tuple[str, ...] | None = None): list[_DistributionT]
      + resolve(requirements: Iterable[Requirement], env: Environment | None = None): list[_DistributionT]
      + resolve(requirements: Iterable[Requirement], env: Environment | None = None, installer: _InstallerType | None = None, replace_conflicting: bool = False, extras: tuple[str, ...] | None = None): list[Distribution]
      + resolve(requirements: Iterable[Requirement], env: Environment | None = None, installer: _InstallerType | None | _InstallerTypeT[_DistributionT] = None, replace_conflicting: bool = False, extras: tuple[str, ...] | None = None): list[Distribution] | list[_DistributionT]
      + find_plugins(plugin_env: Environment, full_env: Environment | None, installer: _InstallerTypeT[_DistributionT], fallback: bool = True): tuple[list[_DistributionT], dict[Distribution, Exception]]
      + find_plugins(plugin_env: Environment, full_env: Environment | None = None): tuple[list[_DistributionT], dict[Distribution, Exception]]
      + find_plugins(plugin_env: Environment, full_env: Environment | None = None, installer: _InstallerType | None = None, fallback: bool = True): tuple[list[Distribution], dict[Distribution, Exception]]
      + find_plugins(plugin_env: Environment, full_env: Environment | None = None, installer: _InstallerType | None | _InstallerTypeT[_DistributionT] = None, fallback: bool = True): tuple[list[Distribution] | list[_DistributionT], dict[Distribution, Exception]]
      + require()
      + subscribe(callback: Callable[[Distribution], object], existing: bool = True)
  }

  class Environment {
      - __init__(search_path: Iterable[str] | None = None, platform: str | None = get_supported_platform(), python: str | None = PY_MAJOR)
      + can_add(dist: Distribution)
      + remove(dist: Distribution)
      + scan(search_path: Iterable[str] | None = None)
      + add(dist: Distribution)
      + best_match(req: Requirement, working_set: WorkingSet, installer: _InstallerTypeT[_DistributionT], replace_conflicting: bool = False): _DistributionT
      + best_match(req: Requirement, working_set: WorkingSet, installer: _InstallerType | None = None, replace_conflicting: bool = False): Distribution | None
      + best_match(req: Requirement, working_set: WorkingSet, installer: _InstallerType | None | _InstallerTypeT[_DistributionT] = None, replace_conflicting: bool = False): Distribution | None
      + obtain(requirement: Requirement, installer: _InstallerTypeT[_DistributionT]): _DistributionT
      + obtain(requirement: Requirement, installer: Callable[[Requirement], None] | None = None)
      + obtain(requirement: Requirement, installer: _InstallerType | None = None): Distribution | None
      + obtain(requirement: Requirement, installer: Callable[[Requirement], None] | _InstallerType | None | _InstallerTypeT[_DistributionT] = None): Distribution | None
  }

  class ExtractionError {
      + manager: ResourceManager
      + cache_path: str
      + original_error: BaseException | None
  }

  class ResourceManager {
      + extraction_path: str | None = None
  --
      - __init__()
      + resource_exists(package_or_requirement: _PkgReqType, resource_name: str)
      + resource_isdir(package_or_requirement: _PkgReqType, resource_name: str)
      + resource_filename(package_or_requirement: _PkgReqType, resource_name: str)
      + resource_stream(package_or_requirement: _PkgReqType, resource_name: str)
      + resource_string(package_or_requirement: _PkgReqType, resource_name: str): bytes
      + resource_listdir(package_or_requirement: _PkgReqType, resource_name: str)
      + extraction_error(): NoReturn
      + get_cache_path(archive_name: str, names: Iterable[StrPath] = ())
      + postprocess(tempname: StrOrBytesPath, filename: StrOrBytesPath)
      + set_extraction_path(path: str)
      + cleanup_resources(force: bool = False): list[str]
  }

  class NullProvider {
      + egg_name: str | None = None
      + egg_info: str | None = None
      + loader: _LoaderProtocol | None = None
  --
      - __init__(module: _ModuleLike)
      + get_resource_filename(manager: ResourceManager, resource_name: str)
      + get_resource_stream(manager: ResourceManager, resource_name: str)
      + get_resource_string(manager: ResourceManager, resource_name: str): bytes
      + has_resource(resource_name: str)
      + has_metadata(name: str): bool
      + get_metadata(name: str)
      + get_metadata_lines(name: str): Iterator[str]
      + resource_isdir(resource_name: str)
      + metadata_isdir(name: str): bool
      + resource_listdir(resource_name: str)
      + metadata_listdir(name: str): list[str]
      + run_script(script_name: str, namespace: dict[str, Any])
  }

  class EggProvider {
      - __init__(module: _ModuleLike)
  }

  class DefaultProvider {
      + get_resource_stream(manager: object, resource_name: str)
  }

  class EmptyProvider {
      + module_path: str | None = None
  --
      - __init__()
  }

  class ZipManifests {
      + load = build
  --
      + {classmethod} build(cls, path: str)
  }

  class MemoizedZipManifests {
      + load(path: str): dict[str, zipfile.ZipInfo]
  }

  class manifest_mod {
      + manifest: dict[str, zipfile.ZipInfo]
      + mtime: float
  }

  class ZipProvider {
      + eagers: list[str] | None = None
      + loader: zipimport.zipimporter
  --
      - __init__(module: _ZipLoaderModule)
      + zipinfo()
      + get_resource_filename(manager: ResourceManager, resource_name: str)
  }

  class FileMetadata {
      - __init__(path: StrPath)
      + has_metadata(name: str): bool
      + get_metadata(name: str)
      + get_metadata_lines(name: str): Iterator[str]
  }

  class PathMetadata {
      - __init__(path: str, egg_info: str)
  }

  class EggMetadata {
      - __init__(importer: zipimport.zipimporter)
  }

  class NoDists {
  }

  class EntryPoint {
      + pattern = re.compile('\\s*(?P<name>.+?)\\s*=\\s*(?P<module>[\\w.]+)\\s*(:\\s*(?P<attr>[\\w.]+))?\\s*(?P<extras>\\[.*\\])?\\s*$')
  --
      - __init__(name: str, module_name: str, attrs: Iterable[str] = (), extras: Iterable[str] = (), dist: Distribution | None = None)
      + load(require: Literal[True] = True, env: Environment | None = None, installer: _InstallerType | None = None): _ResolvedEntryPoint
      + load(require: Literal[False]): _ResolvedEntryPoint
      + load(require: bool = True): _ResolvedEntryPoint
      + resolve(): _ResolvedEntryPoint
      + require(env: Environment | None = None, installer: _InstallerType | None = None)
      + {classmethod} parse(cls, src: str, dist: Distribution | None = None)
      + {classmethod} parse_group(cls, group: str, lines: _NestedStr, dist: Distribution | None = None)
      + {classmethod} parse_map(cls, data: str | Iterable[str] | dict[str, str | Iterable[str]], dist: Distribution | None = None)
  }

  class Distribution {
      + PKG_INFO = 'PKG-INFO'
  --
      - __init__(location: str | None = None, metadata: _MetadataType = None, project_name: str | None = None, version: str | None = None, py_version: str | None = PY_MAJOR, platform: str | None = None, precedence: int = EGG_DIST)
      + {classmethod} from_location(cls, location: str, basename: StrPath, metadata: _MetadataType = None): Distribution
      + hashcmp()
      + key()
      + parsed_version()
      + version()
      + requires(extras: Iterable[str] = ())
      + activate(path: list[str] | None = None, replace: bool = False)
      + egg_name()
      + {classmethod} from_filename(cls, filename: StrPath, metadata: _MetadataType = None)
      + as_requirement()
      + load_entry_point(group: str, name: str): _ResolvedEntryPoint
      + get_entry_map(group: None = None): dict[str, dict[str, EntryPoint]]
      + get_entry_map(group: str): dict[str, EntryPoint]
      + get_entry_map(group: str | None = None)
      + get_entry_info(group: str, name: str)
      + insert_on(path: list[str], loc = None, replace: bool = False)
      + check_version_conflict()
      + has_version()
      + clone()
      + extras()
  }

  class EggInfoDistribution {
  }

  class DistInfoDistribution {
      + PKG_INFO = 'METADATA'
      + EQEQ = re.compile('([\\(,])\\s*(\\d.*?)\\s*([,\\)])')
  }

  class RequirementParseError {
  }

  class Requirement {
      - __init__(requirement_string: str)
      + {static} parse(s: str | Iterable[str])
  }

  class PkgResourcesDeprecationWarning {
  }

}

package platformdirs {
  class Android {
      + user_data_dir(): str
      + site_data_dir(): str
      + user_config_dir(): str
      + site_config_dir(): str
      + user_cache_dir(): str
      + site_cache_dir(): str
      + user_state_dir(): str
      + user_log_dir(): str
      + user_documents_dir(): str
      + user_downloads_dir(): str
      + user_pictures_dir(): str
      + user_videos_dir(): str
      + user_music_dir(): str
      + user_desktop_dir(): str
      + user_runtime_dir(): str
      + site_runtime_dir(): str
  }

  class PlatformDirsABC {
      - __init__(appname: str | None = None, appauthor: str | None | Literal[False] = None, version: str | None = None, roaming: bool = False, multipath: bool = False, opinion: bool = True, ensure_exists: bool = False)
      + user_data_dir(): str
      + site_data_dir(): str
      + user_config_dir(): str
      + site_config_dir(): str
      + user_cache_dir(): str
      + site_cache_dir(): str
      + user_state_dir(): str
      + user_log_dir(): str
      + user_documents_dir(): str
      + user_downloads_dir(): str
      + user_pictures_dir(): str
      + user_videos_dir(): str
      + user_music_dir(): str
      + user_desktop_dir(): str
      + user_runtime_dir(): str
      + site_runtime_dir(): str
      + user_data_path(): Path
      + site_data_path(): Path
      + user_config_path(): Path
      + site_config_path(): Path
      + user_cache_path(): Path
      + site_cache_path(): Path
      + user_state_path(): Path
      + user_log_path(): Path
      + user_documents_path(): Path
      + user_downloads_path(): Path
      + user_pictures_path(): Path
      + user_videos_path(): Path
      + user_music_path(): Path
      + user_desktop_path(): Path
      + user_runtime_path(): Path
      + site_runtime_path(): Path
      + iter_config_dirs(): Iterator[str]
      + iter_data_dirs(): Iterator[str]
      + iter_cache_dirs(): Iterator[str]
      + iter_runtime_dirs(): Iterator[str]
      + iter_config_paths(): Iterator[Path]
      + iter_data_paths(): Iterator[Path]
      + iter_cache_paths(): Iterator[Path]
      + iter_runtime_paths(): Iterator[Path]
  }

  class MacOS {
      + user_data_dir(): str
      + site_data_dir(): str
      + user_config_dir(): str
      + site_config_dir(): str
      + user_cache_dir(): str
      + site_cache_dir(): str
      + user_state_dir(): str
      + user_log_dir(): str
      + user_documents_dir(): str
      + user_downloads_dir(): str
      + user_pictures_dir(): str
      + user_videos_dir(): str
      + user_music_dir(): str
      + user_desktop_dir(): str
      + user_runtime_dir(): str
      + site_runtime_dir(): str
  }

  class Unix {
      + user_data_dir(): str
      + site_data_dir(): str
      + user_config_dir(): str
      + site_config_dir(): str
      + user_cache_dir(): str
      + site_cache_dir(): str
      + user_state_dir(): str
      + user_log_dir(): str
      + user_documents_dir(): str
      + user_downloads_dir(): str
      + user_pictures_dir(): str
      + user_videos_dir(): str
      + user_music_dir(): str
      + user_desktop_dir(): str
      + user_runtime_dir(): str
      + site_runtime_dir(): str
      + site_data_path(): Path
      + site_config_path(): Path
      + site_cache_path(): Path
      + iter_config_dirs(): Iterator[str]
      + iter_data_dirs(): Iterator[str]
  }

  class Windows {
      + user_data_dir(): str
      + site_data_dir(): str
      + user_config_dir(): str
      + site_config_dir(): str
      + user_cache_dir(): str
      + site_cache_dir(): str
      + user_state_dir(): str
      + user_log_dir(): str
      + user_documents_dir(): str
      + user_downloads_dir(): str
      + user_pictures_dir(): str
      + user_videos_dir(): str
      + user_music_dir(): str
      + user_desktop_dir(): str
      + user_runtime_dir(): str
      + site_runtime_dir(): str
  }

}

package pygments {
  class HelpFormatter {
      - __init__(prog, indent_increment = 2, max_help_position = 16, width = None)
  }

  class Filter {
      - __init__()
      + filter(lexer, stream)
  }

  class FunctionFilter {
      + function = None
  --
      - __init__()
      + filter(lexer, stream)
  }

  class Formatter {
      + name = None
      + aliases = []
      + filenames = []
      + unicodeoutput = True
  --
      - __init__()
      + get_style_defs(arg = '')
      + format(tokensource, outfile)
  }

  class LexerMeta {
  }

  class Lexer {
      + name = None
      + aliases = []
      + filenames = []
      + alias_filenames = []
      + mimetypes = []
      + priority = 0
      + url = None
      + version_added = None
  --
      - __init__()
      + add_filter(filter_)
      + analyse_text(text)
      + get_tokens(text, unfiltered = False)
      + get_tokens_unprocessed(text)
  }

  class DelegatingLexer {
      - __init__(_root_lexer, _language_lexer, _needle = Other)
      + get_tokens_unprocessed(text)
  }

  class include {
  }

  class combined {
      - __init__()
  }

  class default {
      - __init__(state)
  }

  class words {
      - __init__(words, prefix = '', suffix = '')
      + get()
  }

  class RegexLexerMeta {
      + process_tokendef(cls, name, tokendefs = None)
      + get_tokendefs(cls)
  }

  class RegexLexer {
      + flags = re.MULTILINE
      + tokens = {}
  --
      + get_tokens_unprocessed(text, stack = ('root',))
  }

  class LexerContext {
      - __init__(text, pos, stack = None, end = None)
  }

  class ExtendedRegexLexer {
      + get_tokens_unprocessed(text = None, context = None)
  }

  class ProfilingRegexLexerMeta {
  }

  class ProfilingRegexLexer {
      + get_tokens_unprocessed(text, stack = ('root',))
  }

  class EndOfText {
  }

  class Scanner {
      + eos = property(eos, eos.__doc__)
  --
      - __init__(text, flags = 0)
      + eos()
      + check(pattern)
      + test(pattern)
      + scan(pattern)
      + get_char()
  }

  class PygmentsDoc {
      + has_content = False
      + required_arguments = 1
      + optional_arguments = 0
      + final_argument_whitespace = False
      + option_spec = {}
  --
      + run()
      + document_lexers_overview()
      + document_lexers()
      + document_formatters()
      + document_filters()
  }

  class StyleMeta {
      + style_for_token(cls, token)
      + list_styles(cls)
      + styles_token(cls, ttype)
  }

  class Style {
      + background_color = '#ffffff'
      + highlight_color = '#ffffcc'
      + line_number_color = 'inherit'
      + line_number_background_color = 'transparent'
      + line_number_special_color = '#000000'
      + line_number_special_background_color = '#ffffc0'
      + styles = {}
      + name = 'unnamed'
      + aliases = []
      + web_style_gallery_exclude = False
  }

  class ClassNotFound {
  }

  class OptionError {
  }

  class Future {
      + get()
  }

  class UnclosingTextIOWrapper {
      + close()
  }

  class HelpFormatter {
      - __init__(prog, indent_increment = 2, max_help_position = 16, width = None)
  }

  class Filter {
      - __init__()
      + filter(lexer, stream)
  }

  class FunctionFilter {
      + function = None
  --
      - __init__()
      + filter(lexer, stream)
  }

  class Formatter {
      + name = None
      + aliases = []
      + filenames = []
      + unicodeoutput = True
  --
      - __init__()
      + get_style_defs(arg = '')
      + format(tokensource, outfile)
  }

  class LexerMeta {
  }

  class Lexer {
      + name = None
      + aliases = []
      + filenames = []
      + alias_filenames = []
      + mimetypes = []
      + priority = 0
      + url = None
      + version_added = None
  --
      - __init__()
      + add_filter(filter_)
      + analyse_text(text)
      + get_tokens(text, unfiltered = False)
      + get_tokens_unprocessed(text)
  }

  class DelegatingLexer {
      - __init__(_root_lexer, _language_lexer, _needle = Other)
      + get_tokens_unprocessed(text)
  }

  class include {
  }

  class combined {
      - __init__()
  }

  class default {
      - __init__(state)
  }

  class words {
      - __init__(words, prefix = '', suffix = '')
      + get()
  }

  class RegexLexerMeta {
      + process_tokendef(cls, name, tokendefs = None)
      + get_tokendefs(cls)
  }

  class RegexLexer {
      + flags = re.MULTILINE
      + tokens = {}
  --
      + get_tokens_unprocessed(text, stack = ('root',))
  }

  class LexerContext {
      - __init__(text, pos, stack = None, end = None)
  }

  class ExtendedRegexLexer {
      + get_tokens_unprocessed(text = None, context = None)
  }

  class ProfilingRegexLexerMeta {
  }

  class ProfilingRegexLexer {
      + get_tokens_unprocessed(text, stack = ('root',))
  }

  class EndOfText {
  }

  class Scanner {
      + eos = property(eos, eos.__doc__)
  --
      - __init__(text, flags = 0)
      + eos()
      + check(pattern)
      + test(pattern)
      + scan(pattern)
      + get_char()
  }

  class PygmentsDoc {
      + has_content = False
      + required_arguments = 1
      + optional_arguments = 0
      + final_argument_whitespace = False
      + option_spec = {}
  --
      + run()
      + document_lexers_overview()
      + document_lexers()
      + document_formatters()
      + document_filters()
  }

  class StyleMeta {
      + style_for_token(cls, token)
      + list_styles(cls)
      + styles_token(cls, ttype)
  }

  class Style {
      + background_color = '#ffffff'
      + highlight_color = '#ffffcc'
      + line_number_color = 'inherit'
      + line_number_background_color = 'transparent'
      + line_number_special_color = '#000000'
      + line_number_special_background_color = '#ffffc0'
      + styles = {}
      + name = 'unnamed'
      + aliases = []
      + web_style_gallery_exclude = False
  }

  class ClassNotFound {
  }

  class OptionError {
  }

  class Future {
      + get()
  }

  class UnclosingTextIOWrapper {
      + close()
  }

}

package filters {
  class CodeTagFilter {
      - __init__()
      + filter(lexer, stream)
  }

  class SymbolFilter {
      + latex_symbols = {'\\alpha': 'α', '\\beta': 'β', '\\gamma': 'γ', '\\delta': 'δ', '\\varepsilon': 'ε', '\\zeta': 'ζ', '\\eta': 'η', '\\vartheta': 'θ', '\\iota': 'ι', '\\kappa': 'κ', '\\lambda': 'λ', '\\mu': 'μ', '\\nu': 'ν', '\\xi': 'ξ', '\\pi': 'π', '\\varrho': 'ρ', '\\sigma': 'σ', '\\tau': 'τ', '\\upsilon': 'υ', '\\varphi': 'φ', '\\chi': 'χ', '\\psi': 'ψ', '\\omega': 'ω', '\\Gamma': 'Γ', '\\Delta': 'Δ', '\\Theta': 'Θ', '\\Lambda': 'Λ', '\\Xi': 'Ξ', '\\Pi': 'Π', '\\Sigma': 'Σ', '\\Upsilon': 'Υ', '\\Phi': 'Φ', '\\Psi': 'Ψ', '\\Omega': 'Ω', '\\leftarrow': '←', '\\longleftarrow': '⟵', '\\rightarrow': '→', '\\longrightarrow': '⟶', '\\Leftarrow': '⇐', '\\Longleftarrow': '⟸', '\\Rightarrow': '⇒', '\\Longrightarrow': '⟹', '\\leftrightarrow': '↔', '\\longleftrightarrow': '⟷', '\\Leftrightarrow': '⇔', '\\Longleftrightarrow': '⟺', '\\mapsto': '↦', '\\longmapsto': '⟼', '\\relbar': '─', '\\Relbar': '═', '\\hookleftarrow': '↩', '\\hookrightarrow': '↪', '\\leftharpoondown': '↽', '\\rightharpoondown': '⇁', '\\leftharpoonup': '↼', '\\rightharpoonup': '⇀', '\\rightleftharpoons': '⇌', '\\leadsto': '↝', '\\downharpoonleft': '⇃', '\\downharpoonright': '⇂', '\\upharpoonleft': '↿', '\\upharpoonright': '↾', '\\restriction': '↾', '\\uparrow': '↑', '\\Uparrow': '⇑', '\\downarrow': '↓', '\\Downarrow': '⇓', '\\updownarrow': '↕', '\\Updownarrow': '⇕', '\\langle': '⟨', '\\rangle': '⟩', '\\lceil': '⌈', '\\rceil': '⌉', '\\lfloor': '⌊', '\\rfloor': '⌋', '\\flqq': '«', '\\frqq': '»', '\\bot': '⊥', '\\top': '⊤', '\\wedge': '∧', '\\bigwedge': '⋀', '\\vee': '∨', '\\bigvee': '⋁', '\\forall': '∀', '\\exists': '∃', '\\nexists': '∄', '\\neg': '¬', '\\Box': '□', '\\Diamond': '◇', '\\vdash': '⊢', '\\models': '⊨', '\\dashv': '⊣', '\\surd': '√', '\\le': '≤', '\\ge': '≥', '\\ll': '≪', '\\gg': '≫', '\\lesssim': '≲', '\\gtrsim': '≳', '\\lessapprox': '⪅', '\\gtrapprox': '⪆', '\\in': '∈', '\\notin': '∉', '\\subset': '⊂', '\\supset': '⊃', '\\subseteq': '⊆', '\\supseteq': '⊇', '\\sqsubset': '⊏', '\\sqsupset': '⊐', '\\sqsubseteq': '⊑', '\\sqsupseteq': '⊒', '\\cap': '∩', '\\bigcap': '⋂', '\\cup': '∪', '\\bigcup': '⋃', '\\sqcup': '⊔', '\\bigsqcup': '⨆', '\\sqcap': '⊓', '\\Bigsqcap': '⨅', '\\setminus': '∖', '\\propto': '∝', '\\uplus': '⊎', '\\bigplus': '⨄', '\\sim': '∼', '\\doteq': '≐', '\\simeq': '≃', '\\approx': '≈', '\\asymp': '≍', '\\cong': '≅', '\\equiv': '≡', '\\Join': '⋈', '\\bowtie': '⨝', '\\prec': '≺', '\\succ': '≻', '\\preceq': '≼', '\\succeq': '≽', '\\parallel': '∥', '\\mid': '¦', '\\pm': '±', '\\mp': '∓', '\\times': '×', '\\div': '÷', '\\cdot': '⋅', '\\star': '⋆', '\\circ': '∘', '\\dagger': '†', '\\ddagger': '‡', '\\lhd': '⊲', '\\rhd': '⊳', '\\unlhd': '⊴', '\\unrhd': '⊵', '\\triangleleft': '◃', '\\triangleright': '▹', '\\triangle': '△', '\\triangleq': '≜', '\\oplus': '⊕', '\\bigoplus': '⨁', '\\otimes': '⊗', '\\bigotimes': '⨂', '\\odot': '⊙', '\\bigodot': '⨀', '\\ominus': '⊖', '\\oslash': '⊘', '\\dots': '…', '\\cdots': '⋯', '\\sum': '∑', '\\prod': '∏', '\\coprod': '∐', '\\infty': '∞', '\\int': '∫', '\\oint': '∮', '\\clubsuit': '♣', '\\diamondsuit': '♢', '\\heartsuit': '♡', '\\spadesuit': '♠', '\\aleph': 'ℵ', '\\emptyset': '∅', '\\nabla': '∇', '\\partial': '∂', '\\flat': '♭', '\\natural': '♮', '\\sharp': '♯', '\\angle': '∠', '\\copyright': '©', '\\textregistered': '®', '\\textonequarter': '¼', '\\textonehalf': '½', '\\textthreequarters': '¾', '\\textordfeminine': 'ª', '\\textordmasculine': 'º', '\\euro': '€', '\\pounds': '£', '\\yen': '¥', '\\textcent': '¢', '\\textcurrency': '¤', '\\textdegree': '°'}
      + isabelle_symbols = {'\\<zero>': '𝟬', '\\<one>': '𝟭', '\\<two>': '𝟮', '\\<three>': '𝟯', '\\<four>': '𝟰', '\\<five>': '𝟱', '\\<six>': '𝟲', '\\<seven>': '𝟳', '\\<eight>': '𝟴', '\\<nine>': '𝟵', '\\<A>': '𝒜', '\\<B>': 'ℬ', '\\<C>': '𝒞', '\\<D>': '𝒟', '\\<E>': 'ℰ', '\\<F>': 'ℱ', '\\<G>': '𝒢', '\\<H>': 'ℋ', '\\<I>': 'ℐ', '\\<J>': '𝒥', '\\<K>': '𝒦', '\\<L>': 'ℒ', '\\<M>': 'ℳ', '\\<N>': '𝒩', '\\<O>': '𝒪', '\\<P>': '𝒫', '\\<Q>': '𝒬', '\\<R>': 'ℛ', '\\<S>': '𝒮', '\\<T>': '𝒯', '\\<U>': '𝒰', '\\<V>': '𝒱', '\\<W>': '𝒲', '\\<X>': '𝒳', '\\<Y>': '𝒴', '\\<Z>': '𝒵', '\\<a>': '𝖺', '\\<b>': '𝖻', '\\<c>': '𝖼', '\\<d>': '𝖽', '\\<e>': '𝖾', '\\<f>': '𝖿', '\\<g>': '𝗀', '\\<h>': '𝗁', '\\<i>': '𝗂', '\\<j>': '𝗃', '\\<k>': '𝗄', '\\<l>': '𝗅', '\\<m>': '𝗆', '\\<n>': '𝗇', '\\<o>': '𝗈', '\\<p>': '𝗉', '\\<q>': '𝗊', '\\<r>': '𝗋', '\\<s>': '𝗌', '\\<t>': '𝗍', '\\<u>': '𝗎', '\\<v>': '𝗏', '\\<w>': '𝗐', '\\<x>': '𝗑', '\\<y>': '𝗒', '\\<z>': '𝗓', '\\<AA>': '𝔄', '\\<BB>': '𝔅', '\\<CC>': 'ℭ', '\\<DD>': '𝔇', '\\<EE>': '𝔈', '\\<FF>': '𝔉', '\\<GG>': '𝔊', '\\<HH>': 'ℌ', '\\<II>': 'ℑ', '\\<JJ>': '𝔍', '\\<KK>': '𝔎', '\\<LL>': '𝔏', '\\<MM>': '𝔐', '\\<NN>': '𝔑', '\\<OO>': '𝔒', '\\<PP>': '𝔓', '\\<QQ>': '𝔔', '\\<RR>': 'ℜ', '\\<SS>': '𝔖', '\\<TT>': '𝔗', '\\<UU>': '𝔘', '\\<VV>': '𝔙', '\\<WW>': '𝔚', '\\<XX>': '𝔛', '\\<YY>': '𝔜', '\\<ZZ>': 'ℨ', '\\<aa>': '𝔞', '\\<bb>': '𝔟', '\\<cc>': '𝔠', '\\<dd>': '𝔡', '\\<ee>': '𝔢', '\\<ff>': '𝔣', '\\<gg>': '𝔤', '\\<hh>': '𝔥', '\\<ii>': '𝔦', '\\<jj>': '𝔧', '\\<kk>': '𝔨', '\\<ll>': '𝔩', '\\<mm>': '𝔪', '\\<nn>': '𝔫', '\\<oo>': '𝔬', '\\<pp>': '𝔭', '\\<qq>': '𝔮', '\\<rr>': '𝔯', '\\<ss>': '𝔰', '\\<tt>': '𝔱', '\\<uu>': '𝔲', '\\<vv>': '𝔳', '\\<ww>': '𝔴', '\\<xx>': '𝔵', '\\<yy>': '𝔶', '\\<zz>': '𝔷', '\\<alpha>': 'α', '\\<beta>': 'β', '\\<gamma>': 'γ', '\\<delta>': 'δ', '\\<epsilon>': 'ε', '\\<zeta>': 'ζ', '\\<eta>': 'η', '\\<theta>': 'θ', '\\<iota>': 'ι', '\\<kappa>': 'κ', '\\<lambda>': 'λ', '\\<mu>': 'μ', '\\<nu>': 'ν', '\\<xi>': 'ξ', '\\<pi>': 'π', '\\<rho>': 'ρ', '\\<sigma>': 'σ', '\\<tau>': 'τ', '\\<upsilon>': 'υ', '\\<phi>': 'φ', '\\<chi>': 'χ', '\\<psi>': 'ψ', '\\<omega>': 'ω', '\\<Gamma>': 'Γ', '\\<Delta>': 'Δ', '\\<Theta>': 'Θ', '\\<Lambda>': 'Λ', '\\<Xi>': 'Ξ', '\\<Pi>': 'Π', '\\<Sigma>': 'Σ', '\\<Upsilon>': 'Υ', '\\<Phi>': 'Φ', '\\<Psi>': 'Ψ', '\\<Omega>': 'Ω', '\\<bool>': '𝔹', '\\<complex>': 'ℂ', '\\<nat>': 'ℕ', '\\<rat>': 'ℚ', '\\<real>': 'ℝ', '\\<int>': 'ℤ', '\\<leftarrow>': '←', '\\<longleftarrow>': '⟵', '\\<rightarrow>': '→', '\\<longrightarrow>': '⟶', '\\<Leftarrow>': '⇐', '\\<Longleftarrow>': '⟸', '\\<Rightarrow>': '⇒', '\\<Longrightarrow>': '⟹', '\\<leftrightarrow>': '↔', '\\<longleftrightarrow>': '⟷', '\\<Leftrightarrow>': '⇔', '\\<Longleftrightarrow>': '⟺', '\\<mapsto>': '↦', '\\<longmapsto>': '⟼', '\\<midarrow>': '─', '\\<Midarrow>': '═', '\\<hookleftarrow>': '↩', '\\<hookrightarrow>': '↪', '\\<leftharpoondown>': '↽', '\\<rightharpoondown>': '⇁', '\\<leftharpoonup>': '↼', '\\<rightharpoonup>': '⇀', '\\<rightleftharpoons>': '⇌', '\\<leadsto>': '↝', '\\<downharpoonleft>': '⇃', '\\<downharpoonright>': '⇂', '\\<upharpoonleft>': '↿', '\\<upharpoonright>': '↾', '\\<restriction>': '↾', '\\<Colon>': '∷', '\\<up>': '↑', '\\<Up>': '⇑', '\\<down>': '↓', '\\<Down>': '⇓', '\\<updown>': '↕', '\\<Updown>': '⇕', '\\<langle>': '⟨', '\\<rangle>': '⟩', '\\<lceil>': '⌈', '\\<rceil>': '⌉', '\\<lfloor>': '⌊', '\\<rfloor>': '⌋', '\\<lparr>': '⦇', '\\<rparr>': '⦈', '\\<lbrakk>': '⟦', '\\<rbrakk>': '⟧', '\\<lbrace>': '⦃', '\\<rbrace>': '⦄', '\\<guillemotleft>': '«', '\\<guillemotright>': '»', '\\<bottom>': '⊥', '\\<top>': '⊤', '\\<and>': '∧', '\\<And>': '⋀', '\\<or>': '∨', '\\<Or>': '⋁', '\\<forall>': '∀', '\\<exists>': '∃', '\\<nexists>': '∄', '\\<not>': '¬', '\\<box>': '□', '\\<diamond>': '◇', '\\<turnstile>': '⊢', '\\<Turnstile>': '⊨', '\\<tturnstile>': '⊩', '\\<TTurnstile>': '⊫', '\\<stileturn>': '⊣', '\\<surd>': '√', '\\<le>': '≤', '\\<ge>': '≥', '\\<lless>': '≪', '\\<ggreater>': '≫', '\\<lesssim>': '≲', '\\<greatersim>': '≳', '\\<lessapprox>': '⪅', '\\<greaterapprox>': '⪆', '\\<in>': '∈', '\\<notin>': '∉', '\\<subset>': '⊂', '\\<supset>': '⊃', '\\<subseteq>': '⊆', '\\<supseteq>': '⊇', '\\<sqsubset>': '⊏', '\\<sqsupset>': '⊐', '\\<sqsubseteq>': '⊑', '\\<sqsupseteq>': '⊒', '\\<inter>': '∩', '\\<Inter>': '⋂', '\\<union>': '∪', '\\<Union>': '⋃', '\\<squnion>': '⊔', '\\<Squnion>': '⨆', '\\<sqinter>': '⊓', '\\<Sqinter>': '⨅', '\\<setminus>': '∖', '\\<propto>': '∝', '\\<uplus>': '⊎', '\\<Uplus>': '⨄', '\\<noteq>': '≠', '\\<sim>': '∼', '\\<doteq>': '≐', '\\<simeq>': '≃', '\\<approx>': '≈', '\\<asymp>': '≍', '\\<cong>': '≅', '\\<smile>': '⌣', '\\<equiv>': '≡', '\\<frown>': '⌢', '\\<Join>': '⋈', '\\<bowtie>': '⨝', '\\<prec>': '≺', '\\<succ>': '≻', '\\<preceq>': '≼', '\\<succeq>': '≽', '\\<parallel>': '∥', '\\<bar>': '¦', '\\<plusminus>': '±', '\\<minusplus>': '∓', '\\<times>': '×', '\\<div>': '÷', '\\<cdot>': '⋅', '\\<star>': '⋆', '\\<bullet>': '∙', '\\<circ>': '∘', '\\<dagger>': '†', '\\<ddagger>': '‡', '\\<lhd>': '⊲', '\\<rhd>': '⊳', '\\<unlhd>': '⊴', '\\<unrhd>': '⊵', '\\<triangleleft>': '◃', '\\<triangleright>': '▹', '\\<triangle>': '△', '\\<triangleq>': '≜', '\\<oplus>': '⊕', '\\<Oplus>': '⨁', '\\<otimes>': '⊗', '\\<Otimes>': '⨂', '\\<odot>': '⊙', '\\<Odot>': '⨀', '\\<ominus>': '⊖', '\\<oslash>': '⊘', '\\<dots>': '…', '\\<cdots>': '⋯', '\\<Sum>': '∑', '\\<Prod>': '∏', '\\<Coprod>': '∐', '\\<infinity>': '∞', '\\<integral>': '∫', '\\<ointegral>': '∮', '\\<clubsuit>': '♣', '\\<diamondsuit>': '♢', '\\<heartsuit>': '♡', '\\<spadesuit>': '♠', '\\<aleph>': 'ℵ', '\\<emptyset>': '∅', '\\<nabla>': '∇', '\\<partial>': '∂', '\\<flat>': '♭', '\\<natural>': '♮', '\\<sharp>': '♯', '\\<angle>': '∠', '\\<copyright>': '©', '\\<registered>': '®', '\\<hyphen>': '\xad', '\\<inverse>': '¯', '\\<onequarter>': '¼', '\\<onehalf>': '½', '\\<threequarters>': '¾', '\\<ordfeminine>': 'ª', '\\<ordmasculine>': 'º', '\\<section>': '§', '\\<paragraph>': '¶', '\\<exclamdown>': '¡', '\\<questiondown>': '¿', '\\<euro>': '€', '\\<pounds>': '£', '\\<yen>': '¥', '\\<cent>': '¢', '\\<currency>': '¤', '\\<degree>': '°', '\\<amalg>': '⨿', '\\<mho>': '℧', '\\<lozenge>': '◊', '\\<wp>': '℘', '\\<wrong>': '≀', '\\<struct>': '⋄', '\\<acute>': '´', '\\<index>': 'ı', '\\<dieresis>': '¨', '\\<cedilla>': '¸', '\\<hungarumlaut>': '˝', '\\<some>': 'ϵ', '\\<newline>': '⏎', '\\<open>': '‹', '\\<close>': '›', '\\<here>': '⌂', '\\<^sub>': '⇩', '\\<^sup>': '⇧', '\\<^bold>': '❙', '\\<^bsub>': '⇘', '\\<^esub>': '⇙', '\\<^bsup>': '⇗', '\\<^esup>': '⇖'}
      + lang_map = {'isabelle': isabelle_symbols, 'latex': latex_symbols}
  --
      - __init__()
      + filter(lexer, stream)
  }

  class KeywordCaseFilter {
      - __init__()
      + filter(lexer, stream)
  }

  class NameHighlightFilter {
      - __init__()
      + filter(lexer, stream)
  }

  class ErrorToken {
  }

  class RaiseOnErrorTokenFilter {
      - __init__()
      + filter(lexer, stream)
  }

  class VisibleWhitespaceFilter {
      - __init__()
      + filter(lexer, stream)
  }

  class GobbleFilter {
      - __init__()
      + gobble(value, left)
      + filter(lexer, stream)
  }

  class TokenMergeFilter {
      - __init__()
      + filter(lexer, stream)
  }

  class CodeTagFilter {
      - __init__()
      + filter(lexer, stream)
  }

  class SymbolFilter {
      + latex_symbols = {'\\alpha': 'α', '\\beta': 'β', '\\gamma': 'γ', '\\delta': 'δ', '\\varepsilon': 'ε', '\\zeta': 'ζ', '\\eta': 'η', '\\vartheta': 'θ', '\\iota': 'ι', '\\kappa': 'κ', '\\lambda': 'λ', '\\mu': 'μ', '\\nu': 'ν', '\\xi': 'ξ', '\\pi': 'π', '\\varrho': 'ρ', '\\sigma': 'σ', '\\tau': 'τ', '\\upsilon': 'υ', '\\varphi': 'φ', '\\chi': 'χ', '\\psi': 'ψ', '\\omega': 'ω', '\\Gamma': 'Γ', '\\Delta': 'Δ', '\\Theta': 'Θ', '\\Lambda': 'Λ', '\\Xi': 'Ξ', '\\Pi': 'Π', '\\Sigma': 'Σ', '\\Upsilon': 'Υ', '\\Phi': 'Φ', '\\Psi': 'Ψ', '\\Omega': 'Ω', '\\leftarrow': '←', '\\longleftarrow': '⟵', '\\rightarrow': '→', '\\longrightarrow': '⟶', '\\Leftarrow': '⇐', '\\Longleftarrow': '⟸', '\\Rightarrow': '⇒', '\\Longrightarrow': '⟹', '\\leftrightarrow': '↔', '\\longleftrightarrow': '⟷', '\\Leftrightarrow': '⇔', '\\Longleftrightarrow': '⟺', '\\mapsto': '↦', '\\longmapsto': '⟼', '\\relbar': '─', '\\Relbar': '═', '\\hookleftarrow': '↩', '\\hookrightarrow': '↪', '\\leftharpoondown': '↽', '\\rightharpoondown': '⇁', '\\leftharpoonup': '↼', '\\rightharpoonup': '⇀', '\\rightleftharpoons': '⇌', '\\leadsto': '↝', '\\downharpoonleft': '⇃', '\\downharpoonright': '⇂', '\\upharpoonleft': '↿', '\\upharpoonright': '↾', '\\restriction': '↾', '\\uparrow': '↑', '\\Uparrow': '⇑', '\\downarrow': '↓', '\\Downarrow': '⇓', '\\updownarrow': '↕', '\\Updownarrow': '⇕', '\\langle': '⟨', '\\rangle': '⟩', '\\lceil': '⌈', '\\rceil': '⌉', '\\lfloor': '⌊', '\\rfloor': '⌋', '\\flqq': '«', '\\frqq': '»', '\\bot': '⊥', '\\top': '⊤', '\\wedge': '∧', '\\bigwedge': '⋀', '\\vee': '∨', '\\bigvee': '⋁', '\\forall': '∀', '\\exists': '∃', '\\nexists': '∄', '\\neg': '¬', '\\Box': '□', '\\Diamond': '◇', '\\vdash': '⊢', '\\models': '⊨', '\\dashv': '⊣', '\\surd': '√', '\\le': '≤', '\\ge': '≥', '\\ll': '≪', '\\gg': '≫', '\\lesssim': '≲', '\\gtrsim': '≳', '\\lessapprox': '⪅', '\\gtrapprox': '⪆', '\\in': '∈', '\\notin': '∉', '\\subset': '⊂', '\\supset': '⊃', '\\subseteq': '⊆', '\\supseteq': '⊇', '\\sqsubset': '⊏', '\\sqsupset': '⊐', '\\sqsubseteq': '⊑', '\\sqsupseteq': '⊒', '\\cap': '∩', '\\bigcap': '⋂', '\\cup': '∪', '\\bigcup': '⋃', '\\sqcup': '⊔', '\\bigsqcup': '⨆', '\\sqcap': '⊓', '\\Bigsqcap': '⨅', '\\setminus': '∖', '\\propto': '∝', '\\uplus': '⊎', '\\bigplus': '⨄', '\\sim': '∼', '\\doteq': '≐', '\\simeq': '≃', '\\approx': '≈', '\\asymp': '≍', '\\cong': '≅', '\\equiv': '≡', '\\Join': '⋈', '\\bowtie': '⨝', '\\prec': '≺', '\\succ': '≻', '\\preceq': '≼', '\\succeq': '≽', '\\parallel': '∥', '\\mid': '¦', '\\pm': '±', '\\mp': '∓', '\\times': '×', '\\div': '÷', '\\cdot': '⋅', '\\star': '⋆', '\\circ': '∘', '\\dagger': '†', '\\ddagger': '‡', '\\lhd': '⊲', '\\rhd': '⊳', '\\unlhd': '⊴', '\\unrhd': '⊵', '\\triangleleft': '◃', '\\triangleright': '▹', '\\triangle': '△', '\\triangleq': '≜', '\\oplus': '⊕', '\\bigoplus': '⨁', '\\otimes': '⊗', '\\bigotimes': '⨂', '\\odot': '⊙', '\\bigodot': '⨀', '\\ominus': '⊖', '\\oslash': '⊘', '\\dots': '…', '\\cdots': '⋯', '\\sum': '∑', '\\prod': '∏', '\\coprod': '∐', '\\infty': '∞', '\\int': '∫', '\\oint': '∮', '\\clubsuit': '♣', '\\diamondsuit': '♢', '\\heartsuit': '♡', '\\spadesuit': '♠', '\\aleph': 'ℵ', '\\emptyset': '∅', '\\nabla': '∇', '\\partial': '∂', '\\flat': '♭', '\\natural': '♮', '\\sharp': '♯', '\\angle': '∠', '\\copyright': '©', '\\textregistered': '®', '\\textonequarter': '¼', '\\textonehalf': '½', '\\textthreequarters': '¾', '\\textordfeminine': 'ª', '\\textordmasculine': 'º', '\\euro': '€', '\\pounds': '£', '\\yen': '¥', '\\textcent': '¢', '\\textcurrency': '¤', '\\textdegree': '°'}
      + isabelle_symbols = {'\\<zero>': '𝟬', '\\<one>': '𝟭', '\\<two>': '𝟮', '\\<three>': '𝟯', '\\<four>': '𝟰', '\\<five>': '𝟱', '\\<six>': '𝟲', '\\<seven>': '𝟳', '\\<eight>': '𝟴', '\\<nine>': '𝟵', '\\<A>': '𝒜', '\\<B>': 'ℬ', '\\<C>': '𝒞', '\\<D>': '𝒟', '\\<E>': 'ℰ', '\\<F>': 'ℱ', '\\<G>': '𝒢', '\\<H>': 'ℋ', '\\<I>': 'ℐ', '\\<J>': '𝒥', '\\<K>': '𝒦', '\\<L>': 'ℒ', '\\<M>': 'ℳ', '\\<N>': '𝒩', '\\<O>': '𝒪', '\\<P>': '𝒫', '\\<Q>': '𝒬', '\\<R>': 'ℛ', '\\<S>': '𝒮', '\\<T>': '𝒯', '\\<U>': '𝒰', '\\<V>': '𝒱', '\\<W>': '𝒲', '\\<X>': '𝒳', '\\<Y>': '𝒴', '\\<Z>': '𝒵', '\\<a>': '𝖺', '\\<b>': '𝖻', '\\<c>': '𝖼', '\\<d>': '𝖽', '\\<e>': '𝖾', '\\<f>': '𝖿', '\\<g>': '𝗀', '\\<h>': '𝗁', '\\<i>': '𝗂', '\\<j>': '𝗃', '\\<k>': '𝗄', '\\<l>': '𝗅', '\\<m>': '𝗆', '\\<n>': '𝗇', '\\<o>': '𝗈', '\\<p>': '𝗉', '\\<q>': '𝗊', '\\<r>': '𝗋', '\\<s>': '𝗌', '\\<t>': '𝗍', '\\<u>': '𝗎', '\\<v>': '𝗏', '\\<w>': '𝗐', '\\<x>': '𝗑', '\\<y>': '𝗒', '\\<z>': '𝗓', '\\<AA>': '𝔄', '\\<BB>': '𝔅', '\\<CC>': 'ℭ', '\\<DD>': '𝔇', '\\<EE>': '𝔈', '\\<FF>': '𝔉', '\\<GG>': '𝔊', '\\<HH>': 'ℌ', '\\<II>': 'ℑ', '\\<JJ>': '𝔍', '\\<KK>': '𝔎', '\\<LL>': '𝔏', '\\<MM>': '𝔐', '\\<NN>': '𝔑', '\\<OO>': '𝔒', '\\<PP>': '𝔓', '\\<QQ>': '𝔔', '\\<RR>': 'ℜ', '\\<SS>': '𝔖', '\\<TT>': '𝔗', '\\<UU>': '𝔘', '\\<VV>': '𝔙', '\\<WW>': '𝔚', '\\<XX>': '𝔛', '\\<YY>': '𝔜', '\\<ZZ>': 'ℨ', '\\<aa>': '𝔞', '\\<bb>': '𝔟', '\\<cc>': '𝔠', '\\<dd>': '𝔡', '\\<ee>': '𝔢', '\\<ff>': '𝔣', '\\<gg>': '𝔤', '\\<hh>': '𝔥', '\\<ii>': '𝔦', '\\<jj>': '𝔧', '\\<kk>': '𝔨', '\\<ll>': '𝔩', '\\<mm>': '𝔪', '\\<nn>': '𝔫', '\\<oo>': '𝔬', '\\<pp>': '𝔭', '\\<qq>': '𝔮', '\\<rr>': '𝔯', '\\<ss>': '𝔰', '\\<tt>': '𝔱', '\\<uu>': '𝔲', '\\<vv>': '𝔳', '\\<ww>': '𝔴', '\\<xx>': '𝔵', '\\<yy>': '𝔶', '\\<zz>': '𝔷', '\\<alpha>': 'α', '\\<beta>': 'β', '\\<gamma>': 'γ', '\\<delta>': 'δ', '\\<epsilon>': 'ε', '\\<zeta>': 'ζ', '\\<eta>': 'η', '\\<theta>': 'θ', '\\<iota>': 'ι', '\\<kappa>': 'κ', '\\<lambda>': 'λ', '\\<mu>': 'μ', '\\<nu>': 'ν', '\\<xi>': 'ξ', '\\<pi>': 'π', '\\<rho>': 'ρ', '\\<sigma>': 'σ', '\\<tau>': 'τ', '\\<upsilon>': 'υ', '\\<phi>': 'φ', '\\<chi>': 'χ', '\\<psi>': 'ψ', '\\<omega>': 'ω', '\\<Gamma>': 'Γ', '\\<Delta>': 'Δ', '\\<Theta>': 'Θ', '\\<Lambda>': 'Λ', '\\<Xi>': 'Ξ', '\\<Pi>': 'Π', '\\<Sigma>': 'Σ', '\\<Upsilon>': 'Υ', '\\<Phi>': 'Φ', '\\<Psi>': 'Ψ', '\\<Omega>': 'Ω', '\\<bool>': '𝔹', '\\<complex>': 'ℂ', '\\<nat>': 'ℕ', '\\<rat>': 'ℚ', '\\<real>': 'ℝ', '\\<int>': 'ℤ', '\\<leftarrow>': '←', '\\<longleftarrow>': '⟵', '\\<rightarrow>': '→', '\\<longrightarrow>': '⟶', '\\<Leftarrow>': '⇐', '\\<Longleftarrow>': '⟸', '\\<Rightarrow>': '⇒', '\\<Longrightarrow>': '⟹', '\\<leftrightarrow>': '↔', '\\<longleftrightarrow>': '⟷', '\\<Leftrightarrow>': '⇔', '\\<Longleftrightarrow>': '⟺', '\\<mapsto>': '↦', '\\<longmapsto>': '⟼', '\\<midarrow>': '─', '\\<Midarrow>': '═', '\\<hookleftarrow>': '↩', '\\<hookrightarrow>': '↪', '\\<leftharpoondown>': '↽', '\\<rightharpoondown>': '⇁', '\\<leftharpoonup>': '↼', '\\<rightharpoonup>': '⇀', '\\<rightleftharpoons>': '⇌', '\\<leadsto>': '↝', '\\<downharpoonleft>': '⇃', '\\<downharpoonright>': '⇂', '\\<upharpoonleft>': '↿', '\\<upharpoonright>': '↾', '\\<restriction>': '↾', '\\<Colon>': '∷', '\\<up>': '↑', '\\<Up>': '⇑', '\\<down>': '↓', '\\<Down>': '⇓', '\\<updown>': '↕', '\\<Updown>': '⇕', '\\<langle>': '⟨', '\\<rangle>': '⟩', '\\<lceil>': '⌈', '\\<rceil>': '⌉', '\\<lfloor>': '⌊', '\\<rfloor>': '⌋', '\\<lparr>': '⦇', '\\<rparr>': '⦈', '\\<lbrakk>': '⟦', '\\<rbrakk>': '⟧', '\\<lbrace>': '⦃', '\\<rbrace>': '⦄', '\\<guillemotleft>': '«', '\\<guillemotright>': '»', '\\<bottom>': '⊥', '\\<top>': '⊤', '\\<and>': '∧', '\\<And>': '⋀', '\\<or>': '∨', '\\<Or>': '⋁', '\\<forall>': '∀', '\\<exists>': '∃', '\\<nexists>': '∄', '\\<not>': '¬', '\\<box>': '□', '\\<diamond>': '◇', '\\<turnstile>': '⊢', '\\<Turnstile>': '⊨', '\\<tturnstile>': '⊩', '\\<TTurnstile>': '⊫', '\\<stileturn>': '⊣', '\\<surd>': '√', '\\<le>': '≤', '\\<ge>': '≥', '\\<lless>': '≪', '\\<ggreater>': '≫', '\\<lesssim>': '≲', '\\<greatersim>': '≳', '\\<lessapprox>': '⪅', '\\<greaterapprox>': '⪆', '\\<in>': '∈', '\\<notin>': '∉', '\\<subset>': '⊂', '\\<supset>': '⊃', '\\<subseteq>': '⊆', '\\<supseteq>': '⊇', '\\<sqsubset>': '⊏', '\\<sqsupset>': '⊐', '\\<sqsubseteq>': '⊑', '\\<sqsupseteq>': '⊒', '\\<inter>': '∩', '\\<Inter>': '⋂', '\\<union>': '∪', '\\<Union>': '⋃', '\\<squnion>': '⊔', '\\<Squnion>': '⨆', '\\<sqinter>': '⊓', '\\<Sqinter>': '⨅', '\\<setminus>': '∖', '\\<propto>': '∝', '\\<uplus>': '⊎', '\\<Uplus>': '⨄', '\\<noteq>': '≠', '\\<sim>': '∼', '\\<doteq>': '≐', '\\<simeq>': '≃', '\\<approx>': '≈', '\\<asymp>': '≍', '\\<cong>': '≅', '\\<smile>': '⌣', '\\<equiv>': '≡', '\\<frown>': '⌢', '\\<Join>': '⋈', '\\<bowtie>': '⨝', '\\<prec>': '≺', '\\<succ>': '≻', '\\<preceq>': '≼', '\\<succeq>': '≽', '\\<parallel>': '∥', '\\<bar>': '¦', '\\<plusminus>': '±', '\\<minusplus>': '∓', '\\<times>': '×', '\\<div>': '÷', '\\<cdot>': '⋅', '\\<star>': '⋆', '\\<bullet>': '∙', '\\<circ>': '∘', '\\<dagger>': '†', '\\<ddagger>': '‡', '\\<lhd>': '⊲', '\\<rhd>': '⊳', '\\<unlhd>': '⊴', '\\<unrhd>': '⊵', '\\<triangleleft>': '◃', '\\<triangleright>': '▹', '\\<triangle>': '△', '\\<triangleq>': '≜', '\\<oplus>': '⊕', '\\<Oplus>': '⨁', '\\<otimes>': '⊗', '\\<Otimes>': '⨂', '\\<odot>': '⊙', '\\<Odot>': '⨀', '\\<ominus>': '⊖', '\\<oslash>': '⊘', '\\<dots>': '…', '\\<cdots>': '⋯', '\\<Sum>': '∑', '\\<Prod>': '∏', '\\<Coprod>': '∐', '\\<infinity>': '∞', '\\<integral>': '∫', '\\<ointegral>': '∮', '\\<clubsuit>': '♣', '\\<diamondsuit>': '♢', '\\<heartsuit>': '♡', '\\<spadesuit>': '♠', '\\<aleph>': 'ℵ', '\\<emptyset>': '∅', '\\<nabla>': '∇', '\\<partial>': '∂', '\\<flat>': '♭', '\\<natural>': '♮', '\\<sharp>': '♯', '\\<angle>': '∠', '\\<copyright>': '©', '\\<registered>': '®', '\\<hyphen>': '\xad', '\\<inverse>': '¯', '\\<onequarter>': '¼', '\\<onehalf>': '½', '\\<threequarters>': '¾', '\\<ordfeminine>': 'ª', '\\<ordmasculine>': 'º', '\\<section>': '§', '\\<paragraph>': '¶', '\\<exclamdown>': '¡', '\\<questiondown>': '¿', '\\<euro>': '€', '\\<pounds>': '£', '\\<yen>': '¥', '\\<cent>': '¢', '\\<currency>': '¤', '\\<degree>': '°', '\\<amalg>': '⨿', '\\<mho>': '℧', '\\<lozenge>': '◊', '\\<wp>': '℘', '\\<wrong>': '≀', '\\<struct>': '⋄', '\\<acute>': '´', '\\<index>': 'ı', '\\<dieresis>': '¨', '\\<cedilla>': '¸', '\\<hungarumlaut>': '˝', '\\<some>': 'ϵ', '\\<newline>': '⏎', '\\<open>': '‹', '\\<close>': '›', '\\<here>': '⌂', '\\<^sub>': '⇩', '\\<^sup>': '⇧', '\\<^bold>': '❙', '\\<^bsub>': '⇘', '\\<^esub>': '⇙', '\\<^bsup>': '⇗', '\\<^esup>': '⇖'}
      + lang_map = {'isabelle': isabelle_symbols, 'latex': latex_symbols}
  --
      - __init__()
      + filter(lexer, stream)
  }

  class KeywordCaseFilter {
      - __init__()
      + filter(lexer, stream)
  }

  class NameHighlightFilter {
      - __init__()
      + filter(lexer, stream)
  }

  class ErrorToken {
  }

  class RaiseOnErrorTokenFilter {
      - __init__()
      + filter(lexer, stream)
  }

  class VisibleWhitespaceFilter {
      - __init__()
      + filter(lexer, stream)
  }

  class GobbleFilter {
      - __init__()
      + gobble(value, left)
      + filter(lexer, stream)
  }

  class TokenMergeFilter {
      - __init__()
      + filter(lexer, stream)
  }

}

package formatters {
  class BBCodeFormatter {
      + name = 'BBCode'
      + aliases = ['bbcode', 'bb']
      + filenames = []
  --
      - __init__()
      + format_unencoded(tokensource, outfile)
  }

  class GroffFormatter {
      + name = 'groff'
      + aliases = ['groff', 'troff', 'roff']
      + filenames = []
  --
      - __init__()
      + format_unencoded(tokensource, outfile)
  }

  class HtmlFormatter {
      + name = 'HTML'
      + aliases = ['html']
      + filenames = ['*.html', '*.htm']
  --
      - __init__()
      + get_style_defs(arg = None)
      + get_token_style_defs(arg = None)
      + get_background_style_defs(arg = None)
      + get_linenos_style_defs()
      + get_css_prefix(arg)
      + wrap(source)
      + format_unencoded(tokensource, outfile)
  }

  class PilNotAvailable {
  }

  class FontNotFound {
  }

  class FontManager {
      - __init__(font_name, font_size = 14)
      + get_char_size()
      + get_text_size(text)
      + get_font(bold, oblique)
      + get_style(style)
  }

  class ImageFormatter {
      + name = 'img'
      + aliases = ['img', 'IMG', 'png']
      + filenames = ['*.png']
      + unicodeoutput = False
      + default_image_format = 'png'
  --
      - __init__()
      + get_style_defs(arg = '')
      + format(tokensource, outfile)
  }

  class GifImageFormatter {
      + name = 'img_gif'
      + aliases = ['gif']
      + filenames = ['*.gif']
      + default_image_format = 'gif'
  }

  class JpgImageFormatter {
      + name = 'img_jpg'
      + aliases = ['jpg', 'jpeg']
      + filenames = ['*.jpg']
      + default_image_format = 'jpeg'
  }

  class BmpImageFormatter {
      + name = 'img_bmp'
      + aliases = ['bmp', 'bitmap']
      + filenames = ['*.bmp']
      + default_image_format = 'bmp'
  }

  class IRCFormatter {
      + name = 'IRC'
      + aliases = ['irc', 'IRC']
      + filenames = []
  --
      - __init__()
      + format_unencoded(tokensource, outfile)
  }

  class LatexFormatter {
      + name = 'LaTeX'
      + aliases = ['latex', 'tex']
      + filenames = ['*.tex']
  --
      - __init__()
      + get_style_defs(arg = '')
      + format_unencoded(tokensource, outfile)
  }

  class LatexEmbeddedLexer {
      - __init__(left, right, lang)
      + get_tokens_unprocessed(text)
  }

  class NullFormatter {
      + name = 'Text only'
      + aliases = ['text', 'null']
      + filenames = ['*.txt']
  --
      + format(tokensource, outfile)
  }

  class RawTokenFormatter {
      + name = 'Raw tokens'
      + aliases = ['raw', 'tokens']
      + filenames = ['*.raw']
      + unicodeoutput = False
  --
      - __init__()
      + format(tokensource, outfile)
  }

  class TestcaseFormatter {
      + name = 'Testcase'
      + aliases = ['testcase']
  --
      - __init__()
      + format(tokensource, outfile)
  }

  class PangoMarkupFormatter {
      + name = 'Pango Markup'
      + aliases = ['pango', 'pangomarkup']
      + filenames = []
  --
      - __init__()
      + format_unencoded(tokensource, outfile)
  }

  class RtfFormatter {
      + name = 'RTF'
      + aliases = ['rtf']
      + filenames = ['*.rtf']
  --
      - __init__()
      + {static} hex_to_rtf_color(hex_color)
      + format_unencoded(tokensource, outfile)
  }

  class SvgFormatter {
      + name = 'SVG'
      + aliases = ['svg']
      + filenames = ['*.svg']
  --
      - __init__()
      + format_unencoded(tokensource, outfile)
  }

  class TerminalFormatter {
      + name = 'Terminal'
      + aliases = ['terminal', 'console']
      + filenames = []
  --
      - __init__()
      + format(tokensource, outfile)
      + format_unencoded(tokensource, outfile)
  }

  class EscapeSequence {
      - __init__(fg = None, bg = None, bold = False, underline = False, italic = False)
      + escape(attrs)
      + color_string()
      + true_color_string()
      + reset_string()
  }

  class Terminal256Formatter {
      + name = 'Terminal256'
      + aliases = ['terminal256', 'console256', '256']
      + filenames = []
  --
      - __init__()
      + format(tokensource, outfile)
      + format_unencoded(tokensource, outfile)
  }

  class TerminalTrueColorFormatter {
      + name = 'TerminalTrueColor'
      + aliases = ['terminal16m', 'console16m', '16m']
      + filenames = []
  }

  class BBCodeFormatter {
      + name = 'BBCode'
      + aliases = ['bbcode', 'bb']
      + filenames = []
  --
      - __init__()
      + format_unencoded(tokensource, outfile)
  }

  class GroffFormatter {
      + name = 'groff'
      + aliases = ['groff', 'troff', 'roff']
      + filenames = []
  --
      - __init__()
      + format_unencoded(tokensource, outfile)
  }

  class HtmlFormatter {
      + name = 'HTML'
      + aliases = ['html']
      + filenames = ['*.html', '*.htm']
  --
      - __init__()
      + get_style_defs(arg = None)
      + get_token_style_defs(arg = None)
      + get_background_style_defs(arg = None)
      + get_linenos_style_defs()
      + get_css_prefix(arg)
      + wrap(source)
      + format_unencoded(tokensource, outfile)
  }

  class PilNotAvailable {
  }

  class FontNotFound {
  }

  class FontManager {
      - __init__(font_name, font_size = 14)
      + get_char_size()
      + get_text_size(text)
      + get_font(bold, oblique)
      + get_style(style)
  }

  class ImageFormatter {
      + name = 'img'
      + aliases = ['img', 'IMG', 'png']
      + filenames = ['*.png']
      + unicodeoutput = False
      + default_image_format = 'png'
  --
      - __init__()
      + get_style_defs(arg = '')
      + format(tokensource, outfile)
  }

  class GifImageFormatter {
      + name = 'img_gif'
      + aliases = ['gif']
      + filenames = ['*.gif']
      + default_image_format = 'gif'
  }

  class JpgImageFormatter {
      + name = 'img_jpg'
      + aliases = ['jpg', 'jpeg']
      + filenames = ['*.jpg']
      + default_image_format = 'jpeg'
  }

  class BmpImageFormatter {
      + name = 'img_bmp'
      + aliases = ['bmp', 'bitmap']
      + filenames = ['*.bmp']
      + default_image_format = 'bmp'
  }

  class IRCFormatter {
      + name = 'IRC'
      + aliases = ['irc', 'IRC']
      + filenames = []
  --
      - __init__()
      + format_unencoded(tokensource, outfile)
  }

  class LatexFormatter {
      + name = 'LaTeX'
      + aliases = ['latex', 'tex']
      + filenames = ['*.tex']
  --
      - __init__()
      + get_style_defs(arg = '')
      + format_unencoded(tokensource, outfile)
  }

  class LatexEmbeddedLexer {
      - __init__(left, right, lang)
      + get_tokens_unprocessed(text)
  }

  class NullFormatter {
      + name = 'Text only'
      + aliases = ['text', 'null']
      + filenames = ['*.txt']
  --
      + format(tokensource, outfile)
  }

  class RawTokenFormatter {
      + name = 'Raw tokens'
      + aliases = ['raw', 'tokens']
      + filenames = ['*.raw']
      + unicodeoutput = False
  --
      - __init__()
      + format(tokensource, outfile)
  }

  class TestcaseFormatter {
      + name = 'Testcase'
      + aliases = ['testcase']
  --
      - __init__()
      + format(tokensource, outfile)
  }

  class PangoMarkupFormatter {
      + name = 'Pango Markup'
      + aliases = ['pango', 'pangomarkup']
      + filenames = []
  --
      - __init__()
      + format_unencoded(tokensource, outfile)
  }

  class RtfFormatter {
      + name = 'RTF'
      + aliases = ['rtf']
      + filenames = ['*.rtf']
  --
      - __init__()
      + {static} hex_to_rtf_color(hex_color)
      + format_unencoded(tokensource, outfile)
  }

  class SvgFormatter {
      + name = 'SVG'
      + aliases = ['svg']
      + filenames = ['*.svg']
  --
      - __init__()
      + format_unencoded(tokensource, outfile)
  }

  class TerminalFormatter {
      + name = 'Terminal'
      + aliases = ['terminal', 'console']
      + filenames = []
  --
      - __init__()
      + format(tokensource, outfile)
      + format_unencoded(tokensource, outfile)
  }

  class EscapeSequence {
      - __init__(fg = None, bg = None, bold = False, underline = False, italic = False)
      + escape(attrs)
      + color_string()
      + true_color_string()
      + reset_string()
  }

  class Terminal256Formatter {
      + name = 'Terminal256'
      + aliases = ['terminal256', 'console256', '256']
      + filenames = []
  --
      - __init__()
      + format(tokensource, outfile)
      + format_unencoded(tokensource, outfile)
  }

  class TerminalTrueColorFormatter {
      + name = 'TerminalTrueColor'
      + aliases = ['terminal16m', 'console16m', '16m']
      + filenames = []
  }

}

package lexers {
  class PythonLexer {
      + name = 'Python'
      + url = 'https://www.python.org'
      + aliases = ['python', 'py', 'sage', 'python3', 'py3', 'bazel', 'starlark']
      + filenames = ['*.py', '*.pyw', '*.pyi', '*.jy', '*.sage', '*.sc', 'SConstruct', 'SConscript', '*.bzl', 'BUCK', 'BUILD', 'BUILD.bazel', 'WORKSPACE', '*.tac']
      + mimetypes = ['text/x-python', 'application/x-python', 'text/x-python3', 'application/x-python3']
      + version_added = '0.10'
      + uni_name = f'[{uni.xid_start}][{uni.xid_continue}]*'
      + tokens = {'root': [('\\n', Whitespace), ('^(\\s*)([rRuUbB]{,2})("""(?:.|\\n)*?""")', bygroups(Whitespace, String.Affix, String.Doc)), ("^(\\s*)([rRuUbB]{,2})('''(?:.|\\n)*?''')", bygroups(Whitespace, String.Affix, String.Doc)), ('\\A#!.+$', Comment.Hashbang), ('#.*$', Comment.Single), ('\\\\\\n', Text), ('\\\\', Text), include('keywords'), include('soft-keywords'), ('(def)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Text), 'funcname'), ('(class)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Text), 'classname'), ('(from)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Text), 'fromimport'), ('(import)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Text), 'import'), include('expr')], 'expr': [('(?i)(rf|fr)(""")', bygroups(String.Affix, String.Double), combined('rfstringescape', 'tdqf')), ("(?i)(rf|fr)(''')", bygroups(String.Affix, String.Single), combined('rfstringescape', 'tsqf')), ('(?i)(rf|fr)(")', bygroups(String.Affix, String.Double), combined('rfstringescape', 'dqf')), ("(?i)(rf|fr)(')", bygroups(String.Affix, String.Single), combined('rfstringescape', 'sqf')), ('([fF])(""")', bygroups(String.Affix, String.Double), combined('fstringescape', 'tdqf')), ("([fF])(''')", bygroups(String.Affix, String.Single), combined('fstringescape', 'tsqf')), ('([fF])(")', bygroups(String.Affix, String.Double), combined('fstringescape', 'dqf')), ("([fF])(')", bygroups(String.Affix, String.Single), combined('fstringescape', 'sqf')), ('(?i)(rb|br|r)(""")', bygroups(String.Affix, String.Double), 'tdqs'), ("(?i)(rb|br|r)(''')", bygroups(String.Affix, String.Single), 'tsqs'), ('(?i)(rb|br|r)(")', bygroups(String.Affix, String.Double), 'dqs'), ("(?i)(rb|br|r)(')", bygroups(String.Affix, String.Single), 'sqs'), ('([uU]?)(""")', bygroups(String.Affix, String.Double), combined('stringescape', 'tdqs')), ("([uU]?)(''')", bygroups(String.Affix, String.Single), combined('stringescape', 'tsqs')), ('([uU]?)(")', bygroups(String.Affix, String.Double), combined('stringescape', 'dqs')), ("([uU]?)(')", bygroups(String.Affix, String.Single), combined('stringescape', 'sqs')), ('([bB])(""")', bygroups(String.Affix, String.Double), combined('bytesescape', 'tdqs')), ("([bB])(''')", bygroups(String.Affix, String.Single), combined('bytesescape', 'tsqs')), ('([bB])(")', bygroups(String.Affix, String.Double), combined('bytesescape', 'dqs')), ("([bB])(')", bygroups(String.Affix, String.Single), combined('bytesescape', 'sqs')), ('[^\\S\\n]+', Text), include('numbers'), ('!=|==|<<|>>|:=|[-~+/*%=<>&^|.]', Operator), ('[]{}:(),;[]', Punctuation), ('(in|is|and|or|not)\\b', Operator.Word), include('expr-keywords'), include('builtins'), include('magicfuncs'), include('magicvars'), include('name')], 'expr-inside-fstring': [('[{([]', Punctuation, 'expr-inside-fstring-inner'), ('(=\\s*)?(\\![sraf])?\\}', String.Interpol, '#pop'), ('(=\\s*)?(\\![sraf])?:', String.Interpol, '#pop'), ('\\s+', Whitespace), include('expr')], 'expr-inside-fstring-inner': [('[{([]', Punctuation, 'expr-inside-fstring-inner'), ('[])}]', Punctuation, '#pop'), ('\\s+', Whitespace), include('expr')], 'expr-keywords': [(words(('async for', 'await', 'else', 'for', 'if', 'lambda', 'yield', 'yield from'), suffix='\\b'), Keyword), (words(('True', 'False', 'None'), suffix='\\b'), Keyword.Constant)], 'keywords': [(words(('assert', 'async', 'await', 'break', 'continue', 'del', 'elif', 'else', 'except', 'finally', 'for', 'global', 'if', 'lambda', 'pass', 'raise', 'nonlocal', 'return', 'try', 'while', 'yield', 'yield from', 'as', 'with'), suffix='\\b'), Keyword), (words(('True', 'False', 'None'), suffix='\\b'), Keyword.Constant)], 'soft-keywords': [('(^[ \\t]*)(match|case)\\b(?![ \\t]*(?:[:,;=^&|@~)\\]}]|(?:' + '|'.join((k for k in keyword.kwlist if k[0].islower())) + ')\\b))', bygroups(Text, Keyword), 'soft-keywords-inner')], 'soft-keywords-inner': [('(\\s+)([^\\n_]*)(_\\b)', bygroups(Whitespace, using(this), Keyword)), default('#pop')], 'builtins': [(words(('__import__', 'abs', 'aiter', 'all', 'any', 'bin', 'bool', 'bytearray', 'breakpoint', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip'), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin), ('(?<!\\.)(self|Ellipsis|NotImplemented|cls)\\b', Name.Builtin.Pseudo), (words(('ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'EnvironmentError', 'Exception', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'VMSError', 'Warning', 'WindowsError', 'ZeroDivisionError', 'BlockingIOError', 'ChildProcessError', 'ConnectionError', 'BrokenPipeError', 'ConnectionAbortedError', 'ConnectionRefusedError', 'ConnectionResetError', 'FileExistsError', 'FileNotFoundError', 'InterruptedError', 'IsADirectoryError', 'NotADirectoryError', 'PermissionError', 'ProcessLookupError', 'TimeoutError', 'StopAsyncIteration', 'ModuleNotFoundError', 'RecursionError', 'EncodingWarning'), prefix='(?<!\\.)', suffix='\\b'), Name.Exception)], 'magicfuncs': [(words(('__abs__', '__add__', '__aenter__', '__aexit__', '__aiter__', '__and__', '__anext__', '__await__', '__bool__', '__bytes__', '__call__', '__complex__', '__contains__', '__del__', '__delattr__', '__delete__', '__delitem__', '__dir__', '__divmod__', '__enter__', '__eq__', '__exit__', '__float__', '__floordiv__', '__format__', '__ge__', '__get__', '__getattr__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__iand__', '__ifloordiv__', '__ilshift__', '__imatmul__', '__imod__', '__imul__', '__index__', '__init__', '__instancecheck__', '__int__', '__invert__', '__ior__', '__ipow__', '__irshift__', '__isub__', '__iter__', '__itruediv__', '__ixor__', '__le__', '__len__', '__length_hint__', '__lshift__', '__lt__', '__matmul__', '__missing__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__next__', '__or__', '__pos__', '__pow__', '__prepare__', '__radd__', '__rand__', '__rdivmod__', '__repr__', '__reversed__', '__rfloordiv__', '__rlshift__', '__rmatmul__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__set__', '__setattr__', '__setitem__', '__str__', '__sub__', '__subclasscheck__', '__truediv__', '__xor__'), suffix='\\b'), Name.Function.Magic)], 'magicvars': [(words(('__annotations__', '__bases__', '__class__', '__closure__', '__code__', '__defaults__', '__dict__', '__doc__', '__file__', '__func__', '__globals__', '__kwdefaults__', '__module__', '__mro__', '__name__', '__objclass__', '__qualname__', '__self__', '__slots__', '__weakref__'), suffix='\\b'), Name.Variable.Magic)], 'numbers': [('(\\d(?:_?\\d)*\\.(?:\\d(?:_?\\d)*)?|(?:\\d(?:_?\\d)*)?\\.\\d(?:_?\\d)*)([eE][+-]?\\d(?:_?\\d)*)?', Number.Float), ('\\d(?:_?\\d)*[eE][+-]?\\d(?:_?\\d)*j?', Number.Float), ('0[oO](?:_?[0-7])+', Number.Oct), ('0[bB](?:_?[01])+', Number.Bin), ('0[xX](?:_?[a-fA-F0-9])+', Number.Hex), ('\\d(?:_?\\d)*', Number.Integer)], 'name': [('@' + uni_name, Name.Decorator), ('@', Operator), (uni_name, Name)], 'funcname': [include('magicfuncs'), (uni_name, Name.Function, '#pop'), default('#pop')], 'classname': [(uni_name, Name.Class, '#pop')], 'import': [('(\\s+)(as)(\\s+)', bygroups(Text, Keyword, Text)), ('\\.', Name.Namespace), (uni_name, Name.Namespace), ('(\\s*)(,)(\\s*)', bygroups(Text, Operator, Text)), default('#pop')], 'fromimport': [('(\\s+)(import)\\b', bygroups(Text, Keyword.Namespace), '#pop'), ('\\.', Name.Namespace), ('None\\b', Keyword.Constant, '#pop'), (uni_name, Name.Namespace), default('#pop')], 'rfstringescape': [('\\{\\{', String.Escape), ('\\}\\}', String.Escape)], 'fstringescape': [include('rfstringescape'), include('stringescape')], 'bytesescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'stringescape': [('\\\\(N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})', String.Escape), include('bytesescape')], 'fstrings-single': fstring_rules(String.Single), 'fstrings-double': fstring_rules(String.Double), 'strings-single': innerstring_rules(String.Single), 'strings-double': innerstring_rules(String.Double), 'dqf': [('"', String.Double, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('fstrings-double')], 'sqf': [("'", String.Single, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('fstrings-single')], 'dqs': [('"', String.Double, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('strings-double')], 'sqs': [("'", String.Single, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('strings-single')], 'tdqf': [('"""', String.Double, '#pop'), include('fstrings-double'), ('\\n', String.Double)], 'tsqf': [("'''", String.Single, '#pop'), include('fstrings-single'), ('\\n', String.Single)], 'tdqs': [('"""', String.Double, '#pop'), include('strings-double'), ('\\n', String.Double)], 'tsqs': [("'''", String.Single, '#pop'), include('strings-single'), ('\\n', String.Single)]}
  --
      + innerstring_rules(ttype)
      + fstring_rules(ttype)
      + analyse_text(text)
  }

  class Python2Lexer {
      + name = 'Python 2.x'
      + url = 'https://www.python.org'
      + aliases = ['python2', 'py2']
      + filenames = []
      + mimetypes = ['text/x-python2', 'application/x-python2']
      + version_added = ''
      + tokens = {'root': [('\\n', Whitespace), ('^(\\s*)([rRuUbB]{,2})("""(?:.|\\n)*?""")', bygroups(Whitespace, String.Affix, String.Doc)), ("^(\\s*)([rRuUbB]{,2})('''(?:.|\\n)*?''')", bygroups(Whitespace, String.Affix, String.Doc)), ('[^\\S\\n]+', Text), ('\\A#!.+$', Comment.Hashbang), ('#.*$', Comment.Single), ('[]{}:(),;[]', Punctuation), ('\\\\\\n', Text), ('\\\\', Text), ('(in|is|and|or|not)\\b', Operator.Word), ('!=|==|<<|>>|[-~+/*%=<>&^|.]', Operator), include('keywords'), ('(def)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Text), 'funcname'), ('(class)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Text), 'classname'), ('(from)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Text), 'fromimport'), ('(import)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Text), 'import'), include('builtins'), include('magicfuncs'), include('magicvars'), include('backtick'), ('([rR]|[uUbB][rR]|[rR][uUbB])(""")', bygroups(String.Affix, String.Double), 'tdqs'), ("([rR]|[uUbB][rR]|[rR][uUbB])(''')", bygroups(String.Affix, String.Single), 'tsqs'), ('([rR]|[uUbB][rR]|[rR][uUbB])(")', bygroups(String.Affix, String.Double), 'dqs'), ("([rR]|[uUbB][rR]|[rR][uUbB])(')", bygroups(String.Affix, String.Single), 'sqs'), ('([uUbB]?)(""")', bygroups(String.Affix, String.Double), combined('stringescape', 'tdqs')), ("([uUbB]?)(''')", bygroups(String.Affix, String.Single), combined('stringescape', 'tsqs')), ('([uUbB]?)(")', bygroups(String.Affix, String.Double), combined('stringescape', 'dqs')), ("([uUbB]?)(')", bygroups(String.Affix, String.Single), combined('stringescape', 'sqs')), include('name'), include('numbers')], 'keywords': [(words(('assert', 'break', 'continue', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'global', 'if', 'lambda', 'pass', 'print', 'raise', 'return', 'try', 'while', 'yield', 'yield from', 'as', 'with'), suffix='\\b'), Keyword)], 'builtins': [(words(('__import__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'long', 'map', 'max', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'property', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip'), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin), ('(?<!\\.)(self|None|Ellipsis|NotImplemented|False|True|cls)\\b', Name.Builtin.Pseudo), (words(('ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'DeprecationWarning', 'EOFError', 'EnvironmentError', 'Exception', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'NotImplementedError', 'OSError', 'OverflowError', 'OverflowWarning', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'VMSError', 'Warning', 'WindowsError', 'ZeroDivisionError'), prefix='(?<!\\.)', suffix='\\b'), Name.Exception)], 'magicfuncs': [(words(('__abs__', '__add__', '__and__', '__call__', '__cmp__', '__coerce__', '__complex__', '__contains__', '__del__', '__delattr__', '__delete__', '__delitem__', '__delslice__', '__div__', '__divmod__', '__enter__', '__eq__', '__exit__', '__float__', '__floordiv__', '__ge__', '__get__', '__getattr__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__hex__', '__iadd__', '__iand__', '__idiv__', '__ifloordiv__', '__ilshift__', '__imod__', '__imul__', '__index__', '__init__', '__instancecheck__', '__int__', '__invert__', '__iop__', '__ior__', '__ipow__', '__irshift__', '__isub__', '__iter__', '__itruediv__', '__ixor__', '__le__', '__len__', '__long__', '__lshift__', '__lt__', '__missing__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__nonzero__', '__oct__', '__op__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rcmp__', '__rdiv__', '__rdivmod__', '__repr__', '__reversed__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__rop__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__set__', '__setattr__', '__setitem__', '__setslice__', '__str__', '__sub__', '__subclasscheck__', '__truediv__', '__unicode__', '__xor__'), suffix='\\b'), Name.Function.Magic)], 'magicvars': [(words(('__bases__', '__class__', '__closure__', '__code__', '__defaults__', '__dict__', '__doc__', '__file__', '__func__', '__globals__', '__metaclass__', '__module__', '__mro__', '__name__', '__self__', '__slots__', '__weakref__'), suffix='\\b'), Name.Variable.Magic)], 'numbers': [('(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?j?', Number.Float), ('\\d+[eE][+-]?[0-9]+j?', Number.Float), ('0[0-7]+j?', Number.Oct), ('0[bB][01]+', Number.Bin), ('0[xX][a-fA-F0-9]+', Number.Hex), ('\\d+L', Number.Integer.Long), ('\\d+j?', Number.Integer)], 'backtick': [('`.*?`', String.Backtick)], 'name': [('@[\\w.]+', Name.Decorator), ('[a-zA-Z_]\\w*', Name)], 'funcname': [include('magicfuncs'), ('[a-zA-Z_]\\w*', Name.Function, '#pop'), default('#pop')], 'classname': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'import': [('(?:[ \\t]|\\\\\\n)+', Text), ('as\\b', Keyword.Namespace), (',', Operator), ('[a-zA-Z_][\\w.]*', Name.Namespace), default('#pop')], 'fromimport': [('(?:[ \\t]|\\\\\\n)+', Text), ('import\\b', Keyword.Namespace, '#pop'), ('None\\b', Name.Builtin.Pseudo, '#pop'), ('[a-zA-Z_.][\\w.]*', Name.Namespace), default('#pop')], 'stringescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'strings-single': innerstring_rules(String.Single), 'strings-double': innerstring_rules(String.Double), 'dqs': [('"', String.Double, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('strings-double')], 'sqs': [("'", String.Single, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('strings-single')], 'tdqs': [('"""', String.Double, '#pop'), include('strings-double'), ('\\n', String.Double)], 'tsqs': [("'''", String.Single, '#pop'), include('strings-single'), ('\\n', String.Single)]}
  --
      + innerstring_rules(ttype)
      + analyse_text(text)
  }

  class PythonConsoleLexer {
      + name = 'Python console session'
      + aliases = ['pycon', 'python-console']
      + mimetypes = ['text/x-python-doctest']
      + url = 'https://python.org'
      + version_added = ''
  --
      - __init__()
  }

  class PythonTracebackLexer {
      + name = 'Python Traceback'
      + aliases = ['pytb', 'py3tb']
      + filenames = ['*.pytb', '*.py3tb']
      + mimetypes = ['text/x-python-traceback', 'text/x-python3-traceback']
      + url = 'https://python.org'
      + version_added = '1.0'
      + tokens = {'root': [('\\n', Whitespace), ('^(\\^C)?Traceback \\(most recent call last\\):\\n', Generic.Traceback, 'intb'), ('^During handling of the above exception, another exception occurred:\\n\\n', Generic.Traceback), ('^The above exception was the direct cause of the following exception:\\n\\n', Generic.Traceback), ('^(?=  File "[^"]+", line \\d+)', Generic.Traceback, 'intb'), ('^.*\\n', Other)], 'intb': [('^(  File )("[^"]+")(, line )(\\d+)(, in )(.+)(\\n)', bygroups(Text, Name.Builtin, Text, Number, Text, Name, Whitespace)), ('^(  File )("[^"]+")(, line )(\\d+)(\\n)', bygroups(Text, Name.Builtin, Text, Number, Whitespace)), ('^(    )(.+)(\\n)', bygroups(Whitespace, using(PythonLexer), Whitespace), 'markers'), ('^([ \\t]*)(\\.\\.\\.)(\\n)', bygroups(Whitespace, Comment, Whitespace)), ('^([^:]+)(: )(.+)(\\n)', bygroups(Generic.Error, Text, Name, Whitespace), '#pop'), ('^([a-zA-Z_][\\w.]*)(:?\\n)', bygroups(Generic.Error, Whitespace), '#pop'), default('#pop')], 'markers': [('^( {4,})([~^]+)(\\n)', bygroups(Whitespace, Punctuation.Marker, Whitespace), '#pop'), default('#pop')]}
  }

  class Python2TracebackLexer {
      + name = 'Python 2.x Traceback'
      + aliases = ['py2tb']
      + filenames = ['*.py2tb']
      + mimetypes = ['text/x-python2-traceback']
      + url = 'https://python.org'
      + version_added = '0.7'
      + tokens = {'root': [('^(\\^C)?(Traceback.*\\n)', bygroups(Text, Generic.Traceback), 'intb'), ('^(?=  File "[^"]+", line \\d+)', Generic.Traceback, 'intb'), ('^.*\\n', Other)], 'intb': [('^(  File )("[^"]+")(, line )(\\d+)(, in )(.+)(\\n)', bygroups(Text, Name.Builtin, Text, Number, Text, Name, Whitespace)), ('^(  File )("[^"]+")(, line )(\\d+)(\\n)', bygroups(Text, Name.Builtin, Text, Number, Whitespace)), ('^(    )(.+)(\\n)', bygroups(Text, using(Python2Lexer), Whitespace), 'marker'), ('^([ \\t]*)(\\.\\.\\.)(\\n)', bygroups(Text, Comment, Whitespace)), ('^([^:]+)(: )(.+)(\\n)', bygroups(Generic.Error, Text, Name, Whitespace), '#pop'), ('^([a-zA-Z_]\\w*)(:?\\n)', bygroups(Generic.Error, Whitespace), '#pop')], 'marker': [('( {4,})(\\^)', bygroups(Text, Punctuation.Marker), '#pop'), default('#pop')]}
  }

  class CythonLexer {
      + name = 'Cython'
      + url = 'https://cython.org'
      + aliases = ['cython', 'pyx', 'pyrex']
      + filenames = ['*.pyx', '*.pxd', '*.pxi']
      + mimetypes = ['text/x-cython', 'application/x-cython']
      + version_added = '1.1'
      + tokens = {'root': [('\\n', Whitespace), ('^(\\s*)("""(?:.|\\n)*?""")', bygroups(Whitespace, String.Doc)), ("^(\\s*)('''(?:.|\\n)*?''')", bygroups(Whitespace, String.Doc)), ('[^\\S\\n]+', Text), ('#.*$', Comment), ('[]{}:(),;[]', Punctuation), ('\\\\\\n', Whitespace), ('\\\\', Text), ('(in|is|and|or|not)\\b', Operator.Word), ('(<)([a-zA-Z0-9.?]+)(>)', bygroups(Punctuation, Keyword.Type, Punctuation)), ('!=|==|<<|>>|[-~+/*%=<>&^|.?]', Operator), ('(from)(\\d+)(<=)(\\s+)(<)(\\d+)(:)', bygroups(Keyword, Number.Integer, Operator, Name, Operator, Name, Punctuation)), include('keywords'), ('(def|property)(\\s+)', bygroups(Keyword, Text), 'funcname'), ('(cp?def)(\\s+)', bygroups(Keyword, Text), 'cdef'), ('(cdef)(:)', bygroups(Keyword, Punctuation)), ('(class|struct)(\\s+)', bygroups(Keyword, Text), 'classname'), ('(from)(\\s+)', bygroups(Keyword, Text), 'fromimport'), ('(c?import)(\\s+)', bygroups(Keyword, Text), 'import'), include('builtins'), include('backtick'), ('(?:[rR]|[uU][rR]|[rR][uU])"""', String, 'tdqs'), ("(?:[rR]|[uU][rR]|[rR][uU])'''", String, 'tsqs'), ('(?:[rR]|[uU][rR]|[rR][uU])"', String, 'dqs'), ("(?:[rR]|[uU][rR]|[rR][uU])'", String, 'sqs'), ('[uU]?"""', String, combined('stringescape', 'tdqs')), ("[uU]?'''", String, combined('stringescape', 'tsqs')), ('[uU]?"', String, combined('stringescape', 'dqs')), ("[uU]?'", String, combined('stringescape', 'sqs')), include('name'), include('numbers')], 'keywords': [(words(('assert', 'async', 'await', 'break', 'by', 'continue', 'ctypedef', 'del', 'elif', 'else', 'except', 'except?', 'exec', 'finally', 'for', 'fused', 'gil', 'global', 'if', 'include', 'lambda', 'nogil', 'pass', 'print', 'raise', 'return', 'try', 'while', 'yield', 'as', 'with'), suffix='\\b'), Keyword), ('(DEF|IF|ELIF|ELSE)\\b', Comment.Preproc)], 'builtins': [(words(('__import__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bint', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'long', 'map', 'max', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'property', 'Py_ssize_t', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'unsigned', 'vars', 'xrange', 'zip'), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin), ('(?<!\\.)(self|None|Ellipsis|NotImplemented|False|True|NULL)\\b', Name.Builtin.Pseudo), (words(('ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'DeprecationWarning', 'EOFError', 'EnvironmentError', 'Exception', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'OverflowWarning', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError'), prefix='(?<!\\.)', suffix='\\b'), Name.Exception)], 'numbers': [('(\\d+\\.?\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number.Float), ('0\\d+', Number.Oct), ('0[xX][a-fA-F0-9]+', Number.Hex), ('\\d+L', Number.Integer.Long), ('\\d+', Number.Integer)], 'backtick': [('`.*?`', String.Backtick)], 'name': [('@\\w+', Name.Decorator), ('[a-zA-Z_]\\w*', Name)], 'funcname': [('[a-zA-Z_]\\w*', Name.Function, '#pop')], 'cdef': [('(public|readonly|extern|api|inline)\\b', Keyword.Reserved), ('(struct|enum|union|class)\\b', Keyword), ('([a-zA-Z_]\\w*)(\\s*)(?=[(:#=]|$)', bygroups(Name.Function, Text), '#pop'), ('([a-zA-Z_]\\w*)(\\s*)(,)', bygroups(Name.Function, Text, Punctuation)), ('from\\b', Keyword, '#pop'), ('as\\b', Keyword), (':', Punctuation, '#pop'), ('(?=["\\\'])', Text, '#pop'), ('[a-zA-Z_]\\w*', Keyword.Type), ('.', Text)], 'classname': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'import': [('(\\s+)(as)(\\s+)', bygroups(Text, Keyword, Text)), ('[a-zA-Z_][\\w.]*', Name.Namespace), ('(\\s*)(,)(\\s*)', bygroups(Text, Operator, Text)), default('#pop')], 'fromimport': [('(\\s+)(c?import)\\b', bygroups(Text, Keyword), '#pop'), ('[a-zA-Z_.][\\w.]*', Name.Namespace), default('#pop')], 'stringescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'strings': [('%(\\([a-zA-Z0-9]+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[E-GXc-giorsux%]', String.Interpol), ('[^\\\\\\\'"%\\n]+', String), ('[\\\'"\\\\]', String), ('%', String)], 'nl': [('\\n', String)], 'dqs': [('"', String, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('strings')], 'sqs': [("'", String, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('strings')], 'tdqs': [('"""', String, '#pop'), include('strings'), include('nl')], 'tsqs': [("'''", String, '#pop'), include('strings'), include('nl')]}
  }

  class DgLexer {
      + name = 'dg'
      + aliases = ['dg']
      + filenames = ['*.dg']
      + mimetypes = ['text/x-dg']
      + url = 'http://pyos.github.io/dg'
      + version_added = '1.6'
      + tokens = {'root': [('\\s+', Text), ('#.*?$', Comment.Single), ('(?i)0b[01]+', Number.Bin), ('(?i)0o[0-7]+', Number.Oct), ('(?i)0x[0-9a-f]+', Number.Hex), ('(?i)[+-]?[0-9]+\\.[0-9]+(e[+-]?[0-9]+)?j?', Number.Float), ('(?i)[+-]?[0-9]+e[+-]?\\d+j?', Number.Float), ('(?i)[+-]?[0-9]+j?', Number.Integer), ("(?i)(br|r?b?)'''", String, combined('stringescape', 'tsqs', 'string')), ('(?i)(br|r?b?)"""', String, combined('stringescape', 'tdqs', 'string')), ("(?i)(br|r?b?)'", String, combined('stringescape', 'sqs', 'string')), ('(?i)(br|r?b?)"', String, combined('stringescape', 'dqs', 'string')), ("`\\w+'*`", Operator), ('\\b(and|in|is|or|where)\\b', Operator.Word), ('[!$%&*+\\-./:<-@\\\\^|~;,]+', Operator), (words(('bool', 'bytearray', 'bytes', 'classmethod', 'complex', 'dict', "dict'", 'float', 'frozenset', 'int', 'list', "list'", 'memoryview', 'object', 'property', 'range', 'set', "set'", 'slice', 'staticmethod', 'str', 'super', 'tuple', "tuple'", 'type'), prefix='(?<!\\.)', suffix="(?![\\'\\w])"), Name.Builtin), (words(('__import__', 'abs', 'all', 'any', 'bin', 'bind', 'chr', 'cmp', 'compile', 'complex', 'delattr', 'dir', 'divmod', 'drop', 'dropwhile', 'enumerate', 'eval', 'exhaust', 'filter', 'flip', 'foldl1?', 'format', 'fst', 'getattr', 'globals', 'hasattr', 'hash', 'head', 'hex', 'id', 'init', 'input', 'isinstance', 'issubclass', 'iter', 'iterate', 'last', 'len', 'locals', 'map', 'max', 'min', 'next', 'oct', 'open', 'ord', 'pow', 'print', 'repr', 'reversed', 'round', 'setattr', 'scanl1?', 'snd', 'sorted', 'sum', 'tail', 'take', 'takewhile', 'vars', 'zip'), prefix='(?<!\\.)', suffix="(?![\\'\\w])"), Name.Builtin), ("(?<!\\.)(self|Ellipsis|NotImplemented|None|True|False)(?!['\\w])", Name.Builtin.Pseudo), ("(?<!\\.)[A-Z]\\w*(Error|Exception|Warning)'*(?!['\\w])", Name.Exception), ("(?<!\\.)(Exception|GeneratorExit|KeyboardInterrupt|StopIteration|SystemExit)(?!['\\w])", Name.Exception), ("(?<![\\w.])(except|finally|for|if|import|not|otherwise|raise|subclass|while|with|yield)(?!['\\w])", Keyword.Reserved), ("[A-Z_]+'*(?!['\\w])", Name), ("[A-Z]\\w+'*(?!['\\w])", Keyword.Type), ("\\w+'*", Name), ('[()]', Punctuation), ('.', Error)], 'stringescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'string': [('%(\\(\\w+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[E-GXc-giorsux%]', String.Interpol), ('[^\\\\\\\'"%\\n]+', String), ('[\\\'"\\\\]', String), ('%', String), ('\\n', String)], 'dqs': [('"', String, '#pop')], 'sqs': [("'", String, '#pop')], 'tdqs': [('"""', String, '#pop')], 'tsqs': [("'''", String, '#pop')]}
  }

  class NumPyLexer {
      + name = 'NumPy'
      + url = 'https://numpy.org/'
      + aliases = ['numpy']
      + version_added = '0.10'
      + mimetypes = []
      + filenames = []
      + EXTRA_KEYWORDS = {'abs', 'absolute', 'accumulate', 'add', 'alen', 'all', 'allclose', 'alltrue', 'alterdot', 'amax', 'amin', 'angle', 'any', 'append', 'apply_along_axis', 'apply_over_axes', 'arange', 'arccos', 'arccosh', 'arcsin', 'arcsinh', 'arctan', 'arctan2', 'arctanh', 'argmax', 'argmin', 'argsort', 'argwhere', 'around', 'array', 'array2string', 'array_equal', 'array_equiv', 'array_repr', 'array_split', 'array_str', 'arrayrange', 'asanyarray', 'asarray', 'asarray_chkfinite', 'ascontiguousarray', 'asfarray', 'asfortranarray', 'asmatrix', 'asscalar', 'astype', 'atleast_1d', 'atleast_2d', 'atleast_3d', 'average', 'bartlett', 'base_repr', 'beta', 'binary_repr', 'bincount', 'binomial', 'bitwise_and', 'bitwise_not', 'bitwise_or', 'bitwise_xor', 'blackman', 'bmat', 'broadcast', 'byte_bounds', 'bytes', 'byteswap', 'c_', 'can_cast', 'ceil', 'choose', 'clip', 'column_stack', 'common_type', 'compare_chararrays', 'compress', 'concatenate', 'conj', 'conjugate', 'convolve', 'copy', 'corrcoef', 'correlate', 'cos', 'cosh', 'cov', 'cross', 'cumprod', 'cumproduct', 'cumsum', 'delete', 'deprecate', 'diag', 'diagflat', 'diagonal', 'diff', 'digitize', 'disp', 'divide', 'dot', 'dsplit', 'dstack', 'dtype', 'dump', 'dumps', 'ediff1d', 'empty', 'empty_like', 'equal', 'exp', 'expand_dims', 'expm1', 'extract', 'eye', 'fabs', 'fastCopyAndTranspose', 'fft', 'fftfreq', 'fftshift', 'fill', 'finfo', 'fix', 'flat', 'flatnonzero', 'flatten', 'fliplr', 'flipud', 'floor', 'floor_divide', 'fmod', 'frexp', 'fromarrays', 'frombuffer', 'fromfile', 'fromfunction', 'fromiter', 'frompyfunc', 'fromstring', 'generic', 'get_array_wrap', 'get_include', 'get_numarray_include', 'get_numpy_include', 'get_printoptions', 'getbuffer', 'getbufsize', 'geterr', 'geterrcall', 'geterrobj', 'getfield', 'gradient', 'greater', 'greater_equal', 'gumbel', 'hamming', 'hanning', 'histogram', 'histogram2d', 'histogramdd', 'hsplit', 'hstack', 'hypot', 'i0', 'identity', 'ifft', 'imag', 'index_exp', 'indices', 'inf', 'info', 'inner', 'insert', 'int_asbuffer', 'interp', 'intersect1d', 'intersect1d_nu', 'inv', 'invert', 'iscomplex', 'iscomplexobj', 'isfinite', 'isfortran', 'isinf', 'isnan', 'isneginf', 'isposinf', 'isreal', 'isrealobj', 'isscalar', 'issctype', 'issubclass_', 'issubdtype', 'issubsctype', 'item', 'itemset', 'iterable', 'ix_', 'kaiser', 'kron', 'ldexp', 'left_shift', 'less', 'less_equal', 'lexsort', 'linspace', 'load', 'loads', 'loadtxt', 'log', 'log10', 'log1p', 'log2', 'logical_and', 'logical_not', 'logical_or', 'logical_xor', 'logspace', 'lstsq', 'mat', 'matrix', 'max', 'maximum', 'maximum_sctype', 'may_share_memory', 'mean', 'median', 'meshgrid', 'mgrid', 'min', 'minimum', 'mintypecode', 'mod', 'modf', 'msort', 'multiply', 'nan', 'nan_to_num', 'nanargmax', 'nanargmin', 'nanmax', 'nanmin', 'nansum', 'ndenumerate', 'ndim', 'ndindex', 'negative', 'newaxis', 'newbuffer', 'newbyteorder', 'nonzero', 'not_equal', 'obj2sctype', 'ogrid', 'ones', 'ones_like', 'outer', 'permutation', 'piecewise', 'pinv', 'pkgload', 'place', 'poisson', 'poly', 'poly1d', 'polyadd', 'polyder', 'polydiv', 'polyfit', 'polyint', 'polymul', 'polysub', 'polyval', 'power', 'prod', 'product', 'ptp', 'put', 'putmask', 'r_', 'randint', 'random_integers', 'random_sample', 'ranf', 'rank', 'ravel', 'real', 'real_if_close', 'recarray', 'reciprocal', 'reduce', 'remainder', 'repeat', 'require', 'reshape', 'resize', 'restoredot', 'right_shift', 'rint', 'roll', 'rollaxis', 'roots', 'rot90', 'round', 'round_', 'row_stack', 's_', 'sample', 'savetxt', 'sctype2char', 'searchsorted', 'seed', 'select', 'set_numeric_ops', 'set_printoptions', 'set_string_function', 'setbufsize', 'setdiff1d', 'seterr', 'seterrcall', 'seterrobj', 'setfield', 'setflags', 'setmember1d', 'setxor1d', 'shape', 'show_config', 'shuffle', 'sign', 'signbit', 'sin', 'sinc', 'sinh', 'size', 'slice', 'solve', 'sometrue', 'sort', 'sort_complex', 'source', 'split', 'sqrt', 'square', 'squeeze', 'standard_normal', 'std', 'subtract', 'sum', 'svd', 'swapaxes', 'take', 'tan', 'tanh', 'tensordot', 'test', 'tile', 'tofile', 'tolist', 'tostring', 'trace', 'transpose', 'trapz', 'tri', 'tril', 'trim_zeros', 'triu', 'true_divide', 'typeDict', 'typename', 'uniform', 'union1d', 'unique', 'unique1d', 'unravel_index', 'unwrap', 'vander', 'var', 'vdot', 'vectorize', 'view', 'vonmises', 'vsplit', 'vstack', 'weibull', 'where', 'who', 'zeros', 'zeros_like'}
  --
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class ActionScriptLexer {
      + name = 'ActionScript'
      + aliases = ['actionscript', 'as']
      + filenames = ['*.as']
      + mimetypes = ['application/x-actionscript', 'text/x-actionscript', 'text/actionscript']
      + url = 'https://en.wikipedia.org/wiki/ActionScript'
      + version_added = '0.9'
      + flags = re.DOTALL
      + tokens = {'root': [('\\s+', Whitespace), ('//.*?\\n', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline), ('/(\\\\\\\\|\\\\[^\\\\]|[^/\\\\\\n])*/[gim]*', String.Regex), ('[~^*!%&<>|+=:;,/?\\\\-]+', Operator), ('[{}\\[\\]();.]+', Punctuation), (words(('case', 'default', 'for', 'each', 'in', 'while', 'do', 'break', 'return', 'continue', 'if', 'else', 'throw', 'try', 'catch', 'var', 'with', 'new', 'typeof', 'arguments', 'instanceof', 'this', 'switch'), suffix='\\b'), Keyword), (words(('class', 'public', 'final', 'internal', 'native', 'override', 'private', 'protected', 'static', 'import', 'extends', 'implements', 'interface', 'intrinsic', 'return', 'super', 'dynamic', 'function', 'const', 'get', 'namespace', 'package', 'set'), suffix='\\b'), Keyword.Declaration), ('(true|false|null|NaN|Infinity|-Infinity|undefined|Void)\\b', Keyword.Constant), (words(('Accessibility', 'AccessibilityProperties', 'ActionScriptVersion', 'ActivityEvent', 'AntiAliasType', 'ApplicationDomain', 'AsBroadcaster', 'Array', 'AsyncErrorEvent', 'AVM1Movie', 'BevelFilter', 'Bitmap', 'BitmapData', 'BitmapDataChannel', 'BitmapFilter', 'BitmapFilterQuality', 'BitmapFilterType', 'BlendMode', 'BlurFilter', 'Boolean', 'ByteArray', 'Camera', 'Capabilities', 'CapsStyle', 'Class', 'Color', 'ColorMatrixFilter', 'ColorTransform', 'ContextMenu', 'ContextMenuBuiltInItems', 'ContextMenuEvent', 'ContextMenuItem', 'ConvultionFilter', 'CSMSettings', 'DataEvent', 'Date', 'DefinitionError', 'DeleteObjectSample', 'Dictionary', 'DisplacmentMapFilter', 'DisplayObject', 'DisplacmentMapFilterMode', 'DisplayObjectContainer', 'DropShadowFilter', 'Endian', 'EOFError', 'Error', 'ErrorEvent', 'EvalError', 'Event', 'EventDispatcher', 'EventPhase', 'ExternalInterface', 'FileFilter', 'FileReference', 'FileReferenceList', 'FocusDirection', 'FocusEvent', 'Font', 'FontStyle', 'FontType', 'FrameLabel', 'FullScreenEvent', 'Function', 'GlowFilter', 'GradientBevelFilter', 'GradientGlowFilter', 'GradientType', 'Graphics', 'GridFitType', 'HTTPStatusEvent', 'IBitmapDrawable', 'ID3Info', 'IDataInput', 'IDataOutput', 'IDynamicPropertyOutputIDynamicPropertyWriter', 'IEventDispatcher', 'IExternalizable', 'IllegalOperationError', 'IME', 'IMEConversionMode', 'IMEEvent', 'int', 'InteractiveObject', 'InterpolationMethod', 'InvalidSWFError', 'InvokeEvent', 'IOError', 'IOErrorEvent', 'JointStyle', 'Key', 'Keyboard', 'KeyboardEvent', 'KeyLocation', 'LineScaleMode', 'Loader', 'LoaderContext', 'LoaderInfo', 'LoadVars', 'LocalConnection', 'Locale', 'Math', 'Matrix', 'MemoryError', 'Microphone', 'MorphShape', 'Mouse', 'MouseEvent', 'MovieClip', 'MovieClipLoader', 'Namespace', 'NetConnection', 'NetStatusEvent', 'NetStream', 'NewObjectSample', 'Number', 'Object', 'ObjectEncoding', 'PixelSnapping', 'Point', 'PrintJob', 'PrintJobOptions', 'PrintJobOrientation', 'ProgressEvent', 'Proxy', 'QName', 'RangeError', 'Rectangle', 'ReferenceError', 'RegExp', 'Responder', 'Sample', 'Scene', 'ScriptTimeoutError', 'Security', 'SecurityDomain', 'SecurityError', 'SecurityErrorEvent', 'SecurityPanel', 'Selection', 'Shape', 'SharedObject', 'SharedObjectFlushStatus', 'SimpleButton', 'Socket', 'Sound', 'SoundChannel', 'SoundLoaderContext', 'SoundMixer', 'SoundTransform', 'SpreadMethod', 'Sprite', 'StackFrame', 'StackOverflowError', 'Stage', 'StageAlign', 'StageDisplayState', 'StageQuality', 'StageScaleMode', 'StaticText', 'StatusEvent', 'String', 'StyleSheet', 'SWFVersion', 'SyncEvent', 'SyntaxError', 'System', 'TextColorType', 'TextField', 'TextFieldAutoSize', 'TextFieldType', 'TextFormat', 'TextFormatAlign', 'TextLineMetrics', 'TextRenderer', 'TextSnapshot', 'Timer', 'TimerEvent', 'Transform', 'TypeError', 'uint', 'URIError', 'URLLoader', 'URLLoaderDataFormat', 'URLRequest', 'URLRequestHeader', 'URLRequestMethod', 'URLStream', 'URLVariabeles', 'VerifyError', 'Video', 'XML', 'XMLDocument', 'XMLList', 'XMLNode', 'XMLNodeType', 'XMLSocket', 'XMLUI'), suffix='\\b'), Name.Builtin), (words(('decodeURI', 'decodeURIComponent', 'encodeURI', 'escape', 'eval', 'isFinite', 'isNaN', 'isXMLName', 'clearInterval', 'fscommand', 'getTimer', 'getURL', 'getVersion', 'parseFloat', 'parseInt', 'setInterval', 'trace', 'updateAfterEvent', 'unescape'), suffix='\\b'), Name.Function), ('[$a-zA-Z_]\\w*', Name.Other), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-f]+', Number.Hex), ('[0-9]+', Number.Integer), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single)]}
  --
      + analyse_text(text)
  }

  class ActionScript3Lexer {
      + name = 'ActionScript 3'
      + url = 'https://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/index.html'
      + aliases = ['actionscript3', 'as3']
      + filenames = ['*.as']
      + mimetypes = ['application/x-actionscript3', 'text/x-actionscript3', 'text/actionscript3']
      + version_added = '0.11'
      + identifier = '[$a-zA-Z_]\\w*'
      + typeidentifier = identifier + '(?:\\.<\\w+>)?'
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'root': [('\\s+', Whitespace), ('(function\\s+)(' + identifier + ')(\\s*)(\\()', bygroups(Keyword.Declaration, Name.Function, Text, Operator), 'funcparams'), ('(var|const)(\\s+)(' + identifier + ')(\\s*)(:)(\\s*)(' + typeidentifier + ')', bygroups(Keyword.Declaration, Whitespace, Name, Whitespace, Punctuation, Whitespace, Keyword.Type)), ('(import|package)(\\s+)((?:' + identifier + '|\\.)+)(\\s*)', bygroups(Keyword, Whitespace, Name.Namespace, Whitespace)), ('(new)(\\s+)(' + typeidentifier + ')(\\s*)(\\()', bygroups(Keyword, Whitespace, Keyword.Type, Whitespace, Operator)), ('//.*?\\n', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline), ('/(\\\\\\\\|\\\\[^\\\\]|[^\\\\\\n])*/[gisx]*', String.Regex), ('(\\.)(' + identifier + ')', bygroups(Operator, Name.Attribute)), ('(case|default|for|each|in|while|do|break|return|continue|if|else|throw|try|catch|with|new|typeof|arguments|instanceof|this|switch|import|include|as|is)\\b', Keyword), ('(class|public|final|internal|native|override|private|protected|static|import|extends|implements|interface|intrinsic|return|super|dynamic|function|const|get|namespace|package|set)\\b', Keyword.Declaration), ('(true|false|null|NaN|Infinity|-Infinity|undefined|void)\\b', Keyword.Constant), ('(decodeURI|decodeURIComponent|encodeURI|escape|eval|isFinite|isNaN|isXMLName|clearInterval|fscommand|getTimer|getURL|getVersion|isFinite|parseFloat|parseInt|setInterval|trace|updateAfterEvent|unescape)\\b', Name.Function), (identifier, Name), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-f]+', Number.Hex), ('[0-9]+', Number.Integer), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('[~^*!%&<>|+=:;,/?\\\\{}\\[\\]().-]+', Operator)], 'funcparams': [('\\s+', Whitespace), ('(\\s*)(\\.\\.\\.)?(' + identifier + ')(\\s*)(:)(\\s*)(' + typeidentifier + '|\\*)(\\s*)', bygroups(Whitespace, Punctuation, Name, Whitespace, Operator, Whitespace, Keyword.Type, Whitespace), 'defval'), ('\\)', Operator, 'type')], 'type': [('(\\s*)(:)(\\s*)(' + typeidentifier + '|\\*)', bygroups(Whitespace, Operator, Whitespace, Keyword.Type), '#pop:2'), ('\\s+', Text, '#pop:2'), default('#pop:2')], 'defval': [('(=)(\\s*)([^(),]+)(\\s*)(,?)', bygroups(Operator, Whitespace, using(this), Whitespace, Operator), '#pop'), (',', Operator, '#pop'), default('#pop')]}
  --
      + analyse_text(text)
  }

  class MxmlLexer {
      + flags = re.MULTILINE | re.DOTALL
      + name = 'MXML'
      + aliases = ['mxml']
      + filenames = ['*.mxml']
      + url = 'https://en.wikipedia.org/wiki/MXML'
      + version_added = '1.1'
      + tokens = {'root': [('[^<&]+', Text), ('&\\S*?;', Name.Entity), ('(\\<\\!\\[CDATA\\[)(.*?)(\\]\\]\\>)', bygroups(String, using(ActionScript3Lexer), String)), ('<!--', Comment, 'comment'), ('<\\?.*?\\?>', Comment.Preproc), ('<![^>]*>', Comment.Preproc), ('<\\s*[\\w:.-]+', Name.Tag, 'tag'), ('<\\s*/\\s*[\\w:.-]+\\s*>', Name.Tag)], 'comment': [('[^-]+', Comment), ('-->', Comment, '#pop'), ('-', Comment)], 'tag': [('\\s+', Whitespace), ('[\\w.:-]+\\s*=', Name.Attribute, 'attr'), ('/?\\s*>', Name.Tag, '#pop')], 'attr': [('\\s+', Whitespace), ('".*?"', String, '#pop'), ("'.*?'", String, '#pop'), ('[^\\s>]+', String, '#pop')]}
  }

  class AdaLexer {
      + name = 'Ada'
      + aliases = ['ada', 'ada95', 'ada2005']
      + filenames = ['*.adb', '*.ads', '*.ada']
      + mimetypes = ['text/x-ada']
      + url = 'https://www.adaic.org'
      + version_added = '1.3'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': [('[^\\S\\n]+', Text), ('--.*?\\n', Comment.Single), ('[^\\S\\n]+', Text), ('function|procedure|entry', Keyword.Declaration, 'subprogram'), ('(subtype|type)(\\s+)(\\w+)', bygroups(Keyword.Declaration, Text, Keyword.Type), 'type_def'), ('task|protected', Keyword.Declaration), ('(subtype)(\\s+)', bygroups(Keyword.Declaration, Text)), ('(end)(\\s+)', bygroups(Keyword.Reserved, Text), 'end'), ('(pragma)(\\s+)(\\w+)', bygroups(Keyword.Reserved, Text, Comment.Preproc)), ('(true|false|null)\\b', Keyword.Constant), (words(BUILTIN_LIST, suffix='\\b'), Keyword.Type), ('(and(\\s+then)?|in|mod|not|or(\\s+else)|rem)\\b', Operator.Word), ('generic|private', Keyword.Declaration), ('package', Keyword.Declaration, 'package'), ('array\\b', Keyword.Reserved, 'array_def'), ('(with|use)(\\s+)', bygroups(Keyword.Namespace, Text), 'import'), ('(\\w+)(\\s*)(:)(\\s*)(constant)', bygroups(Name.Constant, Text, Punctuation, Text, Keyword.Reserved)), ('<<\\w+>>', Name.Label), ('(\\w+)(\\s*)(:)(\\s*)(declare|begin|loop|for|while)', bygroups(Name.Label, Text, Punctuation, Text, Keyword.Reserved)), (words(KEYWORD_LIST, prefix='\\b', suffix='\\b'), Keyword.Reserved), ('"[^"]*"', String), include('attribute'), include('numbers'), ("'[^']'", String.Character), ('(\\w+)(\\s*|[(,])', bygroups(Name, using(this))), ("(<>|=>|:=|@|[\\[\\]]|[()|:;,.'])", Punctuation), ('[*<>+=/&-]', Operator), ('\\n+', Text)], 'numbers': [('[0-9_]+#[0-9a-f_\\.]+#', Number.Hex), ('[0-9_]+\\.[0-9_]*', Number.Float), ('[0-9_]+', Number.Integer)], 'attribute': [("(')(\\w+)", bygroups(Punctuation, Name.Attribute))], 'subprogram': [('\\(', Punctuation, ('#pop', 'formal_part')), (';', Punctuation, '#pop'), ('is\\b', Keyword.Reserved, '#pop'), ('"[^"]+"|\\w+', Name.Function), include('root')], 'end': [('(if|case|record|loop|select)', Keyword.Reserved), ('"[^"]+"|[\\w.]+', Name.Function), ('\\s+', Text), (';', Punctuation, '#pop')], 'type_def': [(';', Punctuation, '#pop'), ('\\(', Punctuation, 'formal_part'), ('\\[', Punctuation, 'formal_part'), ('with|and|use', Keyword.Reserved), ('array\\b', Keyword.Reserved, ('#pop', 'array_def')), ('record\\b', Keyword.Reserved, 'record_def'), ('(null record)(;)', bygroups(Keyword.Reserved, Punctuation), '#pop'), include('root')], 'array_def': [(';', Punctuation, '#pop'), ('(\\w+)(\\s+)(range)', bygroups(Keyword.Type, Text, Keyword.Reserved)), include('root')], 'record_def': [('end record', Keyword.Reserved, '#pop'), include('root')], 'import': [('[\\w.]+', Name, '#pop'), default('#pop')], 'formal_part': [('\\)', Punctuation, '#pop'), ('\\]', Punctuation, '#pop'), ('\\w+', Name.Variable), (',|:[^=]', Punctuation), ('(in|not|null|out|access)\\b', Keyword.Reserved), include('root')], 'package': [('body', Keyword.Declaration), ('is\\s+new|renames', Keyword.Reserved), ('is', Keyword.Reserved, '#pop'), (';', Punctuation, '#pop'), ('\\(', Punctuation, 'package_instantiation'), ('([\\w.]+)', Name.Class), include('root')], 'package_instantiation': [('("[^"]+"|\\w+)(\\s+)(=>)', bygroups(Name.Variable, Text, Punctuation)), ('[\\w.\\\'"]', Text), ('\\)', Punctuation, '#pop'), include('root')]}
  }

  class GAPLexer {
      + name = 'GAP'
      + url = 'https://www.gap-system.org'
      + aliases = ['gap']
      + filenames = ['*.g', '*.gd', '*.gi', '*.gap']
      + version_added = '2.0'
      + tokens = {'root': [('#.*$', Comment.Single), ('"(?:[^"\\\\]|\\\\.)*"', String), ('\\(|\\)|\\[|\\]|\\{|\\}', Punctuation), ('(?x)\\b(?:\n                if|then|elif|else|fi|\n                for|while|do|od|\n                repeat|until|\n                break|continue|\n                function|local|return|end|\n                rec|\n                quit|QUIT|\n                IsBound|Unbind|\n                TryNextMethod|\n                Info|Assert\n              )\\b', Keyword), ('(?x)\\b(?:\n                true|false|fail|infinity\n              )\\b', Name.Constant), ('(?x)\\b(?:\n                (Declare|Install)([A-Z][A-Za-z]+)|\n                   BindGlobal|BIND_GLOBAL\n              )\\b', Name.Builtin), ('\\.|,|:=|;|=|\\+|-|\\*|/|\\^|>|<', Operator), ('(?x)\\b(?:\n                and|or|not|mod|in\n              )\\b', Operator.Word), ('(?x)\n              (?:\\w+|`[^`]*`)\n              (?:::\\w+|`[^`]*`)*', Name.Variable), ('[0-9]+(?:\\.[0-9]*)?(?:e[0-9]+)?', Number), ('\\.[0-9]+(?:e[0-9]+)?', Number), ('.', Text)]}
  --
      + analyse_text(text)
  }

  class GAPConsoleLexer {
      + name = 'GAP session'
      + aliases = ['gap-console', 'gap-repl']
      + filenames = ['*.tst']
      + url = 'https://www.gap-system.org'
      + version_added = '2.14'
  --
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class MathematicaLexer {
      + name = 'Mathematica'
      + url = 'http://www.wolfram.com/mathematica/'
      + aliases = ['mathematica', 'mma', 'nb']
      + filenames = ['*.nb', '*.cdf', '*.nbp', '*.ma']
      + mimetypes = ['application/mathematica', 'application/vnd.wolfram.mathematica', 'application/vnd.wolfram.mathematica.package', 'application/vnd.wolfram.cdf']
      + version_added = '2.0'
      + operators = (';;', '=', '=.', '!===', ':=', '->', ':>', '/.', '+', '-', '*', '/', '^', '&&', '||', '!', '<>', '|', '/;', '?', '@', '//', '/@', '@@', '@@@', '~~', '===', '&', '<', '>', '<=', '>=')
      + punctuation = (',', ';', '(', ')', '[', ']', '{', '}')
      + tokens = {'root': [('(?s)\\(\\*.*?\\*\\)', Comment), ('([a-zA-Z]+[A-Za-z0-9]*`)', Name.Namespace), ('([A-Za-z0-9]*_+[A-Za-z0-9]*)', Name.Variable), ('#\\d*', Name.Variable), ('([a-zA-Z]+[a-zA-Z0-9]*)', Name), ('-?\\d+\\.\\d*', Number.Float), ('-?\\d*\\.\\d+', Number.Float), ('-?\\d+', Number.Integer), (words(operators), Operator), (words(punctuation), Punctuation), ('".*?"', String), ('\\s+', Text.Whitespace)]}
  }

  class MuPADLexer {
      + name = 'MuPAD'
      + url = 'http://www.mupad.com'
      + aliases = ['mupad']
      + filenames = ['*.mu']
      + version_added = '0.8'
      + tokens = {'root': [('//.*?$', Comment.Single), ('/\\*', Comment.Multiline, 'comment'), ('"(?:[^"\\\\]|\\\\.)*"', String), ('\\(|\\)|\\[|\\]|\\{|\\}', Punctuation), ('(?x)\\b(?:\n                next|break|end|\n                axiom|end_axiom|category|end_category|domain|end_domain|inherits|\n                if|%if|then|elif|else|end_if|\n                case|of|do|otherwise|end_case|\n                while|end_while|\n                repeat|until|end_repeat|\n                for|from|to|downto|step|end_for|\n                proc|local|option|save|begin|end_proc|\n                delete|frame\n              )\\b', Keyword), ('(?x)\\b(?:\n                DOM_ARRAY|DOM_BOOL|DOM_COMPLEX|DOM_DOMAIN|DOM_EXEC|DOM_EXPR|\n                DOM_FAIL|DOM_FLOAT|DOM_FRAME|DOM_FUNC_ENV|DOM_HFARRAY|DOM_IDENT|\n                DOM_INT|DOM_INTERVAL|DOM_LIST|DOM_NIL|DOM_NULL|DOM_POLY|DOM_PROC|\n                DOM_PROC_ENV|DOM_RAT|DOM_SET|DOM_STRING|DOM_TABLE|DOM_VAR\n              )\\b', Name.Class), ('(?x)\\b(?:\n                PI|EULER|E|CATALAN|\n                NIL|FAIL|undefined|infinity|\n                TRUE|FALSE|UNKNOWN\n              )\\b', Name.Constant), ('\\b(?:dom|procname)\\b', Name.Builtin.Pseudo), ("\\.|,|:|;|=|\\+|-|\\*|/|\\^|@|>|<|\\$|\\||!|\\'|%|~=", Operator), ('(?x)\\b(?:\n                and|or|not|xor|\n                assuming|\n                div|mod|\n                union|minus|intersect|in|subset\n              )\\b', Operator.Word), ('\\b(?:I|RDN_INF|RD_NINF|RD_NAN)\\b', Number), ('(?x)\n              ((?:[a-zA-Z_#][\\w#]*|`[^`]*`)\n              (?:::[a-zA-Z_#][\\w#]*|`[^`]*`)*)(\\s*)([(])', bygroups(Name.Function, Text, Punctuation)), ('(?x)\n              (?:[a-zA-Z_#][\\w#]*|`[^`]*`)\n              (?:::[a-zA-Z_#][\\w#]*|`[^`]*`)*', Name.Variable), ('[0-9]+(?:\\.[0-9]*)?(?:e[0-9]+)?', Number), ('\\.[0-9]+(?:e[0-9]+)?', Number), ('\\s+', Whitespace), ('.', Text)], 'comment': [('[^/*]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  }

  class BCLexer {
      + name = 'BC'
      + url = 'https://www.gnu.org/software/bc/'
      + aliases = ['bc']
      + filenames = ['*.bc']
      + version_added = '2.1'
      + tokens = {'root': [('/\\*', Comment.Multiline, 'comment'), ('"(?:[^"\\\\]|\\\\.)*"', String), ('[{}();,]', Punctuation), (words(('if', 'else', 'while', 'for', 'break', 'continue', 'halt', 'return', 'define', 'auto', 'print', 'read', 'length', 'scale', 'sqrt', 'limits', 'quit', 'warranty'), suffix='\\b'), Keyword), ('\\+\\+|--|\\|\\||&&|([-<>+*%\\^/!=])=?', Operator), ('[0-9]+(\\.[0-9]*)?', Number), ('\\.[0-9]+', Number), ('.', Text)], 'comment': [('[^*/]+', Comment.Multiline), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  }

  class AmbientTalkLexer {
      + name = 'AmbientTalk'
      + url = 'https://code.google.com/p/ambienttalk'
      + filenames = ['*.at']
      + aliases = ['ambienttalk', 'ambienttalk/2', 'at']
      + mimetypes = ['text/x-ambienttalk']
      + version_added = '2.0'
      + flags = re.MULTILINE | re.DOTALL
      + builtin = words(('if:', 'then:', 'else:', 'when:', 'whenever:', 'discovered:', 'disconnected:', 'reconnected:', 'takenOffline:', 'becomes:', 'export:', 'as:', 'object:', 'actor:', 'mirror:', 'taggedAs:', 'mirroredBy:', 'is:'))
      + tokens = {'root': [('\\s+', Whitespace), ('//.*?\\n', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline), ('(def|deftype|import|alias|exclude)\\b', Keyword), (builtin, Name.Builtin), ('(true|false|nil)\\b', Keyword.Constant), ('(~|lobby|jlobby|/)\\.', Keyword.Constant, 'namespace'), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('\\|', Punctuation, 'arglist'), ('<:|[*^!%&<>+=,./?-]|:=', Operator), ('`[a-zA-Z_]\\w*', String.Symbol), ('[a-zA-Z_]\\w*:', Name.Function), ('[{}()\\[\\];`]', Punctuation), ('(self|super)\\b', Name.Variable.Instance), ('[a-zA-Z_]\\w*', Name.Variable), ('@[a-zA-Z_]\\w*', Name.Class), ('@\\[', Name.Class, 'annotations'), include('numbers')], 'numbers': [('(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number.Float), ('\\d+', Number.Integer)], 'namespace': [('[a-zA-Z_]\\w*\\.', Name.Namespace), ('[a-zA-Z_]\\w*:', Name.Function, '#pop'), ('[a-zA-Z_]\\w*(?!\\.)', Name.Function, '#pop')], 'annotations': [('(.*?)\\]', Name.Class, '#pop')], 'arglist': [('\\|', Punctuation, '#pop'), ('(\\s*)(,)(\\s*)', bygroups(Whitespace, Punctuation, Whitespace)), ('[a-zA-Z_]\\w*', Name.Variable)]}
  }

  class AMDGPULexer {
      + name = 'AMDGPU'
      + aliases = ['amdgpu']
      + filenames = ['*.isa']
      + url = 'https://gpuopen.com/amd-isa-documentation'
      + version_added = '2.8'
      + flags = re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('[\\r\\n]+', Text), ('(([a-z_0-9])*:([a-z_0-9])*)', Name.Attribute), ('(\\[|\\]|\\(|\\)|,|\\:|\\&)', Text), ('([;#]|//).*?\\n', Comment.Single), ('((s_)?(scratch|ds|buffer|flat|image)_[a-z0-9_]+)', Keyword.Reserved), ('(_lo|_hi)', Name.Variable), ('(vmcnt|lgkmcnt|expcnt)', Name.Attribute), ('(attr[0-9].[a-z])', Name.Attribute), (words(('op', 'vaddr', 'vdata', 'off', 'soffset', 'srsrc', 'format', 'offset', 'offen', 'idxen', 'glc', 'dlc', 'slc', 'tfe', 'lds', 'lit', 'unorm'), suffix='\\b'), Name.Attribute), ('(label_[a-z0-9]+)', Keyword), ('(_L[0-9]*)', Name.Variable), ('(s|v)_[a-z0-9_]+', Keyword), ('(v[0-9.]+|vcc|exec|v)', Name.Variable), ('s[0-9.]+|s', Name.Variable), ('[0-9]+\\.[^0-9]+', Number.Float), ('(0[xX][a-z0-9]+)|([0-9]+)', Number.Integer)]}
  }

  class AmplLexer {
      + name = 'Ampl'
      + url = 'http://ampl.com/'
      + aliases = ['ampl']
      + filenames = ['*.run']
      + version_added = '2.2'
      + tokens = {'root': [('\\n', Text), ('\\s+', Whitespace), ('#.*?\\n', Comment.Single), ('/[*](.|\\n)*?[*]/', Comment.Multiline), (words(('call', 'cd', 'close', 'commands', 'data', 'delete', 'display', 'drop', 'end', 'environ', 'exit', 'expand', 'include', 'load', 'model', 'objective', 'option', 'problem', 'purge', 'quit', 'redeclare', 'reload', 'remove', 'reset', 'restore', 'shell', 'show', 'solexpand', 'solution', 'solve', 'update', 'unload', 'xref', 'coeff', 'coef', 'cover', 'obj', 'interval', 'default', 'from', 'to', 'to_come', 'net_in', 'net_out', 'dimen', 'dimension', 'check', 'complements', 'write', 'function', 'pipe', 'format', 'if', 'then', 'else', 'in', 'while', 'repeat', 'for'), suffix='\\b'), Keyword.Reserved), ('(integer|binary|symbolic|ordered|circular|reversed|INOUT|IN|OUT|LOCAL)', Keyword.Type), ('\\".*?\\"', String.Double), ("\\'.*?\\'", String.Single), ('[()\\[\\]{},;:]+', Punctuation), ('\\b(\\w+)(\\.)(astatus|init0|init|lb0|lb1|lb2|lb|lrc|lslack|rc|relax|slack|sstatus|status|ub0|ub1|ub2|ub|urc|uslack|val)', bygroups(Name.Variable, Punctuation, Keyword.Reserved)), ('(set|param|var|arc|minimize|maximize|subject to|s\\.t\\.|subj to|node|table|suffix|read table|write table)(\\s+)(\\w+)', bygroups(Keyword.Declaration, Whitespace, Name.Variable)), ('(param)(\\s*)(:)(\\s*)(\\w+)(\\s*)(:)(\\s*)((\\w|\\s)+)', bygroups(Keyword.Declaration, Whitespace, Punctuation, Whitespace, Name.Variable, Whitespace, Punctuation, Whitespace, Name.Variable)), ('(let|fix|unfix)(\\s*)((?:\\{.*\\})?)(\\s*)(\\w+)', bygroups(Keyword.Declaration, Whitespace, using(this), Whitespace, Name.Variable)), (words(('abs', 'acos', 'acosh', 'alias', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'ctime', 'cos', 'exp', 'floor', 'log', 'log10', 'max', 'min', 'precision', 'round', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'time', 'trunc', 'Beta', 'Cauchy', 'Exponential', 'Gamma', 'Irand224', 'Normal', 'Normal01', 'Poisson', 'Uniform', 'Uniform01', 'num', 'num0', 'ichar', 'char', 'length', 'substr', 'sprintf', 'match', 'sub', 'gsub', 'print', 'printf', 'next', 'nextw', 'prev', 'prevw', 'first', 'last', 'ord', 'ord0', 'card', 'arity', 'indexarity'), prefix='\\b', suffix='\\b'), Name.Builtin), ('(\\+|\\-|\\*|/|\\*\\*|=|<=|>=|==|\\||\\^|<|>|\\!|\\.\\.|:=|\\&|\\!=|<<|>>)', Operator), (words(('or', 'exists', 'forall', 'and', 'in', 'not', 'within', 'union', 'diff', 'difference', 'symdiff', 'inter', 'intersect', 'intersection', 'cross', 'setof', 'by', 'less', 'sum', 'prod', 'product', 'div', 'mod'), suffix='\\b'), Keyword.Reserved), ('(\\d+\\.(?!\\.)\\d*|\\.(?!.)\\d+)([eE][+-]?\\d+)?', Number.Float), ('\\d+([eE][+-]?\\d+)?', Number.Integer), ('[+-]?Infinity', Number.Integer), ('(\\w+|(\\.(?!\\.)))', Text)]}
  }

  class apdlexer {
      + name = 'ANSYS parametric design language'
      + aliases = ['ansys', 'apdl']
      + filenames = ['*.ans']
      + url = 'https://www.ansys.com'
      + version_added = '2.9'
      + flags = re.IGNORECASE
      + elafunb = ('SURF152', 'SURF153', 'SURF154', 'SURF156', 'SHELL157', 'SURF159', 'LINK160', 'BEAM161', 'PLANE162', 'SHELL163', 'SOLID164', 'COMBI165', 'MASS166', 'LINK167', 'SOLID168', 'TARGE169', 'TARGE170', 'CONTA171', 'CONTA172', 'CONTA173', 'CONTA174', 'CONTA175', 'CONTA176', 'CONTA177', 'CONTA178', 'PRETS179', 'LINK180', 'SHELL181', 'PLANE182', 'PLANE183', 'MPC184', 'SOLID185', 'SOLID186', 'SOLID187', 'BEAM188', 'BEAM189', 'SOLSH190', 'INTER192', 'INTER193', 'INTER194', 'INTER195', 'MESH200', 'FOLLW201', 'INTER202', 'INTER203', 'INTER204', 'INTER205', 'SHELL208', 'SHELL209', 'CPT212', 'CPT213', 'COMBI214', 'CPT215', 'CPT216', 'CPT217', 'FLUID220', 'FLUID221', 'PLANE223', 'SOLID226', 'SOLID227', 'PLANE230', 'SOLID231', 'SOLID232', 'PLANE233', 'SOLID236', 'SOLID237', 'PLANE238', 'SOLID239', 'SOLID240', 'HSFLD241', 'HSFLD242', 'SURF251', 'SURF252', 'REINF263', 'REINF264', 'REINF265', 'SOLID272', 'SOLID273', 'SOLID278', 'SOLID279', 'SHELL281', 'SOLID285', 'PIPE288', 'PIPE289', 'ELBOW290', 'USER300', 'BEAM3', 'BEAM4', 'BEAM23', 'BEAM24', 'BEAM44', 'BEAM54', 'COMBIN7', 'FLUID79', 'FLUID80', 'FLUID81', 'FLUID141', 'FLUID142', 'INFIN9', 'INFIN47', 'PLANE13', 'PLANE25', 'PLANE42', 'PLANE53', 'PLANE67', 'PLANE82', 'PLANE83', 'PLANE145', 'PLANE146', 'CONTAC12', 'CONTAC52', 'LINK1', 'LINK8', 'LINK10', 'LINK32', 'PIPE16', 'PIPE17', 'PIPE18', 'PIPE20', 'PIPE59', 'PIPE60', 'SHELL41', 'SHELL43', 'SHELL57', 'SHELL63', 'SHELL91', 'SHELL93', 'SHELL99', 'SHELL150', 'SOLID5', 'SOLID45', 'SOLID46', 'SOLID65', 'SOLID69', 'SOLID92', 'SOLID95', 'SOLID117', 'SOLID127', 'SOLID128', 'SOLID147', 'SOLID148', 'SOLID191', 'VISCO88', 'VISCO89', 'VISCO106', 'VISCO107', 'VISCO108', 'TRANS109')
      + elafunc = ('PGRAPH', '/VT', 'VTIN', 'VTRFIL', 'VTTEMP', 'PGRSET', 'VTCLR', 'VTMETH', 'VTRSLT', 'VTVMOD', 'PGSELE', 'VTDISC', 'VTMP', 'VTSEC', 'PGWRITE', 'VTEVAL', 'VTOP', 'VTSFE', 'POUTRES', 'VTFREQ', 'VTPOST', 'VTSL', 'FLDATA1-40', 'HFPCSWP', 'MSDATA', 'MSVARY', 'QFACT', 'FLOCHECK', 'HFPOWER', 'MSMASS', 'PERI', 'SPADP', 'FLREAD', 'HFPORT', 'MSMETH', 'PLFSS', 'SPARM', 'FLOTRAN', 'HFSCAT', 'MSMIR', 'PLSCH', 'SPFSS', 'HFADP', 'ICE', 'MSNOMF', 'PLSYZ', 'SPICE', 'HFARRAY', 'ICEDELE', 'MSPROP', 'PLTD', 'SPSCAN', 'HFDEEM', 'ICELIST', 'MSQUAD', 'PLTLINE', 'SPSWP', 'HFEIGOPT', 'ICVFRC', 'MSRELAX', 'PLVFRC', 'HFEREFINE', 'LPRT', 'MSSOLU', '/PICE', 'HFMODPRT', 'MSADV', 'MSSPEC', 'PLWAVE', 'HFPA', 'MSCAP', 'MSTERM', 'PRSYZ')
      + elafund = ('*VOPER', 'VOVLAP', '*VPLOT', 'VPLOT', 'VPTN', '*VPUT', 'VPUT', '*VREAD', 'VROTAT', 'VSBA', 'VSBV', 'VSBW', '/VSCALE', '*VSCFUN', 'VSEL', 'VSLA', '*VSTAT', 'VSUM', 'VSWEEP', 'VSYMM', 'VTRAN', 'VTYPE', '/VUP', '*VWRITE', '/WAIT', 'WAVES', 'WERASE', 'WFRONT', '/WINDOW', 'WMID', 'WMORE', 'WPAVE', 'WPCSYS', 'WPLANE', 'WPOFFS', 'WPROTA', 'WPSTYL', 'WRFULL', 'WRITE', 'WRITEMAP', '*WRK', 'WSORT', 'WSPRINGS', 'WSTART', 'WTBCREATE', 'XFDATA', 'XFENRICH', 'XFLIST', '/XFRM', '/XRANGE', 'XVAR', '/YRANGE', '/ZOOM', '/WB', 'XMLO', '/XML', 'CNTR', 'EBLOCK', 'CMBLOCK', 'NBLOCK', '/TRACK', 'CWZPLOT', '~EUI', 'NELE', 'EALL', 'NALL', 'FLITEM', 'LSLN', 'PSOLVE', 'ASLN', '/VERIFY', '/SSS', '~CFIN', '*EVAL', '*MOONEY', '/RUNSTAT', 'ALPFILL', 'ARCOLLAPSE', 'ARDETACH', 'ARFILL', 'ARMERGE', 'ARSPLIT', 'FIPLOT', 'GAPFINISH', 'GAPLIST', 'GAPMERGE', 'GAPOPT', 'GAPPLOT', 'LNCOLLAPSE', 'LNDETACH', 'LNFILL', 'LNMERGE', 'LNSPLIT', 'PCONV', 'PLCONV', 'PEMOPTS', 'PEXCLUDE', 'PINCLUDE', 'PMETH', '/PMETH', 'PMOPTS', 'PPLOT', 'PPRANGE', 'PRCONV', 'PRECISION', 'RALL', 'RFILSZ', 'RITER', 'RMEMRY', 'RSPEED', 'RSTAT', 'RTIMST', '/RUNST', 'RWFRNT', 'SARPLOT', 'SHSD', 'SLPPLOT', 'SLSPLOT', 'VCVFILL', '/OPT', 'OPEQN', 'OPFACT', 'OPFRST', 'OPGRAD', 'OPKEEP', 'OPLOOP', 'OPPRNT', 'OPRAND', 'OPSUBP', 'OPSWEEP', 'OPTYPE', 'OPUSER', 'OPVAR', 'OPADD', 'OPCLR', 'OPDEL', 'OPMAKE', 'OPSEL', 'OPANL', 'OPDATA', 'OPRESU', 'OPSAVE', 'OPEXE', 'OPLFA', 'OPLGR', 'OPLIST', 'OPLSW', 'OPRFA', 'OPRGR', 'OPRSW', 'PILECALC', 'PILEDISPSET', 'PILEGEN', 'PILELOAD', 'PILEMASS', 'PILERUN', 'PILESEL', 'PILESTIF', 'PLVAROPT', 'PRVAROPT', 'TOCOMP', 'TODEF', 'TOFREQ', 'TOTYPE', 'TOVAR', 'TOEXE', 'TOLOOP', 'TOGRAPH', 'TOLIST', 'TOPLOT', 'TOPRINT', 'TOSTAT', 'TZAMESH', 'TZDELE', 'TZEGEN', 'XVAROPT', 'PGSAVE', 'SOLCONTROL', 'TOTAL', 'VTGEOM', 'VTREAL', 'VTSTAT')
      + elafune = ('/ANUM', 'AOFFST', 'AOVLAP', 'APLOT', 'APPEND', 'APTN', 'ARCLEN', 'ARCTRM', 'AREAS', 'AREFINE', 'AREMESH', 'AREVERSE', 'AROTAT', 'ARSCALE', 'ARSYM', 'ASBA', 'ASBL', 'ASBV', 'ASBW', 'ASCRES', 'ASEL', 'ASIFILE', '*ASK', 'ASKIN', 'ASLL', 'ASLV', 'ASOL', '/ASSIGN', 'ASUB', 'ASUM', 'ATAN', 'ATRAN', 'ATYPE', '/AUTO', 'AUTOTS', '/AUX2', '/AUX3', '/AUX12', '/AUX15', 'AVPRIN', 'AVRES', 'AWAVE', '/AXLAB', '*AXPY', '/BATCH', 'BCSOPTION', 'BETAD', 'BF', 'BFA', 'BFADELE', 'BFALIST', 'BFCUM', 'BFDELE', 'BFE', 'BFECUM', 'BFEDELE', 'BFELIST', 'BFESCAL', 'BFINT', 'BFK', 'BFKDELE', 'BFKLIST', 'BFL', 'BFLDELE', 'BFLIST', 'BFLLIST', 'BFSCALE', 'BFTRAN', 'BFUNIF', 'BFV', 'BFVDELE', 'BFVLIST', 'BIOOPT', 'BIOT', 'BLC4', 'BLC5', 'BLOCK', 'BOOL', 'BOPTN', 'BSAX', 'BSMD', 'BSM1', 'BSM2', 'BSPLIN', 'BSS1', 'BSS2', 'BSTE', 'BSTQ', 'BTOL', 'BUCOPT', 'C', 'CALC', 'CAMPBELL', 'CBDOF', 'CBMD', 'CBMX', 'CBTE', 'CBTMP', 'CDOPT', 'CDREAD', 'CDWRITE', 'CE', 'CECHECK', 'CECMOD', 'CECYC', 'CEDELE', 'CEINTF', 'CELIST', 'CENTER', 'CEQN', 'CERIG', 'CESGEN', 'CFACT', '*CFCLOS', '*CFOPEN', '*CFWRITE', '/CFORMAT', 'CGLOC', 'CGOMGA', 'CGROW', 'CHECK', 'CHKMSH', 'CINT', 'CIRCLE', 'CISOL', '/CLABEL', '/CLEAR', 'CLOCAL', 'CLOG', '/CLOG', 'CLRMSHLN', 'CM', 'CMACEL', '/CMAP', 'CMATRIX', 'CMDELE', 'CMDOMEGA', 'CMEDIT', 'CMGRP', 'CMLIST', 'CMMOD', 'CMOMEGA', 'CMPLOT', 'CMROTATE', 'CMSEL', 'CMSFILE', 'CMSOPT', 'CMWRITE', 'CNCHECK', 'CNKMOD', 'CNTR', 'CNVTOL', '/COLOR', '*COMP', 'COMBINE', 'COMPRESS', 'CON4', 'CONE', '/CONFIG', 'CONJUG', '/CONTOUR', '/COPY', 'CORIOLIS', 'COUPLE', 'COVAL', 'CP', 'CPCYC', 'CPDELE', 'CPINTF', '/CPLANE', 'CPLGEN', 'CPLIST', 'CPMERGE', 'CPNGEN', 'CPSGEN', 'CQC', '*CREATE', 'CRPLIM', 'CS', 'CSCIR', 'CSDELE', 'CSKP', 'CSLIST', 'CSWPLA', 'CSYS', '/CTYPE', 'CURR2D', 'CUTCONTROL', '/CVAL', 'CVAR', '/CWD', 'CYCCALC', '/CYCEXPAND', 'CYCFILES', 'CYCFREQ', '*CYCLE', 'CYCLIC', 'CYCOPT', 'CYCPHASE', 'CYCSPEC', 'CYL4', 'CYL5', 'CYLIND', 'CZDEL', 'CZMESH', 'D', 'DA', 'DADELE', 'DALIST', 'DAMORPH', 'DATA', 'DATADEF', 'DCGOMG', 'DCUM', 'DCVSWP', 'DDASPEC', 'DDELE', 'DDOPTION', 'DEACT', 'DEFINE', '*DEL', 'DELETE', '/DELETE', 'DELTIM', 'DELTIME', 'DEMORPH', 'DERIV', 'DESIZE', 'DESOL', 'DETAB', '/DEVDISP', '/DEVICE', '/DFLAB', 'DFLX', 'DFSWAVE', 'DIG', 'DIGIT', '*DIM', '/DIRECTORY', 'DISPLAY', '/DIST', 'DJ', 'DJDELE', 'DJLIST', 'DK', 'DKDELE', 'DKLIST', 'DL', 'DLDELE', 'DLIST', 'DLLIST', '*DMAT', 'DMOVE', 'DMPEXT', 'DMPOPTION', 'DMPRAT', 'DMPSTR', 'DNSOL', '*DO', 'DOF', 'DOFSEL', 'DOMEGA', '*DOT', '*DOWHILE', 'DSCALE', '/DSCALE', 'DSET', 'DSPOPTION', 'DSUM', 'DSURF', 'DSYM', 'DSYS', 'DTRAN', 'DUMP', '/DV3D', 'DVAL', 'DVMORPH', 'DYNOPT', 'E', 'EALIVE', 'EDADAPT', 'EDALE', 'EDASMP', 'EDBOUND', 'EDBX', 'EDBVIS', 'EDCADAPT', 'EDCGEN', 'EDCLIST', 'EDCMORE', 'EDCNSTR', 'EDCONTACT', 'EDCPU', 'EDCRB', 'EDCSC', 'EDCTS', 'EDCURVE', 'EDDAMP', 'EDDBL', 'EDDC', 'EDDRELAX', 'EDDUMP', 'EDELE', 'EDENERGY', 'EDFPLOT', 'EDGCALE', '/EDGE', 'EDHGLS', 'EDHIST', 'EDHTIME', 'EDINT', 'EDIPART', 'EDIS', 'EDLCS', 'EDLOAD', 'EDMP', 'EDNB', 'EDNDTSD', 'EDNROT', 'EDOPT', 'EDOUT', 'EDPART', 'EDPC', 'EDPL', 'EDPVEL', 'EDRC', 'EDRD', 'EDREAD', 'EDRI', 'EDRST', 'EDRUN', 'EDSHELL', 'EDSOLV', 'EDSP', 'EDSTART', 'EDTERM', 'EDTP', 'EDVEL', 'EDWELD', 'EDWRITE', 'EEXTRUDE', '/EFACET', 'EGEN', '*EIGEN', 'EINFIN', 'EINTF', 'EKILL', 'ELBOW', 'ELEM', 'ELIST', '*ELSE', '*ELSEIF', 'EMAGERR', 'EMATWRITE', 'EMF', 'EMFT', 'EMID', 'EMIS', 'EMODIF', 'EMORE', 'EMSYM', 'EMTGEN', 'EMUNIT', 'EN', '*END', '*ENDDO', '*ENDIF', 'ENDRELEASE', 'ENERSOL', 'ENGEN', 'ENORM', 'ENSYM', 'EORIENT', 'EPLOT', 'EQSLV', 'ERASE', '/ERASE', 'EREAD', 'EREFINE', 'EREINF', 'ERESX', 'ERNORM', 'ERRANG', 'ESCHECK', 'ESEL', '/ESHAPE', 'ESIZE', 'ESLA', 'ESLL', 'ESLN', 'ESLV', 'ESOL', 'ESORT', 'ESSOLV', 'ESTIF', 'ESURF', 'ESYM', 'ESYS', 'ET', 'ETABLE', 'ETCHG', 'ETCONTROL', 'ETDELE', 'ETLIST', 'ETYPE', 'EUSORT', 'EWRITE', '*EXIT', '/EXIT', 'EXP', 'EXPAND', '/EXPAND', 'EXPASS', '*EXPORT', 'EXPROFILE', 'EXPSOL', 'EXTOPT', 'EXTREM', 'EXUNIT', 'F', '/FACET', 'FATIGUE', 'FC', 'FCCHECK', 'FCDELE', 'FCLIST', 'FCUM', 'FCTYP', 'FDELE', '/FDELE', 'FE', 'FEBODY', 'FECONS', 'FEFOR', 'FELIST', 'FESURF', '*FFT', 'FILE', 'FILEAUX2', 'FILEAUX3', 'FILEDISP', 'FILL', 'FILLDATA', '/FILNAME', 'FINISH', 'FITEM', 'FJ', 'FJDELE', 'FJLIST', 'FK', 'FKDELE', 'FKLIST', 'FL', 'FLIST', 'FLLIST', 'FLST', 'FLUXV', 'FLUREAD', 'FMAGBC', 'FMAGSUM', '/FOCUS', 'FOR2D', 'FORCE', 'FORM', '/FORMAT', 'FP', 'FPLIST', '*FREE', 'FREQ', 'FRQSCL', 'FS', 'FSCALE', 'FSDELE', 'FSLIST', 'FSNODE', 'FSPLOT', 'FSSECT', 'FSSPARM', 'FSUM', 'FTCALC', 'FTRAN', 'FTSIZE', 'FTWRITE', 'FTYPE', 'FVMESH', 'GAP', 'GAPF', 'GAUGE', 'GCDEF', 'GCGEN', '/GCMD', '/GCOLUMN', 'GENOPT', 'GEOM', 'GEOMETRY', '*GET', '/GFILE', '/GFORMAT', '/GLINE', '/GMARKER', 'GMATRIX', 'GMFACE', '*GO', '/GO', '/GOLIST', '/GOPR', 'GP', 'GPDELE', 'GPLIST', 'GPLOT', '/GRAPHICS', '/GRESUME', '/GRID', '/GROPT', 'GRP', '/GRTYP', '/GSAVE', 'GSBDATA', 'GSGDATA', 'GSLIST', 'GSSOL', '/GST', 'GSUM', '/GTHK', '/GTYPE', 'HARFRQ', '/HBC', 'HBMAT', '/HEADER', 'HELP', 'HELPDISP', 'HEMIOPT', 'HFANG', 'HFSYM', 'HMAGSOLV', 'HPGL', 'HPTCREATE', 'HPTDELETE', 'HRCPLX', 'HREXP', 'HROPT', 'HROCEAN', 'HROUT', 'IC', 'ICDELE', 'ICLIST', '/ICLWID', '/ICSCALE', '*IF', 'IGESIN', 'IGESOUT', '/IMAGE', 'IMAGIN', 'IMESH', 'IMMED', 'IMPD', 'INISTATE', '*INIT', '/INPUT', '/INQUIRE', 'INRES', 'INRTIA', 'INT1', 'INTSRF', 'IOPTN', 'IRLF', 'IRLIST', '*ITENGINE', 'JPEG', 'JSOL', 'K', 'KATT', 'KBC', 'KBETW', 'KCALC', 'KCENTER', 'KCLEAR', 'KDELE', 'KDIST', 'KEEP', 'KESIZE', 'KEYOPT', 'KEYPTS', 'KEYW', 'KFILL', 'KGEN', 'KL', 'KLIST', 'KMESH', 'KMODIF', 'KMOVE', 'KNODE', 'KPLOT', 'KPSCALE', 'KREFINE', 'KSCALE', 'KSCON', 'KSEL', 'KSLL', 'KSLN', 'KSUM', 'KSYMM', 'KTRAN', 'KUSE', 'KWPAVE', 'KWPLAN', 'L', 'L2ANG', 'L2TAN', 'LANG', 'LARC', '/LARC', 'LAREA', 'LARGE', 'LATT', 'LAYER', 'LAYERP26', 'LAYLIST', 'LAYPLOT', 'LCABS', 'LCASE', 'LCCALC', 'LCCAT', 'LCDEF', 'LCFACT', 'LCFILE', 'LCLEAR', 'LCOMB', 'LCOPER', 'LCSEL', 'LCSL', 'LCSUM', 'LCWRITE', 'LCZERO', 'LDELE', 'LDIV', 'LDRAG', 'LDREAD', 'LESIZE', 'LEXTND', 'LFILLT', 'LFSURF', 'LGEN', 'LGLUE', 'LGWRITE', '/LIGHT', 'LINA', 'LINE', '/LINE', 'LINES', 'LINL', 'LINP', 'LINV', 'LIST', '*LIST', 'LLIST', 'LMATRIX', 'LMESH', 'LNSRCH', 'LOCAL', 'LOVLAP', 'LPLOT', 'LPTN', 'LREFINE', 'LREVERSE', 'LROTAT', 'LSBA', '*LSBAC', 'LSBL', 'LSBV', 'LSBW', 'LSCLEAR', 'LSDELE', '*LSDUMP', 'LSEL', '*LSENGINE', '*LSFACTOR', 'LSLA', 'LSLK', 'LSOPER', '/LSPEC', 'LSREAD', '*LSRESTORE', 'LSSCALE', 'LSSOLVE', 'LSTR', 'LSUM', 'LSWRITE', '/LSYMBOL', 'LSYMM', 'LTAN', 'LTRAN', 'LUMPM', 'LVSCALE', 'LWPLAN', 'M', 'MADAPT', 'MAGOPT', 'MAGSOLV', '/MAIL', 'MAP', '/MAP', 'MAP2DTO3D', 'MAPSOLVE', 'MAPVAR', 'MASTER', 'MAT', 'MATER', 'MCHECK', 'MDAMP', 'MDELE', 'MDPLOT', 'MEMM', '/MENU', 'MESHING', 'MFANALYSIS', 'MFBUCKET', 'MFCALC', 'MFCI', 'MFCLEAR', 'MFCMMAND', 'MFCONV', 'MFDTIME', 'MFELEM', 'MFEM', 'MFEXTER', 'MFFNAME', 'MFFR', 'MFIMPORT', 'MFINTER', 'MFITER', 'MFLCOMM', 'MFLIST', 'MFMAP', 'MFORDER', 'MFOUTPUT', '*MFOURI', 'MFPSIMUL', 'MFRC', 'MFRELAX', 'MFRSTART', 'MFSORDER', 'MFSURFACE', 'MFTIME', 'MFTOL', '*MFUN', 'MFVOLUME', 'MFWRITE', 'MGEN', 'MIDTOL', '/MKDIR', 'MLIST', 'MMASS', 'MMF', 'MODCONT', 'MODE', 'MODIFY', 'MODMSH', 'MODSELOPTION', 'MODOPT', 'MONITOR', '*MOPER', 'MOPT', 'MORPH', 'MOVE', 'MP', 'MPAMOD', 'MPCHG', 'MPCOPY', 'MPDATA', 'MPDELE', 'MPDRES', '/MPLIB', 'MPLIST', 'MPPLOT', 'MPREAD', 'MPRINT', 'MPTEMP', 'MPTGEN', 'MPTRES', 'MPWRITE', '/MREP', 'MSAVE', '*MSG', 'MSHAPE', 'MSHCOPY', 'MSHKEY', 'MSHMID', 'MSHPATTERN', 'MSOLVE', '/MSTART', 'MSTOLE', '*MULT', '*MWRITE', 'MXPAND', 'N', 'NANG', 'NAXIS', 'NCNV', 'NDELE', 'NDIST', 'NDSURF', 'NEQIT', '/NERR', 'NFORCE', 'NGEN', 'NKPT', 'NLADAPTIVE', 'NLDIAG', 'NLDPOST', 'NLGEOM', 'NLHIST', 'NLIST', 'NLMESH', 'NLOG', 'NLOPT', 'NMODIF', 'NOCOLOR', 'NODES', '/NOERASE', '/NOLIST', 'NOOFFSET', 'NOORDER', '/NOPR', 'NORA', 'NORL', '/NORMAL', 'NPLOT', 'NPRINT', 'NREAD', 'NREFINE', 'NRLSUM', '*NRM', 'NROPT', 'NROTAT', 'NRRANG', 'NSCALE', 'NSEL', 'NSLA', 'NSLE', 'NSLK', 'NSLL', 'NSLV', 'NSMOOTH', 'NSOL', 'NSORT', 'NSTORE', 'NSUBST', 'NSVR', 'NSYM', '/NUMBER', 'NUMCMP', 'NUMEXP', 'NUMMRG', 'NUMOFF', 'NUMSTR', 'NUMVAR', 'NUSORT', 'NWPAVE', 'NWPLAN', 'NWRITE', 'OCDATA', 'OCDELETE', 'OCLIST', 'OCREAD', 'OCTABLE', 'OCTYPE', 'OCZONE', 'OMEGA', 'OPERATE', 'OPNCONTROL', 'OUTAERO', 'OUTOPT', 'OUTPR', '/OUTPUT', 'OUTRES', 'OVCHECK', 'PADELE', '/PAGE', 'PAGET', 'PAPUT', 'PARESU', 'PARTSEL', 'PARRES', 'PARSAV', 'PASAVE', 'PATH', 'PAUSE', '/PBC', '/PBF', 'PCALC', 'PCGOPT', 'PCIRC', '/PCIRCLE', '/PCOPY', 'PCROSS', 'PDANL', 'PDCDF', 'PDCFLD', 'PDCLR', 'PDCMAT', 'PDCORR', 'PDDMCS', 'PDDOEL', 'PDEF', 'PDEXE', 'PDHIST', 'PDINQR', 'PDLHS', 'PDMETH', 'PDOT', 'PDPINV', 'PDPLOT', 'PDPROB', 'PDRESU', 'PDROPT', '/PDS', 'PDSAVE', 'PDSCAT', 'PDSENS', 'PDSHIS', 'PDUSER', 'PDVAR', 'PDWRITE', 'PERBC2D', 'PERTURB', 'PFACT', 'PHYSICS', 'PIVCHECK', 'PLCAMP', 'PLCFREQ', 'PLCHIST', 'PLCINT', 'PLCPLX', 'PLCRACK', 'PLDISP', 'PLESOL', 'PLETAB', 'PLFAR', 'PLF2D', 'PLGEOM', 'PLLS', 'PLMAP', 'PLMC', 'PLNEAR', 'PLNSOL', '/PLOPTS', 'PLORB', 'PLOT', 'PLOTTING', 'PLPAGM', 'PLPATH', 'PLSECT', 'PLST', 'PLTIME', 'PLTRAC', 'PLVAR', 'PLVECT', 'PLZZ', '/PMACRO', 'PMAP', 'PMGTRAN', 'PMLOPT', 'PMLSIZE', '/PMORE', 'PNGR', '/PNUM', 'POINT', 'POLY', '/POLYGON', '/POST1', '/POST26', 'POWERH', 'PPATH', 'PRANGE', 'PRAS', 'PRCAMP', 'PRCINT', 'PRCPLX', 'PRED', 'PRENERGY', '/PREP7', 'PRERR', 'PRESOL', 'PRETAB', 'PRFAR', 'PRI2', 'PRIM', 'PRINT', '*PRINT', 'PRISM', 'PRITER', 'PRJSOL', 'PRNEAR', 'PRNLD', 'PRNSOL', 'PROD', 'PRORB', 'PRPATH', 'PRRFOR', 'PRRSOL', 'PRSCONTROL', 'PRSECT', 'PRTIME', 'PRVAR', 'PRVECT', 'PSCONTROL', 'PSCR', 'PSDCOM', 'PSDFRQ', 'PSDGRAPH', 'PSDRES', 'PSDSPL', 'PSDUNIT', 'PSDVAL', 'PSDWAV', '/PSEARCH', 'PSEL', '/PSF', 'PSMAT', 'PSMESH', '/PSPEC', '/PSTATUS', 'PSTRES', '/PSYMB', 'PTR', 'PTXY', 'PVECT', '/PWEDGE', 'QDVAL', 'QRDOPT', 'QSOPT', 'QUAD', '/QUIT', 'QUOT', 'R', 'RACE', 'RADOPT', 'RAPPND', 'RATE', '/RATIO', 'RBE3', 'RCON', 'RCYC', 'RDEC', 'RDELE', 'READ', 'REAL', 'REALVAR', 'RECTNG', 'REMESH', '/RENAME', 'REORDER', '*REPEAT', '/REPLOT', 'RESCOMBINE', 'RESCONTROL', 'RESET', '/RESET', 'RESP', 'RESUME', 'RESVEC', 'RESWRITE', '*RETURN', 'REXPORT', 'REZONE', 'RFORCE', '/RGB', 'RIGID', 'RIGRESP', 'RIMPORT', 'RLIST', 'RMALIST', 'RMANL', 'RMASTER', 'RMCAP', 'RMCLIST', '/RMDIR', 'RMFLVEC', 'RMLVSCALE', 'RMMLIST', 'RMMRANGE', 'RMMSELECT', 'RMNDISP', 'RMNEVEC', 'RMODIF', 'RMORE', 'RMPORDER', 'RMRESUME', 'RMRGENERATE', 'RMROPTIONS', 'RMRPLOT', 'RMRSTATUS', 'RMSAVE', 'RMSMPLE', 'RMUSE', 'RMXPORT', 'ROCK', 'ROSE', 'RPOLY', 'RPR4', 'RPRISM', 'RPSD', 'RSFIT', 'RSOPT', 'RSPLIT', 'RSPLOT', 'RSPRNT', 'RSSIMS', 'RSTMAC', 'RSTOFF', 'RSURF', 'RSYMM', 'RSYS', 'RTHICK', 'SABS', 'SADD', 'SALLOW', 'SAVE', 'SBCLIST', 'SBCTRAN', 'SDELETE', 'SE', 'SECCONTROL', 'SECDATA', 'SECFUNCTION', 'SECJOINT', '/SECLIB', 'SECLOCK', 'SECMODIF', 'SECNUM', 'SECOFFSET', 'SECPLOT', 'SECREAD', 'SECSTOP', 'SECTYPE', 'SECWRITE', 'SED', 'SEDLIST', 'SEEXP', '/SEG', 'SEGEN', 'SELIST', 'SELM', 'SELTOL', 'SENERGY', 'SEOPT', 'SESYMM', '*SET', 'SET', 'SETFGAP', 'SETRAN', 'SEXP', 'SF', 'SFA', 'SFACT', 'SFADELE', 'SFALIST', 'SFBEAM', 'SFCALC', 'SFCUM', 'SFDELE', 'SFE', 'SFEDELE', 'SFELIST', 'SFFUN', 'SFGRAD', 'SFL', 'SFLDELE', 'SFLEX', 'SFLIST', 'SFLLIST', 'SFSCALE', 'SFTRAN', '/SHADE', 'SHELL', '/SHOW', '/SHOWDISP', 'SHPP', '/SHRINK', 'SLIST', 'SLOAD', 'SMALL', '*SMAT', 'SMAX', '/SMBC', 'SMBODY', 'SMCONS', 'SMFOR', 'SMIN', 'SMOOTH', 'SMRTSIZE', 'SMSURF', 'SMULT', 'SNOPTION', 'SOLU', '/SOLU', 'SOLUOPT', 'SOLVE', 'SORT', 'SOURCE', 'SPACE', 'SPCNOD', 'SPCTEMP', 'SPDAMP', 'SPEC', 'SPFREQ', 'SPGRAPH', 'SPH4', 'SPH5', 'SPHERE', 'SPLINE', 'SPLOT', 'SPMWRITE', 'SPOINT', 'SPOPT', 'SPREAD', 'SPTOPT', 'SPOWER', 'SPUNIT', 'SPVAL', 'SQRT', '*SREAD', 'SRSS', 'SSBT', '/SSCALE', 'SSLN', 'SSMT', 'SSPA', 'SSPB', 'SSPD', 'SSPE', 'SSPM', 'SSUM', 'SSTATE', 'STABILIZE', 'STAOPT', 'STAT', '*STATUS', '/STATUS', 'STEF', 'STORE', 'SUBOPT', 'SUBSET', 'SUCALC', 'SUCR', 'SUDEL', 'SUEVAL', 'SUGET', 'SUMAP', 'SUMTYPE', 'SUPL', 'SUPR', 'SURESU', 'SUSAVE', 'SUSEL', 'SUVECT', 'SV', 'SVPLOT', 'SVTYP', 'SWADD', 'SWDEL', 'SWGEN', 'SWLIST', 'SYNCHRO', '/SYP', '/SYS', 'TALLOW', 'TARGET', '*TAXIS', 'TB', 'TBCOPY', 'TBDATA', 'TBDELE', 'TBEO', 'TBIN', 'TBFIELD', 'TBFT', 'TBLE', 'TBLIST', 'TBMODIF', 'TBPLOT', 'TBPT', 'TBTEMP', 'TCHG', '/TEE', 'TERM', 'THEXPAND', 'THOPT', 'TIFF', 'TIME', 'TIMERANGE', 'TIMINT', 'TIMP', 'TINTP', '/TLABEL', 'TOFFST', '*TOPER', 'TORQ2D', 'TORQC2D', 'TORQSUM', 'TORUS', 'TRANS', 'TRANSFER', '*TREAD', 'TREF', '/TRIAD', '/TRLCY', 'TRNOPT', 'TRPDEL', 'TRPLIS', 'TRPOIN', 'TRTIME', 'TSHAP', '/TSPEC', 'TSRES', 'TUNIF', 'TVAR', '/TXTRE', '/TYPE', 'TYPE', '/UCMD', '/UDOC', '/UI', 'UIMP', '/UIS', '*ULIB', '/UPF', 'UNDELETE', 'UNDO', '/UNITS', 'UNPAUSE', 'UPCOORD', 'UPGEOM', '*USE', '/USER', 'USRCAL', 'USRDOF', 'USRELEM', 'V', 'V2DOPT', 'VA', '*VABS', 'VADD', 'VARDEL', 'VARNAM', 'VATT', 'VCLEAR', '*VCOL', '/VCONE', 'VCROSS', '*VCUM', 'VDDAM', 'VDELE', 'VDGL', 'VDOT', 'VDRAG', '*VEC', '*VEDIT', 'VEORIENT', 'VEXT', '*VFACT', '*VFILL', 'VFOPT', 'VFQUERY', 'VFSM', '*VFUN', 'VGEN', '*VGET', 'VGET', 'VGLUE', '/VIEW', 'VIMP', 'VINP', 'VINV', '*VITRP', '*VLEN', 'VLIST', 'VLSCALE', '*VMASK', 'VMESH', 'VOFFST', 'VOLUMES')
      + elafunf = ('NX()', 'NY()', 'NZ()', 'KX()', 'KY()', 'KZ()', 'LX()', 'LY()', 'LZ()', 'LSX()', 'LSY()', 'LSZ()', 'NODE()', 'KP()', 'DISTND()', 'DISTKP()', 'DISTEN()', 'ANGLEN()', 'ANGLEK()', 'NNEAR()', 'KNEAR()', 'ENEARN()', 'AREAND()', 'AREAKP()', 'ARNODE()', 'NORMNX()', 'NORMNY()', 'NORMNZ()', 'NORMKX()', 'NORMKY()', 'NORMKZ()', 'ENEXTN()', 'NELEM()', 'NODEDOF()', 'ELADJ()', 'NDFACE()', 'NMFACE()', 'ARFACE()', 'UX()', 'UY()', 'UZ()', 'ROTX()', 'ROTY()', 'ROTZ()', 'TEMP()', 'PRES()', 'VX()', 'VY()', 'VZ()', 'ENKE()', 'ENDS()', 'VOLT()', 'MAG()', 'AX()', 'AY()', 'AZ()', 'VIRTINQR()', 'KWGET()', 'VALCHR()', 'VALHEX()', 'CHRHEX()', 'STRFILL()', 'STRCOMP()', 'STRPOS()', 'STRLENG()', 'UPCASE()', 'LWCASE()', 'JOIN()', 'SPLIT()', 'ABS()', 'SIGN()', 'CXABS()', 'EXP()', 'LOG()', 'LOG10()', 'SQRT()', 'NINT()', 'MOD()', 'RAND()', 'GDIS()', 'SIN()', 'COS()', 'TAN()', 'SINH()', 'COSH()', 'TANH()', 'ASIN()', 'ACOS()', 'ATAN()', 'ATAN2()')
      + elafung = ('NSEL()', 'ESEL()', 'KSEL()', 'LSEL()', 'ASEL()', 'VSEL()', 'NDNEXT()', 'ELNEXT()', 'KPNEXT()', 'LSNEXT()', 'ARNEXT()', 'VLNEXT()', 'CENTRX()', 'CENTRY()', 'CENTRZ()')
      + elafunh = ('~CAT5IN', '~CATIAIN', '~PARAIN', '~PROEIN', '~SATIN', '~UGIN', 'A', 'AADD', 'AATT', 'ABEXTRACT', '*ABBR', 'ABBRES', 'ABBSAV', 'ABS', 'ACCAT', 'ACCOPTION', 'ACEL', 'ACLEAR', 'ADAMS', 'ADAPT', 'ADD', 'ADDAM', 'ADELE', 'ADGL', 'ADRAG', 'AESIZE', 'AFILLT', 'AFLIST', 'AFSURF', '*AFUN', 'AGEN', 'AGLUE', 'AINA', 'AINP', 'AINV', 'AL', 'ALIST', 'ALLSEL', 'ALPHAD', 'AMAP', 'AMESH', '/AN3D', 'ANCNTR', 'ANCUT', 'ANCYC', 'ANDATA', 'ANDSCL', 'ANDYNA', '/ANFILE', 'ANFLOW', '/ANGLE', 'ANHARM', 'ANIM', 'ANISOS', 'ANMODE', 'ANMRES', '/ANNOT', 'ANORM', 'ANPRES', 'ANSOL', 'ANSTOAQWA', 'ANSTOASAS', 'ANTIME', 'ANTYPE')
      + special = ('/COM', '/TITLE', 'STITLE')
      + elements = ('SOLID5', 'LINK11', 'PLANE13', 'COMBIN14', 'MASS2', 'PLANE25', 'MATRIX27', 'FLUID29', 'FLUID30', 'LINK31', 'LINK33', 'LINK34', 'PLANE35', 'SOURC36', 'COMBIN37', 'FLUID38', 'COMBIN39', 'COMBIN40', 'INFIN47', 'MATRIX50', 'PLANE55', 'SHELL61', 'LINK68', 'SOLID70', 'MASS71', 'PLANE75', 'PLANE77', 'PLANE78', 'PLANE83', 'SOLID87', 'SOLID90', 'CIRCU94', 'SOLID96', 'SOLID98', 'INFIN110', 'INFIN111', 'FLUID116', 'PLANE121', 'SOLID122', 'SOLID123', 'CIRCU124', 'CIRCU125', 'TRANS126', 'FLUID129', 'FLUID130', 'SHELL131', 'SHELL132', 'FLUID136', 'FLUID138', 'FLUID139', 'SURF151', 'SURF152', 'SURF153', 'SURF154', 'SURF155', 'SURF156', 'SHELL157', 'SURF159', 'TARGE169', 'TARGE170', 'CONTA172', 'CONTA174', 'CONTA175', 'CONTA177', 'CONTA178', 'PRETS179', 'LINK180', 'SHELL181', 'PLANE182', 'PLANE183', 'MPC184', 'SOLID185', 'SOLID186', 'SOLID187', 'BEAM188', 'BEAM189', 'SOLSH190', 'INTER192', 'INTER193', 'INTER194', 'INTER195', 'MESH200', 'FOLLW201', 'INTER202', 'INTER203', 'INTER204', 'INTER205', 'SHELL208', 'SHELL209', 'CPT212', 'CPT213', 'COMBI214', 'CPT215', 'CPT216', 'CPT217', 'FLUID218', 'FLUID220', 'FLUID221', 'PLANE222', 'PLANE223', 'SOLID225', 'SOLID226', 'SOLID227', 'PLANE230', 'SOLID231', 'SOLID232', 'PLANE233', 'SOLID236', 'SOLID237', 'PLANE238', 'SOLID239', 'SOLID240', 'HSFLD241', 'HSFLD242', 'COMBI250', 'SURF251', 'SURF252', 'INFIN257', 'REINF263', 'REINF264', 'REINF265', 'SOLID272', 'SOLID273', 'SOLID278', 'SOLID279', 'CABLE280', 'SHELL281', 'SOLID285', 'PIPE288', 'PIPE289', 'ELBOW290', 'SOLID291', 'PLANE292', 'PLANE293', 'USER300')
      + tokens = {'root': [('[^\\S\\n]+', Whitespace), (words(elafunb + elafunc + elafund + elafune + elafunh + special, suffix='\\b'), Keyword, 'non-keyword'), default('non-keyword')], 'non-keyword': [('!.*\\n', Comment, '#pop'), ('%.*?%', Escape), include('strings'), include('nums'), (words(elafunf + elafung, suffix='\\b'), Name.Builtin), (words(elements, suffix='\\b'), Name.Property), include('core'), ('AR[0-9]+', Name.Variable.Instance), ('[a-z_][a-z0-9_]*', Name.Variable), ('\\n+', Whitespace, '#pop'), ('[^\\S\\n]+', Whitespace)], 'core': [('(\\*\\*|\\*|\\+|-|\\/|<|>|<=|>=|==|\\/=|=|\\(|\\))', Operator), ('/EOF', Generic.Emph), ('[\\.(),:&;]', Punctuation)], 'strings': [('(?s)"(\\\\\\\\|\\\\[0-7]+|\\\\.|[^"\\\\])*"', String.Double), ("(?s)'(\\\\\\\\|\\\\[0-7]+|\\\\.|[^'\\\\])*'", String.Single), ('[$%]', String.Symbol)], 'nums': [('[+-]?\\d*\\.\\d+([efEF][-+]?\\d+)?', Number.Float), ('([+-]?\\d+([efEF][-+]?\\d+))', Number.Float), ('\\b\\d+(?![.ef])', Number.Integer)]}
  }

  class APLLexer {
      + name = 'APL'
      + url = 'https://en.m.wikipedia.org/wiki/APL_(programming_language)'
      + aliases = ['apl']
      + filenames = ['*.apl', '*.aplf', '*.aplo', '*.apln', '*.aplc', '*.apli', '*.dyalog']
      + version_added = '2.0'
      + tokens = {'root': [('\\s+', Whitespace), ('[⍝#].*$', Comment.Single), ("\\'((\\'\\')|[^\\'])*\\'", String.Single), ('"(("")|[^"])*"', String.Double), ('[⋄◇()]', Punctuation), ('[\\[\\];]', String.Regex), ('⎕[A-Za-zΔ∆⍙][A-Za-zΔ∆⍙_¯0-9]*', Name.Function), ('[A-Za-zΔ∆⍙_][A-Za-zΔ∆⍙_¯0-9]*', Name.Variable), ('¯?(0[Xx][0-9A-Fa-f]+|[0-9]*\\.?[0-9]+([Ee][+¯]?[0-9]+)?|¯|∞)([Jj]¯?(0[Xx][0-9A-Fa-f]+|[0-9]*\\.?[0-9]+([Ee][+¯]?[0-9]+)?|¯|∞))?', Number), ('[\\.\\\\\\/⌿⍀¨⍣⍨⍠⍤∘⌸&⌶@⌺⍥⍛⍢]', Name.Attribute), ('[+\\-×÷⌈⌊∣|⍳?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⌸⍯↗⊆⊇⍸√⌾…⍮]', Operator), ('⍬', Name.Constant), ('[⎕⍞]', Name.Variable.Global), ('[←→]', Keyword.Declaration), ('[⍺⍵⍶⍹∇:]', Name.Builtin.Pseudo), ('[{}]', Keyword.Type)]}
  }

  class AtomsLexer {
      + tokens = {'whitespace': [('\\n', Whitespace), ('\\s+', Whitespace), ('([ \\t]*)(--.*)$', bygroups(Whitespace, Comment))], 'archetype_id': [('([ \\t]*)(([a-zA-Z]\\w+(\\.[a-zA-Z]\\w+)*::)?[a-zA-Z]\\w+(-[a-zA-Z]\\w+){2}\\.\\w+[\\w-]*\\.v\\d+(\\.\\d+){,2}((-[a-z]+)(\\.\\d+)?)?)', bygroups(Whitespace, Name.Decorator))], 'date_constraints': [('[Xx?YyMmDdHhSs\\d]{2,4}([:-][Xx?YyMmDdHhSs\\d]{2}){2}', Literal.Date), ('(P[YyMmWwDd]+(T[HhMmSs]+)?|PT[HhMmSs]+)/?', Literal.Date)], 'ordered_values': [('\\d{4}-\\d{2}-\\d{2}T?', Literal.Date), ('\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([+-]\\d{4}|Z)?', Literal.Date), ('P((\\d*(\\.\\d+)?[YyMmWwDd]){1,3}(T(\\d*(\\.\\d+)?[HhMmSs]){,3})?|T(\\d*(\\.\\d+)?[HhMmSs]){,3})', Literal.Date), ('[+-]?(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+', Number.Float), ('[+-]?\\d*\\.\\d+%?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[+-]?\\d+%?', Number.Integer)], 'values': [include('ordered_values'), ('([Tt]rue|[Ff]alse)', Literal), ('"', String, 'string'), ("'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'", String.Char), ('[a-z][a-z0-9+.-]*:', Literal, 'uri'), ('(\\[)(\\w[\\w-]*(?:\\([^)\\n]+\\))?)(::)(\\w[\\w-]*)(\\])', bygroups(Punctuation, Name.Decorator, Punctuation, Name.Decorator, Punctuation)), ('\\|', Punctuation, 'interval'), ('\\.\\.\\.', Punctuation)], 'constraint_values': [('(\\[)(\\w[\\w-]*(?:\\([^)\\n]+\\))?)(::)', bygroups(Punctuation, Name.Decorator, Punctuation), 'adl14_code_constraint'), ('(\\d*)(\\|)(\\[\\w[\\w-]*::\\w[\\w-]*\\])((?:[,;])?)', bygroups(Number, Punctuation, Name.Decorator, Punctuation)), include('date_constraints'), include('values')], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|[0-7]{1,3})', String.Escape), ('[^\\\\"]+', String), ('\\\\', String)], 'uri': [('[,>\\s]', Punctuation, '#pop'), ('[^>\\s,]+', Literal)], 'interval': [('\\|', Punctuation, '#pop'), include('ordered_values'), ('\\.\\.', Punctuation), ('[<>=] *', Punctuation), ('\\+/-', Punctuation), ('\\s+', Whitespace)], 'any_code': [include('archetype_id'), ('[a-z_]\\w*[0-9.]+(@[^\\]]+)?', Name.Decorator), ('[a-z_]\\w*', Name.Class), ('[0-9]+', Text), ('\\|', Punctuation, 'code_rubric'), ('\\]', Punctuation, '#pop'), ('(\\s*)(,)(\\s*)', bygroups(Whitespace, Punctuation, Whitespace))], 'code_rubric': [('\\|', Punctuation, '#pop'), ('[^|]+', String)], 'adl14_code_constraint': [('\\]', Punctuation, '#pop'), ('\\|', Punctuation, 'code_rubric'), ('(\\w[\\w-]*)([;,]?)', bygroups(Name.Decorator, Punctuation)), include('whitespace')]}
  }

  class OdinLexer {
      + name = 'ODIN'
      + aliases = ['odin']
      + filenames = ['*.odin']
      + mimetypes = ['text/odin']
      + url = 'https://github.com/openEHR/odin'
      + version_added = '2.1'
      + tokens = {'path': [('>', Punctuation, '#pop'), ('[a-z_]\\w*', Name.Class), ('/', Punctuation), ('\\[', Punctuation, 'key'), ('(\\s*)(,)(\\s*)', bygroups(Whitespace, Punctuation, Whitespace), '#pop'), ('\\s+', Whitespace, '#pop')], 'key': [include('values'), ('\\]', Punctuation, '#pop')], 'type_cast': [('\\)', Punctuation, '#pop'), ('[^)]+', Name.Class)], 'root': [include('whitespace'), ('([Tt]rue|[Ff]alse)', Literal), include('values'), ('/', Punctuation, 'path'), ('\\[', Punctuation, 'key'), ('[a-z_]\\w*', Name.Class), ('=', Operator), ('\\(', Punctuation, 'type_cast'), (',', Punctuation), ('<', Punctuation), ('>', Punctuation), (';', Punctuation)]}
  }

  class CadlLexer {
      + name = 'cADL'
      + aliases = ['cadl']
      + filenames = ['*.cadl']
      + url = 'https://specifications.openehr.org/releases/AM/latest/ADL2.html#_cadl_constraint_adl'
      + version_added = '2.1'
      + tokens = {'path': [('[a-z_]\\w*', Name.Class), ('/', Punctuation), ('\\[', Punctuation, 'any_code'), ('\\s+', Punctuation, '#pop')], 'root': [include('whitespace'), ('(cardinality|existence|occurrences|group|include|exclude|allow_archetype|use_archetype|use_node)\\W', Keyword.Type), ('(and|or|not|there_exists|xor|implies|for_all)\\W', Keyword.Type), ('(after|before|closed)\\W', Keyword.Type), ('(not)\\W', Operator), ('(matches|is_in)\\W', Operator), ('(∈|∉)', Operator), ('(∃|∄|∀|∧|∨|⊻|\x93C)', Operator), ('(\\{)(\\s*)(/[^}]+/)(\\s*)(\\})', bygroups(Punctuation, Whitespace, String.Regex, Whitespace, Punctuation)), ('(\\{)(\\s*)(\\^[^}]+\\^)(\\s*)(\\})', bygroups(Punctuation, Whitespace, String.Regex, Whitespace, Punctuation)), ('/', Punctuation, 'path'), ('(\\{)((?:\\d+\\.\\.)?(?:\\d+|\\*))((?:\\s*;\\s*(?:ordered|unordered|unique)){,2})(\\})', bygroups(Punctuation, Number, Number, Punctuation)), ('\\[\\{', Punctuation), ('\\}\\]', Punctuation), ('\\{', Punctuation), ('\\}', Punctuation), include('constraint_values'), ('[A-Z]\\w+(<[A-Z]\\w+([A-Za-z_<>]*)>)?', Name.Class), ('[a-z_]\\w*', Name.Class), ('\\[', Punctuation, 'any_code'), ('(~|//|\\\\\\\\|\\+|-|/|\\*|\\^|!=|=|<=|>=|<|>]?)', Operator), ('\\(', Punctuation), ('\\)', Punctuation), (',', Punctuation), ('"', String, 'string'), (';', Punctuation)]}
  }

  class AdlLexer {
      + name = 'ADL'
      + aliases = ['adl']
      + filenames = ['*.adl', '*.adls', '*.adlf', '*.adlx']
      + url = 'https://specifications.openehr.org/releases/AM/latest/ADL2.html'
      + version_added = '2.1'
      + tokens = {'whitespace': [('\\s*\\n', Whitespace), ('^([ \\t]*)(--.*)$', bygroups(Whitespace, Comment))], 'odin_section': [('^(language|description|ontology|terminology|annotations|component_terminologies|revision_history)([ \\t]*\\n)', bygroups(Generic.Heading, Whitespace)), ('^(definition)([ \\t]*\\n)', bygroups(Generic.Heading, Whitespace), 'cadl_section'), ('^([ \\t]*|[ \\t]+.*)\\n', using(OdinLexer)), ('^([^"]*")(>[ \\t]*\\n)', bygroups(String, Punctuation)), ('^----------*\\n', Text, '#pop'), ('^.*\\n', String), default('#pop')], 'cadl_section': [('^([ \\t]*|[ \\t]+.*)\\n', using(CadlLexer)), default('#pop')], 'rules_section': [('^[ \\t]+.*\\n', using(CadlLexer)), default('#pop')], 'metadata': [('\\)', Punctuation, '#pop'), (';', Punctuation), ('([Tt]rue|[Ff]alse)', Literal), ('\\d+(\\.\\d+)*', Literal), ('(\\d|[a-fA-F])+(-(\\d|[a-fA-F])+){3,}', Literal), ('\\w+', Name.Class), ('"', String, 'string'), ('=', Operator), ('[ \\t]+', Whitespace), default('#pop')], 'root': [('^(archetype|template_overlay|operational_template|template|speciali[sz]e)', Generic.Heading), ('^(language|description|ontology|terminology|annotations|component_terminologies|revision_history)[ \\t]*\\n', Generic.Heading, 'odin_section'), ('^(definition)[ \\t]*\\n', Generic.Heading, 'cadl_section'), ('^(rules)[ \\t]*\\n', Generic.Heading, 'rules_section'), include('archetype_id'), ('([ \\t]*)(\\()', bygroups(Whitespace, Punctuation), 'metadata'), include('whitespace')]}
  }

  class ArrowLexer {
      + name = 'Arrow'
      + url = 'https://pypi.org/project/py-arrow-lang/'
      + aliases = ['arrow']
      + filenames = ['*.arw']
      + version_added = '2.7'
      + tokens = {'root': [('\\s+', Whitespace), ('^[|\\s]+', Punctuation), include('blocks'), include('statements'), include('expressions')], 'blocks': [('(function)(\\n+)(/-->)(\\s*)' + DECL + '(\\()', bygroups(Keyword.Reserved, Whitespace, Punctuation, Whitespace, Keyword.Type, Punctuation, Whitespace, Name.Function, Punctuation), 'fparams'), ('/-->$|\\\\-->$|/--<|\\\\--<|\\^', Punctuation)], 'statements': [(DECL, bygroups(Keyword.Type, Punctuation, Text, Name.Variable)), ('\\[', Punctuation, 'index'), ('=', Operator), ('require|main', Keyword.Reserved), ('print', Keyword.Reserved, 'print')], 'expressions': [('\\s+', Whitespace), ('[0-9]+', Number.Integer), ('true|false', Keyword.Constant), ("'", String.Char, 'char'), ('"', String.Double, 'string'), ('\\{', Punctuation, 'array'), ('==|!=|<|>|\\+|-|\\*|/|%', Operator), ('and|or|not|length', Operator.Word), ('(input)(\\s+)(int|char\\[\\])', bygroups(Keyword.Reserved, Whitespace, Keyword.Type)), (IDENT + '(\\()', bygroups(Name.Function, Punctuation), 'fargs'), (IDENT, Name.Variable), ('\\[', Punctuation, 'index'), ('\\(', Punctuation, 'expressions'), ('\\)', Punctuation, '#pop')], 'print': [include('expressions'), (',', Punctuation), default('#pop')], 'fparams': [(DECL, bygroups(Keyword.Type, Punctuation, Whitespace, Name.Variable)), (',', Punctuation), ('\\)', Punctuation, '#pop')], 'escape': [('\\\\(["\\\\/abfnrtv]|[0-9]{1,3}|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})', String.Escape)], 'char': [("'", String.Char, '#pop'), include('escape'), ("[^'\\\\]", String.Char)], 'string': [('"', String.Double, '#pop'), include('escape'), ('[^"\\\\]+', String.Double)], 'array': [include('expressions'), ('\\}', Punctuation, '#pop'), (',', Punctuation)], 'fargs': [include('expressions'), ('\\)', Punctuation, '#pop'), (',', Punctuation)], 'index': [include('expressions'), ('\\]', Punctuation, '#pop')]}
  }

  class ArturoLexer {
      + name = 'Arturo'
      + aliases = ['arturo', 'art']
      + filenames = ['*.art']
      + url = 'https://arturo-lang.io/'
      + version_added = '2.14'
      + tokens = {'root': [(';.*?$', Comment.Single), ('^((\\s#!)|(#!)).*?$', Comment.Hashbang), (words(('false', 'true', 'maybe'), suffix='\\b'), Name.Constant), (words(('this', 'init'), prefix='\\b', suffix='\\b\\??:?'), Name.Builtin.Pseudo), ('`.`', String.Char), ('\\\\\\w+\\b\\??:?', Name.Property), ('#\\w+', Name.Constant), ('\\b[0-9]+\\.[0-9]+', Number.Float), ('\\b[0-9]+', Number.Integer), ('\\w+\\b\\??:', Name.Label), ("\\'(?:\\w+\\b\\??:?)", Keyword.Declaration), ('\\:\\w+', Keyword.Type), ('\\.\\w+\\??:?', Name.Attribute), ('(\\()(.*?)(\\)\\?)', bygroups(Punctuation, using(this), Punctuation)), ('"', String.Double, 'inside-simple-string'), ('»', String.Single, 'inside-smart-string'), ('«««', String.Double, 'inside-safe-string'), ('\\{\\/', String.Single, 'inside-regex-string'), ('\\{\\:', String.Double, 'inside-curly-verb-string'), ('(\\{)(\\!)(\\w+)(\\s|\\n)([\\w\\W]*?)(^\\})', handle_annotated_strings), ('\\{', String.Single, 'inside-curly-string'), ('\\-{3,}', String.Single, 'inside-eof-string'), include('builtin-functions'), ('[()[\\],]', Punctuation), (words(('->', '==>', '|', '::', '@', '#', '$', '&', '!', '!!', './')), Name.Decorator), (words(('<:', ':>', ':<', '>:', '<\\', '<>', '<', '>', 'ø', '∞', '+', '-', '*', '~', '=', '^', '%', '/', '//', '==>', '<=>', '<==>', '=>>', '<<=>>', '<<==>>', '-->', '<->', '<-->', '=|', '|=', '-:', ':-', '_', '.', '..', '\\')), Operator), ('\\b\\w+', Name), ('\\s+', Text.Whitespace), ('.+$', Error)], 'inside-interpol': [('\\|', String.Interpol, '#pop'), ('[^|]+', using(this))], 'inside-template': [('\\|\\|\\>', String.Interpol, '#pop'), ('[^|]+', using(this))], 'string-escape': [(words(('\\\\', '\\n', '\\t', '\\"')), String.Escape)], 'inside-simple-string': [include('string-escape'), ('\\|', String.Interpol, 'inside-interpol'), ('\\<\\|\\|', String.Interpol, 'inside-template'), ('"', String.Double, '#pop'), ('[^|"]+', String)], 'inside-smart-string': [include('string-escape'), ('\\|', String.Interpol, 'inside-interpol'), ('\\<\\|\\|', String.Interpol, 'inside-template'), ('\\n', String.Single, '#pop'), ('[^|\\n]+', String)], 'inside-safe-string': [include('string-escape'), ('\\|', String.Interpol, 'inside-interpol'), ('\\<\\|\\|', String.Interpol, 'inside-template'), ('»»»', String.Double, '#pop'), ('[^|»]+', String)], 'inside-regex-string': [('\\\\[sSwWdDbBZApPxucItnvfr0]+', String.Escape), ('\\|', String.Interpol, 'inside-interpol'), ('\\<\\|\\|', String.Interpol, 'inside-template'), ('\\/\\}', String.Single, '#pop'), ('[^|\\/]+', String.Regex)], 'inside-curly-verb-string': [include('string-escape'), ('\\|', String.Interpol, 'inside-interpol'), ('\\<\\|\\|', String.Interpol, 'inside-template'), ('\\:\\}', String.Double, '#pop'), ('[^|<:]+', String)], 'inside-curly-string': [include('string-escape'), ('\\|', String.Interpol, 'inside-interpol'), ('\\<\\|\\|', String.Interpol, 'inside-template'), ('\\}', String.Single, '#pop'), ('[^|<}]+', String)], 'inside-eof-string': [include('string-escape'), ('\\|', String.Interpol, 'inside-interpol'), ('\\<\\|\\|', String.Interpol, 'inside-template'), ('\\Z', String.Single, '#pop'), ('[^|<]+', String)], 'builtin-functions': [(words(('all', 'and', 'any', 'ascii', 'attr', 'attribute', 'attributeLabel', 'binary', 'blockchar', 'contains', 'database', 'date', 'dictionary', 'empty', 'equal', 'even', 'every', 'exists', 'false', 'floatin', 'function', 'greater', 'greaterOrEqual', 'if', 'in', 'inline', 'integer', 'is', 'key', 'label', 'leap', 'less', 'lessOrEqual', 'literal', 'logical', 'lower', 'nand', 'negative', 'nor', 'not', 'notEqual', 'null', 'numeric', 'odd', 'or', 'path', 'pathLabel', 'positive', 'prefix', 'prime', 'set', 'some', 'sorted', 'standalone', 'string', 'subset', 'suffix', 'superset', 'ymbol', 'true', 'try', 'type', 'unless', 'upper', 'when', 'whitespace', 'word', 'xnor', 'xor', 'zero'), prefix='\\b', suffix='\\b\\?'), Name.Builtin), (words(('abs', 'acos', 'acosh', 'acsec', 'acsech', 'actan', 'actanh', 'add', 'after', 'alphabet', 'and', 'angle', 'append', 'arg', 'args', 'arity', 'array', 'as', 'asec', 'asech', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'attr', 'attrs', 'average', 'before', 'benchmark', 'blend', 'break', 'builtins1', 'builtins2', 'call', 'capitalize', 'case', 'ceil', 'chop', 'chunk', 'clear', 'close', 'cluster', 'color', 'combine', 'conj', 'continue', 'copy', 'cos', 'cosh', 'couple', 'csec', 'csech', 'ctan', 'ctanh', 'cursor', 'darken', 'dec', 'decode', 'decouple', 'define', 'delete', 'desaturate', 'deviation', 'dictionary', 'difference', 'digest', 'digits', 'div', 'do', 'download', 'drop', 'dup', 'e', 'else', 'empty', 'encode', 'ensure', 'env', 'epsilon', 'escape', 'execute', 'exit', 'exp', 'extend', 'extract', 'factors', 'false', 'fdiv', 'filter', 'first', 'flatten', 'floor', 'fold', 'from', 'function', 'gamma', 'gcd', 'get', 'goto', 'hash', 'help', 'hypot', 'if', 'in', 'inc', 'indent', 'index', 'infinity', 'info', 'input', 'insert', 'inspect', 'intersection', 'invert', 'join', 'keys', 'kurtosis', 'last', 'let', 'levenshtein', 'lighten', 'list', 'ln', 'log', 'loop', 'lower', 'mail', 'map', 'match', 'max', 'maybe', 'median', 'min', 'mod', 'module', 'mul', 'nand', 'neg', 'new', 'nor', 'normalize', 'not', 'now', 'null', 'open', 'or', 'outdent', 'pad', 'panic', 'path', 'pause', 'permissions', 'permutate', 'pi', 'pop', 'pow', 'powerset', 'powmod', 'prefix', 'print', 'prints', 'process', 'product', 'query', 'random', 'range', 'read', 'relative', 'remove', 'rename', 'render', 'repeat', 'replace', 'request', 'return', 'reverse', 'round', 'sample', 'saturate', 'script', 'sec', 'sech', 'select', 'serve', 'set', 'shl', 'shr', 'shuffle', 'sin', 'sinh', 'size', 'skewness', 'slice', 'sort', 'split', 'sqrt', 'squeeze', 'stack', 'strip', 'sub', 'suffix', 'sum', 'switch', 'symbols', 'symlink', 'sys', 'take', 'tan', 'tanh', 'terminal', 'to', 'true', 'truncate', 'try', 'type', 'union', 'unique', 'unless', 'until', 'unzip', 'upper', 'values', 'var', 'variance', 'volume', 'webview', 'while', 'with', 'wordwrap', 'write', 'xnor', 'xor', 'zip'), prefix='\\b', suffix='\\b'), Name.Builtin)]}
  --
      - __init__()
      + handle_annotated_strings(match)
  }

  class AscLexer {
      + name = 'ASCII armored'
      + aliases = ['asc', 'pem']
      + filenames = ['*.asc', '*.pem', 'id_dsa', 'id_ecdsa', 'id_ecdsa_sk', 'id_ed25519', 'id_ed25519_sk', 'id_rsa']
      + mimetypes = ['application/pgp-keys', 'application/pgp-encrypted', 'application/pgp-signature', 'application/pem-certificate-chain']
      + url = 'https://www.openpgp.org'
      + version_added = '2.10'
      + flags = re.MULTILINE
      + tokens = {'root': [('\\s+', Whitespace), ('^-----BEGIN [^\\n]+-----$', Generic.Heading, 'data'), ('\\S+', Comment)], 'data': [('\\s+', Whitespace), ('^([^:]+)(:)([ \\t]+)(.*)', bygroups(Name.Attribute, Operator, Whitespace, String)), ('^-----END [^\\n]+-----$', Generic.Heading, 'root'), ('\\S+', String)]}
  --
      + analyse_text(text)
  }

  class GasLexer {
      + name = 'GAS'
      + aliases = ['gas', 'asm']
      + filenames = ['*.s', '*.S']
      + mimetypes = ['text/x-gas']
      + url = 'https://www.gnu.org/software/binutils'
      + version_added = ''
      + string = '"(\\\\"|[^"])*"'
      + char = '[\\w$.@-]'
      + identifier = '(?:[a-zA-Z$_]' + char + '*|\\.' + char + '+)'
      + number = '(?:0[xX][a-fA-F0-9]+|#?-?\\d+)'
      + register = '%' + identifier + '\\b'
      + tokens = {'root': [include('whitespace'), (identifier + ':', Name.Label), ('\\.' + identifier, Name.Attribute, 'directive-args'), ('lock|rep(n?z)?|data\\d+', Name.Attribute), (identifier, Name.Function, 'instruction-args'), ('[\\r\\n]+', Text)], 'directive-args': [(identifier, Name.Constant), (string, String), ('@' + identifier, Name.Attribute), (number, Number.Integer), (register, Name.Variable), ('[\\r\\n]+', Whitespace, '#pop'), ('([;#]|//).*?\\n', Comment.Single, '#pop'), ('/[*].*?[*]/', Comment.Multiline), ('/[*].*?\\n[\\w\\W]*?[*]/', Comment.Multiline, '#pop'), include('punctuation'), include('whitespace')], 'instruction-args': [('([a-z0-9]+)( )(<)(' + identifier + ')(>)', bygroups(Number.Hex, Text, Punctuation, Name.Constant, Punctuation)), ('([a-z0-9]+)( )(<)(' + identifier + ')([-+])(' + number + ')(>)', bygroups(Number.Hex, Text, Punctuation, Name.Constant, Punctuation, Number.Integer, Punctuation)), (identifier, Name.Constant), (number, Number.Integer), (register, Name.Variable), ('$' + number, Number.Integer), ("$'(.|\\\\')'", String.Char), ('[\\r\\n]+', Whitespace, '#pop'), ('([;#]|//).*?\\n', Comment.Single, '#pop'), ('/[*].*?[*]/', Comment.Multiline), ('/[*].*?\\n[\\w\\W]*?[*]/', Comment.Multiline, '#pop'), include('punctuation'), include('whitespace')], 'whitespace': [('\\n', Whitespace), ('\\s+', Whitespace), ('([;#]|//).*?\\n', Comment.Single), ('/[*][\\w\\W]*?[*]/', Comment.Multiline)], 'punctuation': [('[-*,.()\\[\\]!:{}]+', Punctuation)]}
  --
      + analyse_text(text)
  }

  class ObjdumpLexer {
      + name = 'objdump'
      + aliases = ['objdump']
      + filenames = ['*.objdump']
      + mimetypes = ['text/x-objdump']
      + url = 'https://www.gnu.org/software/binutils'
      + version_added = ''
      + tokens = _objdump_lexer_tokens(GasLexer)
  }

  class DObjdumpLexer {
      + name = 'd-objdump'
      + aliases = ['d-objdump']
      + filenames = ['*.d-objdump']
      + mimetypes = ['text/x-d-objdump']
      + url = 'https://www.gnu.org/software/binutils'
      + version_added = ''
  --
      - __init__()
  }

  class CppObjdumpLexer {
      + name = 'cpp-objdump'
      + aliases = ['cpp-objdump', 'c++-objdumb', 'cxx-objdump']
      + filenames = ['*.cpp-objdump', '*.c++-objdump', '*.cxx-objdump']
      + mimetypes = ['text/x-cpp-objdump']
      + url = 'https://www.gnu.org/software/binutils'
      + version_added = ''
  --
      - __init__()
  }

  class CObjdumpLexer {
      + name = 'c-objdump'
      + aliases = ['c-objdump']
      + filenames = ['*.c-objdump']
      + mimetypes = ['text/x-c-objdump']
      + url = 'https://www.gnu.org/software/binutils'
      + version_added = ''
  --
      - __init__()
  }

  class HsailLexer {
      + name = 'HSAIL'
      + aliases = ['hsail', 'hsa']
      + filenames = ['*.hsail']
      + mimetypes = ['text/x-hsail']
      + url = 'https://en.wikipedia.org/wiki/Heterogeneous_System_Architecture#HSA_Intermediate_Layer'
      + version_added = '2.2'
      + string = '"[^"]*?"'
      + identifier = '[a-zA-Z_][\\w.]*'
      + register_number = '[0-9]+'
      + register = '(\\$(c|s|d|q)' + register_number + ')\\b'
      + alignQual = '(align\\(\\d+\\))'
      + widthQual = '(width\\((\\d+|all)\\))'
      + allocQual = '(alloc\\(agent\\))'
      + roundingMod = '((_ftz)?(_up|_down|_zero|_near))'
      + datatypeMod = '_(u8x4|s8x4|u16x2|s16x2|u8x8|s8x8|u16x4|s16x4|u32x2|s32x2|u8x16|s8x16|u16x8|s16x8|u32x4|s32x4|u64x2|s64x2|f16x2|f16x4|f16x8|f32x2|f32x4|f64x2|u8|s8|u16|s16|u32|s32|u64|s64|b128|b8|b16|b32|b64|b1|f16|f32|f64|roimg|woimg|rwimg|samp|sig32|sig64)'
      + float = '((\\d+\\.)|(\\d*\\.\\d+))[eE][+-]?\\d+'
      + hexfloat = '0[xX](([0-9a-fA-F]+\\.[0-9a-fA-F]*)|([0-9a-fA-F]*\\.[0-9a-fA-F]+))[pP][+-]?\\d+'
      + ieeefloat = '0((h|H)[0-9a-fA-F]{4}|(f|F)[0-9a-fA-F]{8}|(d|D)[0-9a-fA-F]{16})'
      + tokens = {'root': [include('whitespace'), include('comments'), (string, String), ('@' + identifier + ':?', Name.Label), (register, Name.Variable.Anonymous), include('keyword'), ('&' + identifier, Name.Variable.Global), ('%' + identifier, Name.Variable), (hexfloat, Number.Hex), ('0[xX][a-fA-F0-9]+', Number.Hex), (ieeefloat, Number.Float), (float, Number.Float), ('\\d+', Number.Integer), ('[=<>{}\\[\\]()*.,:;!]|x\\b', Punctuation)], 'whitespace': [('(\\n|\\s)+', Whitespace)], 'comments': [('/\\*.*?\\*/', Comment.Multiline), ('//.*?\\n', Comment.Single)], 'keyword': [('kernarg' + datatypeMod, Keyword.Type), ('\\$(full|base|small|large|default|zero|near)', Keyword), (words(('module', 'extension', 'pragma', 'prog', 'indirect', 'signature', 'decl', 'kernel', 'function', 'enablebreakexceptions', 'enabledetectexceptions', 'maxdynamicgroupsize', 'maxflatgridsize', 'maxflatworkgroupsize', 'requireddim', 'requiredgridsize', 'requiredworkgroupsize', 'requirenopartialworkgroups'), suffix='\\b'), Keyword), (roundingMod, Keyword), (datatypeMod, Keyword), ('_(' + alignQual + '|' + widthQual + ')', Keyword), ('_kernarg', Keyword), ('(nop|imagefence)\\b', Keyword), (words(('cleardetectexcept', 'clock', 'cuid', 'debugtrap', 'dim', 'getdetectexcept', 'groupbaseptr', 'kernargbaseptr', 'laneid', 'maxcuid', 'maxwaveid', 'packetid', 'setdetectexcept', 'waveid', 'workitemflatabsid', 'workitemflatid', 'nullptr', 'abs', 'bitrev', 'currentworkgroupsize', 'currentworkitemflatid', 'fract', 'ncos', 'neg', 'nexp2', 'nlog2', 'nrcp', 'nrsqrt', 'nsin', 'nsqrt', 'gridgroups', 'gridsize', 'not', 'sqrt', 'workgroupid', 'workgroupsize', 'workitemabsid', 'workitemid', 'ceil', 'floor', 'rint', 'trunc', 'add', 'bitmask', 'borrow', 'carry', 'copysign', 'div', 'rem', 'sub', 'shl', 'shr', 'and', 'or', 'xor', 'unpackhi', 'unpacklo', 'max', 'min', 'fma', 'mad', 'bitextract', 'bitselect', 'shuffle', 'cmov', 'bitalign', 'bytealign', 'lerp', 'nfma', 'mul', 'mulhi', 'mul24hi', 'mul24', 'mad24', 'mad24hi', 'bitinsert', 'combine', 'expand', 'lda', 'mov', 'pack', 'unpack', 'packcvt', 'unpackcvt', 'sad', 'sementp', 'ftos', 'stof', 'cmp', 'ld', 'st', '_eq', '_ne', '_lt', '_le', '_gt', '_ge', '_equ', '_neu', '_ltu', '_leu', '_gtu', '_geu', '_num', '_nan', '_seq', '_sne', '_slt', '_sle', '_sgt', '_sge', '_snum', '_snan', '_sequ', '_sneu', '_sltu', '_sleu', '_sgtu', '_sgeu', 'atomic', '_ld', '_st', '_cas', '_add', '_and', '_exch', '_max', '_min', '_or', '_sub', '_wrapdec', '_wrapinc', '_xor', 'ret', 'cvt', '_readonly', '_kernarg', '_global', 'br', 'cbr', 'sbr', '_scacq', '_screl', '_scar', '_rlx', '_wave', '_wg', '_agent', '_system', 'ldimage', 'stimage', '_v2', '_v3', '_v4', '_1d', '_2d', '_3d', '_1da', '_2da', '_1db', '_2ddepth', '_2dadepth', '_width', '_height', '_depth', '_array', '_channelorder', '_channeltype', 'querysampler', '_coord', '_filter', '_addressing', 'barrier', 'wavebarrier', 'initfbar', 'joinfbar', 'waitfbar', 'arrivefbar', 'leavefbar', 'releasefbar', 'ldf', 'activelaneid', 'activelanecount', 'activelanemask', 'activelanepermute', 'call', 'scall', 'icall', 'alloca', 'packetcompletionsig', 'addqueuewriteindex', 'casqueuewriteindex', 'ldqueuereadindex', 'stqueuereadindex', 'readonly', 'global', 'private', 'group', 'spill', 'arg', '_upi', '_downi', '_zeroi', '_neari', '_upi_sat', '_downi_sat', '_zeroi_sat', '_neari_sat', '_supi', '_sdowni', '_szeroi', '_sneari', '_supi_sat', '_sdowni_sat', '_szeroi_sat', '_sneari_sat', '_pp', '_ps', '_sp', '_ss', '_s', '_p', '_pp_sat', '_ps_sat', '_sp_sat', '_ss_sat', '_s_sat', '_p_sat')), Keyword), ('i[1-9]\\d*', Keyword)]}
  }

  class LlvmLexer {
      + name = 'LLVM'
      + url = 'https://llvm.org/docs/LangRef.html'
      + aliases = ['llvm']
      + filenames = ['*.ll']
      + mimetypes = ['text/x-llvm']
      + version_added = ''
      + string = '"[^"]*?"'
      + identifier = '([-a-zA-Z$._][\\w\\-$.]*|' + string + ')'
      + block_label = '(' + identifier + '|(\\d+))'
      + tokens = {'root': [include('whitespace'), (block_label + '\\s*:', Name.Label), include('keyword'), ('%' + identifier, Name.Variable), ('@' + identifier, Name.Variable.Global), ('%\\d+', Name.Variable.Anonymous), ('@\\d+', Name.Variable.Global), ('#\\d+', Name.Variable.Global), ('!' + identifier, Name.Variable), ('!\\d+', Name.Variable.Anonymous), ('c?' + string, String), ('0[xX][KLMHR]?[a-fA-F0-9]+', Number), ('-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?', Number), ('[=<>{}\\[\\]()*.,!]|x\\b', Punctuation)], 'whitespace': [('(\\n|\\s+)+', Whitespace), (';.*?\\n', Comment)], 'keyword': [(words(('aarch64_sve_vector_pcs', 'aarch64_vector_pcs', 'acq_rel', 'acquire', 'add', 'addrspace', 'addrspacecast', 'afn', 'alias', 'aliasee', 'align', 'alignLog2', 'alignstack', 'alloca', 'allocsize', 'allOnes', 'alwaysinline', 'alwaysInline', 'amdgpu_cs', 'amdgpu_es', 'amdgpu_gfx', 'amdgpu_gs', 'amdgpu_hs', 'amdgpu_kernel', 'amdgpu_ls', 'amdgpu_ps', 'amdgpu_vs', 'and', 'any', 'anyregcc', 'appending', 'arcp', 'argmemonly', 'args', 'arm_aapcs_vfpcc', 'arm_aapcscc', 'arm_apcscc', 'ashr', 'asm', 'atomic', 'atomicrmw', 'attributes', 'available_externally', 'avr_intrcc', 'avr_signalcc', 'bit', 'bitcast', 'bitMask', 'blockaddress', 'blockcount', 'br', 'branchFunnel', 'builtin', 'byArg', 'byref', 'byte', 'byteArray', 'byval', 'c', 'call', 'callbr', 'callee', 'caller', 'calls', 'canAutoHide', 'catch', 'catchpad', 'catchret', 'catchswitch', 'cc', 'ccc', 'cfguard_checkcc', 'cleanup', 'cleanuppad', 'cleanupret', 'cmpxchg', 'cold', 'coldcc', 'comdat', 'common', 'constant', 'contract', 'convergent', 'critical', 'cxx_fast_tlscc', 'datalayout', 'declare', 'default', 'define', 'deplibs', 'dereferenceable', 'dereferenceable_or_null', 'distinct', 'dllexport', 'dllimport', 'dso_local', 'dso_local_equivalent', 'dso_preemptable', 'dsoLocal', 'eq', 'exact', 'exactmatch', 'extern_weak', 'external', 'externally_initialized', 'extractelement', 'extractvalue', 'fadd', 'false', 'fast', 'fastcc', 'fcmp', 'fdiv', 'fence', 'filter', 'flags', 'fmul', 'fneg', 'fpext', 'fptosi', 'fptoui', 'fptrunc', 'freeze', 'frem', 'from', 'fsub', 'funcFlags', 'function', 'gc', 'getelementptr', 'ghccc', 'global', 'guid', 'gv', 'hash', 'hhvm_ccc', 'hhvmcc', 'hidden', 'hot', 'hotness', 'icmp', 'ifunc', 'inaccessiblemem_or_argmemonly', 'inaccessiblememonly', 'inalloca', 'inbounds', 'indir', 'indirectbr', 'info', 'initialexec', 'inline', 'inlineBits', 'inlinehint', 'inrange', 'inreg', 'insertelement', 'insertvalue', 'insts', 'intel_ocl_bicc', 'inteldialect', 'internal', 'inttoptr', 'invoke', 'jumptable', 'kind', 'landingpad', 'largest', 'linkage', 'linkonce', 'linkonce_odr', 'live', 'load', 'local_unnamed_addr', 'localdynamic', 'localexec', 'lshr', 'max', 'metadata', 'min', 'minsize', 'module', 'monotonic', 'msp430_intrcc', 'mul', 'mustprogress', 'musttail', 'naked', 'name', 'nand', 'ne', 'nest', 'ninf', 'nnan', 'noalias', 'nobuiltin', 'nocallback', 'nocapture', 'nocf_check', 'noduplicate', 'noduplicates', 'nofree', 'noimplicitfloat', 'noinline', 'noInline', 'nomerge', 'none', 'nonlazybind', 'nonnull', 'noprofile', 'norecurse', 'noRecurse', 'noredzone', 'noreturn', 'nosync', 'notail', 'notEligibleToImport', 'noundef', 'nounwind', 'nsw', 'nsz', 'null', 'null_pointer_is_valid', 'nuw', 'oeq', 'offset', 'oge', 'ogt', 'ole', 'olt', 'one', 'opaque', 'optforfuzzing', 'optnone', 'optsize', 'or', 'ord', 'param', 'params', 'partition', 'path', 'personality', 'phi', 'poison', 'preallocated', 'prefix', 'preserve_allcc', 'preserve_mostcc', 'private', 'prologue', 'protected', 'ptrtoint', 'ptx_device', 'ptx_kernel', 'readnone', 'readNone', 'readonly', 'readOnly', 'reassoc', 'refs', 'relbf', 'release', 'resByArg', 'resume', 'ret', 'returnDoesNotAlias', 'returned', 'returns_twice', 'safestack', 'samesize', 'sanitize_address', 'sanitize_hwaddress', 'sanitize_memory', 'sanitize_memtag', 'sanitize_thread', 'sdiv', 'section', 'select', 'seq_cst', 'sext', 'sge', 'sgt', 'shadowcallstack', 'shl', 'shufflevector', 'sideeffect', 'signext', 'single', 'singleImpl', 'singleImplName', 'sitofp', 'sizeM1', 'sizeM1BitWidth', 'sle', 'slt', 'source_filename', 'speculatable', 'speculative_load_hardening', 'spir_func', 'spir_kernel', 'splat', 'srem', 'sret', 'ssp', 'sspreq', 'sspstrong', 'store', 'strictfp', 'sub', 'summaries', 'summary', 'swiftcc', 'swifterror', 'swiftself', 'switch', 'syncscope', 'tail', 'tailcc', 'target', 'thread_local', 'to', 'token', 'triple', 'true', 'trunc', 'type', 'typeCheckedLoadConstVCalls', 'typeCheckedLoadVCalls', 'typeid', 'typeidCompatibleVTable', 'typeIdInfo', 'typeTestAssumeConstVCalls', 'typeTestAssumeVCalls', 'typeTestRes', 'typeTests', 'udiv', 'ueq', 'uge', 'ugt', 'uitofp', 'ule', 'ult', 'umax', 'umin', 'undef', 'une', 'uniformRetVal', 'uniqueRetVal', 'unknown', 'unnamed_addr', 'uno', 'unordered', 'unreachable', 'unsat', 'unwind', 'urem', 'uselistorder', 'uselistorder_bb', 'uwtable', 'va_arg', 'varFlags', 'variable', 'vcall_visibility', 'vFuncId', 'virtFunc', 'virtualConstProp', 'void', 'volatile', 'vscale', 'vTableFuncs', 'weak', 'weak_odr', 'webkit_jscc', 'win64cc', 'within', 'wpdRes', 'wpdResolutions', 'writeonly', 'x', 'x86_64_sysvcc', 'x86_fastcallcc', 'x86_intrcc', 'x86_mmx', 'x86_regcallcc', 'x86_stdcallcc', 'x86_thiscallcc', 'x86_vectorcallcc', 'xchg', 'xor', 'zeroext', 'zeroinitializer', 'zext', 'immarg', 'willreturn'), suffix='\\b'), Keyword), (words(('void', 'half', 'bfloat', 'float', 'double', 'fp128', 'x86_fp80', 'ppc_fp128', 'label', 'metadata', 'x86_mmx', 'x86_amx', 'token', 'ptr')), Keyword.Type), ('i[1-9]\\d*', Keyword.Type)]}
  }

  class LlvmMirBodyLexer {
      + name = 'LLVM-MIR Body'
      + url = 'https://llvm.org/docs/MIRLangRef.html'
      + aliases = ['llvm-mir-body']
      + filenames = []
      + mimetypes = []
      + version_added = '2.6'
      + tokens = {'root': [(words(('liveins', 'successors'), suffix=':'), Keyword), ('bb\\.[0-9]+(\\.[a-zA-Z0-9_.-]+)?( \\(address-taken\\))?:', Name.Label), ('bb\\.[0-9]+ \\(%[a-zA-Z0-9_.-]+\\)( \\(address-taken\\))?:', Name.Label), ('%bb\\.[0-9]+(\\.\\w+)?', Name.Label), ('%stack\\.[0-9]+(\\.\\w+\\.addr)?', Name), ('%subreg\\.\\w+', Name), ('%[a-zA-Z0-9_]+ *', Name.Variable, 'vreg'), include('global'), ('intrinsic\\(\\@[a-zA-Z0-9_.]+\\)', Name.Variable.Global), (words(('eq', 'ne', 'sgt', 'sge', 'slt', 'sle', 'ugt', 'uge', 'ult', 'ule'), prefix='intpred\\(', suffix='\\)'), Name.Builtin), (words(('oeq', 'one', 'ogt', 'oge', 'olt', 'ole', 'ugt', 'uge', 'ult', 'ule'), prefix='floatpred\\(', suffix='\\)'), Name.Builtin), ('\\$\\w+', String.Single), ('=', Operator), ('(G_ANYEXT|G_[SZ]EXT|G_SEXT_INREG|G_TRUNC|G_IMPLICIT_DEF|G_PHI|G_FRAME_INDEX|G_GLOBAL_VALUE|G_INTTOPTR|G_PTRTOINT|G_BITCAST|G_CONSTANT|G_FCONSTANT|G_VASTART|G_VAARG|G_CTLZ|G_CTLZ_ZERO_UNDEF|G_CTTZ|G_CTTZ_ZERO_UNDEF|G_CTPOP|G_BSWAP|G_BITREVERSE|G_ADDRSPACE_CAST|G_BLOCK_ADDR|G_JUMP_TABLE|G_DYN_STACKALLOC|G_ADD|G_SUB|G_MUL|G_[SU]DIV|G_[SU]REM|G_AND|G_OR|G_XOR|G_SHL|G_[LA]SHR|G_[IF]CMP|G_SELECT|G_GEP|G_PTR_MASK|G_SMIN|G_SMAX|G_UMIN|G_UMAX|G_[US]ADDO|G_[US]ADDE|G_[US]SUBO|G_[US]SUBE|G_[US]MULO|G_[US]MULH|G_FNEG|G_FPEXT|G_FPTRUNC|G_FPTO[US]I|G_[US]ITOFP|G_FABS|G_FCOPYSIGN|G_FCANONICALIZE|G_FMINNUM|G_FMAXNUM|G_FMINNUM_IEEE|G_FMAXNUM_IEEE|G_FMINIMUM|G_FMAXIMUM|G_FADD|G_FSUB|G_FMUL|G_FMA|G_FMAD|G_FDIV|G_FREM|G_FPOW|G_FEXP|G_FEXP2|G_FLOG|G_FLOG2|G_FLOG10|G_FCEIL|G_FCOS|G_FSIN|G_FSQRT|G_FFLOOR|G_FRINT|G_FNEARBYINT|G_INTRINSIC_TRUNC|G_INTRINSIC_ROUND|G_LOAD|G_[ZS]EXTLOAD|G_INDEXED_LOAD|G_INDEXED_[ZS]EXTLOAD|G_STORE|G_INDEXED_STORE|G_ATOMIC_CMPXCHG_WITH_SUCCESS|G_ATOMIC_CMPXCHG|G_ATOMICRMW_(XCHG|ADD|SUB|AND|NAND|OR|XOR|MAX|MIN|UMAX|UMIN|FADD|FSUB)|G_FENCE|G_EXTRACT|G_UNMERGE_VALUES|G_INSERT|G_MERGE_VALUES|G_BUILD_VECTOR|G_BUILD_VECTOR_TRUNC|G_CONCAT_VECTORS|G_INTRINSIC|G_INTRINSIC_W_SIDE_EFFECTS|G_BR|G_BRCOND|G_BRINDIRECT|G_BRJT|G_INSERT_VECTOR_ELT|G_EXTRACT_VECTOR_ELT|G_SHUFFLE_VECTOR)\\b', Name.Builtin), ('(COPY|PHI|INSERT_SUBREG|EXTRACT_SUBREG|REG_SEQUENCE)\\b', Name.Builtin), (words(('killed', 'implicit')), Keyword), ('(i[0-9]+)( +)', bygroups(Keyword.Type, Whitespace), 'constantint'), ('(half|float|double) +', Keyword.Type, 'constantfloat'), include('integer'), ('(::)( *)', bygroups(Operator, Whitespace), 'mmo'), (';.*', Comment), ('[a-zA-Z0-9_]+', Name), ('[(), \\n]+', Text)], 'constantint': [include('integer'), ('(?=.)', Text, '#pop')], 'constantfloat': [include('float'), ('(?=.)', Text, '#pop')], 'vreg': [('( *)(:(?!:))', bygroups(Whitespace, Keyword), ('#pop', 'vreg_bank_or_class')), ('( *)(\\()', bygroups(Whitespace, Text), 'vreg_type'), ('(?=.)', Text, '#pop')], 'vreg_bank_or_class': [('( *)(_)', bygroups(Whitespace, Name.Variable.Magic)), ('( *)([a-zA-Z0-9_]+)', bygroups(Whitespace, Name.Variable)), ('( *)(\\()', bygroups(Whitespace, Text), 'vreg_type'), ('(?=.)', Text, '#pop')], 'vreg_type': [('( *)([sp][0-9]+)', bygroups(Whitespace, Keyword.Type)), ('( *)(<[0-9]+ *x *[sp][0-9]+>)', bygroups(Whitespace, Keyword.Type)), ('\\)', Text, '#pop'), ('(?=.)', Text, '#pop')], 'mmo': [('\\(', Text), (' +', Whitespace), (words(('load', 'store', 'on', 'into', 'from', 'align', 'monotonic', 'acquire', 'release', 'acq_rel', 'seq_cst')), Keyword), ('%ir\\.[a-zA-Z0-9_.-]+', Name), ('%ir-block\\.[a-zA-Z0-9_.-]+', Name), ('[-+]', Operator), include('integer'), include('global'), (',', Punctuation), ('\\), \\(', Text), ('\\)', Text, '#pop')], 'integer': [('-?[0-9]+', Number.Integer)], 'float': [('-?[0-9]+\\.[0-9]+(e[+-][0-9]+)?', Number.Float)], 'global': [('\\@[a-zA-Z0-9_.]+', Name.Variable.Global)]}
  }

  class LlvmMirLexer {
      + name = 'LLVM-MIR'
      + url = 'https://llvm.org/docs/MIRLangRef.html'
      + aliases = ['llvm-mir']
      + filenames = ['*.mir']
      + version_added = '2.6'
      + tokens = {'root': [('#.*', Comment), ('--- \\|$', Keyword, 'llvm_ir'), ('---', Keyword, 'llvm_mir'), ('[^-#]+|.', Text)], 'llvm_ir': [('(\\.\\.\\.|(?=---))', Keyword, '#pop'), ('((?:.|\\n)+?)(?=(\\.\\.\\.|---))', bygroups(using(LlvmLexer)))], 'llvm_mir': [('#.*', Comment), ('(\\.\\.\\.|(?=---))', Keyword, '#pop'), ('name:', Keyword, 'name'), (words(('alignment',), suffix=':'), Keyword, 'number'), (words(('legalized', 'regBankSelected', 'tracksRegLiveness', 'selected', 'exposesReturnsTwice'), suffix=':'), Keyword, 'boolean'), (words(('registers', 'stack', 'fixedStack', 'liveins', 'frameInfo', 'machineFunctionInfo'), suffix=':'), Keyword), ('body: *\\|', Keyword, 'llvm_mir_body'), ('.+', Text), ('\\n', Whitespace)], 'name': [('[^\\n]+', Name), default('#pop')], 'boolean': [(' *(true|false)', Name.Builtin), default('#pop')], 'number': [(' *[0-9]+', Number), default('#pop')], 'llvm_mir_body': [('(\\.\\.\\.|(?=---))', Keyword, '#pop:2'), ('((?:.|\\n)+?)(?=\\.\\.\\.|---)', bygroups(using(LlvmMirBodyLexer))), ('(?!\\.\\.\\.|---)((?:.|\\n)+)', bygroups(using(LlvmMirBodyLexer)))]}
  }

  class NasmLexer {
      + name = 'NASM'
      + aliases = ['nasm']
      + filenames = ['*.asm', '*.ASM', '*.nasm']
      + mimetypes = ['text/x-nasm']
      + url = 'https://nasm.us'
      + version_added = ''
      + priority = 1.0
      + identifier = '[a-z$._?][\\w$.?#@~]*'
      + hexn = '(?:0x[0-9a-f]+|$0[0-9a-f]*|[0-9]+[0-9a-f]*h)'
      + octn = '[0-7]+q'
      + binn = '[01]+b'
      + decn = '[0-9]+'
      + floatn = decn + '\\.e?' + decn
      + string = '"(\\\\"|[^"\\n])*"|' + "'(\\\\'|[^'\\n])*'|" + '`(\\\\`|[^`\\n])*`'
      + declkw = '(?:res|d)[bwdqt]|times'
      + register = '(r[0-9][0-5]?[bwd]?|[a-d][lh]|[er]?[a-d]x|[er]?[sb]p|[er]?[sd]i|[c-gs]s|st[0-7]|mm[0-7]|cr[0-4]|dr[0-367]|tr[3-7]|k[0-7]|[xyz]mm(?:[12][0-9]?|3[01]?|[04-9]))\\b'
      + wordop = 'seg|wrt|strict|rel|abs'
      + type = 'byte|[dq]?word'
      + directives = '(?:BITS|USE16|USE32|SECTION|SEGMENT|ABSOLUTE|EXTERN|GLOBAL|ORG|ALIGN|STRUC|ENDSTRUC|COMMON|CPU|GROUP|UPPERCASE|IMPORT|EXPORT|LIBRARY|MODULE)(?=\\s)'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [('^\\s*%', Comment.Preproc, 'preproc'), include('whitespace'), (identifier + ':', Name.Label), (f'({identifier})(\\s+)(equ)', bygroups(Name.Constant, Whitespace, Keyword.Declaration), 'instruction-args'), (directives, Keyword, 'instruction-args'), (declkw, Keyword.Declaration, 'instruction-args'), (identifier, Name.Function, 'instruction-args'), ('[\\r\\n]+', Whitespace)], 'instruction-args': [(string, String), (hexn, Number.Hex), (octn, Number.Oct), (binn, Number.Bin), (floatn, Number.Float), (decn, Number.Integer), include('punctuation'), (register, Name.Builtin), (identifier, Name.Variable), ('[\\r\\n]+', Whitespace, '#pop'), include('whitespace')], 'preproc': [('[^;\\n]+', Comment.Preproc), (';.*?\\n', Comment.Single, '#pop'), ('\\n', Comment.Preproc, '#pop')], 'whitespace': [('\\n', Whitespace), ('[ \\t]+', Whitespace), (';.*', Comment.Single), ('#.*', Comment.Single)], 'punctuation': [('[,{}():\\[\\]]+', Punctuation), ('[&|^<>+*/%~-]+', Operator), ('[$]+', Keyword.Constant), (wordop, Operator.Word), (type, Keyword.Type)]}
  --
      + analyse_text(text)
  }

  class NasmObjdumpLexer {
      + name = 'objdump-nasm'
      + aliases = ['objdump-nasm']
      + filenames = ['*.objdump-intel']
      + mimetypes = ['text/x-nasm-objdump']
      + url = 'https://www.gnu.org/software/binutils'
      + version_added = '2.0'
      + tokens = _objdump_lexer_tokens(NasmLexer)
  }

  class TasmLexer {
      + name = 'TASM'
      + aliases = ['tasm']
      + filenames = ['*.asm', '*.ASM', '*.tasm']
      + mimetypes = ['text/x-tasm']
      + url = 'https://en.wikipedia.org/wiki/Turbo_Assembler'
      + version_added = ''
      + identifier = '[@a-z$._?][\\w$.?#@~]*'
      + hexn = '(?:0x[0-9a-f]+|$0[0-9a-f]*|[0-9]+[0-9a-f]*h)'
      + octn = '[0-7]+q'
      + binn = '[01]+b'
      + decn = '[0-9]+'
      + floatn = decn + '\\.e?' + decn
      + string = '"(\\\\"|[^"\\n])*"|' + "'(\\\\'|[^'\\n])*'|" + '`(\\\\`|[^`\\n])*`'
      + declkw = '(?:res|d)[bwdqt]|times'
      + register = '(r[0-9][0-5]?[bwd]|[a-d][lh]|[er]?[a-d]x|[er]?[sb]p|[er]?[sd]i|[c-gs]s|st[0-7]|mm[0-7]|cr[0-4]|dr[0-367]|tr[3-7])\\b'
      + wordop = 'seg|wrt|strict'
      + type = 'byte|[dq]?word'
      + directives = 'BITS|USE16|USE32|SECTION|SEGMENT|ABSOLUTE|EXTERN|GLOBAL|ORG|ALIGN|STRUC|ENDSTRUC|ENDS|COMMON|CPU|GROUP|UPPERCASE|INCLUDE|EXPORT|LIBRARY|MODULE|PROC|ENDP|USES|ARG|DATASEG|UDATASEG|END|IDEAL|P386|MODEL|ASSUME|CODESEG|SIZE'
      + datatype = 'db|dd|dw|T[A-Z][a-z]+'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [('^\\s*%', Comment.Preproc, 'preproc'), include('whitespace'), (identifier + ':', Name.Label), (directives, Keyword, 'instruction-args'), (f'({identifier})(\\s+)({datatype})', bygroups(Name.Constant, Whitespace, Keyword.Declaration), 'instruction-args'), (declkw, Keyword.Declaration, 'instruction-args'), (identifier, Name.Function, 'instruction-args'), ('[\\r\\n]+', Whitespace)], 'instruction-args': [(string, String), (hexn, Number.Hex), (octn, Number.Oct), (binn, Number.Bin), (floatn, Number.Float), (decn, Number.Integer), include('punctuation'), (register, Name.Builtin), (identifier, Name.Variable), ('(\\\\)(\\s*)(;.*)([\\r\\n])', bygroups(Text, Whitespace, Comment.Single, Whitespace)), ('[\\r\\n]+', Whitespace, '#pop'), include('whitespace')], 'preproc': [('[^;\\n]+', Comment.Preproc), (';.*?\\n', Comment.Single, '#pop'), ('\\n', Comment.Preproc, '#pop')], 'whitespace': [('[\\n\\r]', Whitespace), ('(\\\\)([\\n\\r])', bygroups(Text, Whitespace)), ('[ \\t]+', Whitespace), (';.*', Comment.Single)], 'punctuation': [('[,():\\[\\]]+', Punctuation), ('[&|^<>+*=/%~-]+', Operator), ('[$]+', Keyword.Constant), (wordop, Operator.Word), (type, Keyword.Type)]}
  --
      + analyse_text(text)
  }

  class Ca65Lexer {
      + name = 'ca65 assembler'
      + aliases = ['ca65']
      + filenames = ['*.s']
      + url = 'https://cc65.github.io'
      + version_added = '1.6'
      + flags = re.IGNORECASE
      + tokens = {'root': [(';.*', Comment.Single), ('\\s+', Whitespace), ('[a-z_.@$][\\w.@$]*:', Name.Label), ('((ld|st)[axy]|(in|de)[cxy]|asl|lsr|ro[lr]|adc|sbc|cmp|cp[xy]|cl[cvdi]|se[cdi]|jmp|jsr|bne|beq|bpl|bmi|bvc|bvs|bcc|bcs|p[lh][ap]|rt[is]|brk|nop|ta[xy]|t[xy]a|txs|tsx|and|ora|eor|bit)\\b', Keyword), ('\\.\\w+', Keyword.Pseudo), ('[-+~*/^&|!<>=]', Operator), ('"[^"\\n]*.', String), ("'[^'\\n]*.", String.Char), ('\\$[0-9a-f]+|[0-9a-f]+h\\b', Number.Hex), ('\\d+', Number.Integer), ('%[01]+', Number.Bin), ('[#,.:()=\\[\\]]', Punctuation), ('[a-z_.@$][\\w.@$]*', Name)]}
  --
      + analyse_text(text)
  }

  class Dasm16Lexer {
      + name = 'DASM16'
      + url = 'http://0x10c.com/doc/dcpu-16.txt'
      + aliases = ['dasm16']
      + filenames = ['*.dasm16', '*.dasm']
      + mimetypes = ['text/x-dasm16']
      + version_added = '2.4'
      + INSTRUCTIONS = ['SET', 'ADD', 'SUB', 'MUL', 'MLI', 'DIV', 'DVI', 'MOD', 'MDI', 'AND', 'BOR', 'XOR', 'SHR', 'ASR', 'SHL', 'IFB', 'IFC', 'IFE', 'IFN', 'IFG', 'IFA', 'IFL', 'IFU', 'ADX', 'SBX', 'STI', 'STD', 'JSR', 'INT', 'IAG', 'IAS', 'RFI', 'IAQ', 'HWN', 'HWQ', 'HWI']
      + REGISTERS = ['A', 'B', 'C', 'X', 'Y', 'Z', 'I', 'J', 'SP', 'PC', 'EX', 'POP', 'PEEK', 'PUSH']
      + char = '[a-zA-Z0-9_$@.]'
      + identifier = '(?:[a-zA-Z$_]' + char + '*|\\.' + char + '+)'
      + number = '[+-]?(?:0[xX][a-zA-Z0-9]+|\\d+)'
      + binary_number = '0b[01_]+'
      + instruction = '(?i)(' + '|'.join(INSTRUCTIONS) + ')'
      + single_char = "'\\\\?" + char + "'"
      + string = '"(\\\\"|[^"])*"'
      + tokens = {'root': [include('whitespace'), (':' + identifier, Name.Label), (identifier + ':', Name.Label), (instruction, Name.Function, 'instruction-args'), ('\\.' + identifier, Name.Function, 'data-args'), ('[\\r\\n]+', Whitespace)], 'numeric': [(binary_number, Number.Integer), (number, Number.Integer), (single_char, String)], 'arg': [(identifier, guess_identifier), include('numeric')], 'deref': [('\\+', Punctuation), ('\\]', Punctuation, '#pop'), include('arg'), include('whitespace')], 'instruction-line': [('[\\r\\n]+', Whitespace, '#pop'), (';.*?$', Comment, '#pop'), include('whitespace')], 'instruction-args': [(',', Punctuation), ('\\[', Punctuation, 'deref'), include('arg'), include('instruction-line')], 'data-args': [(',', Punctuation), include('numeric'), (string, String), include('instruction-line')], 'whitespace': [('\\n', Whitespace), ('\\s+', Whitespace), (';.*?\\n', Comment)]}
  --
      + guess_identifier(lexer, match)
  }

  class Asn1Lexer {
      + flags = re.MULTILINE
      + name = 'ASN.1'
      + aliases = ['asn1']
      + filenames = ['*.asn1']
      + url = 'https://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf'
      + version_added = '2.16'
      + tokens = {'root': [('\\s+', Whitespace), ('--.*$', Comment.Single), ('/\\*', Comment.Multiline, 'comment'), ('\\d+\\.\\d*([eE][-+]?\\d+)?', Number.Float), ('\\d+', Number.Integer), ('&?[a-z][-a-zA-Z0-9]*[a-zA-Z0-9]\\b', Name.Variable), (words(('TRUE', 'FALSE', 'NULL', 'MINUS-INFINITY', 'PLUS-INFINITY', 'MIN', 'MAX'), suffix='\\b'), Keyword.Constant), (word_sequences(TWO_WORDS_TYPES), Keyword.Type), (words(SINGLE_WORD_TYPES, suffix='\\b'), Keyword.Type), ('EXPORTS\\s+ALL\\b', Keyword.Namespace), (words(SINGLE_WORD_NAMESPACE_KEYWORDS, suffix='\\b'), Operator.Namespace), (word_sequences(MULTI_WORDS_DECLARATIONS), Keyword.Declaration), (words(SINGLE_WORDS_DECLARATIONS, suffix='\\b'), Keyword.Declaration), (words(OPERATOR_WORDS, suffix='\\b'), Operator.Word), (words(SINGLE_WORD_KEYWORDS), Keyword), ('&?[A-Z][-a-zA-Z0-9]*[a-zA-Z0-9]\\b', Name.Type), ('(::=|\\.\\.\\.|\\.\\.|\\[\\[|\\]\\]|\\||\\^)', Operator), ('(\\.|,|\\{|\\}|\\(|\\)|\\[|\\])', Punctuation), ('"', String, 'string'), ("('[01 ]*')(B)\\b", bygroups(String, String.Affix)), ("('[0-9A-F ]*')(H)\\b", bygroups(String, String.Affix))], 'comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'string': [('""', String), ('"', String, '#pop'), ('[^"]', String)]}
  }

  class AutohotkeyLexer {
      + name = 'autohotkey'
      + url = 'http://www.autohotkey.com/'
      + aliases = ['autohotkey', 'ahk']
      + filenames = ['*.ahk', '*.ahkl']
      + mimetypes = ['text/x-autohotkey']
      + version_added = '1.4'
      + tokens = {'root': [('^(\\s*)(/\\*)', bygroups(Text, Comment.Multiline), 'incomment'), ('^(\\s*)(\\()', bygroups(Text, Generic), 'incontinuation'), ('\\s+;.*?$', Comment.Single), ('^;.*?$', Comment.Single), ('[]{}(),;[]', Punctuation), ('(in|is|and|or|not)\\b', Operator.Word), ('\\%[a-zA-Z_#@$][\\w#@$]*\\%', Name.Variable), ('!=|==|:=|\\.=|<<|>>|[-~+/*%=<>&^|?:!.]', Operator), include('commands'), include('labels'), include('builtInFunctions'), include('builtInVariables'), ('"', String, combined('stringescape', 'dqs')), include('numbers'), ('[a-zA-Z_#@$][\\w#@$]*', Name), ("\\\\|\\'", Text), ('\\`([,%`abfnrtv\\-+;])', String.Escape), include('garbage')], 'incomment': [('^\\s*\\*/', Comment.Multiline, '#pop'), ('[^*]+', Comment.Multiline), ('\\*', Comment.Multiline)], 'incontinuation': [('^\\s*\\)', Generic, '#pop'), ('[^)]', Generic), ('[)]', Generic)], 'commands': [('(?i)^(\\s*)(global|local|static|#AllowSameLineComments|#ClipboardTimeout|#CommentFlag|#ErrorStdOut|#EscapeChar|#HotkeyInterval|#HotkeyModifierTimeout|#Hotstring|#IfWinActive|#IfWinExist|#IfWinNotActive|#IfWinNotExist|#IncludeAgain|#Include|#InstallKeybdHook|#InstallMouseHook|#KeyHistory|#LTrim|#MaxHotkeysPerInterval|#MaxMem|#MaxThreads|#MaxThreadsBuffer|#MaxThreadsPerHotkey|#NoEnv|#NoTrayIcon|#Persistent|#SingleInstance|#UseHook|#WinActivateForce|AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGetFocus|ControlGetPos|ControlGetText|ControlGet|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|Edit|Else|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|IfEqual|IfExist|IfGreaterOrEqual|IfGreater|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|If |ImageSearch|IniDelete|IniRead|IniWrite|InputBox|Input|KeyHistory|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClickDrag|MouseClick|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|RunAs|RunWait|Run|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|Send|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|While|WinActivate|WinActivateBottom|WinClose|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinGet|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimizeAllUndo|WinMinimizeAll|WinMinimize|WinMove|WinRestore|WinSetTitle|WinSet|WinShow|WinWaitActive|WinWaitClose|WinWaitNotActive|WinWait)\\b', bygroups(Text, Name.Builtin))], 'builtInFunctions': [('(?i)(Abs|ACos|Asc|ASin|ATan|Ceil|Chr|Cos|DllCall|Exp|FileExist|Floor|GetKeyState|IL_Add|IL_Create|IL_Destroy|InStr|IsFunc|IsLabel|Ln|Log|LV_Add|LV_Delete|LV_DeleteCol|LV_GetCount|LV_GetNext|LV_GetText|LV_Insert|LV_InsertCol|LV_Modify|LV_ModifyCol|LV_SetImageList|Mod|NumGet|NumPut|OnMessage|RegExMatch|RegExReplace|RegisterCallback|Round|SB_SetIcon|SB_SetParts|SB_SetText|Sin|Sqrt|StrLen|SubStr|Tan|TV_Add|TV_Delete|TV_GetChild|TV_GetCount|TV_GetNext|TV_Get|TV_GetParent|TV_GetPrev|TV_GetSelection|TV_GetText|TV_Modify|VarSetCapacity|WinActive|WinExist|Object|ComObjActive|ComObjArray|ComObjEnwrap|ComObjUnwrap|ComObjParameter|ComObjType|ComObjConnect|ComObjCreate|ComObjGet|ComObjError|ComObjValue|Insert|MinIndex|MaxIndex|Remove|SetCapacity|GetCapacity|GetAddress|_NewEnum|FileOpen|Read|Write|ReadLine|WriteLine|ReadNumType|WriteNumType|RawRead|RawWrite|Seek|Tell|Close|Next|IsObject|StrPut|StrGet|Trim|LTrim|RTrim)\\b', Name.Function)], 'builtInVariables': [('(?i)(A_AhkPath|A_AhkVersion|A_AppData|A_AppDataCommon|A_AutoTrim|A_BatchLines|A_CaretX|A_CaretY|A_ComputerName|A_ControlDelay|A_Cursor|A_DDDD|A_DDD|A_DD|A_DefaultMouseSpeed|A_Desktop|A_DesktopCommon|A_DetectHiddenText|A_DetectHiddenWindows|A_EndChar|A_EventInfo|A_ExitReason|A_FormatFloat|A_FormatInteger|A_Gui|A_GuiEvent|A_GuiControl|A_GuiControlEvent|A_GuiHeight|A_GuiWidth|A_GuiX|A_GuiY|A_Hour|A_IconFile|A_IconHidden|A_IconNumber|A_IconTip|A_Index|A_IPAddress1|A_IPAddress2|A_IPAddress3|A_IPAddress4|A_ISAdmin|A_IsCompiled|A_IsCritical|A_IsPaused|A_IsSuspended|A_KeyDelay|A_Language|A_LastError|A_LineFile|A_LineNumber|A_LoopField|A_LoopFileAttrib|A_LoopFileDir|A_LoopFileExt|A_LoopFileFullPath|A_LoopFileLongPath|A_LoopFileName|A_LoopFileShortName|A_LoopFileShortPath|A_LoopFileSize|A_LoopFileSizeKB|A_LoopFileSizeMB|A_LoopFileTimeAccessed|A_LoopFileTimeCreated|A_LoopFileTimeModified|A_LoopReadLine|A_LoopRegKey|A_LoopRegName|A_LoopRegSubkey|A_LoopRegTimeModified|A_LoopRegType|A_MDAY|A_Min|A_MM|A_MMM|A_MMMM|A_Mon|A_MouseDelay|A_MSec|A_MyDocuments|A_Now|A_NowUTC|A_NumBatchLines|A_OSType|A_OSVersion|A_PriorHotkey|A_ProgramFiles|A_Programs|A_ProgramsCommon|A_ScreenHeight|A_ScreenWidth|A_ScriptDir|A_ScriptFullPath|A_ScriptName|A_Sec|A_Space|A_StartMenu|A_StartMenuCommon|A_Startup|A_StartupCommon|A_StringCaseSense|A_Tab|A_Temp|A_ThisFunc|A_ThisHotkey|A_ThisLabel|A_ThisMenu|A_ThisMenuItem|A_ThisMenuItemPos|A_TickCount|A_TimeIdle|A_TimeIdlePhysical|A_TimeSincePriorHotkey|A_TimeSinceThisHotkey|A_TitleMatchMode|A_TitleMatchModeSpeed|A_UserName|A_WDay|A_WinDelay|A_WinDir|A_WorkingDir|A_YDay|A_YEAR|A_YWeek|A_YYYY|Clipboard|ClipboardAll|ComSpec|ErrorLevel|ProgramFiles|True|False|A_IsUnicode|A_FileEncoding|A_OSVersion|A_PtrSize)\\b', Name.Variable)], 'labels': [('(^\\s*)([^:\\s("]+?:{1,2})', bygroups(Text, Name.Label)), ('(^\\s*)(::[^:\\s]+?::)', bygroups(Text, Name.Label))], 'numbers': [('(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number.Float), ('\\d+[eE][+-]?[0-9]+', Number.Float), ('0\\d+', Number.Oct), ('0[xX][a-fA-F0-9]+', Number.Hex), ('\\d+L', Number.Integer.Long), ('\\d+', Number.Integer)], 'stringescape': [('\\"\\"|\\`([,%`abfnrtv])', String.Escape)], 'strings': [('[^"\\n]+', String)], 'dqs': [('"', String, '#pop'), include('strings')], 'garbage': [('[^\\S\\n]', Text)]}
  }

  class AutoItLexer {
      + name = 'AutoIt'
      + url = 'http://www.autoitscript.com/site/autoit/'
      + aliases = ['autoit']
      + filenames = ['*.au3']
      + mimetypes = ['text/x-autoit']
      + version_added = '1.6'
      + keywords = '    #include-once #include #endregion #forcedef #forceref #region\n    and byref case continueloop dim do else elseif endfunc endif\n    endselect exit exitloop for func global\n    if local next not or return select step\n    then to until wend while exit'.split()
      + functions = '    abs acos adlibregister adlibunregister asc ascw asin assign atan\n    autoitsetoption autoitwingettitle autoitwinsettitle beep binary binarylen\n    binarymid binarytostring bitand bitnot bitor bitrotate bitshift bitxor\n    blockinput break call cdtray ceiling chr chrw clipget clipput consoleread\n    consolewrite consolewriteerror controlclick controlcommand controldisable\n    controlenable controlfocus controlgetfocus controlgethandle controlgetpos\n    controlgettext controlhide controllistview controlmove controlsend\n    controlsettext controlshow controltreeview cos dec dircopy dircreate\n    dirgetsize dirmove dirremove dllcall dllcalladdress dllcallbackfree\n    dllcallbackgetptr dllcallbackregister dllclose dllopen dllstructcreate\n    dllstructgetdata dllstructgetptr dllstructgetsize dllstructsetdata\n    drivegetdrive drivegetfilesystem drivegetlabel drivegetserial drivegettype\n    drivemapadd drivemapdel drivemapget drivesetlabel drivespacefree\n    drivespacetotal drivestatus envget envset envupdate eval execute exp\n    filechangedir fileclose filecopy filecreatentfslink filecreateshortcut\n    filedelete fileexists filefindfirstfile filefindnextfile fileflush\n    filegetattrib filegetencoding filegetlongname filegetpos filegetshortcut\n    filegetshortname filegetsize filegettime filegetversion fileinstall filemove\n    fileopen fileopendialog fileread filereadline filerecycle filerecycleempty\n    filesavedialog fileselectfolder filesetattrib filesetpos filesettime\n    filewrite filewriteline floor ftpsetproxy guicreate guictrlcreateavi\n    guictrlcreatebutton guictrlcreatecheckbox guictrlcreatecombo\n    guictrlcreatecontextmenu guictrlcreatedate guictrlcreatedummy\n    guictrlcreateedit guictrlcreategraphic guictrlcreategroup guictrlcreateicon\n    guictrlcreateinput guictrlcreatelabel guictrlcreatelist\n    guictrlcreatelistview guictrlcreatelistviewitem guictrlcreatemenu\n    guictrlcreatemenuitem guictrlcreatemonthcal guictrlcreateobj\n    guictrlcreatepic guictrlcreateprogress guictrlcreateradio\n    guictrlcreateslider guictrlcreatetab guictrlcreatetabitem\n    guictrlcreatetreeview guictrlcreatetreeviewitem guictrlcreateupdown\n    guictrldelete guictrlgethandle guictrlgetstate guictrlread guictrlrecvmsg\n    guictrlregisterlistviewsort guictrlsendmsg guictrlsendtodummy\n    guictrlsetbkcolor guictrlsetcolor guictrlsetcursor guictrlsetdata\n    guictrlsetdefbkcolor guictrlsetdefcolor guictrlsetfont guictrlsetgraphic\n    guictrlsetimage guictrlsetlimit guictrlsetonevent guictrlsetpos\n    guictrlsetresizing guictrlsetstate guictrlsetstyle guictrlsettip guidelete\n    guigetcursorinfo guigetmsg guigetstyle guiregistermsg guisetaccelerators\n    guisetbkcolor guisetcoord guisetcursor guisetfont guisethelp guiseticon\n    guisetonevent guisetstate guisetstyle guistartgroup guiswitch hex hotkeyset\n    httpsetproxy httpsetuseragent hwnd inetclose inetget inetgetinfo inetgetsize\n    inetread inidelete iniread inireadsection inireadsectionnames\n    inirenamesection iniwrite iniwritesection inputbox int isadmin isarray\n    isbinary isbool isdeclared isdllstruct isfloat ishwnd isint iskeyword\n    isnumber isobj isptr isstring log memgetstats mod mouseclick mouseclickdrag\n    mousedown mousegetcursor mousegetpos mousemove mouseup mousewheel msgbox\n    number objcreate objcreateinterface objevent objevent objget objname\n    onautoitexitregister onautoitexitunregister opt ping pixelchecksum\n    pixelgetcolor pixelsearch pluginclose pluginopen processclose processexists\n    processgetstats processlist processsetpriority processwait processwaitclose\n    progressoff progresson progressset ptr random regdelete regenumkey\n    regenumval regread regwrite round run runas runaswait runwait send\n    sendkeepactive seterror setextended shellexecute shellexecutewait shutdown\n    sin sleep soundplay soundsetwavevolume splashimageon splashoff splashtexton\n    sqrt srandom statusbargettext stderrread stdinwrite stdioclose stdoutread\n    string stringaddcr stringcompare stringformat stringfromasciiarray\n    stringinstr stringisalnum stringisalpha stringisascii stringisdigit\n    stringisfloat stringisint stringislower stringisspace stringisupper\n    stringisxdigit stringleft stringlen stringlower stringmid stringregexp\n    stringregexpreplace stringreplace stringright stringsplit stringstripcr\n    stringstripws stringtoasciiarray stringtobinary stringtrimleft\n    stringtrimright stringupper tan tcpaccept tcpclosesocket tcpconnect\n    tcplisten tcpnametoip tcprecv tcpsend tcpshutdown tcpstartup timerdiff\n    timerinit tooltip traycreateitem traycreatemenu traygetmsg trayitemdelete\n    trayitemgethandle trayitemgetstate trayitemgettext trayitemsetonevent\n    trayitemsetstate trayitemsettext traysetclick trayseticon traysetonevent\n    traysetpauseicon traysetstate traysettooltip traytip ubound udpbind\n    udpclosesocket udpopen udprecv udpsend udpshutdown udpstartup vargettype\n    winactivate winactive winclose winexists winflash wingetcaretpos\n    wingetclasslist wingetclientsize wingethandle wingetpos wingetprocess\n    wingetstate wingettext wingettitle winkill winlist winmenuselectitem\n    winminimizeall winminimizeallundo winmove winsetontop winsetstate\n    winsettitle winsettrans winwait winwaitactive winwaitclose\n    winwaitnotactive'.split()
      + macros = '    @appdatacommondir @appdatadir @autoitexe @autoitpid @autoitversion\n    @autoitx64 @com_eventobj @commonfilesdir @compiled @computername @comspec\n    @cpuarch @cr @crlf @desktopcommondir @desktopdepth @desktopdir\n    @desktopheight @desktoprefresh @desktopwidth @documentscommondir @error\n    @exitcode @exitmethod @extended @favoritescommondir @favoritesdir\n    @gui_ctrlhandle @gui_ctrlid @gui_dragfile @gui_dragid @gui_dropid\n    @gui_winhandle @homedrive @homepath @homeshare @hotkeypressed @hour\n    @ipaddress1 @ipaddress2 @ipaddress3 @ipaddress4 @kblayout @lf\n    @logondnsdomain @logondomain @logonserver @mday @min @mon @msec @muilang\n    @mydocumentsdir @numparams @osarch @osbuild @oslang @osservicepack @ostype\n    @osversion @programfilesdir @programscommondir @programsdir @scriptdir\n    @scriptfullpath @scriptlinenumber @scriptname @sec @startmenucommondir\n    @startmenudir @startupcommondir @startupdir @sw_disable @sw_enable @sw_hide\n    @sw_lock @sw_maximize @sw_minimize @sw_restore @sw_show @sw_showdefault\n    @sw_showmaximized @sw_showminimized @sw_showminnoactive @sw_showna\n    @sw_shownoactivate @sw_shownormal @sw_unlock @systemdir @tab @tempdir\n    @tray_id @trayiconflashing @trayiconvisible @username @userprofiledir @wday\n    @windowsdir @workingdir @yday @year'.split()
      + tokens = {'root': [(';.*\\n', Comment.Single), ('(#comments-start|#cs)(.|\\n)*?(#comments-end|#ce)', Comment.Multiline), ('[\\[\\]{}(),;]', Punctuation), ('(and|or|not)\\b', Operator.Word), ('[$|@][a-zA-Z_]\\w*', Name.Variable), ('!=|==|:=|\\.=|<<|>>|[-~+/*%=<>&^|?:!.]', Operator), include('commands'), include('labels'), include('builtInFunctions'), include('builtInMarcros'), ('"', String, combined('stringescape', 'dqs')), ("'", String, 'sqs'), include('numbers'), ('[a-zA-Z_#@$][\\w#@$]*', Name), ("\\\\|\\'", Text), ('\\`([,%`abfnrtv\\-+;])', String.Escape), ('_\\n', Text), include('garbage')], 'commands': [('(?i)(\\s*)({})\\b'.format('|'.join(keywords)), bygroups(Text, Name.Builtin))], 'builtInFunctions': [('(?i)({})\\b'.format('|'.join(functions)), Name.Function)], 'builtInMarcros': [('(?i)({})\\b'.format('|'.join(macros)), Name.Variable.Global)], 'labels': [('(^\\s*)(\\{\\S+?\\})', bygroups(Text, Name.Label))], 'numbers': [('(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number.Float), ('\\d+[eE][+-]?[0-9]+', Number.Float), ('0\\d+', Number.Oct), ('0[xX][a-fA-F0-9]+', Number.Hex), ('\\d+L', Number.Integer.Long), ('\\d+', Number.Integer)], 'stringescape': [('\\"\\"|\\`([,%`abfnrtv])', String.Escape)], 'strings': [('[^"\\n]+', String)], 'dqs': [('"', String, '#pop'), include('strings')], 'sqs': [("\\'\\'|\\`([,%`abfnrtv])", String.Escape), ("'", String, '#pop'), ("[^'\\n]+", String)], 'garbage': [('[^\\S\\n]', Text)]}
  }

  class BareLexer {
      + name = 'BARE'
      + url = 'https://baremessages.org'
      + filenames = ['*.bare']
      + aliases = ['bare']
      + version_added = '2.7'
      + keywords = ['type', 'enum', 'u8', 'u16', 'u32', 'u64', 'uint', 'i8', 'i16', 'i32', 'i64', 'int', 'f32', 'f64', 'bool', 'void', 'data', 'string', 'optional', 'map']
      + tokens = {'root': [('(type)(\\s+)([A-Z][a-zA-Z0-9]+)(\\s+)(\\{)', bygroups(Keyword, Whitespace, Name.Class, Whitespace, Text), 'struct'), ('(type)(\\s+)([A-Z][a-zA-Z0-9]+)(\\s+)(\\()', bygroups(Keyword, Whitespace, Name.Class, Whitespace, Text), 'union'), ('(type)(\\s+)([A-Z][a-zA-Z0-9]+)(\\s+)', bygroups(Keyword, Whitespace, Name, Whitespace), 'typedef'), ('(enum)(\\s+)([A-Z][a-zA-Z0-9]+)(\\s+\\{)', bygroups(Keyword, Whitespace, Name.Class, Whitespace), 'enum'), ('#.*?$', Comment), ('\\s+', Whitespace)], 'struct': [('\\{', Text, '#push'), ('\\}', Text, '#pop'), ('([a-zA-Z0-9]+)(:)(\\s*)', bygroups(Name.Attribute, Text, Whitespace), 'typedef'), ('\\s+', Whitespace)], 'union': [('\\)', Text, '#pop'), ('(\\s*)(\\|)(\\s*)', bygroups(Whitespace, Text, Whitespace)), ('[A-Z][a-zA-Z0-9]+', Name.Class), (words(keywords), Keyword), ('\\s+', Whitespace)], 'typedef': [('\\[\\]', Text), ('#.*?$', Comment, '#pop'), ('(\\[)(\\d+)(\\])', bygroups(Text, Literal, Text)), ('<|>', Text), ('\\(', Text, 'union'), ('(\\[)([a-z][a-z-A-Z0-9]+)(\\])', bygroups(Text, Keyword, Text)), ('(\\[)([A-Z][a-z-A-Z0-9]+)(\\])', bygroups(Text, Name.Class, Text)), ('([A-Z][a-z-A-Z0-9]+)', Name.Class), (words(keywords), Keyword), ('\\n', Text, '#pop'), ('\\{', Text, 'struct'), ('\\s+', Whitespace), ('\\d+', Literal)], 'enum': [('\\{', Text, '#push'), ('\\}', Text, '#pop'), ('([A-Z][A-Z0-9_]*)(\\s*=\\s*)(\\d+)', bygroups(Name.Attribute, Text, Literal)), ('([A-Z][A-Z0-9_]*)', bygroups(Name.Attribute)), ('#.*?$', Comment), ('\\s+', Whitespace)]}
  }

  class BlitzMaxLexer {
      + name = 'BlitzMax'
      + url = 'http://blitzbasic.com'
      + aliases = ['blitzmax', 'bmax']
      + filenames = ['*.bmx']
      + mimetypes = ['text/x-bmx']
      + version_added = '1.4'
      + bmax_vopwords = '\\b(Shl|Shr|Sar|Mod)\\b'
      + bmax_sktypes = '@{1,2}|[!#$%]'
      + bmax_lktypes = '\\b(Int|Byte|Short|Float|Double|Long)\\b'
      + bmax_name = '[a-z_]\\w*'
      + bmax_var = f'({bmax_name})(?:(?:([ \\t]*)({bmax_sktypes})|([ \\t]*:[ \\t]*\\b(?:Shl|Shr|Sar|Mod)\\b)|([ \\t]*)(:)([ \\t]*)(?:{bmax_lktypes}|({bmax_name})))(?:([ \\t]*)(Ptr))?)'
      + bmax_func = bmax_var + '?((?:[ \\t]|\\.\\.\\n)*)([(])'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('(\\.\\.)(\\n)', bygroups(Text, Whitespace)), ("'.*?\\n", Comment.Single), ('([ \\t]*)\\bRem\\n(\\n|.)*?\\s*\\bEnd([ \\t]*)Rem', Comment.Multiline), ('"', String.Double, 'string'), ('[0-9]+\\.[0-9]*(?!\\.)', Number.Float), ('\\.[0-9]*(?!\\.)', Number.Float), ('[0-9]+', Number.Integer), ('\\$[0-9a-f]+', Number.Hex), ('\\%[10]+', Number.Bin), (f'(?:(?:(:)?([ \\t]*)(:?{bmax_vopwords}|([+\\-*/&|~]))|Or|And|Not|[=<>^]))', Operator), ('[(),.:\\[\\]]', Punctuation), ('(?:#[\\w \\t]*)', Name.Label), ('(?:\\?[\\w \\t]*)', Comment.Preproc), (f'\\b(New)\\b([ \\t]?)([(]?)({bmax_name})', bygroups(Keyword.Reserved, Whitespace, Punctuation, Name.Class)), (f'\\b(Import|Framework|Module)([ \\t]+)({bmax_name}\\.{bmax_name})', bygroups(Keyword.Reserved, Whitespace, Keyword.Namespace)), (bmax_func, bygroups(Name.Function, Whitespace, Keyword.Type, Operator, Whitespace, Punctuation, Whitespace, Keyword.Type, Name.Class, Whitespace, Keyword.Type, Whitespace, Punctuation)), (bmax_var, bygroups(Name.Variable, Whitespace, Keyword.Type, Operator, Whitespace, Punctuation, Whitespace, Keyword.Type, Name.Class, Whitespace, Keyword.Type)), (f'\\b(Type|Extends)([ \\t]+)({bmax_name})', bygroups(Keyword.Reserved, Whitespace, Name.Class)), ('\\b(Ptr)\\b', Keyword.Type), ('\\b(Pi|True|False|Null|Self|Super)\\b', Keyword.Constant), ('\\b(Local|Global|Const|Field)\\b', Keyword.Declaration), (words(('TNullMethodException', 'TNullFunctionException', 'TNullObjectException', 'TArrayBoundsException', 'TRuntimeException'), prefix='\\b', suffix='\\b'), Name.Exception), (words(('Strict', 'SuperStrict', 'Module', 'ModuleInfo', 'End', 'Return', 'Continue', 'Exit', 'Public', 'Private', 'Var', 'VarPtr', 'Chr', 'Len', 'Asc', 'SizeOf', 'Sgn', 'Abs', 'Min', 'Max', 'New', 'Release', 'Delete', 'Incbin', 'IncbinPtr', 'IncbinLen', 'Framework', 'Include', 'Import', 'Extern', 'EndExtern', 'Function', 'EndFunction', 'Type', 'EndType', 'Extends', 'Method', 'EndMethod', 'Abstract', 'Final', 'If', 'Then', 'Else', 'ElseIf', 'EndIf', 'For', 'To', 'Next', 'Step', 'EachIn', 'While', 'Wend', 'EndWhile', 'Repeat', 'Until', 'Forever', 'Select', 'Case', 'Default', 'EndSelect', 'Try', 'Catch', 'EndTry', 'Throw', 'Assert', 'Goto', 'DefData', 'ReadData', 'RestoreData'), prefix='\\b', suffix='\\b'), Keyword.Reserved), (f'({bmax_name})', Name.Variable)], 'string': [('""', String.Double), ('"C?', String.Double, '#pop'), ('[^"]+', String.Double)]}
  }

  class BlitzBasicLexer {
      + name = 'BlitzBasic'
      + url = 'http://blitzbasic.com'
      + aliases = ['blitzbasic', 'b3d', 'bplus']
      + filenames = ['*.bb', '*.decls']
      + mimetypes = ['text/x-bb']
      + version_added = '2.0'
      + bb_sktypes = '@{1,2}|[#$%]'
      + bb_name = '[a-z]\\w*'
      + bb_var = f'({bb_name})(?:([ \\t]*)({bb_sktypes})|([ \\t]*)([.])([ \\t]*)(?:({bb_name})))?'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), (';.*?\\n', Comment.Single), ('"', String.Double, 'string'), ('[0-9]+\\.[0-9]*(?!\\.)', Number.Float), ('\\.[0-9]+(?!\\.)', Number.Float), ('[0-9]+', Number.Integer), ('\\$[0-9a-f]+', Number.Hex), ('\\%[10]+', Number.Bin), (words(('Shl', 'Shr', 'Sar', 'Mod', 'Or', 'And', 'Not', 'Abs', 'Sgn', 'Handle', 'Int', 'Float', 'Str', 'First', 'Last', 'Before', 'After'), prefix='\\b', suffix='\\b'), Operator), ('([+\\-*/~=<>^])', Operator), ('[(),:\\[\\]\\\\]', Punctuation), (f'\\.([ \\t]*)({bb_name})', Name.Label), (f'\\b(New)\\b([ \\t]+)({bb_name})', bygroups(Keyword.Reserved, Whitespace, Name.Class)), (f'\\b(Gosub|Goto)\\b([ \\t]+)({bb_name})', bygroups(Keyword.Reserved, Whitespace, Name.Label)), (f'\\b(Object)\\b([ \\t]*)([.])([ \\t]*)({bb_name})\\b', bygroups(Operator, Whitespace, Punctuation, Whitespace, Name.Class)), (f'\\b{bb_var}\\b([ \\t]*)(\\()', bygroups(Name.Function, Whitespace, Keyword.Type, Whitespace, Punctuation, Whitespace, Name.Class, Whitespace, Punctuation)), (f'\\b(Function)\\b([ \\t]+){bb_var}', bygroups(Keyword.Reserved, Whitespace, Name.Function, Whitespace, Keyword.Type, Whitespace, Punctuation, Whitespace, Name.Class)), (f'\\b(Type)([ \\t]+)({bb_name})', bygroups(Keyword.Reserved, Whitespace, Name.Class)), ('\\b(Pi|True|False|Null)\\b', Keyword.Constant), ('\\b(Local|Global|Const|Field|Dim)\\b', Keyword.Declaration), (words(('End', 'Return', 'Exit', 'Chr', 'Len', 'Asc', 'New', 'Delete', 'Insert', 'Include', 'Function', 'Type', 'If', 'Then', 'Else', 'ElseIf', 'EndIf', 'For', 'To', 'Next', 'Step', 'Each', 'While', 'Wend', 'Repeat', 'Until', 'Forever', 'Select', 'Case', 'Default', 'Goto', 'Gosub', 'Data', 'Read', 'Restore'), prefix='\\b', suffix='\\b'), Keyword.Reserved), (bb_var, bygroups(Name.Variable, Whitespace, Keyword.Type, Whitespace, Punctuation, Whitespace, Name.Class))], 'string': [('""', String.Double), ('"C?', String.Double, '#pop'), ('[^"\\n]+', String.Double)]}
  }

  class MonkeyLexer {
      + name = 'Monkey'
      + aliases = ['monkey']
      + filenames = ['*.monkey']
      + mimetypes = ['text/x-monkey']
      + url = 'https://blitzresearch.itch.io/monkeyx'
      + version_added = '1.6'
      + name_variable = '[a-z_]\\w*'
      + name_function = '[A-Z]\\w*'
      + name_constant = '[A-Z_][A-Z0-9_]*'
      + name_class = '[A-Z]\\w*'
      + name_module = '[a-z0-9_]*'
      + keyword_type = '(?:Int|Float|String|Bool|Object|Array|Void)'
      + keyword_type_special = '[?%#$]'
      + flags = re.MULTILINE
      + tokens = {'root': [('\\s+', Whitespace), ("'.*", Comment), ('(?i)^#rem\\b', Comment.Multiline, 'comment'), ('(?i)^(?:#If|#ElseIf|#Else|#EndIf|#End|#Print|#Error)\\b', Comment.Preproc), ('^#', Comment.Preproc, 'variables'), ('"', String.Double, 'string'), ('[0-9]+\\.[0-9]*(?!\\.)', Number.Float), ('\\.[0-9]+(?!\\.)', Number.Float), ('[0-9]+', Number.Integer), ('\\$[0-9a-fA-Z]+', Number.Hex), ('\\%[10]+', Number.Bin), (f'\\b{keyword_type}\\b', Keyword.Type), ('(?i)\\b(?:Try|Catch|Throw)\\b', Keyword.Reserved), ('Throwable', Name.Exception), ('(?i)\\b(?:Null|True|False)\\b', Name.Builtin), ('(?i)\\b(?:Self|Super)\\b', Name.Builtin.Pseudo), ('\\b(?:HOST|LANG|TARGET|CONFIG)\\b', Name.Constant), ('(?i)^(Import)(\\s+)(.*)(\\n)', bygroups(Keyword.Namespace, Whitespace, Name.Namespace, Whitespace)), ('(?i)^Strict\\b.*\\n', Keyword.Reserved), ('(?i)(Const|Local|Global|Field)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'variables'), ('(?i)(New|Class|Interface|Extends|Implements)(\\s+)', bygroups(Keyword.Reserved, Whitespace), 'classname'), ('(?i)(Function|Method)(\\s+)', bygroups(Keyword.Reserved, Whitespace), 'funcname'), ('(?i)(?:End|Return|Public|Private|Extern|Property|Final|Abstract)\\b', Keyword.Reserved), ('(?i)(?:If|Then|Else|ElseIf|EndIf|Select|Case|Default|While|Wend|Repeat|Until|Forever|For|To|Until|Step|EachIn|Next|Exit|Continue)(?=\\s)', Keyword.Reserved), ('(?i)\\b(?:Module|Inline)\\b', Keyword.Reserved), ('[\\[\\]]', Punctuation), ('<=|>=|<>|\\*=|/=|\\+=|-=|&=|~=|\\|=|[-&*/^+=<>|~]', Operator), ('(?i)(?:Not|Mod|Shl|Shr|And|Or)', Operator.Word), ('[(){}!#,.:]', Punctuation), (f'{name_constant}\\b', Name.Constant), (f'{name_function}\\b', Name.Function), (f'{name_variable}\\b', Name.Variable)], 'funcname': [(f'(?i){name_function}\\b', Name.Function), (':', Punctuation, 'classname'), ('\\s+', Whitespace), ('\\(', Punctuation, 'variables'), ('\\)', Punctuation, '#pop')], 'classname': [(f'{name_module}\\.', Name.Namespace), (f'{keyword_type}\\b', Keyword.Type), (f'{name_class}\\b', Name.Class), ('(\\[)(\\s*)(\\d*)(\\s*)(\\])', bygroups(Punctuation, Whitespace, Number.Integer, Whitespace, Punctuation)), ('\\s+(?!<)', Whitespace, '#pop'), ('<', Punctuation, '#push'), ('>', Punctuation, '#pop'), ('\\n', Whitespace, '#pop'), default('#pop')], 'variables': [(f'{name_constant}\\b', Name.Constant), (f'{name_variable}\\b', Name.Variable), (f'{keyword_type_special}', Keyword.Type), ('\\s+', Whitespace), (':', Punctuation, 'classname'), (',', Punctuation, '#push'), default('#pop')], 'string': [('[^"~]+', String.Double), ('~q|~n|~r|~t|~z|~~', String.Escape), ('"', String.Double, '#pop')], 'comment': [('(?i)^#rem.*?', Comment.Multiline, '#push'), ('(?i)^#end.*?', Comment.Multiline, '#pop'), ('\\n', Comment.Multiline), ('.+', Comment.Multiline)]}
  }

  class CbmBasicV2Lexer {
      + name = 'CBM BASIC V2'
      + aliases = ['cbmbas']
      + filenames = ['*.bas']
      + url = 'https://en.wikipedia.org/wiki/Commodore_BASIC'
      + version_added = '1.6'
      + flags = re.IGNORECASE
      + tokens = {'root': [('rem.*\\n', Comment.Single), ('\\s+', Whitespace), ('new|run|end|for|to|next|step|go(to|sub)?|on|return|stop|cont|if|then|input#?|read|wait|load|save|verify|poke|sys|print#?|list|clr|cmd|open|close|get#?', Keyword.Reserved), ('data|restore|dim|let|def|fn', Keyword.Declaration), ('tab|spc|sgn|int|abs|usr|fre|pos|sqr|rnd|log|exp|cos|sin|tan|atn|peek|len|val|asc|(str|chr|left|right|mid)\\$', Name.Builtin), ('[-+*/^<>=]', Operator), ('not|and|or', Operator.Word), ('"[^"\\n]*.', String), ('\\d+|[-+]?\\d*\\.\\d*(e[-+]?\\d+)?', Number.Float), ('[(),:;]', Punctuation), ('\\w+[$%]?', Name)]}
  --
      + analyse_text(text)
  }

  class QBasicLexer {
      + name = 'QBasic'
      + aliases = ['qbasic', 'basic']
      + filenames = ['*.BAS', '*.bas']
      + mimetypes = ['text/basic']
      + url = 'https://en.wikipedia.org/wiki/QBasic'
      + version_added = '2.0'
      + declarations = ('DATA', 'LET')
      + functions = ('ABS', 'ASC', 'ATN', 'CDBL', 'CHR$', 'CINT', 'CLNG', 'COMMAND$', 'COS', 'CSNG', 'CSRLIN', 'CVD', 'CVDMBF', 'CVI', 'CVL', 'CVS', 'CVSMBF', 'DATE$', 'ENVIRON$', 'EOF', 'ERDEV', 'ERDEV$', 'ERL', 'ERR', 'EXP', 'FILEATTR', 'FIX', 'FRE', 'FREEFILE', 'HEX$', 'INKEY$', 'INP', 'INPUT$', 'INSTR', 'INT', 'IOCTL$', 'LBOUND', 'LCASE$', 'LEFT$', 'LEN', 'LOC', 'LOF', 'LOG', 'LPOS', 'LTRIM$', 'MID$', 'MKD$', 'MKDMBF$', 'MKI$', 'MKL$', 'MKS$', 'MKSMBF$', 'OCT$', 'PEEK', 'PEN', 'PLAY', 'PMAP', 'POINT', 'POS', 'RIGHT$', 'RND', 'RTRIM$', 'SADD', 'SCREEN', 'SEEK', 'SETMEM', 'SGN', 'SIN', 'SPACE$', 'SPC', 'SQR', 'STICK', 'STR$', 'STRIG', 'STRING$', 'TAB', 'TAN', 'TIME$', 'TIMER', 'UBOUND', 'UCASE$', 'VAL', 'VARPTR', 'VARPTR$', 'VARSEG')
      + metacommands = ('$DYNAMIC', '$INCLUDE', '$STATIC')
      + operators = ('AND', 'EQV', 'IMP', 'NOT', 'OR', 'XOR')
      + statements = ('BEEP', 'BLOAD', 'BSAVE', 'CALL', 'CALL ABSOLUTE', 'CALL INTERRUPT', 'CALLS', 'CHAIN', 'CHDIR', 'CIRCLE', 'CLEAR', 'CLOSE', 'CLS', 'COLOR', 'COM', 'COMMON', 'CONST', 'DATA', 'DATE$', 'DECLARE', 'DEF FN', 'DEF SEG', 'DEFDBL', 'DEFINT', 'DEFLNG', 'DEFSNG', 'DEFSTR', 'DEF', 'DIM', 'DO', 'LOOP', 'DRAW', 'END', 'ENVIRON', 'ERASE', 'ERROR', 'EXIT', 'FIELD', 'FILES', 'FOR', 'NEXT', 'FUNCTION', 'GET', 'GOSUB', 'GOTO', 'IF', 'THEN', 'INPUT', 'INPUT #', 'IOCTL', 'KEY', 'KEY', 'KILL', 'LET', 'LINE', 'LINE INPUT', 'LINE INPUT #', 'LOCATE', 'LOCK', 'UNLOCK', 'LPRINT', 'LSET', 'MID$', 'MKDIR', 'NAME', 'ON COM', 'ON ERROR', 'ON KEY', 'ON PEN', 'ON PLAY', 'ON STRIG', 'ON TIMER', 'ON UEVENT', 'ON', 'OPEN', 'OPEN COM', 'OPTION BASE', 'OUT', 'PAINT', 'PALETTE', 'PCOPY', 'PEN', 'PLAY', 'POKE', 'PRESET', 'PRINT', 'PRINT #', 'PRINT USING', 'PSET', 'PUT', 'PUT', 'RANDOMIZE', 'READ', 'REDIM', 'REM', 'RESET', 'RESTORE', 'RESUME', 'RETURN', 'RMDIR', 'RSET', 'RUN', 'SCREEN', 'SEEK', 'SELECT CASE', 'SHARED', 'SHELL', 'SLEEP', 'SOUND', 'STATIC', 'STOP', 'STRIG', 'SUB', 'SWAP', 'SYSTEM', 'TIME$', 'TIMER', 'TROFF', 'TRON', 'TYPE', 'UEVENT', 'UNLOCK', 'VIEW', 'WAIT', 'WHILE', 'WEND', 'WIDTH', 'WINDOW', 'WRITE')
      + keywords = ('ACCESS', 'ALIAS', 'ANY', 'APPEND', 'AS', 'BASE', 'BINARY', 'BYVAL', 'CASE', 'CDECL', 'DOUBLE', 'ELSE', 'ELSEIF', 'ENDIF', 'INTEGER', 'IS', 'LIST', 'LOCAL', 'LONG', 'LOOP', 'MOD', 'NEXT', 'OFF', 'ON', 'OUTPUT', 'RANDOM', 'SIGNAL', 'SINGLE', 'STEP', 'STRING', 'THEN', 'TO', 'UNTIL', 'USING', 'WEND')
      + tokens = {'root': [('\\n+', Text), ('\\s+', Text.Whitespace), ('^(\\s*)(\\d*)(\\s*)(REM .*)$', bygroups(Text.Whitespace, Name.Label, Text.Whitespace, Comment.Single)), ('^(\\s*)(\\d+)(\\s*)', bygroups(Text.Whitespace, Name.Label, Text.Whitespace)), ('(?=[\\s]*)(\\w+)(?=[\\s]*=)', Name.Variable.Global), ('(?=[^"]*)\\\'.*$', Comment.Single), ('"[^\\n"]*"', String.Double), ('(END)(\\s+)(FUNCTION|IF|SELECT|SUB)', bygroups(Keyword.Reserved, Text.Whitespace, Keyword.Reserved)), ('(DECLARE)(\\s+)([A-Z]+)(\\s+)(\\S+)', bygroups(Keyword.Declaration, Text.Whitespace, Name.Variable, Text.Whitespace, Name)), ('(DIM)(\\s+)(SHARED)(\\s+)([^\\s(]+)', bygroups(Keyword.Declaration, Text.Whitespace, Name.Variable, Text.Whitespace, Name.Variable.Global)), ('(DIM)(\\s+)([^\\s(]+)', bygroups(Keyword.Declaration, Text.Whitespace, Name.Variable.Global)), ('^(\\s*)([a-zA-Z_]+)(\\s*)(\\=)', bygroups(Text.Whitespace, Name.Variable.Global, Text.Whitespace, Operator)), ('(GOTO|GOSUB)(\\s+)(\\w+\\:?)', bygroups(Keyword.Reserved, Text.Whitespace, Name.Label)), ('(SUB)(\\s+)(\\w+\\:?)', bygroups(Keyword.Reserved, Text.Whitespace, Name.Label)), include('declarations'), include('functions'), include('metacommands'), include('operators'), include('statements'), include('keywords'), ('[a-zA-Z_]\\w*[$@#&!]', Name.Variable.Global), ('[a-zA-Z_]\\w*\\:', Name.Label), ('\\-?\\d*\\.\\d+[@|#]?', Number.Float), ('\\-?\\d+[@|#]', Number.Float), ('\\-?\\d+#?', Number.Integer.Long), ('\\-?\\d+#?', Number.Integer), ('!=|==|:=|\\.=|<<|>>|[-~+/\\\\*%=<>&^|?:!.]', Operator), ('[\\[\\]{}(),;]', Punctuation), ('[\\w]+', Name.Variable.Global)], 'declarations': [('\\b({})(?=\\(|\\b)'.format('|'.join(map(re.escape, declarations))), Keyword.Declaration)], 'functions': [('\\b({})(?=\\(|\\b)'.format('|'.join(map(re.escape, functions))), Keyword.Reserved)], 'metacommands': [('\\b({})(?=\\(|\\b)'.format('|'.join(map(re.escape, metacommands))), Keyword.Constant)], 'operators': [('\\b({})(?=\\(|\\b)'.format('|'.join(map(re.escape, operators))), Operator.Word)], 'statements': [('\\b({})\\b'.format('|'.join(map(re.escape, statements))), Keyword.Reserved)], 'keywords': [('\\b({})\\b'.format('|'.join(keywords)), Keyword)]}
  --
      + analyse_text(text)
  }

  class VBScriptLexer {
      + name = 'VBScript'
      + aliases = ['vbscript']
      + filenames = ['*.vbs', '*.VBS']
      + url = 'https://learn.microsoft.com/en-us/previous-versions/t0aew7h6(v=vs.85)'
      + version_added = '2.4'
      + flags = re.IGNORECASE
      + tokens = {'root': [("'[^\\n]*", Comment.Single), ('\\s+', Whitespace), ('"', String.Double, 'string'), ('&h[0-9a-f]+', Number.Hex), ('[0-9]+\\.[0-9]*(e[+-]?[0-9]+)?', Number.Float), ('\\.[0-9]+(e[+-]?[0-9]+)?', Number.Float), ('[0-9]+e[+-]?[0-9]+', Number.Float), ('[0-9]+', Number.Integer), ('#.+#', String), ('(dim)(\\s+)([a-z_][a-z0-9_]*)', bygroups(Keyword.Declaration, Whitespace, Name.Variable), 'dim_more'), ('(function|sub)(\\s+)([a-z_][a-z0-9_]*)', bygroups(Keyword.Declaration, Whitespace, Name.Function)), ('(class)(\\s+)([a-z_][a-z0-9_]*)', bygroups(Keyword.Declaration, Whitespace, Name.Class)), ('(const)(\\s+)([a-z_][a-z0-9_]*)', bygroups(Keyword.Declaration, Whitespace, Name.Constant)), ('(end)(\\s+)(class|function|if|property|sub|with)', bygroups(Keyword, Whitespace, Keyword)), ('(on)(\\s+)(error)(\\s+)(goto)(\\s+)(0)', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword, Whitespace, Number.Integer)), ('(on)(\\s+)(error)(\\s+)(resume)(\\s+)(next)', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword, Whitespace, Keyword)), ('(option)(\\s+)(explicit)', bygroups(Keyword, Whitespace, Keyword)), ('(property)(\\s+)(get|let|set)(\\s+)([a-z_][a-z0-9_]*)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration, Whitespace, Name.Property)), ('rem\\s.*[^\\n]*', Comment.Single), (words(_vbscript_builtins.KEYWORDS, suffix='\\b'), Keyword), (words(_vbscript_builtins.OPERATORS), Operator), (words(_vbscript_builtins.OPERATOR_WORDS, suffix='\\b'), Operator.Word), (words(_vbscript_builtins.BUILTIN_CONSTANTS, suffix='\\b'), Name.Constant), (words(_vbscript_builtins.BUILTIN_FUNCTIONS, suffix='\\b'), Name.Builtin), (words(_vbscript_builtins.BUILTIN_VARIABLES, suffix='\\b'), Name.Builtin), ('[a-z_][a-z0-9_]*', Name), ('\\b_\\n', Operator), (words('(),.:'), Punctuation), ('.+(\\n)?', Error)], 'dim_more': [('(\\s*)(,)(\\s*)([a-z_][a-z0-9]*)', bygroups(Whitespace, Punctuation, Whitespace, Name.Variable)), default('#pop')], 'string': [('[^"\\n]+', String.Double), ('\\"\\"', String.Double), ('"', String.Double, '#pop'), ('\\n', Error, '#pop')]}
  }

  class BBCBasicLexer {
      + base_keywords = ['OTHERWISE', 'AND', 'DIV', 'EOR', 'MOD', 'OR', 'ERROR', 'LINE', 'OFF', 'STEP', 'SPC', 'TAB', 'ELSE', 'THEN', 'OPENIN', 'PTR', 'PAGE', 'TIME', 'LOMEM', 'HIMEM', 'ABS', 'ACS', 'ADVAL', 'ASC', 'ASN', 'ATN', 'BGET', 'COS', 'COUNT', 'DEG', 'ERL', 'ERR', 'EVAL', 'EXP', 'EXT', 'FALSE', 'FN', 'GET', 'INKEY', 'INSTR', 'INT', 'LEN', 'LN', 'LOG', 'NOT', 'OPENUP', 'OPENOUT', 'PI', 'POINT', 'POS', 'RAD', 'RND', 'SGN', 'SIN', 'SQR', 'TAN', 'TO', 'TRUE', 'USR', 'VAL', 'VPOS', 'CHR$', 'GET$', 'INKEY$', 'LEFT$', 'MID$', 'RIGHT$', 'STR$', 'STRING$', 'EOF', 'PTR', 'PAGE', 'TIME', 'LOMEM', 'HIMEM', 'SOUND', 'BPUT', 'CALL', 'CHAIN', 'CLEAR', 'CLOSE', 'CLG', 'CLS', 'DATA', 'DEF', 'DIM', 'DRAW', 'END', 'ENDPROC', 'ENVELOPE', 'FOR', 'GOSUB', 'GOTO', 'GCOL', 'IF', 'INPUT', 'LET', 'LOCAL', 'MODE', 'MOVE', 'NEXT', 'ON', 'VDU', 'PLOT', 'PRINT', 'PROC', 'READ', 'REM', 'REPEAT', 'REPORT', 'RESTORE', 'RETURN', 'RUN', 'STOP', 'COLOUR', 'TRACE', 'UNTIL', 'WIDTH', 'OSCLI']
      + basic5_keywords = ['WHEN', 'OF', 'ENDCASE', 'ENDIF', 'ENDWHILE', 'CASE', 'CIRCLE', 'FILL', 'ORIGIN', 'POINT', 'RECTANGLE', 'SWAP', 'WHILE', 'WAIT', 'MOUSE', 'QUIT', 'SYS', 'INSTALL', 'LIBRARY', 'TINT', 'ELLIPSE', 'BEATS', 'TEMPO', 'VOICES', 'VOICE', 'STEREO', 'OVERLAY', 'APPEND', 'AUTO', 'CRUNCH', 'DELETE', 'EDIT', 'HELP', 'LIST', 'LOAD', 'LVAR', 'NEW', 'OLD', 'RENUMBER', 'SAVE', 'TEXTLOAD', 'TEXTSAVE', 'TWIN', 'TWINO', 'INSTALL', 'SUM', 'BEAT']
      + name = 'BBC Basic'
      + aliases = ['bbcbasic']
      + filenames = ['*.bbc']
      + url = 'https://www.bbcbasic.co.uk/bbcbasic.html'
      + version_added = '2.4'
      + tokens = {'root': [('[0-9]+', Name.Label), ('(\\*)([^\\n]*)', bygroups(Keyword.Pseudo, Comment.Special)), default('code')], 'code': [('(REM)([^\\n]*)', bygroups(Keyword.Declaration, Comment.Single)), ('\\n', Whitespace, 'root'), ('\\s+', Whitespace), (':', Comment.Preproc), ('(DEF)(\\s*)(FN|PROC)([A-Za-z_@][\\w@]*)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration, Name.Function)), ('(FN|PROC)([A-Za-z_@][\\w@]*)', bygroups(Keyword, Name.Function)), ('(GOTO|GOSUB|THEN|RESTORE)(\\s*)(\\d+)', bygroups(Keyword, Whitespace, Name.Label)), ('(TRUE|FALSE)', Keyword.Constant), ('(PAGE|LOMEM|HIMEM|TIME|WIDTH|ERL|ERR|REPORT\\$|POS|VPOS|VOICES)', Keyword.Pseudo), (words(base_keywords), Keyword), (words(basic5_keywords), Keyword), ('"', String.Double, 'string'), ('%[01]{1,32}', Number.Bin), ('&[0-9a-f]{1,8}', Number.Hex), ('[+-]?[0-9]+\\.[0-9]*(E[+-]?[0-9]+)?', Number.Float), ('[+-]?\\.[0-9]+(E[+-]?[0-9]+)?', Number.Float), ('[+-]?[0-9]+E[+-]?[0-9]+', Number.Float), ('[+-]?\\d+', Number.Integer), ('([A-Za-z_@][\\w@]*[%$]?)', Name.Variable), ('([+\\-]=|[$!|?+\\-*/%^=><();]|>=|<=|<>|<<|>>|>>>|,)', Operator)], 'string': [('[^"\\n]+', String.Double), ('"', String.Double, '#pop'), ('\\n', Error, 'root')]}
  --
      + analyse_text(text)
  }

  class BddLexer {
      + name = 'Bdd'
      + aliases = ['bdd']
      + filenames = ['*.feature']
      + mimetypes = ['text/x-bdd']
      + url = 'https://en.wikipedia.org/wiki/Behavior-driven_development'
      + version_added = '2.11'
      + step_keywords = 'Given|When|Then|Add|And|Feature|Scenario Outline|Scenario|Background|Examples|But'
      + tokens = {'comments': [('^\\s*#.*$', Comment)], 'miscellaneous': [('(<|>|\\[|\\]|=|\\||:|\\(|\\)|\\{|\\}|,|\\.|;|-|_|\\$)', Punctuation), ('((?<=\\<)[^\\\\>]+(?=\\>))', Name.Variable), ('"([^\\"]*)"', String), ('^@\\S+', Name.Label)], 'numbers': [('(\\d+\\.?\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number)], 'root': [('\\n|\\s+', Whitespace), (step_keywords, Keyword), include('comments'), include('miscellaneous'), include('numbers'), ('\\S+', Text)]}
  --
      + analyse_text(text)
  }

  class BerryLexer {
      + name = 'Berry'
      + aliases = ['berry', 'be']
      + filenames = ['*.be']
      + mimetypes = ['text/x-berry', 'application/x-berry']
      + url = 'https://berry-lang.github.io'
      + version_added = '2.12'
      + tokens = {'root': [include('whitespace'), include('numbers'), include('keywords'), (f'(def)(\\s+)({_name})', bygroups(Keyword.Declaration, Whitespace, Name.Function)), (f'\\b(class)(\\s+)({_name})', bygroups(Keyword.Declaration, Whitespace, Name.Class)), (f'\\b(import)(\\s+)({_name})', bygroups(Keyword.Namespace, Whitespace, Name.Namespace)), include('expr')], 'expr': [('[^\\S\\n]+', Whitespace), ('\\.\\.|[~!%^&*+=|?:<>/-]', Operator), ('[(){}\\[\\],.;]', Punctuation), include('controls'), include('builtins'), include('funccall'), include('member'), include('name'), include('strings')], 'whitespace': [('\\s+', Whitespace), ('#-(.|\\n)*?-#', Comment.Multiline), ('#.*?$', Comment.Single)], 'keywords': [(words(('as', 'break', 'continue', 'import', 'static', 'self', 'super'), suffix='\\b'), Keyword.Reserved), ('(true|false|nil)\\b', Keyword.Constant), ('(var|def)\\b', Keyword.Declaration)], 'controls': [(words(('if', 'elif', 'else', 'for', 'while', 'do', 'end', 'break', 'continue', 'return', 'try', 'except', 'raise'), suffix='\\b'), Keyword)], 'builtins': [(words(('assert', 'bool', 'input', 'classname', 'classof', 'number', 'real', 'bytes', 'compile', 'map', 'list', 'int', 'isinstance', 'print', 'range', 'str', 'super', 'module', 'size', 'issubclass', 'open', 'file', 'type', 'call'), suffix='\\b'), Name.Builtin)], 'numbers': [('0[xX][a-fA-F0-9]+', Number.Hex), ('-?\\d+', Number.Integer), ('(-?\\d+\\.?|\\.\\d)\\d*([eE][+-]?\\d+)?', Number.Float)], 'name': [(_name, Name)], 'funccall': [(f'{_name}(?=\\s*\\()', Name.Function, '#pop')], 'member': [(f'(?<=\\.){_name}\\b(?!\\()', Name.Attribute, '#pop')], 'strings': [('"([^\\\\]|\\\\.)*?"', String.Double, '#pop'), ("\\'([^\\\\]|\\\\.)*?\\'", String.Single, '#pop')]}
  }

  class BibTeXLexer {
      + name = 'BibTeX'
      + aliases = ['bibtex', 'bib']
      + filenames = ['*.bib']
      + mimetypes = ['text/x-bibtex']
      + version_added = '2.2'
      + flags = re.IGNORECASE
      + url = 'https://texfaq.org/FAQ-BibTeXing'
      + ALLOWED_CHARS = '@!$&*+\\-./:;<>?\\[\\\\\\]^`|~'
      + IDENTIFIER = '[{}][{}]*'.format('a-z_' + ALLOWED_CHARS, '\\w' + ALLOWED_CHARS)
      + tokens = {'root': [include('whitespace'), ('@comment(?!ary)', Comment), ('@preamble', Name.Class, ('closing-brace', 'value', 'opening-brace')), ('@string', Name.Class, ('closing-brace', 'field', 'opening-brace')), ('@' + IDENTIFIER, Name.Class, ('closing-brace', 'command-body', 'opening-brace')), ('.+', Comment)], 'opening-brace': [include('whitespace'), ('[{(]', open_brace_callback, '#pop')], 'closing-brace': [include('whitespace'), ('[})]', close_brace_callback, '#pop')], 'command-body': [include('whitespace'), ('[^\\s\\,\\}]+', Name.Label, ('#pop', 'fields'))], 'fields': [include('whitespace'), (',', Punctuation, 'field'), default('#pop')], 'field': [include('whitespace'), (IDENTIFIER, Name.Attribute, ('value', '=')), default('#pop')], '=': [include('whitespace'), ('=', Punctuation, '#pop')], 'value': [include('whitespace'), (IDENTIFIER, Name.Variable), ('"', String, 'quoted-string'), ('\\{', String, 'braced-string'), ('[\\d]+', Number), ('#', Punctuation), default('#pop')], 'quoted-string': [('\\{', String, 'braced-string'), ('"', String, '#pop'), ('[^\\{\\"]+', String)], 'braced-string': [('\\{', String, '#push'), ('\\}', String, '#pop'), ('[^\\{\\}]+', String)], 'whitespace': [('\\s+', Whitespace)]}
  --
      + open_brace_callback(match, ctx)
      + close_brace_callback(match, ctx)
  }

  class BSTLexer {
      + name = 'BST'
      + aliases = ['bst', 'bst-pybtex']
      + filenames = ['*.bst']
      + version_added = '2.2'
      + flags = re.IGNORECASE | re.MULTILINE
      + url = 'https://texfaq.org/FAQ-BibTeXing'
      + tokens = {'root': [include('whitespace'), (words(['read', 'sort']), Keyword), (words(['execute', 'integers', 'iterate', 'reverse', 'strings']), Keyword, 'group'), (words(['function', 'macro']), Keyword, ('group', 'group')), (words(['entry']), Keyword, ('group', 'group', 'group'))], 'group': [include('whitespace'), ('\\{', Punctuation, ('#pop', 'group-end', 'body'))], 'group-end': [include('whitespace'), ('\\}', Punctuation, '#pop')], 'body': [include('whitespace'), ('\\\'[^#\\"\\{\\}\\s]+', Name.Function), ('[^#\\"\\{\\}\\s]+\\$', Name.Builtin), ('[^#\\"\\{\\}\\s]+', Name.Variable), ('"[^\\"]*"', String), ('#-?\\d+', Number), ('\\{', Punctuation, ('group-end', 'body')), default('#pop')], 'whitespace': [('\\s+', Whitespace), ('%.*?$', Comment.Single)]}
  }

  class BlueprintLexer {
      + name = 'Blueprint'
      + aliases = ['blueprint']
      + filenames = ['*.blp']
      + mimetypes = ['text/x-blueprint']
      + url = 'https://gitlab.gnome.org/jwestman/blueprint-compiler'
      + version_added = '2.16'
      + flags = re.IGNORECASE
      + tokens = {'root': [include('block-content')], 'type': [('\\$\\s*[a-z_][a-z0-9_\\-]*', Name.Class), ('(?:([a-z_][a-z0-9_\\-]*)(\\s*)(\\.)(\\s*))?([a-z_][a-z0-9_\\-]*)', bygroups(Name.Namespace, Whitespace, Punctuation, Whitespace, Name.Class))], 'whitespace': [('\\s+', Whitespace), ('//.*?\\n', Comment.Single), ('/\\*', Comment.Multiline, 'comment-multiline')], 'comment-multiline': [('\\*/', Comment.Multiline, '#pop'), ('[^*]+', Comment.Multiline), ('\\*', Comment.Multiline)], 'value': [('(typeof)(\\s*)(<)', bygroups(Keyword, Whitespace, Punctuation), 'typeof'), (words(('true', 'false', 'null')), Keyword.Constant), ('[a-z_][a-z0-9_\\-]*', Name.Variable), ('\\|', Operator), ('".*?"', String.Double), ("\\'.*?\\'", String.Single), ('0x[\\d_]*', Number.Hex), ('[0-9_]+', Number.Integer), ('\\d[\\d\\.a-z_]*', Number)], 'typeof': [include('whitespace'), include('type'), ('>', Punctuation, '#pop')], 'content': [include('whitespace'), (words(('after', 'bidirectional', 'bind-property', 'bind', 'default', 'destructive', 'disabled', 'inverted', 'no-sync-create', 'suggested', 'swapped', 'sync-create', 'template')), Keyword), ('(C?_)(\\s*)(\\()', bygroups(Name.Function.Builtin, Whitespace, Punctuation), 'paren-content'), ('(as)(\\s*)(<)', bygroups(Keyword, Whitespace, Punctuation), 'typeof'), ('(\\$?[a-z_][a-z0-9_\\-]*)(\\s*)(\\()', bygroups(Name.Function, Whitespace, Punctuation), 'paren-content'), ('(?:(\\$\\s*[a-z_][a-z0-9_\\-]+)|(?:([a-z_][a-z0-9_\\-]*)(\\s*)(\\.)(\\s*))?([a-z_][a-z0-9_\\-]*))(?:(\\s+)([a-z_][a-z0-9_\\-]*))?(\\s*)(\\{)', bygroups(Name.Class, Name.Namespace, Whitespace, Punctuation, Whitespace, Name.Class, Whitespace, Name.Variable, Whitespace, Punctuation), 'brace-block'), include('value'), (',|\\.', Punctuation)], 'block-content': [('(using)(\\s+)([a-z_][a-z0-9_\\-]*)(\\s+)(\\d[\\d\\.]*)(;)', bygroups(Keyword, Whitespace, Name.Namespace, Whitespace, Name.Namespace, Punctuation)), ('(menu|section|submenu)(?:(\\s+)([a-z_][a-z0-9_\\-]*))?(\\s*)(\\{)', bygroups(Keyword, Whitespace, Name.Variable, Whitespace, Punctuation), 'brace-block'), ('(item)(\\s*)(\\{)', bygroups(Keyword, Whitespace, Punctuation), 'brace-block'), ('(item)(\\s*)(\\()', bygroups(Keyword, Whitespace, Punctuation), 'paren-block'), ('template', Keyword.Declaration, 'template'), ('(responses|items|mime-types|patterns|suffixes|marks|widgets|strings|styles)(\\s*)(\\[)', bygroups(Keyword, Whitespace, Punctuation), 'bracket-block'), ('(accessibility|setters|layout|item)(\\s*)(\\{)', bygroups(Keyword, Whitespace, Punctuation), 'brace-block'), ('(condition|mark|item)(\\s*)(\\()', bygroups(Keyword, Whitespace, Punctuation), 'paren-content'), ('\\[', Punctuation, 'child-type'), ('([a-z_][a-z0-9_\\-]*(?:::[a-z0-9_]+)?)(\\s*)(:|=>)', bygroups(Name.Property, Whitespace, Punctuation), 'statement'), include('content')], 'paren-block': [include('block-content'), ('\\)', Punctuation, '#pop')], 'paren-content': [include('content'), ('\\)', Punctuation, '#pop')], 'bracket-block': [include('block-content'), ('\\]', Punctuation, '#pop')], 'brace-block': [include('block-content'), ('\\}', Punctuation, '#pop')], 'statement': [include('content'), (';', Punctuation, '#pop')], 'child-type': [include('whitespace'), ('(action)(\\s+)(response)(\\s*)(=)(\\s*)', bygroups(Keyword, Whitespace, Name.Attribute, Whitespace, Punctuation, Whitespace)), (words(('default', 'internal-child', 'response')), Keyword), ('[a-z_][a-z0-9_\\-]*', Name.Decorator), include('value'), ('=', Punctuation), ('\\]', Punctuation, '#pop')], 'template': [include('whitespace'), include('type'), (':', Punctuation), ('\\{', Punctuation, ('#pop', 'brace-block'))]}
  }

  class BoaLexer {
      + name = 'Boa'
      + aliases = ['boa']
      + filenames = ['*.boa']
      + url = 'https://boa.cs.iastate.edu/docs'
      + version_added = '2.4'
      + reserved = words(('input', 'output', 'of', 'weight', 'before', 'after', 'stop', 'ifall', 'foreach', 'exists', 'function', 'break', 'switch', 'case', 'visitor', 'default', 'return', 'visit', 'while', 'if', 'else'), suffix='\\b', prefix='\\b')
      + keywords = words(('bottom', 'collection', 'maximum', 'mean', 'minimum', 'set', 'sum', 'top', 'string', 'int', 'bool', 'float', 'time', 'false', 'true', 'array', 'map', 'stack', 'enum', 'type'), suffix='\\b', prefix='\\b')
      + classes = words(('Project', 'ForgeKind', 'CodeRepository', 'Revision', 'RepositoryKind', 'ChangedFile', 'FileKind', 'ASTRoot', 'Namespace', 'Declaration', 'Type', 'Method', 'Variable', 'Statement', 'Expression', 'Modifier', 'StatementKind', 'ExpressionKind', 'ModifierKind', 'Visibility', 'TypeKind', 'Person', 'ChangeKind'), suffix='\\b', prefix='\\b')
      + operators = ('->', ':=', ':', '=', '<<', '!', '++', '||', '&&', '+', '-', '*', '>', '<')
      + string_sep = ('`', '"')
      + built_in_functions = words(('new', 'sort', 'yearof', 'dayofyear', 'hourof', 'minuteof', 'secondof', 'now', 'addday', 'addmonth', 'addweek', 'addyear', 'dayofmonth', 'dayofweek', 'dayofyear', 'formattime', 'trunctoday', 'trunctohour', 'trunctominute', 'trunctomonth', 'trunctosecond', 'trunctoyear', 'clear', 'haskey', 'keys', 'lookup', 'remove', 'values', 'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'cos', 'cosh', 'exp', 'floor', 'highbit', 'isfinite', 'isinf', 'isnan', 'isnormal', 'log', 'log10', 'max', 'min', 'nrand', 'pow', 'rand', 'round', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc', 'def', 'hash', 'len', 'add', 'contains', 'remove', 'format', 'lowercase', 'match', 'matchposns', 'matchstrs', 'regex', 'split', 'splitall', 'splitn', 'strfind', 'strreplace', 'strrfind', 'substring', 'trim', 'uppercase', 'bool', 'float', 'int', 'string', 'time', 'getast', 'getsnapshot', 'hasfiletype', 'isfixingrevision', 'iskind', 'isliteral'), prefix='\\b', suffix='\\(')
      + tokens = {'root': [('#.*?$', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline), (reserved, Keyword.Reserved), (built_in_functions, Name.Function), (keywords, Keyword.Type), (classes, Name.Classes), (words(operators), Operator), ('[][(),;{}\\\\.]', Punctuation), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ('`(\\\\\\\\|\\\\[^\\\\]|[^`\\\\])*`', String.Backtick), (words(string_sep), String.Delimiter), ('[a-zA-Z_]+', Name.Variable), ('[0-9]+', Number.Integer), ('\\s+', Whitespace)]}
  }

  class BQNLexer {
      + name = 'BQN'
      + url = 'https://mlochbaum.github.io/BQN/index.html'
      + aliases = ['bqn']
      + filenames = ['*.bqn']
      + mimetypes = []
      + version_added = '2.16'
      + tokens = {'root': [('\\s+', Whitespace), ('#.*$', Comment.Single), ("\\'((\\'\\')|[^\\'])*\\'", String.Single), ('"(("")|[^"])*"', String.Double), ('@', String.Symbol), ('[\\.⋄,\\[\\]⟨⟩‿]', Punctuation), ('[\\(\\)]', String.Regex), ('¯?[0-9](([0-9]|_)*\\.?([0-9]|_)+|([0-9]|_)*)([Ee][¯]?([0-9]|_)+)?|¯|∞|π|·', Number), ('[a-z]' + _iwc + '*', Name.Variable), ('[∘○⊸⟜⌾⊘◶⎉⚇⍟⎊]', Name.Property), ('_(𝕣|[a-zA-Z0-9]+)_', Name.Property), ('[˙˜˘¨⌜⁼´˝`𝕣]', Name.Attribute), ('_(𝕣|[a-zA-Z0-9]+)', Name.Attribute), ('[+\\-×÷\\⋆√⌊⌈∧∨¬|≤<>≥=≠≡≢⊣⊢⥊∾≍⋈↑↓↕«»⌽⍉/⍋⍒⊏⊑⊐⊒∊⍷⊔!𝕎𝕏𝔽𝔾𝕊]', Operator), ('[A-Z]' + _iwc + '*|•' + _iwc + '+', Operator), ('˙', Name.Constant), ('[←↩⇐]', Keyword.Declaration), ('[{}]', Keyword.Type), ('[;:?𝕨𝕩𝕗𝕘𝕤]', Name.Entity)]}
  }

  class CobolLexer {
      + name = 'COBOL'
      + aliases = ['cobol']
      + filenames = ['*.cob', '*.COB', '*.cpy', '*.CPY']
      + mimetypes = ['text/x-cobol']
      + url = 'https://en.wikipedia.org/wiki/COBOL'
      + version_added = '1.6'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [include('comment'), include('strings'), include('core'), include('nums'), ('[a-z0-9]([\\w\\-]*[a-z0-9]+)?', Name.Variable), ('[ \\t]+', Whitespace)], 'comment': [('(^.{6}[*/].*\\n|^.{6}|\\*>.*\\n)', Comment)], 'core': [('(^|(?<=[^\\w\\-]))(ALL\\s+)?((ZEROES)|(HIGH-VALUE|LOW-VALUE|QUOTE|SPACE|ZERO)(S)?)\\s*($|(?=[^\\w\\-]))', Name.Constant), (words(('ACCEPT', 'ADD', 'ALLOCATE', 'CALL', 'CANCEL', 'CLOSE', 'COMPUTE', 'CONFIGURATION', 'CONTINUE', 'DATA', 'DELETE', 'DISPLAY', 'DIVIDE', 'DIVISION', 'ELSE', 'END', 'END-ACCEPT', 'END-ADD', 'END-CALL', 'END-COMPUTE', 'END-DELETE', 'END-DISPLAY', 'END-DIVIDE', 'END-EVALUATE', 'END-IF', 'END-MULTIPLY', 'END-OF-PAGE', 'END-PERFORM', 'END-READ', 'END-RETURN', 'END-REWRITE', 'END-SEARCH', 'END-START', 'END-STRING', 'END-SUBTRACT', 'END-UNSTRING', 'END-WRITE', 'ENVIRONMENT', 'EVALUATE', 'EXIT', 'FD', 'FILE', 'FILE-CONTROL', 'FOREVER', 'FREE', 'GENERATE', 'GO', 'GOBACK', 'IDENTIFICATION', 'IF', 'INITIALIZE', 'INITIATE', 'INPUT-OUTPUT', 'INSPECT', 'INVOKE', 'I-O-CONTROL', 'LINKAGE', 'LOCAL-STORAGE', 'MERGE', 'MOVE', 'MULTIPLY', 'OPEN', 'PERFORM', 'PROCEDURE', 'PROGRAM-ID', 'RAISE', 'READ', 'RELEASE', 'RESUME', 'RETURN', 'REWRITE', 'SCREEN', 'SD', 'SEARCH', 'SECTION', 'SET', 'SORT', 'START', 'STOP', 'STRING', 'SUBTRACT', 'SUPPRESS', 'TERMINATE', 'THEN', 'UNLOCK', 'UNSTRING', 'USE', 'VALIDATE', 'WORKING-STORAGE', 'WRITE'), prefix='(^|(?<=[^\\w\\-]))', suffix='\\s*($|(?=[^\\w\\-]))'), Keyword.Reserved), (words(('ACCESS', 'ADDRESS', 'ADVANCING', 'AFTER', 'ALL', 'ALPHABET', 'ALPHABETIC', 'ALPHABETIC-LOWER', 'ALPHABETIC-UPPER', 'ALPHANUMERIC', 'ALPHANUMERIC-EDITED', 'ALSO', 'ALTER', 'ALTERNATEANY', 'ARE', 'AREA', 'AREAS', 'ARGUMENT-NUMBER', 'ARGUMENT-VALUE', 'AS', 'ASCENDING', 'ASSIGN', 'AT', 'AUTO', 'AUTO-SKIP', 'AUTOMATIC', 'AUTOTERMINATE', 'BACKGROUND-COLOR', 'BASED', 'BEEP', 'BEFORE', 'BELL', 'BLANK', 'BLINK', 'BLOCK', 'BOTTOM', 'BY', 'BYTE-LENGTH', 'CHAINING', 'CHARACTER', 'CHARACTERS', 'CLASS', 'CODE', 'CODE-SET', 'COL', 'COLLATING', 'COLS', 'COLUMN', 'COLUMNS', 'COMMA', 'COMMAND-LINE', 'COMMIT', 'COMMON', 'CONSTANT', 'CONTAINS', 'CONTENT', 'CONTROL', 'CONTROLS', 'CONVERTING', 'COPY', 'CORR', 'CORRESPONDING', 'COUNT', 'CRT', 'CURRENCY', 'CURSOR', 'CYCLE', 'DATE', 'DAY', 'DAY-OF-WEEK', 'DE', 'DEBUGGING', 'DECIMAL-POINT', 'DECLARATIVES', 'DEFAULT', 'DELIMITED', 'DELIMITER', 'DEPENDING', 'DESCENDING', 'DETAIL', 'DISK', 'DOWN', 'DUPLICATES', 'DYNAMIC', 'EBCDIC', 'ENTRY', 'ENVIRONMENT-NAME', 'ENVIRONMENT-VALUE', 'EOL', 'EOP', 'EOS', 'ERASE', 'ERROR', 'ESCAPE', 'EXCEPTION', 'EXCLUSIVE', 'EXTEND', 'EXTERNAL', 'FILE-ID', 'FILLER', 'FINAL', 'FIRST', 'FIXED', 'FLOAT-LONG', 'FLOAT-SHORT', 'FOOTING', 'FOR', 'FOREGROUND-COLOR', 'FORMAT', 'FROM', 'FULL', 'FUNCTION', 'FUNCTION-ID', 'GIVING', 'GLOBAL', 'GROUP', 'HEADING', 'HIGHLIGHT', 'I-O', 'ID', 'IGNORE', 'IGNORING', 'IN', 'INDEX', 'INDEXED', 'INDICATE', 'INITIAL', 'INITIALIZED', 'INPUT', 'INTO', 'INTRINSIC', 'INVALID', 'IS', 'JUST', 'JUSTIFIED', 'KEY', 'LABEL', 'LAST', 'LEADING', 'LEFT', 'LENGTH', 'LIMIT', 'LIMITS', 'LINAGE', 'LINAGE-COUNTER', 'LINE', 'LINES', 'LOCALE', 'LOCK', 'LOWLIGHT', 'MANUAL', 'MEMORY', 'MINUS', 'MODE', 'MULTIPLE', 'NATIONAL', 'NATIONAL-EDITED', 'NATIVE', 'NEGATIVE', 'NEXT', 'NO', 'NULL', 'NULLS', 'NUMBER', 'NUMBERS', 'NUMERIC', 'NUMERIC-EDITED', 'OBJECT-COMPUTER', 'OCCURS', 'OF', 'OFF', 'OMITTED', 'ON', 'ONLY', 'OPTIONAL', 'ORDER', 'ORGANIZATION', 'OTHER', 'OUTPUT', 'OVERFLOW', 'OVERLINE', 'PACKED-DECIMAL', 'PADDING', 'PAGE', 'PARAGRAPH', 'PLUS', 'POINTER', 'POSITION', 'POSITIVE', 'PRESENT', 'PREVIOUS', 'PRINTER', 'PRINTING', 'PROCEDURE-POINTER', 'PROCEDURES', 'PROCEED', 'PROGRAM', 'PROGRAM-POINTER', 'PROMPT', 'QUOTE', 'QUOTES', 'RANDOM', 'RD', 'RECORD', 'RECORDING', 'RECORDS', 'RECURSIVE', 'REDEFINES', 'REEL', 'REFERENCE', 'RELATIVE', 'REMAINDER', 'REMOVAL', 'RENAMES', 'REPLACING', 'REPORT', 'REPORTING', 'REPORTS', 'REPOSITORY', 'REQUIRED', 'RESERVE', 'RETURNING', 'REVERSE-VIDEO', 'REWIND', 'RIGHT', 'ROLLBACK', 'ROUNDED', 'RUN', 'SAME', 'SCROLL', 'SECURE', 'SEGMENT-LIMIT', 'SELECT', 'SENTENCE', 'SEPARATE', 'SEQUENCE', 'SEQUENTIAL', 'SHARING', 'SIGN', 'SIGNED', 'SIGNED-INT', 'SIGNED-LONG', 'SIGNED-SHORT', 'SIZE', 'SORT-MERGE', 'SOURCE', 'SOURCE-COMPUTER', 'SPECIAL-NAMES', 'STANDARD', 'STANDARD-1', 'STANDARD-2', 'STATUS', 'SUBKEY', 'SUM', 'SYMBOLIC', 'SYNC', 'SYNCHRONIZED', 'TALLYING', 'TAPE', 'TEST', 'THROUGH', 'THRU', 'TIME', 'TIMES', 'TO', 'TOP', 'TRAILING', 'TRANSFORM', 'TYPE', 'UNDERLINE', 'UNIT', 'UNSIGNED', 'UNSIGNED-INT', 'UNSIGNED-LONG', 'UNSIGNED-SHORT', 'UNTIL', 'UP', 'UPDATE', 'UPON', 'USAGE', 'USING', 'VALUE', 'VALUES', 'VARYING', 'WAIT', 'WHEN', 'WITH', 'WORDS', 'YYYYDDD', 'YYYYMMDD'), prefix='(^|(?<=[^\\w\\-]))', suffix='\\s*($|(?=[^\\w\\-]))'), Keyword.Pseudo), (words(('ACTIVE-CLASS', 'ALIGNED', 'ANYCASE', 'ARITHMETIC', 'ATTRIBUTE', 'B-AND', 'B-NOT', 'B-OR', 'B-XOR', 'BIT', 'BOOLEAN', 'CD', 'CENTER', 'CF', 'CH', 'CHAIN', 'CLASS-ID', 'CLASSIFICATION', 'COMMUNICATION', 'CONDITION', 'DATA-POINTER', 'DESTINATION', 'DISABLE', 'EC', 'EGI', 'EMI', 'ENABLE', 'END-RECEIVE', 'ENTRY-CONVENTION', 'EO', 'ESI', 'EXCEPTION-OBJECT', 'EXPANDS', 'FACTORY', 'FLOAT-BINARY-16', 'FLOAT-BINARY-34', 'FLOAT-BINARY-7', 'FLOAT-DECIMAL-16', 'FLOAT-DECIMAL-34', 'FLOAT-EXTENDED', 'FORMAT', 'FUNCTION-POINTER', 'GET', 'GROUP-USAGE', 'IMPLEMENTS', 'INFINITY', 'INHERITS', 'INTERFACE', 'INTERFACE-ID', 'INVOKE', 'LC_ALL', 'LC_COLLATE', 'LC_CTYPE', 'LC_MESSAGES', 'LC_MONETARY', 'LC_NUMERIC', 'LC_TIME', 'LINE-COUNTER', 'MESSAGE', 'METHOD', 'METHOD-ID', 'NESTED', 'NONE', 'NORMAL', 'OBJECT', 'OBJECT-REFERENCE', 'OPTIONS', 'OVERRIDE', 'PAGE-COUNTER', 'PF', 'PH', 'PROPERTY', 'PROTOTYPE', 'PURGE', 'QUEUE', 'RAISE', 'RAISING', 'RECEIVE', 'RELATION', 'REPLACE', 'REPRESENTS-NOT-A-NUMBER', 'RESET', 'RESUME', 'RETRY', 'RF', 'RH', 'SECONDS', 'SEGMENT', 'SELF', 'SEND', 'SOURCES', 'STATEMENT', 'STEP', 'STRONG', 'SUB-QUEUE-1', 'SUB-QUEUE-2', 'SUB-QUEUE-3', 'SUPER', 'SYMBOL', 'SYSTEM-DEFAULT', 'TABLE', 'TERMINAL', 'TEXT', 'TYPEDEF', 'UCS-4', 'UNIVERSAL', 'USER-DEFAULT', 'UTF-16', 'UTF-8', 'VAL-STATUS', 'VALID', 'VALIDATE', 'VALIDATE-STATUS'), prefix='(^|(?<=[^\\w\\-]))', suffix='\\s*($|(?=[^\\w\\-]))'), Error), ('(^|(?<=[^\\w\\-]))(PIC\\s+.+?(?=(\\s|\\.\\s))|PICTURE\\s+.+?(?=(\\s|\\.\\s))|(COMPUTATIONAL)(-[1-5X])?|(COMP)(-[1-5X])?|BINARY-C-LONG|BINARY-CHAR|BINARY-DOUBLE|BINARY-LONG|BINARY-SHORT|BINARY)\\s*($|(?=[^\\w\\-]))', Keyword.Type), ('(\\*\\*|\\*|\\+|-|/|<=|>=|<|>|==|/=|=)', Operator), ('([(),;:&%.])', Punctuation), ('(^|(?<=[^\\w\\-]))(ABS|ACOS|ANNUITY|ASIN|ATAN|BYTE-LENGTH|CHAR|COMBINED-DATETIME|CONCATENATE|COS|CURRENT-DATE|DATE-OF-INTEGER|DATE-TO-YYYYMMDD|DAY-OF-INTEGER|DAY-TO-YYYYDDD|EXCEPTION-(?:FILE|LOCATION|STATEMENT|STATUS)|EXP10|EXP|E|FACTORIAL|FRACTION-PART|INTEGER-OF-(?:DATE|DAY|PART)|INTEGER|LENGTH|LOCALE-(?:DATE|TIME(?:-FROM-SECONDS)?)|LOG(?:10)?|LOWER-CASE|MAX|MEAN|MEDIAN|MIDRANGE|MIN|MOD|NUMVAL(?:-C)?|ORD(?:-MAX|-MIN)?|PI|PRESENT-VALUE|RANDOM|RANGE|REM|REVERSE|SECONDS-FROM-FORMATTED-TIME|SECONDS-PAST-MIDNIGHT|SIGN|SIN|SQRT|STANDARD-DEVIATION|STORED-CHAR-LENGTH|SUBSTITUTE(?:-CASE)?|SUM|TAN|TEST-DATE-YYYYMMDD|TEST-DAY-YYYYDDD|TRIM|UPPER-CASE|VARIANCE|WHEN-COMPILED|YEAR-TO-YYYY)\\s*($|(?=[^\\w\\-]))', Name.Function), ('(^|(?<=[^\\w\\-]))(true|false)\\s*($|(?=[^\\w\\-]))', Name.Builtin), ('(^|(?<=[^\\w\\-]))(equal|equals|ne|lt|le|gt|ge|greater|less|than|not|and|or)\\s*($|(?=[^\\w\\-]))', Operator.Word)], 'strings': [('"[^"\\n]*("|\\n)', String.Double), ("'[^'\\n]*('|\\n)", String.Single)], 'nums': [('\\d+(\\s*|\\.$|$)', Number.Integer), ('[+-]?\\d*\\.\\d+(E[-+]?\\d+)?', Number.Float), ('[+-]?\\d+\\.\\d*(E[-+]?\\d+)?', Number.Float)]}
  }

  class CobolFreeformatLexer {
      + name = 'COBOLFree'
      + aliases = ['cobolfree']
      + filenames = ['*.cbl', '*.CBL']
      + mimetypes = []
      + url = 'https://opencobol.add1tocobol.com'
      + version_added = '1.6'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'comment': [('(\\*>.*\\n|^\\w*\\*.*$)', Comment)]}
  }

  class ABAPLexer {
      + name = 'ABAP'
      + aliases = ['abap']
      + filenames = ['*.abap', '*.ABAP']
      + mimetypes = ['text/x-abap']
      + url = 'https://community.sap.com/topics/abap'
      + version_added = '1.1'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'common': [('\\s+', Whitespace), ('^\\*.*$', Comment.Single), ('\\".*?\\n', Comment.Single), ('##\\w+', Comment.Special)], 'variable-names': [('<\\S+>', Name.Variable), ('\\w[\\w~]*(?:(\\[\\])|->\\*)?', Name.Variable)], 'root': [include('common'), ('CALL\\s+(?:BADI|CUSTOMER-FUNCTION|FUNCTION)', Keyword), ('(CALL\\s+(?:DIALOG|SCREEN|SUBSCREEN|SELECTION-SCREEN|TRANSACTION|TRANSFORMATION))\\b', Keyword), ('(FORM|PERFORM)(\\s+)(\\w+)', bygroups(Keyword, Whitespace, Name.Function)), ('(PERFORM)(\\s+)(\\()(\\w+)(\\))', bygroups(Keyword, Whitespace, Punctuation, Name.Variable, Punctuation)), ('(MODULE)(\\s+)(\\S+)(\\s+)(INPUT|OUTPUT)', bygroups(Keyword, Whitespace, Name.Function, Whitespace, Keyword)), ('(METHOD)(\\s+)([\\w~]+)', bygroups(Keyword, Whitespace, Name.Function)), ('(\\s+)([\\w\\-]+)([=\\-]>)([\\w\\-~]+)', bygroups(Whitespace, Name.Variable, Operator, Name.Function)), ('(?<=(=|-)>)([\\w\\-~]+)(?=\\()', Name.Function), ('(TEXT)(-)(\\d{3})', bygroups(Keyword, Punctuation, Number.Integer)), ('(TEXT)(-)(\\w{3})', bygroups(Keyword, Punctuation, Name.Variable)), ('(ADD-CORRESPONDING|AUTHORITY-CHECK|CLASS-DATA|CLASS-EVENTS|CLASS-METHODS|CLASS-POOL|DELETE-ADJACENT|DIVIDE-CORRESPONDING|EDITOR-CALL|ENHANCEMENT-POINT|ENHANCEMENT-SECTION|EXIT-COMMAND|FIELD-GROUPS|FIELD-SYMBOLS|FIELD-SYMBOL|FUNCTION-POOL|INTERFACE-POOL|INVERTED-DATE|LOAD-OF-PROGRAM|LOG-POINT|MESSAGE-ID|MOVE-CORRESPONDING|MULTIPLY-CORRESPONDING|NEW-LINE|NEW-PAGE|NEW-SECTION|NO-EXTENSION|OUTPUT-LENGTH|PRINT-CONTROL|SELECT-OPTIONS|START-OF-SELECTION|SUBTRACT-CORRESPONDING|SYNTAX-CHECK|SYSTEM-EXCEPTIONS|TYPE-POOL|TYPE-POOLS|NO-DISPLAY)\\b', Keyword), ('(?<![-\\>])(CREATE\\s+(PUBLIC|PRIVATE|DATA|OBJECT)|(PUBLIC|PRIVATE|PROTECTED)\\s+SECTION|(TYPE|LIKE)\\s+((LINE\\s+OF|REF\\s+TO|(SORTED|STANDARD|HASHED)\\s+TABLE\\s+OF))?|FROM\\s+(DATABASE|MEMORY)|CALL\\s+METHOD|(GROUP|ORDER) BY|HAVING|SEPARATED BY|GET\\s+(BADI|BIT|CURSOR|DATASET|LOCALE|PARAMETER|PF-STATUS|(PROPERTY|REFERENCE)\\s+OF|RUN\\s+TIME|TIME\\s+(STAMP)?)?|SET\\s+(BIT|BLANK\\s+LINES|COUNTRY|CURSOR|DATASET|EXTENDED\\s+CHECK|HANDLER|HOLD\\s+DATA|LANGUAGE|LEFT\\s+SCROLL-BOUNDARY|LOCALE|MARGIN|PARAMETER|PF-STATUS|PROPERTY\\s+OF|RUN\\s+TIME\\s+(ANALYZER|CLOCK\\s+RESOLUTION)|SCREEN|TITLEBAR|UPADTE\\s+TASK\\s+LOCAL|USER-COMMAND)|CONVERT\\s+((INVERTED-)?DATE|TIME|TIME\\s+STAMP|TEXT)|(CLOSE|OPEN)\\s+(DATASET|CURSOR)|(TO|FROM)\\s+(DATA BUFFER|INTERNAL TABLE|MEMORY ID|DATABASE|SHARED\\s+(MEMORY|BUFFER))|DESCRIBE\\s+(DISTANCE\\s+BETWEEN|FIELD|LIST|TABLE)|FREE\\s(MEMORY|OBJECT)?|PROCESS\\s+(BEFORE\\s+OUTPUT|AFTER\\s+INPUT|ON\\s+(VALUE-REQUEST|HELP-REQUEST))|AT\\s+(LINE-SELECTION|USER-COMMAND|END\\s+OF|NEW)|AT\\s+SELECTION-SCREEN(\\s+(ON(\\s+(BLOCK|(HELP|VALUE)-REQUEST\\s+FOR|END\\s+OF|RADIOBUTTON\\s+GROUP))?|OUTPUT))?|SELECTION-SCREEN:?\\s+((BEGIN|END)\\s+OF\\s+((TABBED\\s+)?BLOCK|LINE|SCREEN)|COMMENT|FUNCTION\\s+KEY|INCLUDE\\s+BLOCKS|POSITION|PUSHBUTTON|SKIP|ULINE)|LEAVE\\s+(LIST-PROCESSING|PROGRAM|SCREEN|TO LIST-PROCESSING|TO TRANSACTION)(ENDING|STARTING)\\s+AT|FORMAT\\s+(COLOR|INTENSIFIED|INVERSE|HOTSPOT|INPUT|FRAMES|RESET)|AS\\s+(CHECKBOX|SUBSCREEN|WINDOW)|WITH\\s+(((NON-)?UNIQUE)?\\s+KEY|FRAME)|(BEGIN|END)\\s+OF|DELETE(\\s+ADJACENT\\s+DUPLICATES\\sFROM)?|COMPARING(\\s+ALL\\s+FIELDS)?|(INSERT|APPEND)(\\s+INITIAL\\s+LINE\\s+(IN)?TO|\\s+LINES\\s+OF)?|IN\\s+((BYTE|CHARACTER)\\s+MODE|PROGRAM)|END-OF-(DEFINITION|PAGE|SELECTION)|WITH\\s+FRAME(\\s+TITLE)|(REPLACE|FIND)\\s+((FIRST|ALL)\\s+OCCURRENCES?\\s+OF\\s+)?(SUBSTRING|REGEX)?|MATCH\\s+(LENGTH|COUNT|LINE|OFFSET)|(RESPECTING|IGNORING)\\s+CASE|IN\\s+UPDATE\\s+TASK|(SOURCE|RESULT)\\s+(XML)?|REFERENCE\\s+INTO|AND\\s+(MARK|RETURN)|CLIENT\\s+SPECIFIED|CORRESPONDING\\s+FIELDS\\s+OF|IF\\s+FOUND|FOR\\s+EVENT|INHERITING\\s+FROM|LEAVE\\s+TO\\s+SCREEN|LOOP\\s+AT\\s+(SCREEN)?|LOWER\\s+CASE|MATCHCODE\\s+OBJECT|MODIF\\s+ID|MODIFY\\s+SCREEN|NESTING\\s+LEVEL|NO\\s+INTERVALS|OF\\s+STRUCTURE|RADIOBUTTON\\s+GROUP|RANGE\\s+OF|REF\\s+TO|SUPPRESS DIALOG|TABLE\\s+OF|UPPER\\s+CASE|TRANSPORTING\\s+NO\\s+FIELDS|VALUE\\s+CHECK|VISIBLE\\s+LENGTH|HEADER\\s+LINE|COMMON\\s+PART)\\b', Keyword), ('(^|(?<=(\\s|\\.)))(ABBREVIATED|ABSTRACT|ADD|ALIASES|ALIGN|ALPHA|ASSERT|AS|ASSIGN(ING)?|AT(\\s+FIRST)?|BACK|BLOCK|BREAK-POINT|CASE|CAST|CATCH|CHANGING|CHECK|CLASS|CLEAR|COLLECT|COLOR|COMMIT|COND|CONV|CREATE|COMMUNICATION|COMPONENTS?|COMPUTE|CONCATENATE|CONDENSE|CONSTANTS|CONTEXTS|CONTINUE|CONTROLS|COUNTRY|CURRENCY|DATA|DATE|DECIMALS|DEFAULT|DEFINE|DEFINITION|DEFERRED|DEMAND|DETAIL|DIRECTORY|DIVIDE|DO|DUMMY|ELSE(IF)?|ENDAT|ENDCASE|ENDCATCH|ENDCLASS|ENDDO|ENDFORM|ENDFUNCTION|ENDIF|ENDINTERFACE|ENDLOOP|ENDMETHOD|ENDMODULE|ENDSELECT|ENDTRY|ENDWHILE|ENHANCEMENT|EVENTS|EXACT|EXCEPTIONS?|EXIT|EXPONENT|EXPORT|EXPORTING|EXTRACT|FETCH|FIELDS?|FOR|FORM|FORMAT|FREE|FROM|FUNCTION|HIDE|ID|IF|IMPORT|IMPLEMENTATION|IMPORTING|IN|INCLUDE|INCLUDING|INDEX|INFOTYPES|INITIALIZATION|INTERFACE|INTERFACES|INTO|LANGUAGE|LEAVE|LENGTH|LINES|LOAD|LOCAL|JOIN|KEY|NEW|NEXT|MAXIMUM|MESSAGE|METHOD[S]?|MINIMUM|MODULE|MODIFIER|MODIFY|MOVE|MULTIPLY|NODES|NUMBER|OBLIGATORY|OBJECT|OF|OFF|ON|OTHERS|OVERLAY|PACK|PAD|PARAMETERS|PERCENTAGE|POSITION|PROGRAM|PROVIDE|PUBLIC|PUT|PF\\d\\d|RAISE|RAISING|RANGES?|READ|RECEIVE|REDEFINITION|REFRESH|REJECT|REPORT|RESERVE|REF|RESUME|RETRY|RETURN|RETURNING|RIGHT|ROLLBACK|REPLACE|SCROLL|SEARCH|SELECT|SHIFT|SIGN|SINGLE|SIZE|SKIP|SORT|SPLIT|STATICS|STOP|STYLE|SUBMATCHES|SUBMIT|SUBTRACT|SUM(?!\\()|SUMMARY|SUMMING|SUPPLY|SWITCH|TABLE|TABLES|TIMESTAMP|TIMES?|TIMEZONE|TITLE|\\??TO|TOP-OF-PAGE|TRANSFER|TRANSLATE|TRY|TYPES|ULINE|UNDER|UNPACK|UPDATE|USING|VALUE|VALUES|VIA|VARYING|VARY|WAIT|WHEN|WHERE|WIDTH|WHILE|WITH|WINDOW|WRITE|XSD|ZERO)\\b', Keyword), ('(abs|acos|asin|atan|boolc|boolx|bit_set|char_off|charlen|ceil|cmax|cmin|condense|contains|contains_any_of|contains_any_not_of|concat_lines_of|cos|cosh|count|count_any_of|count_any_not_of|dbmaxlen|distance|escape|exp|find|find_end|find_any_of|find_any_not_of|floor|frac|from_mixed|insert|lines|log|log10|match|matches|nmax|nmin|numofchar|repeat|replace|rescale|reverse|round|segment|shift_left|shift_right|sign|sin|sinh|sqrt|strlen|substring|substring_after|substring_from|substring_before|substring_to|tan|tanh|to_upper|to_lower|to_mixed|translate|trunc|xstrlen)(\\()\\b', bygroups(Name.Builtin, Punctuation)), ('&[0-9]', Name), ('[0-9]+', Number.Integer), ('(?<=(\\s|.))(AND|OR|EQ|NE|GT|LT|GE|LE|CO|CN|CA|NA|CS|NOT|NS|CP|NP|BYTE-CO|BYTE-CN|BYTE-CA|BYTE-NA|BYTE-CS|BYTE-NS|IS\\s+(NOT\\s+)?(INITIAL|ASSIGNED|REQUESTED|BOUND))\\b', Operator.Word), include('variable-names'), ('[?*<>=\\-+&]', Operator), ("'(''|[^'])*'", String.Single), ('`([^`])*`', String.Single), ('([|}])([^{}|]*?)([|{])', bygroups(Punctuation, String.Single, Punctuation)), ('[/;:()\\[\\],.]', Punctuation), ('(!)(\\w+)', bygroups(Operator, Name))]}
  }

  class OpenEdgeLexer {
      + name = 'OpenEdge ABL'
      + aliases = ['openedge', 'abl', 'progress']
      + filenames = ['*.p', '*.cls']
      + mimetypes = ['text/x-openedge', 'application/x-openedge']
      + url = 'https://www.progress.com/openedge/features/abl'
      + version_added = '1.5'
      + types = '(?i)(^|(?<=[^\\w\\-]))(CHARACTER|CHAR|CHARA|CHARAC|CHARACT|CHARACTE|COM-HANDLE|DATE|DATETIME|DATETIME-TZ|DECIMAL|DEC|DECI|DECIM|DECIMA|HANDLE|INT64|INTEGER|INT|INTE|INTEG|INTEGE|LOGICAL|LONGCHAR|MEMPTR|RAW|RECID|ROWID)\\s*($|(?=[^\\w\\-]))'
      + keywords = words(OPENEDGEKEYWORDS, prefix='(?i)(^|(?<=[^\\w\\-]))', suffix='\\s*($|(?=[^\\w\\-]))')
      + tokens = {'root': [('/\\*', Comment.Multiline, 'comment'), ('\\{', Comment.Preproc, 'preprocessor'), ('\\s*&.*', Comment.Preproc), ('0[xX][0-9a-fA-F]+[LlUu]*', Number.Hex), ('(?i)(DEFINE|DEF|DEFI|DEFIN)\\b', Keyword.Declaration), (types, Keyword.Type), (keywords, Name.Builtin), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('[0-9]+', Number.Integer), ('\\s+', Whitespace), ('[+*/=-]', Operator), ('[.:()]', Punctuation), ('.', Name.Variable)], 'comment': [('[^*/]', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'preprocessor': [('[^{}]', Comment.Preproc), ('\\{', Comment.Preproc, '#push'), ('\\}', Comment.Preproc, '#pop')]}
  --
      + analyse_text(text)
  }

  class GoodDataCLLexer {
      + name = 'GoodData-CL'
      + aliases = ['gooddata-cl']
      + filenames = ['*.gdc']
      + mimetypes = ['text/x-gooddata-cl']
      + url = 'https://github.com/gooddata/GoodData-CL'
      + version_added = '1.4'
      + flags = re.IGNORECASE
      + tokens = {'root': [('#.*', Comment.Single), ('[a-z]\\w*', Name.Function), ('\\(', Punctuation, 'args-list'), (';', Punctuation), ('\\s+', Text)], 'args-list': [('\\)', Punctuation, '#pop'), (',', Punctuation), ('[a-z]\\w*', Name.Variable), ('=', Operator), ('"', String, 'string-literal'), ('[0-9]+(?:\\.[0-9]+)?(?:e[+-]?[0-9]{1,3})?', Number), ('\\s', Whitespace)], 'string-literal': [('\\\\[tnrfbae"\\\\]', String.Escape), ('"', String, '#pop'), ('[^\\\\"]+', String)]}
  }

  class MaqlLexer {
      + name = 'MAQL'
      + aliases = ['maql']
      + filenames = ['*.maql']
      + mimetypes = ['text/x-gooddata-maql', 'application/x-gooddata-maql']
      + url = 'https://help.gooddata.com/doc/enterprise/en/dashboards-and-insights/maql-analytical-query-language'
      + version_added = '1.4'
      + flags = re.IGNORECASE
      + tokens = {'root': [('IDENTIFIER\\b', Name.Builtin), ('\\{[^}]+\\}', Name.Variable), ('[0-9]+(?:\\.[0-9]+)?(?:e[+-]?[0-9]{1,3})?', Number), ('"', String, 'string-literal'), ('\\<\\>|\\!\\=', Operator), ('\\=|\\>\\=|\\>|\\<\\=|\\<', Operator), ('\\:\\=', Operator), ('\\[[^]]+\\]', Name.Variable.Class), (words(('DIMENSION', 'DIMENSIONS', 'BOTTOM', 'METRIC', 'COUNT', 'OTHER', 'FACT', 'WITH', 'TOP', 'OR', 'ATTRIBUTE', 'CREATE', 'PARENT', 'FALSE', 'ROW', 'ROWS', 'FROM', 'ALL', 'AS', 'PF', 'COLUMN', 'COLUMNS', 'DEFINE', 'REPORT', 'LIMIT', 'TABLE', 'LIKE', 'AND', 'BY', 'BETWEEN', 'EXCEPT', 'SELECT', 'MATCH', 'WHERE', 'TRUE', 'FOR', 'IN', 'WITHOUT', 'FILTER', 'ALIAS', 'WHEN', 'NOT', 'ON', 'KEYS', 'KEY', 'FULLSET', 'PRIMARY', 'LABELS', 'LABEL', 'VISUAL', 'TITLE', 'DESCRIPTION', 'FOLDER', 'ALTER', 'DROP', 'ADD', 'DATASET', 'DATATYPE', 'INT', 'BIGINT', 'DOUBLE', 'DATE', 'VARCHAR', 'DECIMAL', 'SYNCHRONIZE', 'TYPE', 'DEFAULT', 'ORDER', 'ASC', 'DESC', 'HYPERLINK', 'INCLUDE', 'TEMPLATE', 'MODIFY'), suffix='\\b'), Keyword), ('[a-z]\\w*\\b', Name.Function), ('#.*', Comment.Single), ('[,;()]', Punctuation), ('\\s+', Whitespace)], 'string-literal': [('\\\\[tnrfbae"\\\\]', String.Escape), ('"', String, '#pop'), ('[^\\\\"]+', String)]}
  }

  class CapnProtoLexer {
      + name = "Cap'n Proto"
      + url = 'https://capnproto.org'
      + filenames = ['*.capnp']
      + aliases = ['capnp']
      + version_added = '2.2'
      + tokens = {'root': [('#.*?$', Comment.Single), ('@[0-9a-zA-Z]*', Name.Decorator), ('=', Literal, 'expression'), (':', Name.Class, 'type'), ('\\$', Name.Attribute, 'annotation'), ('(struct|enum|interface|union|import|using|const|annotation|extends|in|of|on|as|with|from|fixed)\\b', Keyword), ('[\\w.]+', Name), ('[^#@=:$\\w\\s]+', Text), ('\\s+', Whitespace)], 'type': [('[^][=;,(){}$]+', Name.Class), ('[\\[(]', Name.Class, 'parentype'), default('#pop')], 'parentype': [('[^][;()]+', Name.Class), ('[\\[(]', Name.Class, '#push'), ('[])]', Name.Class, '#pop'), default('#pop')], 'expression': [('[^][;,(){}$]+', Literal), ('[\\[(]', Literal, 'parenexp'), default('#pop')], 'parenexp': [('[^][;()]+', Literal), ('[\\[(]', Literal, '#push'), ('[])]', Literal, '#pop'), default('#pop')], 'annotation': [('[^][;,(){}=:]+', Name.Attribute), ('[\\[(]', Name.Attribute, 'annexp'), default('#pop')], 'annexp': [('[^][;()]+', Name.Attribute), ('[\\[(]', Name.Attribute, '#push'), ('[])]', Name.Attribute, '#pop'), default('#pop')]}
  }

  class CarbonLexer {
      + name = 'Carbon'
      + url = 'https://github.com/carbon-language/carbon-lang'
      + filenames = ['*.carbon']
      + aliases = ['carbon']
      + mimetypes = ['text/x-carbon']
      + version_added = '2.15'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), ('\\\\\\n', Text), ('//(.*?)\\n', Comment.Single), ('/(\\\\\\n)?[*].*?[*](\\\\\\n)?/', Comment.Multiline), ('(package|import|api|namespace|library)\\b', Keyword.Namespace), ('(abstract|alias|fn|class|interface|let|var|virtual|external|base|addr|extends|choice|constraint|impl)\\b', Keyword.Declaration), (words(('as', 'or', 'not', 'and', 'break', 'continue', 'case', 'default', 'if', 'else', 'destructor', 'for', 'forall', 'while', 'where', 'then', 'in', 'is', 'return', 'returned', 'friend', 'partial', 'private', 'protected', 'observe', 'Self', 'override', 'final', 'match', 'type', 'like'), suffix='\\b'), Keyword), ('(self)\\b', Keyword.Pseudo), ('(true|false)\\b', Keyword.Constant), ('(auto|bool|string|i8|i16|i32|i64|u8|u16|u32|u64|f8|f16|f32|f64)\\b', Keyword.Type), ('[0-9]*[.][0-9]+', Number.Double), ('0b[01]+', Number.Bin), ('0o[0-7]+', Number.Oct), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ('"(\\\\.|[^"\\\\])*"', String), ("\\'(\\\\.|[^\\'\\\\])\\'", String.Char), ('<<=|>>=|<<|>>|<=|>=|\\+=|-=|\\*=|/=|\\%=|\\|=|&=|\\^=|&&|\\|\\||&|\\||\\+\\+|--|\\%|\\^|\\~|==|!=|::|[.]{3}|->|=>|[+\\-*/&]', Operator), ('[|<>=!()\\[\\]{}.,;:\\?]', Punctuation), ('[^\\W\\d]\\w*', Name.Other)]}
  --
      + analyse_text(text)
  }

  class CddlLexer {
      + name = 'CDDL'
      + url = 'https://datatracker.ietf.org/doc/rfc8610/'
      + aliases = ['cddl']
      + filenames = ['*.cddl']
      + mimetypes = ['text/x-cddl']
      + version_added = '2.8'
      + tokens = {'commentsandwhitespace': [('\\s+', Whitespace), (';.+$', Comment.Single)], 'root': [include('commentsandwhitespace'), (f'#(\\d\\.{_re_uint})?', Keyword.Type), (f'({_re_uint})?(\\*)({_re_uint})?', bygroups(Number, Operator, Number)), ('\\?|\\+', Operator), ('\\^', Operator), ('(\\.\\.\\.|\\.\\.)', Operator), (words(_controls, suffix='\\b'), Operator.Word), (f'&(?=\\s*({_re_id}|\\())', Operator), (f'~(?=\\s*{_re_id})', Operator), ('//|/(?!/)', Operator), ('=>|/==|/=|=', Operator), ('[\\[\\]{}\\(\\),<>:]', Punctuation), ("(b64)(')", bygroups(String.Affix, String.Single), 'bstrb64url'), ("(h)(')", bygroups(String.Affix, String.Single), 'bstrh'), ("'", String.Single, 'bstr'), (f'({_re_id})(\\s*)(:)', bygroups(String, Whitespace, Punctuation)), (words(_prelude_types, prefix='(?![\\-_$@])\\b', suffix='\\b(?![\\-_$@])'), Name.Builtin), (_re_id, Name.Class), ('0b[01]+', Number.Bin), ('0o[0-7]+', Number.Oct), ('0x[0-9a-fA-F]+(\\.[0-9a-fA-F]+)?p[+-]?\\d+', Number.Hex), ('0x[0-9a-fA-F]+', Number.Hex), (f'{_re_int}(?=(\\.\\d|e[+-]?\\d))(?:\\.\\d+)?(?:e[+-]?\\d+)?', Number.Float), (_re_int, Number.Integer), ('"(\\\\\\\\|\\\\"|[^"])*"', String.Double)], 'bstrb64url': [("'", String.Single, '#pop'), include('commentsandwhitespace'), ('\\\\.', String.Escape), ('[0-9a-zA-Z\\-_=]+', String.Single), ('.', Error)], 'bstrh': [("'", String.Single, '#pop'), include('commentsandwhitespace'), ('\\\\.', String.Escape), ('[0-9a-fA-F]+', String.Single), ('.', Error)], 'bstr': [("'", String.Single, '#pop'), ('\\\\.', String.Escape), ("[^'\\\\]+", String.Single)]}
  }

  class ChapelLexer {
      + name = 'Chapel'
      + url = 'https://chapel-lang.org/'
      + filenames = ['*.chpl']
      + aliases = ['chapel', 'chpl']
      + version_added = '2.0'
      + known_types = ('bool', 'bytes', 'complex', 'imag', 'int', 'locale', 'nothing', 'opaque', 'range', 'real', 'string', 'uint', 'void')
      + type_modifiers_par = ('atomic', 'single', 'sync')
      + type_modifiers_mem = ('borrowed', 'owned', 'shared', 'unmanaged')
      + type_modifiers = (*type_modifiers_par, *type_modifiers_mem)
      + declarations = ('config', 'const', 'in', 'inout', 'out', 'param', 'ref', 'type', 'var')
      + constants = ('false', 'nil', 'none', 'true')
      + other_keywords = ('align', 'as', 'begin', 'break', 'by', 'catch', 'cobegin', 'coforall', 'continue', 'defer', 'delete', 'dmapped', 'do', 'domain', 'else', 'enum', 'except', 'export', 'extern', 'for', 'forall', 'foreach', 'forwarding', 'if', 'implements', 'import', 'index', 'init', 'inline', 'label', 'lambda', 'let', 'lifetime', 'local', 'new', 'noinit', 'on', 'only', 'otherwise', 'override', 'pragma', 'primitive', 'private', 'prototype', 'public', 'reduce', 'require', 'return', 'scan', 'select', 'serial', 'sparse', 'subdomain', 'then', 'this', 'throw', 'throws', 'try', 'use', 'when', 'where', 'while', 'with', 'yield', 'zip')
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), ('\\\\\\n', Text), ('//(.*?)\\n', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), (words(declarations, suffix='\\b'), Keyword.Declaration), (words(constants, suffix='\\b'), Keyword.Constant), (words(known_types, suffix='\\b'), Keyword.Type), (words((*type_modifiers, *other_keywords), suffix='\\b'), Keyword), ('@', Keyword, 'attributename'), ('(iter)(\\s+)', bygroups(Keyword, Whitespace), 'procname'), ('(proc)(\\s+)', bygroups(Keyword, Whitespace), 'procname'), ('(operator)(\\s+)', bygroups(Keyword, Whitespace), 'procname'), ('(class|interface|module|record|union)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), ('\\d+i', Number), ('\\d+\\.\\d*([Ee][-+]\\d+)?i', Number), ('\\.\\d+([Ee][-+]\\d+)?i', Number), ('\\d+[Ee][-+]\\d+i', Number), ('(\\d*\\.\\d+)([eE][+-]?[0-9]+)?i?', Number.Float), ('\\d+[eE][+-]?[0-9]+i?', Number.Float), ('0[bB][01]+', Number.Bin), ('0[xX][0-9a-fA-F]+', Number.Hex), ('0[oO][0-7]+', Number.Oct), ('[0-9]+', Number.Integer), ('"(\\\\\\\\|\\\\"|[^"])*"', String), ("'(\\\\\\\\|\\\\'|[^'])*'", String), ('(=|\\+=|-=|\\*=|/=|\\*\\*=|%=|&=|\\|=|\\^=|&&=|\\|\\|=|<<=|>>=|<=>|<~>|\\.\\.|by|#|\\.\\.\\.|&&|\\|\\||!|&|\\||\\^|~|<<|>>|==|!=|<=|>=|<|>|[+\\-*/%]|\\*\\*)', Operator), ('[:;,.?()\\[\\]{}]', Punctuation), ('[a-zA-Z_][\\w$]*', Name.Other)], 'classname': [('[a-zA-Z_][\\w$]*', Name.Class, '#pop')], 'procname': [('([a-zA-Z_][.\\w$]*|\\~[a-zA-Z_][.\\w$]*|[+*/!~%<>=&^|\\-:]{1,2})', Name.Function, '#pop'), ('\\(', Punctuation, 'receivertype'), ('\\)+\\.', Punctuation)], 'receivertype': [(words(type_modifiers, suffix='\\b'), Keyword), (words(known_types, suffix='\\b'), Keyword.Type), ('[^()]*', Name.Other, '#pop')], 'attributename': [('[a-zA-Z_][.\\w$]*', Name.Decorator, '#pop')]}
  }

  class CleanLexer {
      + name = 'Clean'
      + url = 'http://clean.cs.ru.nl/Clean'
      + aliases = ['clean']
      + filenames = ['*.icl', '*.dcl']
      + version_added = ''
      + keywords = ('case', 'ccall', 'class', 'code', 'code inline', 'derive', 'export', 'foreign', 'generic', 'if', 'in', 'infix', 'infixl', 'infixr', 'instance', 'let', 'of', 'otherwise', 'special', 'stdcall', 'where', 'with')
      + modulewords = ('implementation', 'definition', 'system')
      + lowerId = '[a-z`][\\w`]*'
      + upperId = '[A-Z`][\\w`]*'
      + funnyId = '[~@#$%\\^?!+\\-*<>\\\\/|&=:]+'
      + scoreUpperId = '_' + upperId
      + scoreLowerId = '_' + lowerId
      + moduleId = '[a-zA-Z_][a-zA-Z0-9_.`]+'
      + classId = '|'.join([lowerId, upperId, funnyId])
      + tokens = {'root': [include('comments'), include('keywords'), include('module'), include('import'), include('whitespace'), include('literals'), include('operators'), include('delimiters'), include('names')], 'whitespace': [('\\s+', Whitespace)], 'comments': [('//.*\\n', Comment.Single), ('/\\*', Comment.Multiline, 'comments.in'), ('/\\*\\*', Comment.Special, 'comments.in')], 'comments.in': [('\\*\\/', Comment.Multiline, '#pop'), ('/\\*', Comment.Multiline, '#push'), ('[^*/]+', Comment.Multiline), ('\\*(?!/)', Comment.Multiline), ('/', Comment.Multiline)], 'keywords': [(words(keywords, prefix='\\b', suffix='\\b'), Keyword)], 'module': [(words(modulewords, prefix='\\b', suffix='\\b'), Keyword.Namespace), ('\\bmodule\\b', Keyword.Namespace, 'module.name')], 'module.name': [include('whitespace'), (moduleId, Name.Class, '#pop')], 'import': [('\\b(import)\\b(\\s*)', bygroups(Keyword, Whitespace), 'import.module'), ('\\b(from)\\b(\\s*)\\b(' + moduleId + ')\\b(\\s*)\\b(import)\\b', bygroups(Keyword, Whitespace, Name.Class, Whitespace, Keyword), 'import.what')], 'import.module': [('\\b(qualified)\\b(\\s*)', bygroups(Keyword, Whitespace)), ('(\\s*)\\b(as)\\b', bygroups(Whitespace, Keyword), ('#pop', 'import.module.as')), (moduleId, Name.Class), ('(\\s*)(,)(\\s*)', bygroups(Whitespace, Punctuation, Whitespace)), ('\\s+', Whitespace), default('#pop')], 'import.module.as': [include('whitespace'), (lowerId, Name.Class, '#pop'), (upperId, Name.Class, '#pop')], 'import.what': [('\\b(class)\\b(\\s+)(' + classId + ')', bygroups(Keyword, Whitespace, Name.Class), 'import.what.class'), ('\\b(instance)(\\s+)(' + classId + ')(\\s+)', bygroups(Keyword, Whitespace, Name.Class, Whitespace), 'import.what.instance'), ('(::)(\\s*)\\b(' + upperId + ')\\b', bygroups(Punctuation, Whitespace, Name.Class), 'import.what.type'), ('\\b(generic)\\b(\\s+)\\b(' + lowerId + '|' + upperId + ')\\b', bygroups(Keyword, Whitespace, Name)), include('names'), ('(,)(\\s+)', bygroups(Punctuation, Whitespace)), ('$', Whitespace, '#pop'), include('whitespace')], 'import.what.class': [(',', Punctuation, '#pop'), ('\\(', Punctuation, 'import.what.class.members'), ('$', Whitespace, '#pop:2'), include('whitespace')], 'import.what.class.members': [(',', Punctuation), ('\\.\\.', Punctuation), ('\\)', Punctuation, '#pop'), include('names')], 'import.what.instance': [('[,)]', Punctuation, '#pop'), ('\\(', Punctuation, 'import.what.instance'), ('$', Whitespace, '#pop:2'), include('whitespace'), include('names')], 'import.what.type': [(',', Punctuation, '#pop'), ('[({]', Punctuation, 'import.what.type.consesandfields'), ('$', Whitespace, '#pop:2'), include('whitespace')], 'import.what.type.consesandfields': [(',', Punctuation), ('\\.\\.', Punctuation), ('[)}]', Punctuation, '#pop'), include('names')], 'literals': [("\\'([^\\'\\\\]|\\\\(x[\\da-fA-F]+|\\d+|.))\\'", Literal.Char), ('[+~-]?0[0-7]+\\b', Number.Oct), ('[+~-]?\\d+\\.\\d+(E[+-]?\\d+)?', Number.Float), ('[+~-]?\\d+\\b', Number.Integer), ('[+~-]?0x[\\da-fA-F]+\\b', Number.Hex), ('True|False', Literal), ('"', String.Double, 'literals.stringd')], 'literals.stringd': [('[^\\\\"\\n]+', String.Double), ('"', String.Double, '#pop'), ('\\\\.', String.Double), ('[$\\n]', Error, '#pop')], 'operators': [('[-~@#$%\\^?!+*<>\\\\/|&=:.]+', Operator), ('\\b_+\\b', Operator)], 'delimiters': [('[,;(){}\\[\\]]', Punctuation), ("(\\')([\\w`.]+)(\\')", bygroups(Punctuation, Name.Class, Punctuation))], 'names': [(lowerId, Name), (scoreLowerId, Name), (funnyId, Name.Function), (upperId, Name.Class), (scoreUpperId, Name.Class)]}
  }

  class CodeQLLexer {
      + name = 'CodeQL'
      + aliases = ['codeql', 'ql']
      + filenames = ['*.ql', '*.qll']
      + mimetypes = []
      + url = 'https://github.com/github/codeql'
      + version_added = '2.19'
      + flags = re.MULTILINE | re.UNICODE
      + tokens = {'root': [('\\s+', Whitespace), ('//.*?\\n', Comment.Single), ('/\\*', Comment.Multiline, 'multiline-comments'), (words(('module', 'import', 'class', 'extends', 'implements', 'predicate', 'select', 'where', 'from', 'as', 'and', 'or', 'not', 'in', 'if', 'then', 'else', 'exists', 'forall', 'instanceof', 'private', 'predicate', 'abstract', 'cached', 'external', 'final', 'library', 'override', 'query'), suffix='\\b'), Keyword.Builtin), (words('this', prefix='\\b', suffix='\\b\\??:?'), Name.Builtin.Pseudo), (words(('boolean', 'date', 'float', 'int', 'string'), suffix='\\b'), Keyword.Type), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('[0-9]+\\.[0-9]+', Number.Float), ('[0-9]+', Number.Integer), ('<=|>=|<|>|=|!=|\\+|-|\\*|/', Operator), ('[.,;:\\[\\]{}()]+', Punctuation), ('@[a-zA-Z_]\\w*', Name.Variable), ('[A-Z][a-zA-Z0-9_]*', Name.Class), ('[a-z][a-zA-Z0-9_]*', Name.Variable)], 'multiline-comments': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  }

  class Comal80Lexer {
      + name = 'COMAL-80'
      + url = 'https://en.wikipedia.org/wiki/COMAL'
      + aliases = ['comal', 'comal80']
      + filenames = ['*.cml', '*.comal']
      + version_added = ''
      + flags = re.IGNORECASE
      + tokens = {'root': [('//.*\\n', Comment.Single), ('\\s+', Whitespace), (':[=+-]|\\<\\>|[-+*/^↑<>=]', Operator), ('(and +then|or +else)' + _suffix, Operator.Word), (words(['and', 'bitand', 'bitor', 'bitxor', 'div', 'in', 'mod', 'not', 'or'], suffix=_suffix), Operator.Word), (words(['append', 'at', 'case', 'chain', 'close', 'copy', 'create', 'cursor', 'data', 'delete', 'dir', 'do', 'elif', 'else', 'end', 'endcase', 'endif', 'endfor', 'endloop', 'endtrap', 'endwhile', 'exec', 'exit', 'file', 'for', 'goto', 'handler', 'if', 'input', 'let', 'loop', 'mount', 'null', 'of', 'open', 'otherwise', 'output', 'page', 'pass', 'poke', 'print', 'random', 'read', 'repeat', 'report', 'return', 'rename', 'restore', 'select', 'step', 'stop', 'sys', 'then', 'to', 'trap', 'unit', 'unit$', 'until', 'using', 'when', 'while', 'write', 'zone'], suffix=_suffix), Keyword.Reserved), (words(['closed', 'dim', 'endfunc', 'endproc', 'external', 'func', 'import', 'proc', 'ref', 'use'], suffix=_suffix), Keyword.Declaration), (words(['abs', 'atn', 'chr$', 'cos', 'eod', 'eof', 'err', 'errfile', 'errtext', 'esc', 'exp', 'int', 'key$', 'len', 'log', 'ord', 'peek', 'randomize', 'rnd', 'sgn', 'sin', 'spc$', 'sqr', 'status$', 'str$', 'tab', 'tan', 'time', 'val'], suffix=_suffix), Name.Builtin), (words(['false', 'pi', 'true'], suffix=_suffix), Keyword.Constant), ('"', String, 'string'), (_identifier + ':(?=[ \\n/])', Name.Label), (_identifier + '[$#]?', Name), ('%[01]+', Number.Bin), ('\\$[0-9a-f]+', Number.Hex), ('\\d*\\.\\d*(e[-+]?\\d+)?', Number.Float), ('\\d+', Number.Integer), ('[(),:;]', Punctuation)], 'string': [('[^"]+', String), ('"[0-9]*"', String.Escape), ('"', String, '#pop')]}
  }

  class IniLexer {
      + name = 'INI'
      + aliases = ['ini', 'cfg', 'dosini']
      + filenames = ['*.ini', '*.cfg', '*.inf', '.editorconfig']
      + mimetypes = ['text/x-ini', 'text/inf']
      + url = 'https://en.wikipedia.org/wiki/INI_file'
      + version_added = ''
      + tokens = {'root': [('\\s+', Whitespace), ('[;#].*', Comment.Single), ('(\\[.*?\\])([ \\t]*)$', bygroups(Keyword, Whitespace)), ('(.*?)([ \\t]*)([=:])([ \\t]*)(["\'])', bygroups(Name.Attribute, Whitespace, Operator, Whitespace, String), 'quoted_value'), ('(.*?)([ \\t]*)([=:])([ \\t]*)([^;#\\n]*)(\\\\)(\\s+)', bygroups(Name.Attribute, Whitespace, Operator, Whitespace, String, Text, Whitespace), 'value'), ('(.*?)([ \\t]*)([=:])([ \\t]*)([^ ;#\\n]*(?: +[^ ;#\\n]+)*)', bygroups(Name.Attribute, Whitespace, Operator, Whitespace, String)), ('(.+?)$', Name.Attribute)], 'quoted_value': [('([^"\'\\n]*)(["\'])(\\s*)', bygroups(String, String, Whitespace), '#pop'), ('[;#].*', Comment.Single), ('$', String, '#pop')], 'value': [('\\s+', Whitespace), ('(\\s*)(.*)(\\\\)([ \\t]*)', bygroups(Whitespace, String, Text, Whitespace)), ('.*$', String, '#pop')]}
  --
      + analyse_text(text)
  }

  class DesktopLexer {
      + name = 'Desktop file'
      + url = 'https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html'
      + aliases = ['desktop']
      + filenames = ['*.desktop']
      + mimetypes = ['application/x-desktop']
      + version_added = '2.16'
      + tokens = {'root': [('^[ \\t]*\\n', Whitespace), ('^(#.*)(\\n)', bygroups(Comment.Single, Whitespace)), ('(\\[[^\\]\\n]+\\])(\\n)', bygroups(Keyword, Whitespace)), ('([-A-Za-z0-9]+)(\\[[^\\] \\t=]+\\])?([ \\t]*)(=)([ \\t]*)([^\\n]*)([ \\t\\n]*\\n)', bygroups(Name.Attribute, Name.Namespace, Whitespace, Operator, Whitespace, String, Whitespace))]}
  --
      + analyse_text(text)
  }

  class SystemdLexer {
      + name = 'Systemd'
      + url = 'https://www.freedesktop.org/software/systemd/man/systemd.syntax.html'
      + aliases = ['systemd']
      + filenames = ['*.service', '*.socket', '*.device', '*.mount', '*.automount', '*.swap', '*.target', '*.path', '*.timer', '*.slice', '*.scope']
      + version_added = '2.16'
      + tokens = {'root': [('^[ \\t]*\\n', Whitespace), ('^([;#].*)(\\n)', bygroups(Comment.Single, Whitespace)), ('(\\[[^\\]\\n]+\\])(\\n)', bygroups(Keyword, Whitespace)), ('([^=]+)([ \\t]*)(=)([ \\t]*)([^\\n]*)(\\\\)(\\n)', bygroups(Name.Attribute, Whitespace, Operator, Whitespace, String, Text, Whitespace), 'value'), ('([^=]+)([ \\t]*)(=)([ \\t]*)([^\\n]*)(\\n)', bygroups(Name.Attribute, Whitespace, Operator, Whitespace, String, Whitespace))], 'value': [('^([;#].*)(\\n)', bygroups(Comment.Single, Whitespace)), ('([ \\t]*)([^\\n]*)(\\\\)(\\n)', bygroups(Whitespace, String, Text, Whitespace)), ('([ \\t]*)([^\\n]*)(\\n)', bygroups(Whitespace, String, Whitespace), '#pop')]}
  --
      + analyse_text(text)
  }

  class RegeditLexer {
      + name = 'reg'
      + url = 'http://en.wikipedia.org/wiki/Windows_Registry#.REG_files'
      + aliases = ['registry']
      + filenames = ['*.reg']
      + mimetypes = ['text/x-windows-registry']
      + version_added = '1.6'
      + tokens = {'root': [('Windows Registry Editor.*', Text), ('\\s+', Whitespace), ('[;#].*', Comment.Single), ('(\\[)(-?)(HKEY_[A-Z_]+)(.*?\\])$', bygroups(Keyword, Operator, Name.Builtin, Keyword)), ('("(?:\\\\"|\\\\\\\\|[^"])+")([ \\t]*)(=)([ \\t]*)', bygroups(Name.Attribute, Whitespace, Operator, Whitespace), 'value'), ('(.*?)([ \\t]*)(=)([ \\t]*)', bygroups(Name.Attribute, Whitespace, Operator, Whitespace), 'value')], 'value': [('-', Operator, '#pop'), ('(dword|hex(?:\\([0-9a-fA-F]\\))?)(:)([0-9a-fA-F,]+)', bygroups(Name.Variable, Punctuation, Number), '#pop'), ('.+', String, '#pop'), default('#pop')]}
  --
      + analyse_text(text)
  }

  class PropertiesLexer {
      + name = 'Properties'
      + aliases = ['properties', 'jproperties']
      + filenames = ['*.properties']
      + mimetypes = ['text/x-java-properties']
      + url = 'https://en.wikipedia.org/wiki/.properties'
      + version_added = '1.4'
      + tokens = {'root': [('[!#].*|/{2}.*', Comment.Single), ('\\n', Whitespace), ('^[^\\S\\n]+', Whitespace), default('key')], 'key': [('[^\\\\:=\\s]+', Name.Attribute), include('escapes'), ('([^\\S\\n]*)([:=])([^\\S\\n]*)', bygroups(Whitespace, Operator, Whitespace), ('#pop', 'value')), ('[^\\S\\n]+', Whitespace, ('#pop', 'value')), ('\\n', Whitespace, '#pop')], 'value': [('[^\\\\\\n]+', String), include('escapes'), ('\\n', Whitespace, '#pop')], 'escapes': [('(\\\\\\n)([^\\S\\n]*)', bygroups(String.Escape, Whitespace)), ('\\\\(.|\\n)', String.Escape)]}
  }

  class KconfigLexer {
      + name = 'Kconfig'
      + aliases = ['kconfig', 'menuconfig', 'linux-config', 'kernel-config']
      + version_added = '1.6'
      + filenames = ['Kconfig*', '*Config.in*', 'external.in*', 'standard-modules.in']
      + mimetypes = ['text/x-kconfig']
      + url = 'https://www.kernel.org/doc/html/latest/kbuild/kconfig-language.html'
      + flags = 0
      + tokens = {'root': [('\\s+', Whitespace), ('#.*?\\n', Comment.Single), (words(('mainmenu', 'config', 'menuconfig', 'choice', 'endchoice', 'comment', 'menu', 'endmenu', 'visible if', 'if', 'endif', 'source', 'prompt', 'select', 'depends on', 'default', 'range', 'option'), suffix='\\b'), Keyword), ('(---help---|help)[\\t ]*\\n', Keyword, 'help'), ('(bool|tristate|string|hex|int|defconfig_list|modules|env)\\b', Name.Builtin), ('[!=&|]', Operator), ('[()]', Punctuation), ('[0-9]+', Number.Integer), ("'(''|[^'])*'", String.Single), ('"(""|[^"])*"', String.Double), ('\\S+', Text)], 'help': [('\\s*\\n', Text), call_indent(7), call_indent(6), call_indent(5), call_indent(4), call_indent(3), call_indent(2), call_indent(1), default('#pop')], 'indent7': do_indent(7), 'indent6': do_indent(6), 'indent5': do_indent(5), 'indent4': do_indent(4), 'indent3': do_indent(3), 'indent2': do_indent(2), 'indent1': do_indent(1)}
  --
      + call_indent(level)
      + do_indent(level)
  }

  class Cfengine3Lexer {
      + name = 'CFEngine3'
      + url = 'http://cfengine.org'
      + aliases = ['cfengine3', 'cf3']
      + filenames = ['*.cf']
      + mimetypes = []
      + version_added = '1.5'
      + tokens = {'root': [('#.*?\\n', Comment), ('(body)(\\s+)(\\S+)(\\s+)(control)', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword)), ('(body|bundle)(\\s+)(\\S+)(\\s+)(\\w+)(\\()', bygroups(Keyword, Whitespace, Keyword, Whitespace, Name.Function, Punctuation), 'arglist'), ('(body|bundle)(\\s+)(\\S+)(\\s+)(\\w+)', bygroups(Keyword, Whitespace, Keyword, Whitespace, Name.Function)), ('(")([^"]+)(")(\\s+)(string|slist|int|real)(\\s*)(=>)(\\s*)', bygroups(Punctuation, Name.Variable, Punctuation, Whitespace, Keyword.Type, Whitespace, Operator, Whitespace)), ('(\\S+)(\\s*)(=>)(\\s*)', bygroups(Keyword.Reserved, Whitespace, Operator, Text)), ('"', String, 'string'), ('(\\w+)(\\()', bygroups(Name.Function, Punctuation)), ('([\\w.!&|()]+)(::)', bygroups(Name.Class, Punctuation)), ('(\\w+)(:)', bygroups(Keyword.Declaration, Punctuation)), ('@[{(][^)}]+[})]', Name.Variable), ('[(){},;]', Punctuation), ('=>', Operator), ('->', Operator), ('\\d+\\.\\d+', Number.Float), ('\\d+', Number.Integer), ('\\w+', Name.Function), ('\\s+', Whitespace)], 'string': [('\\$[{(]', String.Interpol, 'interpol'), ('\\\\.', String.Escape), ('"', String, '#pop'), ('\\n', String), ('.', String)], 'interpol': [('\\$[{(]', String.Interpol, '#push'), ('[})]', String.Interpol, '#pop'), ('[^${()}]+', String.Interpol)], 'arglist': [('\\)', Punctuation, '#pop'), (',', Punctuation), ('\\w+', Name.Variable), ('\\s+', Whitespace)]}
  }

  class ApacheConfLexer {
      + name = 'ApacheConf'
      + aliases = ['apacheconf', 'aconf', 'apache']
      + filenames = ['.htaccess', 'apache.conf', 'apache2.conf']
      + mimetypes = ['text/x-apacheconf']
      + url = 'https://httpd.apache.org/docs/current/configuring.html'
      + version_added = '0.6'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('#(.*\\\\\\n)+.*$|(#.*?)$', Comment), ('(<[^\\s>/][^\\s>]*)(?:(\\s+)(.*))?(>)', bygroups(Name.Tag, Whitespace, String, Name.Tag)), ('(</[^\\s>]+)(>)', bygroups(Name.Tag, Name.Tag)), ('[a-z]\\w*', Name.Builtin, 'value'), ('\\.+', Text)], 'value': [('\\\\\\n', Text), ('\\n+', Whitespace, '#pop'), ('\\\\', Text), ('[^\\S\\n]+', Whitespace), ('\\d+\\.\\d+\\.\\d+\\.\\d+(?:/\\d+)?', Number), ('\\d+', Number), ('/([*a-z0-9][*\\w./-]+)', String.Other), ('(on|off|none|any|all|double|email|dns|min|minimal|os|productonly|full|emerg|alert|crit|error|warn|notice|info|debug|registry|script|inetd|standalone|user|group)\\b', Keyword), ('"([^"\\\\]*(?:\\\\(.|\\n)[^"\\\\]*)*)"', String.Double), ('[^\\s"\\\\]+', Text)]}
  }

  class SquidConfLexer {
      + name = 'SquidConf'
      + url = 'http://www.squid-cache.org/'
      + aliases = ['squidconf', 'squid.conf', 'squid']
      + filenames = ['squid.conf']
      + mimetypes = ['text/x-squidconf']
      + version_added = '0.9'
      + flags = re.IGNORECASE
      + keywords = ('access_log', 'acl', 'always_direct', 'announce_host', 'announce_period', 'announce_port', 'announce_to', 'anonymize_headers', 'append_domain', 'as_whois_server', 'auth_param_basic', 'authenticate_children', 'authenticate_program', 'authenticate_ttl', 'broken_posts', 'buffered_logs', 'cache_access_log', 'cache_announce', 'cache_dir', 'cache_dns_program', 'cache_effective_group', 'cache_effective_user', 'cache_host', 'cache_host_acl', 'cache_host_domain', 'cache_log', 'cache_mem', 'cache_mem_high', 'cache_mem_low', 'cache_mgr', 'cachemgr_passwd', 'cache_peer', 'cache_peer_access', 'cache_replacement_policy', 'cache_stoplist', 'cache_stoplist_pattern', 'cache_store_log', 'cache_swap', 'cache_swap_high', 'cache_swap_log', 'cache_swap_low', 'client_db', 'client_lifetime', 'client_netmask', 'connect_timeout', 'coredump_dir', 'dead_peer_timeout', 'debug_options', 'delay_access', 'delay_class', 'delay_initial_bucket_level', 'delay_parameters', 'delay_pools', 'deny_info', 'dns_children', 'dns_defnames', 'dns_nameservers', 'dns_testnames', 'emulate_httpd_log', 'err_html_text', 'fake_user_agent', 'firewall_ip', 'forwarded_for', 'forward_snmpd_port', 'fqdncache_size', 'ftpget_options', 'ftpget_program', 'ftp_list_width', 'ftp_passive', 'ftp_user', 'half_closed_clients', 'header_access', 'header_replace', 'hierarchy_stoplist', 'high_response_time_warning', 'high_page_fault_warning', 'hosts_file', 'htcp_port', 'http_access', 'http_anonymizer', 'httpd_accel', 'httpd_accel_host', 'httpd_accel_port', 'httpd_accel_uses_host_header', 'httpd_accel_with_proxy', 'http_port', 'http_reply_access', 'icp_access', 'icp_hit_stale', 'icp_port', 'icp_query_timeout', 'ident_lookup', 'ident_lookup_access', 'ident_timeout', 'incoming_http_average', 'incoming_icp_average', 'inside_firewall', 'ipcache_high', 'ipcache_low', 'ipcache_size', 'local_domain', 'local_ip', 'logfile_rotate', 'log_fqdn', 'log_icp_queries', 'log_mime_hdrs', 'maximum_object_size', 'maximum_single_addr_tries', 'mcast_groups', 'mcast_icp_query_timeout', 'mcast_miss_addr', 'mcast_miss_encode_key', 'mcast_miss_port', 'memory_pools', 'memory_pools_limit', 'memory_replacement_policy', 'mime_table', 'min_http_poll_cnt', 'min_icp_poll_cnt', 'minimum_direct_hops', 'minimum_object_size', 'minimum_retry_timeout', 'miss_access', 'negative_dns_ttl', 'negative_ttl', 'neighbor_timeout', 'neighbor_type_domain', 'netdb_high', 'netdb_low', 'netdb_ping_period', 'netdb_ping_rate', 'never_direct', 'no_cache', 'passthrough_proxy', 'pconn_timeout', 'pid_filename', 'pinger_program', 'positive_dns_ttl', 'prefer_direct', 'proxy_auth', 'proxy_auth_realm', 'query_icmp', 'quick_abort', 'quick_abort_max', 'quick_abort_min', 'quick_abort_pct', 'range_offset_limit', 'read_timeout', 'redirect_children', 'redirect_program', 'redirect_rewrites_host_header', 'reference_age', 'refresh_pattern', 'reload_into_ims', 'request_body_max_size', 'request_size', 'request_timeout', 'shutdown_lifetime', 'single_parent_bypass', 'siteselect_timeout', 'snmp_access', 'snmp_incoming_address', 'snmp_port', 'source_ping', 'ssl_proxy', 'store_avg_object_size', 'store_objects_per_bucket', 'strip_query_terms', 'swap_level1_dirs', 'swap_level2_dirs', 'tcp_incoming_address', 'tcp_outgoing_address', 'tcp_recv_bufsize', 'test_reachability', 'udp_hit_obj', 'udp_hit_obj_size', 'udp_incoming_address', 'udp_outgoing_address', 'unique_hostname', 'unlinkd_program', 'uri_whitespace', 'useragent_log', 'visible_hostname', 'wais_relay', 'wais_relay_host', 'wais_relay_port')
      + opts = ('proxy-only', 'weight', 'ttl', 'no-query', 'default', 'round-robin', 'multicast-responder', 'on', 'off', 'all', 'deny', 'allow', 'via', 'parent', 'no-digest', 'heap', 'lru', 'realm', 'children', 'q1', 'q2', 'credentialsttl', 'none', 'disable', 'offline_toggle', 'diskd')
      + actions = ('shutdown', 'info', 'parameter', 'server_list', 'client_list', 'squid.conf')
      + actions_stats = ('objects', 'vm_objects', 'utilization', 'ipcache', 'fqdncache', 'dns', 'redirector', 'io', 'reply_headers', 'filedescriptors', 'netdb')
      + actions_log = ('status', 'enable', 'disable', 'clear')
      + acls = ('url_regex', 'urlpath_regex', 'referer_regex', 'port', 'proto', 'req_mime_type', 'rep_mime_type', 'method', 'browser', 'user', 'src', 'dst', 'time', 'dstdomain', 'ident', 'snmp_community')
      + ipv4_group = '(\\d+|0x[0-9a-f]+)'
      + ipv4 = f'({ipv4_group}(\\.{ipv4_group}){{3}})'
      + ipv6_group = '([0-9a-f]{0,4})'
      + ipv6 = f'({ipv6_group}(:{ipv6_group}){{1,7}})'
      + bare_ip = f'({ipv4}|{ipv6})'
      + ip = f'{bare_ip}(/({bare_ip}|\\d+))?'
      + tokens = {'root': [('\\s+', Whitespace), ('#', Comment, 'comment'), (words(keywords, prefix='\\b', suffix='\\b'), Keyword), (words(opts, prefix='\\b', suffix='\\b'), Name.Constant), (words(actions, prefix='\\b', suffix='\\b'), String), (words(actions_stats, prefix='stats/', suffix='\\b'), String), (words(actions_log, prefix='log/', suffix='='), String), (words(acls, prefix='\\b', suffix='\\b'), Keyword), (ip, Number.Float), ('(?:\\b\\d+\\b(?:-\\b\\d+|%)?)', Number), ('\\S+', Text)], 'comment': [('\\s*TAG:.*', String.Escape, '#pop'), ('.+', Comment, '#pop'), default('#pop')]}
  }

  class NginxConfLexer {
      + name = 'Nginx configuration file'
      + url = 'http://nginx.net/'
      + aliases = ['nginx']
      + filenames = ['nginx.conf']
      + mimetypes = ['text/x-nginx-conf']
      + version_added = '0.11'
      + tokens = {'root': [('(include)(\\s+)([^\\s;]+)', bygroups(Keyword, Whitespace, Name)), ('[^\\s;#]+', Keyword, 'stmt'), include('base')], 'block': [('\\}', Punctuation, '#pop:2'), ('[^\\s;#]+', Keyword.Namespace, 'stmt'), include('base')], 'stmt': [('\\{', Punctuation, 'block'), (';', Punctuation, '#pop'), include('base')], 'base': [('#.*\\n', Comment.Single), ('on|off', Name.Constant), ('\\$[^\\s;#()]+', Name.Variable), ('([a-z0-9.-]+)(:)([0-9]+)', bygroups(Name, Punctuation, Number.Integer)), ('[a-z-]+/[a-z-+]+', String), ('[0-9]+[km]?\\b', Number.Integer), ('(~)(\\s*)([^\\s{]+)', bygroups(Punctuation, Whitespace, String.Regex)), ('[:=~]', Punctuation), ('[^\\s;#{}$]+', String), ('/[^\\s;#]*', Name), ('\\s+', Whitespace), ('[$;]', Text)]}
  }

  class LighttpdConfLexer {
      + name = 'Lighttpd configuration file'
      + url = 'http://lighttpd.net/'
      + aliases = ['lighttpd', 'lighty']
      + filenames = ['lighttpd.conf']
      + mimetypes = ['text/x-lighttpd-conf']
      + version_added = '0.11'
      + tokens = {'root': [('#.*\\n', Comment.Single), ('/\\S*', Name), ('[a-zA-Z._-]+', Keyword), ('\\d+\\.\\d+\\.\\d+\\.\\d+(?:/\\d+)?', Number), ('[0-9]+', Number), ('=>|=~|\\+=|==|=|\\+', Operator), ('\\$[A-Z]+', Name.Builtin), ('[(){}\\[\\],]', Punctuation), ('"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"', String.Double), ('\\s+', Whitespace)]}
  }

  class DockerLexer {
      + name = 'Docker'
      + url = 'http://docker.io'
      + aliases = ['docker', 'dockerfile']
      + filenames = ['Dockerfile', '*.docker']
      + mimetypes = ['text/x-dockerfile-config']
      + version_added = '2.0'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [('#.*', Comment), ('(FROM)([ \\t]*)(\\S*)([ \\t]*)(?:(AS)([ \\t]*)(\\S*))?', bygroups(Keyword, Whitespace, String, Whitespace, Keyword, Whitespace, String)), (f'(ONBUILD)(\\s+)({_lb})', bygroups(Keyword, Whitespace, using(BashLexer))), (f'(HEALTHCHECK)(\\s+)(({_lb}--\\w+=\\w+{_lb})*)', bygroups(Keyword, Whitespace, using(BashLexer))), (f'(VOLUME|ENTRYPOINT|CMD|SHELL)(\\s+)({_lb})(\\[.*?\\])', bygroups(Keyword, Whitespace, using(BashLexer), using(JsonLexer))), (f'(LABEL|ENV|ARG)(\\s+)(({_lb}\\w+=\\w+{_lb})*)', bygroups(Keyword, Whitespace, using(BashLexer))), (f'({_keywords}|VOLUME)\\b(\\s+)(.*)', bygroups(Keyword, Whitespace, String)), (f'({_bash_keywords})(\\s+)', bygroups(Keyword, Whitespace)), ('(.*\\\\\\n)*.+', using(BashLexer))]}
  }

  class TerraformLexer {
      + name = 'Terraform'
      + url = 'https://www.terraform.io/'
      + aliases = ['terraform', 'tf', 'hcl']
      + filenames = ['*.tf', '*.hcl']
      + mimetypes = ['application/x-tf', 'application/x-terraform']
      + version_added = '2.1'
      + classes = ('backend', 'data', 'module', 'output', 'provider', 'provisioner', 'resource', 'variable')
      + classes_re = '({})'.format('|'.join(classes))
      + types = ('string', 'number', 'bool', 'list', 'tuple', 'map', 'set', 'object', 'null')
      + numeric_functions = ('abs', 'ceil', 'floor', 'log', 'max', 'mix', 'parseint', 'pow', 'signum')
      + string_functions = ('chomp', 'format', 'formatlist', 'indent', 'join', 'lower', 'regex', 'regexall', 'replace', 'split', 'strrev', 'substr', 'title', 'trim', 'trimprefix', 'trimsuffix', 'trimspace', 'upper')
      + collection_functions = ('alltrue', 'anytrue', 'chunklist', 'coalesce', 'coalescelist', 'compact', 'concat', 'contains', 'distinct', 'element', 'flatten', 'index', 'keys', 'length', 'list', 'lookup', 'map', 'matchkeys', 'merge', 'range', 'reverse', 'setintersection', 'setproduct', 'setsubtract', 'setunion', 'slice', 'sort', 'sum', 'transpose', 'values', 'zipmap')
      + encoding_functions = ('base64decode', 'base64encode', 'base64gzip', 'csvdecode', 'jsondecode', 'jsonencode', 'textdecodebase64', 'textencodebase64', 'urlencode', 'yamldecode', 'yamlencode')
      + filesystem_functions = ('abspath', 'dirname', 'pathexpand', 'basename', 'file', 'fileexists', 'fileset', 'filebase64', 'templatefile')
      + date_time_functions = ('formatdate', 'timeadd', 'timestamp')
      + hash_crypto_functions = ('base64sha256', 'base64sha512', 'bcrypt', 'filebase64sha256', 'filebase64sha512', 'filemd5', 'filesha1', 'filesha256', 'filesha512', 'md5', 'rsadecrypt', 'sha1', 'sha256', 'sha512', 'uuid', 'uuidv5')
      + ip_network_functions = ('cidrhost', 'cidrnetmask', 'cidrsubnet', 'cidrsubnets')
      + type_conversion_functions = ('can', 'defaults', 'tobool', 'tolist', 'tomap', 'tonumber', 'toset', 'tostring', 'try')
      + builtins = numeric_functions + string_functions + collection_functions + encoding_functions + filesystem_functions + date_time_functions + hash_crypto_functions + ip_network_functions + type_conversion_functions
      + builtins_re = '({})'.format('|'.join(builtins))
      + tokens = {'root': [include('basic'), include('whitespace'), ('(".*")', bygroups(String.Double)), (words(('true', 'false'), prefix='\\b', suffix='\\b'), Name.Constant), (words(types, prefix='\\b', suffix='\\b'), Keyword.Type), include('identifier'), include('punctuation'), ('[0-9]+', Number)], 'basic': [('\\s*/\\*', Comment.Multiline, 'comment'), ('\\s*(#|//).*\\n', Comment.Single), include('whitespace'), ('(\\s*)([0-9a-zA-Z-_]+)(\\s*)(=?)(\\s*)(\\{)', bygroups(Whitespace, Name.Builtin, Whitespace, Operator, Whitespace, Punctuation)), ('(\\s*)([0-9a-zA-Z-_]+)(\\s*)(=)(\\s*)', bygroups(Whitespace, Name.Attribute, Whitespace, Operator, Whitespace)), ('(\\s*)("\\S+")(\\s*)([=:])(\\s*)', bygroups(Whitespace, Literal.String.Double, Whitespace, Operator, Whitespace)), (builtins_re + '(\\()', bygroups(Name.Function, Punctuation)), ('(\\[)([a-z_,\\s]+)(\\])', bygroups(Punctuation, Name.Builtin, Punctuation)), (classes_re + '(\\s+)("[0-9a-zA-Z-_]+")?(\\s*)("[0-9a-zA-Z-_]+")(\\s+)(\\{)', bygroups(Keyword.Reserved, Whitespace, Name.Class, Whitespace, Name.Variable, Whitespace, Punctuation)), ('(<<-?)\\s*([a-zA-Z_]\\w*)(.*?\\n)', heredoc_callback)], 'identifier': [('\\b(var\\.[0-9a-zA-Z-_\\.\\[\\]]+)\\b', bygroups(Name.Variable)), ('\\b([0-9a-zA-Z-_\\[\\]]+\\.[0-9a-zA-Z-_\\.\\[\\]]+)\\b', bygroups(Name.Variable))], 'punctuation': [('[\\[\\]()\\{\\},.?:!=]', Punctuation)], 'comment': [('[^*/]', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'whitespace': [('\\n', Whitespace), ('\\s+', Whitespace), ('(\\\\)(\\n)', bygroups(Text, Whitespace))]}
  --
      + heredoc_callback(match, ctx)
  }

  class TermcapLexer {
      + name = 'Termcap'
      + aliases = ['termcap']
      + filenames = ['termcap', 'termcap.src']
      + mimetypes = []
      + url = 'https://en.wikipedia.org/wiki/Termcap'
      + version_added = '2.1'
      + tokens = {'root': [('^#.*', Comment), ('^[^\\s#:|]+', Name.Tag, 'names'), ('\\s+', Whitespace)], 'names': [('\\n', Whitespace, '#pop'), (':', Punctuation, 'defs'), ('\\|', Punctuation), ('[^:|]+', Name.Attribute)], 'defs': [('(\\\\)(\\n[ \\t]*)', bygroups(Text, Whitespace)), ('\\n[ \\t]*', Whitespace, '#pop:2'), ('(#)([0-9]+)', bygroups(Operator, Number)), ('=', Operator, 'data'), (':', Punctuation), ('[^\\s:=#]+', Name.Class)], 'data': [('\\\\072', Literal), (':', Punctuation, '#pop'), ('[^:\\\\]+', Literal), ('.', Literal)]}
  }

  class TerminfoLexer {
      + name = 'Terminfo'
      + aliases = ['terminfo']
      + filenames = ['terminfo', 'terminfo.src']
      + mimetypes = []
      + url = 'https://en.wikipedia.org/wiki/Terminfo'
      + version_added = '2.1'
      + tokens = {'root': [('^#.*$', Comment), ('^[^\\s#,|]+', Name.Tag, 'names'), ('\\s+', Whitespace)], 'names': [('\\n', Whitespace, '#pop'), ('(,)([ \\t]*)', bygroups(Punctuation, Whitespace), 'defs'), ('\\|', Punctuation), ('[^,|]+', Name.Attribute)], 'defs': [('\\n[ \\t]+', Whitespace), ('\\n', Whitespace, '#pop:2'), ('(#)([0-9]+)', bygroups(Operator, Number)), ('=', Operator, 'data'), ('(,)([ \\t]*)', bygroups(Punctuation, Whitespace)), ('[^\\s,=#]+', Name.Class)], 'data': [('\\\\[,\\\\]', Literal), ('(,)([ \\t]*)', bygroups(Punctuation, Whitespace), '#pop'), ('[^\\\\,]+', Literal), ('.', Literal)]}
  }

  class PkgConfigLexer {
      + name = 'PkgConfig'
      + url = 'http://www.freedesktop.org/wiki/Software/pkg-config/'
      + aliases = ['pkgconfig']
      + filenames = ['*.pc']
      + mimetypes = []
      + version_added = '2.1'
      + tokens = {'root': [('#.*$', Comment.Single), ('^(\\w+)(=)', bygroups(Name.Attribute, Operator)), ('^([\\w.]+)(:)', bygroups(Name.Tag, Punctuation), 'spvalue'), include('interp'), ('\\s+', Whitespace), ('[^${}#=:\\n.]+', Text), ('.', Text)], 'interp': [('\\$\\$', Text), ('\\$\\{', String.Interpol, 'curly')], 'curly': [('\\}', String.Interpol, '#pop'), ('\\w+', Name.Attribute)], 'spvalue': [include('interp'), ('#.*$', Comment.Single, '#pop'), ('\\n', Whitespace, '#pop'), ('\\s+', Whitespace), ('[^${}#\\n\\s]+', Text), ('.', Text)]}
  }

  class PacmanConfLexer {
      + name = 'PacmanConf'
      + url = 'https://www.archlinux.org/pacman/pacman.conf.5.html'
      + aliases = ['pacmanconf']
      + filenames = ['pacman.conf']
      + mimetypes = []
      + version_added = '2.1'
      + tokens = {'root': [('#.*$', Comment.Single), ('^(\\s*)(\\[.*?\\])(\\s*)$', bygroups(Whitespace, Keyword, Whitespace)), ('(\\w+)(\\s*)(=)', bygroups(Name.Attribute, Whitespace, Operator)), ('^(\\s*)(\\w+)(\\s*)$', bygroups(Whitespace, Name.Attribute, Whitespace)), (words(('$repo', '$arch', '%o', '%u'), suffix='\\b'), Name.Variable), ('\\s+', Whitespace), ('.', Text)]}
  }

  class AugeasLexer {
      + name = 'Augeas'
      + url = 'http://augeas.net'
      + aliases = ['augeas']
      + filenames = ['*.aug']
      + version_added = '2.4'
      + tokens = {'root': [('(module)(\\s*)([^\\s=]+)', bygroups(Keyword.Namespace, Whitespace, Name.Namespace)), ('(let)(\\s*)([^\\s=]+)', bygroups(Keyword.Declaration, Whitespace, Name.Variable)), ('(del|store|value|counter|seq|key|label|autoload|incl|excl|transform|test|get|put)(\\s+)', bygroups(Name.Builtin, Whitespace)), ('(\\()([^:]+)(\\:)(unit|string|regexp|lens|tree|filter)(\\))', bygroups(Punctuation, Name.Variable, Punctuation, Keyword.Type, Punctuation)), ('\\(\\*', Comment.Multiline, 'comment'), ('[*+\\-.;=?|]', Operator), ('[()\\[\\]{}]', Operator), ('"', String.Double, 'string'), ('\\/', String.Regex, 'regex'), ('([A-Z]\\w*)(\\.)(\\w+)', bygroups(Name.Namespace, Punctuation, Name.Variable)), ('.', Name.Variable), ('\\s+', Whitespace)], 'string': [('\\\\.', String.Escape), ('[^"]', String.Double), ('"', String.Double, '#pop')], 'regex': [('\\\\.', String.Escape), ('[^/]', String.Regex), ('\\/', String.Regex, '#pop')], 'comment': [('[^*)]', Comment.Multiline), ('\\(\\*', Comment.Multiline, '#push'), ('\\*\\)', Comment.Multiline, '#pop'), ('[)*]', Comment.Multiline)]}
  }

  class TOMLLexer {
      + name = 'TOML'
      + aliases = ['toml']
      + filenames = ['*.toml', 'Pipfile', 'poetry.lock']
      + mimetypes = ['application/toml']
      + url = 'https://toml.io'
      + version_added = '2.4'
      + tokens = {'root': [('\\s+', Whitespace), ('#.*', Comment.Single), include('key'), ('(=)(\\s*)', bygroups(Operator, Whitespace), 'value'), ('\\[\\[?', Keyword, 'table-key')], 'key': [('[A-Za-z0-9_-]+', Name), ('"', String.Double, 'basic-string'), ("'", String.Single, 'literal-string'), ('\\.', Punctuation)], 'table-key': [('[A-Za-z0-9_-]+', Keyword), ('"', String.Double, 'basic-string'), ("'", String.Single, 'literal-string'), ('\\.', Keyword), ('\\]\\]?', Keyword, '#pop'), ('[ \\t]+', Whitespace)], 'value': [(_datetime, Literal.Date, '#pop'), (_time, Literal.Date, '#pop'), ('[+-]?\\d[0-9_]*[eE][+-]?\\d[0-9_]*', Number.Float, '#pop'), ('[+-]?\\d[0-9_]*\\.\\d[0-9_]*([eE][+-]?\\d[0-9_]*)?', Number.Float, '#pop'), ('[+-]?(inf|nan)', Number.Float, '#pop'), ('-?0b[01_]+', Number.Bin, '#pop'), ('-?0o[0-7_]+', Number.Oct, '#pop'), ('-?0x[0-9a-fA-F_]+', Number.Hex, '#pop'), ('[+-]?[0-9_]+', Number.Integer, '#pop'), ('"""', String.Double, ('#pop', 'multiline-basic-string')), ('"', String.Double, ('#pop', 'basic-string')), ("'''", String.Single, ('#pop', 'multiline-literal-string')), ("'", String.Single, ('#pop', 'literal-string')), ('true|false', Keyword.Constant, '#pop'), ('\\[', Punctuation, ('#pop', 'array')), ('\\{', Punctuation, ('#pop', 'inline-table'))], 'array': [('\\s+', Whitespace), ('#.*', Comment.Single), (',', Punctuation), ('\\]', Punctuation, '#pop'), default('value')], 'inline-table': [('[ \\t]+', Whitespace), include('key'), ('(=)(\\s*)', bygroups(Punctuation, Whitespace), 'value'), (',', Punctuation), ('\\}', Punctuation, '#pop')], 'basic-string': [('"', String.Double, '#pop'), include('escapes'), ('[^"\\\\]+', String.Double)], 'literal-string': [(".*?'", String.Single, '#pop')], 'multiline-basic-string': [('"""', String.Double, '#pop'), ('(\\\\)(\\n)', bygroups(String.Escape, Whitespace)), include('escapes'), ('[^"\\\\]+', String.Double), ('"', String.Double)], 'multiline-literal-string': [("'''", String.Single, '#pop'), ("[^']+", String.Single), ("'", String.Single)], 'escapes': [('\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}', String.Escape), ('\\\\.', String.Escape)]}
  }

  class NestedTextLexer {
      + name = 'NestedText'
      + url = 'https://nestedtext.org'
      + aliases = ['nestedtext', 'nt']
      + filenames = ['*.nt']
      + version_added = '2.9'
      + tokens = {'root': [('^([ ]*)(#.*)$', bygroups(Whitespace, Comment)), ('^([ ]*)(\\{)', bygroups(Whitespace, Punctuation), 'inline_dict'), ('^([ ]*)(\\[)', bygroups(Whitespace, Punctuation), 'inline_list'), ('^([ ]*)(>)$', bygroups(Whitespace, Punctuation)), ('^([ ]*)(>)( )(.*?)([ \\t]*)$', bygroups(Whitespace, Punctuation, Whitespace, Text, Whitespace)), ('^([ ]*)(-)$', bygroups(Whitespace, Punctuation)), ('^([ ]*)(-)( )(.*?)([ \\t]*)$', bygroups(Whitespace, Punctuation, Whitespace, Text, Whitespace)), ('^([ ]*)(:)$', bygroups(Whitespace, Punctuation)), ('^([ ]*)(:)( )([^\\n]*?)([ \\t]*)$', bygroups(Whitespace, Punctuation, Whitespace, Name.Tag, Whitespace)), ('^([ ]*)([^\\{\\[\\s].*?)(:)$', bygroups(Whitespace, Name.Tag, Punctuation)), ('^([ ]*)([^\\{\\[\\s].*?)(:)( )(.*?)([ \\t]*)$', bygroups(Whitespace, Name.Tag, Punctuation, Whitespace, Text, Whitespace))], 'inline_list': [include('whitespace'), ('[^\\{\\}\\[\\],\\s]+', Text), include('inline_value'), (',', Punctuation), ('\\]', Punctuation, '#pop'), ('\\n', Error, '#pop')], 'inline_dict': [include('whitespace'), ('[^\\{\\}\\[\\],:\\s]+', Name.Tag), (':', Punctuation, 'inline_dict_value'), ('\\}', Punctuation, '#pop'), ('\\n', Error, '#pop')], 'inline_dict_value': [include('whitespace'), ('[^\\{\\}\\[\\],:\\s]+', Text), include('inline_value'), (',', Punctuation, '#pop'), ('\\}', Punctuation, '#pop:2')], 'inline_value': [include('whitespace'), ('\\{', Punctuation, 'inline_dict'), ('\\[', Punctuation, 'inline_list')], 'whitespace': [('[ \\t]+', Whitespace)]}
  }

  class SingularityLexer {
      + name = 'Singularity'
      + url = 'https://www.sylabs.io/guides/3.0/user-guide/definition_files.html'
      + aliases = ['singularity']
      + filenames = ['*.def', 'Singularity']
      + version_added = '2.6'
      + flags = re.IGNORECASE | re.MULTILINE | re.DOTALL
      + tokens = {'root': [(_section, bygroups(Generic.Heading, Whitespace), 'script'), (_appsect, bygroups(Generic.Heading, Whitespace), 'script'), (_headers, bygroups(Whitespace, Keyword, Text)), ('\\s*#.*?\\n', Comment), ('\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b', Number), ('[ \\t]+', Whitespace), ('(?!^\\s*%).', Text)], 'script': [('(.+?(?=^\\s*%))|(.*)', using(BashLexer), '#pop')]}
  --
      + analyse_text(text)
  }

  class UnixConfigLexer {
      + name = 'Unix/Linux config files'
      + aliases = ['unixconfig', 'linuxconfig']
      + filenames = []
      + url = 'https://en.wikipedia.org/wiki/Configuration_file#Unix_and_Unix-like_operating_systems'
      + version_added = '2.12'
      + tokens = {'root': [('^#.*', Comment), ('\\n', Whitespace), (':', Punctuation), ('[0-9]+', Number), ('((?!\\n)[a-zA-Z0-9\\_\\-\\s\\(\\),]){2,}', Text), ('[^:\\n]+', String)]}
  }

  class VCTreeStatusLexer {
      + name = 'VCTreeStatus'
      + aliases = ['vctreestatus']
      + filenames = []
      + mimetypes = []
      + url = ''
      + version_added = '2.0'
      + tokens = {'root': [('^A  \\+  C\\s+', Generic.Error), ('^A\\s+\\+?\\s+', String), ('^M\\s+', Generic.Inserted), ('^C\\s+', Generic.Error), ('^D\\s+', Generic.Deleted), ('^[?!]\\s+', Comment.Preproc), ('      >\\s+.*\\n', Comment.Preproc), ('\\S+', Text), ('\\s+', Whitespace)]}
  }

  class PyPyLogLexer {
      + name = 'PyPy Log'
      + aliases = ['pypylog', 'pypy']
      + filenames = ['*.pypylog']
      + mimetypes = ['application/x-pypylog']
      + url = 'pypy.org'
      + version_added = '1.5'
      + tokens = {'root': [('\\[\\w+\\] \\{jit-log-.*?$', Keyword, 'jit-log'), ('\\[\\w+\\] \\{jit-backend-counts$', Keyword, 'jit-backend-counts'), include('extra-stuff')], 'jit-log': [('\\[\\w+\\] jit-log-.*?}$', Keyword, '#pop'), ('^\\+\\d+: ', Comment), ('--end of the loop--', Comment), ('[ifp]\\d+', Name), ('ptr\\d+', Name), ('(\\()(\\w+(?:\\.\\w+)?)(\\))', bygroups(Punctuation, Name.Builtin, Punctuation)), ('[\\[\\]=,()]', Punctuation), ('(\\d+\\.\\d+|inf|-inf)', Number.Float), ('-?\\d+', Number.Integer), ("'.*'", String), ('(None|descr|ConstClass|ConstPtr|TargetToken)', Name), ('<.*?>+', Name.Builtin), ('(label|debug_merge_point|jump|finish)', Name.Class), ('(int_add_ovf|int_add|int_sub_ovf|int_sub|int_mul_ovf|int_mul|int_floordiv|int_mod|int_lshift|int_rshift|int_and|int_or|int_xor|int_eq|int_ne|int_ge|int_gt|int_le|int_lt|int_is_zero|int_is_true|uint_floordiv|uint_ge|uint_lt|float_add|float_sub|float_mul|float_truediv|float_neg|float_eq|float_ne|float_ge|float_gt|float_le|float_lt|float_abs|ptr_eq|ptr_ne|instance_ptr_eq|instance_ptr_ne|cast_int_to_float|cast_float_to_int|force_token|quasiimmut_field|same_as|virtual_ref_finish|virtual_ref|mark_opaque_ptr|call_may_force|call_assembler|call_loopinvariant|call_release_gil|call_pure|call|new_with_vtable|new_array|newstr|newunicode|new|arraylen_gc|getarrayitem_gc_pure|getarrayitem_gc|setarrayitem_gc|getarrayitem_raw|setarrayitem_raw|getfield_gc_pure|getfield_gc|getinteriorfield_gc|setinteriorfield_gc|getfield_raw|setfield_gc|setfield_raw|strgetitem|strsetitem|strlen|copystrcontent|unicodegetitem|unicodesetitem|unicodelen|guard_true|guard_false|guard_value|guard_isnull|guard_nonnull_class|guard_nonnull|guard_class|guard_no_overflow|guard_not_forced|guard_no_exception|guard_not_invalidated)', Name.Builtin), include('extra-stuff')], 'jit-backend-counts': [('\\[\\w+\\] jit-backend-counts}$', Keyword, '#pop'), (':', Punctuation), ('\\d+', Number), include('extra-stuff')], 'extra-stuff': [('\\s+', Whitespace), ('#.*?$', Comment)]}
  }

  class CplintLexer {
      + name = 'cplint'
      + url = 'https://cplint.eu'
      + aliases = ['cplint']
      + filenames = ['*.ecl', '*.prolog', '*.pro', '*.pl', '*.P', '*.lpad', '*.cpl']
      + mimetypes = ['text/x-cplint']
      + version_added = '2.12'
      + tokens = {'root': [('map_query', Keyword), (words(('gaussian', 'uniform_dens', 'dirichlet', 'gamma', 'beta', 'poisson', 'binomial', 'geometric', 'exponential', 'pascal', 'multinomial', 'user', 'val', 'uniform', 'discrete', 'finite')), Name.Builtin), ('([a-z]+)(:)', bygroups(String.Atom, Punctuation)), (':(-|=)|::?|~=?|=>', Operator), ('\\?', Name.Builtin), inherit]}
  }

  class CrystalLexer {
      + name = 'Crystal'
      + url = 'https://crystal-lang.org'
      + aliases = ['cr', 'crystal']
      + filenames = ['*.cr']
      + mimetypes = ['text/x-crystal']
      + version_added = '2.2'
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'root': [('#.*?$', Comment.Single), (words('\n                abstract asm begin break case do else elsif end ensure extend if in\n                include next of private protected require rescue return select self super\n                then unless until when while with yield\n            '.split(), suffix='\\b'), Keyword), (words('\n                previous_def forall out uninitialized __DIR__ __FILE__ __LINE__\n                __END_LINE__\n            '.split(), prefix='(?<!\\.)', suffix='\\b'), Keyword.Pseudo), ('\\.(is_a\\?|nil\\?|responds_to\\?|as\\?|as\\b)', Keyword.Pseudo), (words(['true', 'false', 'nil'], suffix='\\b'), Keyword.Constant), ('(module|lib)(\\s+)([a-zA-Z_]\\w*(?:::[a-zA-Z_]\\w*)*)', bygroups(Keyword, Whitespace, Name.Namespace)), ('(def|fun|macro)(\\s+)((?:[a-zA-Z_]\\w*::)*)', bygroups(Keyword, Whitespace, Name.Namespace), 'funcname'), ('def(?=[*%&^`~+-/\\[<>=])', Keyword, 'funcname'), ('(annotation|class|struct|union|type|alias|enum)(\\s+)((?:[a-zA-Z_]\\w*::)*)', bygroups(Keyword, Whitespace, Name.Namespace), 'classname'), (words('\n                instance_sizeof offsetof pointerof sizeof typeof\n            '.split(), prefix='(?<!\\.)', suffix='\\b'), Keyword.Pseudo), ('(?<!\\.)(debugger\\b|p!|pp!|record\\b|spawn\\b)', Name.Builtin.Pseudo), (words('\n                abort at_exit caller exit gets loop main p pp print printf puts\n                raise rand read_line sleep spawn sprintf system\n            '.split(), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin), ('(?<!\\.)(((class_)?((getter|property)\\b[!?]?|setter\\b))|(def_(clone|equals|equals_and_hash|hash)|delegate|forward_missing_to)\\b)', Name.Builtin.Pseudo), ('(?<!\\w)(<<-?)(["`\\\']?)([a-zA-Z_]\\w*)(\\2)(.*?\\n)', heredoc_callback), ('(<<-?)("|\\\')()(\\2)(.*?\\n)', heredoc_callback), ('__END__', Comment.Preproc, 'end-part'), ('(?:^|(?<=[=<>~!:])|(?<=(?:\\s|;)when\\s)|(?<=(?:\\s|;)or\\s)|(?<=(?:\\s|;)and\\s)|(?<=\\.index\\s)|(?<=\\.scan\\s)|(?<=\\.sub\\s)|(?<=\\.sub!\\s)|(?<=\\.gsub\\s)|(?<=\\.gsub!\\s)|(?<=\\.match\\s)|(?<=(?:\\s|;)if\\s)|(?<=(?:\\s|;)elsif\\s)|(?<=^when\\s)|(?<=^index\\s)|(?<=^scan\\s)|(?<=^sub\\s)|(?<=^gsub\\s)|(?<=^sub!\\s)|(?<=^gsub!\\s)|(?<=^match\\s)|(?<=^if\\s)|(?<=^elsif\\s))(\\s*)(/)', bygroups(Whitespace, String.Regex), 'multiline-regex'), ('(?<=\\(|,|\\[)/', String.Regex, 'multiline-regex'), ('(\\s+)(/)(?![\\s=])', bygroups(Whitespace, String.Regex), 'multiline-regex'), ('(0o[0-7]+(?:_[0-7]+)*(?:_?[iu][0-9]+)?)\\b(\\s*)([/?])?', bygroups(Number.Oct, Whitespace, Operator)), ('(0x[0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*(?:_?[iu][0-9]+)?)\\b(\\s*)([/?])?', bygroups(Number.Hex, Whitespace, Operator)), ('(0b[01]+(?:_[01]+)*(?:_?[iu][0-9]+)?)\\b(\\s*)([/?])?', bygroups(Number.Bin, Whitespace, Operator)), ('((?:0(?![0-9])|[1-9][\\d_]*)(?:\\.\\d[\\d_]*)(?:e[+-]?[0-9]+)?(?:_?f[0-9]+)?)(\\s*)([/?])?', bygroups(Number.Float, Whitespace, Operator)), ('((?:0(?![0-9])|[1-9][\\d_]*)(?:\\.\\d[\\d_]*)?(?:e[+-]?[0-9]+)(?:_?f[0-9]+)?)(\\s*)([/?])?', bygroups(Number.Float, Whitespace, Operator)), ('((?:0(?![0-9])|[1-9][\\d_]*)(?:\\.\\d[\\d_]*)?(?:e[+-]?[0-9]+)?(?:_?f[0-9]+))(\\s*)([/?])?', bygroups(Number.Float, Whitespace, Operator)), ('(0\\b|[1-9][\\d]*(?:_\\d+)*(?:_?[iu][0-9]+)?)\\b(\\s*)([/?])?', bygroups(Number.Integer, Whitespace, Operator)), ('@@[a-zA-Z_]\\w*', Name.Variable.Class), ('@[a-zA-Z_]\\w*', Name.Variable.Instance), ('\\$\\w+', Name.Variable.Global), ('\\$[!@&`\\\'+~=/\\\\,;.<>_*$?:"^-]', Name.Variable.Global), ('\\$-[0adFiIlpvw]', Name.Variable.Global), ('::', Operator), include('strings'), ('\\?(\\\\[MC]-)*(\\\\([\\\\abefnrtv#"\\\']|[0-7]{1,3}|x[a-fA-F0-9]{2}|u[a-fA-F0-9]{4}|u\\{[a-fA-F0-9 ]+\\})|\\S)(?!\\w)', String.Char), ('[A-Z][A-Z_]+\\b(?!::|\\.)', Name.Constant), ('\\{%', String.Interpol, 'in-macro-control'), ('\\{\\{', String.Interpol, 'in-macro-expr'), ('(@\\[)(\\s*)([A-Z]\\w*(::[A-Z]\\w*)*)', bygroups(Operator, Whitespace, Name.Decorator), 'in-annot'), (words(CRYSTAL_OPERATORS, prefix='(\\.|::)'), bygroups(Operator, Name.Operator)), ('(\\.|::)([a-zA-Z_]\\w*[!?]?|[*%&^`~+\\-/\\[<>=])', bygroups(Operator, Name)), ('[a-zA-Z_]\\w*(?:[!?](?!=))?', Name), ('(\\[|\\]\\??|\\*\\*|<=>?|>=|<<?|>>?|=~|===|!~|&&?|\\|\\||\\.{1,3})', Operator), ('[-+/*%=<>&!^|~]=?', Operator), ('[(){};,/?:\\\\]', Punctuation), ('\\s+', Whitespace)], 'funcname': [('(?:([a-zA-Z_]\\w*)(\\.))?([a-zA-Z_]\\w*[!?]?|\\*\\*?|[-+]@?|[/%&|^`~]|\\[\\]=?|<<|>>|<=?>|>=?|===?)', bygroups(Name.Class, Operator, Name.Function), '#pop'), default('#pop')], 'classname': [('[A-Z_]\\w*', Name.Class), ('(\\()(\\s*)([A-Z_]\\w*)(\\s*)(\\))', bygroups(Punctuation, Whitespace, Name.Class, Whitespace, Punctuation)), default('#pop')], 'in-intp': [('\\{', String.Interpol, '#push'), ('\\}', String.Interpol, '#pop'), include('root')], 'string-intp': [('#\\{', String.Interpol, 'in-intp')], 'string-escaped': [('\\\\([\\\\abefnrtv#"\\\']|[0-7]{1,3}|x[a-fA-F0-9]{2}|u[a-fA-F0-9]{4}|u\\{[a-fA-F0-9 ]+\\})', String.Escape)], 'string-intp-escaped': [include('string-intp'), include('string-escaped')], 'interpolated-regex': [include('string-intp'), ('[\\\\#]', String.Regex), ('[^\\\\#]+', String.Regex)], 'interpolated-string': [include('string-intp'), ('[\\\\#]', String.Other), ('[^\\\\#]+', String.Other)], 'multiline-regex': [include('string-intp'), ('\\\\\\\\', String.Regex), ('\\\\/', String.Regex), ('[\\\\#]', String.Regex), ('[^\\\\/#]+', String.Regex), ('/[imsx]*', String.Regex, '#pop')], 'end-part': [('.+', Comment.Preproc, '#pop')], 'in-macro-control': [('\\{%', String.Interpol, '#push'), ('%\\}', String.Interpol, '#pop'), ('(for|verbatim)\\b', Keyword), include('root')], 'in-macro-expr': [('\\{\\{', String.Interpol, '#push'), ('\\}\\}', String.Interpol, '#pop'), include('root')], 'in-annot': [('\\[', Operator, '#push'), ('\\]', Operator, '#pop'), include('root')]}
  --
      + heredoc_callback(match, ctx)
      + gen_crystalstrings_rules()
  }

  class CsoundLexer {
      + url = 'https://csound.com/'
      + tokens = {'whitespace': [('[ \\t]+', Whitespace), ('/[*](?:.|\\n)*?[*]/', Comment.Multiline), ('(?:;|//).*$', Comment.Single), ('(\\\\)(\\n)', bygroups(Text, Whitespace))], 'preprocessor directives': [('#(?:e(?:nd(?:if)?|lse)\\b|##)|@@?[ \\t]*\\d+', Comment.Preproc), ('#includestr', Comment.Preproc, 'includestr directive'), ('#include', Comment.Preproc, 'include directive'), ('#[ \\t]*define', Comment.Preproc, 'define directive'), ('#(?:ifn?def|undef)\\b', Comment.Preproc, 'macro directive')], 'include directive': [include('whitespace'), ('([^ \\t]).*?\\1', String, '#pop')], 'includestr directive': [include('whitespace'), ('"', String, ('#pop', 'quoted string'))], 'define directive': [('\\n', Whitespace), include('whitespace'), ('([A-Z_a-z]\\w*)(\\()', bygroups(Comment.Preproc, Punctuation), ('#pop', 'macro parameter name list')), ('[A-Z_a-z]\\w*', Comment.Preproc, ('#pop', 'before macro body'))], 'macro parameter name list': [include('whitespace'), ('[A-Z_a-z]\\w*', Comment.Preproc), ("['#]", Punctuation), ('\\)', Punctuation, ('#pop', 'before macro body'))], 'before macro body': [('\\n', Whitespace), include('whitespace'), ('#', Punctuation, ('#pop', 'macro body'))], 'macro body': [('(?:\\\\(?!#)|[^#\\\\]|\\n)+', Comment.Preproc), ('\\\\#', Comment.Preproc), ('(?<!\\\\)#', Punctuation, '#pop')], 'macro directive': [include('whitespace'), ('[A-Z_a-z]\\w*', Comment.Preproc, '#pop')], 'macro uses': [('(\\$[A-Z_a-z]\\w*\\.?)(\\()', bygroups(Comment.Preproc, Punctuation), 'macro parameter value list'), ('\\$[A-Z_a-z]\\w*(?:\\.|\\b)', Comment.Preproc)], 'macro parameter value list': [('(?:[^\\\'#"{()]|\\{(?!\\{))+', Comment.Preproc), ("['#]", Punctuation), ('"', String, 'macro parameter value quoted string'), ('\\{\\{', String, 'macro parameter value braced string'), ('\\(', Comment.Preproc, 'macro parameter value parenthetical'), ('\\)', Punctuation, '#pop')], 'macro parameter value quoted string': [("\\\\[#'()]", Comment.Preproc), ("[#'()]", Error), include('quoted string')], 'macro parameter value braced string': [("\\\\[#'()]", Comment.Preproc), ("[#'()]", Error), include('braced string')], 'macro parameter value parenthetical': [('(?:[^\\\\()]|\\\\\\))+', Comment.Preproc), ('\\(', Comment.Preproc, '#push'), ('\\)', Comment.Preproc, '#pop')], 'whitespace and macro uses': [include('whitespace'), include('macro uses')], 'numbers': [('\\d+[Ee][+-]?\\d+|(\\d+\\.\\d*|\\d*\\.\\d+)([Ee][+-]?\\d+)?', Number.Float), ('(0[Xx])([0-9A-Fa-f]+)', bygroups(Keyword.Type, Number.Hex)), ('\\d+', Number.Integer)], 'quoted string': [('"', String, '#pop'), ('[^"$]+', String), include('macro uses'), ('[$]', String)], 'braced string': []}
  }

  class CsoundScoreLexer {
      + name = 'Csound Score'
      + aliases = ['csound-score', 'csound-sco']
      + filenames = ['*.sco']
      + version_added = '2.1'
      + tokens = {'root': [('\\n', Whitespace), include('whitespace and macro uses'), include('preprocessor directives'), ('[aBbCdefiqstvxy]', Keyword), ('z', Keyword.Constant), ('([nNpP][pP])(\\d+)', bygroups(Keyword, Number.Integer)), ('[mn]', Keyword, 'mark statement'), include('numbers'), ('[!+\\-*/^%&|<>#~.]', Operator), ('[()\\[\\]]', Punctuation), ('"', String, 'quoted string'), ('\\{', Comment.Preproc, 'loop after left brace')], 'mark statement': [include('whitespace and macro uses'), ('[A-Z_a-z]\\w*', Name.Label), ('\\n', Whitespace, '#pop')], 'loop after left brace': [include('whitespace and macro uses'), ('\\d+', Number.Integer, ('#pop', 'loop after repeat count'))], 'loop after repeat count': [include('whitespace and macro uses'), ('[A-Z_a-z]\\w*', Comment.Preproc, ('#pop', 'loop'))], 'loop': [('\\}', Comment.Preproc, '#pop'), include('root')], 'braced string': [('\\}\\}', String, '#pop'), ('[^}]|\\}(?!\\})', String)]}
  }

  class CsoundOrchestraLexer {
      + name = 'Csound Orchestra'
      + aliases = ['csound', 'csound-orc']
      + filenames = ['*.orc', '*.udo']
      + version_added = '2.1'
      + user_defined_opcodes = set()
      + tokens = {'root': [('\\n', Whitespace), ('^([ \\t]*)(\\w+)(:)([ \\t]+|$)', bygroups(Whitespace, Name.Label, Punctuation, Whitespace)), include('whitespace and macro uses'), include('preprocessor directives'), ('\\binstr\\b', Keyword.Declaration, 'instrument numbers and identifiers'), ('\\bopcode\\b', Keyword.Declaration, 'after opcode keyword'), ('\\b(?:end(?:in|op))\\b', Keyword.Declaration), include('partial statements')], 'partial statements': [('\\b(?:0dbfs|A4|k(?:r|smps)|nchnls(?:_i)?|sr)\\b', Name.Variable.Global), include('numbers'), ('\\+=|-=|\\*=|/=|<<|>>|<=|>=|==|!=|&&|\\|\\||[~¬]|[=!+\\-*/^%&|<>#?:]', Operator), ('[(),\\[\\]]', Punctuation), ('"', String, 'quoted string'), ('\\{\\{', String, 'braced string'), (words(('do', 'else', 'elseif', 'endif', 'enduntil', 'fi', 'if', 'ithen', 'kthen', 'od', 'then', 'until', 'while'), prefix='\\b', suffix='\\b'), Keyword), (words(('return', 'rireturn'), prefix='\\b', suffix='\\b'), Keyword.Pseudo), ('\\b[ik]?goto\\b', Keyword, 'goto label'), ('\\b(r(?:einit|igoto)|tigoto)(\\(|\\b)', bygroups(Keyword.Pseudo, Punctuation), 'goto label'), ('\\b(c(?:g|in?|k|nk?)goto)(\\(|\\b)', bygroups(Keyword.Pseudo, Punctuation), ('goto label', 'goto argument')), ('\\b(timout)(\\(|\\b)', bygroups(Keyword.Pseudo, Punctuation), ('goto label', 'goto argument', 'goto argument')), ('\\b(loop_[gl][et])(\\(|\\b)', bygroups(Keyword.Pseudo, Punctuation), ('goto label', 'goto argument', 'goto argument', 'goto argument')), ('\\bprintk?s\\b', Name.Builtin, 'prints opcode'), ('\\b(?:readscore|scoreline(?:_i)?)\\b', Name.Builtin, 'Csound score opcode'), ('\\bpyl?run[it]?\\b', Name.Builtin, 'Python opcode'), ('\\blua_(?:exec|opdef)\\b', Name.Builtin, 'Lua opcode'), ('\\bp\\d+\\b', Name.Variable.Instance), ('\\b([A-Z_a-z]\\w*)(?:(:)([A-Za-z]))?\\b', name_callback)], 'instrument numbers and identifiers': [include('whitespace and macro uses'), ('\\d+|[A-Z_a-z]\\w*', Name.Function), ('[+,]', Punctuation), ('\\n', Whitespace, '#pop')], 'after opcode keyword': [include('whitespace and macro uses'), ('[A-Z_a-z]\\w*', opcode_name_callback, ('#pop', 'opcode type signatures')), ('\\n', Whitespace, '#pop')], 'opcode type signatures': [include('whitespace and macro uses'), ('0|[afijkKoOpPStV\\[\\]]+', Keyword.Type), (',', Punctuation), ('\\n', Whitespace, '#pop')], 'quoted string': [('"', String, '#pop'), ('[^\\\\"$%)]+', String), include('macro uses'), include('escape sequences'), include('format specifiers'), ('[\\\\$%)]', String)], 'braced string': [('\\}\\}', String, '#pop'), ('(?:[^\\\\%)}]|\\}(?!\\}))+', String), include('escape sequences'), include('format specifiers'), ('[\\\\%)]', String)], 'escape sequences': [('\\\\(?:[\\\\abnrt"]|[0-7]{1,3})', String.Escape)], 'format specifiers': [('%[#0\\- +]*\\d*(?:\\.\\d+)?[AE-GXac-giosux]', String.Interpol), ('%%', String.Escape)], 'goto argument': [include('whitespace and macro uses'), (',', Punctuation, '#pop'), include('partial statements')], 'goto label': [include('whitespace and macro uses'), ('\\w+', Name.Label, '#pop'), default('#pop')], 'prints opcode': [include('whitespace and macro uses'), ('"', String, 'prints quoted string'), default('#pop')], 'prints quoted string': [('\\\\\\\\[aAbBnNrRtT]', String.Escape), ('%[!nNrRtT]|[~^]{1,2}', String.Escape), include('quoted string')], 'Csound score opcode': [include('whitespace and macro uses'), ('"', String, 'quoted string'), ('\\{\\{', String, 'Csound score'), ('\\n', Whitespace, '#pop')], 'Csound score': [('\\}\\}', String, '#pop'), ('([^}]+)|\\}(?!\\})', using(CsoundScoreLexer))], 'Python opcode': [include('whitespace and macro uses'), ('"', String, 'quoted string'), ('\\{\\{', String, 'Python'), ('\\n', Whitespace, '#pop')], 'Python': [('\\}\\}', String, '#pop'), ('([^}]+)|\\}(?!\\})', using(PythonLexer))], 'Lua opcode': [include('whitespace and macro uses'), ('"', String, 'quoted string'), ('\\{\\{', String, 'Lua'), ('\\n', Whitespace, '#pop')], 'Lua': [('\\}\\}', String, '#pop'), ('([^}]+)|\\}(?!\\})', using(LuaLexer))]}
  --
      + opcode_name_callback(lexer, match)
      + name_callback(lexer, match)
  }

  class CsoundDocumentLexer {
      + name = 'Csound Document'
      + aliases = ['csound-document', 'csound-csd']
      + filenames = ['*.csd']
      + url = 'https://csound.com'
      + version_added = '2.1'
      + tokens = {'root': [('/[*](.|\\n)*?[*]/', Comment.Multiline), ('(?:;|//).*$', Comment.Single), ('[^/;<]+|/(?!/)', Text), ('<\\s*CsInstruments', Name.Tag, ('orchestra', 'tag')), ('<\\s*CsScore', Name.Tag, ('score', 'tag')), ('<\\s*[Hh][Tt][Mm][Ll]', Name.Tag, ('HTML', 'tag')), ('<\\s*[\\w:.-]+', Name.Tag, 'tag'), ('<\\s*/\\s*[\\w:.-]+\\s*>', Name.Tag)], 'orchestra': [('<\\s*/\\s*CsInstruments\\s*>', Name.Tag, '#pop'), ('(.|\\n)+?(?=<\\s*/\\s*CsInstruments\\s*>)', using(CsoundOrchestraLexer))], 'score': [('<\\s*/\\s*CsScore\\s*>', Name.Tag, '#pop'), ('(.|\\n)+?(?=<\\s*/\\s*CsScore\\s*>)', using(CsoundScoreLexer))], 'HTML': [('<\\s*/\\s*[Hh][Tt][Mm][Ll]\\s*>', Name.Tag, '#pop'), ('(.|\\n)+?(?=<\\s*/\\s*[Hh][Tt][Mm][Ll]\\s*>)', using(HtmlLexer))], 'tag': [('\\s+', Whitespace), ('[\\w.:-]+\\s*=', Name.Attribute, 'attr'), ('/?\\s*>', Name.Tag, '#pop')], 'attr': [('\\s+', Whitespace), ('".*?"', String, '#pop'), ("'.*?'", String, '#pop'), ('[^\\s>]+', String, '#pop')]}
  }

  class CssLexer {
      + name = 'CSS'
      + url = 'https://www.w3.org/TR/CSS/#css'
      + aliases = ['css']
      + filenames = ['*.css']
      + mimetypes = ['text/css']
      + version_added = ''
      + tokens = {'root': [include('basics')], 'basics': [('\\s+', Whitespace), ('/\\*(?:.|\\n)*?\\*/', Comment), ('\\{', Punctuation, 'content'), ('(\\:{1,2})([\\w-]+)', bygroups(Punctuation, Name.Decorator)), ('(\\.)([\\w-]+)', bygroups(Punctuation, Name.Class)), ('(\\#)([\\w-]+)', bygroups(Punctuation, Name.Namespace)), ('(@)([\\w-]+)', bygroups(Punctuation, Keyword), 'atrule'), ('[\\w-]+', Name.Tag), ('[~^*!%&$\\[\\]()<>|+=@:;,./?-]', Operator), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single)], 'atrule': [('\\{', Punctuation, 'atcontent'), (';', Punctuation, '#pop'), include('basics')], 'atcontent': [include('basics'), ('\\}', Punctuation, '#pop:2')], 'content': [('\\s+', Whitespace), ('\\}', Punctuation, '#pop'), (';', Punctuation), ('^@.*?$', Comment.Preproc), (words(_vendor_prefixes), Keyword.Pseudo), ('(' + '|'.join(_css_properties) + ')(\\s*)(\\:)', bygroups(Keyword, Whitespace, Punctuation), 'value-start'), ('([-]+[a-zA-Z_][\\w-]*)(\\s*)(\\:)', bygroups(Name.Variable, Whitespace, Punctuation), 'value-start'), ('([a-zA-Z_][\\w-]*)(\\s*)(\\:)', bygroups(Name, Whitespace, Punctuation), 'value-start'), ('/\\*(?:.|\\n)*?\\*/', Comment)], 'value-start': [('\\s+', Whitespace), (words(_vendor_prefixes), Name.Builtin.Pseudo), include('urls'), ('(' + '|'.join(_functional_notation_keyword_values) + ')(\\()', bygroups(Name.Builtin, Punctuation), 'function-start'), ('([a-zA-Z_][\\w-]+)(\\()', bygroups(Name.Function, Punctuation), 'function-start'), (words(_keyword_values, suffix='\\b'), Keyword.Constant), (words(_other_keyword_values, suffix='\\b'), Keyword.Constant), (words(_color_keywords, suffix='\\b'), Keyword.Constant), (words(_css_properties, suffix='\\b'), Keyword), ('\\!important', Comment.Preproc), ('/\\*(?:.|\\n)*?\\*/', Comment), include('numeric-values'), ('[~^*!%&<>|+=@:./?-]+', Operator), ('[\\[\\](),]+', Punctuation), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('[a-zA-Z_][\\w-]*', Name), (';', Punctuation, '#pop'), ('\\}', Punctuation, '#pop:2')], 'function-start': [('\\s+', Whitespace), ('[-]+([A-Za-z][\\w+]*[-]*)+', Name.Variable), include('urls'), (words(_vendor_prefixes), Keyword.Pseudo), (words(_keyword_values, suffix='\\b'), Keyword.Constant), (words(_other_keyword_values, suffix='\\b'), Keyword.Constant), (words(_color_keywords, suffix='\\b'), Keyword.Constant), ('(' + '|'.join(_functional_notation_keyword_values) + ')(\\()', bygroups(Name.Builtin, Punctuation), 'function-start'), ('([a-zA-Z_][\\w-]+)(\\()', bygroups(Name.Function, Punctuation), 'function-start'), ('/\\*(?:.|\\n)*?\\*/', Comment), include('numeric-values'), ('[*+/-]', Operator), (',', Punctuation), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('[a-zA-Z_-]\\w*', Name), ('\\)', Punctuation, '#pop')], 'urls': [('(url)(\\()(".*?")(\\))', bygroups(Name.Builtin, Punctuation, String.Double, Punctuation)), ("(url)(\\()('.*?')(\\))", bygroups(Name.Builtin, Punctuation, String.Single, Punctuation)), ('(url)(\\()(.*?)(\\))', bygroups(Name.Builtin, Punctuation, String.Other, Punctuation))], 'numeric-values': [('\\#[a-zA-Z0-9]{1,6}', Number.Hex), ('[+\\-]?[0-9]*[.][0-9]+', Number.Float, 'numeric-end'), ('[+\\-]?[0-9]+', Number.Integer, 'numeric-end')], 'numeric-end': [(words(_all_units, suffix='\\b'), Keyword.Type), ('%', Keyword.Type), default('#pop')]}
  }

  class SassLexer {
      + name = 'Sass'
      + url = 'https://sass-lang.com/'
      + aliases = ['sass']
      + filenames = ['*.sass']
      + mimetypes = ['text/x-sass']
      + version_added = '1.3'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [('[ \\t]*\\n', Whitespace), ('[ \\t]*', _indentation)], 'content': [('//[^\\n]*', _starts_block(Comment.Single, 'single-comment'), 'root'), ('/\\*[^\\n]*', _starts_block(Comment.Multiline, 'multi-comment'), 'root'), ('@import', Keyword, 'import'), ('@for', Keyword, 'for'), ('@(debug|warn|if|while)', Keyword, 'value'), ('(@mixin)( )([\\w-]+)', bygroups(Keyword, Whitespace, Name.Function), 'value'), ('(@include)( )([\\w-]+)', bygroups(Keyword, Whitespace, Name.Decorator), 'value'), ('@extend', Keyword, 'selector'), ('@[\\w-]+', Keyword, 'selector'), ('=[\\w-]+', Name.Function, 'value'), ('\\+[\\w-]+', Name.Decorator, 'value'), ('([!$][\\w-]\\w*)([ \\t]*(?:(?:\\|\\|)?=|:))', bygroups(Name.Variable, Operator), 'value'), (':', Name.Attribute, 'old-style-attr'), ('(?=.+?[=:]([^a-z]|$))', Name.Attribute, 'new-style-attr'), default('selector')], 'single-comment': [('.+', Comment.Single), ('\\n', Whitespace, 'root')], 'multi-comment': [('.+', Comment.Multiline), ('\\n', Whitespace, 'root')], 'import': [('[ \\t]+', Whitespace), ('\\S+', String), ('\\n', Whitespace, 'root')], 'old-style-attr': [('[^\\s:="\\[]+', Name.Attribute), ('#\\{', String.Interpol, 'interpolation'), ('([ \\t]*)(=)', bygroups(Whitespace, Operator), 'value'), default('value')], 'new-style-attr': [('[^\\s:="\\[]+', Name.Attribute), ('#\\{', String.Interpol, 'interpolation'), ('([ \\t]*)([=:])', bygroups(Whitespace, Operator), 'value')], 'inline-comment': [('(\\\\#|#(?=[^\\n{])|\\*(?=[^\\n/])|[^\\n#*])+', Comment.Multiline), ('#\\{', String.Interpol, 'interpolation'), ('\\*/', Comment, '#pop')]}
  }

  class ScssLexer {
      + name = 'SCSS'
      + url = 'https://sass-lang.com/'
      + aliases = ['scss']
      + filenames = ['*.scss']
      + mimetypes = ['text/x-scss']
      + version_added = ''
      + flags = re.IGNORECASE | re.DOTALL
      + tokens = {'root': [('\\s+', Whitespace), ('//.*?\\n', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline), ('@import', Keyword, 'value'), ('@for', Keyword, 'for'), ('@(debug|warn|if|while)', Keyword, 'value'), ('(@mixin)( [\\w-]+)', bygroups(Keyword, Name.Function), 'value'), ('(@include)( [\\w-]+)', bygroups(Keyword, Name.Decorator), 'value'), ('@extend', Keyword, 'selector'), ('(@media)(\\s+)', bygroups(Keyword, Whitespace), 'value'), ('@[\\w-]+', Keyword, 'selector'), ('(\\$[\\w-]*\\w)([ \\t]*:)', bygroups(Name.Variable, Operator), 'value'), default('selector')], 'attr': [('[^\\s:="\\[]+', Name.Attribute), ('#\\{', String.Interpol, 'interpolation'), ('[ \\t]*:', Operator, 'value'), default('#pop')], 'inline-comment': [('(\\\\#|#(?=[^{])|\\*(?=[^/])|[^#*])+', Comment.Multiline), ('#\\{', String.Interpol, 'interpolation'), ('\\*/', Comment, '#pop')]}
  }

  class LessCssLexer {
      + name = 'LessCss'
      + url = 'http://lesscss.org/'
      + aliases = ['less']
      + filenames = ['*.less']
      + mimetypes = ['text/x-less-css']
      + version_added = '2.1'
      + tokens = {'root': [('@\\w+', Name.Variable), inherit], 'content': [('\\{', Punctuation, '#push'), ('//.*\\n', Comment.Single), inherit]}
  }

  class CFamilyLexer {
      + tokens = {'whitespace': [('^#if\\s+0', Comment.Preproc, 'if0'), ('^#', Comment.Preproc, 'macro'), ('^(' + _ws1 + ')(#if\\s+0)', bygroups(using(this), Comment.Preproc), 'if0'), ('^(' + _ws1 + ')(#)', bygroups(using(this), Comment.Preproc), 'macro'), ('(^[ \\t]*)(?!(?:public|private|protected|default)\\b)(' + _ident + ')(\\s*)(:)(?!:)', bygroups(Whitespace, Name.Label, Whitespace, Punctuation)), ('\\n', Whitespace), ('[^\\S\\n]+', Whitespace), ('\\\\\\n', Text), (_comment_single, Comment.Single), (_comment_multiline, Comment.Multiline), ('/(\\\\\\n)?[*][\\w\\W]*', Comment.Multiline)], 'statements': [include('keywords'), include('types'), ('([LuU]|u8)?(")', bygroups(String.Affix, String), 'string'), ("([LuU]|u8)?(')(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])(')", bygroups(String.Affix, String.Char, String.Char, String.Char)), ('0[xX](' + _hexpart + '\\.' + _hexpart + '|\\.' + _hexpart + '|' + _hexpart + ')[pP][+-]?' + _hexpart + '[lL]?', Number.Float), ('(-)?(' + _decpart + '\\.' + _decpart + '|\\.' + _decpart + '|' + _decpart + ')[eE][+-]?' + _decpart + '[fFlL]?', Number.Float), ('(-)?((' + _decpart + '\\.(' + _decpart + ')?|\\.' + _decpart + ')[fFlL]?)|(' + _decpart + '[fFlL])', Number.Float), ('(-)?0[xX]' + _hexpart + _intsuffix, Number.Hex), ("(-)?0[bB][01](\\'?[01])*" + _intsuffix, Number.Bin), ("(-)?0(\\'?[0-7])+" + _intsuffix, Number.Oct), ('(-)?' + _decpart + _intsuffix, Number.Integer), ('[~!%^&*+=|?:<>/-]', Operator), ('[()\\[\\],.]', Punctuation), ('(true|false|NULL)\\b', Name.Builtin), (_ident, Name)], 'types': [(words(('int8', 'int16', 'int32', 'int64', 'wchar_t'), prefix='__', suffix='\\b'), Keyword.Reserved), (words(('bool', 'int', 'long', 'float', 'short', 'double', 'char', 'unsigned', 'signed', 'void', '_BitInt', '__int128'), suffix='\\b'), Keyword.Type)], 'keywords': [('(struct|union)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), ('case\\b', Keyword, 'case-value'), (words(('asm', 'auto', 'break', 'const', 'continue', 'default', 'do', 'else', 'enum', 'extern', 'for', 'goto', 'if', 'register', 'restricted', 'return', 'sizeof', 'struct', 'static', 'switch', 'typedef', 'volatile', 'while', 'union', 'thread_local', 'alignas', 'alignof', 'static_assert', '_Pragma'), suffix='\\b'), Keyword), (words(('inline', '_inline', '__inline', 'naked', 'restrict', 'thread'), suffix='\\b'), Keyword.Reserved), ('(__m(128i|128d|128|64))\\b', Keyword.Reserved), (words(('asm', 'based', 'except', 'stdcall', 'cdecl', 'fastcall', 'declspec', 'finally', 'try', 'leave', 'w64', 'unaligned', 'raise', 'noop', 'identifier', 'forceinline', 'assume'), prefix='__', suffix='\\b'), Keyword.Reserved)], 'root': [include('whitespace'), include('keywords'), ('(' + _namespaced_ident + '(?:[&*\\s])+)(' + _possible_comments + ')(' + _namespaced_ident + ')(' + _possible_comments + ')(\\([^;"\\\')]*?\\))(' + _possible_comments + ')([^;{/"\\\']*)(\\{)', bygroups(using(this), using(this, state='whitespace'), Name.Function, using(this, state='whitespace'), using(this), using(this, state='whitespace'), using(this), Punctuation), 'function'), ('(' + _namespaced_ident + '(?:[&*\\s])+)(' + _possible_comments + ')(' + _namespaced_ident + ')(' + _possible_comments + ')(\\([^;"\\\')]*?\\))(' + _possible_comments + ')([^;/"\\\']*)(;)', bygroups(using(this), using(this, state='whitespace'), Name.Function, using(this, state='whitespace'), using(this), using(this, state='whitespace'), using(this), Punctuation)), include('types'), default('statement')], 'statement': [include('whitespace'), include('statements'), ('\\}', Punctuation), ('[{;]', Punctuation, '#pop')], 'function': [include('whitespace'), include('statements'), (';', Punctuation), ('\\{', Punctuation, '#push'), ('\\}', Punctuation, '#pop')], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('\\\\\\n', String), ('\\\\', String)], 'macro': [('(' + _ws1 + ')(include)(' + _ws1 + ')("[^"]+")([^\\n]*)', bygroups(using(this), Comment.Preproc, using(this), Comment.PreprocFile, Comment.Single)), ('(' + _ws1 + ')(include)(' + _ws1 + ')(<[^>]+>)([^\\n]*)', bygroups(using(this), Comment.Preproc, using(this), Comment.PreprocFile, Comment.Single)), ('[^/\\n]+', Comment.Preproc), ('/[*](.|\\n)*?[*]/', Comment.Multiline), ('//.*?\\n', Comment.Single, '#pop'), ('/', Comment.Preproc), ('(?<=\\\\)\\n', Comment.Preproc), ('\\n', Comment.Preproc, '#pop')], 'if0': [('^\\s*#if.*?(?<!\\\\)\\n', Comment.Preproc, '#push'), ('^\\s*#el(?:se|if).*\\n', Comment.Preproc, '#pop'), ('^\\s*#endif.*?(?<!\\\\)\\n', Comment.Preproc, '#pop'), ('.*?\\n', Comment)], 'classname': [(_ident, Name.Class, '#pop'), ('\\s*(?=>)', Text, '#pop'), default('#pop')], 'case-value': [('(?<!:)(:)(?!:)', Punctuation, '#pop'), (_ident, Name.Constant), include('whitespace'), include('statements')]}
      + stdlib_types = {'size_t', 'ssize_t', 'off_t', 'wchar_t', 'ptrdiff_t', 'sig_atomic_t', 'fpos_t', 'clock_t', 'time_t', 'va_list', 'jmp_buf', 'FILE', 'DIR', 'div_t', 'ldiv_t', 'mbstate_t', 'wctrans_t', 'wint_t', 'wctype_t'}
      + c99_types = {'int8_t', 'int16_t', 'int32_t', 'int64_t', 'uint8_t', 'uint16_t', 'uint32_t', 'uint64_t', 'int_least8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t', 'uint_least8_t', 'uint_least16_t', 'uint_least32_t', 'uint_least64_t', 'int_fast8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t', 'uint_fast8_t', 'uint_fast16_t', 'uint_fast32_t', 'uint_fast64_t', 'intptr_t', 'uintptr_t', 'intmax_t', 'uintmax_t'}
      + linux_types = {'clockid_t', 'cpu_set_t', 'cpumask_t', 'dev_t', 'gid_t', 'id_t', 'ino_t', 'key_t', 'mode_t', 'nfds_t', 'pid_t', 'rlim_t', 'sig_t', 'sighandler_t', 'siginfo_t', 'sigset_t', 'sigval_t', 'socklen_t', 'timer_t', 'uid_t'}
      + c11_atomic_types = {'atomic_bool', 'atomic_char', 'atomic_schar', 'atomic_uchar', 'atomic_short', 'atomic_ushort', 'atomic_int', 'atomic_uint', 'atomic_long', 'atomic_ulong', 'atomic_llong', 'atomic_ullong', 'atomic_char16_t', 'atomic_char32_t', 'atomic_wchar_t', 'atomic_int_least8_t', 'atomic_uint_least8_t', 'atomic_int_least16_t', 'atomic_uint_least16_t', 'atomic_int_least32_t', 'atomic_uint_least32_t', 'atomic_int_least64_t', 'atomic_uint_least64_t', 'atomic_int_fast8_t', 'atomic_uint_fast8_t', 'atomic_int_fast16_t', 'atomic_uint_fast16_t', 'atomic_int_fast32_t', 'atomic_uint_fast32_t', 'atomic_int_fast64_t', 'atomic_uint_fast64_t', 'atomic_intptr_t', 'atomic_uintptr_t', 'atomic_size_t', 'atomic_ptrdiff_t', 'atomic_intmax_t', 'atomic_uintmax_t'}
  --
      - __init__()
      + get_tokens_unprocessed(text, stack = ('root',))
  }

  class CLexer {
      + name = 'C'
      + aliases = ['c']
      + filenames = ['*.c', '*.h', '*.idc', '*.x[bp]m']
      + mimetypes = ['text/x-chdr', 'text/x-csrc', 'image/x-xbitmap', 'image/x-xpixmap']
      + url = 'https://en.wikipedia.org/wiki/C_(programming_language)'
      + version_added = ''
      + priority = 0.1
      + tokens = {'keywords': [(words(('_Alignas', '_Alignof', '_Noreturn', '_Generic', '_Thread_local', '_Static_assert', '_Imaginary', 'noreturn', 'imaginary', 'complex'), suffix='\\b'), Keyword), inherit], 'types': [(words(('_Bool', '_Complex', '_Atomic'), suffix='\\b'), Keyword.Type), inherit]}
  --
      + analyse_text(text)
  }

  class CppLexer {
      + name = 'C++'
      + url = 'https://isocpp.org/'
      + aliases = ['cpp', 'c++']
      + filenames = ['*.cpp', '*.hpp', '*.c++', '*.h++', '*.cc', '*.hh', '*.cxx', '*.hxx', '*.C', '*.H', '*.cp', '*.CPP', '*.tpp']
      + mimetypes = ['text/x-c++hdr', 'text/x-c++src']
      + version_added = ''
      + priority = 0.1
      + tokens = {'statements': [('((?:[LuU]|u8)?R)(")([^\\\\()\\s]{,16})(\\()((?:.|\\n)*?)(\\)\\3)(")', bygroups(String.Affix, String, String.Delimiter, String.Delimiter, String, String.Delimiter, String)), inherit], 'root': [inherit, (words(('virtual_inheritance', 'uuidof', 'super', 'single_inheritance', 'multiple_inheritance', 'interface', 'event'), prefix='__', suffix='\\b'), Keyword.Reserved), ('__(offload|blockingoffload|outer)\\b', Keyword.Pseudo)], 'enumname': [include('whitespace'), (words(('class', 'struct'), suffix='\\b'), Keyword), (CFamilyLexer._ident, Name.Class, '#pop'), ('\\s*(?=>)', Text, '#pop'), default('#pop')], 'keywords': [('(class|concept|typename)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), (words(('catch', 'const_cast', 'delete', 'dynamic_cast', 'explicit', 'export', 'friend', 'mutable', 'new', 'operator', 'private', 'protected', 'public', 'reinterpret_cast', 'class', '__restrict', 'static_cast', 'template', 'this', 'throw', 'throws', 'try', 'typeid', 'using', 'virtual', 'constexpr', 'nullptr', 'concept', 'decltype', 'noexcept', 'override', 'final', 'constinit', 'consteval', 'co_await', 'co_return', 'co_yield', 'requires', 'import', 'module', 'typename', 'and', 'and_eq', 'bitand', 'bitor', 'compl', 'not', 'not_eq', 'or', 'or_eq', 'xor', 'xor_eq'), suffix='\\b'), Keyword), ('namespace\\b', Keyword, 'namespace'), ('(enum)(\\s+)', bygroups(Keyword, Whitespace), 'enumname'), inherit], 'types': [('char(16_t|32_t|8_t)\\b', Keyword.Type), inherit], 'namespace': [('[;{]', Punctuation, ('#pop', 'root')), ('inline\\b', Keyword.Reserved), (CFamilyLexer._ident, Name.Namespace), include('statement')]}
  --
      + analyse_text(text)
  }

  class PikeLexer {
      + name = 'Pike'
      + aliases = ['pike']
      + filenames = ['*.pike', '*.pmod']
      + mimetypes = ['text/x-pike']
      + version_added = '2.0'
      + tokens = {'statements': [(words(('catch', 'new', 'private', 'protected', 'public', 'gauge', 'throw', 'throws', 'class', 'interface', 'implement', 'abstract', 'extends', 'from', 'this', 'super', 'constant', 'final', 'static', 'import', 'use', 'extern', 'inline', 'proto', 'break', 'continue', 'if', 'else', 'for', 'while', 'do', 'switch', 'case', 'as', 'in', 'version', 'return', 'true', 'false', 'null', '__VERSION__', '__MAJOR__', '__MINOR__', '__BUILD__', '__REAL_VERSION__', '__REAL_MAJOR__', '__REAL_MINOR__', '__REAL_BUILD__', '__DATE__', '__TIME__', '__FILE__', '__DIR__', '__LINE__', '__AUTO_BIGNUM__', '__NT__', '__PIKE__', '__amigaos__', '_Pragma', 'static_assert', 'defined', 'sscanf'), suffix='\\b'), Keyword), ('(bool|int|long|float|short|double|char|string|object|void|mapping|array|multiset|program|function|lambda|mixed|[a-z_][a-z0-9_]*_t)\\b', Keyword.Type), ('(class)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), ('[~!%^&*+=|?:<>/@-]', Operator), inherit], 'classname': [('[a-zA-Z_]\\w*', Name.Class, '#pop'), ('\\s*(?=>)', Whitespace, '#pop')]}
  }

  class NesCLexer {
      + name = 'nesC'
      + aliases = ['nesc']
      + filenames = ['*.nc']
      + mimetypes = ['text/x-nescsrc']
      + version_added = '2.0'
      + tokens = {'statements': [(words(('abstract', 'as', 'async', 'atomic', 'call', 'command', 'component', 'components', 'configuration', 'event', 'extends', 'generic', 'implementation', 'includes', 'interface', 'module', 'new', 'norace', 'post', 'provides', 'signal', 'task', 'uses'), suffix='\\b'), Keyword), (words(('nx_struct', 'nx_union', 'nx_int8_t', 'nx_int16_t', 'nx_int32_t', 'nx_int64_t', 'nx_uint8_t', 'nx_uint16_t', 'nx_uint32_t', 'nx_uint64_t'), suffix='\\b'), Keyword.Type), inherit]}
  }

  class ClayLexer {
      + name = 'Clay'
      + filenames = ['*.clay']
      + aliases = ['clay']
      + mimetypes = ['text/x-clay']
      + url = 'http://claylabs.com/clay'
      + version_added = '2.0'
      + tokens = {'root': [('\\s+', Whitespace), ('//.*?$', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ('\\b(public|private|import|as|record|variant|instance|define|overload|default|external|alias|rvalue|ref|forward|inline|noinline|forceinline|enum|var|and|or|not|if|else|goto|return|while|switch|case|break|continue|for|in|true|false|try|catch|throw|finally|onerror|staticassert|eval|when|newtype|__FILE__|__LINE__|__COLUMN__|__ARG__)\\b', Keyword), ('[~!%^&*+=|:<>/-]', Operator), ('[#(){}\\[\\],;.]', Punctuation), ('0x[0-9a-fA-F]+[LlUu]*', Number.Hex), ('\\d+[LlUu]*', Number.Integer), ('\\b(true|false)\\b', Name.Builtin), ('(?i)[a-z_?][\\w?]*', Name), ('"""', String, 'tdqs'), ('"', String, 'dqs')], 'strings': [('(?i)\\\\(x[0-9a-f]{2}|.)', String.Escape), ('[^\\\\"]+', String)], 'nl': [('\\n', String)], 'dqs': [('"', String, '#pop'), include('strings')], 'tdqs': [('"""', String, '#pop'), include('strings'), include('nl')]}
  }

  class ECLexer {
      + name = 'eC'
      + aliases = ['ec']
      + filenames = ['*.ec', '*.eh']
      + mimetypes = ['text/x-echdr', 'text/x-ecsrc']
      + url = 'https://ec-lang.org'
      + version_added = '1.5'
      + tokens = {'statements': [(words(('virtual', 'class', 'private', 'public', 'property', 'import', 'delete', 'new', 'new0', 'renew', 'renew0', 'define', 'get', 'set', 'remote', 'dllexport', 'dllimport', 'stdcall', 'subclass', '__on_register_module', 'namespace', 'using', 'typed_object', 'any_object', 'incref', 'register', 'watch', 'stopwatching', 'firewatchers', 'watchable', 'class_designer', 'class_fixed', 'class_no_expansion', 'isset', 'class_default_property', 'property_category', 'class_data', 'class_property', 'thisclass', 'dbtable', 'dbindex', 'database_open', 'dbfield'), suffix='\\b'), Keyword), (words(('uint', 'uint16', 'uint32', 'uint64', 'bool', 'byte', 'unichar', 'int64'), suffix='\\b'), Keyword.Type), ('(class)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), ('(null|value|this)\\b', Name.Builtin), inherit]}
  }

  class ValaLexer {
      + name = 'Vala'
      + aliases = ['vala', 'vapi']
      + filenames = ['*.vala', '*.vapi']
      + mimetypes = ['text/x-vala']
      + url = 'https://vala.dev'
      + version_added = '1.1'
      + tokens = {'whitespace': [('^\\s*#if\\s+0', Comment.Preproc, 'if0'), ('\\n', Whitespace), ('\\s+', Whitespace), ('\\\\\\n', Text), ('//(\\n|(.|\\n)*?[^\\\\]\\n)', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline)], 'statements': [('[L@]?"', String, 'string'), ("L?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'", String.Char), ('(?s)""".*?"""', String), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[lL]?', Number.Float), ('(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float), ('0x[0-9a-fA-F]+[Ll]?', Number.Hex), ('0[0-7]+[Ll]?', Number.Oct), ('\\d+[Ll]?', Number.Integer), ('[~!%^&*+=|?:<>/-]', Operator), ('(\\[)(Compact|Immutable|(?:Boolean|Simple)Type)(\\])', bygroups(Punctuation, Name.Decorator, Punctuation)), ('(\\[)(CCode|(?:Integer|Floating)Type)', bygroups(Punctuation, Name.Decorator)), ('[()\\[\\],.]', Punctuation), (words(('as', 'base', 'break', 'case', 'catch', 'construct', 'continue', 'default', 'delete', 'do', 'else', 'enum', 'finally', 'for', 'foreach', 'get', 'if', 'in', 'is', 'lock', 'new', 'out', 'params', 'return', 'set', 'sizeof', 'switch', 'this', 'throw', 'try', 'typeof', 'while', 'yield'), suffix='\\b'), Keyword), (words(('abstract', 'const', 'delegate', 'dynamic', 'ensures', 'extern', 'inline', 'internal', 'override', 'owned', 'private', 'protected', 'public', 'ref', 'requires', 'signal', 'static', 'throws', 'unowned', 'var', 'virtual', 'volatile', 'weak', 'yields'), suffix='\\b'), Keyword.Declaration), ('(namespace|using)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'namespace'), ('(class|errordomain|interface|struct)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'class'), ('(\\.)([a-zA-Z_]\\w*)', bygroups(Operator, Name.Attribute)), (words(('void', 'bool', 'char', 'double', 'float', 'int', 'int8', 'int16', 'int32', 'int64', 'long', 'short', 'size_t', 'ssize_t', 'string', 'time_t', 'uchar', 'uint', 'uint8', 'uint16', 'uint32', 'uint64', 'ulong', 'unichar', 'ushort'), suffix='\\b'), Keyword.Type), ('(true|false|null)\\b', Name.Builtin), ('[a-zA-Z_]\\w*', Name)], 'root': [include('whitespace'), default('statement')], 'statement': [include('whitespace'), include('statements'), ('[{}]', Punctuation), (';', Punctuation, '#pop')], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('\\\\\\n', String), ('\\\\', String)], 'if0': [('^\\s*#if.*?(?<!\\\\)\\n', Comment.Preproc, '#push'), ('^\\s*#el(?:se|if).*\\n', Comment.Preproc, '#pop'), ('^\\s*#endif.*?(?<!\\\\)\\n', Comment.Preproc, '#pop'), ('.*?\\n', Comment)], 'class': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'namespace': [('[a-zA-Z_][\\w.]*', Name.Namespace, '#pop')]}
  }

  class CudaLexer {
      + name = 'CUDA'
      + filenames = ['*.cu', '*.cuh']
      + aliases = ['cuda', 'cu']
      + mimetypes = ['text/x-cuda']
      + url = 'https://developer.nvidia.com/category/zone/cuda-zone'
      + version_added = '1.6'
      + function_qualifiers = {'__device__', '__global__', '__host__', '__noinline__', '__forceinline__'}
      + variable_qualifiers = {'__device__', '__constant__', '__shared__', '__restrict__'}
      + vector_types = {'char1', 'uchar1', 'char2', 'uchar2', 'char3', 'uchar3', 'char4', 'uchar4', 'short1', 'ushort1', 'short2', 'ushort2', 'short3', 'ushort3', 'short4', 'ushort4', 'int1', 'uint1', 'int2', 'uint2', 'int3', 'uint3', 'int4', 'uint4', 'long1', 'ulong1', 'long2', 'ulong2', 'long3', 'ulong3', 'long4', 'ulong4', 'longlong1', 'ulonglong1', 'longlong2', 'ulonglong2', 'float1', 'float2', 'float3', 'float4', 'double1', 'double2', 'dim3'}
      + variables = {'gridDim', 'blockIdx', 'blockDim', 'threadIdx', 'warpSize'}
      + functions = {'__threadfence_block', '__threadfence', '__threadfence_system', '__syncthreads', '__syncthreads_count', '__syncthreads_and', '__syncthreads_or'}
      + execution_confs = {'<<<', '>>>'}
  --
      + get_tokens_unprocessed(text, stack = ('root',))
  }

  class SwigLexer {
      + name = 'SWIG'
      + aliases = ['swig']
      + filenames = ['*.swg', '*.i']
      + mimetypes = ['text/swig']
      + version_added = '2.0'
      + priority = 0.04
      + tokens = {'root': [('\\$\\**\\&?\\w+', Name), inherit], 'statements': [('(%[a-z_][a-z0-9_]*)', Name.Function), ('\\$\\**\\&?\\w+', Name), ('##*[a-zA-Z_]\\w*', Comment.Preproc), inherit]}
      + swig_directives = {'%apply', '%define', '%director', '%enddef', '%exception', '%extend', '%feature', '%fragment', '%ignore', '%immutable', '%import', '%include', '%inline', '%insert', '%module', '%newobject', '%nspace', '%pragma', '%rename', '%shared_ptr', '%template', '%typecheck', '%typemap', '%arg', '%attribute', '%bang', '%begin', '%callback', '%catches', '%clear', '%constant', '%copyctor', '%csconst', '%csconstvalue', '%csenum', '%csmethodmodifiers', '%csnothrowexception', '%default', '%defaultctor', '%defaultdtor', '%defined', '%delete', '%delobject', '%descriptor', '%exceptionclass', '%exceptionvar', '%extend_smart_pointer', '%fragments', '%header', '%ifcplusplus', '%ignorewarn', '%implicit', '%implicitconv', '%init', '%javaconst', '%javaconstvalue', '%javaenum', '%javaexception', '%javamethodmodifiers', '%kwargs', '%luacode', '%mutable', '%naturalvar', '%nestedworkaround', '%perlcode', '%pythonabc', '%pythonappend', '%pythoncallback', '%pythoncode', '%pythondynamic', '%pythonmaybecall', '%pythonnondynamic', '%pythonprepend', '%refobject', '%shadow', '%sizeof', '%trackobjects', '%types', '%unrefobject', '%varargs', '%warn', '%warnfilter'}
  --
      + analyse_text(text)
  }

  class MqlLexer {
      + name = 'MQL'
      + aliases = ['mql', 'mq4', 'mq5', 'mql4', 'mql5']
      + filenames = ['*.mq4', '*.mq5', '*.mqh']
      + mimetypes = ['text/x-mql']
      + version_added = '2.0'
      + tokens = {'statements': [(words(_mql_builtins.keywords, suffix='\\b'), Keyword), (words(_mql_builtins.c_types, suffix='\\b'), Keyword.Type), (words(_mql_builtins.types, suffix='\\b'), Name.Function), (words(_mql_builtins.constants, suffix='\\b'), Name.Constant), (words(_mql_builtins.colors, prefix='(clr)?', suffix='\\b'), Name.Constant), inherit]}
  }

  class ArduinoLexer {
      + name = 'Arduino'
      + aliases = ['arduino']
      + filenames = ['*.ino']
      + mimetypes = ['text/x-arduino']
      + version_added = '2.1'
      + structure = {'setup', 'loop'}
      + operators = {'not', 'or', 'and', 'xor'}
      + variables = {'DIGITAL_MESSAGE', 'FIRMATA_STRING', 'ANALOG_MESSAGE', 'REPORT_DIGITAL', 'REPORT_ANALOG', 'INPUT_PULLUP', 'SET_PIN_MODE', 'INTERNAL2V56', 'SYSTEM_RESET', 'LED_BUILTIN', 'INTERNAL1V1', 'SYSEX_START', 'INTERNAL', 'EXTERNAL', 'HIGH', 'LOW', 'INPUT', 'OUTPUT', 'INPUT_PULLUP', 'LED_BUILTIN', 'true', 'false', 'void', 'boolean', 'char', 'unsigned char', 'byte', 'int', 'unsigned int', 'word', 'long', 'unsigned long', 'short', 'float', 'double', 'string', 'String', 'array', 'static', 'volatile', 'const', 'boolean', 'byte', 'word', 'string', 'String', 'array', 'int', 'float', 'private', 'char', 'virtual', 'operator', 'sizeof', 'uint8_t', 'uint16_t', 'uint32_t', 'uint64_t', 'int8_t', 'int16_t', 'int32_t', 'int64_t', 'dynamic_cast', 'typedef', 'const_cast', 'const', 'struct', 'static_cast', 'union', 'unsigned', 'long', 'volatile', 'static', 'protected', 'bool', 'public', 'friend', 'auto', 'void', 'enum', 'extern', 'class', 'short', 'reinterpret_cast', 'double', 'register', 'explicit', 'signed', 'inline', 'delete', '_Bool', 'complex', '_Complex', '_Imaginary', 'atomic_bool', 'atomic_char', 'atomic_schar', 'atomic_uchar', 'atomic_short', 'atomic_ushort', 'atomic_int', 'atomic_uint', 'atomic_long', 'atomic_ulong', 'atomic_llong', 'atomic_ullong', 'PROGMEM'}
      + functions = {'KeyboardController', 'MouseController', 'SoftwareSerial', 'EthernetServer', 'EthernetClient', 'LiquidCrystal', 'RobotControl', 'GSMVoiceCall', 'EthernetUDP', 'EsploraTFT', 'HttpClient', 'RobotMotor', 'WiFiClient', 'GSMScanner', 'FileSystem', 'Scheduler', 'GSMServer', 'YunClient', 'YunServer', 'IPAddress', 'GSMClient', 'GSMModem', 'Keyboard', 'Ethernet', 'Console', 'GSMBand', 'Esplora', 'Stepper', 'Process', 'WiFiUDP', 'GSM_SMS', 'Mailbox', 'USBHost', 'Firmata', 'PImage', 'Client', 'Server', 'GSMPIN', 'FileIO', 'Bridge', 'Serial', 'EEPROM', 'Stream', 'Mouse', 'Audio', 'Servo', 'File', 'Task', 'GPRS', 'WiFi', 'Wire', 'TFT', 'GSM', 'SPI', 'SD', 'runShellCommandAsynchronously', 'analogWriteResolution', 'retrieveCallingNumber', 'printFirmwareVersion', 'analogReadResolution', 'sendDigitalPortPair', 'noListenOnLocalhost', 'readJoystickButton', 'setFirmwareVersion', 'readJoystickSwitch', 'scrollDisplayRight', 'getVoiceCallStatus', 'scrollDisplayLeft', 'writeMicroseconds', 'delayMicroseconds', 'beginTransmission', 'getSignalStrength', 'runAsynchronously', 'getAsynchronously', 'listenOnLocalhost', 'getCurrentCarrier', 'readAccelerometer', 'messageAvailable', 'sendDigitalPorts', 'lineFollowConfig', 'countryNameWrite', 'runShellCommand', 'readStringUntil', 'rewindDirectory', 'readTemperature', 'setClockDivider', 'readLightSensor', 'endTransmission', 'analogReference', 'detachInterrupt', 'countryNameRead', 'attachInterrupt', 'encryptionType', 'readBytesUntil', 'robotNameWrite', 'readMicrophone', 'robotNameRead', 'cityNameWrite', 'userNameWrite', 'readJoystickY', 'readJoystickX', 'mouseReleased', 'openNextFile', 'scanNetworks', 'noInterrupts', 'digitalWrite', 'beginSpeaker', 'mousePressed', 'isActionDone', 'mouseDragged', 'displayLogos', 'noAutoscroll', 'addParameter', 'remoteNumber', 'getModifiers', 'keyboardRead', 'userNameRead', 'waitContinue', 'processInput', 'parseCommand', 'printVersion', 'readNetworks', 'writeMessage', 'blinkVersion', 'cityNameRead', 'readMessage', 'setDataMode', 'parsePacket', 'isListening', 'setBitOrder', 'beginPacket', 'isDirectory', 'motorsWrite', 'drawCompass', 'digitalRead', 'clearScreen', 'serialEvent', 'rightToLeft', 'setTextSize', 'leftToRight', 'requestFrom', 'keyReleased', 'compassRead', 'analogWrite', 'interrupts', 'WiFiServer', 'disconnect', 'playMelody', 'parseFloat', 'autoscroll', 'getPINUsed', 'setPINUsed', 'setTimeout', 'sendAnalog', 'readSlider', 'analogRead', 'beginWrite', 'createChar', 'motorsStop', 'keyPressed', 'tempoWrite', 'readButton', 'subnetMask', 'debugPrint', 'macAddress', 'writeGreen', 'randomSeed', 'attachGPRS', 'readString', 'sendString', 'remotePort', 'releaseAll', 'mouseMoved', 'background', 'getXChange', 'getYChange', 'answerCall', 'getResult', 'voiceCall', 'endPacket', 'constrain', 'getSocket', 'writeJSON', 'getButton', 'available', 'connected', 'findUntil', 'readBytes', 'exitValue', 'readGreen', 'writeBlue', 'startLoop', 'IPAddress', 'isPressed', 'sendSysex', 'pauseMode', 'gatewayIP', 'setCursor', 'getOemKey', 'tuneWrite', 'noDisplay', 'loadImage', 'switchPIN', 'onRequest', 'onReceive', 'changePIN', 'playFile', 'noBuffer', 'parseInt', 'overflow', 'checkPIN', 'knobRead', 'beginTFT', 'bitClear', 'updateIR', 'bitWrite', 'position', 'writeRGB', 'highByte', 'writeRed', 'setSpeed', 'readBlue', 'noStroke', 'remoteIP', 'transfer', 'shutdown', 'hangCall', 'beginSMS', 'endWrite', 'attached', 'maintain', 'noCursor', 'checkReg', 'checkPUK', 'shiftOut', 'isValid', 'shiftIn', 'pulseIn', 'connect', 'println', 'localIP', 'pinMode', 'getIMEI', 'display', 'noBlink', 'process', 'getBand', 'running', 'beginSD', 'drawBMP', 'lowByte', 'setBand', 'release', 'bitRead', 'prepare', 'pointTo', 'readRed', 'setMode', 'noFill', 'remove', 'listen', 'stroke', 'detach', 'attach', 'noTone', 'exists', 'buffer', 'height', 'bitSet', 'circle', 'config', 'cursor', 'random', 'IRread', 'setDNS', 'endSMS', 'getKey', 'micros', 'millis', 'begin', 'print', 'write', 'ready', 'flush', 'width', 'isPIN', 'blink', 'clear', 'press', 'mkdir', 'rmdir', 'close', 'point', 'yield', 'image', 'BSSID', 'click', 'delay', 'read', 'text', 'move', 'peek', 'beep', 'rect', 'line', 'open', 'seek', 'fill', 'size', 'turn', 'stop', 'home', 'find', 'step', 'tone', 'sqrt', 'RSSI', 'SSID', 'end', 'bit', 'tan', 'cos', 'sin', 'pow', 'map', 'abs', 'max', 'min', 'get', 'run', 'put', 'isAlphaNumeric', 'isAlpha', 'isAscii', 'isWhitespace', 'isControl', 'isDigit', 'isGraph', 'isLowerCase', 'isPrintable', 'isPunct', 'isSpace', 'isUpperCase', 'isHexadecimalDigit'}
      + suppress_highlight = {'namespace', 'template', 'mutable', 'using', 'asm', 'typeid', 'typename', 'this', 'alignof', 'constexpr', 'decltype', 'noexcept', 'static_assert', 'thread_local', 'restrict'}
  --
      + get_tokens_unprocessed(text, stack = ('root',))
  }

  class CharmciLexer {
      + name = 'Charmci'
      + aliases = ['charmci']
      + filenames = ['*.ci']
      + version_added = '2.4'
      + mimetypes = []
      + tokens = {'keywords': [('(module)(\\s+)', bygroups(Keyword, Text), 'classname'), (words(('mainmodule', 'mainchare', 'chare', 'array', 'group', 'nodegroup', 'message', 'conditional')), Keyword), (words(('entry', 'aggregate', 'threaded', 'sync', 'exclusive', 'nokeep', 'notrace', 'immediate', 'expedited', 'inline', 'local', 'python', 'accel', 'readwrite', 'writeonly', 'accelblock', 'memcritical', 'packed', 'varsize', 'initproc', 'initnode', 'initcall', 'stacksize', 'createhere', 'createhome', 'reductiontarget', 'iget', 'nocopy', 'mutable', 'migratable', 'readonly')), Keyword), inherit]}
  }

  class OmgIdlLexer {
      + name = 'OMG Interface Definition Language'
      + url = 'https://www.omg.org/spec/IDL/About-IDL/'
      + aliases = ['omg-idl']
      + filenames = ['*.idl', '*.pidl']
      + mimetypes = []
      + version_added = '2.9'
      + scoped_name = '((::)?\\w+)+'
      + tokens = {'values': [(words(('true', 'false'), prefix='(?i)', suffix='\\b'), Number), ('([Ll]?)(")', bygroups(String.Affix, String.Double), 'string'), ("([Ll]?)(\\')(\\\\[^\\']+)(\\')", bygroups(String.Affix, String.Char, String.Escape, String.Char)), ("([Ll]?)(\\')(\\\\\\')(\\')", bygroups(String.Affix, String.Char, String.Escape, String.Char)), ("([Ll]?)(\\'.\\')", bygroups(String.Affix, String.Char)), ('[+-]?\\d+(\\.\\d*)?[Ee][+-]?\\d+', Number.Float), ('[+-]?(\\d+\\.\\d*)|(\\d*\\.\\d+)([Ee][+-]?\\d+)?', Number.Float), ('(?i)[+-]?0x[0-9a-f]+', Number.Hex), ('[+-]?[1-9]\\d*', Number.Integer), ('[+-]?0[0-7]*', Number.Oct), ('[\\+\\-\\*\\/%^&\\|~]', Operator), (words(('<<', '>>')), Operator), (scoped_name, Name), ('[{};:,<>\\[\\]]', Punctuation)], 'annotation_params': [include('whitespace'), ('\\(', Punctuation, '#push'), include('values'), ('=', Punctuation), ('\\)', Punctuation, '#pop')], 'annotation_params_maybe': [('\\(', Punctuation, 'annotation_params'), include('whitespace'), default('#pop')], 'annotation_appl': [('@' + scoped_name, Name.Decorator, 'annotation_params_maybe')], 'enum': [include('whitespace'), ('[{,]', Punctuation), ('\\w+', Name.Constant), include('annotation_appl'), ('\\}', Punctuation, '#pop')], 'root': [include('whitespace'), (words(('typedef', 'const', 'in', 'out', 'inout', 'local'), prefix='(?i)', suffix='\\b'), Keyword.Declaration), (words(('void', 'any', 'native', 'bitfield', 'unsigned', 'boolean', 'char', 'wchar', 'octet', 'short', 'long', 'int8', 'uint8', 'int16', 'int32', 'int64', 'uint16', 'uint32', 'uint64', 'float', 'double', 'fixed', 'sequence', 'string', 'wstring', 'map'), prefix='(?i)', suffix='\\b'), Keyword.Type), (words(('@annotation', 'struct', 'union', 'bitset', 'interface', 'exception', 'valuetype', 'eventtype', 'component'), prefix='(?i)', suffix='(\\s+)(\\w+)'), bygroups(Keyword, Whitespace, Name.Class)), (words(('abstract', 'alias', 'attribute', 'case', 'connector', 'consumes', 'context', 'custom', 'default', 'emits', 'factory', 'finder', 'getraises', 'home', 'import', 'manages', 'mirrorport', 'multiple', 'Object', 'oneway', 'primarykey', 'private', 'port', 'porttype', 'provides', 'public', 'publishes', 'raises', 'readonly', 'setraises', 'supports', 'switch', 'truncatable', 'typeid', 'typename', 'typeprefix', 'uses', 'ValueBase'), prefix='(?i)', suffix='\\b'), Keyword), ('(?i)(enum|bitmask)(\\s+)(\\w+)', bygroups(Keyword, Whitespace, Name.Class), 'enum'), ('(?i)(module)(\\s+)(\\w+)', bygroups(Keyword.Namespace, Whitespace, Name.Namespace)), ('(\\w+)(\\s*)(=)', bygroups(Name.Constant, Whitespace, Operator)), ('[\\(\\)]', Punctuation), include('values'), include('annotation_appl')]}
  }

  class PromelaLexer {
      + name = 'Promela'
      + aliases = ['promela']
      + filenames = ['*.pml', '*.prom', '*.prm', '*.promela', '*.pr', '*.pm']
      + mimetypes = ['text/x-promela']
      + url = 'https://spinroot.com/spin/whatispin.html'
      + version_added = '2.18'
      + tokens = {'statements': [('(\\[\\]|<>|/\\\\|\\\\/)|(U|W|V)\\b', Operator), ('@', Punctuation), ('(\\.)([a-zA-Z_]\\w*)', bygroups(Operator, Name.Attribute)), inherit], 'types': [(words(('bit', 'bool', 'byte', 'pid', 'short', 'int', 'unsigned'), suffix='\\b'), Keyword.Type)], 'keywords': [(words(('atomic', 'break', 'd_step', 'do', 'od', 'for', 'in', 'goto', 'if', 'fi', 'unless'), suffix='\\b'), Keyword), (words(('assert', 'get_priority', 'printf', 'printm', 'set_priority'), suffix='\\b'), Name.Function), (words(('c_code', 'c_decl', 'c_expr', 'c_state', 'c_track'), suffix='\\b'), Keyword), (words(('_', '_last', '_nr_pr', '_pid', '_priority', 'else', 'np_', 'STDIN'), suffix='\\b'), Name.Builtin), (words(('empty', 'enabled', 'eval', 'full', 'len', 'nempty', 'nfull', 'pc_value'), suffix='\\b'), Name.Function), ('run\\b', Operator.Word), (words(('active', 'chan', 'D_proctype', 'hidden', 'init', 'local', 'mtype', 'never', 'notrace', 'proctype', 'show', 'trace', 'typedef', 'xr', 'xs'), suffix='\\b'), Keyword.Declaration), (words(('priority', 'provided'), suffix='\\b'), Keyword), (words(('inline', 'ltl', 'select'), suffix='\\b'), Keyword.Declaration), ('skip\\b', Keyword)]}
  }

  class DLexer {
      + name = 'D'
      + url = 'https://dlang.org/'
      + filenames = ['*.d', '*.di']
      + aliases = ['d']
      + mimetypes = ['text/x-dsrc']
      + version_added = '1.2'
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ('/\\+', Comment.Multiline, 'nested_comment'), (words(('abstract', 'alias', 'align', 'asm', 'assert', 'auto', 'body', 'break', 'case', 'cast', 'catch', 'class', 'const', 'continue', 'debug', 'default', 'delegate', 'delete', 'deprecated', 'do', 'else', 'enum', 'export', 'extern', 'finally', 'final', 'foreach_reverse', 'foreach', 'for', 'function', 'goto', 'if', 'immutable', 'import', 'interface', 'invariant', 'inout', 'in', 'is', 'lazy', 'mixin', 'module', 'new', 'nothrow', 'out', 'override', 'package', 'pragma', 'private', 'protected', 'public', 'pure', 'ref', 'return', 'scope', 'shared', 'static', 'struct', 'super', 'switch', 'synchronized', 'template', 'this', 'throw', 'try', 'typeid', 'typeof', 'union', 'unittest', 'version', 'volatile', 'while', 'with', '__gshared', '__traits', '__vector', '__parameters'), suffix='\\b'), Keyword), (words(('typedef',), suffix='\\b'), Keyword.Removed), (words(('bool', 'byte', 'cdouble', 'cent', 'cfloat', 'char', 'creal', 'dchar', 'double', 'float', 'idouble', 'ifloat', 'int', 'ireal', 'long', 'real', 'short', 'ubyte', 'ucent', 'uint', 'ulong', 'ushort', 'void', 'wchar'), suffix='\\b'), Keyword.Type), ('(false|true|null)\\b', Keyword.Constant), (words(('__FILE__', '__FILE_FULL_PATH__', '__MODULE__', '__LINE__', '__FUNCTION__', '__PRETTY_FUNCTION__', '__DATE__', '__EOF__', '__TIME__', '__TIMESTAMP__', '__VENDOR__', '__VERSION__'), suffix='\\b'), Keyword.Pseudo), ('macro\\b', Keyword.Reserved), ('(string|wstring|dstring|size_t|ptrdiff_t)\\b', Name.Builtin), ('0[xX]([0-9a-fA-F_]*\\.[0-9a-fA-F_]+|[0-9a-fA-F_]+)[pP][+\\-]?[0-9_]+[fFL]?[i]?', Number.Float), ('[0-9_]+(\\.[0-9_]+[eE][+\\-]?[0-9_]+|\\.[0-9_]*|[eE][+\\-]?[0-9_]+)[fFL]?[i]?', Number.Float), ('\\.(0|[1-9][0-9_]*)([eE][+\\-]?[0-9_]+)?[fFL]?[i]?', Number.Float), ('0[Bb][01_]+', Number.Bin), ('0[0-7_]+', Number.Oct), ('0[xX][0-9a-fA-F_]+', Number.Hex), ('(0|[1-9][0-9_]*)([LUu]|Lu|LU|uL|UL)?', Number.Integer), ('\'(\\\\[\'"?\\\\abfnrtv]|\\\\x[0-9a-fA-F]{2}|\\\\[0-7]{1,3}|\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}|\\\\&\\w+;|.)\'', String.Char), ('r"[^"]*"[cwd]?', String), ('`[^`]*`[cwd]?', String), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"[cwd]?', String), ('\\\\([\'\\"?\\\\abfnrtv]|x[0-9a-fA-F]{2}|[0-7]{1,3}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|&\\w+;)', String), ('x"[0-9a-fA-F_\\s]*"[cwd]?', String), ('q"\\[', String, 'delimited_bracket'), ('q"\\(', String, 'delimited_parenthesis'), ('q"<', String, 'delimited_angle'), ('q"\\{', String, 'delimited_curly'), ('q"([a-zA-Z_]\\w*)\\n.*?\\n\\1"', String), ('q"(.).*?\\1"', String), ('q\\{', String, 'token_string'), ('@([a-zA-Z_]\\w*)?', Name.Decorator), ('(~=|\\^=|%=|\\*=|==|!>=|!<=|!<>=|!<>|!<|!>|!=|>>>=|>>>|>>=|>>|>=|<>=|<>|<<=|<<|<=|\\+\\+|\\+=|--|-=|\\|\\||\\|=|&&|&=|\\.\\.\\.|\\.\\.|/=)|[/.&|\\-+<>!()\\[\\]{}?,;:$=*%^~]', Punctuation), ('[a-zA-Z_]\\w*', Name), ('(#line)(\\s)(.*)(\\n)', bygroups(Comment.Special, Whitespace, Comment.Special, Whitespace))], 'nested_comment': [('[^+/]+', Comment.Multiline), ('/\\+', Comment.Multiline, '#push'), ('\\+/', Comment.Multiline, '#pop'), ('[+/]', Comment.Multiline)], 'token_string': [('\\{', Punctuation, 'token_string_nest'), ('\\}', String, '#pop'), include('root')], 'token_string_nest': [('\\{', Punctuation, '#push'), ('\\}', Punctuation, '#pop'), include('root')], 'delimited_bracket': [('[^\\[\\]]+', String), ('\\[', String, 'delimited_inside_bracket'), ('\\]"', String, '#pop')], 'delimited_inside_bracket': [('[^\\[\\]]+', String), ('\\[', String, '#push'), ('\\]', String, '#pop')], 'delimited_parenthesis': [('[^()]+', String), ('\\(', String, 'delimited_inside_parenthesis'), ('\\)"', String, '#pop')], 'delimited_inside_parenthesis': [('[^()]+', String), ('\\(', String, '#push'), ('\\)', String, '#pop')], 'delimited_angle': [('[^<>]+', String), ('<', String, 'delimited_inside_angle'), ('>"', String, '#pop')], 'delimited_inside_angle': [('[^<>]+', String), ('<', String, '#push'), ('>', String, '#pop')], 'delimited_curly': [('[^{}]+', String), ('\\{', String, 'delimited_inside_curly'), ('\\}"', String, '#pop')], 'delimited_inside_curly': [('[^{}]+', String), ('\\{', String, '#push'), ('\\}', String, '#pop')]}
  }

  class CrocLexer {
      + name = 'Croc'
      + url = 'http://jfbillingsley.com/croc'
      + filenames = ['*.croc']
      + aliases = ['croc']
      + mimetypes = ['text/x-crocsrc']
      + version_added = ''
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/\\*', Comment.Multiline, 'nestedcomment'), (words(('as', 'assert', 'break', 'case', 'catch', 'class', 'continue', 'default', 'do', 'else', 'finally', 'for', 'foreach', 'function', 'global', 'namespace', 'if', 'import', 'in', 'is', 'local', 'module', 'return', 'scope', 'super', 'switch', 'this', 'throw', 'try', 'vararg', 'while', 'with', 'yield'), suffix='\\b'), Keyword), ('(false|true|null)\\b', Keyword.Constant), ('([0-9][0-9_]*)(?=[.eE])(\\.[0-9][0-9_]*)?([eE][+\\-]?[0-9_]+)?', Number.Float), ('0[bB][01][01_]*', Number.Bin), ('0[xX][0-9a-fA-F][0-9a-fA-F_]*', Number.Hex), ('([0-9][0-9_]*)(?![.eE])', Number.Integer), ('\'(\\\\[\'"\\\\nrt]|\\\\x[0-9a-fA-F]{2}|\\\\[0-9]{1,3}|\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}|.)\'', String.Char), ('@"(""|[^"])*"', String), ('@`(``|[^`])*`', String), ("@'(''|[^'])*'", String), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('(~=|\\^=|%=|\\*=|==|!=|>>>=|>>>|>>=|>>|>=|<=>|\\?=|-\\>|<<=|<<|<=|\\+\\+|\\+=|--|-=|\\|\\||\\|=|&&|&=|\\.\\.|/=)|[-/.&$@|\\+<>!()\\[\\]{}?,;:=*%^~#\\\\]', Punctuation), ('[a-zA-Z_]\\w*', Name)], 'nestedcomment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  }

  class MiniDLexer {
      + name = 'MiniD'
      + filenames = []
      + aliases = ['minid']
      + mimetypes = ['text/x-minidsrc']
      + version_added = ''
  }

  class SmaliLexer {
      + name = 'Smali'
      + url = 'http://code.google.com/p/smali/'
      + aliases = ['smali']
      + filenames = ['*.smali']
      + mimetypes = ['text/smali']
      + version_added = '1.6'
      + tokens = {'root': [include('comment'), include('label'), include('field'), include('method'), include('class'), include('directive'), include('access-modifier'), include('instruction'), include('literal'), include('punctuation'), include('type'), include('whitespace')], 'directive': [('^([ \\t]*)(\\.(?:class|super|implements|field|subannotation|annotation|enum|method|registers|locals|array-data|packed-switch|sparse-switch|catchall|catch|line|parameter|local|prologue|epilogue|source))', bygroups(Whitespace, Keyword)), ('^([ \\t]*)(\\.end)( )(field|subannotation|annotation|method|array-data|packed-switch|sparse-switch|parameter|local)', bygroups(Whitespace, Keyword, Whitespace, Keyword)), ('^([ \\t]*)(\\.restart)( )(local)', bygroups(Whitespace, Keyword, Whitespace, Keyword))], 'access-modifier': [('(public|private|protected|static|final|synchronized|bridge|varargs|native|abstract|strictfp|synthetic|constructor|declared-synchronized|interface|enum|annotation|volatile|transient)', Keyword)], 'whitespace': [('\\n', Whitespace), ('\\s+', Whitespace)], 'instruction': [('\\b[vp]\\d+\\b', Name.Builtin), ('(\\b[a-z][A-Za-z0-9/-]+)(\\s+)', bygroups(Text, Whitespace))], 'literal': [('".*"', String), ('0x[0-9A-Fa-f]+t?', Number.Hex), ('[0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('[0-9]+L?', Number.Integer)], 'field': [('(\\$?\\b)([\\w$]*)(:)', bygroups(Punctuation, Name.Variable, Punctuation))], 'method': [('<(?:cl)?init>', Name.Function), ('(\\$?\\b)([\\w$]*)(\\()', bygroups(Punctuation, Name.Function, Punctuation))], 'label': [(':\\w+', Name.Label)], 'class': [('(L)((?:[\\w$]+/)*)([\\w$]+)(;)', bygroups(Keyword.Type, Text, Name.Class, Text))], 'punctuation': [('->', Punctuation), ('[{},():=.-]', Punctuation)], 'type': [('[ZBSCIJFDV\\[]+', Keyword.Type)], 'comment': [('#.*?\\n', Comment)]}
  --
      + analyse_text(text)
  }

  class YamlLexerContext {
      - __init__()
  }

  class YamlLexer {
      + name = 'YAML'
      + url = 'http://yaml.org/'
      + aliases = ['yaml']
      + filenames = ['*.yaml', '*.yml']
      + mimetypes = ['text/x-yaml']
      + version_added = '0.11'
      + tokens = {'root': [('[ ]+(?=#|$)', Whitespace), ('\\n+', Whitespace), ('#[^\\n]*', Comment.Single), ('^%YAML(?=[ ]|$)', reset_indent(Name.Tag), 'yaml-directive'), ('^%TAG(?=[ ]|$)', reset_indent(Name.Tag), 'tag-directive'), ('^(?:---|\\.\\.\\.)(?=[ ]|$)', reset_indent(Name.Namespace), 'block-line'), ('[ ]*(?!\\s|$)', save_indent(Whitespace, start=True), ('block-line', 'indentation'))], 'ignored-line': [('[ ]+(?=#|$)', Whitespace), ('#[^\\n]*', Comment.Single), ('\\n', Whitespace, '#pop:2')], 'yaml-directive': [('([ ]+)([0-9]+\\.[0-9]+)', bygroups(Whitespace, Number), 'ignored-line')], 'tag-directive': [("([ ]+)(!|![\\w-]*!)([ ]+)(!|!?[\\w;/?:@&=+$,.!~*\\'()\\[\\]%-]+)", bygroups(Whitespace, Keyword.Type, Whitespace, Keyword.Type), 'ignored-line')], 'indentation': [('[ ]*$', something(Whitespace), '#pop:2'), ('[ ]+(?=[?:-](?:[ ]|$))', save_indent(Whitespace)), ('[?:-](?=[ ]|$)', set_indent(Punctuation.Indicator)), ('[ ]*', save_indent(Whitespace), '#pop')], 'block-line': [('[ ]*(?=#|$)', something(Whitespace), '#pop'), ('[ ]+', Whitespace), ('([^#,?\\[\\]{}"\'\\n]+)(:)(?=[ ]|$)', bygroups(Name.Tag, set_indent(Punctuation, implicit=True))), include('descriptors'), include('block-nodes'), include('flow-nodes'), ('(?=[^\\s?:,\\[\\]{}#&*!|>\\\'"%@`-]|[?:-]\\S)', something(Name.Variable), 'plain-scalar-in-block-context')], 'descriptors': [("!<[\\w#;/?:@&=+$,.!~*\\'()\\[\\]%-]+>", Keyword.Type), ("!(?:[\\w-]+!)?[\\w#;/?:@&=+$,.!~*\\'()\\[\\]%-]*", Keyword.Type), ('&[\\w-]+', Name.Label), ('\\*[\\w-]+', Name.Variable)], 'block-nodes': [(':(?=[ ]|$)', set_indent(Punctuation.Indicator, implicit=True)), ('[|>]', Punctuation.Indicator, ('block-scalar-content', 'block-scalar-header'))], 'flow-nodes': [('\\[', Punctuation.Indicator, 'flow-sequence'), ('\\{', Punctuation.Indicator, 'flow-mapping'), ("\\'", String, 'single-quoted-scalar'), ('\\"', String, 'double-quoted-scalar')], 'flow-collection': [('[ ]+', Whitespace), ('\\n+', Whitespace), ('#[^\\n]*', Comment.Single), ('[?:,]', Punctuation.Indicator), include('descriptors'), include('flow-nodes'), ('(?=[^\\s?:,\\[\\]{}#&*!|>\\\'"%@`])', something(Name.Variable), 'plain-scalar-in-flow-context')], 'flow-sequence': [include('flow-collection'), ('\\]', Punctuation.Indicator, '#pop')], 'flow-mapping': [('([^,:?\\[\\]{}"\'\\n]+)(:)(?=[ ]|$)', bygroups(Name.Tag, Punctuation)), include('flow-collection'), ('\\}', Punctuation.Indicator, '#pop')], 'block-scalar-content': [('\\n', Whitespace), ('^[ ]+$', parse_block_scalar_empty_line(Whitespace, Name.Constant)), ('^[ ]*', parse_block_scalar_indent(Whitespace)), ('[\\S\\t ]+', Name.Constant)], 'block-scalar-header': [('([1-9])?[+-]?(?=[ ]|$)', set_block_scalar_indent(Punctuation.Indicator), 'ignored-line'), ('[+-]?([1-9])?(?=[ ]|$)', set_block_scalar_indent(Punctuation.Indicator), 'ignored-line')], 'quoted-scalar-whitespaces': [('^[ ]+', Whitespace), ('[ ]+$', Whitespace), ('\\n+', Whitespace), ('[ ]+', Name.Variable)], 'single-quoted-scalar': [include('quoted-scalar-whitespaces'), ("\\'\\'", String.Escape), ("[^\\s\\']+", String), ("\\'", String, '#pop')], 'double-quoted-scalar': [include('quoted-scalar-whitespaces'), ('\\\\[0abt\\tn\\nvfre "\\\\N_LP]', String), ('\\\\(?:x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})', String.Escape), ('[^\\s"\\\\]+', String), ('"', String, '#pop')], 'plain-scalar-in-block-context-new-line': [('^[ ]+$', Whitespace), ('\\n+', Whitespace), ('^(?=---|\\.\\.\\.)', something(Name.Namespace), '#pop:3'), ('^[ ]*', parse_plain_scalar_indent(Whitespace), '#pop')], 'plain-scalar-in-block-context': [('[ ]*(?=:[ ]|:$)', something(Whitespace), '#pop'), ('[ ]+(?=#)', Whitespace, '#pop'), ('[ ]+$', Whitespace), ('\\n+', Whitespace, 'plain-scalar-in-block-context-new-line'), ('[ ]+', Literal.Scalar.Plain), ('(?::(?!\\s)|[^\\s:])+', Literal.Scalar.Plain)], 'plain-scalar-in-flow-context': [('[ ]*(?=[,:?\\[\\]{}])', something(Whitespace), '#pop'), ('[ ]+(?=#)', Whitespace, '#pop'), ('^[ ]+', Whitespace), ('[ ]+$', Whitespace), ('\\n+', Whitespace), ('[ ]+', Name.Variable), ('[^\\s,:?\\[\\]{}]+', Name.Variable)]}
  --
      + something(token_class)
      + reset_indent(token_class)
      + save_indent(token_class, start = False)
      + set_indent(token_class, implicit = False)
      + set_block_scalar_indent(token_class)
      + parse_block_scalar_empty_line(indent_token_class, content_token_class)
      + parse_block_scalar_indent(token_class)
      + parse_plain_scalar_indent(token_class)
      + get_tokens_unprocessed(text = None, context = None)
  }

  class JsonLexer {
      + name = 'JSON'
      + url = 'https://www.json.org'
      + aliases = ['json', 'json-object']
      + filenames = ['*.json', '*.jsonl', '*.ndjson', 'Pipfile.lock']
      + mimetypes = ['application/json', 'application/json-object', 'application/x-ndjson', 'application/jsonl', 'application/json-seq']
      + version_added = '1.5'
      + integers = set('-0123456789')
      + floats = set('.eE+')
      + constants = set('truefalsenull')
      + hexadecimals = set('0123456789abcdefABCDEF')
      + punctuations = set('{}[],')
      + whitespaces = {' ', '\n', '\r', '\t'}
  --
      + get_tokens_unprocessed(text)
  }

  class JsonBareObjectLexer {
      + name = 'JSONBareObject'
      + aliases = []
      + filenames = []
      + mimetypes = []
      + version_added = '2.2'
  }

  class JsonLdLexer {
      + name = 'JSON-LD'
      + url = 'https://json-ld.org/'
      + aliases = ['jsonld', 'json-ld']
      + filenames = ['*.jsonld']
      + mimetypes = ['application/ld+json']
      + version_added = '2.0'
      + json_ld_keywords = {f'"@{keyword}"' for keyword in ('base', 'container', 'context', 'direction', 'graph', 'id', 'import', 'included', 'index', 'json', 'language', 'list', 'nest', 'none', 'prefix', 'propagate', 'protected', 'reverse', 'set', 'type', 'value', 'version', 'vocab')}
  --
      + get_tokens_unprocessed(text)
  }

  class DaxLexer {
      + name = 'Dax'
      + aliases = ['dax']
      + filenames = ['*.dax']
      + url = 'https://learn.microsoft.com/en-us/dax/dax-function-reference'
      + mimetypes = []
      + version_added = '2.15'
      + tokens = {'root': [('\\s+', Whitespace), ('--.*\\n?', Comment.Single), ('//.*\\n?', Comment.Single), ('/\\*', Comment.Multiline, 'multiline-comments'), (words(('abs', 'accrint', 'accrintm', 'acos', 'acosh', 'acot', 'acoth', 'addcolumns', 'addmissingitems', 'all', 'allcrossfiltered', 'allexcept', 'allnoblankrow', 'allselected', 'amordegrc', 'amorlinc', 'and', 'approximatedistinctcount', 'asin', 'asinh', 'atan', 'atanh', 'average', 'averagea', 'averagex', 'beta.dist', 'beta.inv', 'bitand', 'bitlshift', 'bitor', 'bitrshift', 'bitxor', 'blank', 'calculate', 'calculatetable', 'calendar', 'calendarauto', 'ceiling', 'chisq.dist', 'chisq.dist.rt', 'chisq.inv', 'chisq.inv.rt', 'closingbalancemonth', 'closingbalancequarter', 'closingbalanceyear', 'coalesce', 'columnstatistics', 'combin', 'combina', 'combinevalues', 'concatenate', 'concatenatex', 'confidence.norm', 'confidence.t', 'contains', 'containsrow', 'containsstring', 'containsstringexact', 'convert', 'cos', 'cosh', 'cot', 'coth', 'count', 'counta', 'countax', 'countblank', 'countrows', 'countx', 'coupdaybs', 'coupdays', 'coupdaysnc', 'coupncd', 'coupnum', 'couppcd', 'crossfilter', 'crossjoin', 'cumipmt', 'cumprinc', 'currency', 'currentgroup', 'customdata', 'datatable', 'date', 'dateadd', 'datediff', 'datesbetween', 'datesinperiod', 'datesmtd', 'datesqtd', 'datesytd', 'datevalue', 'day', 'db', 'ddb', 'degrees', 'detailrows', 'disc', 'distinct', 'distinctcount', 'distinctcountnoblank', 'divide', 'dollarde', 'dollarfr', 'duration', 'earlier', 'earliest', 'edate', 'effect', 'endofmonth', 'endofquarter', 'endofyear', 'eomonth', 'error', 'evaluateandlog', 'even', 'exact', 'except', 'exp', 'expon.dist', 'fact', 'false', 'filter', 'filters', 'find', 'firstdate', 'firstnonblank', 'firstnonblankvalue', 'fixed', 'floor', 'format', 'fv', 'gcd', 'generate', 'generateall', 'generateseries', 'geomean', 'geomeanx', 'groupby', 'hash', 'hasonefilter', 'hasonevalue', 'hour', 'if', 'if.eager', 'iferror', 'ignore', 'index', 'int', 'intersect', 'intrate', 'ipmt', 'isafter', 'isblank', 'iscrossfiltered', 'isempty', 'iserror', 'iseven', 'isfiltered', 'isinscope', 'islogical', 'isnontext', 'isnumber', 'iso.ceiling', 'isodd', 'isonorafter', 'ispmt', 'isselectedmeasure', 'issubtotal', 'istext', 'keepfilters', 'keywordmatch', 'lastdate', 'lastnonblank', 'lastnonblankvalue', 'lcm', 'left', 'len', 'linest', 'linestx', 'ln', 'log', 'log10', 'lookupvalue', 'lower', 'max', 'maxa', 'maxx', 'mduration', 'median', 'medianx', 'mid', 'min', 'mina', 'minute', 'minx', 'mod', 'month', 'mround', 'nameof', 'naturalinnerjoin', 'naturalleftouterjoin', 'networkdays', 'nextday', 'nextmonth', 'nextquarter', 'nextyear', 'nominal', 'nonvisual', 'norm.dist', 'norm.inv', 'norm.s.dist', 'norm.s.inv', 'not', 'now', 'nper', 'odd', 'oddfprice', 'oddfyield', 'oddlprice', 'oddlyield', 'offset', 'openingbalancemonth', 'openingbalancequarter', 'openingbalanceyear', 'or', 'orderby', 'parallelperiod', 'partitionby', 'path', 'pathcontains', 'pathitem', 'pathitemreverse', 'pathlength', 'pduration', 'percentile.exc', 'percentile.inc', 'percentilex.exc', 'percentilex.inc', 'permut', 'pi', 'pmt', 'poisson.dist', 'power', 'ppmt', 'previousday', 'previousmonth', 'previousquarter', 'previousyear', 'price', 'pricedisc', 'pricemat', 'product', 'productx', 'pv', 'quarter', 'quotient', 'radians', 'rand', 'randbetween', 'rank.eq', 'rankx', 'rate', 'received', 'related', 'relatedtable', 'removefilters', 'replace', 'rept', 'right', 'rollup', 'rollupaddissubtotal', 'rollupgroup', 'rollupissubtotal', 'round', 'rounddown', 'roundup', 'row', 'rri', 'sameperiodlastyear', 'sample', 'sampleaxiswithlocalminmax', 'search', 'second', 'selectcolumns', 'selectedmeasure', 'selectedmeasureformatstring', 'selectedmeasurename', 'selectedvalue', 'sign', 'sin', 'sinh', 'sln', 'sqrt', 'sqrtpi', 'startofmonth', 'startofquarter', 'startofyear', 'stdev.p', 'stdev.s', 'stdevx.p', 'stdevx.s', 'substitute', 'substitutewithindex', 'sum', 'summarize', 'summarizecolumns', 'sumx', 'switch', 'syd', 't.dist', 't.dist.2t', 't.dist.rt', 't.inv', 't.inv.2t', 'tan', 'tanh', 'tbilleq', 'tbillprice', 'tbillyield', 'time', 'timevalue', 'tocsv', 'today', 'tojson', 'topn', 'topnperlevel', 'topnskip', 'totalmtd', 'totalqtd', 'totalytd', 'treatas', 'trim', 'true', 'trunc', 'unichar', 'unicode', 'union', 'upper', 'userculture', 'userelationship', 'username', 'userobjectid', 'userprincipalname', 'utcnow', 'utctoday', 'value', 'values', 'var.p', 'var.s', 'varx.p', 'varx.s', 'vdb', 'weekday', 'weeknum', 'window', 'xirr', 'xnpv', 'year', 'yearfrac', 'yield', 'yielddisc', 'yieldmat'), prefix='(?i)', suffix='\\b'), Name.Function), (words(('at', 'asc', 'boolean', 'both', 'by', 'create', 'currency', 'datetime', 'day', 'define', 'desc', 'double', 'evaluate', 'false', 'integer', 'measure', 'month', 'none', 'order', 'return', 'single', 'start', 'string', 'table', 'true', 'var', 'year'), prefix='(?i)', suffix='\\b'), Name.Builtin), (':=|[-+*\\/=^]', Operator), ('\\b(IN|NOT)\\b', Operator.Word), ('"', String, 'string'), ("'(?:[^']|'')*'(?!')(?:\\[[ \\w]+\\])?|\\w+\\[[ \\w]+\\]", Name.Attribute), ('\\[[ \\w]+\\]', Name.Attribute), ('(?<!\\w)(\\d+\\.?\\d*|\\.\\d+\\b)', Number), ('[\\[\\](){}`,.]', Punctuation), ('.*\\n', Text)], 'multiline-comments': [('/\\*', Comment.Multiline, 'multiline-comments'), ('\\*/', Comment.Multiline, '#pop'), ('[^/*]+', Comment.Multiline), ('[/*]', Comment.Multiline)], 'string': [('""', String.Escape), ('"', String, '#pop'), ('[^"]+', String)]}
  }

  class DevicetreeLexer {
      + name = 'Devicetree'
      + url = 'https://www.devicetree.org/'
      + aliases = ['devicetree', 'dts']
      + filenames = ['*.dts', '*.dtsi']
      + mimetypes = ['text/x-c']
      + version_added = '2.7'
      + tokens = {'macro': [('(#include)(' + _ws + ')([^\\n]+)', bygroups(Comment.Preproc, Comment.Multiline, Comment.PreprocFile)), ('(#define)(' + _ws + ')([^\\n]+)', bygroups(Comment.Preproc, Comment.Multiline, Comment.Preproc)), ('(/[^*/{]+/)(' + _ws + ')("[^\\n{]+")', bygroups(Comment.Preproc, Comment.Multiline, Comment.PreprocFile)), ('(/[^*/{]+/)(' + _ws + ')([^\\n;{]*)([;]?)', bygroups(Comment.Preproc, Comment.Multiline, Comment.Preproc, Punctuation))], 'whitespace': [('\\n', Whitespace), ('\\s+', Whitespace), ('\\\\\\n', Text), ('//(\\n|[\\w\\W]*?[^\\\\]\\n)', Comment.Single), ('/(\\\\\\n)?[*][\\w\\W]*?[*](\\\\\\n)?/', Comment.Multiline), ('/(\\\\\\n)?[*][\\w\\W]*', Comment.Multiline)], 'statements': [('(L?)(")', bygroups(String.Affix, String), 'string'), ('0x[0-9a-fA-F]+', Number.Hex), ('\\d+', Number.Integer), ('([^\\s{}/*]*)(\\s*)(:)', bygroups(Name.Label, Text, Punctuation), '#pop'), (words(('compatible', 'model', 'phandle', 'status', '#address-cells', '#size-cells', 'reg', 'virtual-reg', 'ranges', 'dma-ranges', 'device_type', 'name'), suffix='\\b'), Keyword.Reserved), ('([~!%^&*+=|?:<>/#-])', Operator), ('[()\\[\\]{},.]', Punctuation), ('[a-zA-Z_][\\w-]*(?=(?:\\s*,\\s*[a-zA-Z_][\\w-]*|(?:' + _ws + '))*\\s*[=;])', Name), ('[a-zA-Z_]\\w*', Name.Attribute)], 'root': [include('whitespace'), include('macro'), ('([^/*@\\s&]+|/)(@?)((?:0x)?[0-9a-fA-F,]*)(' + _ws + ')(\\{)', bygroups(Name.Function, Operator, Number.Integer, Comment.Multiline, Punctuation), 'node'), default('statement')], 'statement': [include('whitespace'), include('statements'), (';', Punctuation, '#pop')], 'node': [include('whitespace'), include('macro'), ('([^/*@\\s&]+|/)(@?)((?:0x)?[0-9a-fA-F,]*)(' + _ws + ')(\\{)', bygroups(Name.Function, Operator, Number.Integer, Comment.Multiline, Punctuation), '#push'), include('statements'), ('\\};', Punctuation, '#pop'), (';', Punctuation)], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('\\\\\\n', String), ('\\\\', String)]}
  }

  class DiffLexer {
      + name = 'Diff'
      + aliases = ['diff', 'udiff']
      + filenames = ['*.diff', '*.patch']
      + mimetypes = ['text/x-diff', 'text/x-patch']
      + url = 'https://en.wikipedia.org/wiki/Diff'
      + version_added = ''
      + tokens = {'root': [('( )(.*)(\\n)', bygroups(Whitespace, Text, Whitespace)), ('(!.*|---)(\\n)', bygroups(Generic.Strong, Whitespace)), ('((?:< |-).*)(\\n)', bygroups(Generic.Deleted, Whitespace)), ('((?:> |\\+).*)(\\n)', bygroups(Generic.Inserted, Whitespace)), ('(@.*|\\d(?:,\\d+)?(?:a|c|d)\\d+(?:,\\d+)?)(\\n)', bygroups(Generic.Subheading, Whitespace)), ('((?:[Ii]ndex|diff).*)(\\n)', bygroups(Generic.Heading, Whitespace)), ('(=.*)(\\n)', bygroups(Generic.Heading, Whitespace)), ('(.*)(\\n)', bygroups(Text, Whitespace))]}
  --
      + analyse_text(text)
  }

  class DarcsPatchLexer {
      + name = 'Darcs Patch'
      + aliases = ['dpatch']
      + filenames = ['*.dpatch', '*.darcspatch']
      + url = 'https://darcs.net'
      + version_added = '0.10'
      + DPATCH_KEYWORDS = ('hunk', 'addfile', 'adddir', 'rmfile', 'rmdir', 'move', 'replace')
      + tokens = {'root': [('<', Operator), ('>', Operator), ('\\{', Operator), ('\\}', Operator), ('(\\[)((?:TAG )?)(.*)(\\n)(.*)(\\*\\*)(\\d+)(\\s?)(\\])', bygroups(Operator, Keyword, Name, Whitespace, Name, Operator, Literal.Date, Whitespace, Operator)), ('(\\[)((?:TAG )?)(.*)(\\n)(.*)(\\*\\*)(\\d+)(\\s?)', bygroups(Operator, Keyword, Name, Whitespace, Name, Operator, Literal.Date, Whitespace), 'comment'), ('New patches:', Generic.Heading), ('Context:', Generic.Heading), ('Patch bundle hash:', Generic.Heading), ('(\\s*)({})(.*)(\\n)'.format('|'.join(DPATCH_KEYWORDS)), bygroups(Whitespace, Keyword, Text, Whitespace)), ('\\+', Generic.Inserted, 'insert'), ('-', Generic.Deleted, 'delete'), ('(.*)(\\n)', bygroups(Text, Whitespace))], 'comment': [('[^\\]].*\\n', Comment), ('\\]', Operator, '#pop')], 'specialText': [('\\n', Whitespace, '#pop'), ('\\[_[^_]*_]', Operator)], 'insert': [include('specialText'), ('\\[', Generic.Inserted), ('[^\\n\\[]+', Generic.Inserted)], 'delete': [include('specialText'), ('\\[', Generic.Deleted), ('[^\\n\\[]+', Generic.Deleted)]}
  }

  class WDiffLexer {
      + name = 'WDiff'
      + url = 'https://www.gnu.org/software/wdiff/'
      + aliases = ['wdiff']
      + filenames = ['*.wdiff']
      + mimetypes = []
      + version_added = '2.2'
      + flags = re.MULTILINE | re.DOTALL
      + ins_op = '\\{\\+'
      + ins_cl = '\\+\\}'
      + del_op = '\\[\\-'
      + del_cl = '\\-\\]'
      + normal = '[^{}[\\]+-]+'
      + tokens = {'root': [(ins_op, Generic.Inserted, 'inserted'), (del_op, Generic.Deleted, 'deleted'), (normal, Text), ('.', Text)], 'inserted': [(ins_op, Generic.Inserted, '#push'), (del_op, Generic.Inserted, '#push'), (del_cl, Generic.Inserted, '#pop'), (ins_cl, Generic.Inserted, '#pop'), (normal, Generic.Inserted), ('.', Generic.Inserted)], 'deleted': [(del_op, Generic.Deleted, '#push'), (ins_op, Generic.Deleted, '#push'), (ins_cl, Generic.Deleted, '#pop'), (del_cl, Generic.Deleted, '#pop'), (normal, Generic.Deleted), ('.', Generic.Deleted)]}
  }

  class DnsZoneLexer {
      + flags = re.MULTILINE
      + name = 'Zone'
      + aliases = ['zone']
      + filenames = ['*.zone']
      + url = 'https://datatracker.ietf.org/doc/html/rfc1035'
      + mimetypes = ['text/dns']
      + version_added = '2.16'
      + tokens = {'root': [('([ \\t]*)(;.*)(\\n)', bygroups(Whitespace, Comment.Single, Whitespace)), ('^\\$ORIGIN\\b', Keyword, 'values'), ('^\\$TTL\\b', Keyword, 'values'), ('^\\$INCLUDE\\b', Comment.Preproc, 'include'), ('^\\$[A-Z]+\\b', Keyword, 'values'), ('^(@)([ \\t]+)(?:([0-9]+[smhdw]?)([ \\t]+))?(?:' + CLASSES_RE + '([ \t]+))?([A-Z]+)([ \t]+)', bygroups(Operator, Whitespace, Number.Integer, Whitespace, Name.Class, Whitespace, Keyword.Type, Whitespace), 'values'), ('^([^ \\t\\n]*)([ \\t]+)(?:([0-9]+[smhdw]?)([ \\t]+))?(?:' + CLASSES_RE + '([ \t]+))?([A-Z]+)([ \t]+)', bygroups(Name, Whitespace, Number.Integer, Whitespace, Name.Class, Whitespace, Keyword.Type, Whitespace), 'values'), ('^(Operator)([ \\t]+)(?:' + CLASSES_RE + '([ \t]+))?(?:([0-9]+[smhdw]?)([ \t]+))?([A-Z]+)([ \t]+)', bygroups(Name, Whitespace, Number.Integer, Whitespace, Name.Class, Whitespace, Keyword.Type, Whitespace), 'values'), ('^([^ \\t\\n]*)([ \\t]+)(?:' + CLASSES_RE + '([ \t]+))?(?:([0-9]+[smhdw]?)([ \t]+))?([A-Z]+)([ \t]+)', bygroups(Name, Whitespace, Number.Integer, Whitespace, Name.Class, Whitespace, Keyword.Type, Whitespace), 'values')], 'values': [('\\n', Whitespace, '#pop'), ('\\(', Punctuation, 'nested'), include('simple-value')], 'nested': [('\\)', Punctuation, '#pop'), include('multiple-simple-values')], 'simple-value': [('(;.*)', bygroups(Comment.Single)), ('[ \\t]+', Whitespace), ('@\\b', Operator), ('"', String, 'string'), ('[0-9]+[smhdw]?$', Number.Integer), ('([0-9]+[smhdw]?)([ \\t]+)', bygroups(Number.Integer, Whitespace)), ('\\S+', Literal)], 'multiple-simple-values': [include('simple-value'), ('[\\n]+', Whitespace)], 'include': [('([ \\t]+)([^ \\t\\n]+)([ \\t]+)([-\\._a-zA-Z]+)([ \\t]+)(;.*)?$', bygroups(Whitespace, Comment.PreprocFile, Whitespace, Name, Whitespace, Comment.Single), '#pop'), ('([ \\t]+)([^ \\t\\n]+)([ \\t\\n]+)$', bygroups(Whitespace, Comment.PreprocFile, Whitespace), '#pop')], 'string': [('\\\\"', String), ('"', String, '#pop'), ('[^"]+', String)]}
  --
      + analyse_text(text)
  }

  class CSharpLexer {
      + name = 'C#'
      + url = 'https://docs.microsoft.com/en-us/dotnet/csharp/'
      + aliases = ['csharp', 'c#', 'cs']
      + filenames = ['*.cs']
      + mimetypes = ['text/x-csharp']
      + version_added = ''
      + flags = re.MULTILINE | re.DOTALL
      + levels = {'none': '@?[_a-zA-Z]\\w*', 'basic': '@?[_' + uni.combine('Lu', 'Ll', 'Lt', 'Lm', 'Nl') + ']' + '[' + uni.combine('Lu', 'Ll', 'Lt', 'Lm', 'Nl', 'Nd', 'Pc', 'Cf', 'Mn', 'Mc') + ']*', 'full': '@?(?:_|[^' + uni.allexcept('Lu', 'Ll', 'Lt', 'Lm', 'Lo', 'Nl') + '])' + '[^' + uni.allexcept('Lu', 'Ll', 'Lt', 'Lm', 'Lo', 'Nl', 'Nd', 'Pc', 'Cf', 'Mn', 'Mc') + ']*'}
      + tokens = {}
      + token_variants = True
  --
      - __init__()
  }

  class NemerleLexer {
      + name = 'Nemerle'
      + url = 'http://nemerle.org'
      + aliases = ['nemerle']
      + filenames = ['*.n']
      + mimetypes = ['text/x-nemerle']
      + version_added = '1.5'
      + flags = re.MULTILINE | re.DOTALL
      + levels = {'none': '@?[_a-zA-Z]\\w*', 'basic': '@?[_' + uni.combine('Lu', 'Ll', 'Lt', 'Lm', 'Nl') + ']' + '[' + uni.combine('Lu', 'Ll', 'Lt', 'Lm', 'Nl', 'Nd', 'Pc', 'Cf', 'Mn', 'Mc') + ']*', 'full': '@?(?:_|[^' + uni.allexcept('Lu', 'Ll', 'Lt', 'Lm', 'Lo', 'Nl') + '])' + '[^' + uni.allexcept('Lu', 'Ll', 'Lt', 'Lm', 'Lo', 'Nl', 'Nd', 'Pc', 'Cf', 'Mn', 'Mc') + ']*'}
      + tokens = {}
      + token_variants = True
  --
      - __init__()
      + analyse_text(text)
  }

  class BooLexer {
      + name = 'Boo'
      + url = 'https://github.com/boo-lang/boo'
      + aliases = ['boo']
      + filenames = ['*.boo']
      + mimetypes = ['text/x-boo']
      + version_added = ''
      + tokens = {'root': [('\\s+', Whitespace), ('(#|//).*$', Comment.Single), ('/[*]', Comment.Multiline, 'comment'), ('[]{}:(),.;[]', Punctuation), ('(\\\\)(\\n)', bygroups(Text, Whitespace)), ('\\\\', Text), ('(in|is|and|or|not)\\b', Operator.Word), ('/(\\\\\\\\|\\\\[^\\\\]|[^/\\\\\\s])/', String.Regex), ('@/(\\\\\\\\|\\\\[^\\\\]|[^/\\\\])*/', String.Regex), ('=~|!=|==|<<|>>|[-+/*%=<>&^|]', Operator), ('(as|abstract|callable|constructor|destructor|do|import|enum|event|final|get|interface|internal|of|override|partial|private|protected|public|return|set|static|struct|transient|virtual|yield|super|and|break|cast|continue|elif|else|ensure|except|for|given|goto|if|in|is|isa|not|or|otherwise|pass|raise|ref|try|unless|when|while|from|as)\\b', Keyword), ('def(?=\\s+\\(.*?\\))', Keyword), ('(def)(\\s+)', bygroups(Keyword, Whitespace), 'funcname'), ('(class)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), ('(namespace)(\\s+)', bygroups(Keyword, Whitespace), 'namespace'), ('(?<!\\.)(true|false|null|self|__eval__|__switch__|array|assert|checked|enumerate|filter|getter|len|lock|map|matrix|max|min|normalArrayIndexing|print|property|range|rawArrayIndexing|required|typeof|unchecked|using|yieldAll|zip)\\b', Name.Builtin), ('"""(\\\\\\\\|\\\\"|.*?)"""', String.Double), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('[a-zA-Z_]\\w*', Name), ('(\\d+\\.\\d*|\\d*\\.\\d+)([fF][+-]?[0-9]+)?', Number.Float), ('[0-9][0-9.]*(ms?|d|h|s)', Number), ('0\\d+', Number.Oct), ('0x[a-fA-F0-9]+', Number.Hex), ('\\d+L', Number.Integer.Long), ('\\d+', Number.Integer)], 'comment': [('/[*]', Comment.Multiline, '#push'), ('[*]/', Comment.Multiline, '#pop'), ('[^/*]', Comment.Multiline), ('[*/]', Comment.Multiline)], 'funcname': [('[a-zA-Z_]\\w*', Name.Function, '#pop')], 'classname': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'namespace': [('[a-zA-Z_][\\w.]*', Name.Namespace, '#pop')]}
  }

  class VbNetLexer {
      + name = 'VB.net'
      + url = 'https://docs.microsoft.com/en-us/dotnet/visual-basic/'
      + aliases = ['vb.net', 'vbnet', 'lobas', 'oobas', 'sobas', 'visual-basic', 'visualbasic']
      + filenames = ['*.vb', '*.bas']
      + mimetypes = ['text/x-vbnet', 'text/x-vba']
      + version_added = ''
      + uni_name = '[_' + uni.combine('Ll', 'Lt', 'Lm', 'Nl') + ']' + '[' + uni.combine('Ll', 'Lt', 'Lm', 'Nl', 'Nd', 'Pc', 'Cf', 'Mn', 'Mc') + ']*'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': [('^\\s*<.*?>', Name.Attribute), ('\\s+', Whitespace), ('\\n', Whitespace), ('(rem\\b.*?)(\\n)', bygroups(Comment, Whitespace)), ("('.*?)(\\n)", bygroups(Comment, Whitespace)), ('#If\\s.*?\\sThen|#ElseIf\\s.*?\\sThen|#Else|#End\\s+If|#Const|#ExternalSource.*?\\n|#End\\s+ExternalSource|#Region.*?\\n|#End\\s+Region|#ExternalChecksum', Comment.Preproc), ('[(){}!#,.:]', Punctuation), ('(Option)(\\s+)(Strict|Explicit|Compare)(\\s+)(On|Off|Binary|Text)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration, Whitespace, Keyword.Declaration)), (words(('AddHandler', 'Alias', 'ByRef', 'ByVal', 'Call', 'Case', 'Catch', 'CBool', 'CByte', 'CChar', 'CDate', 'CDec', 'CDbl', 'CInt', 'CLng', 'CObj', 'Continue', 'CSByte', 'CShort', 'CSng', 'CStr', 'CType', 'CUInt', 'CULng', 'CUShort', 'Declare', 'Default', 'Delegate', 'DirectCast', 'Do', 'Each', 'Else', 'ElseIf', 'EndIf', 'Erase', 'Error', 'Event', 'Exit', 'False', 'Finally', 'For', 'Friend', 'Get', 'Global', 'GoSub', 'GoTo', 'Handles', 'If', 'Implements', 'Inherits', 'Interface', 'Let', 'Lib', 'Loop', 'Me', 'MustInherit', 'MustOverride', 'MyBase', 'MyClass', 'Narrowing', 'New', 'Next', 'Not', 'Nothing', 'NotInheritable', 'NotOverridable', 'Of', 'On', 'Operator', 'Option', 'Optional', 'Overloads', 'Overridable', 'Overrides', 'ParamArray', 'Partial', 'Private', 'Protected', 'Public', 'RaiseEvent', 'ReadOnly', 'ReDim', 'RemoveHandler', 'Resume', 'Return', 'Select', 'Set', 'Shadows', 'Shared', 'Single', 'Static', 'Step', 'Stop', 'SyncLock', 'Then', 'Throw', 'To', 'True', 'Try', 'TryCast', 'Wend', 'Using', 'When', 'While', 'Widening', 'With', 'WithEvents', 'WriteOnly'), prefix='(?<!\\.)', suffix='\\b'), Keyword), ('(?<!\\.)End\\b', Keyword, 'end'), ('(?<!\\.)(Dim|Const)\\b', Keyword, 'dim'), ('(?<!\\.)(Function|Sub|Property)(\\s+)', bygroups(Keyword, Whitespace), 'funcname'), ('(?<!\\.)(Class|Structure|Enum)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), ('(?<!\\.)(Module|Namespace|Imports)(\\s+)', bygroups(Keyword, Whitespace), 'namespace'), ('(?<!\\.)(Boolean|Byte|Char|Date|Decimal|Double|Integer|Long|Object|SByte|Short|Single|String|Variant|UInteger|ULong|UShort)\\b', Keyword.Type), ('(?<!\\.)(AddressOf|And|AndAlso|As|GetType|In|Is|IsNot|Like|Mod|Or|OrElse|TypeOf|Xor)\\b', Operator.Word), ('&=|[*]=|/=|\\\\=|\\^=|\\+=|-=|<<=|>>=|<<|>>|:=|<=|>=|<>|[-&*/\\\\^+=<>\\[\\]]', Operator), ('"', String, 'string'), ('(_)(\\n)', bygroups(Text, Whitespace)), (uni_name + '[%&@!#$]?', Name), ('#.*?#', Literal.Date), ('(\\d+\\.\\d*|\\d*\\.\\d+)(F[+-]?[0-9]+)?', Number.Float), ('\\d+([SILDFR]|US|UI|UL)?', Number.Integer), ('&H[0-9a-f]+([SILDFR]|US|UI|UL)?', Number.Integer), ('&O[0-7]+([SILDFR]|US|UI|UL)?', Number.Integer)], 'string': [('""', String), ('"C?', String, '#pop'), ('[^"]+', String)], 'dim': [(uni_name, Name.Variable, '#pop'), default('#pop')], 'funcname': [(uni_name, Name.Function, '#pop')], 'classname': [(uni_name, Name.Class, '#pop')], 'namespace': [(uni_name, Name.Namespace), ('\\.', Name.Namespace), default('#pop')], 'end': [('\\s+', Whitespace), ('(Function|Sub|Property|Class|Structure|Enum|Module|Namespace)\\b', Keyword, '#pop'), default('#pop')]}
  --
      + analyse_text(text)
  }

  class GenericAspxLexer {
      + name = 'aspx-gen'
      + filenames = []
      + mimetypes = []
      + url = 'https://dotnet.microsoft.com/en-us/apps/aspnet'
      + flags = re.DOTALL
      + tokens = {'root': [('(<%[@=#]?)(.*?)(%>)', bygroups(Name.Tag, Other, Name.Tag)), ('(<script.*?>)(.*?)(</script>)', bygroups(using(XmlLexer), Other, using(XmlLexer))), ('(.+?)(?=<)', using(XmlLexer)), ('.+', using(XmlLexer))]}
  }

  class CSharpAspxLexer {
      + name = 'aspx-cs'
      + aliases = ['aspx-cs']
      + filenames = ['*.aspx', '*.asax', '*.ascx', '*.ashx', '*.asmx', '*.axd']
      + mimetypes = []
      + url = 'https://dotnet.microsoft.com/en-us/apps/aspnet'
      + version_added = ''
  --
      - __init__()
      + analyse_text(text)
  }

  class VbNetAspxLexer {
      + name = 'aspx-vb'
      + aliases = ['aspx-vb']
      + filenames = ['*.aspx', '*.asax', '*.ascx', '*.ashx', '*.asmx', '*.axd']
      + mimetypes = []
      + url = 'https://dotnet.microsoft.com/en-us/apps/aspnet'
      + version_added = ''
  --
      - __init__()
      + analyse_text(text)
  }

  class FSharpLexer {
      + name = 'F#'
      + url = 'https://fsharp.org/'
      + aliases = ['fsharp', 'f#']
      + filenames = ['*.fs', '*.fsi', '*.fsx']
      + mimetypes = ['text/x-fsharp']
      + version_added = '1.5'
      + keywords = ['abstract', 'as', 'assert', 'base', 'begin', 'class', 'default', 'delegate', 'do!', 'do', 'done', 'downcast', 'downto', 'elif', 'else', 'end', 'exception', 'extern', 'false', 'finally', 'for', 'function', 'fun', 'global', 'if', 'inherit', 'inline', 'interface', 'internal', 'in', 'lazy', 'let!', 'let', 'match', 'member', 'module', 'mutable', 'namespace', 'new', 'null', 'of', 'open', 'override', 'private', 'public', 'rec', 'return!', 'return', 'select', 'static', 'struct', 'then', 'to', 'true', 'try', 'type', 'upcast', 'use!', 'use', 'val', 'void', 'when', 'while', 'with', 'yield!', 'yield']
      + keyopts = ['!=', '#', '&&', '&', '\\(', '\\)', '\\*', '\\+', ',', '-\\.', '->', '-', '\\.\\.', '\\.', '::', ':=', ':>', ':', ';;', ';', '<-', '<\\]', '<', '>\\]', '>', '\\?\\?', '\\?', '\\[<', '\\[\\|', '\\[', '\\]', '_', '`', '\\{', '\\|\\]', '\\|', '\\}', '~', '<@@', '<@', '=', '@>', '@@>']
      + operators = '[!$%&*+\\./:<=>?@^|~-]'
      + word_operators = ['and', 'or', 'not']
      + prefix_syms = '[!?~]'
      + infix_syms = '[=<>@^|&+\\*/$%-]'
      + primitives = ['sbyte', 'byte', 'char', 'nativeint', 'unativeint', 'float32', 'single', 'float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64', 'decimal', 'unit', 'bool', 'string', 'list', 'exn', 'obj', 'enum']
      + tokens = {'escape-sequence': [('\\\\[\\\\"\\\'ntbrafv]', String.Escape), ('\\\\[0-9]{3}', String.Escape), ('\\\\u[0-9a-fA-F]{4}', String.Escape), ('\\\\U[0-9a-fA-F]{8}', String.Escape)], 'root': [('\\s+', Whitespace), ('\\(\\)|\\[\\]', Name.Builtin.Pseudo), ("\\b(?<!\\.)([A-Z][\\w\\']*)(?=\\s*\\.)", Name.Namespace, 'dotted'), ("\\b([A-Z][\\w\\']*)", Name), ('(///.*?)(\\n)', bygroups(String.Doc, Whitespace)), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('\\(\\*(?!\\))', Comment, 'comment'), ('@"', String, 'lstring'), ('"""', String, 'tqs'), ('"', String, 'string'), ('\\b(open|module)(\\s+)([\\w.]+)', bygroups(Keyword, Whitespace, Name.Namespace)), ('\\b(let!?)(\\s+)(\\w+)', bygroups(Keyword, Whitespace, Name.Variable)), ('\\b(type)(\\s+)(\\w+)', bygroups(Keyword, Whitespace, Name.Class)), ('\\b(member|override)(\\s+)(\\w+)(\\.)(\\w+)', bygroups(Keyword, Whitespace, Name, Punctuation, Name.Function)), ('\\b({})\\b'.format('|'.join(keywords)), Keyword), ('``([^`\\n\\r\\t]|`[^`\\n\\r\\t])+``', Name), ('({})'.format('|'.join(keyopts)), Operator), (f'({infix_syms}|{prefix_syms})?{operators}', Operator), ('\\b({})\\b'.format('|'.join(word_operators)), Operator.Word), ('\\b({})\\b'.format('|'.join(primitives)), Keyword.Type), ('(#)([ \\t]*)(if|endif|else|line|nowarn|light|\\d+)\\b(.*?)(\\n)', bygroups(Comment.Preproc, Whitespace, Comment.Preproc, Comment.Preproc, Whitespace)), ("[^\\W\\d][\\w']*", Name), ('\\d[\\d_]*[uU]?[yslLnQRZINGmM]?', Number.Integer), ('0[xX][\\da-fA-F][\\da-fA-F_]*[uU]?[yslLn]?[fF]?', Number.Hex), ('0[oO][0-7][0-7_]*[uU]?[yslLn]?', Number.Oct), ('0[bB][01][01_]*[uU]?[yslLn]?', Number.Bin), ('-?\\d[\\d_]*(.[\\d_]*)?([eE][+\\-]?\\d[\\d_]*)[fFmM]?', Number.Float), ('\'(?:(\\\\[\\\\\\"\'ntbr ])|(\\\\[0-9]{3})|(\\\\x[0-9a-fA-F]{2}))\'B?', String.Char), ("'.'", String.Char), ("'", Keyword), ('@?"', String.Double, 'string'), ("[~?][a-z][\\w\\']*:", Name.Variable)], 'dotted': [('\\s+', Whitespace), ('\\.', Punctuation), ("[A-Z][\\w\\']*(?=\\s*\\.)", Name.Namespace), ("[A-Z][\\w\\']*", Name, '#pop'), ("[a-z_][\\w\\']*", Name, '#pop'), default('#pop')], 'comment': [('[^(*)@"]+', Comment), ('\\(\\*', Comment, '#push'), ('\\*\\)', Comment, '#pop'), ('@"', String, 'lstring'), ('"""', String, 'tqs'), ('"', String, 'string'), ('[(*)@]', Comment)], 'string': [('[^\\\\"]+', String), include('escape-sequence'), ('\\\\\\n', String), ('\\n', String), ('"B?', String, '#pop')], 'lstring': [('[^"]+', String), ('\\n', String), ('""', String), ('"B?', String, '#pop')], 'tqs': [('[^"]+', String), ('\\n', String), ('"""B?', String, '#pop'), ('"', String)]}
  --
      + analyse_text(text)
  }

  class XppLexer {
      + name = 'X++'
      + url = 'https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/dev-ref/xpp-language-reference'
      + aliases = ['xpp', 'x++']
      + filenames = ['*.xpp']
      + version_added = '2.15'
      + flags = re.MULTILINE
      + XPP_CHARS = '@?(?:_|[^' + uni.allexcept('Lu', 'Ll', 'Lt', 'Lm', 'Lo', 'Nl') + '])' + '[^' + uni.allexcept('Lu', 'Ll', 'Lt', 'Lm', 'Lo', 'Nl', 'Nd', 'Pc', 'Cf', 'Mn', 'Mc') + ']*'
      + XPP_CHARS = XPP_CHARS.replace('\x00', '\x01')
      + OPERATORS = ('<=', '>=', '+=', '-=', '*=', '/=', '!=', '==', '&&', '||', '>>', '<<', '++', '--', '+', '-', '*', '/', '%', '&', '|', '^', '<', '>', '?', '!', '~', '=')
      + KEYWORDS = ('abstract', 'anytype', 'as', 'async', 'asc', 'at', 'avg', 'break', 'breakpoint', 'by', 'byref', 'case', 'catch', 'changecompany', 'client', 'container', 'continue', 'count', 'crosscompany', 'default', 'delegate', 'delete_from', 'desc', 'display', 'div', 'do', 'edit', 'else', 'element', 'eventhandler', 'exists', 'false', 'final', 'firstfast', 'firstonly', 'firstonly10', 'firstonly100', 'firstonly1000', 'flush', 'for', 'forceliterals', 'forcenestedloop', 'forceplaceholders', 'forceselectorder', 'forupdate', 'from', 'group', 'if', 'insert_recordset', 'interface', 'is', 'join', 'like', 'maxof', 'minof', 'mod', 'new', 'next', 'nofetch', 'notexists', 'null', 'optimisticlock', 'order', 'outer', 'pause', 'pessimisticlock', 'print', 'private', 'protected', 'public', 'repeatableread', 'retry', 'return', 'reverse', 'select', 'server', 'setting', 'static', 'sum', 'super', 'switch', 'tablelock', 'this', 'throw', 'true', 'try', 'ttsabort', 'ttsbegin', 'ttscommit', 'update_recordset', 'validtimestate', 'void', 'where', 'while', 'window')
      + RUNTIME_FUNCTIONS = ('_duration', 'abs', 'acos', 'any2Date', 'any2Enum', 'any2Guid', 'any2Int', 'any2Int64', 'any2Real', 'any2Str', 'anytodate', 'anytoenum', 'anytoguid', 'anytoint', 'anytoint64', 'anytoreal', 'anytostr', 'asin', 'atan', 'beep', 'cTerm', 'char2Num', 'classIdGet', 'corrFlagGet', 'corrFlagSet', 'cos', 'cosh', 'curExt', 'curUserId', 'date2Num', 'date2Str', 'datetime2Str', 'dayName', 'dayOfMth', 'dayOfWk', 'dayOfYr', 'ddb', 'decRound', 'dg', 'dimOf', 'endMth', 'enum2str', 'exp', 'exp10', 'fV', 'fieldId2Name', 'fieldId2PName', 'fieldName2Id', 'frac', 'funcName', 'getCurrentPartition', 'getCurrentPartitionRecId', 'getPrefix', 'guid2Str', 'idg', 'indexId2Name', 'indexName2Id', 'int2Str', 'int642Str', 'intvMax', 'intvName', 'intvNo', 'intvNorm', 'log10', 'logN', 'match', 'max', 'min', 'mkDate', 'mthName', 'mthOfYr', 'newGuid', 'nextMth', 'nextQtr', 'nextYr', 'num2Char', 'num2Date', 'num2Str', 'pmt', 'power', 'prevMth', 'prevQtr', 'prevYr', 'prmIsDefault', 'pt', 'pv', 'rate', 'refPrintAll', 'round', 'runAs', 'sessionId', 'setPrefix', 'sin', 'sinh', 'sleep', 'sln', 'str2Date', 'str2Datetime', 'str2Enum', 'str2Guid', 'str2Int', 'str2Int64', 'str2Num', 'str2Time', 'strAlpha', 'strCmp', 'strColSeq', 'strDel', 'strFind', 'strFmt', 'strIns', 'strKeep', 'strLTrim', 'strLen', 'strLine', 'strLwr', 'strNFind', 'strPoke', 'strPrompt', 'strRTrim', 'strRem', 'strRep', 'strScan', 'strUpr', 'subStr', 'syd', 'systemDateGet', 'systemDateSet', 'tableId2Name', 'tableId2PName', 'tableName2Id', 'tan', 'tanh', 'term', 'time2Str', 'timeNow', 'today', 'trunc', 'typeOf', 'uint2Str', 'wkOfYr', 'year')
      + COMPILE_FUNCTIONS = ('attributeStr', 'classNum', 'classStr', 'configurationKeyNum', 'configurationKeyStr', 'dataEntityDataSourceStr', 'delegateStr', 'dimensionHierarchyLevelStr', 'dimensionHierarchyStr', 'dimensionReferenceStr', 'dutyStr', 'enumCnt', 'enumLiteralStr', 'enumNum', 'enumStr', 'extendedTypeNum', 'extendedTypeStr', 'fieldNum', 'fieldPName', 'fieldStr', 'formControlStr', 'formDataFieldStr', 'formDataSourceStr', 'formMethodStr', 'formStr', 'identifierStr', 'indexNum', 'indexStr', 'licenseCodeNum', 'licenseCodeStr', 'literalStr', 'maxDate', 'maxInt', 'measureStr', 'measurementStr', 'menuItemActionStr', 'menuItemDisplayStr', 'menuItemOutputStr', 'menuStr', 'methodStr', 'minInt', 'privilegeStr', 'queryDatasourceStr', 'queryMethodStr', 'queryStr', 'reportStr', 'resourceStr', 'roleStr', 'ssrsReportStr', 'staticDelegateStr', 'staticMethodStr', 'tableCollectionStr', 'tableFieldGroupStr', 'tableMethodStr', 'tableNum', 'tablePName', 'tableStaticMethodStr', 'tableStr', 'tileStr', 'varStr', 'webActionItemStr', 'webDisplayContentItemStr', 'webFormStr', 'webMenuStr', 'webOutputContentItemStr', 'webReportStr', 'webSiteTempStr', 'webStaticFileStr', 'webUrlItemStr', 'webWebPartStr', 'webletItemStr', 'webpageDefStr', 'websiteDefStr', 'workflowApprovalStr', 'workflowCategoryStr', 'workflowTaskStr', 'workflowTypeStr')
      + tokens = {}
      + tokens = {'root': [('(\\s*)\\b(else|if)\\b([^\\n])', bygroups(Whitespace, Keyword, using(this))), ('^([ \\t]*)((?:' + XPP_CHARS + '(?:\\[\\])?\\s+)+?)(' + XPP_CHARS + ')(\\s*)(\\()', bygroups(Whitespace, using(this), Name.Function, Whitespace, Punctuation)), ('^(\\s*)(\\[)([^\\n]*?)(\\])', bygroups(Whitespace, Name.Attribute, Name.Variable.Class, Name.Attribute)), ('[^\\S\\n]+', Whitespace), ('(\\\\)(\\n)', bygroups(Text, Whitespace)), ('//[^\\n]*?\\n', Comment.Single), ('/[*][^\\n]*?[*]/', Comment.Multiline), ('\\n', Whitespace), (words(OPERATORS), Operator), ('=~|!=|==|<<|>>|[-+/*%=<>&^|]', Operator), ('[()\\[\\];:,.#@]', Punctuation), ('[{}]', Punctuation), ('@"(""|[^"])*"', String), ('\\$?"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\\\n])*["\\n]', String), ("'\\\\.'|'[^\\\\]'", String.Char), ('[0-9]+(\\.[0-9]*)?([eE][+-][0-9]+)?[flFLdD]?|0[xX][0-9a-fA-F]+[Ll]?', Number), (words(KEYWORDS, suffix='\\b'), Keyword), ('(boolean|int|int64|str|real|guid|date)\\b\\??', Keyword.Type), ('(class|struct|extends|implements)(\\s+)', bygroups(Keyword, Whitespace), 'class'), ('(' + XPP_CHARS + ')(::)', bygroups(Name.Variable.Class, Punctuation)), ('(\\s*)(\\w+)(\\s+\\w+(,|=)?[^\\n]*;)', bygroups(Whitespace, Name.Variable.Class, using(this))), ('(fieldNum\\()(' + XPP_CHARS + ')(\\s*,\\s*)(' + XPP_CHARS + ')(\\s*\\))', bygroups(using(this), Name.Variable.Class, using(this), Name.Property, using(this))), ('(tableNum\\()(' + XPP_CHARS + ')(\\s*\\))', bygroups(using(this), Name.Variable.Class, using(this))), (words(RUNTIME_FUNCTIONS, suffix='(?=\\()'), Name.Function.Magic), (words(COMPILE_FUNCTIONS, suffix='(?=\\()'), Name.Function.Magic), (XPP_CHARS, Name)], 'class': [(XPP_CHARS, Name.Class, '#pop'), default('#pop')], 'namespace': [('(?=\\()', Text, '#pop'), ('(' + XPP_CHARS + '|\\.)+', Name.Namespace, '#pop')]}
  }

  class ProtoBufLexer {
      + name = 'Protocol Buffer'
      + url = 'https://developers.google.com/protocol-buffers/'
      + aliases = ['protobuf', 'proto']
      + filenames = ['*.proto']
      + version_added = '1.4'
      + tokens = {'root': [('[ \\t]+', Whitespace), ('[,;{}\\[\\]()<>]', Punctuation), ('/(\\\\\\n)?/(\\n|(.|\\n)*?[^\\\\]\\n)', Comment.Single), ('/(\\\\\\n)?\\*(.|\\n)*?\\*(\\\\\\n)?/', Comment.Multiline), (words(('import', 'option', 'optional', 'required', 'repeated', 'reserved', 'default', 'packed', 'ctype', 'extensions', 'to', 'max', 'rpc', 'returns', 'oneof', 'syntax'), prefix='\\b', suffix='\\b'), Keyword), (words(('int32', 'int64', 'uint32', 'uint64', 'sint32', 'sint64', 'fixed32', 'fixed64', 'sfixed32', 'sfixed64', 'float', 'double', 'bool', 'string', 'bytes'), suffix='\\b'), Keyword.Type), ('(true|false)\\b', Keyword.Constant), ('(package)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'package'), ('(message|extend)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'message'), ('(enum|group|service)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'type'), ('\\".*?\\"', String), ("\\'.*?\\'", String), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[LlUu]*', Number.Float), ('(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float), ('(\\-?(inf|nan))\\b', Number.Float), ('0x[0-9a-fA-F]+[LlUu]*', Number.Hex), ('0[0-7]+[LlUu]*', Number.Oct), ('\\d+[LlUu]*', Number.Integer), ('[+-=]', Operator), ('([a-zA-Z_][\\w.]*)([ \\t]*)(=)', bygroups(Name.Attribute, Whitespace, Operator)), ('[a-zA-Z_][\\w.]*', Name)], 'package': [('[a-zA-Z_]\\w*', Name.Namespace, '#pop'), default('#pop')], 'message': [('[a-zA-Z_]\\w*', Name.Class, '#pop'), default('#pop')], 'type': [('[a-zA-Z_]\\w*', Name, '#pop'), default('#pop')]}
  }

  class ThriftLexer {
      + name = 'Thrift'
      + url = 'https://thrift.apache.org/'
      + aliases = ['thrift']
      + filenames = ['*.thrift']
      + mimetypes = ['application/x-thrift']
      + version_added = '2.1'
      + tokens = {'root': [include('whitespace'), include('comments'), ('"', String.Double, combined('stringescape', 'dqs')), ("\\'", String.Single, combined('stringescape', 'sqs')), ('(namespace)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'namespace'), ('(enum|union|struct|service|exception)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'class'), ('((?:(?:[^\\W\\d]|\\$)[\\w.\\[\\]$<>]*\\s+)+?)((?:[^\\W\\d]|\\$)[\\w$]*)(\\s*)(\\()', bygroups(using(this), Name.Function, Whitespace, Operator)), include('keywords'), include('numbers'), ('[&=]', Operator), ('[:;,{}()<>\\[\\]]', Punctuation), ('[a-zA-Z_](\\.\\w|\\w)*', Name)], 'whitespace': [('\\n', Whitespace), ('\\s+', Whitespace)], 'comments': [('#.*$', Comment), ('//.*?\\n', Comment), ('/\\*[\\w\\W]*?\\*/', Comment.Multiline)], 'stringescape': [('\\\\([\\\\nrt"\\\'])', String.Escape)], 'dqs': [('"', String.Double, '#pop'), ('[^\\\\"\\n]+', String.Double)], 'sqs': [("'", String.Single, '#pop'), ("[^\\\\\\'\\n]+", String.Single)], 'namespace': [('[a-z*](\\.\\w|\\w)*', Name.Namespace, '#pop'), default('#pop')], 'class': [('[a-zA-Z_]\\w*', Name.Class, '#pop'), default('#pop')], 'keywords': [('(async|oneway|extends|throws|required|optional)\\b', Keyword), ('(true|false)\\b', Keyword.Constant), ('(const|typedef)\\b', Keyword.Declaration), (words(('cpp_namespace', 'cpp_include', 'cpp_type', 'java_package', 'cocoa_prefix', 'csharp_namespace', 'delphi_namespace', 'php_namespace', 'py_module', 'perl_package', 'ruby_namespace', 'smalltalk_category', 'smalltalk_prefix', 'xsd_all', 'xsd_optional', 'xsd_nillable', 'xsd_namespace', 'xsd_attrs', 'include'), suffix='\\b'), Keyword.Namespace), (words(('void', 'bool', 'byte', 'i16', 'i32', 'i64', 'double', 'string', 'binary', 'map', 'list', 'set', 'slist', 'senum'), suffix='\\b'), Keyword.Type), (words(('BEGIN', 'END', '__CLASS__', '__DIR__', '__FILE__', '__FUNCTION__', '__LINE__', '__METHOD__', '__NAMESPACE__', 'abstract', 'alias', 'and', 'args', 'as', 'assert', 'begin', 'break', 'case', 'catch', 'class', 'clone', 'continue', 'declare', 'def', 'default', 'del', 'delete', 'do', 'dynamic', 'elif', 'else', 'elseif', 'elsif', 'end', 'enddeclare', 'endfor', 'endforeach', 'endif', 'endswitch', 'endwhile', 'ensure', 'except', 'exec', 'finally', 'float', 'for', 'foreach', 'function', 'global', 'goto', 'if', 'implements', 'import', 'in', 'inline', 'instanceof', 'interface', 'is', 'lambda', 'module', 'native', 'new', 'next', 'nil', 'not', 'or', 'pass', 'public', 'print', 'private', 'protected', 'raise', 'redo', 'rescue', 'retry', 'register', 'return', 'self', 'sizeof', 'static', 'super', 'switch', 'synchronized', 'then', 'this', 'throw', 'transient', 'try', 'undef', 'unless', 'unsigned', 'until', 'use', 'var', 'virtual', 'volatile', 'when', 'while', 'with', 'xor', 'yield'), prefix='\\b', suffix='\\b'), Keyword.Reserved)], 'numbers': [('[+-]?(\\d+\\.\\d+([eE][+-]?\\d+)?|\\.?\\d+[eE][+-]?\\d+)', Number.Float), ('[+-]?0x[0-9A-Fa-f]+', Number.Hex), ('[+-]?[0-9]+', Number.Integer)]}
  }

  class ZeekLexer {
      + name = 'Zeek'
      + url = 'https://www.zeek.org/'
      + aliases = ['zeek', 'bro']
      + filenames = ['*.zeek', '*.bro']
      + version_added = '2.5'
      + tokens = {'root': [include('whitespace'), include('comments'), include('directives'), include('attributes'), include('types'), include('keywords'), include('literals'), include('operators'), include('punctuation'), ('((?:[A-Za-z_]\\w*)(?:::(?:[A-Za-z_]\\w*))*)(?=\\s*\\()', Name.Function), include('identifiers')], 'whitespace': [('\\n', Whitespace), ('\\s+', Whitespace), ('(\\\\)(\\n)', bygroups(Text, Whitespace))], 'comments': [('#.*$', Comment)], 'directives': [('@(load-plugin|load-sigs|load|unload)\\b.*$', Comment.Preproc), ('@(DEBUG|DIR|FILENAME|deprecated|if|ifdef|ifndef|else|endif)\\b', Comment.Preproc), ('(@prefixes)(\\s*)((\\+?=).*)$', bygroups(Comment.Preproc, Whitespace, Comment.Preproc))], 'attributes': [(words(('redef', 'priority', 'log', 'optional', 'default', 'add_func', 'delete_func', 'expire_func', 'read_expire', 'write_expire', 'create_expire', 'synchronized', 'persistent', 'rotate_interval', 'rotate_size', 'encrypt', 'raw_output', 'mergeable', 'error_handler', 'type_column', 'deprecated'), prefix='&', suffix='\\b'), Keyword.Pseudo)], 'types': [(words(('any', 'enum', 'record', 'set', 'table', 'vector', 'function', 'hook', 'event', 'addr', 'bool', 'count', 'double', 'file', 'int', 'interval', 'pattern', 'port', 'string', 'subnet', 'time'), suffix='\\b'), Keyword.Type), ('(opaque)(\\s+)(of)(\\s+)((?:[A-Za-z_]\\w*)(?:::(?:[A-Za-z_]\\w*))*)\\b', bygroups(Keyword.Type, Whitespace, Operator.Word, Whitespace, Keyword.Type)), ('(type)(\\s+)((?:[A-Za-z_]\\w*)(?:::(?:[A-Za-z_]\\w*))*)(\\s*)(:)(\\s*)\\b(record|enum)\\b', bygroups(Keyword, Whitespace, Name.Class, Whitespace, Operator, Whitespace, Keyword.Type)), ('(type)(\\s+)((?:[A-Za-z_]\\w*)(?:::(?:[A-Za-z_]\\w*))*)(\\s*)(:)', bygroups(Keyword, Whitespace, Name, Whitespace, Operator)), ('(redef)(\\s+)(record|enum)(\\s+)((?:[A-Za-z_]\\w*)(?:::(?:[A-Za-z_]\\w*))*)\\b', bygroups(Keyword, Whitespace, Keyword.Type, Whitespace, Name.Class))], 'keywords': [(words(('redef', 'export', 'if', 'else', 'for', 'while', 'return', 'break', 'next', 'continue', 'fallthrough', 'switch', 'default', 'case', 'add', 'delete', 'when', 'timeout', 'schedule'), suffix='\\b'), Keyword), ('(print)\\b', Keyword), ('(global|local|const|option)\\b', Keyword.Declaration), ('(module)(\\s+)(([A-Za-z_]\\w*)(?:::([A-Za-z_]\\w*))*)\\b', bygroups(Keyword.Namespace, Whitespace, Name.Namespace))], 'literals': [('"', String, 'string'), ('/(?=.*/)', String.Regex, 'regex'), ('(T|F)\\b', Keyword.Constant), ('\\d{1,5}/(udp|tcp|icmp|unknown)\\b', Number), ('(\\d{1,3}.){3}(\\d{1,3})\\b', Number), ('\\[([0-9a-fA-F]{0,4}:){2,7}([0-9a-fA-F]{0,4})?((\\d{1,3}.){3}(\\d{1,3}))?\\]', Number), ('0[xX]' + _hex + '+\\b', Number.Hex), (_float + '\\s*(day|hr|min|sec|msec|usec)s?\\b', Number.Float), (_float + '\\b', Number.Float), ('(\\d+)\\b', Number.Integer), (_h + '(\\.' + _h + ')+', String)], 'operators': [('[!%*/+<=>~|&^-]', Operator), ('([-+=&|]{2}|[+=!><-]=)', Operator), ('(in|as|is|of)\\b', Operator.Word), ('\\??\\$', Operator)], 'punctuation': [('[{}()\\[\\],;.]', Punctuation), ('[?:]', Punctuation)], 'identifiers': [('([a-zA-Z_]\\w*)(::)', bygroups(Name, Punctuation)), ('[a-zA-Z_]\\w*', Name)], 'string': [('\\\\.', String.Escape), ('%-?[0-9]*(\\.[0-9]+)?[DTd-gsx]', String.Escape), ('"', String, '#pop'), ('.', String)], 'regex': [('\\\\.', String.Escape), ('/', String.Regex, '#pop'), ('.', String.Regex)]}
  }

  class PuppetLexer {
      + name = 'Puppet'
      + url = 'https://puppet.com/'
      + aliases = ['puppet']
      + filenames = ['*.pp']
      + version_added = '1.6'
      + tokens = {'root': [include('comments'), include('keywords'), include('names'), include('numbers'), include('operators'), include('strings'), ('[]{}:(),;[]', Punctuation), ('\\s+', Whitespace)], 'comments': [('(\\s*)(#.*)$', bygroups(Whitespace, Comment)), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline)], 'operators': [('(=>|\\?|<|>|=|\\+|-|/|\\*|~|!|\\|)', Operator), ('(in|and|or|not)\\b', Operator.Word)], 'names': [('[a-zA-Z_]\\w*', Name.Attribute), ('(\\$\\S+)(\\[)(\\S+)(\\])', bygroups(Name.Variable, Punctuation, String, Punctuation)), ('\\$\\S+', Name.Variable)], 'numbers': [('(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?j?', Number.Float), ('\\d+[eE][+-]?[0-9]+j?', Number.Float), ('0[0-7]+j?', Number.Oct), ('0[xX][a-fA-F0-9]+', Number.Hex), ('\\d+L', Number.Integer.Long), ('\\d+j?', Number.Integer)], 'keywords': [(words(('absent', 'alert', 'alias', 'audit', 'augeas', 'before', 'case', 'check', 'class', 'computer', 'configured', 'contained', 'create_resources', 'crit', 'cron', 'debug', 'default', 'define', 'defined', 'directory', 'else', 'elsif', 'emerg', 'err', 'exec', 'extlookup', 'fail', 'false', 'file', 'filebucket', 'fqdn_rand', 'generate', 'host', 'if', 'import', 'include', 'info', 'inherits', 'inline_template', 'installed', 'interface', 'k5login', 'latest', 'link', 'loglevel', 'macauthorization', 'mailalias', 'maillist', 'mcx', 'md5', 'mount', 'mounted', 'nagios_command', 'nagios_contact', 'nagios_contactgroup', 'nagios_host', 'nagios_hostdependency', 'nagios_hostescalation', 'nagios_hostextinfo', 'nagios_hostgroup', 'nagios_service', 'nagios_servicedependency', 'nagios_serviceescalation', 'nagios_serviceextinfo', 'nagios_servicegroup', 'nagios_timeperiod', 'node', 'noop', 'notice', 'notify', 'package', 'present', 'purged', 'realize', 'regsubst', 'resources', 'role', 'router', 'running', 'schedule', 'scheduled_task', 'search', 'selboolean', 'selmodule', 'service', 'sha1', 'shellquote', 'split', 'sprintf', 'ssh_authorized_key', 'sshkey', 'stage', 'stopped', 'subscribe', 'tag', 'tagged', 'template', 'tidy', 'true', 'undef', 'unmounted', 'user', 'versioncmp', 'vlan', 'warning', 'yumrepo', 'zfs', 'zone', 'zpool'), prefix='(?i)', suffix='\\b'), Keyword)], 'strings': [('"([^"])*"', String), ("'(\\\\'|[^'])*'", String)]}
  }

  class RslLexer {
      + name = 'RSL'
      + url = 'http://en.wikipedia.org/wiki/RAISE'
      + aliases = ['rsl']
      + filenames = ['*.rsl']
      + mimetypes = ['text/rsl']
      + version_added = '2.0'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [(words(('Bool', 'Char', 'Int', 'Nat', 'Real', 'Text', 'Unit', 'abs', 'all', 'always', 'any', 'as', 'axiom', 'card', 'case', 'channel', 'chaos', 'class', 'devt_relation', 'dom', 'elems', 'else', 'elif', 'end', 'exists', 'extend', 'false', 'for', 'hd', 'hide', 'if', 'in', 'is', 'inds', 'initialise', 'int', 'inter', 'isin', 'len', 'let', 'local', 'ltl_assertion', 'object', 'of', 'out', 'post', 'pre', 'read', 'real', 'rng', 'scheme', 'skip', 'stop', 'swap', 'then', 'theory', 'test_case', 'tl', 'transition_system', 'true', 'type', 'union', 'until', 'use', 'value', 'variable', 'while', 'with', 'write', '~isin', '-inflist', '-infset', '-list', '-set'), prefix='\\b', suffix='\\b'), Keyword), ('(variable|value)\\b', Keyword.Declaration), ('--.*?\\n', Comment), ('<:.*?:>', Comment), ('\\{!.*?!\\}', Comment), ('/\\*.*?\\*/', Comment), ('^([ \\t]*)([\\w]+)([ \\t]*)(:[^:])', bygroups(Whitespace, Name.Function, Whitespace, Name.Function)), ('(^[ \\t]*)([\\w]+)([ \\t]*)(\\([\\w\\s,]*\\))([ \\t]*)(is|as)', bygroups(Whitespace, Name.Function, Whitespace, Text, Whitespace, Keyword)), ('\\b[A-Z]\\w*\\b', Keyword.Type), ('(true|false)\\b', Keyword.Constant), ('".*"', String), ("\\'.\\'", String.Char), ('(><|->|-m->|/\\\\|<=|<<=|<\\.|\\|\\||\\|\\^\\||-~->|-~m->|\\\\/|>=|>>|\\.>|\\+\\+|-\\\\|<->|=>|:-|~=|\\*\\*|<<|>>=|\\+>|!!|\\|=\\||#)', Operator), ('[0-9]+\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-f]+', Number.Hex), ('[0-9]+', Number.Integer), ('\\s+', Whitespace), ('.', Text)]}
  --
      + analyse_text(text)
  }

  class MscgenLexer {
      + name = 'Mscgen'
      + url = 'http://www.mcternan.me.uk/mscgen/'
      + aliases = ['mscgen', 'msc']
      + filenames = ['*.msc']
      + version_added = '1.6'
      + tokens = {'root': [('msc\\b', Keyword.Type), ('(hscale|HSCALE|width|WIDTH|wordwraparcs|WORDWRAPARCS|arcgradient|ARCGRADIENT)\\b', Name.Property), ('(abox|ABOX|rbox|RBOX|box|BOX|note|NOTE)\\b', Operator.Word), ('(\\.|-|\\|){3}', Keyword), ('(?:-|=|\\.|:){2}|<<=>>|<->|<=>|<<>>|<:>|->|=>>|>>|=>|:>|-x|-X|<-|<<=|<<|<=|<:|x-|X-|=', Operator), ('\\*', Name.Builtin), (_var, Name.Variable), ('\\[', Punctuation, 'attrs'), ('\\{|\\}|,|;', Punctuation), include('comments')], 'attrs': [('\\]', Punctuation, '#pop'), (_var + '(\\s*)(=)(\\s*)' + _var, bygroups(Name.Attribute, Whitespace, Operator, Whitespace, String)), (',', Punctuation), include('comments')], 'comments': [('(?://|#).*?\\n', Comment.Single), ('/\\*(?:.|\\n)*?\\*/', Comment.Multiline), ('[ \\t\\r\\n]+', Whitespace)]}
  }

  class VGLLexer {
      + name = 'VGL'
      + url = 'http://www.thermoscientific.com/samplemanager'
      + aliases = ['vgl']
      + filenames = ['*.rpf']
      + version_added = '1.6'
      + flags = re.MULTILINE | re.DOTALL | re.IGNORECASE
      + tokens = {'root': [('\\{[^}]*\\}', Comment.Multiline), ('declare', Keyword.Constant), ('(if|then|else|endif|while|do|endwhile|and|or|prompt|object|create|on|line|with|global|routine|value|endroutine|constant|global|set|join|library|compile_option|file|exists|create|copy|delete|enable|windows|name|notprotected)(?! *[=<>.,()])', Keyword), ('(true|false|null|empty|error|locked)', Keyword.Constant), ('[~^*#!%&\\[\\]()<>|+=:;,./?-]', Operator), ('"[^"]*"', String), ('(\\.)([a-z_$][\\w$]*)', bygroups(Operator, Name.Attribute)), ('[0-9][0-9]*(\\.[0-9]+(e[+\\-]?[0-9]+)?)?', Number), ('[a-z_$][\\w$]*', Name), ('[\\r\\n]+', Whitespace), ('\\s+', Whitespace)]}
  }

  class AlloyLexer {
      + name = 'Alloy'
      + url = 'http://alloy.mit.edu'
      + aliases = ['alloy']
      + filenames = ['*.als']
      + mimetypes = ['text/x-alloy']
      + version_added = '2.0'
      + flags = re.MULTILINE | re.DOTALL
      + iden_rex = '[a-zA-Z_][\\w]*"*'
      + string_rex = '"\\b(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"'
      + text_tuple = ('[^\\S\\n]+', Whitespace)
      + tokens = {'sig': [('(extends)\\b', Keyword, '#pop'), (iden_rex, Name), text_tuple, (',', Punctuation), ('\\{', Operator, '#pop')], 'module': [text_tuple, (iden_rex, Name, '#pop')], 'fun': [text_tuple, ('\\{', Operator, '#pop'), (iden_rex, Name, '#pop')], 'fact': [include('fun'), (string_rex, String, '#pop')], 'root': [('--.*?$', Comment.Single), ('//.*?$', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline), text_tuple, ('(module|open)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'module'), ('(sig|enum)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'sig'), ('(iden|univ|none)\\b', Keyword.Constant), ('(int|Int)\\b', Keyword.Type), ('(var|this|abstract|extends|set|seq|one|lone|let)\\b', Keyword), ('(all|some|no|sum|disj|when|else)\\b', Keyword), ('(run|check|for|but|exactly|expect|as|steps)\\b', Keyword), ('(always|after|eventually|until|release)\\b', Keyword), ('(historically|before|once|since|triggered)\\b', Keyword), ('(and|or|implies|iff|in)\\b', Operator.Word), ('(fun|pred|assert)(\\s+)', bygroups(Keyword, Whitespace), 'fun'), ('(fact)(\\s+)', bygroups(Keyword, Whitespace), 'fact'), ('!|#|&&|\\+\\+|<<|>>|>=|<=>|<=|\\.\\.|\\.|->', Operator), ("[-+/*%=<>&!^|~{}\\[\\]().\\';]", Operator), (iden_rex, Name), ('[:,]', Punctuation), ('[0-9]+', Number.Integer), (string_rex, String), ('\\n', Whitespace)]}
  }

  class PanLexer {
      + name = 'Pan'
      + url = 'https://github.com/quattor/pan/'
      + aliases = ['pan']
      + filenames = ['*.pan']
      + version_added = '2.0'
      + tokens = {'root': [include('basic'), ('\\(', Keyword, 'paren'), ('\\{', Keyword, 'curly'), include('data')], 'basic': [(words(('if', 'for', 'with', 'else', 'type', 'bind', 'while', 'valid', 'final', 'prefix', 'unique', 'object', 'foreach', 'include', 'template', 'function', 'variable', 'structure', 'extensible', 'declaration'), prefix='\\b', suffix='\\b'), Keyword), (words(('file_contents', 'format', 'index', 'length', 'match', 'matches', 'replace', 'splice', 'split', 'substr', 'to_lowercase', 'to_uppercase', 'debug', 'error', 'traceback', 'deprecated', 'base64_decode', 'base64_encode', 'digest', 'escape', 'unescape', 'append', 'create', 'first', 'nlist', 'key', 'list', 'merge', 'next', 'prepend', 'is_boolean', 'is_defined', 'is_double', 'is_list', 'is_long', 'is_nlist', 'is_null', 'is_number', 'is_property', 'is_resource', 'is_string', 'to_boolean', 'to_double', 'to_long', 'to_string', 'clone', 'delete', 'exists', 'path_exists', 'if_exists', 'return', 'value'), prefix='\\b', suffix='\\b'), Name.Builtin), ('#.*', Comment), ('\\\\[\\w\\W]', String.Escape), ('(\\b\\w+)(\\s*)(=)', bygroups(Name.Variable, Whitespace, Operator)), ('[\\[\\]{}()=]+', Operator), ("<<\\s*(\\'?)\\\\?(\\w+)[\\w\\W]+?\\2", String), (';', Punctuation)], 'data': [('(?s)"(\\\\\\\\|\\\\[0-7]+|\\\\.|[^"\\\\])*"', String.Double), ("(?s)'(\\\\\\\\|\\\\[0-7]+|\\\\.|[^'\\\\])*'", String.Single), ('\\s+', Whitespace), ('[^=\\s\\[\\]{}()$"\\\'`\\\\;#]+', Text), ('\\d+(?= |\\Z)', Number)], 'curly': [('\\}', Keyword, '#pop'), (':-', Keyword), ('\\w+', Name.Variable), ('[^}:"\\\'`$]+', Punctuation), (':', Punctuation), include('root')], 'paren': [('\\)', Keyword, '#pop'), include('root')]}
  }

  class CrmshLexer {
      + name = 'Crmsh'
      + url = 'http://crmsh.github.io/'
      + aliases = ['crmsh', 'pcmk']
      + filenames = ['*.crmsh', '*.pcmk']
      + mimetypes = []
      + version_added = '2.1'
      + elem = words(('node', 'primitive', 'group', 'clone', 'ms', 'location', 'colocation', 'order', 'fencing_topology', 'rsc_ticket', 'rsc_template', 'property', 'rsc_defaults', 'op_defaults', 'acl_target', 'acl_group', 'user', 'role', 'tag'), suffix='(?![\\w#$-])')
      + sub = words(('params', 'meta', 'operations', 'op', 'rule', 'attributes', 'utilization'), suffix='(?![\\w#$-])')
      + acl = words(('read', 'write', 'deny'), suffix='(?![\\w#$-])')
      + bin_rel = words(('and', 'or'), suffix='(?![\\w#$-])')
      + un_ops = words(('defined', 'not_defined'), suffix='(?![\\w#$-])')
      + date_exp = words(('in_range', 'date', 'spec', 'in'), suffix='(?![\\w#$-])')
      + acl_mod = '(?:tag|ref|reference|attribute|type|xpath)'
      + bin_ops = '(?:lt|gt|lte|gte|eq|ne)'
      + val_qual = '(?:string|version|number)'
      + rsc_role_action = '(?:Master|Started|Slave|Stopped|start|promote|demote|stop)'
      + tokens = {'root': [('^(#.*)(\\n)?', bygroups(Comment, Whitespace)), ('([\\w#$-]+)(=)("(?:""|[^"])*"|\\S+)', bygroups(Name.Attribute, Punctuation, String)), ('(node)(\\s+)([\\w#$-]+)(:)', bygroups(Keyword, Whitespace, Name, Punctuation)), ('([+-]?([0-9]+|inf)):', Number), (elem, Keyword), (sub, Keyword), (acl, Keyword), (f'(?:{val_qual}:)?({bin_ops})(?![\\w#$-])', Operator.Word), (bin_rel, Operator.Word), (un_ops, Operator.Word), (date_exp, Operator.Word), ('#[a-z]+(?![\\w#$-])', Name.Builtin), (f'({acl_mod})(:)("(?:""|[^"])*"|\\S+)', bygroups(Keyword, Punctuation, Name)), (f'([\\w#$-]+)(?:(:)({rsc_role_action}))?(?![\\w#$-])', bygroups(Name, Punctuation, Operator.Word)), ('(\\\\(?=\\n)|[\\[\\](){}/:@])', Punctuation), ('\\s+|\\n', Whitespace)]}
  }

  class FlatlineLexer {
      + name = 'Flatline'
      + url = 'https://github.com/bigmlcom/flatline'
      + aliases = ['flatline']
      + filenames = []
      + mimetypes = ['text/x-flatline']
      + version_added = '2.2'
      + special_forms = ('let',)
      + builtins = ('!=', '*', '+', '-', '<', '<=', '=', '>', '>=', 'abs', 'acos', 'all', 'all-but', 'all-with-defaults', 'all-with-numeric-default', 'and', 'asin', 'atan', 'avg', 'avg-window', 'bin-center', 'bin-count', 'call', 'category-count', 'ceil', 'cond', 'cond-window', 'cons', 'cos', 'cosh', 'count', 'diff-window', 'div', 'ensure-value', 'ensure-weighted-value', 'epoch', 'epoch-day', 'epoch-fields', 'epoch-hour', 'epoch-millisecond', 'epoch-minute', 'epoch-month', 'epoch-second', 'epoch-weekday', 'epoch-year', 'exp', 'f', 'field', 'field-prop', 'fields', 'filter', 'first', 'floor', 'head', 'if', 'in', 'integer', 'language', 'length', 'levenshtein', 'linear-regression', 'list', 'ln', 'log', 'log10', 'map', 'matches', 'matches?', 'max', 'maximum', 'md5', 'mean', 'median', 'min', 'minimum', 'missing', 'missing-count', 'missing?', 'missing_count', 'mod', 'mode', 'normalize', 'not', 'nth', 'occurrences', 'or', 'percentile', 'percentile-label', 'population', 'population-fraction', 'pow', 'preferred', 'preferred?', 'quantile-label', 'rand', 'rand-int', 'random-value', 're-quote', 'real', 'replace', 'replace-first', 'rest', 'round', 'row-number', 'segment-label', 'sha1', 'sha256', 'sin', 'sinh', 'sqrt', 'square', 'standard-deviation', 'standard_deviation', 'str', 'subs', 'sum', 'sum-squares', 'sum-window', 'sum_squares', 'summary', 'summary-no', 'summary-str', 'tail', 'tan', 'tanh', 'to-degrees', 'to-radians', 'variance', 'vectorize', 'weighted-random-value', 'window', 'winnow', 'within-percentiles?', 'z-score')
      + valid_name = '(?!#)[\\w!$%*+<=>?/.#-]+'
      + tokens = {'root': [('[,]+', Text), ('\\s+', Whitespace), ('-?\\d+\\.\\d+', Number.Float), ('-?\\d+', Number.Integer), ('0x-?[a-f\\d]+', Number.Hex), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('\\\\(.|[a-z]+)', String.Char), ('_', String.Symbol), (words(special_forms, suffix=' '), Keyword), (words(builtins, suffix=' '), Name.Builtin), ('(?<=\\()' + valid_name, Name.Function), (valid_name, Name.Variable), ('(\\(|\\))', Punctuation)]}
  }

  class SnowballLexer {
      + name = 'Snowball'
      + url = 'https://snowballstem.org/'
      + aliases = ['snowball']
      + filenames = ['*.sbl']
      + version_added = '2.2'
      + tokens = {'root': [('len\\b', Name.Builtin), ('lenof\\b', Operator.Word), include('root1')], 'root1': [(f'[{_ws}]+', Whitespace), ('\\d+', Number.Integer), ("'", String.Single, 'string'), ('[()]', Punctuation), ('/\\*[\\w\\W]*?\\*/', Comment.Multiline), ('//.*', Comment.Single), ('[!*+\\-/<=>]=|[-=]>|<[+-]|[$*+\\-/<=>?\\[\\]]', Operator), (words(('as', 'get', 'hex', 'among', 'define', 'decimal', 'backwardmode'), suffix='\\b'), Keyword.Reserved), (words(('strings', 'booleans', 'integers', 'routines', 'externals', 'groupings'), suffix='\\b'), Keyword.Reserved, 'declaration'), (words(('do', 'or', 'and', 'for', 'hop', 'non', 'not', 'set', 'try', 'fail', 'goto', 'loop', 'next', 'test', 'true', 'false', 'unset', 'atmark', 'attach', 'delete', 'gopast', 'insert', 'repeat', 'sizeof', 'tomark', 'atleast', 'atlimit', 'reverse', 'setmark', 'tolimit', 'setlimit', 'backwards', 'substring'), suffix='\\b'), Operator.Word), (words(('size', 'limit', 'cursor', 'maxint', 'minint'), suffix='\\b'), Name.Builtin), (f'(stringdef\\b)([{_ws}]*)([^{_ws}]+)', bygroups(Keyword.Reserved, Whitespace, String.Escape)), (f'(stringescapes\\b)([{_ws}]*)(.)([{_ws}]*)(.)', _stringescapes), ('[A-Za-z]\\w*', Name)], 'declaration': [('\\)', Punctuation, '#pop'), (words(('len', 'lenof'), suffix='\\b'), Name, ('root1', 'declaration')), include('root1')], 'string': [("[^']*'", _string(True))], 'escape': [("[^']*'", _string(False))]}
  --
      - __init__()
      + get_tokens_unprocessed(text = None, context = None)
  }

  class DylanLexer {
      + name = 'Dylan'
      + url = 'http://www.opendylan.org/'
      + aliases = ['dylan']
      + filenames = ['*.dylan', '*.dyl', '*.intr']
      + mimetypes = ['text/x-dylan']
      + version_added = '0.7'
      + flags = re.IGNORECASE
      + builtins = {'subclass', 'abstract', 'block', 'concrete', 'constant', 'class', 'compiler-open', 'compiler-sideways', 'domain', 'dynamic', 'each-subclass', 'exception', 'exclude', 'function', 'generic', 'handler', 'inherited', 'inline', 'inline-only', 'instance', 'interface', 'import', 'keyword', 'library', 'macro', 'method', 'module', 'open', 'primary', 'required', 'sealed', 'sideways', 'singleton', 'slot', 'thread', 'variable', 'virtual'}
      + keywords = {'above', 'afterwards', 'begin', 'below', 'by', 'case', 'cleanup', 'create', 'define', 'else', 'elseif', 'end', 'export', 'finally', 'for', 'from', 'if', 'in', 'let', 'local', 'otherwise', 'rename', 'select', 'signal', 'then', 'to', 'unless', 'until', 'use', 'when', 'while'}
      + operators = {'~', '+', '-', '*', '|', '^', '=', '==', '~=', '~==', '<', '<=', '>', '>=', '&', '|'}
      + functions = {'abort', 'abs', 'add', 'add!', 'add-method', 'add-new', 'add-new!', 'all-superclasses', 'always', 'any?', 'applicable-method?', 'apply', 'aref', 'aref-setter', 'as', 'as-lowercase', 'as-lowercase!', 'as-uppercase', 'as-uppercase!', 'ash', 'backward-iteration-protocol', 'break', 'ceiling', 'ceiling/', 'cerror', 'check-type', 'choose', 'choose-by', 'complement', 'compose', 'concatenate', 'concatenate-as', 'condition-format-arguments', 'condition-format-string', 'conjoin', 'copy-sequence', 'curry', 'default-handler', 'dimension', 'dimensions', 'direct-subclasses', 'direct-superclasses', 'disjoin', 'do', 'do-handlers', 'element', 'element-setter', 'empty?', 'error', 'even?', 'every?', 'false-or', 'fill!', 'find-key', 'find-method', 'first', 'first-setter', 'floor', 'floor/', 'forward-iteration-protocol', 'function-arguments', 'function-return-values', 'function-specializers', 'gcd', 'generic-function-mandatory-keywords', 'generic-function-methods', 'head', 'head-setter', 'identity', 'initialize', 'instance?', 'integral?', 'intersection', 'key-sequence', 'key-test', 'last', 'last-setter', 'lcm', 'limited', 'list', 'logand', 'logbit?', 'logior', 'lognot', 'logxor', 'make', 'map', 'map-as', 'map-into', 'max', 'member?', 'merge-hash-codes', 'min', 'modulo', 'negative', 'negative?', 'next-method', 'object-class', 'object-hash', 'odd?', 'one-of', 'pair', 'pop', 'pop-last', 'positive?', 'push', 'push-last', 'range', 'rank', 'rcurry', 'reduce', 'reduce1', 'remainder', 'remove', 'remove!', 'remove-duplicates', 'remove-duplicates!', 'remove-key!', 'remove-method', 'replace-elements!', 'replace-subsequence!', 'restart-query', 'return-allowed?', 'return-description', 'return-query', 'reverse', 'reverse!', 'round', 'round/', 'row-major-index', 'second', 'second-setter', 'shallow-copy', 'signal', 'singleton', 'size', 'size-setter', 'slot-initialized?', 'sort', 'sort!', 'sorted-applicable-methods', 'subsequence-position', 'subtype?', 'table-protocol', 'tail', 'tail-setter', 'third', 'third-setter', 'truncate', 'truncate/', 'type-error-expected-type', 'type-error-value', 'type-for-copy', 'type-union', 'union', 'values', 'vector', 'zero?'}
      + valid_name = '\\\\?[\\w!&*<>|^$%@\\-+~?/=]+'
      + tokens = {'root': [('\\s+', Whitespace), ('//.*?\\n', Comment.Single), ('([a-z0-9-]+)(:)([ \\t]*)(.*(?:\\n[ \\t].+)*)', bygroups(Name.Attribute, Operator, Whitespace, String)), default('code')], 'code': [('\\s+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/\\*', Comment.Multiline, 'comment'), ('"', String, 'string'), ("'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-f0-9]{1,2}|[^\\\\\\'\\n])'", String.Char), ('#b[01]+', Number.Bin), ('#o[0-7]+', Number.Oct), ('[-+]?(\\d*\\.\\d+(e[-+]?\\d+)?|\\d+(\\.\\d*)?e[-+]?\\d+)', Number.Float), ('[-+]?\\d+', Number.Integer), ('#x[0-9a-f]+', Number.Hex), ('(\\?' + valid_name + ')(:)(token|name|variable|expression|body|case-body|\\*)', bygroups(Name.Tag, Operator, Name.Builtin)), ('(\\?)(:)(token|name|variable|expression|body|case-body|\\*)', bygroups(Name.Tag, Operator, Name.Builtin)), ('\\?' + valid_name, Name.Tag), ('(=>|::|#\\(|#\\[|##|\\?\\?|\\?=|\\?|[(){}\\[\\],.;])', Punctuation), (':=', Operator), ('#[tf]', Literal), ('#"', String.Symbol, 'keyword'), ('#[a-z0-9-]+', Keyword), (valid_name + ':', Keyword), ('<' + valid_name + '>', Name.Class), ('\\*' + valid_name + '\\*', Name.Variable.Global), ('\\$' + valid_name, Name.Constant), (valid_name, Name)], 'comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'keyword': [('"', String.Symbol, '#pop'), ('[^\\\\"]+', String.Symbol)], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-f0-9]{2,4}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('\\\\\\n', String), ('\\\\', String)]}
  --
      + get_tokens_unprocessed(text)
  }

  class DylanLidLexer {
      + name = 'DylanLID'
      + aliases = ['dylan-lid', 'lid']
      + filenames = ['*.lid', '*.hdp']
      + mimetypes = ['text/x-dylan-lid']
      + url = 'http://www.opendylan.org/'
      + version_added = '1.6'
      + flags = re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('(.*?)(:)([ \\t]*)(.*(?:\\n[ \\t].+)*)', bygroups(Name.Attribute, Operator, Whitespace, String))]}
  }

  class DylanConsoleLexer {
      + name = 'Dylan session'
      + aliases = ['dylan-console', 'dylan-repl']
      + filenames = ['*.dylan-console']
      + mimetypes = ['text/x-dylan-console']
      + url = 'http://www.opendylan.org/'
      + version_added = '1.6'
  --
      + get_tokens_unprocessed(text)
  }

  class ECLLexer {
      + name = 'ECL'
      + url = 'https://hpccsystems.com/training/documentation/ecl-language-reference/html'
      + aliases = ['ecl']
      + filenames = ['*.ecl']
      + mimetypes = ['application/x-ecl']
      + version_added = '1.5'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [include('whitespace'), include('statements')], 'whitespace': [('\\s+', Whitespace), ('\\/\\/.*', Comment.Single), ('/(\\\\\\n)?\\*(.|\\n)*?\\*(\\\\\\n)?/', Comment.Multiline)], 'statements': [include('types'), include('keywords'), include('functions'), include('hash'), ('"', String, 'string'), ("\\'", String, 'string'), ('(\\d+\\.\\d*|\\.\\d+|\\d+)e[+-]?\\d+[lu]*', Number.Float), ('(\\d+\\.\\d*|\\.\\d+|\\d+f)f?', Number.Float), ('0x[0-9a-f]+[lu]*', Number.Hex), ('0[0-7]+[lu]*', Number.Oct), ('\\d+[lu]*', Number.Integer), ('[~!%^&*+=|?:<>/-]+', Operator), ('[{}()\\[\\],.;]', Punctuation), ('[a-z_]\\w*', Name)], 'hash': [('^#.*$', Comment.Preproc)], 'types': [('(RECORD|END)\\D', Keyword.Declaration), ('((?:ASCII|BIG_ENDIAN|BOOLEAN|DATA|DECIMAL|EBCDIC|INTEGER|PATTERN|QSTRING|REAL|RECORD|RULE|SET OF|STRING|TOKEN|UDECIMAL|UNICODE|UNSIGNED|VARSTRING|VARUNICODE)\\d*)(\\s+)', bygroups(Keyword.Type, Whitespace))], 'keywords': [(words(('APPLY', 'ASSERT', 'BUILD', 'BUILDINDEX', 'EVALUATE', 'FAIL', 'KEYDIFF', 'KEYPATCH', 'LOADXML', 'NOTHOR', 'NOTIFY', 'OUTPUT', 'PARALLEL', 'SEQUENTIAL', 'SOAPCALL', 'CHECKPOINT', 'DEPRECATED', 'FAILCODE', 'FAILMESSAGE', 'FAILURE', 'GLOBAL', 'INDEPENDENT', 'ONWARNING', 'PERSIST', 'PRIORITY', 'RECOVERY', 'STORED', 'SUCCESS', 'WAIT', 'WHEN'), suffix='\\b'), Keyword.Reserved), (words(('ALL', 'AND', 'ANY', 'AS', 'ATMOST', 'BEFORE', 'BEGINC++', 'BEST', 'BETWEEN', 'CASE', 'CONST', 'COUNTER', 'CSV', 'DESCEND', 'ENCRYPT', 'ENDC++', 'ENDMACRO', 'EXCEPT', 'EXCLUSIVE', 'EXPIRE', 'EXPORT', 'EXTEND', 'FALSE', 'FEW', 'FIRST', 'FLAT', 'FULL', 'FUNCTION', 'GROUP', 'HEADER', 'HEADING', 'HOLE', 'IFBLOCK', 'IMPORT', 'IN', 'JOINED', 'KEEP', 'KEYED', 'LAST', 'LEFT', 'LIMIT', 'LOAD', 'LOCAL', 'LOCALE', 'LOOKUP', 'MACRO', 'MANY', 'MAXCOUNT', 'MAXLENGTH', 'MIN SKEW', 'MODULE', 'INTERFACE', 'NAMED', 'NOCASE', 'NOROOT', 'NOSCAN', 'NOSORT', 'NOT', 'OF', 'ONLY', 'OPT', 'OR', 'OUTER', 'OVERWRITE', 'PACKED', 'PARTITION', 'PENALTY', 'PHYSICALLENGTH', 'PIPE', 'QUOTE', 'RELATIONSHIP', 'REPEAT', 'RETURN', 'RIGHT', 'SCAN', 'SELF', 'SEPARATOR', 'SERVICE', 'SHARED', 'SKEW', 'SKIP', 'SQL', 'STORE', 'TERMINATOR', 'THOR', 'THRESHOLD', 'TOKEN', 'TRANSFORM', 'TRIM', 'TRUE', 'TYPE', 'UNICODEORDER', 'UNSORTED', 'VALIDATE', 'VIRTUAL', 'WHOLE', 'WILD', 'WITHIN', 'XML', 'XPATH', '__COMPRESSED__'), suffix='\\b'), Keyword.Reserved)], 'functions': [(words(('ABS', 'ACOS', 'ALLNODES', 'ASCII', 'ASIN', 'ASSTRING', 'ATAN', 'ATAN2', 'AVE', 'CASE', 'CHOOSE', 'CHOOSEN', 'CHOOSESETS', 'CLUSTERSIZE', 'COMBINE', 'CORRELATION', 'COS', 'COSH', 'COUNT', 'COVARIANCE', 'CRON', 'DATASET', 'DEDUP', 'DEFINE', 'DENORMALIZE', 'DISTRIBUTE', 'DISTRIBUTED', 'DISTRIBUTION', 'EBCDIC', 'ENTH', 'ERROR', 'EVALUATE', 'EVENT', 'EVENTEXTRA', 'EVENTNAME', 'EXISTS', 'EXP', 'FAILCODE', 'FAILMESSAGE', 'FETCH', 'FROMUNICODE', 'GETISVALID', 'GLOBAL', 'GRAPH', 'GROUP', 'HASH', 'HASH32', 'HASH64', 'HASHCRC', 'HASHMD5', 'HAVING', 'IF', 'INDEX', 'INTFORMAT', 'ISVALID', 'ITERATE', 'JOIN', 'KEYUNICODE', 'LENGTH', 'LIBRARY', 'LIMIT', 'LN', 'LOCAL', 'LOG', 'LOOP', 'MAP', 'MATCHED', 'MATCHLENGTH', 'MATCHPOSITION', 'MATCHTEXT', 'MATCHUNICODE', 'MAX', 'MERGE', 'MERGEJOIN', 'MIN', 'NOLOCAL', 'NONEMPTY', 'NORMALIZE', 'PARSE', 'PIPE', 'POWER', 'PRELOAD', 'PROCESS', 'PROJECT', 'PULL', 'RANDOM', 'RANGE', 'RANK', 'RANKED', 'REALFORMAT', 'RECORDOF', 'REGEXFIND', 'REGEXREPLACE', 'REGROUP', 'REJECTED', 'ROLLUP', 'ROUND', 'ROUNDUP', 'ROW', 'ROWDIFF', 'SAMPLE', 'SET', 'SIN', 'SINH', 'SIZEOF', 'SOAPCALL', 'SORT', 'SORTED', 'SQRT', 'STEPPED', 'STORED', 'SUM', 'TABLE', 'TAN', 'TANH', 'THISNODE', 'TOPN', 'TOUNICODE', 'TRANSFER', 'TRIM', 'TRUNCATE', 'TYPEOF', 'UNGROUP', 'UNICODEORDER', 'VARIANCE', 'WHICH', 'WORKUNIT', 'XMLDECODE', 'XMLENCODE', 'XMLTEXT', 'XMLUNICODE'), suffix='\\b'), Name.Function)], 'string': [('"', String, '#pop'), ("\\'", String, '#pop'), ('[^"\\\']+', String)]}
  --
      + analyse_text(text)
  }

  class EiffelLexer {
      + name = 'Eiffel'
      + url = 'https://www.eiffel.com'
      + aliases = ['eiffel']
      + filenames = ['*.e']
      + mimetypes = ['text/x-eiffel']
      + version_added = '2.0'
      + tokens = {'root': [('[^\\S\\n]+', Whitespace), ('--.*?$', Comment.Single), ('[^\\S\\n]+', Whitespace), ('(?i)(true|false|void|current|result|precursor)\\b', Keyword.Constant), ('(?i)(not|xor|implies|or)\\b', Operator.Word), ('(?i)(and)(?:(\\s+)(then))?\\b', bygroups(Operator.Word, Whitespace, Operator.Word)), ('(?i)(or)(?:(\\s+)(else))?\\b', bygroups(Operator.Word, Whitespace, Operator.Word)), (words(('across', 'agent', 'alias', 'all', 'as', 'assign', 'attached', 'attribute', 'check', 'class', 'convert', 'create', 'debug', 'deferred', 'detachable', 'do', 'else', 'elseif', 'end', 'ensure', 'expanded', 'export', 'external', 'feature', 'from', 'frozen', 'if', 'inherit', 'inspect', 'invariant', 'like', 'local', 'loop', 'none', 'note', 'obsolete', 'old', 'once', 'only', 'redefine', 'rename', 'require', 'rescue', 'retry', 'select', 'separate', 'then', 'undefine', 'until', 'variant', 'when'), prefix='(?i)\\b', suffix='\\b'), Keyword.Reserved), ('"\\[([^\\]%]|%(.|\\n)|\\][^"])*?\\]"', String), ('"([^"%\\n]|%.)*?"', String), include('numbers'), ("'([^'%]|%'|%%)'", String.Char), ('(//|\\\\\\\\|>=|<=|:=|/=|~|/~|[\\\\?!#%&@|+/\\-=>*$<^\\[\\]])', Operator), ('([{}():;,.])', Punctuation), ('([a-z]\\w*)|([A-Z][A-Z0-9_]*[a-z]\\w*)', Name), ('([A-Z][A-Z0-9_]*)', Name.Class), ('\\n+', Whitespace)], 'numbers': [('0[xX][a-fA-F0-9]+', Number.Hex), ('0[bB][01]+', Number.Bin), ('0[cC][0-7]+', Number.Oct), ('([0-9]+\\.[0-9]*)|([0-9]*\\.[0-9]+)', Number.Float), ('[0-9]+', Number.Integer)]}
  }

  class ElmLexer {
      + name = 'Elm'
      + url = 'https://elm-lang.org/'
      + aliases = ['elm']
      + filenames = ['*.elm']
      + mimetypes = ['text/x-elm']
      + version_added = '2.1'
      + validName = "[a-z_][a-zA-Z0-9_\\']*"
      + specialName = '^main '
      + builtinOps = ('~', '||', '|>', '|', '`', '^', '\\', "'", '>>', '>=', '>', '==', '=', '<~', '<|', '<=', '<<', '<-', '<', '::', ':', '/=', '//', '/', '..', '.', '->', '-', '++', '+', '*', '&&', '%')
      + reservedWords = words(('alias', 'as', 'case', 'else', 'if', 'import', 'in', 'let', 'module', 'of', 'port', 'then', 'type', 'where'), suffix='\\b')
      + tokens = {'root': [('\\{-', Comment.Multiline, 'comment'), ('--.*', Comment.Single), ('\\s+', Whitespace), ('"', String, 'doublequote'), ('^(\\s*)(module)(\\s*)', bygroups(Whitespace, Keyword.Namespace, Whitespace), 'imports'), ('^(\\s*)(import)(\\s*)', bygroups(Whitespace, Keyword.Namespace, Whitespace), 'imports'), ('\\[glsl\\|.*', Name.Entity, 'shader'), (reservedWords, Keyword.Reserved), ('[A-Z][a-zA-Z0-9_]*', Keyword.Type), (specialName, Keyword.Reserved), (words(builtinOps, prefix='\\(', suffix='\\)'), Name.Function), (words(builtinOps), Name.Function), include('numbers'), (validName, Name.Variable), ('[,()\\[\\]{}]', Punctuation)], 'comment': [('-(?!\\})', Comment.Multiline), ('\\{-', Comment.Multiline, 'comment'), ('[^-}]', Comment.Multiline), ('-\\}', Comment.Multiline, '#pop')], 'doublequote': [('\\\\u[0-9a-fA-F]{4}', String.Escape), ('\\\\[nrfvb\\\\"]', String.Escape), ('[^"]', String), ('"', String, '#pop')], 'imports': [('\\w+(\\.\\w+)*', Name.Class, '#pop')], 'numbers': [('_?\\d+\\.(?=\\d+)', Number.Float), ('_?\\d+', Number.Integer)], 'shader': [('\\|(?!\\])', Name.Entity), ('\\|\\]', Name.Entity, '#pop'), ('(.*)(\\n)', bygroups(Name.Entity, Whitespace))]}
  }

  class ElpiLexer {
      + name = 'Elpi'
      + url = 'http://github.com/LPCIC/elpi'
      + aliases = ['elpi']
      + filenames = ['*.elpi']
      + mimetypes = ['text/x-elpi']
      + version_added = '2.11'
      + lcase_re = '[a-z]'
      + ucase_re = '[A-Z]'
      + digit_re = '[0-9]'
      + schar2_re = "([+*^?/<>`'@#~=&!])"
      + schar_re = f'({schar2_re}|-|\\$|_)'
      + idchar_re = f'({lcase_re}|{ucase_re}|{digit_re}|{schar_re})'
      + idcharstarns_re = f'({idchar_re}*(\\.({lcase_re}|{ucase_re}){idchar_re}*)*)'
      + symbchar_re = f'({lcase_re}|{ucase_re}|{digit_re}|{schar_re}|:)'
      + constant_re = f'({ucase_re}{idchar_re}*|{lcase_re}{idcharstarns_re}|{schar2_re}{symbchar_re}*|_{idchar_re}+)'
      + symbol_re = '(,|<=>|->|:-|;|\\?-|->|&|=>|\\bas\\b|\\buvar\\b|<|=<|=|==|>=|>|\\bi<|\\bi=<|\\bi>=|\\bi>|\\bis\\b|\\br<|\\br=<|\\br>=|\\br>|\\bs<|\\bs=<|\\bs>=|\\bs>|@|::|\\[\\]|`->|`:|`:=|\\^|-|\\+|\\bi-|\\bi\\+|r-|r\\+|/|\\*|\\bdiv\\b|\\bi\\*|\\bmod\\b|\\br\\*|~|\\bi~|\\br~)'
      + escape_re = f'\\(({constant_re}|{symbol_re})\\)'
      + const_sym_re = f'({constant_re}|{symbol_re}|{escape_re})'
      + tokens = {'root': [include('elpi')], 'elpi': [include('_elpi-comment'), ('(:before|:after|:if|:name)(\\s*)(\\")', bygroups(Keyword.Mode, Text.Whitespace, String.Double), 'elpi-string'), ('(:index)(\\s*)(\\()', bygroups(Keyword.Mode, Text.Whitespace, Punctuation), 'elpi-indexing-expr'), (f'\\b(external pred|pred)(\\s+)({const_sym_re})', bygroups(Keyword.Declaration, Text.Whitespace, Name.Function), 'elpi-pred-item'), (f'\\b(external type|type)(\\s+)(({const_sym_re}(,\\s*)?)+)', bygroups(Keyword.Declaration, Text.Whitespace, Name.Function), 'elpi-type'), (f'\\b(kind)(\\s+)(({const_sym_re}|,)+)', bygroups(Keyword.Declaration, Text.Whitespace, Name.Function), 'elpi-type'), (f'\\b(typeabbrev)(\\s+)({const_sym_re})', bygroups(Keyword.Declaration, Text.Whitespace, Name.Function), 'elpi-type'), ('\\b(typeabbrev)(\\s+)(\\([^)]+\\))', bygroups(Keyword.Declaration, Text.Whitespace, Name.Function), 'elpi-type'), ('\\b(accumulate)(\\s+)(\\")', bygroups(Keyword.Declaration, Text.Whitespace, String.Double), 'elpi-string'), (f'\\b(accumulate|namespace|local)(\\s+)({constant_re})', bygroups(Keyword.Declaration, Text.Whitespace, Text)), (f'\\b(shorten)(\\s+)({constant_re}\\.)', bygroups(Keyword.Declaration, Text.Whitespace, Text)), ('\\b(pi|sigma)(\\s+)([a-zA-Z][A-Za-z0-9_ ]*)(\\\\)', bygroups(Keyword.Declaration, Text.Whitespace, Name.Variable, Text)), (f'\\b(constraint)(\\s+)(({const_sym_re}(\\s+)?)+)', bygroups(Keyword.Declaration, Text.Whitespace, Name.Function), 'elpi-chr-rule-start'), (f'(?=[A-Z_]){constant_re}', Name.Variable), (f'(?=[a-z_])({constant_re}|_)\\\\', Name.Variable), ('_', Name.Variable), (f'({symbol_re}|!|=>|;)', Keyword.Declaration), (constant_re, Text), ('\\[|\\]|\\||=>', Keyword.Declaration), ('"', String.Double, 'elpi-string'), ('`', String.Double, 'elpi-btick'), ("\\'", String.Double, 'elpi-tick'), ('\\{\\{', Punctuation, 'elpi-quote'), ('\\{[^\\{]', Text, 'elpi-spill'), ('\\(', Punctuation, 'elpi-in-parens'), ('\\d[\\d_]*', Number.Integer), ('-?\\d[\\d_]*(.[\\d_]*)?([eE][+\\-]?\\d[\\d_]*)', Number.Float), ('[\\+\\*\\-/\\^\\.]', Operator)], '_elpi-comment': [('%[^\\n]*\\n', Comment), ('/(?:\\\\\\n)?[*](?:[^*]|[*](?!(?:\\\\\\n)?/))*[*](?:\\\\\\n)?/', Comment), ('\\s+', Text.Whitespace)], 'elpi-indexing-expr': [('[0-9 _]+', Number.Integer), ('\\)', Punctuation, '#pop')], 'elpi-type': [('(ctype\\s+)(\\")', bygroups(Keyword.Type, String.Double), 'elpi-string'), ('->', Keyword.Type), (constant_re, Keyword.Type), ('\\(|\\)', Keyword.Type), ('\\.', Text, '#pop'), include('_elpi-comment')], 'elpi-chr-rule-start': [('\\{', Punctuation, 'elpi-chr-rule'), include('_elpi-comment')], 'elpi-chr-rule': [('\\brule\\b', Keyword.Declaration), ('\\\\', Keyword.Declaration), ('\\}', Punctuation, '#pop:2'), include('elpi')], 'elpi-pred-item': [('[io]:', Keyword.Mode, 'elpi-ctype'), ('\\.', Text, '#pop'), include('_elpi-comment')], 'elpi-ctype': [('(ctype\\s+)(\\")', bygroups(Keyword.Type, String.Double), 'elpi-string'), ('->', Keyword.Type), (constant_re, Keyword.Type), ('\\(|\\)', Keyword.Type), (',', Text, '#pop'), ('\\.', Text, '#pop:2'), include('_elpi-comment')], 'elpi-btick': [('[^` ]+', String.Double), ('`', String.Double, '#pop')], 'elpi-tick': [("[^\\' ]+", String.Double), ("\\'", String.Double, '#pop')], 'elpi-string': [('[^\\"]+', String.Double), ('"', String.Double, '#pop')], 'elpi-quote': [('\\}\\}', Punctuation, '#pop'), ('\\s+', Text.Whitespace), ('(lp:)(\\{\\{)', bygroups(Number, Punctuation), 'elpi-quote-exit'), (f'(lp:)((?=[A-Z_]){constant_re})', bygroups(Number, Name.Variable)), ('((?!lp:|\\}\\}).)+', using(CoqLexer))], 'elpi-quote-exit': [include('elpi'), ('\\}\\}', Punctuation, '#pop')], 'elpi-spill': [('\\{[^\\{]', Text, '#push'), ('\\}[^\\}]', Text, '#pop'), include('elpi')], 'elpi-in-parens': [('\\(', Punctuation, '#push'), include('elpi'), ('\\)', Punctuation, '#pop')]}
  }

  class EmailHeaderLexer {
      + tokens = {'root': [('^(?:[A-WYZ]|X400)[\\w\\-]*:', Name.Tag, 'header'), ('^(X-(?:\\w[\\w\\-]*:))([\\s\\S]*?\\n)(?![ \\t])', get_x_header_tokens)], 'header': [('\\n[ \\t]', Text.Whitespace), ('\\n(?![ \\t])', Text.Whitespace, '#pop'), ('\\bE?SMTPS?\\b', Keyword), ('\\b(?:HE|EH)LO\\b', Keyword), ('[\\w\\.\\-\\+=]+@[\\w\\.\\-]+', Name.Label), ('<[\\w\\.\\-\\+=]+@[\\w\\.\\-]+>', Name.Label), ('\\b(\\w[\\w\\.-]*\\.[\\w\\.-]*\\w[a-zA-Z]+)\\b', Name.Function), ('(?<=\\b)(?:(?:25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)(?=\\b)', Number.Integer), ('(?<=\\b)([0-9a-fA-F]{1,4}:){1,7}:(?!\\b)', Number.Hex), ('(?<=\\b):((:[0-9a-fA-F]{1,4}){1,7}|:)(?=\\b)', Number.Hex), ('(?<=\\b)([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}(?=\\b)', Number.Hex), ('(?<=\\b)([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}(?=\\b)', Number.Hex), ('(?<=\\b)[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})(?=\\b)', Number.Hex), ('(?<=\\b)fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}(?=\\b)', Number.Hex), ('(?<=\\b)([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}(?=\\b)', Number.Hex), ('(?<=\\b)([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}(?=\\b)', Number.Hex), ('(?<=\\b)([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}(?=\\b)', Number.Hex), ('(?<=\\b)([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}(?=\\b)', Number.Hex), ('(?<=\\b)::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])(?=\\b)', Number.Hex), ('(?<=\\b)([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])(?=\\b)', Number.Hex), ('(?:(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?(0[1-9]|[1-2]?[0-9]|3[01])\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+(19[0-9]{2}|[2-9][0-9]{3})\\s+(2[0-3]|[0-1][0-9]):([0-5][0-9])(?::(60|[0-5][0-9]))?(?:\\.\\d{1,5})?\\s+([-\\+][0-9]{2}[0-5][0-9]|\\(?(?:UTC?|GMT|(?:E|C|M|P)(?:ST|ET|DT)|[A-IK-Z])\\)?)', Name.Decorator), ('(=\\?)([\\w-]+)(\\?)([BbQq])(\\?)([\\[\\w!\\"#$%&\\\'()*+,-./:;<=>@[\\\\\\]^_`{|}~]+)(\\?=)', bygroups(String.Affix, Name.Constant, String.Affix, Keyword.Constant, String.Affix, Number.Hex, String.Affix)), ('[\\s]+', Text.Whitespace), ('[\\S]', Text)]}
  --
      - __init__()
      + get_x_header_tokens(match)
  }

  class EmailLexer {
      + name = 'E-mail'
      + aliases = ['email', 'eml']
      + filenames = ['*.eml']
      + mimetypes = ['message/rfc822']
      + url = 'https://en.wikipedia.org/wiki/Email#Message_format'
      + version_added = '2.5'
  --
      - __init__()
  }

  class ErlangLexer {
      + name = 'Erlang'
      + url = 'https://www.erlang.org/'
      + aliases = ['erlang']
      + filenames = ['*.erl', '*.hrl', '*.es', '*.escript']
      + mimetypes = ['text/x-erlang']
      + version_added = '0.9'
      + keywords = ('after', 'begin', 'case', 'catch', 'cond', 'end', 'fun', 'if', 'let', 'of', 'query', 'receive', 'try', 'when')
      + builtins = ('abs', 'append_element', 'apply', 'atom_to_list', 'binary_to_list', 'bitstring_to_list', 'binary_to_term', 'bit_size', 'bump_reductions', 'byte_size', 'cancel_timer', 'check_process_code', 'delete_module', 'demonitor', 'disconnect_node', 'display', 'element', 'erase', 'exit', 'float', 'float_to_list', 'fun_info', 'fun_to_list', 'function_exported', 'garbage_collect', 'get', 'get_keys', 'group_leader', 'hash', 'hd', 'integer_to_list', 'iolist_to_binary', 'iolist_size', 'is_atom', 'is_binary', 'is_bitstring', 'is_boolean', 'is_builtin', 'is_float', 'is_function', 'is_integer', 'is_list', 'is_number', 'is_pid', 'is_port', 'is_process_alive', 'is_record', 'is_reference', 'is_tuple', 'length', 'link', 'list_to_atom', 'list_to_binary', 'list_to_bitstring', 'list_to_existing_atom', 'list_to_float', 'list_to_integer', 'list_to_pid', 'list_to_tuple', 'load_module', 'localtime_to_universaltime', 'make_tuple', 'md5', 'md5_final', 'md5_update', 'memory', 'module_loaded', 'monitor', 'monitor_node', 'node', 'nodes', 'open_port', 'phash', 'phash2', 'pid_to_list', 'port_close', 'port_command', 'port_connect', 'port_control', 'port_call', 'port_info', 'port_to_list', 'process_display', 'process_flag', 'process_info', 'purge_module', 'put', 'read_timer', 'ref_to_list', 'register', 'resume_process', 'round', 'send', 'send_after', 'send_nosuspend', 'set_cookie', 'setelement', 'size', 'spawn', 'spawn_link', 'spawn_monitor', 'spawn_opt', 'split_binary', 'start_timer', 'statistics', 'suspend_process', 'system_flag', 'system_info', 'system_monitor', 'system_profile', 'term_to_binary', 'tl', 'trace', 'trace_delivered', 'trace_info', 'trace_pattern', 'trunc', 'tuple_size', 'tuple_to_list', 'universaltime_to_localtime', 'unlink', 'unregister', 'whereis')
      + operators = '(\\+\\+?|--?|\\*|/|<|>|/=|=:=|=/=|=<|>=|==?|<-|!|\\?)'
      + word_operators = ('and', 'andalso', 'band', 'bnot', 'bor', 'bsl', 'bsr', 'bxor', 'div', 'not', 'or', 'orelse', 'rem', 'xor')
      + atom_re = "(?:[a-z]\\w*|'[^\\n']*[^\\\\]')"
      + variable_re = '(?:[A-Z_]\\w*)'
      + esc_char_re = '[bdefnrstv\\\'"\\\\]'
      + esc_octal_re = '[0-7][0-7]?[0-7]?'
      + esc_hex_re = '(?:x[0-9a-fA-F]{2}|x\\{[0-9a-fA-F]+\\})'
      + esc_ctrl_re = '\\^[a-zA-Z]'
      + escape_re = '(?:\\\\(?:' + esc_char_re + '|' + esc_octal_re + '|' + esc_hex_re + '|' + esc_ctrl_re + '))'
      + macro_re = '(?:' + variable_re + '|' + atom_re + ')'
      + base_re = '(?:[2-9]|[12][0-9]|3[0-6])'
      + tokens = {'root': [('\\s+', Whitespace), ('(%.*)(\\n)', bygroups(Comment, Whitespace)), (words(keywords, suffix='\\b'), Keyword), (words(builtins, suffix='\\b'), Name.Builtin), (words(word_operators, suffix='\\b'), Operator.Word), ('^-', Punctuation, 'directive'), (operators, Operator), ('"', String, 'string'), ('<<', Name.Label), ('>>', Name.Label), ('(' + atom_re + ')(:)', bygroups(Name.Namespace, Punctuation)), ('(?:^|(?<=:))(' + atom_re + ')(\\s*)(\\()', bygroups(Name.Function, Whitespace, Punctuation)), ('[+-]?' + base_re + '#[0-9a-zA-Z]+', Number.Integer), ('[+-]?\\d+', Number.Integer), ('[+-]?\\d+.\\d+', Number.Float), ('[]\\[:_@\\".{}()|;,]', Punctuation), (variable_re, Name.Variable), (atom_re, Name), ('\\?' + macro_re, Name.Constant), ('\\$(?:' + escape_re + '|\\\\[ %]|[^\\\\])', String.Char), ('#' + atom_re + '(:?\\.' + atom_re + ')?', Name.Label), ('\\A#!.+\\n', Comment.Hashbang), ('#\\{', Punctuation, 'map_key')], 'string': [(escape_re, String.Escape), ('"', String, '#pop'), ('~[0-9.*]*[~#+BPWXb-ginpswx]', String.Interpol), ('[^"\\\\~]+', String), ('~', String)], 'directive': [('(define)(\\s*)(\\()(' + macro_re + ')', bygroups(Name.Entity, Whitespace, Punctuation, Name.Constant), '#pop'), ('(record)(\\s*)(\\()(' + macro_re + ')', bygroups(Name.Entity, Whitespace, Punctuation, Name.Label), '#pop'), (atom_re, Name.Entity, '#pop')], 'map_key': [include('root'), ('=>', Punctuation, 'map_val'), (':=', Punctuation, 'map_val'), ('\\}', Punctuation, '#pop')], 'map_val': [include('root'), (',', Punctuation, '#pop'), ('(?=\\})', Punctuation, '#pop')]}
  }

  class ErlangShellLexer {
      + name = 'Erlang erl session'
      + aliases = ['erl']
      + filenames = ['*.erl-sh']
      + mimetypes = ['text/x-erl-shellsession']
      + url = 'https://www.erlang.org/'
      + version_added = '1.1'
  --
      + get_tokens_unprocessed(text)
  }

  class ElixirLexer {
      + name = 'Elixir'
      + url = 'https://elixir-lang.org'
      + aliases = ['elixir', 'ex', 'exs']
      + filenames = ['*.ex', '*.eex', '*.exs', '*.leex']
      + mimetypes = ['text/x-elixir']
      + version_added = '1.5'
      + KEYWORD = ('fn', 'do', 'end', 'after', 'else', 'rescue', 'catch')
      + KEYWORD_OPERATOR = ('not', 'and', 'or', 'when', 'in')
      + BUILTIN = ('case', 'cond', 'for', 'if', 'unless', 'try', 'receive', 'raise', 'quote', 'unquote', 'unquote_splicing', 'throw', 'super')
      + BUILTIN_DECLARATION = ('def', 'defp', 'defmodule', 'defprotocol', 'defmacro', 'defmacrop', 'defdelegate', 'defexception', 'defstruct', 'defimpl', 'defcallback')
      + BUILTIN_NAMESPACE = ('import', 'require', 'use', 'alias')
      + CONSTANT = ('nil', 'true', 'false')
      + PSEUDO_VAR = ('_', '__MODULE__', '__DIR__', '__ENV__', '__CALLER__')
      + OPERATORS3 = ('<<<', '>>>', '|||', '&&&', '^^^', '~~~', '===', '!==', '~>>', '<~>', '|~>', '<|>')
      + OPERATORS2 = ('==', '!=', '<=', '>=', '&&', '||', '<>', '++', '--', '|>', '=~', '->', '<-', '|', '.', '=', '~>', '<~')
      + OPERATORS1 = ('<', '>', '+', '-', '*', '/', '!', '^', '&')
      + PUNCTUATION = ('\\\\', '<<', '>>', '=>', '(', ')', ':', ';', ',', '[', ']')
      + op3_re = '|'.join((re.escape(s) for s in OPERATORS3))
      + op2_re = '|'.join((re.escape(s) for s in OPERATORS2))
      + op1_re = '|'.join((re.escape(s) for s in OPERATORS1))
      + ops_re = f'(?:{op3_re}|{op2_re}|{op1_re})'
      + punctuation_re = '|'.join((re.escape(s) for s in PUNCTUATION))
      + alnum = '\\w'
      + name_re = f'(?:\\.\\.\\.|[a-z_]{alnum}*[!?]?)'
      + modname_re = f'[A-Z]{alnum}*(?:\\.[A-Z]{alnum}*)*'
      + complex_name_re = f'(?:{name_re}|{modname_re}|{ops_re})'
      + special_atom_re = '(?:\\.\\.\\.|<<>>|%\\{\\}|%|\\{\\})'
      + long_hex_char_re = '(\\\\x\\{)([\\da-fA-F]+)(\\})'
      + hex_char_re = '(\\\\x[\\da-fA-F]{1,2})'
      + escape_char_re = '(\\\\[abdefnrstv])'
      + tokens = {'root': [('\\s+', Whitespace), ('#.*$', Comment.Single), ('(\\?)' + long_hex_char_re, bygroups(String.Char, String.Escape, Number.Hex, String.Escape)), ('(\\?)' + hex_char_re, bygroups(String.Char, String.Escape)), ('(\\?)' + escape_char_re, bygroups(String.Char, String.Escape)), ('\\?\\\\?.', String.Char), (':::', String.Symbol), ('::', Operator), (':' + special_atom_re, String.Symbol), (':' + complex_name_re, String.Symbol), (':"', String.Symbol, 'string_double_atom'), (":'", String.Symbol, 'string_single_atom'), (f'({special_atom_re}|{complex_name_re})(:)(?=\\s|\\n)', bygroups(String.Symbol, Punctuation)), ('@' + name_re, Name.Attribute), (name_re, Name), (f'(%?)({modname_re})', bygroups(Punctuation, Name.Class)), (op3_re, Operator), (op2_re, Operator), (punctuation_re, Punctuation), ('&\\d', Name.Entity), (op1_re, Operator), ('0b[01]+', Number.Bin), ('0o[0-7]+', Number.Oct), ('0x[\\da-fA-F]+', Number.Hex), ('\\d(_?\\d)*\\.\\d(_?\\d)*([eE][-+]?\\d(_?\\d)*)?', Number.Float), ('\\d(_?\\d)*', Number.Integer), ('(""")(\\s*)', bygroups(String.Heredoc, Whitespace), 'heredoc_double'), ("(''')(\\s*)$", bygroups(String.Heredoc, Whitespace), 'heredoc_single'), ('"', String.Double, 'string_double'), ("'", String.Single, 'string_single'), include('sigils'), ('%\\{', Punctuation, 'map_key'), ('\\{', Punctuation, 'tuple')], 'heredoc_double': [('^(\\s*)(""")', bygroups(Whitespace, String.Heredoc), '#pop'), include('heredoc_interpol')], 'heredoc_single': [("^\\s*'''", String.Heredoc, '#pop'), include('heredoc_interpol')], 'heredoc_interpol': [('[^#\\\\\\n]+', String.Heredoc), include('escapes'), ('\\\\.', String.Heredoc), ('\\n+', String.Heredoc), include('interpol')], 'heredoc_no_interpol': [('[^\\\\\\n]+', String.Heredoc), ('\\\\.', String.Heredoc), ('\\n+', Whitespace)], 'escapes': [(long_hex_char_re, bygroups(String.Escape, Number.Hex, String.Escape)), (hex_char_re, String.Escape), (escape_char_re, String.Escape)], 'interpol': [('#\\{', String.Interpol, 'interpol_string')], 'interpol_string': [('\\}', String.Interpol, '#pop'), include('root')], 'map_key': [include('root'), (':', Punctuation, 'map_val'), ('=>', Punctuation, 'map_val'), ('\\}', Punctuation, '#pop')], 'map_val': [include('root'), (',', Punctuation, '#pop'), ('(?=\\})', Punctuation, '#pop')], 'tuple': [include('root'), ('\\}', Punctuation, '#pop')]}
  --
      + get_tokens_unprocessed(text)
      + gen_elixir_sigil_rules()
  }

  class ElixirConsoleLexer {
      + name = 'Elixir iex session'
      + aliases = ['iex']
      + mimetypes = ['text/x-elixir-shellsession']
      + url = 'https://elixir-lang.org'
      + version_added = '1.5'
  --
      + get_tokens_unprocessed(text)
  }

  class BrainfuckLexer {
      + name = 'Brainfuck'
      + url = 'http://www.muppetlabs.com/~breadbox/bf/'
      + aliases = ['brainfuck', 'bf']
      + filenames = ['*.bf', '*.b']
      + mimetypes = ['application/x-brainfuck']
      + version_added = ''
      + tokens = {'common': [('[.,]+', Name.Tag), ('[+-]+', Name.Builtin), ('[<>]+', Name.Variable), ('[^.,+\\-<>\\[\\]]+', Comment)], 'root': [('\\[', Keyword, 'loop'), ('\\]', Error), include('common')], 'loop': [('\\[', Keyword, '#push'), ('\\]', Keyword, '#pop'), include('common')]}
  --
      + analyse_text(text)
  }

  class BefungeLexer {
      + name = 'Befunge'
      + url = 'http://en.wikipedia.org/wiki/Befunge'
      + aliases = ['befunge']
      + filenames = ['*.befunge']
      + mimetypes = ['application/x-befunge']
      + version_added = '0.7'
      + tokens = {'root': [('[0-9a-f]', Number), ('[+*/%!`-]', Operator), ('[<>^v?\\[\\]rxjk]', Name.Variable), ('[:\\\\$.,n]', Name.Builtin), ('[|_mw]', Keyword), ('[{}]', Name.Tag), ('".*?"', String.Double), ("\\'.", String.Single), ('[#;]', Comment), ('[pg&~=@iotsy]', Keyword), ('[()A-Z]', Comment), ('\\s+', Whitespace)]}
  }

  class CAmkESLexer {
      + name = 'CAmkES'
      + url = 'https://sel4.systems/CAmkES/'
      + aliases = ['camkes', 'idl4']
      + filenames = ['*.camkes', '*.idl4']
      + version_added = '2.1'
      + tokens = {'root': [('^(\\s*)(#.*)(\\n)', bygroups(Whitespace, Comment.Preproc, Whitespace)), ('\\s+', Whitespace), ('/\\*(.|\\n)*?\\*/', Comment), ('//.*$', Comment), ('[\\[(){},.;\\]]', Punctuation), ('[~!%^&*+=|?:<>/-]', Operator), (words(('assembly', 'attribute', 'component', 'composition', 'configuration', 'connection', 'connector', 'consumes', 'control', 'dataport', 'Dataport', 'Dataports', 'emits', 'event', 'Event', 'Events', 'export', 'from', 'group', 'hardware', 'has', 'interface', 'Interface', 'maybe', 'procedure', 'Procedure', 'Procedures', 'provides', 'template', 'thread', 'threads', 'to', 'uses', 'with'), suffix='\\b'), Keyword), (words(('bool', 'boolean', 'Buf', 'char', 'character', 'double', 'float', 'in', 'inout', 'int', 'int16_6', 'int32_t', 'int64_t', 'int8_t', 'integer', 'mutex', 'out', 'real', 'refin', 'semaphore', 'signed', 'string', 'struct', 'uint16_t', 'uint32_t', 'uint64_t', 'uint8_t', 'uintptr_t', 'unsigned', 'void'), suffix='\\b'), Keyword.Type), ('[a-zA-Z_]\\w*_(priority|domain|buffer)', Keyword.Reserved), (words(('dma_pool', 'from_access', 'to_access'), suffix='\\b'), Keyword.Reserved), ('(import)(\\s+)((?:<[^>]*>|"[^"]*");)', bygroups(Comment.Preproc, Whitespace, Comment.Preproc)), ('(include)(\\s+)((?:<[^>]*>|"[^"]*");)', bygroups(Comment.Preproc, Whitespace, Comment.Preproc)), ('0[xX][\\da-fA-F]+', Number.Hex), ('-?[\\d]+', Number), ('-?[\\d]+\\.[\\d]+', Number.Float), ('"[^"]*"', String), ('[Tt]rue|[Ff]alse', Name.Builtin), ('[a-zA-Z_]\\w*', Name)]}
  }

  class CapDLLexer {
      + name = 'CapDL'
      + url = 'https://ssrg.nicta.com.au/publications/nictaabstracts/Kuz_KLW_10.abstract.pml'
      + aliases = ['capdl']
      + filenames = ['*.cdl']
      + version_added = '2.2'
      + tokens = {'root': [('^(\\s*)(#.*)(\\n)', bygroups(Whitespace, Comment.Preproc, Whitespace)), ('\\s+', Whitespace), ('/\\*(.|\\n)*?\\*/', Comment), ('(//|--).*$', Comment), ('[<>\\[(){},:;=\\]]', Punctuation), ('\\.\\.', Punctuation), (words(('arch', 'arm11', 'caps', 'child_of', 'ia32', 'irq', 'maps', 'objects'), suffix='\\b'), Keyword), (words(('aep', 'asid_pool', 'cnode', 'ep', 'frame', 'io_device', 'io_ports', 'io_pt', 'notification', 'pd', 'pt', 'tcb', 'ut', 'vcpu'), suffix='\\b'), Keyword.Type), (words(('asid', 'addr', 'badge', 'cached', 'dom', 'domainID', 'elf', 'fault_ep', 'G', 'guard', 'guard_size', 'init', 'ip', 'prio', 'sp', 'R', 'RG', 'RX', 'RW', 'RWG', 'RWX', 'W', 'WG', 'WX', 'level', 'masked', 'master_reply', 'paddr', 'ports', 'reply', 'uncached'), suffix='\\b'), Keyword.Reserved), ('0[xX][\\da-fA-F]+', Number.Hex), ('\\d+(\\.\\d+)?(k|M)?', Number), (words(('bits',), suffix='\\b'), Number), (words(('cspace', 'vspace', 'reply_slot', 'caller_slot', 'ipc_buffer_slot'), suffix='\\b'), Number), ('[a-zA-Z_][-@\\.\\w]*', Name)]}
  }

  class RedcodeLexer {
      + name = 'Redcode'
      + aliases = ['redcode']
      + filenames = ['*.cw']
      + url = 'https://en.wikipedia.org/wiki/Core_War'
      + version_added = '0.8'
      + opcodes = ('DAT', 'MOV', 'ADD', 'SUB', 'MUL', 'DIV', 'MOD', 'JMP', 'JMZ', 'JMN', 'DJN', 'CMP', 'SLT', 'SPL', 'ORG', 'EQU', 'END')
      + modifiers = ('A', 'B', 'AB', 'BA', 'F', 'X', 'I')
      + tokens = {'root': [('\\s+', Whitespace), (';.*$', Comment.Single), ('\\b({})\\b'.format('|'.join(opcodes)), Name.Function), ('\\b({})\\b'.format('|'.join(modifiers)), Name.Decorator), ('[A-Za-z_]\\w+', Name), ('[-+*/%]', Operator), ('[#$@<>]', Operator), ('[.,]', Punctuation), ('[-+]?\\d+', Number.Integer)]}
  }

  class AheuiLexer {
      + name = 'Aheui'
      + url = 'http://aheui.github.io/'
      + aliases = ['aheui']
      + filenames = ['*.aheui']
      + version_added = ''
      + tokens = {'root': [('[나-낳냐-냫너-넣녀-녛노-놓뇨-눟뉴-닇다-닿댜-댷더-덯뎌-뎧도-돟됴-둫듀-딓따-땋땨-떃떠-떻뗘-뗳또-똫뚀-뚷뜌-띟라-랗랴-럏러-렇려-렿로-롷료-뤃류-릫마-맣먀-먛머-멓며-몋모-뫃묘-뭏뮤-믷바-밯뱌-뱧버-벟벼-볗보-봏뵤-붛뷰-빃빠-빻뺘-뺳뻐-뻫뼈-뼣뽀-뽛뾰-뿧쀼-삏사-샇샤-샿서-섷셔-셯소-솧쇼-숳슈-싛싸-쌓쌰-썋써-쎃쎠-쎻쏘-쏳쑈-쑿쓔-씧자-잫쟈-쟣저-젛져-졓조-좋죠-줗쥬-즿차-챃챠-챻처-첳쳐-쳫초-촣쵸-춯츄-칗카-캏캬-컇커-컿켜-켷코-콯쿄-쿻큐-킣타-탛탸-턓터-텋텨-톃토-톻툐-퉇튜-틯파-팧퍄-퍟퍼-펗펴-폏포-퐇표-풓퓨-픻하-핳햐-햫허-헣혀-혛호-홓효-훟휴-힇]', Operator), ('.', Comment)]}
  }

  class EzhilLexer {
      + name = 'Ezhil'
      + url = 'http://ezhillang.org'
      + aliases = ['ezhil']
      + filenames = ['*.n']
      + mimetypes = ['text/x-ezhil']
      + version_added = '2.1'
      + tokens = {'root': [include('keywords'), ('#.*$', Comment.Single), ('[@+/*,^\\-%]|[!<>=]=?|&&?|\\|\\|?', Operator), ('இல்', Operator.Word), (words(('assert', 'max', 'min', 'நீளம்', 'சரம்_இடமாற்று', 'சரம்_கண்டுபிடி', 'பட்டியல்', 'பின்இணை', 'வரிசைப்படுத்து', 'எடு', 'தலைகீழ்', 'நீட்டிக்க', 'நுழைக்க', 'வை', 'கோப்பை_திற', 'கோப்பை_எழுது', 'கோப்பை_மூடு', 'pi', 'sin', 'cos', 'tan', 'sqrt', 'hypot', 'pow', 'exp', 'log', 'log10', 'exit'), suffix='\\b'), Name.Builtin), ('(True|False)\\b', Keyword.Constant), ('[^\\S\\n]+', Whitespace), include('identifier'), include('literal'), ('[(){}\\[\\]:;.]', Punctuation)], 'keywords': [('பதிப்பி|தேர்ந்தெடு|தேர்வு|ஏதேனில்|ஆனால்|இல்லைஆனால்|இல்லை|ஆக|ஒவ்வொன்றாக|இல்|வரை|செய்|முடியேனில்|பின்கொடு|முடி|நிரல்பாகம்|தொடர்|நிறுத்து|நிரல்பாகம்', Keyword)], 'identifier': [('(?:' + _TALETTERS + ')(?:[0-9]|' + _TALETTERS + ')*', Name)], 'literal': [('".*?"', String), ('\\d+((\\.\\d*)?[eE][+-]?\\d+|\\.\\d*)', Number.Float), ('\\d+', Number.Integer)]}
  --
      + analyse_text(text)
      - __init__()
  }

  class FactorLexer {
      + name = 'Factor'
      + url = 'http://factorcode.org'
      + aliases = ['factor']
      + filenames = ['*.factor']
      + mimetypes = ['text/x-factor']
      + version_added = '1.4'
      + builtin_kernel = words(('-rot', '2bi', '2bi@', '2bi*', '2curry', '2dip', '2drop', '2dup', '2keep', '2nip', '2over', '2tri', '2tri@', '2tri*', '3bi', '3curry', '3dip', '3drop', '3dup', '3keep', '3tri', '4dip', '4drop', '4dup', '4keep', '<wrapper>', '=', '>boolean', 'clone', '?', '?execute', '?if', 'and', 'assert', 'assert=', 'assert?', 'bi', 'bi-curry', 'bi-curry@', 'bi-curry*', 'bi@', 'bi*', 'boa', 'boolean', 'boolean?', 'both?', 'build', 'call', 'callstack', 'callstack>array', 'callstack?', 'clear', '(clone)', 'compose', 'compose?', 'curry', 'curry?', 'datastack', 'die', 'dip', 'do', 'drop', 'dup', 'dupd', 'either?', 'eq?', 'equal?', 'execute', 'hashcode', 'hashcode*', 'identity-hashcode', 'identity-tuple', 'identity-tuple?', 'if', 'if*', 'keep', 'loop', 'most', 'new', 'nip', 'not', 'null', 'object', 'or', 'over', 'pick', 'prepose', 'retainstack', 'rot', 'same?', 'swap', 'swapd', 'throw', 'tri', 'tri-curry', 'tri-curry@', 'tri-curry*', 'tri@', 'tri*', 'tuple', 'tuple?', 'unless', 'unless*', 'until', 'when', 'when*', 'while', 'with', 'wrapper', 'wrapper?', 'xor'), suffix='(\\s+)')
      + builtin_assocs = words(('2cache', '<enum>', '>alist', '?at', '?of', 'assoc', 'assoc-all?', 'assoc-any?', 'assoc-clone-like', 'assoc-combine', 'assoc-diff', 'assoc-diff!', 'assoc-differ', 'assoc-each', 'assoc-empty?', 'assoc-filter', 'assoc-filter!', 'assoc-filter-as', 'assoc-find', 'assoc-hashcode', 'assoc-intersect', 'assoc-like', 'assoc-map', 'assoc-map-as', 'assoc-partition', 'assoc-refine', 'assoc-size', 'assoc-stack', 'assoc-subset?', 'assoc-union', 'assoc-union!', 'assoc=', 'assoc>map', 'assoc?', 'at', 'at+', 'at*', 'cache', 'change-at', 'clear-assoc', 'delete-at', 'delete-at*', 'enum', 'enum?', 'extract-keys', 'inc-at', 'key?', 'keys', 'map>assoc', 'maybe-set-at', 'new-assoc', 'of', 'push-at', 'rename-at', 'set-at', 'sift-keys', 'sift-values', 'substitute', 'unzip', 'value-at', 'value-at*', 'value?', 'values', 'zip'), suffix='(\\s+)')
      + builtin_combinators = words(('2cleave', '2cleave>quot', '3cleave', '3cleave>quot', '4cleave', '4cleave>quot', 'alist>quot', 'call-effect', 'case', 'case-find', 'case>quot', 'cleave', 'cleave>quot', 'cond', 'cond>quot', 'deep-spread>quot', 'execute-effect', 'linear-case-quot', 'no-case', 'no-case?', 'no-cond', 'no-cond?', 'recursive-hashcode', 'shallow-spread>quot', 'spread', 'to-fixed-point', 'wrong-values', 'wrong-values?'), suffix='(\\s+)')
      + builtin_math = words(('-', '/', '/f', '/i', '/mod', '2/', '2^', '<', '<=', '<fp-nan>', '>', '>=', '>bignum', '>fixnum', '>float', '>integer', '(all-integers?)', '(each-integer)', '(find-integer)', '*', '+', '?1+', 'abs', 'align', 'all-integers?', 'bignum', 'bignum?', 'bit?', 'bitand', 'bitnot', 'bitor', 'bits>double', 'bits>float', 'bitxor', 'complex', 'complex?', 'denominator', 'double>bits', 'each-integer', 'even?', 'find-integer', 'find-last-integer', 'fixnum', 'fixnum?', 'float', 'float>bits', 'float?', 'fp-bitwise=', 'fp-infinity?', 'fp-nan-payload', 'fp-nan?', 'fp-qnan?', 'fp-sign', 'fp-snan?', 'fp-special?', 'if-zero', 'imaginary-part', 'integer', 'integer>fixnum', 'integer>fixnum-strict', 'integer?', 'log2', 'log2-expects-positive', 'log2-expects-positive?', 'mod', 'neg', 'neg?', 'next-float', 'next-power-of-2', 'number', 'number=', 'number?', 'numerator', 'odd?', 'out-of-fixnum-range', 'out-of-fixnum-range?', 'power-of-2?', 'prev-float', 'ratio', 'ratio?', 'rational', 'rational?', 'real', 'real-part', 'real?', 'recip', 'rem', 'sgn', 'shift', 'sq', 'times', 'u<', 'u<=', 'u>', 'u>=', 'unless-zero', 'unordered?', 'when-zero', 'zero?'), suffix='(\\s+)')
      + builtin_sequences = words(('1sequence', '2all?', '2each', '2map', '2map-as', '2map-reduce', '2reduce', '2selector', '2sequence', '3append', '3append-as', '3each', '3map', '3map-as', '3sequence', '4sequence', '<repetition>', '<reversed>', '<slice>', '?first', '?last', '?nth', '?second', '?set-nth', 'accumulate', 'accumulate!', 'accumulate-as', 'all?', 'any?', 'append', 'append!', 'append-as', 'assert-sequence', 'assert-sequence=', 'assert-sequence?', 'binary-reduce', 'bounds-check', 'bounds-check?', 'bounds-error', 'bounds-error?', 'but-last', 'but-last-slice', 'cartesian-each', 'cartesian-map', 'cartesian-product', 'change-nth', 'check-slice', 'check-slice-error', 'clone-like', 'collapse-slice', 'collector', 'collector-for', 'concat', 'concat-as', 'copy', 'count', 'cut', 'cut-slice', 'cut*', 'delete-all', 'delete-slice', 'drop-prefix', 'each', 'each-from', 'each-index', 'empty?', 'exchange', 'filter', 'filter!', 'filter-as', 'find', 'find-from', 'find-index', 'find-index-from', 'find-last', 'find-last-from', 'first', 'first2', 'first3', 'first4', 'flip', 'follow', 'fourth', 'glue', 'halves', 'harvest', 'head', 'head-slice', 'head-slice*', 'head*', 'head?', 'if-empty', 'immutable', 'immutable-sequence', 'immutable-sequence?', 'immutable?', 'index', 'index-from', 'indices', 'infimum', 'infimum-by', 'insert-nth', 'interleave', 'iota', 'iota-tuple', 'iota-tuple?', 'join', 'join-as', 'last', 'last-index', 'last-index-from', 'length', 'lengthen', 'like', 'longer', 'longer?', 'longest', 'map', 'map!', 'map-as', 'map-find', 'map-find-last', 'map-index', 'map-integers', 'map-reduce', 'map-sum', 'max-length', 'member-eq?', 'member?', 'midpoint@', 'min-length', 'mismatch', 'move', 'new-like', 'new-resizable', 'new-sequence', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'nth', 'nths', 'pad-head', 'pad-tail', 'padding', 'partition', 'pop', 'pop*', 'prefix', 'prepend', 'prepend-as', 'produce', 'produce-as', 'product', 'push', 'push-all', 'push-either', 'push-if', 'reduce', 'reduce-index', 'remove', 'remove!', 'remove-eq', 'remove-eq!', 'remove-nth', 'remove-nth!', 'repetition', 'repetition?', 'replace-slice', 'replicate', 'replicate-as', 'rest', 'rest-slice', 'reverse', 'reverse!', 'reversed', 'reversed?', 'second', 'selector', 'selector-for', 'sequence', 'sequence-hashcode', 'sequence=', 'sequence?', 'set-first', 'set-fourth', 'set-last', 'set-length', 'set-nth', 'set-second', 'set-third', 'short', 'shorten', 'shorter', 'shorter?', 'shortest', 'sift', 'slice', 'slice-error', 'slice-error?', 'slice?', 'snip', 'snip-slice', 'start', 'start*', 'subseq', 'subseq?', 'suffix', 'suffix!', 'sum', 'sum-lengths', 'supremum', 'supremum-by', 'surround', 'tail', 'tail-slice', 'tail-slice*', 'tail*', 'tail?', 'third', 'trim', 'trim-head', 'trim-head-slice', 'trim-slice', 'trim-tail', 'trim-tail-slice', 'unclip', 'unclip-last', 'unclip-last-slice', 'unclip-slice', 'unless-empty', 'virtual-exemplar', 'virtual-sequence', 'virtual-sequence?', 'virtual@', 'when-empty'), suffix='(\\s+)')
      + builtin_namespaces = words(('+@', 'change', 'change-global', 'counter', 'dec', 'get', 'get-global', 'global', 'inc', 'init-namespaces', 'initialize', 'is-global', 'make-assoc', 'namespace', 'namestack', 'off', 'on', 'set', 'set-global', 'set-namestack', 'toggle', 'with-global', 'with-scope', 'with-variable', 'with-variables'), suffix='(\\s+)')
      + builtin_arrays = words(('1array', '2array', '3array', '4array', '<array>', '>array', 'array', 'array?', 'pair', 'pair?', 'resize-array'), suffix='(\\s+)')
      + builtin_io = words(('(each-stream-block-slice)', '(each-stream-block)', '(stream-contents-by-block)', '(stream-contents-by-element)', '(stream-contents-by-length-or-block)', '(stream-contents-by-length)', '+byte+', '+character+', 'bad-seek-type', 'bad-seek-type?', 'bl', 'contents', 'each-block', 'each-block-size', 'each-block-slice', 'each-line', 'each-morsel', 'each-stream-block', 'each-stream-block-slice', 'each-stream-line', 'error-stream', 'flush', 'input-stream', 'input-stream?', 'invalid-read-buffer', 'invalid-read-buffer?', 'lines', 'nl', 'output-stream', 'output-stream?', 'print', 'read', 'read-into', 'read-partial', 'read-partial-into', 'read-until', 'read1', 'readln', 'seek-absolute', 'seek-absolute?', 'seek-end', 'seek-end?', 'seek-input', 'seek-output', 'seek-relative', 'seek-relative?', 'stream-bl', 'stream-contents', 'stream-contents*', 'stream-copy', 'stream-copy*', 'stream-element-type', 'stream-flush', 'stream-length', 'stream-lines', 'stream-nl', 'stream-print', 'stream-read', 'stream-read-into', 'stream-read-partial', 'stream-read-partial-into', 'stream-read-partial-unsafe', 'stream-read-unsafe', 'stream-read-until', 'stream-read1', 'stream-readln', 'stream-seek', 'stream-seekable?', 'stream-tell', 'stream-write', 'stream-write1', 'tell-input', 'tell-output', 'with-error-stream', 'with-error-stream*', 'with-error>output', 'with-input-output+error-streams', 'with-input-output+error-streams*', 'with-input-stream', 'with-input-stream*', 'with-output-stream', 'with-output-stream*', 'with-output>error', 'with-output+error-stream', 'with-output+error-stream*', 'with-streams', 'with-streams*', 'write', 'write1'), suffix='(\\s+)')
      + builtin_strings = words(('1string', '<string>', '>string', 'resize-string', 'string', 'string?'), suffix='(\\s+)')
      + builtin_vectors = words(('1vector', '<vector>', '>vector', '?push', 'vector', 'vector?'), suffix='(\\s+)')
      + builtin_continuations = words(('<condition>', '<continuation>', '<restart>', 'attempt-all', 'attempt-all-error', 'attempt-all-error?', 'callback-error-hook', 'callcc0', 'callcc1', 'cleanup', 'compute-restarts', 'condition', 'condition?', 'continuation', 'continuation?', 'continue', 'continue-restart', 'continue-with', 'current-continuation', 'error', 'error-continuation', 'error-in-thread', 'error-thread', 'ifcc', 'ignore-errors', 'in-callback?', 'original-error', 'recover', 'restart', 'restart?', 'restarts', 'rethrow', 'rethrow-restarts', 'return', 'return-continuation', 'thread-error-hook', 'throw-continue', 'throw-restarts', 'with-datastack', 'with-return'), suffix='(\\s+)')
      + tokens = {'root': [('#!.*$', Comment.Preproc), default('base')], 'base': [('\\s+', Whitespace), ('((?:MACRO|MEMO|TYPED)?:[:]?)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Function)), ('(M:[:]?)(\\s+)(\\S+)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Class, Whitespace, Name.Function)), ('(C:)(\\s+)(\\S+)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Function, Whitespace, Name.Class)), ('(GENERIC:)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Function)), ('(HOOK:|GENERIC#)(\\s+)(\\S+)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Function, Whitespace, Name.Function)), ('(\\()(\\s)', bygroups(Name.Function, Whitespace), 'stackeffect'), ('(;)(\\s)', bygroups(Keyword, Whitespace)), ('(USING:)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'vocabs'), ('(USE:|UNUSE:|IN:|QUALIFIED:)(\\s+)(\\S+)', bygroups(Keyword.Namespace, Whitespace, Name.Namespace)), ('(QUALIFIED-WITH:)(\\s+)(\\S+)(\\s+)(\\S+)', bygroups(Keyword.Namespace, Whitespace, Name.Namespace, Whitespace, Name.Namespace)), ('(FROM:|EXCLUDE:)(\\s+)(\\S+)(\\s+=>\\s)', bygroups(Keyword.Namespace, Whitespace, Name.Namespace, Whitespace), 'words'), ('(RENAME:)(\\s+)(\\S+)(\\s+)(\\S+)(\\s+)(=>)(\\s+)(\\S+)', bygroups(Keyword.Namespace, Whitespace, Name.Function, Whitespace, Name.Namespace, Whitespace, Punctuation, Whitespace, Name.Function)), ('(ALIAS:|TYPEDEF:)(\\s+)(\\S+)(\\s+)(\\S+)', bygroups(Keyword.Namespace, Whitespace, Name.Function, Whitespace, Name.Function)), ('(DEFER:|FORGET:|POSTPONE:)(\\s+)(\\S+)', bygroups(Keyword.Namespace, Whitespace, Name.Function)), ('(TUPLE:|ERROR:)(\\s+)(\\S+)(\\s+)(<)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Class, Whitespace, Punctuation, Whitespace, Name.Class), 'slots'), ('(TUPLE:|ERROR:|BUILTIN:)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Class), 'slots'), ('(MIXIN:|UNION:|INTERSECTION:)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Class)), ('(PREDICATE:)(\\s+)(\\S+)(\\s+)(<)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Class, Whitespace, Punctuation, Whitespace, Name.Class)), ('(C:)(\\s+)(\\S+)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Function, Whitespace, Name.Class)), ('(INSTANCE:)(\\s+)(\\S+)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Class, Whitespace, Name.Class)), ('(SLOT:)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Function)), ('(SINGLETON:)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Class)), ('SINGLETONS:', Keyword, 'classes'), ('(CONSTANT:|SYMBOL:|MAIN:|HELP:)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Function)), ('(SYMBOLS:)(\\s+)', bygroups(Keyword, Whitespace), 'words'), ('(SYNTAX:)(\\s+)', bygroups(Keyword, Whitespace)), ('(ALIEN:)(\\s+)', bygroups(Keyword, Whitespace)), ('(STRUCT:)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Class)), ('(FUNCTION:)(\\s+)(\\S+)(\\s+)(\\S+)(\\s+)(\\()(\\s+)([^)]+)(\\))(\\s)', bygroups(Keyword.Namespace, Whitespace, Text, Whitespace, Name.Function, Whitespace, Punctuation, Whitespace, Text, Punctuation, Whitespace)), ('(FUNCTION-ALIAS:)(\\s+)(\\S+)(\\s+)(\\S+)(\\s+)(\\S+)(\\s+)(\\()(\\s+)([^)]+)(\\))(\\s)', bygroups(Keyword.Namespace, Whitespace, Text, Whitespace, Name.Function, Whitespace, Name.Function, Whitespace, Punctuation, Whitespace, Text, Punctuation, Whitespace)), ('(<PRIVATE|PRIVATE>)(\\s)', bygroups(Keyword.Namespace, Whitespace)), ('"""\\s(?:.|\\n)*?\\s"""', String), ('"(?:\\\\\\\\|\\\\"|[^"])*"', String), ('(\\S+")(\\s+)((?:\\\\\\\\|\\\\"|[^"])*")', bygroups(String, Whitespace, String)), ('(CHAR:)(\\s+)(\\\\[\\\\abfnrstv]|[^\\\\]\\S*)(\\s)', bygroups(String.Char, Whitespace, String.Char, Whitespace)), ('!\\s+.*$', Comment), ('#!\\s+.*$', Comment), ('/\\*\\s+(?:.|\\n)*?\\s\\*/', Comment), ('[tf]\\b', Name.Constant), ('[\\\\$]\\s+\\S+', Name.Constant), ('M\\\\\\s+\\S+\\s+\\S+', Name.Constant), ('[+-]?(?:[\\d,]*\\d)?\\.(?:\\d([\\d,]*\\d)?)?(?:[eE][+-]?\\d+)?\\s', Number), ('[+-]?\\d(?:[\\d,]*\\d)?(?:[eE][+-]?\\d+)?\\s', Number), ('0x[a-fA-F\\d](?:[a-fA-F\\d,]*[a-fA-F\\d])?(?:p\\d([\\d,]*\\d)?)?\\s', Number), ('NAN:\\s+[a-fA-F\\d](?:[a-fA-F\\d,]*[a-fA-F\\d])?(?:p\\d([\\d,]*\\d)?)?\\s', Number), ('0b[01]+\\s', Number.Bin), ('0o[0-7]+\\s', Number.Oct), ('(?:\\d([\\d,]*\\d)?)?\\+\\d(?:[\\d,]*\\d)?/\\d(?:[\\d,]*\\d)?\\s', Number), ('(?:\\-\\d([\\d,]*\\d)?)?\\-\\d(?:[\\d,]*\\d)?/\\d(?:[\\d,]*\\d)?\\s', Number), ('(?:deprecated|final|foldable|flushable|inline|recursive)\\s', Keyword), (builtin_kernel, bygroups(Name.Builtin, Whitespace)), (builtin_assocs, bygroups(Name.Builtin, Whitespace)), (builtin_combinators, bygroups(Name.Builtin, Whitespace)), (builtin_math, bygroups(Name.Builtin, Whitespace)), (builtin_sequences, bygroups(Name.Builtin, Whitespace)), (builtin_namespaces, bygroups(Name.Builtin, Whitespace)), (builtin_arrays, bygroups(Name.Builtin, Whitespace)), (builtin_io, bygroups(Name.Builtin, Whitespace)), (builtin_strings, bygroups(Name.Builtin, Whitespace)), (builtin_vectors, bygroups(Name.Builtin, Whitespace)), (builtin_continuations, bygroups(Name.Builtin, Whitespace)), ('\\S+', Text)], 'stackeffect': [('\\s+', Whitespace), ('(\\()(\\s+)', bygroups(Name.Function, Whitespace), 'stackeffect'), ('(\\))(\\s+)', bygroups(Name.Function, Whitespace), '#pop'), ('(--)(\\s+)', bygroups(Name.Function, Whitespace)), ('\\S+', Name.Variable)], 'slots': [('\\s+', Whitespace), ('(;)(\\s+)', bygroups(Keyword, Whitespace), '#pop'), ('(\\{)(\\s+)(\\S+)(\\s+)([^}]+)(\\s+)(\\})(\\s+)', bygroups(Text, Whitespace, Name.Variable, Whitespace, Text, Whitespace, Text, Whitespace)), ('\\S+', Name.Variable)], 'vocabs': [('\\s+', Whitespace), ('(;)(\\s+)', bygroups(Keyword, Whitespace), '#pop'), ('\\S+', Name.Namespace)], 'classes': [('\\s+', Whitespace), ('(;)(\\s+)', bygroups(Keyword, Whitespace), '#pop'), ('\\S+', Name.Class)], 'words': [('\\s+', Whitespace), ('(;)(\\s+)', bygroups(Keyword, Whitespace), '#pop'), ('\\S+', Name.Function)]}
  }

  class FantomLexer {
      + name = 'Fantom'
      + aliases = ['fan']
      + filenames = ['*.fan']
      + mimetypes = ['application/x-fantom']
      + url = 'https://www.fantom.org'
      + version_added = '1.5'
      + tokens = {'comments': [('(?s)/\\*.*?\\*/', Comment.Multiline), ('//.*?$', Comment.Single), ('\\*\\*.*?$', Comment.Special), ('#.*$', Comment.Single)], 'literals': [('\\b-?[\\d_]+(ns|ms|sec|min|hr|day)', Number), ('\\b-?[\\d_]*\\.[\\d_]+(ns|ms|sec|min|hr|day)', Number), ('\\b-?(\\d+)?\\.\\d+(f|F|d|D)?', Number.Float), ('\\b-?0x[0-9a-fA-F_]+', Number.Hex), ('\\b-?[\\d_]+', Number.Integer), ("'\\\\.'|'[^\\\\]'|'\\\\u[0-9a-f]{4}'", String.Char), ('"', Punctuation, 'insideStr'), ('`', Punctuation, 'insideUri'), ('\\b(true|false|null)\\b', Keyword.Constant), ('(?:(\\w+)(::))?(\\w+)(<\\|)(.*?)(\\|>)', bygroups(Name.Namespace, Punctuation, Name.Class, Punctuation, String, Punctuation)), ('(?:(\\w+)(::))?(\\w+)?(#)(\\w+)?', bygroups(Name.Namespace, Punctuation, Name.Class, Punctuation, Name.Function)), ('\\[,\\]', Literal), (s('($type)(\\[,\\])'), bygroups(using(this, state='inType'), Literal)), ('\\[:\\]', Literal), (s('($type)(\\[:\\])'), bygroups(using(this, state='inType'), Literal))], 'insideStr': [('\\\\\\\\', String.Escape), ('\\\\"', String.Escape), ('\\\\`', String.Escape), ('\\$\\w+', String.Interpol), ('\\$\\{.*?\\}', String.Interpol), ('"', Punctuation, '#pop'), ('.', String)], 'insideUri': [('\\\\\\\\', String.Escape), ('\\\\"', String.Escape), ('\\\\`', String.Escape), ('\\$\\w+', String.Interpol), ('\\$\\{.*?\\}', String.Interpol), ('`', Punctuation, '#pop'), ('.', String.Backtick)], 'protectionKeywords': [('\\b(public|protected|private|internal)\\b', Keyword)], 'typeKeywords': [('\\b(abstract|final|const|native|facet|enum)\\b', Keyword)], 'methodKeywords': [('\\b(abstract|native|once|override|static|virtual|final)\\b', Keyword)], 'fieldKeywords': [('\\b(abstract|const|final|native|override|static|virtual|readonly)\\b', Keyword)], 'otherKeywords': [(words(('try', 'catch', 'throw', 'finally', 'for', 'if', 'else', 'while', 'as', 'is', 'isnot', 'switch', 'case', 'default', 'continue', 'break', 'do', 'return', 'get', 'set'), prefix='\\b', suffix='\\b'), Keyword), ('\\b(it|this|super)\\b', Name.Builtin.Pseudo)], 'operators': [('\\+\\+|\\-\\-|\\+|\\-|\\*|/|\\|\\||&&|<=>|<=|<|>=|>|=|!|\\[|\\]', Operator)], 'inType': [('[\\[\\]|\\->:?]', Punctuation), (s('$id'), Name.Class), default('#pop')], 'root': [include('comments'), include('protectionKeywords'), include('typeKeywords'), include('methodKeywords'), include('fieldKeywords'), include('literals'), include('otherKeywords'), include('operators'), ('using\\b', Keyword.Namespace, 'using'), ('@\\w+', Name.Decorator, 'facet'), ('(class|mixin)(\\s+)(\\w+)', bygroups(Keyword, Whitespace, Name.Class), 'inheritance'), (s('($type)([ \\t]+)($id)(\\s*)(:=)'), bygroups(using(this, state='inType'), Whitespace, Name.Variable, Whitespace, Operator)), (s('($id)(\\s*)(:=)'), bygroups(Name.Variable, Whitespace, Operator)), (s('(\\.|(?:\\->))($id)(\\s*)(\\()'), bygroups(Operator, Name.Function, Whitespace, Punctuation), 'insideParen'), (s('(\\.|(?:\\->))($id)'), bygroups(Operator, Name.Function)), ('(new)(\\s+)(make\\w*)(\\s*)(\\()', bygroups(Keyword, Whitespace, Name.Function, Whitespace, Punctuation), 'insideMethodDeclArgs'), (s('($type)([ \\t]+)($id)(\\s*)(\\()'), bygroups(using(this, state='inType'), Whitespace, Name.Function, Whitespace, Punctuation), 'insideMethodDeclArgs'), (s('($type)(\\s+)($id)(\\s*)(,)'), bygroups(using(this, state='inType'), Whitespace, Name.Variable, Whitespace, Punctuation)), (s('($type)(\\s+)($id)(\\s*)(\\->)(\\s*)($type)(\\|)'), bygroups(using(this, state='inType'), Whitespace, Name.Variable, Whitespace, Punctuation, Whitespace, using(this, state='inType'), Punctuation)), (s('($type)(\\s+)($id)(\\s*)(\\|)'), bygroups(using(this, state='inType'), Whitespace, Name.Variable, Whitespace, Punctuation)), (s('($type)([ \\t]+)($id)'), bygroups(using(this, state='inType'), Whitespace, Name.Variable)), ('\\(', Punctuation, 'insideParen'), ('\\{', Punctuation, 'insideBrace'), ('\\s+', Whitespace), ('.', Text)], 'insideParen': [('\\)', Punctuation, '#pop'), include('root')], 'insideMethodDeclArgs': [('\\)', Punctuation, '#pop'), (s('($type)(\\s+)($id)(\\s*)(\\))'), bygroups(using(this, state='inType'), Whitespace, Name.Variable, Whitespace, Punctuation), '#pop'), include('root')], 'insideBrace': [('\\}', Punctuation, '#pop'), include('root')], 'inheritance': [('\\s+', Whitespace), (':|,', Punctuation), ('(?:(\\w+)(::))?(\\w+)', bygroups(Name.Namespace, Punctuation, Name.Class)), ('\\{', Punctuation, '#pop')], 'using': [('[ \\t]+', Whitespace), ('(\\[)(\\w+)(\\])', bygroups(Punctuation, Comment.Special, Punctuation)), ('(\\")?([\\w.]+)(\\")?', bygroups(Punctuation, Name.Namespace, Punctuation)), ('::', Punctuation, 'usingClass'), default('#pop')], 'usingClass': [('[ \\t]+', Whitespace), ('(as)(\\s+)(\\w+)', bygroups(Keyword.Declaration, Whitespace, Name.Class), '#pop:2'), ('[\\w$]+', Name.Class), default('#pop:2')], 'facet': [('\\s+', Whitespace), ('\\{', Punctuation, 'facetFields'), default('#pop')], 'facetFields': [include('comments'), include('literals'), include('operators'), ('\\s+', Whitespace), ('(\\s*)(\\w+)(\\s*)(=)', bygroups(Whitespace, Name, Whitespace, Operator)), ('\\}', Punctuation, '#pop'), ('\\s+', Whitespace), ('.', Text)]}
  --
      + s(str)
  }

  class FelixLexer {
      + name = 'Felix'
      + url = 'http://www.felix-lang.org'
      + aliases = ['felix', 'flx']
      + filenames = ['*.flx', '*.flxh']
      + mimetypes = ['text/x-felix']
      + version_added = '1.2'
      + preproc = ('elif', 'else', 'endif', 'if', 'ifdef', 'ifndef')
      + keywords = ('_', '_deref', 'all', 'as', 'assert', 'attempt', 'call', 'callback', 'case', 'caseno', 'cclass', 'code', 'compound', 'ctypes', 'do', 'done', 'downto', 'elif', 'else', 'endattempt', 'endcase', 'endif', 'endmatch', 'enum', 'except', 'exceptions', 'expect', 'finally', 'for', 'forall', 'forget', 'fork', 'functor', 'goto', 'ident', 'if', 'incomplete', 'inherit', 'instance', 'interface', 'jump', 'lambda', 'loop', 'match', 'module', 'namespace', 'new', 'noexpand', 'nonterm', 'obj', 'of', 'open', 'parse', 'raise', 'regexp', 'reglex', 'regmatch', 'rename', 'return', 'the', 'then', 'to', 'type', 'typecase', 'typedef', 'typematch', 'typeof', 'upto', 'when', 'whilst', 'with', 'yield')
      + keyword_directives = ('_gc_pointer', '_gc_type', 'body', 'comment', 'const', 'export', 'header', 'inline', 'lval', 'macro', 'noinline', 'noreturn', 'package', 'private', 'pod', 'property', 'public', 'publish', 'requires', 'todo', 'virtual', 'use')
      + keyword_declarations = ('def', 'let', 'ref', 'val', 'var')
      + keyword_types = ('unit', 'void', 'any', 'bool', 'byte', 'offset', 'address', 'caddress', 'cvaddress', 'vaddress', 'tiny', 'short', 'int', 'long', 'vlong', 'utiny', 'ushort', 'vshort', 'uint', 'ulong', 'uvlong', 'int8', 'int16', 'int32', 'int64', 'uint8', 'uint16', 'uint32', 'uint64', 'float', 'double', 'ldouble', 'complex', 'dcomplex', 'lcomplex', 'imaginary', 'dimaginary', 'limaginary', 'char', 'wchar', 'uchar', 'charp', 'charcp', 'ucharp', 'ucharcp', 'string', 'wstring', 'ustring', 'cont', 'array', 'varray', 'list', 'lvalue', 'opt', 'slice')
      + keyword_constants = ('false', 'true')
      + operator_words = ('and', 'not', 'in', 'is', 'isin', 'or', 'xor')
      + name_builtins = ('_svc', 'while')
      + name_pseudo = ('root', 'self', 'this')
      + decimal_suffixes = '([tTsSiIlLvV]|ll|LL|([iIuU])(8|16|32|64))?'
      + tokens = {'root': [include('whitespace'), (words(('axiom', 'ctor', 'fun', 'gen', 'proc', 'reduce', 'union'), suffix='\\b'), Keyword, 'funcname'), (words(('class', 'cclass', 'cstruct', 'obj', 'struct'), suffix='\\b'), Keyword, 'classname'), ('(instance|module|typeclass)\\b', Keyword, 'modulename'), (words(keywords, suffix='\\b'), Keyword), (words(keyword_directives, suffix='\\b'), Name.Decorator), (words(keyword_declarations, suffix='\\b'), Keyword.Declaration), (words(keyword_types, suffix='\\b'), Keyword.Type), (words(keyword_constants, suffix='\\b'), Keyword.Constant), include('operators'), ('0[xX]([0-9a-fA-F_]*\\.[0-9a-fA-F_]+|[0-9a-fA-F_]+)[pP][+\\-]?[0-9_]+[lLfFdD]?', Number.Float), ('[0-9_]+(\\.[0-9_]+[eE][+\\-]?[0-9_]+|\\.[0-9_]*|[eE][+\\-]?[0-9_]+)[lLfFdD]?', Number.Float), ('\\.(0|[1-9][0-9_]*)([eE][+\\-]?[0-9_]+)?[lLfFdD]?', Number.Float), (f'0[Bb][01_]+{decimal_suffixes}', Number.Bin), (f'0[0-7_]+{decimal_suffixes}', Number.Oct), (f'0[xX][0-9a-fA-F_]+{decimal_suffixes}', Number.Hex), (f'(0|[1-9][0-9_]*){decimal_suffixes}', Number.Integer), ('([rR][cC]?|[cC][rR])"""', String, 'tdqs'), ("([rR][cC]?|[cC][rR])'''", String, 'tsqs'), ('([rR][cC]?|[cC][rR])"', String, 'dqs'), ("([rR][cC]?|[cC][rR])'", String, 'sqs'), ('[cCfFqQwWuU]?"""', String, combined('stringescape', 'tdqs')), ("[cCfFqQwWuU]?'''", String, combined('stringescape', 'tsqs')), ('[cCfFqQwWuU]?"', String, combined('stringescape', 'dqs')), ("[cCfFqQwWuU]?'", String, combined('stringescape', 'sqs')), ('[\\[\\]{}:(),;?]', Punctuation), ('[a-zA-Z_]\\w*:>', Name.Label), ('({})\\b'.format('|'.join(name_builtins)), Name.Builtin), ('({})\\b'.format('|'.join(name_pseudo)), Name.Builtin.Pseudo), ('[a-zA-Z_]\\w*', Name)], 'whitespace': [('\\s+', Whitespace), include('comment'), ('(#)(\\s*)(if)(\\s+)(0)', bygroups(Comment.Preproc, Whitespace, Comment.Preproc, Whitespace, Comment.Preproc), 'if0'), ('#', Comment.Preproc, 'macro')], 'operators': [('({})\\b'.format('|'.join(operator_words)), Operator.Word), ('!=|==|<<|>>|\\|\\||&&|[-~+/*%=<>&^|.$]', Operator)], 'comment': [('//(.*?)$', Comment.Single), ('/[*]', Comment.Multiline, 'comment2')], 'comment2': [('[^/*]', Comment.Multiline), ('/[*]', Comment.Multiline, '#push'), ('[*]/', Comment.Multiline, '#pop'), ('[/*]', Comment.Multiline)], 'if0': [('^(\\s*)(#if.*?(?<!\\\\))(\\n)', bygroups(Whitespace, Comment, Whitespace), '#push'), ('^(\\s*)(#endif.*?(?<!\\\\))(\\n)', bygroups(Whitespace, Comment, Whitespace), '#pop'), ('(.*?)(\\n)', bygroups(Comment, Whitespace))], 'macro': [include('comment'), ('(import|include)(\\s+)(<[^>]*?>)', bygroups(Comment.Preproc, Whitespace, String), '#pop'), ('(import|include)(\\s+)("[^"]*?")', bygroups(Comment.Preproc, Whitespace, String), '#pop'), ("(import|include)(\\s+)('[^']*?')", bygroups(Comment.Preproc, Whitespace, String), '#pop'), ('[^/\\n]+', Comment.Preproc), ('/', Comment.Preproc), ('(?<=\\\\)\\n', Comment.Preproc), ('\\n', Whitespace, '#pop')], 'funcname': [include('whitespace'), ('[a-zA-Z_]\\w*', Name.Function, '#pop'), ('(?=\\()', Text, '#pop')], 'classname': [include('whitespace'), ('[a-zA-Z_]\\w*', Name.Class, '#pop'), ('(?=\\{)', Text, '#pop')], 'modulename': [include('whitespace'), ('\\[', Punctuation, ('modulename2', 'tvarlist')), default('modulename2')], 'modulename2': [include('whitespace'), ('([a-zA-Z_]\\w*)', Name.Namespace, '#pop:2')], 'tvarlist': [include('whitespace'), include('operators'), ('\\[', Punctuation, '#push'), ('\\]', Punctuation, '#pop'), (',', Punctuation), ('(with|where)\\b', Keyword), ('[a-zA-Z_]\\w*', Name)], 'stringescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'strings': [('%(\\([a-zA-Z0-9]+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[E-GXc-giorsux%]', String.Interpol), ('[^\\\\\\\'"%\\n]+', String), ('[\\\'"\\\\]', String), ('%', String)], 'nl': [('\\n', String)], 'dqs': [('"', String, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('strings')], 'sqs': [("'", String, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('strings')], 'tdqs': [('"""', String, '#pop'), include('strings'), include('nl')], 'tsqs': [("'''", String, '#pop'), include('strings'), include('nl')]}
  }

  class FiftLexer {
      + name = 'Fift'
      + aliases = ['fift', 'fif']
      + filenames = ['*.fif']
      + url = 'https://ton-blockchain.github.io/docs/fiftbase.pdf'
      + version_added = ''
      + tokens = {'root': [('\\s+', Whitespace), include('comments'), ('[\\.+]?\\"', String, 'string'), ('0x[0-9a-fA-F]+', Number.Hex), ('0b[01]+', Number.Bin), ('-?[0-9]+("/"-?[0-9]+)?', Number.Decimal), ('b\\{[01]+\\}', Literal), ('x\\{[0-9a-fA-F_]+\\}', Literal), ('B\\{[0-9a-fA-F_]+\\}', Literal), ('\\S+', Name)], 'string': [('\\\\.', String.Escape), ('\\"', String, '#pop'), ('[^\\"\\r\\n\\\\]+', String)], 'comments': [('//.*', Comment.Singleline), ('/\\*', Comment.Multiline, 'comment')], 'comment': [('[^/*]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  }

  class FloScriptLexer {
      + name = 'FloScript'
      + url = 'https://github.com/ioflo/ioflo'
      + aliases = ['floscript', 'flo']
      + filenames = ['*.flo']
      + version_added = '2.4'
      + tokens = {'root': [('\\s+', Whitespace), ('[]{}:(),;[]', Punctuation), ('(\\\\)(\\n)', bygroups(Text, Whitespace)), ('\\\\', Text), ('(to|by|with|from|per|for|cum|qua|via|as|at|in|of|on|re|is|if|be|into|and|not)\\b', Operator.Word), ('!=|==|<<|>>|[-~+/*%=<>&^|.]', Operator), ('(load|init|server|logger|log|loggee|first|over|under|next|done|timeout|repeat|native|benter|enter|recur|exit|precur|renter|rexit|print|put|inc|copy|set|aux|rear|raze|go|let|do|bid|ready|start|stop|run|abort|use|flo|give|take)\\b', Name.Builtin), ('(frame|framer|house)\\b', Keyword), ('"', String, 'string'), include('name'), include('numbers'), ('#.+$', Comment.Single)], 'string': [('[^"]+', String), ('"', String, '#pop')], 'numbers': [('(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?j?', Number.Float), ('\\d+[eE][+-]?[0-9]+j?', Number.Float), ('0[0-7]+j?', Number.Oct), ('0[bB][01]+', Number.Bin), ('0[xX][a-fA-F0-9]+', Number.Hex), ('\\d+L', Number.Integer.Long), ('\\d+j?', Number.Integer)], 'name': [('@[\\w.]+', Name.Decorator), ('[a-zA-Z_]\\w*', Name)]}
  --
      + innerstring_rules(ttype)
  }

  class ForthLexer {
      + name = 'Forth'
      + url = 'https://www.forth.com/forth/'
      + aliases = ['forth']
      + filenames = ['*.frt', '*.fs']
      + mimetypes = ['application/x-forth']
      + version_added = '2.2'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [('\\s+', Whitespace), ('\\\\.*?$', Comment.Single), ('\\([\\s].*?\\)', Comment.Single), ('(:|variable|constant|value|buffer:)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'worddef'), ('([.sc]")(\\s+?)', bygroups(String, Whitespace), 'stringdef'), ('(blk|block|buffer|evaluate|flush|load|save-buffers|update|empty-buffers|list|refill|scr|thru|\\#s|\\*\\/mod|\\+loop|\\/mod|0<|0=|1\\+|1-|2!|2\\*|2\\/|2@|2drop|2dup|2over|2swap|>body|>in|>number|>r|\\?dup|abort|abort\\"|abs|accept|align|aligned|allot|and|base|begin|bl|c!|c,|c@|cell\\+|cells|char|char\\+|chars|constant|count|cr|create|decimal|depth|do|does>|drop|dup|else|emit|environment\\?|evaluate|execute|exit|fill|find|fm\\/mod|here|hold|i|if|immediate|invert|j|key|leave|literal|loop|lshift|m\\*|max|min|mod|move|negate|or|over|postpone|quit|r>|r@|recurse|repeat|rot|rshift|s\\"|s>d|sign|sm\\/rem|source|space|spaces|state|swap|then|type|u\\.|u\\<|um\\*|um\\/mod|unloop|until|variable|while|word|xor|\\[char\\]|\\[\\\'\\]|@|!|\\#|<\\#|\\#>|:|;|\\+|-|\\*|\\/|,|<|>|\\|1\\+|1-|\\.|\\.r|0<>|0>|2>r|2r>|2r@|:noname|\\?do|again|c\\"|case|compile,|endcase|endof|erase|false|hex|marker|nip|of|pad|parse|pick|refill|restore-input|roll|save-input|source-id|to|true|tuck|u\\.r|u>|unused|value|within|\\[compile\\]|\\#tib|convert|expect|query|span|tib|2constant|2literal|2variable|d\\+|d-|d\\.|d\\.r|d0<|d0=|d2\\*|d2\\/|d<|d=|d>s|dabs|dmax|dmin|dnegate|m\\*\\/|m\\+|2rot|du<|catch|throw|abort|abort\\"|at-xy|key\\?|page|ekey|ekey>char|ekey\\?|emit\\?|ms|time&date|BIN|CLOSE-FILE|CREATE-FILE|DELETE-FILE|FILE-POSITION|FILE-SIZE|INCLUDE-FILE|INCLUDED|OPEN-FILE|R\\/O|R\\/W|READ-FILE|READ-LINE|REPOSITION-FILE|RESIZE-FILE|S\\"|SOURCE-ID|W/O|WRITE-FILE|WRITE-LINE|FILE-STATUS|FLUSH-FILE|REFILL|RENAME-FILE|>float|d>f|f!|f\\*|f\\+|f-|f\\/|f0<|f0=|f<|f>d|f@|falign|faligned|fconstant|fdepth|fdrop|fdup|fliteral|float\\+|floats|floor|fmax|fmin|fnegate|fover|frot|fround|fswap|fvariable|represent|df!|df@|dfalign|dfaligned|dfloat\\+|dfloats|f\\*\\*|f\\.|fabs|facos|facosh|falog|fasin|fasinh|fatan|fatan2|fatanh|fcos|fcosh|fe\\.|fexp|fexpm1|fln|flnp1|flog|fs\\.|fsin|fsincos|fsinh|fsqrt|ftan|ftanh|f~|precision|set-precision|sf!|sf@|sfalign|sfaligned|sfloat\\+|sfloats|\\(local\\)|to|locals\\||allocate|free|resize|definitions|find|forth-wordlist|get-current|get-order|search-wordlist|set-current|set-order|wordlist|also|forth|only|order|previous|-trailing|\\/string|blank|cmove|cmove>|compare|search|sliteral|.s|dump|see|words|;code|ahead|assembler|bye|code|cs-pick|cs-roll|editor|state|\\[else\\]|\\[if\\]|\\[then\\]|forget|defer|defer@|defer!|action-of|begin-structure|field:|buffer:|parse-name|buffer:|traverse-wordlist|n>r|nr>|2value|fvalue|name>interpret|name>compile|name>string|cfield:|end-structure)(?!\\S)', Keyword), ('(\\$[0-9A-F]+)', Number.Hex), ('(\\#|%|&|\\-|\\+)?[0-9]+', Number.Integer), ('(\\#|%|&|\\-|\\+)?[0-9.]+', Keyword.Type), ('(@i|!i|@e|!e|pause|noop|turnkey|sleep|itype|icompare|sp@|sp!|rp@|rp!|up@|up!|>a|a>|a@|a!|a@+|a@-|>b|b>|b@|b!|b@+|b@-|find-name|1ms|sp0|rp0|\\(evaluate\\)|int-trap|int!)(?!\\S)', Name.Constant), ('(do-recognizer|r:fail|recognizer:|get-recognizers|set-recognizers|r:float|r>comp|r>int|r>post|r:name|r:word|r:dnum|r:num|recognizer|forth-recognizer|rec:num|rec:float|rec:word)(?!\\S)', Name.Decorator), ('(Evalue|Rvalue|Uvalue|Edefer|Rdefer|Udefer)(\\s+)', bygroups(Keyword.Namespace, Text), 'worddef'), ('\\S+', Name.Function)], 'worddef': [('\\S+', Name.Class, '#pop')], 'stringdef': [('[^"]+', String, '#pop')]}
  --
      + analyse_text(text)
  }

  class FortranLexer {
      + name = 'Fortran'
      + url = 'https://fortran-lang.org/'
      + aliases = ['fortran', 'f90']
      + filenames = ['*.f03', '*.f90', '*.F03', '*.F90']
      + mimetypes = ['text/x-fortran']
      + version_added = '0.10'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [('^#.*\\n', Comment.Preproc), ('!.*\\n', Comment), include('strings'), include('core'), ('[a-z][\\w$]*', Name), include('nums'), ('[\\s]+', Text.Whitespace)], 'core': [('\\b(DO)(\\s+)(CONCURRENT)\\b', bygroups(Keyword, Text.Whitespace, Keyword)), ('\\b(GO)(\\s*)(TO)\\b', bygroups(Keyword, Text.Whitespace, Keyword)), (words(('ABSTRACT', 'ACCEPT', 'ALL', 'ALLSTOP', 'ALLOCATABLE', 'ALLOCATE', 'ARRAY', 'ASSIGN', 'ASSOCIATE', 'ASYNCHRONOUS', 'BACKSPACE', 'BIND', 'BLOCK', 'BLOCKDATA', 'BYTE', 'CALL', 'CASE', 'CLASS', 'CLOSE', 'CODIMENSION', 'COMMON', 'CONTIGUOUS', 'CONTAINS', 'CONTINUE', 'CRITICAL', 'CYCLE', 'DATA', 'DEALLOCATE', 'DECODE', 'DEFERRED', 'DIMENSION', 'DO', 'ELEMENTAL', 'ELSE', 'ELSEIF', 'ENCODE', 'END', 'ENDASSOCIATE', 'ENDBLOCK', 'ENDDO', 'ENDENUM', 'ENDFORALL', 'ENDFUNCTION', 'ENDIF', 'ENDINTERFACE', 'ENDMODULE', 'ENDPROGRAM', 'ENDSELECT', 'ENDSUBMODULE', 'ENDSUBROUTINE', 'ENDTYPE', 'ENDWHERE', 'ENTRY', 'ENUM', 'ENUMERATOR', 'EQUIVALENCE', 'ERROR STOP', 'EXIT', 'EXTENDS', 'EXTERNAL', 'EXTRINSIC', 'FILE', 'FINAL', 'FORALL', 'FORMAT', 'FUNCTION', 'GENERIC', 'IF', 'IMAGES', 'IMPLICIT', 'IMPORT', 'IMPURE', 'INCLUDE', 'INQUIRE', 'INTENT', 'INTERFACE', 'INTRINSIC', 'IS', 'LOCK', 'MEMORY', 'MODULE', 'NAMELIST', 'NULLIFY', 'NONE', 'NON_INTRINSIC', 'NON_OVERRIDABLE', 'NOPASS', 'ONLY', 'OPEN', 'OPTIONAL', 'OPTIONS', 'PARAMETER', 'PASS', 'PAUSE', 'POINTER', 'PRINT', 'PRIVATE', 'PROGRAM', 'PROCEDURE', 'PROTECTED', 'PUBLIC', 'PURE', 'READ', 'RECURSIVE', 'RESULT', 'RETURN', 'REWIND', 'SAVE', 'SELECT', 'SEQUENCE', 'STOP', 'SUBMODULE', 'SUBROUTINE', 'SYNC', 'SYNCALL', 'SYNCIMAGES', 'SYNCMEMORY', 'TARGET', 'THEN', 'TYPE', 'UNLOCK', 'USE', 'VALUE', 'VOLATILE', 'WHERE', 'WRITE', 'WHILE'), prefix='\\b', suffix='\\s*\\b'), Keyword), (words(('CHARACTER', 'COMPLEX', 'DOUBLE PRECISION', 'DOUBLE COMPLEX', 'INTEGER', 'LOGICAL', 'REAL', 'C_INT', 'C_SHORT', 'C_LONG', 'C_LONG_LONG', 'C_SIGNED_CHAR', 'C_SIZE_T', 'C_INT8_T', 'C_INT16_T', 'C_INT32_T', 'C_INT64_T', 'C_INT_LEAST8_T', 'C_INT_LEAST16_T', 'C_INT_LEAST32_T', 'C_INT_LEAST64_T', 'C_INT_FAST8_T', 'C_INT_FAST16_T', 'C_INT_FAST32_T', 'C_INT_FAST64_T', 'C_INTMAX_T', 'C_INTPTR_T', 'C_FLOAT', 'C_DOUBLE', 'C_LONG_DOUBLE', 'C_FLOAT_COMPLEX', 'C_DOUBLE_COMPLEX', 'C_LONG_DOUBLE_COMPLEX', 'C_BOOL', 'C_CHAR', 'C_PTR', 'C_FUNPTR'), prefix='\\b', suffix='\\s*\\b'), Keyword.Type), ('(\\*\\*|\\*|\\+|-|\\/|<|>|<=|>=|==|\\/=|=)', Operator), ('(::)', Keyword.Declaration), ('[()\\[\\],:&%;.]', Punctuation), (words(('Abort', 'Abs', 'Access', 'AChar', 'ACos', 'ACosH', 'AdjustL', 'AdjustR', 'AImag', 'AInt', 'Alarm', 'All', 'Allocated', 'ALog', 'AMax', 'AMin', 'AMod', 'And', 'ANInt', 'Any', 'ASin', 'ASinH', 'Associated', 'ATan', 'ATanH', 'Atomic_Define', 'Atomic_Ref', 'BesJ', 'BesJN', 'Bessel_J0', 'Bessel_J1', 'Bessel_JN', 'Bessel_Y0', 'Bessel_Y1', 'Bessel_YN', 'BesY', 'BesYN', 'BGE', 'BGT', 'BLE', 'BLT', 'Bit_Size', 'BTest', 'CAbs', 'CCos', 'Ceiling', 'CExp', 'Char', 'ChDir', 'ChMod', 'CLog', 'Cmplx', 'Command_Argument_Count', 'Complex', 'Conjg', 'Cos', 'CosH', 'Count', 'CPU_Time', 'CShift', 'CSin', 'CSqRt', 'CTime', 'C_Loc', 'C_Associated', 'C_Null_Ptr', 'C_Null_Funptr', 'C_F_Pointer', 'C_F_ProcPointer', 'C_Null_Char', 'C_Alert', 'C_Backspace', 'C_Form_Feed', 'C_FunLoc', 'C_Sizeof', 'C_New_Line', 'C_Carriage_Return', 'C_Horizontal_Tab', 'C_Vertical_Tab', 'DAbs', 'DACos', 'DASin', 'DATan', 'Date_and_Time', 'DbesJ', 'DbesJN', 'DbesY', 'DbesYN', 'Dble', 'DCos', 'DCosH', 'DDiM', 'DErF', 'DErFC', 'DExp', 'Digits', 'DiM', 'DInt', 'DLog', 'DMax', 'DMin', 'DMod', 'DNInt', 'Dot_Product', 'DProd', 'DSign', 'DSinH', 'DShiftL', 'DShiftR', 'DSin', 'DSqRt', 'DTanH', 'DTan', 'DTime', 'EOShift', 'Epsilon', 'ErF', 'ErFC', 'ErFC_Scaled', 'ETime', 'Execute_Command_Line', 'Exit', 'Exp', 'Exponent', 'Extends_Type_Of', 'FDate', 'FGet', 'FGetC', 'FindLoc', 'Float', 'Floor', 'Flush', 'FNum', 'FPutC', 'FPut', 'Fraction', 'FSeek', 'FStat', 'FTell', 'Gamma', 'GError', 'GetArg', 'Get_Command', 'Get_Command_Argument', 'Get_Environment_Variable', 'GetCWD', 'GetEnv', 'GetGId', 'GetLog', 'GetPId', 'GetUId', 'GMTime', 'HostNm', 'Huge', 'Hypot', 'IAbs', 'IAChar', 'IAll', 'IAnd', 'IAny', 'IArgC', 'IBClr', 'IBits', 'IBSet', 'IChar', 'IDate', 'IDiM', 'IDInt', 'IDNInt', 'IEOr', 'IErrNo', 'IFix', 'Imag', 'ImagPart', 'Image_Index', 'Index', 'Int', 'IOr', 'IParity', 'IRand', 'IsaTty', 'IShft', 'IShftC', 'ISign', 'Iso_C_Binding', 'Is_Contiguous', 'Is_Iostat_End', 'Is_Iostat_Eor', 'ITime', 'Kill', 'Kind', 'LBound', 'LCoBound', 'Len', 'Len_Trim', 'LGe', 'LGt', 'Link', 'LLe', 'LLt', 'LnBlnk', 'Loc', 'Log', 'Log_Gamma', 'Logical', 'Long', 'LShift', 'LStat', 'LTime', 'MaskL', 'MaskR', 'MatMul', 'Max', 'MaxExponent', 'MaxLoc', 'MaxVal', 'MClock', 'Merge', 'Merge_Bits', 'Move_Alloc', 'Min', 'MinExponent', 'MinLoc', 'MinVal', 'Mod', 'Modulo', 'MvBits', 'Nearest', 'New_Line', 'NInt', 'Norm2', 'Not', 'Null', 'Num_Images', 'Or', 'Pack', 'Parity', 'PError', 'Precision', 'Present', 'Product', 'Radix', 'Rand', 'Random_Number', 'Random_Seed', 'Range', 'Real', 'RealPart', 'Rename', 'Repeat', 'Reshape', 'RRSpacing', 'RShift', 'Same_Type_As', 'Scale', 'Scan', 'Second', 'Selected_Char_Kind', 'Selected_Int_Kind', 'Selected_Real_Kind', 'Set_Exponent', 'Shape', 'ShiftA', 'ShiftL', 'ShiftR', 'Short', 'Sign', 'Signal', 'SinH', 'Sin', 'Sleep', 'Sngl', 'Spacing', 'Spread', 'SqRt', 'SRand', 'Stat', 'Storage_Size', 'Sum', 'SymLnk', 'System', 'System_Clock', 'Tan', 'TanH', 'Time', 'This_Image', 'Tiny', 'TrailZ', 'Transfer', 'Transpose', 'Trim', 'TtyNam', 'UBound', 'UCoBound', 'UMask', 'Unlink', 'Unpack', 'Verify', 'XOr', 'ZAbs', 'ZCos', 'ZExp', 'ZLog', 'ZSin', 'ZSqRt'), prefix='\\b', suffix='\\s*\\b'), Name.Builtin), ('\\.(true|false)\\.', Name.Builtin), ('\\.(eq|ne|lt|le|gt|ge|not|and|or|eqv|neqv)\\.', Operator.Word)], 'strings': [('"(\\\\[0-7]+|\\\\[^0-7]|[^"\\\\])*"', String.Double), ("'(\\\\[0-7]+|\\\\[^0-7]|[^'\\\\])*'", String.Single)], 'nums': [('\\d+(?![.e])(_([1-9]|[a-z]\\w*))?', Number.Integer), ('[+-]?\\d*\\.\\d+([ed][-+]?\\d+)?(_([1-9]|[a-z]\\w*))?', Number.Float), ('[+-]?\\d+\\.\\d*([ed][-+]?\\d+)?(_([1-9]|[a-z]\\w*))?', Number.Float), ('[+-]?\\d+(\\.\\d*)?[ed][-+]?\\d+(_([1-9]|[a-z]\\w*))?', Number.Float)]}
  }

  class FortranFixedLexer {
      + name = 'FortranFixed'
      + aliases = ['fortranfixed']
      + filenames = ['*.f', '*.F']
      + url = 'https://fortran-lang.org/'
      + version_added = '2.1'
      + flags = re.IGNORECASE
      + tokens = {'root': [('[C*].*\\n', Comment), ('#.*\\n', Comment.Preproc), (' {0,4}!.*\\n', Comment), ('(.{5})', Name.Label, 'cont-char'), ('.*\\n', using(FortranLexer))], 'cont-char': [(' ', Text, 'code'), ('0', Comment, 'code'), ('.', Generic.Strong, 'code')], 'code': [('(.{66})(.*)(\\n)', bygroups(_lex_fortran, Comment, Text.Whitespace), 'root'), ('(.*)(\\n)', bygroups(_lex_fortran, Text.Whitespace), 'root'), default('root')]}
  }

  class FoxProLexer {
      + name = 'FoxPro'
      + aliases = ['foxpro', 'vfp', 'clipper', 'xbase']
      + filenames = ['*.PRG', '*.prg']
      + version_added = '1.6'
      + mimetype = []
      + url = 'https://learn.microsoft.com/en-us/previous-versions/visualstudio/foxpro'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [(';\\s*\\n', Punctuation), ('(^|\\n)\\s*', Text, 'newline'), ('(?<=\\w)\\[[0-9, ]+\\]', Text), ('\\\'[^\\\'\\n]*\\\'|"[^"\\n]*"|\\[[^]*]\\]', String), ('(^\\s*\\*|&&|&amp;&amp;).*?\\n', Comment.Single), ('(ABS|ACLASS|ACOPY|ACOS|ADATABASES|ADBOBJECTS|ADDBS|ADDPROPERTY|ADEL|ADIR|ADLLS|ADOCKSTATE|AELEMENT|AERROR|AEVENTS|AFIELDS|AFONT|AGETCLASS|AGETFILEVERSION|AINS|AINSTANCE|ALANGUAGE|ALEN|ALIAS|ALINES|ALLTRIM|AMEMBERS|AMOUSEOBJ|ANETRESOURCES|APRINTERS|APROCINFO|ASC|ASCAN|ASELOBJ|ASESSIONS|ASIN|ASORT|ASQLHANDLES|ASTACKINFO|ASUBSCRIPT|AT|AT_C|ATAGINFO|ATAN|ATC|ATCC|ATCLINE|ATLINE|ATN2|AUSED|AVCXCLASSES|BAR|BARCOUNT|BARPROMPT|BETWEEN|BINDEVENT|BINTOC|BITAND|BITCLEAR|BITLSHIFT|BITNOT|BITOR|BITRSHIFT|BITSET|BITTEST|BITXOR|BOF|CANDIDATE|CAPSLOCK|CAST|CDOW|CDX|CEILING|CHR|CHRSAW|CHRTRAN|CHRTRANC|CLEARRESULTSET|CMONTH|CNTBAR|CNTPAD|COL|COM|Functions|COMARRAY|COMCLASSINFO|COMPOBJ|COMPROP|COMRETURNERROR|COS|CPCONVERT|CPCURRENT|CPDBF|CREATEBINARY|CREATEOBJECT|CREATEOBJECTEX|CREATEOFFLINE|CTOBIN|CTOD|CTOT|CURDIR|CURSORGETPROP|CURSORSETPROP|CURSORTOXML|CURVAL|DATE|DATETIME|DAY|DBC|DBF|DBGETPROP|DBSETPROP|DBUSED|DDEAbortTrans|DDEAdvise|DDEEnabled|DDEExecute|DDEInitiate|DDELastError|DDEPoke|DDERequest|DDESetOption|DDESetService|DDESetTopic|DDETerminate|DEFAULTEXT|DELETED|DESCENDING|DIFFERENCE|DIRECTORY|DISKSPACE|DisplayPath|DMY|DODEFAULT|DOW|DRIVETYPE|DROPOFFLINE|DTOC|DTOR|DTOS|DTOT|EDITSOURCE|EMPTY|EOF|ERROR|EVAL(UATE)?|EVENTHANDLER|EVL|EXECSCRIPT|EXP|FCHSIZE|FCLOSE|FCOUNT|FCREATE|FDATE|FEOF|FERROR|FFLUSH|FGETS|FIELD|FILE|FILETOSTR|FILTER|FKLABEL|FKMAX|FLDLIST|FLOCK|FLOOR|FONTMETRIC|FOPEN|FOR|FORCEEXT|FORCEPATH|FOUND|FPUTS|FREAD|FSEEK|FSIZE|FTIME|FULLPATH|FV|FWRITE|GETAUTOINCVALUE|GETBAR|GETCOLOR|GETCP|GETDIR|GETENV|GETFILE|GETFLDSTATE|GETFONT|GETINTERFACE|GETNEXTMODIFIED|GETOBJECT|GETPAD|GETPEM|GETPICT|GETPRINTER|GETRESULTSET|GETWORDCOUNT|GETWORDNUM|GETCURSORADAPTER|GOMONTH|HEADER|HOME|HOUR|ICASE|IDXCOLLATE|IIF|IMESTATUS|INDBC|INDEXSEEK|INKEY|INLIST|INPUTBOX|INSMODE|INT|ISALPHA|ISBLANK|ISCOLOR|ISDIGIT|ISEXCLUSIVE|ISFLOCKED|ISLEADBYTE|ISLOWER|ISMEMOFETCHED|ISMOUSE|ISNULL|ISPEN|ISREADONLY|ISRLOCKED|ISTRANSACTABLE|ISUPPER|JUSTDRIVE|JUSTEXT|JUSTFNAME|JUSTPATH|JUSTSTEM|KEY|KEYMATCH|LASTKEY|LEFT|LEFTC|LEN|LENC|LIKE|LIKEC|LINENO|LOADPICTURE|LOCFILE|LOCK|LOG|LOG10|LOOKUP|LOWER|LTRIM|LUPDATE|MAKETRANSACTABLE|MAX|MCOL|MDOWN|MDX|MDY|MEMLINES|MEMORY|MENU|MESSAGE|MESSAGEBOX|MIN|MINUTE|MLINE|MOD|MONTH|MRKBAR|MRKPAD|MROW|MTON|MWINDOW|NDX|NEWOBJECT|NORMALIZE|NTOM|NUMLOCK|NVL|OBJNUM|OBJTOCLIENT|OBJVAR|OCCURS|OEMTOANSI|OLDVAL|ON|ORDER|OS|PAD|PADL|PARAMETERS|PAYMENT|PCOL|PCOUNT|PEMSTATUS|PI|POPUP|PRIMARY|PRINTSTATUS|PRMBAR|PRMPAD|PROGRAM|PROMPT|PROPER|PROW|PRTINFO|PUTFILE|PV|QUARTER|RAISEEVENT|RAND|RAT|RATC|RATLINE|RDLEVEL|READKEY|RECCOUNT|RECNO|RECSIZE|REFRESH|RELATION|REPLICATE|REQUERY|RGB|RGBSCHEME|RIGHT|RIGHTC|RLOCK|ROUND|ROW|RTOD|RTRIM|SAVEPICTURE|SCHEME|SCOLS|SEC|SECONDS|SEEK|SELECT|SET|SETFLDSTATE|SETRESULTSET|SIGN|SIN|SKPBAR|SKPPAD|SOUNDEX|SPACE|SQLCANCEL|SQLCOLUMNS|SQLCOMMIT|SQLCONNECT|SQLDISCONNECT|SQLEXEC|SQLGETPROP|SQLIDLEDISCONNECT|SQLMORERESULTS|SQLPREPARE|SQLROLLBACK|SQLSETPROP|SQLSTRINGCONNECT|SQLTABLES|SQRT|SROWS|STR|STRCONV|STREXTRACT|STRTOFILE|STRTRAN|STUFF|STUFFC|SUBSTR|SUBSTRC|SYS|SYSMETRIC|TABLEREVERT|TABLEUPDATE|TAG|TAGCOUNT|TAGNO|TAN|TARGET|TEXTMERGE|TIME|TRANSFORM|TRIM|TTOC|TTOD|TXNLEVEL|TXTWIDTH|TYPE|UNBINDEVENTS|UNIQUE|UPDATED|UPPER|USED|VAL|VARREAD|VARTYPE|VERSION|WBORDER|WCHILD|WCOLS|WDOCKABLE|WEEK|WEXIST|WFONT|WLAST|WLCOL|WLROW|WMAXIMUM|WMINIMUM|WONTOP|WOUTPUT|WPARENT|WREAD|WROWS|WTITLE|WVISIBLE|XMLTOCURSOR|XMLUPDATEGRAM|YEAR)(?=\\s*\\()', Name.Function), ('_ALIGNMENT|_ASCIICOLS|_ASCIIROWS|_ASSIST|_BEAUTIFY|_BOX|_BROWSER|_BUILDER|_CALCMEM|_CALCVALUE|_CLIPTEXT|_CONVERTER|_COVERAGE|_CUROBJ|_DBLCLICK|_DIARYDATE|_DOS|_FOXDOC|_FOXREF|_GALLERY|_GENGRAPH|_GENHTML|_GENMENU|_GENPD|_GENSCRN|_GENXTAB|_GETEXPR|_INCLUDE|_INCSEEK|_INDENT|_LMARGIN|_MAC|_MENUDESIGNER|_MLINE|_PADVANCE|_PAGENO|_PAGETOTAL|_PBPAGE|_PCOLNO|_PCOPIES|_PDRIVER|_PDSETUP|_PECODE|_PEJECT|_PEPAGE|_PLENGTH|_PLINENO|_PLOFFSET|_PPITCH|_PQUALITY|_PRETEXT|_PSCODE|_PSPACING|_PWAIT|_RMARGIN|_REPORTBUILDER|_REPORTOUTPUT|_REPORTPREVIEW|_SAMPLES|_SCCTEXT|_SCREEN|_SHELL|_SPELLCHK|_STARTUP|_TABS|_TALLY|_TASKPANE|_TEXT|_THROTTLE|_TOOLBOX|_TOOLTIPTIMEOUT|_TRANSPORT|_TRIGGERLEVEL|_UNIX|_VFP|_WINDOWS|_WIZARD|_WRAP', Keyword.Pseudo), ('THISFORMSET|THISFORM|THIS', Name.Builtin), ('Application|CheckBox|Collection|Column|ComboBox|CommandButton|CommandGroup|Container|Control|CursorAdapter|Cursor|Custom|DataEnvironment|DataObject|EditBox|Empty|Exception|Fields|Files|File|FormSet|Form|FoxCode|Grid|Header|Hyperlink|Image|Label|Line|ListBox|Objects|OptionButton|OptionGroup|PageFrame|Page|ProjectHook|Projects|Project|Relation|ReportListener|Separator|Servers|Server|Session|Shape|Spinner|Tables|TextBox|Timer|ToolBar|XMLAdapter|XMLField|XMLTable', Name.Class), ('m\\.[a-z_]\\w*', Name.Variable), ('\\.(F|T|AND|OR|NOT|NULL)\\.|\\b(AND|OR|NOT|NULL)\\b', Operator.Word), ('\\.(ActiveColumn|ActiveControl|ActiveForm|ActivePage|ActiveProject|ActiveRow|AddLineFeeds|ADOCodePage|Alias|Alignment|Align|AllowAddNew|AllowAutoColumnFit|AllowCellSelection|AllowDelete|AllowHeaderSizing|AllowInsert|AllowModalMessages|AllowOutput|AllowRowSizing|AllowSimultaneousFetch|AllowTabs|AllowUpdate|AlwaysOnBottom|AlwaysOnTop|Anchor|Application|AutoActivate|AutoCenter|AutoCloseTables|AutoComplete|AutoCompSource|AutoCompTable|AutoHideScrollBar|AutoIncrement|AutoOpenTables|AutoRelease|AutoSize|AutoVerbMenu|AutoYield|BackColor|ForeColor|BackStyle|BaseClass|BatchUpdateCount|BindControls|BorderColor|BorderStyle|BorderWidth|BoundColumn|BoundTo|Bound|BreakOnError|BufferModeOverride|BufferMode|BuildDateTime|ButtonCount|Buttons|Cancel|Caption|Centered|Century|ChildAlias|ChildOrder|ChildTable|ClassLibrary|Class|ClipControls|Closable|CLSID|CodePage|ColorScheme|ColorSource|ColumnCount|ColumnLines|ColumnOrder|Columns|ColumnWidths|CommandClauses|Comment|CompareMemo|ConflictCheckCmd|ConflictCheckType|ContinuousScroll|ControlBox|ControlCount|Controls|ControlSource|ConversionFunc|Count|CurrentControl|CurrentDataSession|CurrentPass|CurrentX|CurrentY|CursorSchema|CursorSource|CursorStatus|Curvature|Database|DataSessionID|DataSession|DataSourceType|DataSource|DataType|DateFormat|DateMark|Debug|DeclareXMLPrefix|DEClassLibrary|DEClass|DefaultFilePath|Default|DefOLELCID|DeleteCmdDataSourceType|DeleteCmdDataSource|DeleteCmd|DeleteMark|Description|Desktop|Details|DisabledBackColor|DisabledForeColor|DisabledItemBackColor|DisabledItemForeColor|DisabledPicture|DisableEncode|DisplayCount|DisplayValue|Dockable|Docked|DockPosition|DocumentFile|DownPicture|DragIcon|DragMode|DrawMode|DrawStyle|DrawWidth|DynamicAlignment|DynamicBackColor|DynamicForeColor|DynamicCurrentControl|DynamicFontBold|DynamicFontItalic|DynamicFontStrikethru|DynamicFontUnderline|DynamicFontName|DynamicFontOutline|DynamicFontShadow|DynamicFontSize|DynamicInputMask|DynamicLineHeight|EditorOptions|Enabled|EnableHyperlinks|Encrypted|ErrorNo|Exclude|Exclusive|FetchAsNeeded|FetchMemoCmdList|FetchMemoDataSourceType|FetchMemoDataSource|FetchMemo|FetchSize|FileClassLibrary|FileClass|FillColor|FillStyle|Filter|FirstElement|FirstNestedTable|Flags|FontBold|FontItalic|FontStrikethru|FontUnderline|FontCharSet|FontCondense|FontExtend|FontName|FontOutline|FontShadow|FontSize|ForceCloseTag|Format|FormCount|FormattedOutput|Forms|FractionDigits|FRXDataSession|FullName|GDIPlusGraphics|GridLineColor|GridLines|GridLineWidth|HalfHeightCaption|HeaderClassLibrary|HeaderClass|HeaderHeight|Height|HelpContextID|HideSelection|HighlightBackColor|HighlightForeColor|HighlightStyle|HighlightRowLineWidth|HighlightRow|Highlight|HomeDir|Hours|HostName|HScrollSmallChange|hWnd|Icon|IncrementalSearch|Increment|InitialSelectedAlias|InputMask|InsertCmdDataSourceType|InsertCmdDataSource|InsertCmdRefreshCmd|InsertCmdRefreshFieldList|InsertCmdRefreshKeyFieldList|InsertCmd|Instancing|IntegralHeight|Interval|IMEMode|IsAttribute|IsBase64|IsBinary|IsNull|IsDiffGram|IsLoaded|ItemBackColor,|ItemData|ItemIDData|ItemTips|IXMLDOMElement|KeyboardHighValue|KeyboardLowValue|Keyfield|KeyFieldList|KeyPreview|KeySort|LanguageOptions|LeftColumn|Left|LineContents|LineNo|LineSlant|LinkMaster|ListCount|ListenerType|ListIndex|ListItemID|ListItem|List|LockColumnsLeft|LockColumns|LockScreen|MacDesktop|MainFile|MapN19_4ToCurrency|MapBinary|MapVarchar|Margin|MaxButton|MaxHeight|MaxLeft|MaxLength|MaxRecords|MaxTop|MaxWidth|MDIForm|MemberClassLibrary|MemberClass|MemoWindow|Message|MinButton|MinHeight|MinWidth|MouseIcon|MousePointer|Movable|MoverBars|MultiSelect|Name|NestedInto|NewIndex|NewItemID|NextSiblingTable|NoCpTrans|NoDataOnLoad|NoData|NullDisplay|NumberOfElements|Object|OLEClass|OLEDragMode|OLEDragPicture|OLEDropEffects|OLEDropHasData|OLEDropMode|OLEDropTextInsertion|OLELCID|OLERequestPendingTimeout|OLEServerBusyRaiseError|OLEServerBusyTimeout|OLETypeAllowed|OneToMany|OpenViews|OpenWindow|Optimize|OrderDirection|Order|OutputPageCount|OutputType|PageCount|PageHeight|PageNo|PageOrder|Pages|PageTotal|PageWidth|PanelLink|Panel|ParentAlias|ParentClass|ParentTable|Parent|Partition|PasswordChar|PictureMargin|PicturePosition|PictureSpacing|PictureSelectionDisplay|PictureVal|Picture|Prepared|PolyPoints|PreserveWhiteSpace|PreviewContainer|PrintJobName|Procedure|PROCESSID|ProgID|ProjectHookClass|ProjectHookLibrary|ProjectHook|QuietMode|ReadCycle|ReadLock|ReadMouse|ReadObject|ReadOnly|ReadSave|ReadTimeout|RecordMark|RecordSourceType|RecordSource|RefreshAlias|RefreshCmdDataSourceType|RefreshCmdDataSource|RefreshCmd|RefreshIgnoreFieldList|RefreshTimeStamp|RelationalExpr|RelativeColumn|RelativeRow|ReleaseType|Resizable|RespectCursorCP|RespectNesting|RightToLeft|RotateFlip|Rotation|RowColChange|RowHeight|RowSourceType|RowSource|ScaleMode|SCCProvider|SCCStatus|ScrollBars|Seconds|SelectCmd|SelectedID|SelectedItemBackColor|SelectedItemForeColor|Selected|SelectionNamespaces|SelectOnEntry|SelLength|SelStart|SelText|SendGDIPlusImage|SendUpdates|ServerClassLibrary|ServerClass|ServerHelpFile|ServerName|ServerProject|ShowTips|ShowInTaskbar|ShowWindow|Sizable|SizeBox|SOM|Sorted|Sparse|SpecialEffect|SpinnerHighValue|SpinnerLowValue|SplitBar|StackLevel|StartMode|StatusBarText|StatusBar|Stretch|StrictDateEntry|Style|TabIndex|Tables|TabOrientation|Tabs|TabStop|TabStretch|TabStyle|Tag|TerminateRead|Text|Themes|ThreadID|TimestampFieldList|TitleBar|ToolTipText|TopIndex|TopItemID|Top|TwoPassProcess|TypeLibCLSID|TypeLibDesc|TypeLibName|Type|Unicode|UpdatableFieldList|UpdateCmdDataSourceType|UpdateCmdDataSource|UpdateCmdRefreshCmd|UpdateCmdRefreshFieldList|UpdateCmdRefreshKeyFieldList|UpdateCmd|UpdateGramSchemaLocation|UpdateGram|UpdateNameList|UpdateType|UseCodePage|UseCursorSchema|UseDeDataSource|UseMemoSize|UserValue|UseTransactions|UTF8Encoded|Value|VersionComments|VersionCompany|VersionCopyright|VersionDescription|VersionNumber|VersionProduct|VersionTrademarks|Version|VFPXMLProgID|ViewPortHeight|ViewPortLeft|ViewPortTop|ViewPortWidth|VScrollSmallChange|View|Visible|VisualEffect|WhatsThisButton|WhatsThisHelpID|WhatsThisHelp|WhereType|Width|WindowList|WindowState|WindowType|WordWrap|WrapCharInCDATA|WrapInCDATA|WrapMemoInCDATA|XMLAdapter|XMLConstraints|XMLNameIsXPath|XMLNamespace|XMLName|XMLPrefix|XMLSchemaLocation|XMLTable|XMLType|XSDfractionDigits|XSDmaxLength|XSDtotalDigits|XSDtype|ZoomBox)', Name.Attribute), ('\\.(ActivateCell|AddColumn|AddItem|AddListItem|AddObject|AddProperty|AddTableSchema|AddToSCC|Add|ApplyDiffgram|Attach|AutoFit|AutoOpen|Box|Build|CancelReport|ChangesToCursor|CheckIn|CheckOut|Circle|CleanUp|ClearData|ClearStatus|Clear|CloneObject|CloseTables|Close|Cls|CursorAttach|CursorDetach|CursorFill|CursorRefresh|DataToClip|DelayedMemoFetch|DeleteColumn|Dock|DoMessage|DoScroll|DoStatus|DoVerb|Drag|Draw|Eval|GetData|GetDockState|GetFormat|GetKey|GetLatestVersion|GetPageHeight|GetPageWidth|Help|Hide|IncludePageInOutput|IndexToItemID|ItemIDToIndex|Item|LoadXML|Line|Modify|MoveItem|Move|Nest|OLEDrag|OnPreviewClose|OutputPage|Point|Print|PSet|Quit|ReadExpression|ReadMethod|RecordRefresh|Refresh|ReleaseXML|Release|RemoveFromSCC|RemoveItem|RemoveListItem|RemoveObject|Remove|Render|Requery|RequestData|ResetToDefault|Reset|Run|SaveAsClass|SaveAs|SetAll|SetData|SetFocus|SetFormat|SetMain|SetVar|SetViewPort|ShowWhatsThis|Show|SupportsListenerType|TextHeight|TextWidth|ToCursor|ToXML|UndoCheckOut|Unnest|UpdateStatus|WhatsThisMode|WriteExpression|WriteMethod|ZOrder)', Name.Function), ('\\.(Activate|AdjustObjectSize|AfterBand|AfterBuild|AfterCloseTables|AfterCursorAttach|AfterCursorClose|AfterCursorDetach|AfterCursorFill|AfterCursorRefresh|AfterCursorUpdate|AfterDelete|AfterInsert|AfterRecordRefresh|AfterUpdate|AfterDock|AfterReport|AfterRowColChange|BeforeBand|BeforeCursorAttach|BeforeCursorClose|BeforeCursorDetach|BeforeCursorFill|BeforeCursorRefresh|BeforeCursorUpdate|BeforeDelete|BeforeInsert|BeforeDock|BeforeOpenTables|BeforeRecordRefresh|BeforeReport|BeforeRowColChange|BeforeUpdate|Click|dbc_Activate|dbc_AfterAddTable|dbc_AfterAppendProc|dbc_AfterCloseTable|dbc_AfterCopyProc|dbc_AfterCreateConnection|dbc_AfterCreateOffline|dbc_AfterCreateTable|dbc_AfterCreateView|dbc_AfterDBGetProp|dbc_AfterDBSetProp|dbc_AfterDeleteConnection|dbc_AfterDropOffline|dbc_AfterDropTable|dbc_AfterModifyConnection|dbc_AfterModifyProc|dbc_AfterModifyTable|dbc_AfterModifyView|dbc_AfterOpenTable|dbc_AfterRemoveTable|dbc_AfterRenameConnection|dbc_AfterRenameTable|dbc_AfterRenameView|dbc_AfterValidateData|dbc_BeforeAddTable|dbc_BeforeAppendProc|dbc_BeforeCloseTable|dbc_BeforeCopyProc|dbc_BeforeCreateConnection|dbc_BeforeCreateOffline|dbc_BeforeCreateTable|dbc_BeforeCreateView|dbc_BeforeDBGetProp|dbc_BeforeDBSetProp|dbc_BeforeDeleteConnection|dbc_BeforeDropOffline|dbc_BeforeDropTable|dbc_BeforeModifyConnection|dbc_BeforeModifyProc|dbc_BeforeModifyTable|dbc_BeforeModifyView|dbc_BeforeOpenTable|dbc_BeforeRemoveTable|dbc_BeforeRenameConnection|dbc_BeforeRenameTable|dbc_BeforeRenameView|dbc_BeforeValidateData|dbc_CloseData|dbc_Deactivate|dbc_ModifyData|dbc_OpenData|dbc_PackData|DblClick|Deactivate|Deleted|Destroy|DoCmd|DownClick|DragDrop|DragOver|DropDown|ErrorMessage|Error|EvaluateContents|GotFocus|Init|InteractiveChange|KeyPress|LoadReport|Load|LostFocus|Message|MiddleClick|MouseDown|MouseEnter|MouseLeave|MouseMove|MouseUp|MouseWheel|Moved|OLECompleteDrag|OLEDragOver|OLEGiveFeedback|OLESetData|OLEStartDrag|OnMoveItem|Paint|ProgrammaticChange|QueryAddFile|QueryModifyFile|QueryNewFile|QueryRemoveFile|QueryRunFile|QueryUnload|RangeHigh|RangeLow|ReadActivate|ReadDeactivate|ReadShow|ReadValid|ReadWhen|Resize|RightClick|SCCInit|SCCDestroy|Scrolled|Timer|UIEnable|UnDock|UnloadReport|Unload|UpClick|Valid|When)', Name.Function), ('\\s+', Text), ('.', Text)], 'newline': [('\\*.*?$', Comment.Single, '#pop'), ('(ACCEPT|ACTIVATE\\s*MENU|ACTIVATE\\s*POPUP|ACTIVATE\\s*SCREEN|ACTIVATE\\s*WINDOW|APPEND|APPEND\\s*FROM|APPEND\\s*FROM\\s*ARRAY|APPEND\\s*GENERAL|APPEND\\s*MEMO|ASSIST|AVERAGE|BLANK|BROWSE|BUILD\\s*APP|BUILD\\s*EXE|BUILD\\s*PROJECT|CALCULATE|CALL|CANCEL|CHANGE|CLEAR|CLOSE|CLOSE\\s*MEMO|COMPILE|CONTINUE|COPY\\s*FILE|COPY\\s*INDEXES|COPY\\s*MEMO|COPY\\s*STRUCTURE|COPY\\s*STRUCTURE\\s*EXTENDED|COPY\\s*TAG|COPY\\s*TO|COPY\\s*TO\\s*ARRAY|COUNT|CREATE|CREATE\\s*COLOR\\s*SET|CREATE\\s*CURSOR|CREATE\\s*FROM|CREATE\\s*LABEL|CREATE\\s*MENU|CREATE\\s*PROJECT|CREATE\\s*QUERY|CREATE\\s*REPORT|CREATE\\s*SCREEN|CREATE\\s*TABLE|CREATE\\s*VIEW|DDE|DEACTIVATE\\s*MENU|DEACTIVATE\\s*POPUP|DEACTIVATE\\s*WINDOW|DECLARE|DEFINE\\s*BAR|DEFINE\\s*BOX|DEFINE\\s*MENU|DEFINE\\s*PAD|DEFINE\\s*POPUP|DEFINE\\s*WINDOW|DELETE|DELETE\\s*FILE|DELETE\\s*TAG|DIMENSION|DIRECTORY|DISPLAY|DISPLAY\\s*FILES|DISPLAY\\s*MEMORY|DISPLAY\\s*STATUS|DISPLAY\\s*STRUCTURE|DO|EDIT|EJECT|EJECT\\s*PAGE|ERASE|EXIT|EXPORT|EXTERNAL|FILER|FIND|FLUSH|FUNCTION|GATHER|GETEXPR|GO|GOTO|HELP|HIDE\\s*MENU|HIDE\\s*POPUP|HIDE\\s*WINDOW|IMPORT|INDEX|INPUT|INSERT|JOIN|KEYBOARD|LABEL|LIST|LOAD|LOCATE|LOOP|MENU|MENU\\s*TO|MODIFY\\s*COMMAND|MODIFY\\s*FILE|MODIFY\\s*GENERAL|MODIFY\\s*LABEL|MODIFY\\s*MEMO|MODIFY\\s*MENU|MODIFY\\s*PROJECT|MODIFY\\s*QUERY|MODIFY\\s*REPORT|MODIFY\\s*SCREEN|MODIFY\\s*STRUCTURE|MODIFY\\s*WINDOW|MOVE\\s*POPUP|MOVE\\s*WINDOW|NOTE|ON\\s*APLABOUT|ON\\s*BAR|ON\\s*ERROR|ON\\s*ESCAPE|ON\\s*EXIT\\s*BAR|ON\\s*EXIT\\s*MENU|ON\\s*EXIT\\s*PAD|ON\\s*EXIT\\s*POPUP|ON\\s*KEY|ON\\s*KEY\\s*=|ON\\s*KEY\\s*LABEL|ON\\s*MACHELP|ON\\s*PAD|ON\\s*PAGE|ON\\s*READERROR|ON\\s*SELECTION\\s*BAR|ON\\s*SELECTION\\s*MENU|ON\\s*SELECTION\\s*PAD|ON\\s*SELECTION\\s*POPUP|ON\\s*SHUTDOWN|PACK|PARAMETERS|PLAY\\s*MACRO|POP\\s*KEY|POP\\s*MENU|POP\\s*POPUP|PRIVATE|PROCEDURE|PUBLIC|PUSH\\s*KEY|PUSH\\s*MENU|PUSH\\s*POPUP|QUIT|READ|READ\\s*MENU|RECALL|REINDEX|RELEASE|RELEASE\\s*MODULE|RENAME|REPLACE|REPLACE\\s*FROM\\s*ARRAY|REPORT|RESTORE\\s*FROM|RESTORE\\s*MACROS|RESTORE\\s*SCREEN|RESTORE\\s*WINDOW|RESUME|RETRY|RETURN|RUN|RUN\\s*\\/N"|RUNSCRIPT|SAVE\\s*MACROS|SAVE\\s*SCREEN|SAVE\\s*TO|SAVE\\s*WINDOWS|SCATTER|SCROLL|SEEK|SELECT|SET|SET\\s*ALTERNATE|SET\\s*ANSI|SET\\s*APLABOUT|SET\\s*AUTOSAVE|SET\\s*BELL|SET\\s*BLINK|SET\\s*BLOCKSIZE|SET\\s*BORDER|SET\\s*BRSTATUS|SET\\s*CARRY|SET\\s*CENTURY|SET\\s*CLEAR|SET\\s*CLOCK|SET\\s*COLLATE|SET\\s*COLOR\\s*OF|SET\\s*COLOR\\s*OF\\s*SCHEME|SET\\s*COLOR\\s*SET|SET\\s*COLOR\\s*TO|SET\\s*COMPATIBLE|SET\\s*CONFIRM|SET\\s*CONSOLE|SET\\s*CURRENCY|SET\\s*CURSOR|SET\\s*DATE|SET\\s*DEBUG|SET\\s*DECIMALS|SET\\s*DEFAULT|SET\\s*DELETED|SET\\s*DELIMITERS|SET\\s*DEVELOPMENT|SET\\s*DEVICE|SET\\s*DISPLAY|SET\\s*DOHISTORY|SET\\s*ECHO|SET\\s*ESCAPE|SET\\s*EXACT|SET\\s*EXCLUSIVE|SET\\s*FIELDS|SET\\s*FILTER|SET\\s*FIXED|SET\\s*FORMAT|SET\\s*FULLPATH|SET\\s*FUNCTION|SET\\s*HEADINGS|SET\\s*HELP|SET\\s*HELPFILTER|SET\\s*HOURS|SET\\s*INDEX|SET\\s*INTENSITY|SET\\s*KEY|SET\\s*KEYCOMP|SET\\s*LIBRARY|SET\\s*LOCK|SET\\s*LOGERRORS|SET\\s*MACDESKTOP|SET\\s*MACHELP|SET\\s*MACKEY|SET\\s*MARGIN|SET\\s*MARK\\s*OF|SET\\s*MARK\\s*TO|SET\\s*MEMOWIDTH|SET\\s*MESSAGE|SET\\s*MOUSE|SET\\s*MULTILOCKS|SET\\s*NEAR|SET\\s*NOCPTRANS|SET\\s*NOTIFY|SET\\s*ODOMETER|SET\\s*OPTIMIZE|SET\\s*ORDER|SET\\s*PALETTE|SET\\s*PATH|SET\\s*PDSETUP|SET\\s*POINT|SET\\s*PRINTER|SET\\s*PROCEDURE|SET\\s*READBORDER|SET\\s*REFRESH|SET\\s*RELATION|SET\\s*RELATION\\s*OFF|SET\\s*REPROCESS|SET\\s*RESOURCE|SET\\s*SAFETY|SET\\s*SCOREBOARD|SET\\s*SEPARATOR|SET\\s*SHADOWS|SET\\s*SKIP|SET\\s*SKIP\\s*OF|SET\\s*SPACE|SET\\s*STATUS|SET\\s*STATUS\\s*BAR|SET\\s*STEP|SET\\s*STICKY|SET\\s*SYSMENU|SET\\s*TALK|SET\\s*TEXTMERGE|SET\\s*TEXTMERGE\\s*DELIMITERS|SET\\s*TOPIC|SET\\s*TRBETWEEN|SET\\s*TYPEAHEAD|SET\\s*UDFPARMS|SET\\s*UNIQUE|SET\\s*VIEW|SET\\s*VOLUME|SET\\s*WINDOW\\s*OF\\s*MEMO|SET\\s*XCMDFILE|SHOW\\s*GET|SHOW\\s*GETS|SHOW\\s*MENU|SHOW\\s*OBJECT|SHOW\\s*POPUP|SHOW\\s*WINDOW|SIZE\\s*POPUP|SKIP|SORT|STORE|SUM|SUSPEND|TOTAL|TYPE|UNLOCK|UPDATE|USE|WAIT|ZAP|ZOOM\\s*WINDOW|DO\\s*CASE|CASE|OTHERWISE|ENDCASE|DO\\s*WHILE|ENDDO|FOR|ENDFOR|NEXT|IF|ELSE|ENDIF|PRINTJOB|ENDPRINTJOB|SCAN|ENDSCAN|TEXT|ENDTEXT|=)', Keyword.Reserved, '#pop'), ('#\\s*(IF|ELIF|ELSE|ENDIF|DEFINE|IFDEF|IFNDEF|INCLUDE)', Comment.Preproc, '#pop'), ('(m\\.)?[a-z_]\\w*', Name.Variable, '#pop'), ('.', Text, '#pop')]}
  }

  class FreeFemLexer {
      + name = 'Freefem'
      + url = 'https://freefem.org/'
      + aliases = ['freefem']
      + filenames = ['*.edp']
      + mimetypes = ['text/x-freefem']
      + version_added = '2.4'
      + operators = {'+', '-', '*', '.*', '/', './', '%', '^', '^-1', ':', "'"}
      + types = {'bool', 'border', 'complex', 'dmatrix', 'fespace', 'func', 'gslspline', 'ifstream', 'int', 'macro', 'matrix', 'mesh', 'mesh3', 'mpiComm', 'mpiGroup', 'mpiRequest', 'NewMacro', 'EndMacro', 'ofstream', 'Pmmap', 'problem', 'Psemaphore', 'real', 'solve', 'string', 'varf'}
      + fespaces = {'BDM1', 'BDM1Ortho', 'Edge03d', 'Edge13d', 'Edge23d', 'FEQF', 'HCT', 'P0', 'P03d', 'P0Edge', 'P1', 'P13d', 'P1b', 'P1b3d', 'P1bl', 'P1bl3d', 'P1dc', 'P1Edge', 'P1nc', 'P2', 'P23d', 'P2b', 'P2BR', 'P2dc', 'P2Edge', 'P2h', 'P2Morley', 'P2pnc', 'P3', 'P3dc', 'P3Edge', 'P4', 'P4dc', 'P4Edge', 'P5Edge', 'RT0', 'RT03d', 'RT0Ortho', 'RT1', 'RT1Ortho', 'RT2', 'RT2Ortho'}
      + preprocessor = {'ENDIFMACRO', 'include', 'IFMACRO', 'load'}
      + keywords = {'adj', 'append', 'area', 'ARGV', 'be', 'binary', 'BoundaryEdge', 'bordermeasure', 'CG', 'Cholesky', 'cin', 'cout', 'Crout', 'default', 'diag', 'edgeOrientation', 'endl', 'false', 'ffind', 'FILE', 'find', 'fixed', 'flush', 'GMRES', 'good', 'hTriangle', 'im', 'imax', 'imin', 'InternalEdge', 'l1', 'l2', 'label', 'lenEdge', 'length', 'LINE', 'linfty', 'LU', 'm', 'max', 'measure', 'min', 'mpiAnySource', 'mpiBAND', 'mpiBXOR', 'mpiCommWorld', 'mpiLAND', 'mpiLOR', 'mpiLXOR', 'mpiMAX', 'mpiMIN', 'mpiPROD', 'mpirank', 'mpisize', 'mpiSUM', 'mpiUndefined', 'n', 'N', 'nbe', 'ndof', 'ndofK', 'noshowbase', 'noshowpos', 'notaregion', 'nt', 'nTonEdge', 'nuEdge', 'nuTriangle', 'nv', 'P', 'pi', 'precision', 'qf1pE', 'qf1pElump', 'qf1pT', 'qf1pTlump', 'qfV1', 'qfV1lump', 'qf2pE', 'qf2pT', 'qf2pT4P1', 'qfV2', 'qf3pE', 'qf4pE', 'qf5pE', 'qf5pT', 'qfV5', 'qf7pT', 'qf9pT', 'qfnbpE', 'quantile', 're', 'region', 'rfind', 'scientific', 'searchMethod', 'setw', 'showbase', 'showpos', 'sparsesolver', 'sum', 'tellp', 'true', 'UMFPACK', 'unused', 'whoinElement', 'verbosity', 'version', 'volume', 'x', 'y', 'z'}
      + functions = {'abs', 'acos', 'acosh', 'adaptmesh', 'adj', 'AffineCG', 'AffineGMRES', 'arg', 'asin', 'asinh', 'assert', 'atan', 'atan2', 'atanh', 'atof', 'atoi', 'BFGS', 'broadcast', 'buildlayers', 'buildmesh', 'ceil', 'chi', 'complexEigenValue', 'copysign', 'change', 'checkmovemesh', 'clock', 'cmaes', 'conj', 'convect', 'cos', 'cosh', 'cube', 'd', 'dd', 'dfft', 'diffnp', 'diffpos', 'dimKrylov', 'dist', 'dumptable', 'dx', 'dxx', 'dxy', 'dxz', 'dy', 'dyx', 'dyy', 'dyz', 'dz', 'dzx', 'dzy', 'dzz', 'EigenValue', 'emptymesh', 'erf', 'erfc', 'exec', 'exit', 'exp', 'fdim', 'floor', 'fmax', 'fmin', 'fmod', 'freeyams', 'getARGV', 'getline', 'gmshload', 'gmshload3', 'gslcdfugaussianP', 'gslcdfugaussianQ', 'gslcdfugaussianPinv', 'gslcdfugaussianQinv', 'gslcdfgaussianP', 'gslcdfgaussianQ', 'gslcdfgaussianPinv', 'gslcdfgaussianQinv', 'gslcdfgammaP', 'gslcdfgammaQ', 'gslcdfgammaPinv', 'gslcdfgammaQinv', 'gslcdfcauchyP', 'gslcdfcauchyQ', 'gslcdfcauchyPinv', 'gslcdfcauchyQinv', 'gslcdflaplaceP', 'gslcdflaplaceQ', 'gslcdflaplacePinv', 'gslcdflaplaceQinv', 'gslcdfrayleighP', 'gslcdfrayleighQ', 'gslcdfrayleighPinv', 'gslcdfrayleighQinv', 'gslcdfchisqP', 'gslcdfchisqQ', 'gslcdfchisqPinv', 'gslcdfchisqQinv', 'gslcdfexponentialP', 'gslcdfexponentialQ', 'gslcdfexponentialPinv', 'gslcdfexponentialQinv', 'gslcdfexppowP', 'gslcdfexppowQ', 'gslcdftdistP', 'gslcdftdistQ', 'gslcdftdistPinv', 'gslcdftdistQinv', 'gslcdffdistP', 'gslcdffdistQ', 'gslcdffdistPinv', 'gslcdffdistQinv', 'gslcdfbetaP', 'gslcdfbetaQ', 'gslcdfbetaPinv', 'gslcdfbetaQinv', 'gslcdfflatP', 'gslcdfflatQ', 'gslcdfflatPinv', 'gslcdfflatQinv', 'gslcdflognormalP', 'gslcdflognormalQ', 'gslcdflognormalPinv', 'gslcdflognormalQinv', 'gslcdfgumbel1P', 'gslcdfgumbel1Q', 'gslcdfgumbel1Pinv', 'gslcdfgumbel1Qinv', 'gslcdfgumbel2P', 'gslcdfgumbel2Q', 'gslcdfgumbel2Pinv', 'gslcdfgumbel2Qinv', 'gslcdfweibullP', 'gslcdfweibullQ', 'gslcdfweibullPinv', 'gslcdfweibullQinv', 'gslcdfparetoP', 'gslcdfparetoQ', 'gslcdfparetoPinv', 'gslcdfparetoQinv', 'gslcdflogisticP', 'gslcdflogisticQ', 'gslcdflogisticPinv', 'gslcdflogisticQinv', 'gslcdfbinomialP', 'gslcdfbinomialQ', 'gslcdfpoissonP', 'gslcdfpoissonQ', 'gslcdfgeometricP', 'gslcdfgeometricQ', 'gslcdfnegativebinomialP', 'gslcdfnegativebinomialQ', 'gslcdfpascalP', 'gslcdfpascalQ', 'gslinterpakima', 'gslinterpakimaperiodic', 'gslinterpcsplineperiodic', 'gslinterpcspline', 'gslinterpsteffen', 'gslinterplinear', 'gslinterppolynomial', 'gslranbernoullipdf', 'gslranbeta', 'gslranbetapdf', 'gslranbinomialpdf', 'gslranexponential', 'gslranexponentialpdf', 'gslranexppow', 'gslranexppowpdf', 'gslrancauchy', 'gslrancauchypdf', 'gslranchisq', 'gslranchisqpdf', 'gslranerlang', 'gslranerlangpdf', 'gslranfdist', 'gslranfdistpdf', 'gslranflat', 'gslranflatpdf', 'gslrangamma', 'gslrangammaint', 'gslrangammapdf', 'gslrangammamt', 'gslrangammaknuth', 'gslrangaussian', 'gslrangaussianratiomethod', 'gslrangaussianziggurat', 'gslrangaussianpdf', 'gslranugaussian', 'gslranugaussianratiomethod', 'gslranugaussianpdf', 'gslrangaussiantail', 'gslrangaussiantailpdf', 'gslranugaussiantail', 'gslranugaussiantailpdf', 'gslranlandau', 'gslranlandaupdf', 'gslrangeometricpdf', 'gslrangumbel1', 'gslrangumbel1pdf', 'gslrangumbel2', 'gslrangumbel2pdf', 'gslranlogistic', 'gslranlogisticpdf', 'gslranlognormal', 'gslranlognormalpdf', 'gslranlogarithmicpdf', 'gslrannegativebinomialpdf', 'gslranpascalpdf', 'gslranpareto', 'gslranparetopdf', 'gslranpoissonpdf', 'gslranrayleigh', 'gslranrayleighpdf', 'gslranrayleightail', 'gslranrayleightailpdf', 'gslrantdist', 'gslrantdistpdf', 'gslranlaplace', 'gslranlaplacepdf', 'gslranlevy', 'gslranweibull', 'gslranweibullpdf', 'gslsfairyAi', 'gslsfairyBi', 'gslsfairyAiscaled', 'gslsfairyBiscaled', 'gslsfairyAideriv', 'gslsfairyBideriv', 'gslsfairyAiderivscaled', 'gslsfairyBiderivscaled', 'gslsfairyzeroAi', 'gslsfairyzeroBi', 'gslsfairyzeroAideriv', 'gslsfairyzeroBideriv', 'gslsfbesselJ0', 'gslsfbesselJ1', 'gslsfbesselJn', 'gslsfbesselY0', 'gslsfbesselY1', 'gslsfbesselYn', 'gslsfbesselI0', 'gslsfbesselI1', 'gslsfbesselIn', 'gslsfbesselI0scaled', 'gslsfbesselI1scaled', 'gslsfbesselInscaled', 'gslsfbesselK0', 'gslsfbesselK1', 'gslsfbesselKn', 'gslsfbesselK0scaled', 'gslsfbesselK1scaled', 'gslsfbesselKnscaled', 'gslsfbesselj0', 'gslsfbesselj1', 'gslsfbesselj2', 'gslsfbesseljl', 'gslsfbessely0', 'gslsfbessely1', 'gslsfbessely2', 'gslsfbesselyl', 'gslsfbesseli0scaled', 'gslsfbesseli1scaled', 'gslsfbesseli2scaled', 'gslsfbesselilscaled', 'gslsfbesselk0scaled', 'gslsfbesselk1scaled', 'gslsfbesselk2scaled', 'gslsfbesselklscaled', 'gslsfbesselJnu', 'gslsfbesselYnu', 'gslsfbesselInuscaled', 'gslsfbesselInu', 'gslsfbesselKnuscaled', 'gslsfbesselKnu', 'gslsfbessellnKnu', 'gslsfbesselzeroJ0', 'gslsfbesselzeroJ1', 'gslsfbesselzeroJnu', 'gslsfclausen', 'gslsfhydrogenicR1', 'gslsfdawson', 'gslsfdebye1', 'gslsfdebye2', 'gslsfdebye3', 'gslsfdebye4', 'gslsfdebye5', 'gslsfdebye6', 'gslsfdilog', 'gslsfmultiply', 'gslsfellintKcomp', 'gslsfellintEcomp', 'gslsfellintPcomp', 'gslsfellintDcomp', 'gslsfellintF', 'gslsfellintE', 'gslsfellintRC', 'gslsferfc', 'gslsflogerfc', 'gslsferf', 'gslsferfZ', 'gslsferfQ', 'gslsfhazard', 'gslsfexp', 'gslsfexpmult', 'gslsfexpm1', 'gslsfexprel', 'gslsfexprel2', 'gslsfexpreln', 'gslsfexpintE1', 'gslsfexpintE2', 'gslsfexpintEn', 'gslsfexpintE1scaled', 'gslsfexpintE2scaled', 'gslsfexpintEnscaled', 'gslsfexpintEi', 'gslsfexpintEiscaled', 'gslsfShi', 'gslsfChi', 'gslsfexpint3', 'gslsfSi', 'gslsfCi', 'gslsfatanint', 'gslsffermidiracm1', 'gslsffermidirac0', 'gslsffermidirac1', 'gslsffermidirac2', 'gslsffermidiracint', 'gslsffermidiracmhalf', 'gslsffermidirachalf', 'gslsffermidirac3half', 'gslsffermidiracinc0', 'gslsflngamma', 'gslsfgamma', 'gslsfgammastar', 'gslsfgammainv', 'gslsftaylorcoeff', 'gslsffact', 'gslsfdoublefact', 'gslsflnfact', 'gslsflndoublefact', 'gslsflnchoose', 'gslsfchoose', 'gslsflnpoch', 'gslsfpoch', 'gslsfpochrel', 'gslsfgammaincQ', 'gslsfgammaincP', 'gslsfgammainc', 'gslsflnbeta', 'gslsfbeta', 'gslsfbetainc', 'gslsfgegenpoly1', 'gslsfgegenpoly2', 'gslsfgegenpoly3', 'gslsfgegenpolyn', 'gslsfhyperg0F1', 'gslsfhyperg1F1int', 'gslsfhyperg1F1', 'gslsfhypergUint', 'gslsfhypergU', 'gslsfhyperg2F0', 'gslsflaguerre1', 'gslsflaguerre2', 'gslsflaguerre3', 'gslsflaguerren', 'gslsflambertW0', 'gslsflambertWm1', 'gslsflegendrePl', 'gslsflegendreP1', 'gslsflegendreP2', 'gslsflegendreP3', 'gslsflegendreQ0', 'gslsflegendreQ1', 'gslsflegendreQl', 'gslsflegendrePlm', 'gslsflegendresphPlm', 'gslsflegendrearraysize', 'gslsfconicalPhalf', 'gslsfconicalPmhalf', 'gslsfconicalP0', 'gslsfconicalP1', 'gslsfconicalPsphreg', 'gslsfconicalPcylreg', 'gslsflegendreH3d0', 'gslsflegendreH3d1', 'gslsflegendreH3d', 'gslsflog', 'gslsflogabs', 'gslsflog1plusx', 'gslsflog1plusxmx', 'gslsfpowint', 'gslsfpsiint', 'gslsfpsi', 'gslsfpsi1piy', 'gslsfpsi1int', 'gslsfpsi1', 'gslsfpsin', 'gslsfsynchrotron1', 'gslsfsynchrotron2', 'gslsftransport2', 'gslsftransport3', 'gslsftransport4', 'gslsftransport5', 'gslsfsin', 'gslsfcos', 'gslsfhypot', 'gslsfsinc', 'gslsflnsinh', 'gslsflncosh', 'gslsfanglerestrictsymm', 'gslsfanglerestrictpos', 'gslsfzetaint', 'gslsfzeta', 'gslsfzetam1', 'gslsfzetam1int', 'gslsfhzeta', 'gslsfetaint', 'gslsfeta', 'imag', 'int1d', 'int2d', 'int3d', 'intalledges', 'intallfaces', 'interpolate', 'invdiff', 'invdiffnp', 'invdiffpos', 'Isend', 'isInf', 'isNaN', 'isoline', 'Irecv', 'j0', 'j1', 'jn', 'jump', 'lgamma', 'LinearCG', 'LinearGMRES', 'log', 'log10', 'lrint', 'lround', 'max', 'mean', 'medit', 'min', 'mmg3d', 'movemesh', 'movemesh23', 'mpiAlltoall', 'mpiAlltoallv', 'mpiAllgather', 'mpiAllgatherv', 'mpiAllReduce', 'mpiBarrier', 'mpiGather', 'mpiGatherv', 'mpiRank', 'mpiReduce', 'mpiScatter', 'mpiScatterv', 'mpiSize', 'mpiWait', 'mpiWaitAny', 'mpiWtick', 'mpiWtime', 'mshmet', 'NaN', 'NLCG', 'on', 'plot', 'polar', 'Post', 'pow', 'processor', 'processorblock', 'projection', 'randinit', 'randint31', 'randint32', 'random', 'randreal1', 'randreal2', 'randreal3', 'randres53', 'Read', 'readmesh', 'readmesh3', 'Recv', 'rint', 'round', 'savemesh', 'savesol', 'savevtk', 'seekg', 'Sent', 'set', 'sign', 'signbit', 'sin', 'sinh', 'sort', 'splitComm', 'splitmesh', 'sqrt', 'square', 'srandom', 'srandomdev', 'Stringification', 'swap', 'system', 'tan', 'tanh', 'tellg', 'tetg', 'tetgconvexhull', 'tetgreconstruction', 'tetgtransfo', 'tgamma', 'triangulate', 'trunc', 'Wait', 'Write', 'y0', 'y1', 'yn'}
      + parameters = {'A', 'A1', 'abserror', 'absolute', 'aniso', 'aspectratio', 'B', 'B1', 'bb', 'beginend', 'bin', 'boundary', 'bw', 'close', 'cmm', 'coef', 'composante', 'cutoff', 'datafilename', 'dataname', 'dim', 'distmax', 'displacement', 'doptions', 'dparams', 'eps', 'err', 'errg', 'facemerge', 'facetcl', 'factorize', 'file', 'fill', 'fixedborder', 'flabel', 'flags', 'floatmesh', 'floatsol', 'fregion', 'gradation', 'grey', 'hmax', 'hmin', 'holelist', 'hsv', 'init', 'inquire', 'inside', 'IsMetric', 'iso', 'ivalue', 'keepbackvertices', 'label', 'labeldown', 'labelmid', 'labelup', 'levelset', 'loptions', 'lparams', 'maxit', 'maxsubdiv', 'meditff', 'mem', 'memory', 'metric', 'mode', 'nbarrow', 'nbiso', 'nbiter', 'nbjacoby', 'nboffacetcl', 'nbofholes', 'nbofregions', 'nbregul', 'nbsmooth', 'nbvx', 'ncv', 'nev', 'nomeshgeneration', 'normalization', 'omega', 'op', 'optimize', 'option', 'options', 'order', 'orientation', 'periodic', 'power', 'precon', 'prev', 'ps', 'ptmerge', 'qfe', 'qforder', 'qft', 'qfV', 'ratio', 'rawvector', 'reffacelow', 'reffacemid', 'reffaceup', 'refnum', 'reftet', 'reftri', 'region', 'regionlist', 'renumv', 'rescaling', 'ridgeangle', 'save', 'sigma', 'sizeofvolume', 'smoothing', 'solver', 'sparams', 'split', 'splitin2', 'splitpbedge', 'stop', 'strategy', 'swap', 'switch', 'sym', 't', 'tgv', 'thetamax', 'tol', 'tolpivot', 'tolpivotsym', 'transfo', 'U2Vc', 'value', 'varrow', 'vector', 'veps', 'viso', 'wait', 'width', 'withsurfacemesh', 'WindowIndex', 'which', 'zbound'}
      + deprecated = {'fixeborder'}
      + suppress_highlight = {'alignof', 'asm', 'constexpr', 'decltype', 'div', 'double', 'grad', 'mutable', 'namespace', 'noexcept', 'restrict', 'static_assert', 'template', 'this', 'thread_local', 'typeid', 'typename', 'using'}
  --
      + get_tokens_unprocessed(text, stack = ('root',))
  }

  class FuncLexer {
      + name = 'FunC'
      + aliases = ['func', 'fc']
      + filenames = ['*.fc', '*.func']
      + url = 'https://docs.ton.org/develop/func/overview'
      + version_added = ''
      + identifier = '(?!")(`([^`]+)`|((?=_)_|(?=\\{)\\{|(?=\\})\\}|(?![_`{}]))([^;,\\[\\]\\(\\)\\s~.]+))'
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), include('keywords'), include('strings'), include('directives'), include('numeric'), include('comments'), include('storage'), include('functions'), include('variables'), ('[.;(),\\[\\]~{}]', Punctuation)], 'keywords': [(words(('<=>', '>=', '<=', '!=', '==', '^>>', '~>>', '>>', '<<', '/%', '^%', '~%', '^/', '~/', '+=', '-=', '*=', '/=', '~/=', '^/=', '%=', '^%=', '<<=', '>>=', '~>>=', '^>>=', '&=', '|=', '^=', '^', '=', '~', '/', '%', '-', '*', '+', '>', '<', '&', '|', ':', '?'), prefix='(?<=\\s)', suffix='(?=\\s)'), Operator), (words(('if', 'ifnot', 'else', 'elseif', 'elseifnot', 'while', 'do', 'until', 'repeat', 'return', 'impure', 'method_id', 'forall', 'asm', 'inline', 'inline_ref'), prefix='\\b', suffix='\\b'), Keyword), (words(('true', 'false'), prefix='\\b', suffix='\\b'), Keyword.Constant)], 'directives': [('#include|#pragma', Keyword, 'directive')], 'directive': [include('strings'), ('\\s+', Whitespace), ('version|not-version', Keyword), ('(>=|<=|=|>|<|\\^)?([0-9]+)(.[0-9]+)?(.[0-9]+)?', Number), (';', Text, '#pop')], 'strings': [('\\"([^\\n\\"]+)\\"[Hhcusa]?', String)], 'numeric': [('\\b(-?(?!_)([\\d_]+|0x[\\d_a-fA-F]+)|0b[1_0]+)(?<!_)(?=[\\s\\)\\],;])', Number)], 'comments': [(';;([^\\n]*)', Comment.Singleline), ('\\{-', Comment.Multiline, 'comment')], 'comment': [('[^-}{]+', Comment.Multiline), ('\\{-', Comment.Multiline, '#push'), ('-\\}', Comment.Multiline, '#pop'), ('[-}{]', Comment.Multiline)], 'storage': [(words(('var', 'int', 'slice', 'tuple', 'cell', 'builder', 'cont', '_'), prefix='\\b', suffix='(?=[\\s\\(\\),\\[\\]])'), Keyword.Type), (words(('global', 'const'), prefix='\\b', suffix='\\b'), Keyword.Constant)], 'variables': [(identifier, Name.Variable)], 'functions': [(identifier + '(?=[\\(])', Name.Function)]}
  }

  class FutharkLexer {
      + name = 'Futhark'
      + url = 'https://futhark-lang.org/'
      + aliases = ['futhark']
      + filenames = ['*.fut']
      + mimetypes = ['text/x-futhark']
      + version_added = '2.8'
      + num_types = ('i8', 'i16', 'i32', 'i64', 'u8', 'u16', 'u32', 'u64', 'f32', 'f64')
      + other_types = ('bool',)
      + reserved = ('if', 'then', 'else', 'def', 'let', 'loop', 'in', 'with', 'type', 'type~', 'type^', 'val', 'entry', 'for', 'while', 'do', 'case', 'match', 'include', 'import', 'module', 'open', 'local', 'assert', '_')
      + ascii = ('NUL', 'SOH', '[SE]TX', 'EOT', 'ENQ', 'ACK', 'BEL', 'BS', 'HT', 'LF', 'VT', 'FF', 'CR', 'S[OI]', 'DLE', 'DC[1-4]', 'NAK', 'SYN', 'ETB', 'CAN', 'EM', 'SUB', 'ESC', '[FGRU]S', 'SP', 'DEL')
      + num_postfix = '({})?'.format('|'.join(num_types))
      + identifier_re = "[a-zA-Z_][a-zA-Z_0-9']*"
      + tokens = {'root': [('--(.*?)$', Comment.Single), ('\\s+', Whitespace), ('\\(\\)', Punctuation), ("\\b({})(?!\\')\\b".format('|'.join(reserved)), Keyword.Reserved), ("\\b({})(?!\\')\\b".format('|'.join(num_types + other_types)), Keyword.Type), ('#\\[([a-zA-Z_\\(\\) ]*)\\]', Comment.Preproc), (f'[#!]?({identifier_re}\\.)*{identifier_re}', Name), ('\\\\', Operator), ('[-+/%=!><|&*^][-+/%=!><|&*^.]*', Operator), ("[][(),:;`{}?.\\'~^]", Punctuation), ('0[xX]_*[\\da-fA-F](_*[\\da-fA-F])*_*[pP][+-]?\\d(_*\\d)*' + num_postfix, Number.Float), ('0[xX]_*[\\da-fA-F](_*[\\da-fA-F])*\\.[\\da-fA-F](_*[\\da-fA-F])*(_*[pP][+-]?\\d(_*\\d)*)?' + num_postfix, Number.Float), ('\\d(_*\\d)*_*[eE][+-]?\\d(_*\\d)*' + num_postfix, Number.Float), ('\\d(_*\\d)*\\.\\d(_*\\d)*(_*[eE][+-]?\\d(_*\\d)*)?' + num_postfix, Number.Float), ('0[bB]_*[01](_*[01])*' + num_postfix, Number.Bin), ('0[xX]_*[\\da-fA-F](_*[\\da-fA-F])*' + num_postfix, Number.Hex), ('\\d(_*\\d)*' + num_postfix, Number.Integer), ("'", String.Char, 'character'), ('"', String, 'string'), ('\\[[a-zA-Z_\\d]*\\]', Keyword.Type), ('\\(\\)', Name.Builtin)], 'character': [("[^\\\\']'", String.Char, '#pop'), ('\\\\', String.Escape, 'escape'), ("'", String.Char, '#pop')], 'string': [('[^\\\\"]+', String), ('\\\\', String.Escape, 'escape'), ('"', String, '#pop')], 'escape': [('[abfnrtv"\\\'&\\\\]', String.Escape, '#pop'), ('\\^[][' + uni.Lu + '@^_]', String.Escape, '#pop'), ('|'.join(ascii), String.Escape, '#pop'), ('o[0-7]+', String.Escape, '#pop'), ('x[\\da-fA-F]+', String.Escape, '#pop'), ('\\d+', String.Escape, '#pop'), ('(\\s+)(\\\\)', bygroups(Whitespace, String.Escape), '#pop')]}
  }

  class GcodeLexer {
      + name = 'g-code'
      + aliases = ['gcode']
      + filenames = ['*.gcode']
      + url = 'https://en.wikipedia.org/wiki/G-code'
      + version_added = '2.9'
      + tokens = {'root': [(';.*\\n', Comment), ('^[gmGM]\\d{1,4}\\s', Name.Builtin), ('([^gGmM])([+-]?\\d*[.]?\\d+)', bygroups(Keyword, Number)), ('\\s', Text.Whitespace), ('.*\\n', Text)]}
  }

  class GDScriptLexer {
      + name = 'GDScript'
      + url = 'https://www.godotengine.org'
      + aliases = ['gdscript', 'gd']
      + filenames = ['*.gd']
      + mimetypes = ['text/x-gdscript', 'application/x-gdscript']
      + version_added = ''
      + tokens = {'root': [('\\n', Whitespace), ('^(\\s*)([rRuUbB]{,2})("""(?:.|\\n)*?""")', bygroups(Whitespace, String.Affix, String.Doc)), ("^(\\s*)([rRuUbB]{,2})('''(?:.|\\n)*?''')", bygroups(Whitespace, String.Affix, String.Doc)), ('[^\\S\\n]+', Whitespace), ('#.*$', Comment.Single), ('[]{}:(),;[]', Punctuation), ('(\\\\)(\\n)', bygroups(Text, Whitespace)), ('\\\\', Text), ('(in|and|or|not)\\b', Operator.Word), ('!=|==|<<|>>|&&|\\+=|-=|\\*=|/=|%=|&=|\\|=|\\|\\||[-~+/*%=<>&^.!|$]', Operator), include('keywords'), ('(func)(\\s+)', bygroups(Keyword, Whitespace), 'funcname'), ('(class)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), include('builtins'), ('([rR]|[uUbB][rR]|[rR][uUbB])(""")', bygroups(String.Affix, String.Double), 'tdqs'), ("([rR]|[uUbB][rR]|[rR][uUbB])(''')", bygroups(String.Affix, String.Single), 'tsqs'), ('([rR]|[uUbB][rR]|[rR][uUbB])(")', bygroups(String.Affix, String.Double), 'dqs'), ("([rR]|[uUbB][rR]|[rR][uUbB])(')", bygroups(String.Affix, String.Single), 'sqs'), ('([uUbB]?)(""")', bygroups(String.Affix, String.Double), combined('stringescape', 'tdqs')), ("([uUbB]?)(''')", bygroups(String.Affix, String.Single), combined('stringescape', 'tsqs')), ('([uUbB]?)(")', bygroups(String.Affix, String.Double), combined('stringescape', 'dqs')), ("([uUbB]?)(')", bygroups(String.Affix, String.Single), combined('stringescape', 'sqs')), include('name'), include('numbers')], 'keywords': [(words(('and', 'in', 'not', 'or', 'as', 'breakpoint', 'class', 'class_name', 'extends', 'is', 'func', 'setget', 'signal', 'tool', 'const', 'enum', 'export', 'onready', 'static', 'var', 'break', 'continue', 'if', 'elif', 'else', 'for', 'pass', 'return', 'match', 'while', 'remote', 'master', 'puppet', 'remotesync', 'mastersync', 'puppetsync'), suffix='\\b'), Keyword)], 'builtins': [(words(('Color8', 'ColorN', 'abs', 'acos', 'asin', 'assert', 'atan', 'atan2', 'bytes2var', 'ceil', 'char', 'clamp', 'convert', 'cos', 'cosh', 'db2linear', 'decimals', 'dectime', 'deg2rad', 'dict2inst', 'ease', 'exp', 'floor', 'fmod', 'fposmod', 'funcref', 'hash', 'inst2dict', 'instance_from_id', 'is_inf', 'is_nan', 'lerp', 'linear2db', 'load', 'log', 'max', 'min', 'nearest_po2', 'pow', 'preload', 'print', 'print_stack', 'printerr', 'printraw', 'prints', 'printt', 'rad2deg', 'rand_range', 'rand_seed', 'randf', 'randi', 'randomize', 'range', 'round', 'seed', 'sign', 'sin', 'sinh', 'sqrt', 'stepify', 'str', 'str2var', 'tan', 'tan', 'tanh', 'type_exist', 'typeof', 'var2bytes', 'var2str', 'weakref', 'yield'), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin), ('((?<!\\.)(self|false|true)|(PI|TAU|NAN|INF))\\b', Name.Builtin.Pseudo), (words(('bool', 'int', 'float', 'String', 'NodePath', 'Vector2', 'Rect2', 'Transform2D', 'Vector3', 'Rect3', 'Plane', 'Quat', 'Basis', 'Transform', 'Color', 'RID', 'Object', 'NodePath', 'Dictionary', 'Array', 'PackedByteArray', 'PackedInt32Array', 'PackedInt64Array', 'PackedFloat32Array', 'PackedFloat64Array', 'PackedStringArray', 'PackedVector2Array', 'PackedVector3Array', 'PackedColorArray', 'null', 'void'), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin.Type)], 'numbers': [('(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?j?', Number.Float), ('\\d+[eE][+-]?[0-9]+j?', Number.Float), ('0[xX][a-fA-F0-9]+', Number.Hex), ('\\d+j?', Number.Integer)], 'name': [('[a-zA-Z_]\\w*', Name)], 'funcname': [('[a-zA-Z_]\\w*', Name.Function, '#pop'), default('#pop')], 'classname': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'stringescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'strings-single': innerstring_rules(String.Single), 'strings-double': innerstring_rules(String.Double), 'dqs': [('"', String.Double, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('strings-double')], 'sqs': [("'", String.Single, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('strings-single')], 'tdqs': [('"""', String.Double, '#pop'), include('strings-double'), ('\\n', Whitespace)], 'tsqs': [("'''", String.Single, '#pop'), include('strings-single'), ('\\n', Whitespace)]}
  --
      + innerstring_rules(ttype)
      + analyse_text(text)
  }

  class GleamLexer {
      + name = 'Gleam'
      + url = 'https://gleam.run/'
      + filenames = ['*.gleam']
      + aliases = ['gleam']
      + mimetypes = ['text/x-gleam']
      + version_added = '2.19'
      + keywords = words(('as', 'assert', 'auto', 'case', 'const', 'delegate', 'derive', 'echo', 'else', 'fn', 'if', 'implement', 'import', 'let', 'macro', 'opaque', 'panic', 'pub', 'test', 'todo', 'type', 'use'), suffix='\\b')
      + tokens = {'root': [('(///.*?)(\\n)', bygroups(String.Doc, Whitespace)), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), (keywords, Keyword), ('([a-zA-Z_]+)(\\.)', bygroups(Keyword, Punctuation)), ('[()\\[\\]{}:;,@]+', Punctuation), ('(#|!=|!|==|\\|>|\\|\\||\\||\\->|<\\-|&&|<<|>>|\\.\\.|\\.|=)', Punctuation), ('(<>|\\+\\.?|\\-\\.?|\\*\\.?|/\\.?|%\\.?|<=\\.?|>=\\.?|<\\.?|>\\.?|=)', Operator), ('"(\\\\"|[^"])*"', String), ('\\b(let)(\\s+)(\\w+)', bygroups(Keyword, Whitespace, Name.Variable)), ('\\b(fn)(\\s+)(\\w+)', bygroups(Keyword, Whitespace, Name.Function)), ('[a-zA-Z_/]\\w*', Name), ('(\\d+(_\\d+)*\\.(?!\\.)(\\d+(_\\d+)*)?|\\.\\d+(_\\d+)*)([eEf][+-]?[0-9]+)?', Number.Float), ('\\d+(_\\d+)*[eEf][+-]?[0-9]+', Number.Float), ('0[xX][a-fA-F0-9]+(_[a-fA-F0-9]+)*(\\.([a-fA-F0-9]+(_[a-fA-F0-9]+)*)?)?p[+-]?\\d+', Number.Float), ('0[bB][01]+(_[01]+)*', Number.Bin), ('0[oO][0-7]+(_[0-7]+)*', Number.Oct), ('0[xX][a-fA-F0-9]+(_[a-fA-F0-9]+)*', Number.Hex), ('\\d+(_\\d+)*', Number.Integer), ('\\s+', Whitespace)]}
  }

  class GoLexer {
      + name = 'Go'
      + url = 'https://go.dev/'
      + filenames = ['*.go']
      + aliases = ['go', 'golang']
      + mimetypes = ['text/x-gosrc']
      + version_added = '1.2'
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), ('(\\\\)(\\n)', bygroups(Text, Whitespace)), ('//(.*?)$', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ('(import|package)\\b', Keyword.Namespace), ('(var|func|struct|map|chan|type|interface|const)\\b', Keyword.Declaration), (words(('break', 'default', 'select', 'case', 'defer', 'go', 'else', 'goto', 'switch', 'fallthrough', 'if', 'range', 'continue', 'for', 'return'), suffix='\\b'), Keyword), ('(true|false|iota|nil)\\b', Keyword.Constant), (words(('uint', 'uint8', 'uint16', 'uint32', 'uint64', 'int', 'int8', 'int16', 'int32', 'int64', 'float', 'float32', 'float64', 'complex64', 'complex128', 'byte', 'rune', 'string', 'bool', 'error', 'uintptr', 'any', 'comparable', 'print', 'println', 'panic', 'recover', 'close', 'complex', 'real', 'imag', 'len', 'cap', 'append', 'copy', 'delete', 'new', 'make', 'min', 'max', 'clear'), suffix='\\b(\\()'), bygroups(Name.Builtin, Punctuation)), (words(('uint', 'uint8', 'uint16', 'uint32', 'uint64', 'int', 'int8', 'int16', 'int32', 'int64', 'float', 'float32', 'float64', 'complex64', 'complex128', 'byte', 'rune', 'string', 'bool', 'error', 'uintptr', 'any', 'comparable'), suffix='\\b'), Keyword.Type), ('\\d+i', Number), ('\\d+\\.\\d*([Ee][-+]\\d+)?i', Number), ('\\.\\d+([Ee][-+]\\d+)?i', Number), ('\\d+[Ee][-+]\\d+i', Number), ('\\d+(\\.\\d+[eE][+\\-]?\\d+|\\.\\d*|[eE][+\\-]?\\d+)', Number.Float), ('\\.\\d+([eE][+\\-]?\\d+)?', Number.Float), ('0[0-7]+', Number.Oct), ('0[xX][0-9a-fA-F]+', Number.Hex), ('(0|[1-9][0-9]*)', Number.Integer), ('\'(\\\\[\'"\\\\abfnrtv]|\\\\x[0-9a-fA-F]{2}|\\\\[0-7]{1,3}|\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}|[^\\\\])\'', String.Char), ('`[^`]*`', String), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('(<<=|>>=|<<|>>|<=|>=|&\\^=|&\\^|\\+=|-=|\\*=|/=|%=|&=|\\|=|&&|\\|\\||<-|\\+\\+|--|==|!=|:=|\\.\\.\\.|[+\\-*/%&]|~|\\|)', Operator), ('[|^<>=!()\\[\\]{}.,;:]', Punctuation), ('[^\\W\\d]\\w*', Name.Other)]}
  }

  class BnfLexer {
      + name = 'BNF'
      + aliases = ['bnf']
      + filenames = ['*.bnf']
      + mimetypes = ['text/x-bnf']
      + url = 'https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form'
      + version_added = '2.1'
      + tokens = {'root': [('(<)([ -;=?-~]+)(>)', bygroups(Punctuation, Name.Class, Punctuation)), ('::=', Operator), ('[^<>:]+', Text), ('.', Text)]}
  }

  class AbnfLexer {
      + name = 'ABNF'
      + url = 'http://www.ietf.org/rfc/rfc7405.txt'
      + aliases = ['abnf']
      + filenames = ['*.abnf']
      + mimetypes = ['text/x-abnf']
      + version_added = '2.1'
      + tokens = {'root': [(';.*$', Comment.Single), ('(%[si])?"[^"]*"', Literal), ('%b[01]+\\-[01]+\\b', Literal), ('%b[01]+(\\.[01]+)*\\b', Literal), ('%d[0-9]+\\-[0-9]+\\b', Literal), ('%d[0-9]+(\\.[0-9]+)*\\b', Literal), ('%x[0-9a-fA-F]+\\-[0-9a-fA-F]+\\b', Literal), ('%x[0-9a-fA-F]+(\\.[0-9a-fA-F]+)*\\b', Literal), ('\\b[0-9]+\\*[0-9]+', Operator), ('\\b[0-9]+\\*', Operator), ('\\b[0-9]+', Operator), ('\\*', Operator), (words(_core_rules, suffix='\\b'), Keyword), ('[a-zA-Z][a-zA-Z0-9-]*\\b', Name.Class), ('(=/|=|/)', Operator), ('[\\[\\]()]', Punctuation), ('\\s+', Whitespace), ('.', Text)]}
  }

  class JsgfLexer {
      + name = 'JSGF'
      + url = 'https://www.w3.org/TR/jsgf/'
      + aliases = ['jsgf']
      + filenames = ['*.jsgf']
      + mimetypes = ['application/jsgf', 'application/x-jsgf', 'text/jsgf']
      + version_added = '2.2'
      + tokens = {'root': [include('comments'), include('non-comments')], 'comments': [('/\\*\\*(?!/)', Comment.Multiline, 'documentation comment'), ('/\\*[\\w\\W]*?\\*/', Comment.Multiline), ('//.*$', Comment.Single)], 'non-comments': [('\\A#JSGF[^;]*', Comment.Preproc), ('\\s+', Whitespace), (';', Punctuation), ('[=|()\\[\\]*+]', Operator), ('/[^/]+/', Number.Float), ('"', String.Double, 'string'), ('\\{', String.Other, 'tag'), (words(('import', 'public'), suffix='\\b'), Keyword.Reserved), ('grammar\\b', Keyword.Reserved, 'grammar name'), ('(<)(NULL|VOID)(>)', bygroups(Punctuation, Name.Builtin, Punctuation)), ('<', Punctuation, 'rulename'), ('\\w+|[^\\s;=|()\\[\\]*+/"{<\\w]+', Text)], 'string': [('"', String.Double, '#pop'), ('\\\\.', String.Escape), ('[^\\\\"]+', String.Double)], 'tag': [('\\}', String.Other, '#pop'), ('\\\\.', String.Escape), ('[^\\\\}]+', String.Other)], 'grammar name': [(';', Punctuation, '#pop'), ('\\s+', Whitespace), ('\\.', Punctuation), ('[^;\\s.]+', Name.Namespace)], 'rulename': [('>', Punctuation, '#pop'), ('\\*', Punctuation), ('\\s+', Whitespace), ('([^.>]+)(\\s*)(\\.)', bygroups(Name.Namespace, Text, Punctuation)), ('[^.>]+', Name.Constant)], 'documentation comment': [('\\*/', Comment.Multiline, '#pop'), ('^(\\s*)(\\*?)(\\s*)(@(?:example|see))(\\s+)([\\w\\W]*?(?=(?:^\\s*\\*?\\s*@|\\*/)))', bygroups(Whitespace, Comment.Multiline, Whitespace, Comment.Special, Whitespace, using(this, state='example'))), ('(^\\s*\\*?\\s*)(@\\S*)', bygroups(Comment.Multiline, Comment.Special)), ('[^*\\n@]+|\\w|\\W', Comment.Multiline)], 'example': [('(\\n\\s*)(\\*)', bygroups(Whitespace, Comment.Multiline)), include('non-comments'), ('.', Comment.Multiline)]}
  }

  class PegLexer {
      + name = 'PEG'
      + url = 'https://bford.info/pub/lang/peg.pdf'
      + aliases = ['peg']
      + filenames = ['*.peg']
      + mimetypes = ['text/x-peg']
      + version_added = '2.6'
      + tokens = {'root': [('#.*$', Comment.Single), ('<-|[←:=/|&!?*+^↑~]', Operator), ('[()]', Punctuation), ('\\.', Keyword), ('(\\[)([^\\]]*(?:\\\\.[^\\]\\\\]*)*)(\\])', bygroups(Punctuation, String, Punctuation)), ('[a-z]?"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"[a-z]*', String.Double), ("[a-z]?'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'[a-z]*", String.Single), ('[^\\s<←:=/|&!?*+\\^↑~()\\[\\]"\\\'#]+', Name.Class), ('.', Text)]}
  }

  class CypherLexer {
      + name = 'Cypher'
      + url = 'https://neo4j.com/docs/developer-manual/3.3/cypher/'
      + aliases = ['cypher']
      + filenames = ['*.cyp', '*.cypher']
      + version_added = '2.0'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': [include('clauses'), include('keywords'), include('relations'), include('strings'), include('whitespace'), include('barewords'), include('comment')], 'keywords': [('(create|order|match|limit|set|skip|start|return|with|where|delete|foreach|not|by|true|false)\\b', Keyword)], 'clauses': [('(create)(\\s+)(index|unique)\\b', bygroups(Keyword, Whitespace, Keyword)), ('(drop)(\\s+)(contraint|index)(\\s+)(on)\\b', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword)), ('(ends)(\\s+)(with)\\b', bygroups(Keyword, Whitespace, Keyword)), ('(is)(\\s+)(node)(\\s+)(key)\\b', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword)), ('(is)(\\s+)(null|unique)\\b', bygroups(Keyword, Whitespace, Keyword)), ('(load)(\\s+)(csv)(\\s+)(from)\\b', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword)), ('(on)(\\s+)(match|create)\\b', bygroups(Keyword, Whitespace, Keyword)), ('(optional)(\\s+)(match)\\b', bygroups(Keyword, Whitespace, Keyword)), ('(order)(\\s+)(by)\\b', bygroups(Keyword, Whitespace, Keyword)), ('(starts)(\\s+)(with)\\b', bygroups(Keyword, Whitespace, Keyword)), ('(union)(\\s+)(all)\\b', bygroups(Keyword, Whitespace, Keyword)), ('(using)(\\s+)(periodic)(\\s+)(commit)\\b', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword)), ('(using)(\\s+)(index)\\b', bygroups(Keyword, Whitespace, Keyword)), ('(using)(\\s+)(range|text|point)(\\s+)(index)\\b', bygroups(Keyword, Whitespace, Name, Whitespace, Keyword)), (words(('all', 'any', 'as', 'asc', 'ascending', 'assert', 'call', 'case', 'create', 'delete', 'desc', 'descending', 'distinct', 'end', 'fieldterminator', 'foreach', 'in', 'limit', 'match', 'merge', 'none', 'not', 'null', 'remove', 'return', 'set', 'skip', 'single', 'start', 'then', 'union', 'unwind', 'yield', 'where', 'when', 'with', 'collect'), suffix='\\b'), Keyword)], 'relations': [('(-\\[)(.*?)(\\]->)', bygroups(Operator, using(this), Operator)), ('(<-\\[)(.*?)(\\]-)', bygroups(Operator, using(this), Operator)), ('(-\\[)(.*?)(\\]-)', bygroups(Operator, using(this), Operator)), ('-->|<--|\\[|\\]', Operator), ('<|>|<>|=|<=|=>|\\(|\\)|\\||:|,|;', Punctuation), ('[.*{}]', Punctuation)], 'strings': [('([\\\'"])(?:\\\\[tbnrf\\\'"\\\\]|[^\\\\])*?\\1', String), ('`(?:``|[^`])+`', Name.Variable)], 'whitespace': [('\\s+', Whitespace)], 'barewords': [('[a-z]\\w*', Name), ('\\d+', Number)], 'comment': [('//.*$', Comment.Single)]}
  }

  class GLShaderLexer {
      + name = 'GLSL'
      + aliases = ['glsl']
      + filenames = ['*.vert', '*.frag', '*.geo']
      + mimetypes = ['text/x-glslsrc']
      + url = 'https://www.khronos.org/api/opengl'
      + version_added = '1.1'
      + tokens = {'root': [('#(?:.*\\\\\\n)*.*$', Comment.Preproc), ('//.*$', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ('\\+|-|~|!=?|\\*|/|%|<<|>>|<=?|>=?|==?|&&?|\\^|\\|\\|?', Operator), ('[?:]', Operator), ('\\bdefined\\b', Operator), ('[;{}(),\\[\\]]', Punctuation), ('[+-]?\\d*\\.\\d+([eE][-+]?\\d+)?', Number.Float), ('[+-]?\\d+\\.\\d*([eE][-+]?\\d+)?', Number.Float), ('0[xX][0-9a-fA-F]*', Number.Hex), ('0[0-7]*', Number.Oct), ('[1-9][0-9]*', Number.Integer), (words(('attribute', 'const', 'uniform', 'varying', 'buffer', 'shared', 'in', 'out', 'layout', 'flat', 'smooth', 'noperspective', 'centroid', 'sample', 'patch', 'inout', 'lowp', 'mediump', 'highp', 'precision', 'invariant', 'precise', 'coherent', 'volatile', 'restrict', 'readonly', 'writeonly', 'break', 'continue', 'do', 'for', 'while', 'switch', 'case', 'default', 'if', 'else', 'subroutine', 'discard', 'return', 'struct'), prefix='\\b', suffix='\\b'), Keyword), (words(('true', 'false'), prefix='\\b', suffix='\\b'), Keyword.Constant), (words(('void', 'atomic_uint', 'float', 'vec2', 'vec3', 'vec4', 'double', 'dvec2', 'dvec3', 'dvec4', 'int', 'ivec2', 'ivec3', 'ivec4', 'uint', 'uvec2', 'uvec3', 'uvec4', 'bool', 'bvec2', 'bvec3', 'bvec4', 'mat2', 'mat3', 'mat4', 'dmat2', 'dmat3', 'dmat4', 'mat2x2', 'mat2x3', 'mat2x4', 'dmat2x2', 'dmat2x3', 'dmat2x4', 'mat3x2', 'mat3x3', 'mat3x4', 'dmat3x2', 'dmat3x3', 'dmat3x4', 'mat4x2', 'mat4x3', 'mat4x4', 'dmat4x2', 'dmat4x3', 'dmat4x4', 'sampler1D', 'sampler2D', 'sampler3D', 'samplerCube', 'sampler1DArray', 'sampler2DArray', 'samplerCubeArray', 'sampler2DRect', 'samplerBuffer', 'sampler2DMS', 'sampler2DMSArray', 'sampler1DShadow', 'sampler2DShadow', 'samplerCubeShadow', 'sampler1DArrayShadow', 'sampler2DArrayShadow', 'samplerCubeArrayShadow', 'sampler2DRectShadow', 'isampler1D', 'isampler2D', 'isampler3D', 'isamplerCube', 'isampler1DArray', 'isampler2DArray', 'isamplerCubeArray', 'isampler2DRect', 'isamplerBuffer', 'isampler2DMS', 'isampler2DMSArray', 'usampler1D', 'usampler2D', 'usampler3D', 'usamplerCube', 'usampler1DArray', 'usampler2DArray', 'usamplerCubeArray', 'usampler2DRect', 'usamplerBuffer', 'usampler2DMS', 'usampler2DMSArray', 'image1D', 'image2D', 'image3D', 'imageCube', 'image1DArray', 'image2DArray', 'imageCubeArray', 'image2DRect', 'imageBuffer', 'image2DMS', 'image2DMSArray', 'iimage1D', 'iimage2D', 'iimage3D', 'iimageCube', 'iimage1DArray', 'iimage2DArray', 'iimageCubeArray', 'iimage2DRect', 'iimageBuffer', 'iimage2DMS', 'iimage2DMSArray', 'uimage1D', 'uimage2D', 'uimage3D', 'uimageCube', 'uimage1DArray', 'uimage2DArray', 'uimageCubeArray', 'uimage2DRect', 'uimageBuffer', 'uimage2DMS', 'uimage2DMSArray'), prefix='\\b', suffix='\\b'), Keyword.Type), (words(('common', 'partition', 'active', 'asm', 'class', 'union', 'enum', 'typedef', 'template', 'this', 'resource', 'goto', 'inline', 'noinline', 'public', 'static', 'extern', 'external', 'interface', 'long', 'short', 'half', 'fixed', 'unsigned', 'superp', 'input', 'output', 'hvec2', 'hvec3', 'hvec4', 'fvec2', 'fvec3', 'fvec4', 'sampler3DRect', 'filter', 'sizeof', 'cast', 'namespace', 'using'), prefix='\\b', suffix='\\b'), Keyword.Reserved), ('gl_\\w*', Name.Builtin), ('[a-zA-Z_]\\w*', Name), ('\\.', Punctuation), ('\\s+', Whitespace)]}
  }

  class HLSLShaderLexer {
      + name = 'HLSL'
      + aliases = ['hlsl']
      + filenames = ['*.hlsl', '*.hlsli']
      + mimetypes = ['text/x-hlsl']
      + url = 'https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl'
      + version_added = '2.3'
      + tokens = {'root': [('#(?:.*\\\\\\n)*.*$', Comment.Preproc), ('//.*$', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ('\\+|-|~|!=?|\\*|/|%|<<|>>|<=?|>=?|==?|&&?|\\^|\\|\\|?', Operator), ('[?:]', Operator), ('\\bdefined\\b', Operator), ('[;{}(),.\\[\\]]', Punctuation), ('[+-]?\\d*\\.\\d+([eE][-+]?\\d+)?f?', Number.Float), ('[+-]?\\d+\\.\\d*([eE][-+]?\\d+)?f?', Number.Float), ('0[xX][0-9a-fA-F]*', Number.Hex), ('0[0-7]*', Number.Oct), ('[1-9][0-9]*', Number.Integer), ('"', String, 'string'), (words(('asm', 'asm_fragment', 'break', 'case', 'cbuffer', 'centroid', 'class', 'column_major', 'compile', 'compile_fragment', 'const', 'continue', 'default', 'discard', 'do', 'else', 'export', 'extern', 'for', 'fxgroup', 'globallycoherent', 'groupshared', 'if', 'in', 'inline', 'inout', 'interface', 'line', 'lineadj', 'linear', 'namespace', 'nointerpolation', 'noperspective', 'NULL', 'out', 'packoffset', 'pass', 'pixelfragment', 'point', 'precise', 'return', 'register', 'row_major', 'sample', 'sampler', 'shared', 'stateblock', 'stateblock_state', 'static', 'struct', 'switch', 'tbuffer', 'technique', 'technique10', 'technique11', 'texture', 'typedef', 'triangle', 'triangleadj', 'uniform', 'vertexfragment', 'volatile', 'while'), prefix='\\b', suffix='\\b'), Keyword), (words(('true', 'false'), prefix='\\b', suffix='\\b'), Keyword.Constant), (words(('auto', 'catch', 'char', 'const_cast', 'delete', 'dynamic_cast', 'enum', 'explicit', 'friend', 'goto', 'long', 'mutable', 'new', 'operator', 'private', 'protected', 'public', 'reinterpret_cast', 'short', 'signed', 'sizeof', 'static_cast', 'template', 'this', 'throw', 'try', 'typename', 'union', 'unsigned', 'using', 'virtual'), prefix='\\b', suffix='\\b'), Keyword.Reserved), (words(('dword', 'matrix', 'snorm', 'string', 'unorm', 'unsigned', 'void', 'vector', 'BlendState', 'Buffer', 'ByteAddressBuffer', 'ComputeShader', 'DepthStencilState', 'DepthStencilView', 'DomainShader', 'GeometryShader', 'HullShader', 'InputPatch', 'LineStream', 'OutputPatch', 'PixelShader', 'PointStream', 'RasterizerState', 'RenderTargetView', 'RasterizerOrderedBuffer', 'RasterizerOrderedByteAddressBuffer', 'RasterizerOrderedStructuredBuffer', 'RasterizerOrderedTexture1D', 'RasterizerOrderedTexture1DArray', 'RasterizerOrderedTexture2D', 'RasterizerOrderedTexture2DArray', 'RasterizerOrderedTexture3D', 'RWBuffer', 'RWByteAddressBuffer', 'RWStructuredBuffer', 'RWTexture1D', 'RWTexture1DArray', 'RWTexture2D', 'RWTexture2DArray', 'RWTexture3D', 'SamplerState', 'SamplerComparisonState', 'StructuredBuffer', 'Texture1D', 'Texture1DArray', 'Texture2D', 'Texture2DArray', 'Texture2DMS', 'Texture2DMSArray', 'Texture3D', 'TextureCube', 'TextureCubeArray', 'TriangleStream', 'VertexShader'), prefix='\\b', suffix='\\b'), Keyword.Type), (words(('bool', 'double', 'float', 'int', 'half', 'min16float', 'min10float', 'min16int', 'min12int', 'min16uint', 'uint'), prefix='\\b', suffix='([1-4](x[1-4])?)?\\b'), Keyword.Type), (words(('abort', 'abs', 'acos', 'all', 'AllMemoryBarrier', 'AllMemoryBarrierWithGroupSync', 'any', 'AppendStructuredBuffer', 'asdouble', 'asfloat', 'asin', 'asint', 'asuint', 'asuint', 'atan', 'atan2', 'ceil', 'CheckAccessFullyMapped', 'clamp', 'clip', 'CompileShader', 'ConsumeStructuredBuffer', 'cos', 'cosh', 'countbits', 'cross', 'D3DCOLORtoUBYTE4', 'ddx', 'ddx_coarse', 'ddx_fine', 'ddy', 'ddy_coarse', 'ddy_fine', 'degrees', 'determinant', 'DeviceMemoryBarrier', 'DeviceMemoryBarrierWithGroupSync', 'distance', 'dot', 'dst', 'errorf', 'EvaluateAttributeAtCentroid', 'EvaluateAttributeAtSample', 'EvaluateAttributeSnapped', 'exp', 'exp2', 'f16tof32', 'f32tof16', 'faceforward', 'firstbithigh', 'firstbitlow', 'floor', 'fma', 'fmod', 'frac', 'frexp', 'fwidth', 'GetRenderTargetSampleCount', 'GetRenderTargetSamplePosition', 'GlobalOrderedCountIncrement', 'GroupMemoryBarrier', 'GroupMemoryBarrierWithGroupSync', 'InterlockedAdd', 'InterlockedAnd', 'InterlockedCompareExchange', 'InterlockedCompareStore', 'InterlockedExchange', 'InterlockedMax', 'InterlockedMin', 'InterlockedOr', 'InterlockedXor', 'isfinite', 'isinf', 'isnan', 'ldexp', 'length', 'lerp', 'lit', 'log', 'log10', 'log2', 'mad', 'max', 'min', 'modf', 'msad4', 'mul', 'noise', 'normalize', 'pow', 'printf', 'Process2DQuadTessFactorsAvg', 'Process2DQuadTessFactorsMax', 'Process2DQuadTessFactorsMin', 'ProcessIsolineTessFactors', 'ProcessQuadTessFactorsAvg', 'ProcessQuadTessFactorsMax', 'ProcessQuadTessFactorsMin', 'ProcessTriTessFactorsAvg', 'ProcessTriTessFactorsMax', 'ProcessTriTessFactorsMin', 'QuadReadLaneAt', 'QuadSwapX', 'QuadSwapY', 'radians', 'rcp', 'reflect', 'refract', 'reversebits', 'round', 'rsqrt', 'saturate', 'sign', 'sin', 'sincos', 'sinh', 'smoothstep', 'sqrt', 'step', 'tan', 'tanh', 'tex1D', 'tex1D', 'tex1Dbias', 'tex1Dgrad', 'tex1Dlod', 'tex1Dproj', 'tex2D', 'tex2D', 'tex2Dbias', 'tex2Dgrad', 'tex2Dlod', 'tex2Dproj', 'tex3D', 'tex3D', 'tex3Dbias', 'tex3Dgrad', 'tex3Dlod', 'tex3Dproj', 'texCUBE', 'texCUBE', 'texCUBEbias', 'texCUBEgrad', 'texCUBElod', 'texCUBEproj', 'transpose', 'trunc', 'WaveAllBitAnd', 'WaveAllMax', 'WaveAllMin', 'WaveAllBitOr', 'WaveAllBitXor', 'WaveAllEqual', 'WaveAllProduct', 'WaveAllSum', 'WaveAllTrue', 'WaveAnyTrue', 'WaveBallot', 'WaveGetLaneCount', 'WaveGetLaneIndex', 'WaveGetOrderedIndex', 'WaveIsHelperLane', 'WaveOnce', 'WavePrefixProduct', 'WavePrefixSum', 'WaveReadFirstLane', 'WaveReadLaneAt'), prefix='\\b', suffix='\\b'), Name.Builtin), (words(('SV_ClipDistance', 'SV_ClipDistance0', 'SV_ClipDistance1', 'SV_Culldistance', 'SV_CullDistance0', 'SV_CullDistance1', 'SV_Coverage', 'SV_Depth', 'SV_DepthGreaterEqual', 'SV_DepthLessEqual', 'SV_DispatchThreadID', 'SV_DomainLocation', 'SV_GroupID', 'SV_GroupIndex', 'SV_GroupThreadID', 'SV_GSInstanceID', 'SV_InnerCoverage', 'SV_InsideTessFactor', 'SV_InstanceID', 'SV_IsFrontFace', 'SV_OutputControlPointID', 'SV_Position', 'SV_PrimitiveID', 'SV_RenderTargetArrayIndex', 'SV_SampleIndex', 'SV_StencilRef', 'SV_TessFactor', 'SV_VertexID', 'SV_ViewportArrayIndex'), prefix='\\b', suffix='\\b'), Name.Decorator), ('\\bSV_Target[0-7]?\\b', Name.Decorator), (words(('allow_uav_condition', 'branch', 'call', 'domain', 'earlydepthstencil', 'fastopt', 'flatten', 'forcecase', 'instance', 'loop', 'maxtessfactor', 'numthreads', 'outputcontrolpoints', 'outputtopology', 'partitioning', 'patchconstantfunc', 'unroll'), prefix='\\b', suffix='\\b'), Name.Decorator), ('[a-zA-Z_]\\w*', Name), ('\\\\$', Comment.Preproc), ('\\s+', Whitespace)], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('\\\\\\n', String), ('\\\\', String)]}
  }

  class PostScriptLexer {
      + name = 'PostScript'
      + url = 'https://en.wikipedia.org/wiki/PostScript'
      + aliases = ['postscript', 'postscr']
      + filenames = ['*.ps', '*.eps']
      + mimetypes = ['application/postscript']
      + version_added = '1.4'
      + delimiter = '()<>\\[\\]{}/%\\s'
      + delimiter_end = f'(?=[{delimiter}])'
      + valid_name_chars = f'[^{delimiter}]'
      + valid_name = f'{valid_name_chars}+{delimiter_end}'
      + tokens = {'root': [('^%!.+$', Comment.Preproc), ('%%.*$', Comment.Special), ('(^%.*\\n){2,}', Comment.Multiline), ('%.*$', Comment.Single), ('\\(', String, 'stringliteral'), ('[{}<>\\[\\]]', Punctuation), ('<[0-9A-Fa-f]+>' + delimiter_end, Number.Hex), ('[0-9]+\\#(\\-|\\+)?([0-9]+\\.?|[0-9]*\\.[0-9]+|[0-9]+\\.[0-9]*)((e|E)[0-9]+)?' + delimiter_end, Number.Oct), ('(\\-|\\+)?([0-9]+\\.?|[0-9]*\\.[0-9]+|[0-9]+\\.[0-9]*)((e|E)[0-9]+)?' + delimiter_end, Number.Float), ('(\\-|\\+)?[0-9]+' + delimiter_end, Number.Integer), (f'\\/{valid_name}', Name.Variable), (valid_name, Name.Function), ('(false|true)' + delimiter_end, Keyword.Constant), ('(eq|ne|g[et]|l[et]|and|or|not|if(?:else)?|for(?:all)?)' + delimiter_end, Keyword.Reserved), (words(('abs', 'add', 'aload', 'arc', 'arcn', 'array', 'atan', 'begin', 'bind', 'ceiling', 'charpath', 'clip', 'closepath', 'concat', 'concatmatrix', 'copy', 'cos', 'currentlinewidth', 'currentmatrix', 'currentpoint', 'curveto', 'cvi', 'cvs', 'def', 'defaultmatrix', 'dict', 'dictstackoverflow', 'div', 'dtransform', 'dup', 'end', 'exch', 'exec', 'exit', 'exp', 'fill', 'findfont', 'floor', 'get', 'getinterval', 'grestore', 'gsave', 'gt', 'identmatrix', 'idiv', 'idtransform', 'index', 'invertmatrix', 'itransform', 'length', 'lineto', 'ln', 'load', 'log', 'loop', 'matrix', 'mod', 'moveto', 'mul', 'neg', 'newpath', 'pathforall', 'pathbbox', 'pop', 'print', 'pstack', 'put', 'quit', 'rand', 'rangecheck', 'rcurveto', 'repeat', 'restore', 'rlineto', 'rmoveto', 'roll', 'rotate', 'round', 'run', 'save', 'scale', 'scalefont', 'setdash', 'setfont', 'setgray', 'setlinecap', 'setlinejoin', 'setlinewidth', 'setmatrix', 'setrgbcolor', 'shfill', 'show', 'showpage', 'sin', 'sqrt', 'stack', 'stringwidth', 'stroke', 'strokepath', 'sub', 'syntaxerror', 'transform', 'translate', 'truncate', 'typecheck', 'undefined', 'undefinedfilename', 'undefinedresult'), suffix=delimiter_end), Name.Builtin), ('\\s+', Whitespace)], 'stringliteral': [('[^()\\\\]+', String), ('\\\\', String.Escape, 'escape'), ('\\(', String, '#push'), ('\\)', String, '#pop')], 'escape': [('[0-8]{3}|n|r|t|b|f|\\\\|\\(|\\)', String.Escape, '#pop'), default('#pop')]}
  }

  class AsymptoteLexer {
      + name = 'Asymptote'
      + url = 'http://asymptote.sf.net/'
      + aliases = ['asymptote', 'asy']
      + filenames = ['*.asy']
      + mimetypes = ['text/x-asymptote']
      + version_added = '1.2'
      + tokens = {'whitespace': [('\\n', Whitespace), ('\\s+', Whitespace), ('(\\\\)(\\n)', bygroups(Text, Whitespace)), ('//(\\n|(.|\\n)*?[^\\\\]\\n)', Comment), ('/(\\\\\\n)?\\*(.|\\n)*?\\*(\\\\\\n)?/', Comment)], 'statements': [('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ("'", String, 'string'), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[lL]?', Number.Float), ('(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float), ('0x[0-9a-fA-F]+[Ll]?', Number.Hex), ('0[0-7]+[Ll]?', Number.Oct), ('\\d+[Ll]?', Number.Integer), ('[~!%^&*+=|?:<>/-]', Operator), ('[()\\[\\],.]', Punctuation), ('\\b(case)(.+?)(:)', bygroups(Keyword, using(this), Text)), ('(and|controls|tension|atleast|curl|if|else|while|for|do|return|break|continue|struct|typedef|new|access|import|unravel|from|include|quote|static|public|private|restricted|this|explicit|true|false|null|cycle|newframe|operator)\\b', Keyword), ('(Braid|FitResult|Label|Legend|TreeNode|abscissa|arc|arrowhead|binarytree|binarytreeNode|block|bool|bool3|bounds|bqe|circle|conic|coord|coordsys|cputime|ellipse|file|filltype|frame|grid3|guide|horner|hsv|hyperbola|indexedTransform|int|inversion|key|light|line|linefit|marginT|marker|mass|object|pair|parabola|path|path3|pen|picture|point|position|projection|real|revolution|scaleT|scientific|segment|side|slice|splitface|string|surface|tensionSpecifier|ticklocate|ticksgridT|tickvalues|transform|transformation|tree|triangle|trilinear|triple|vector|vertex|void)(?=\\s+[a-zA-Z])', Keyword.Type), ('(Braid|FitResult|TreeNode|abscissa|arrowhead|block|bool|bool3|bounds|coord|frame|guide|horner|int|linefit|marginT|pair|pen|picture|position|real|revolution|slice|splitface|ticksgridT|tickvalues|tree|triple|vertex|void)\\b', Keyword.Type), ('[a-zA-Z_]\\w*:(?!:)', Name.Label), ('[a-zA-Z_]\\w*', Name)], 'root': [include('whitespace'), ('((?:[\\w*\\s])+?(?:\\s|\\*))([a-zA-Z_]\\w*)(\\s*\\([^;]*?\\))(' + _ws + ')(\\{)', bygroups(using(this), Name.Function, using(this), using(this), Punctuation), 'function'), ('((?:[\\w*\\s])+?(?:\\s|\\*))([a-zA-Z_]\\w*)(\\s*\\([^;]*?\\))(' + _ws + ')(;)', bygroups(using(this), Name.Function, using(this), using(this), Punctuation)), default('statement')], 'statement': [include('whitespace'), include('statements'), ('[{}]', Punctuation), (';', Punctuation, '#pop')], 'function': [include('whitespace'), include('statements'), (';', Punctuation), ('\\{', Punctuation, '#push'), ('\\}', Punctuation, '#pop')], 'string': [("'", String, '#pop'), ('\\\\([\\\\abfnrtv"\\\'?]|x[a-fA-F0-9]{2,4}|[0-7]{1,3})', String.Escape), ('\\n', String), ("[^\\\\'\\n]+", String), ('\\\\\\n', String), ('\\\\n', String), ('\\\\', String)]}
  --
      + get_tokens_unprocessed(text)
  }

  class GnuplotLexer {
      + name = 'Gnuplot'
      + url = 'http://gnuplot.info/'
      + aliases = ['gnuplot']
      + filenames = ['*.plot', '*.plt']
      + mimetypes = ['text/x-gnuplot']
      + version_added = '0.11'
      + tokens = {'root': [include('whitespace'), (_shortened('bi$nd'), Keyword, 'bind'), (_shortened_many('ex$it', 'q$uit'), Keyword, 'quit'), (_shortened('f$it'), Keyword, 'fit'), ('(if)(\\s*)(\\()', bygroups(Keyword, Text, Punctuation), 'if'), ('else\\b', Keyword), (_shortened('pa$use'), Keyword, 'pause'), (_shortened_many('p$lot', 'rep$lot', 'sp$lot'), Keyword, 'plot'), (_shortened('sa$ve'), Keyword, 'save'), (_shortened('se$t'), Keyword, ('genericargs', 'optionarg')), (_shortened_many('sh$ow', 'uns$et'), Keyword, ('noargs', 'optionarg')), (_shortened_many('low$er', 'ra$ise', 'ca$ll', 'cd$', 'cl$ear', 'h$elp', '\\?$', 'hi$story', 'l$oad', 'pr$int', 'pwd$', 're$read', 'res$et', 'scr$eendump', 'she$ll', 'sy$stem', 'up$date'), Keyword, 'genericargs'), (_shortened_many('pwd$', 're$read', 'res$et', 'scr$eendump', 'she$ll', 'test$'), Keyword, 'noargs'), ('([a-zA-Z_]\\w*)(\\s*)(=)', bygroups(Name.Variable, Whitespace, Operator), 'genericargs'), ('([a-zA-Z_]\\w*)(\\s*)(\\()(.*?)(\\))(\\s*)(=)', bygroups(Name.Function, Whitespace, Punctuation, Text, Punctuation, Whitespace, Operator), 'genericargs'), ('@[a-zA-Z_]\\w*', Name.Constant), (';', Keyword)], 'comment': [('[^\\\\\\n]+', Comment), ('\\\\\\n', Comment), ('\\\\', Comment), default('#pop')], 'whitespace': [('#', Comment, 'comment'), ('[ \\t\\v\\f]+', Whitespace)], 'noargs': [include('whitespace'), (';', Punctuation, '#pop'), ('\\n', Whitespace, '#pop')], 'dqstring': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('\\\\\\n', String), ('\\\\', String), ('\\n', Whitespace, '#pop')], 'sqstring': [("''", String), ("'", String, '#pop'), ("[^\\\\'\\n]+", String), ('\\\\\\n', String), ('\\\\', String), ('\\n', Whitespace, '#pop')], 'genericargs': [include('noargs'), ('"', String, 'dqstring'), ("'", String, 'sqstring'), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+', Number.Float), ('(\\d+\\.\\d*|\\.\\d+)', Number.Float), ('-?\\d+', Number.Integer), ('[,.~!%^&*+=|?:<>/-]', Operator), ('[{}()\\[\\]]', Punctuation), ('(eq|ne)\\b', Operator.Word), ('([a-zA-Z_]\\w*)(\\s*)(\\()', bygroups(Name.Function, Text, Punctuation)), ('[a-zA-Z_]\\w*', Name), ('@[a-zA-Z_]\\w*', Name.Constant), ('(\\\\)(\\n)', bygroups(Text, Whitespace))], 'optionarg': [include('whitespace'), (_shortened_many('a$ll', 'an$gles', 'ar$row', 'au$toscale', 'b$ars', 'bor$der', 'box$width', 'cl$abel', 'c$lip', 'cn$trparam', 'co$ntour', 'da$ta', 'data$file', 'dg$rid3d', 'du$mmy', 'enc$oding', 'dec$imalsign', 'fit$', 'font$path', 'fo$rmat', 'fu$nction', 'fu$nctions', 'g$rid', 'hid$den3d', 'his$torysize', 'is$osamples', 'k$ey', 'keyt$itle', 'la$bel', 'li$nestyle', 'ls$', 'loa$dpath', 'loc$ale', 'log$scale', 'mac$ros', 'map$ping', 'map$ping3d', 'mar$gin', 'lmar$gin', 'rmar$gin', 'tmar$gin', 'bmar$gin', 'mo$use', 'multi$plot', 'mxt$ics', 'nomxt$ics', 'mx2t$ics', 'nomx2t$ics', 'myt$ics', 'nomyt$ics', 'my2t$ics', 'nomy2t$ics', 'mzt$ics', 'nomzt$ics', 'mcbt$ics', 'nomcbt$ics', 'of$fsets', 'or$igin', 'o$utput', 'pa$rametric', 'pm$3d', 'pal$ette', 'colorb$ox', 'p$lot', 'poi$ntsize', 'pol$ar', 'pr$int', 'obj$ect', 'sa$mples', 'si$ze', 'st$yle', 'su$rface', 'table$', 't$erminal', 'termo$ptions', 'ti$cs', 'ticsc$ale', 'ticsl$evel', 'timef$mt', 'tim$estamp', 'tit$le', 'v$ariables', 've$rsion', 'vi$ew', 'xyp$lane', 'xda$ta', 'x2da$ta', 'yda$ta', 'y2da$ta', 'zda$ta', 'cbda$ta', 'xl$abel', 'x2l$abel', 'yl$abel', 'y2l$abel', 'zl$abel', 'cbl$abel', 'xti$cs', 'noxti$cs', 'x2ti$cs', 'nox2ti$cs', 'yti$cs', 'noyti$cs', 'y2ti$cs', 'noy2ti$cs', 'zti$cs', 'nozti$cs', 'cbti$cs', 'nocbti$cs', 'xdti$cs', 'noxdti$cs', 'x2dti$cs', 'nox2dti$cs', 'ydti$cs', 'noydti$cs', 'y2dti$cs', 'noy2dti$cs', 'zdti$cs', 'nozdti$cs', 'cbdti$cs', 'nocbdti$cs', 'xmti$cs', 'noxmti$cs', 'x2mti$cs', 'nox2mti$cs', 'ymti$cs', 'noymti$cs', 'y2mti$cs', 'noy2mti$cs', 'zmti$cs', 'nozmti$cs', 'cbmti$cs', 'nocbmti$cs', 'xr$ange', 'x2r$ange', 'yr$ange', 'y2r$ange', 'zr$ange', 'cbr$ange', 'rr$ange', 'tr$ange', 'ur$ange', 'vr$ange', 'xzeroa$xis', 'x2zeroa$xis', 'yzeroa$xis', 'y2zeroa$xis', 'zzeroa$xis', 'zeroa$xis', 'z$ero'), Name.Builtin, '#pop')], 'bind': [('!', Keyword, '#pop'), (_shortened('all$windows'), Name.Builtin), include('genericargs')], 'quit': [('gnuplot\\b', Keyword), include('noargs')], 'fit': [('via\\b', Name.Builtin), include('plot')], 'if': [('\\)', Punctuation, '#pop'), include('genericargs')], 'pause': [('(mouse|any|button1|button2|button3)\\b', Name.Builtin), (_shortened('key$press'), Name.Builtin), include('genericargs')], 'plot': [(_shortened_many('ax$es', 'axi$s', 'bin$ary', 'ev$ery', 'i$ndex', 'mat$rix', 's$mooth', 'thru$', 't$itle', 'not$itle', 'u$sing', 'w$ith'), Name.Builtin), include('genericargs')], 'save': [(_shortened_many('f$unctions', 's$et', 't$erminal', 'v$ariables'), Name.Builtin), include('genericargs')]}
  }

  class PovrayLexer {
      + name = 'POVRay'
      + url = 'http://www.povray.org/'
      + aliases = ['pov']
      + filenames = ['*.pov', '*.inc']
      + mimetypes = ['text/x-povray']
      + version_added = '0.11'
      + tokens = {'root': [('/\\*[\\w\\W]*?\\*/', Comment.Multiline), ('//.*$', Comment.Single), ('(?s)"(?:\\\\.|[^"\\\\])+"', String.Double), (words(('break', 'case', 'debug', 'declare', 'default', 'define', 'else', 'elseif', 'end', 'error', 'fclose', 'fopen', 'for', 'if', 'ifdef', 'ifndef', 'include', 'local', 'macro', 'range', 'read', 'render', 'statistics', 'switch', 'undef', 'version', 'warning', 'while', 'write'), prefix='#', suffix='\\b'), Comment.Preproc), (words(('aa_level', 'aa_threshold', 'abs', 'acos', 'acosh', 'adaptive', 'adc_bailout', 'agate', 'agate_turb', 'all', 'alpha', 'ambient', 'ambient_light', 'angle', 'aperture', 'arc_angle', 'area_light', 'asc', 'asin', 'asinh', 'assumed_gamma', 'atan', 'atan2', 'atanh', 'atmosphere', 'atmospheric_attenuation', 'attenuating', 'average', 'background', 'black_hole', 'blue', 'blur_samples', 'bounded_by', 'box_mapping', 'bozo', 'break', 'brick', 'brick_size', 'brightness', 'brilliance', 'bumps', 'bumpy1', 'bumpy2', 'bumpy3', 'bump_map', 'bump_size', 'case', 'caustics', 'ceil', 'checker', 'chr', 'clipped_by', 'clock', 'color', 'color_map', 'colour', 'colour_map', 'component', 'composite', 'concat', 'confidence', 'conic_sweep', 'constant', 'control0', 'control1', 'cos', 'cosh', 'count', 'crackle', 'crand', 'cube', 'cubic_spline', 'cylindrical_mapping', 'debug', 'declare', 'default', 'degrees', 'dents', 'diffuse', 'direction', 'distance', 'distance_maximum', 'div', 'dust', 'dust_type', 'eccentricity', 'else', 'emitting', 'end', 'error', 'error_bound', 'exp', 'exponent', 'fade_distance', 'fade_power', 'falloff', 'falloff_angle', 'false', 'file_exists', 'filter', 'finish', 'fisheye', 'flatness', 'flip', 'floor', 'focal_point', 'fog', 'fog_alt', 'fog_offset', 'fog_type', 'frequency', 'gif', 'global_settings', 'glowing', 'gradient', 'granite', 'gray_threshold', 'green', 'halo', 'hexagon', 'hf_gray_16', 'hierarchy', 'hollow', 'hypercomplex', 'if', 'ifdef', 'iff', 'image_map', 'incidence', 'include', 'int', 'interpolate', 'inverse', 'ior', 'irid', 'irid_wavelength', 'jitter', 'lambda', 'leopard', 'linear', 'linear_spline', 'linear_sweep', 'location', 'log', 'looks_like', 'look_at', 'low_error_factor', 'mandel', 'map_type', 'marble', 'material_map', 'matrix', 'max', 'max_intersections', 'max_iteration', 'max_trace_level', 'max_value', 'metallic', 'min', 'minimum_reuse', 'mod', 'mortar', 'nearest_count', 'no', 'normal', 'normal_map', 'no_shadow', 'number_of_waves', 'octaves', 'off', 'offset', 'omega', 'omnimax', 'on', 'once', 'onion', 'open', 'orthographic', 'panoramic', 'pattern1', 'pattern2', 'pattern3', 'perspective', 'pgm', 'phase', 'phong', 'phong_size', 'pi', 'pigment', 'pigment_map', 'planar_mapping', 'png', 'point_at', 'pot', 'pow', 'ppm', 'precision', 'pwr', 'quadratic_spline', 'quaternion', 'quick_color', 'quick_colour', 'quilted', 'radial', 'radians', 'radiosity', 'radius', 'rainbow', 'ramp_wave', 'rand', 'range', 'reciprocal', 'recursion_limit', 'red', 'reflection', 'refraction', 'render', 'repeat', 'rgb', 'rgbf', 'rgbft', 'rgbt', 'right', 'ripples', 'rotate', 'roughness', 'samples', 'scale', 'scallop_wave', 'scattering', 'seed', 'shadowless', 'sin', 'sine_wave', 'sinh', 'sky', 'sky_sphere', 'slice', 'slope_map', 'smooth', 'specular', 'spherical_mapping', 'spiral', 'spiral1', 'spiral2', 'spotlight', 'spotted', 'sqr', 'sqrt', 'statistics', 'str', 'strcmp', 'strength', 'strlen', 'strlwr', 'strupr', 'sturm', 'substr', 'switch', 'sys', 't', 'tan', 'tanh', 'test_camera_1', 'test_camera_2', 'test_camera_3', 'test_camera_4', 'texture', 'texture_map', 'tga', 'thickness', 'threshold', 'tightness', 'tile2', 'tiles', 'track', 'transform', 'translate', 'transmit', 'triangle_wave', 'true', 'ttf', 'turbulence', 'turb_depth', 'type', 'ultra_wide_angle', 'up', 'use_color', 'use_colour', 'use_index', 'u_steps', 'val', 'variance', 'vaxis_rotate', 'vcross', 'vdot', 'version', 'vlength', 'vnormalize', 'volume_object', 'volume_rendered', 'vol_with_light', 'vrotate', 'v_steps', 'warning', 'warp', 'water_level', 'waves', 'while', 'width', 'wood', 'wrinkles', 'yes'), prefix='\\b', suffix='\\b'), Keyword), (words(('bicubic_patch', 'blob', 'box', 'camera', 'cone', 'cubic', 'cylinder', 'difference', 'disc', 'height_field', 'intersection', 'julia_fractal', 'lathe', 'light_source', 'merge', 'mesh', 'object', 'plane', 'poly', 'polygon', 'prism', 'quadric', 'quartic', 'smooth_triangle', 'sor', 'sphere', 'superellipsoid', 'text', 'torus', 'triangle', 'union'), suffix='\\b'), Name.Builtin), ('\\b(x|y|z|u|v)\\b', Name.Builtin.Pseudo), ('[a-zA-Z_]\\w*', Name), ('[0-9]*\\.[0-9]+', Number.Float), ('[0-9]+', Number.Integer), ('[\\[\\](){}<>;,]', Punctuation), ('[-+*/=.|&]|<=|>=|!=', Operator), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('\\s+', Whitespace)]}
  --
      + analyse_text(text)
  }

  class GraphQLLexer {
      + name = 'GraphQL'
      + aliases = ['graphql']
      + filenames = ['*.graphql']
      + url = 'https://graphql.org'
      + version_added = '2.16'
      + tokens = {'ignored_tokens': [('\\s+', Whitespace), ('#.*$', Comment), (',', Punctuation)], 'value': [include('ignored_tokens'), ('-?\\d+(?![.eE])', Number.Integer, '#pop'), ('-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?', Number.Float, '#pop'), ('"', String, ('#pop', 'string')), (words(BOOLEAN_VALUES, suffix='\\b'), Name.Builtin, '#pop'), ('\\$[a-zA-Z_]\\w*', Name.Variable, '#pop'), ('[a-zA-Z_]\\w*', Name.Constant, '#pop'), ('\\[', Punctuation, ('#pop', 'list_value')), ('\\{', Punctuation, ('#pop', 'object_value'))], 'list_value': [include('ignored_tokens'), (']', Punctuation, '#pop'), default('value')], 'object_value': [include('ignored_tokens'), ('[a-zA-Z_]\\w*', Name), (':', Punctuation, 'value'), ('\\}', Punctuation, '#pop')], 'string': [('\\\\(["\\\\/bfnrt]|u[a-fA-F0-9]{4})', String.Escape), ('[^\\\\"\\n]+', String), ('"', String, '#pop')], 'root': [include('ignored_tokens'), (words(OPERATION_TYPES, suffix='\\b'), Keyword, 'operation'), (words(KEYWORDS, suffix='\\b'), Keyword), ('\\{', Punctuation, 'selection_set'), ('fragment\\b', Keyword, 'fragment_definition')], 'operation': [include('ignored_tokens'), ('[a-zA-Z_]\\w*', Name.Function), ('\\(', Punctuation, 'variable_definition'), ('\\{', Punctuation, ('#pop', 'selection_set'))], 'variable_definition': [include('ignored_tokens'), ('\\$[a-zA-Z_]\\w*', Name.Variable), ('[\\]!]', Punctuation), (':', Punctuation, 'type'), ('=', Punctuation, 'value'), ('\\)', Punctuation, '#pop')], 'type': [include('ignored_tokens'), ('\\[', Punctuation), (words(BUILTIN_TYPES, suffix='\\b'), Name.Builtin, '#pop'), ('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'selection_set': [include('ignored_tokens'), ('([a-zA-Z_]\\w*)(\\s*)(:)', bygroups(Name.Label, Whitespace, Punctuation)), ('[a-zA-Z_]\\w*', Name), ('(\\.\\.\\.)(\\s+)(on)\\b', bygroups(Punctuation, Whitespace, Keyword), 'inline_fragment'), ('\\.\\.\\.', Punctuation, 'fragment_spread'), ('\\(', Punctuation, 'arguments'), ('@[a-zA-Z_]\\w*', Name.Decorator, 'directive'), ('\\{', Punctuation, 'selection_set'), ('\\}', Punctuation, '#pop')], 'directive': [include('ignored_tokens'), ('\\(', Punctuation, ('#pop', 'arguments'))], 'arguments': [include('ignored_tokens'), ('[a-zA-Z_]\\w*', Name), (':', Punctuation, 'value'), ('\\)', Punctuation, '#pop')], 'fragment_definition': [include('ignored_tokens'), ('[\\]!]', Punctuation), ('on\\b', Keyword, 'type'), ('[a-zA-Z_]\\w*', Name.Function), ('@[a-zA-Z_]\\w*', Name.Decorator, 'directive'), ('\\{', Punctuation, ('#pop', 'selection_set'))], 'fragment_spread': [include('ignored_tokens'), ('@[a-zA-Z_]\\w*', Name.Decorator, 'directive'), ('[a-zA-Z_]\\w*', Name, '#pop')], 'inline_fragment': [include('ignored_tokens'), ('[a-zA-Z_]\\w*', Name.Class), ('@[a-zA-Z_]\\w*', Name.Decorator, 'directive'), ('\\{', Punctuation, ('#pop', 'selection_set'))]}
  }

  class GraphvizLexer {
      + name = 'Graphviz'
      + url = 'https://www.graphviz.org/doc/info/lang.html'
      + aliases = ['graphviz', 'dot']
      + filenames = ['*.gv', '*.dot']
      + mimetypes = ['text/x-graphviz', 'text/vnd.graphviz']
      + version_added = '2.8'
      + tokens = {'root': [('\\s+', Whitespace), ('(#|//).*?$', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ('(?i)(node|edge|graph|digraph|subgraph|strict)\\b', Keyword), ('--|->', Operator), ('[{}[\\]:;,]', Punctuation), ('(\\b\\D\\w*)(\\s*)(=)(\\s*)', bygroups(Name.Attribute, Whitespace, Punctuation, Whitespace), 'attr_id'), ('\\b(n|ne|e|se|s|sw|w|nw|c|_)\\b', Name.Builtin), ('\\b\\D\\w*', Name.Tag), ('[-]?((\\.[0-9]+)|([0-9]+(\\.[0-9]*)?))', Number), ('"(\\\\"|[^"])*?"', Name.Tag), ('<', Punctuation, 'xml')], 'attr_id': [('\\b\\D\\w*', String, '#pop'), ('[-]?((\\.[0-9]+)|([0-9]+(\\.[0-9]*)?))', Number, '#pop'), ('"(\\\\"|[^"])*?"', String.Double, '#pop'), ('<', Punctuation, ('#pop', 'xml'))], 'xml': [('<', Punctuation, '#push'), ('>', Punctuation, '#pop'), ('\\s+', Whitespace), ('[^<>\\s]', Name.Tag)]}
  }

  class GSQLLexer {
      + name = 'GSQL'
      + url = 'https://docs.tigergraph.com/dev/gsql-ref'
      + aliases = ['gsql']
      + filenames = ['*.gsql']
      + version_added = '2.10'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': [include('comment'), include('keywords'), include('clauses'), include('accums'), include('relations'), include('strings'), include('whitespace'), include('barewords'), include('operators')], 'comment': [('\\#.*', Comment.Single), ('/\\*(.|\\n)*?\\*/', Comment.Multiline)], 'keywords': [(words(('ACCUM', 'AND', 'ANY', 'API', 'AS', 'ASC', 'AVG', 'BAG', 'BATCH', 'BETWEEN', 'BOOL', 'BOTH', 'BREAK', 'BY', 'CASE', 'CATCH', 'COALESCE', 'COMPRESS', 'CONTINUE', 'COUNT', 'CREATE', 'DATETIME', 'DATETIME_ADD', 'DATETIME_SUB', 'DELETE', 'DESC', 'DISTRIBUTED', 'DO', 'DOUBLE', 'EDGE', 'ELSE', 'END', 'ESCAPE', 'EXCEPTION', 'FALSE', 'FILE', 'FILTER', 'FLOAT', 'FOREACH', 'FOR', 'FROM', 'GRAPH', 'GROUP', 'GSQL_INT_MAX', 'GSQL_INT_MIN', 'GSQL_UINT_MAX', 'HAVING', 'IF', 'IN', 'INSERT', 'INT', 'INTERPRET', 'INTERSECT', 'INTERVAL', 'INTO', 'IS', 'ISEMPTY', 'JSONARRAY', 'JSONOBJECT', 'LASTHOP', 'LEADING', 'LIKE', 'LIMIT', 'LIST', 'LOAD_ACCUM', 'LOG', 'MAP', 'MATCH', 'MAX', 'MIN', 'MINUS', 'NOT', 'NOW', 'NULL', 'OFFSET', 'OR', 'ORDER', 'PATH', 'PER', 'PINNED', 'POST_ACCUM', 'POST-ACCUM', 'PRIMARY_ID', 'PRINT', 'QUERY', 'RAISE', 'RANGE', 'REPLACE', 'RESET_COLLECTION_ACCUM', 'RETURN', 'RETURNS', 'RUN', 'SAMPLE', 'SELECT', 'SELECT_VERTEX', 'SET', 'SRC', 'STATIC', 'STRING', 'SUM', 'SYNTAX', 'TARGET', 'TAGSTGT', 'THEN', 'TO', 'TO_CSV', 'TO_DATETIME', 'TRAILING', 'TRIM', 'TRUE', 'TRY', 'TUPLE', 'TYPEDEF', 'UINT', 'UNION', 'UPDATE', 'VALUES', 'VERTEX', 'WHEN', 'WHERE', 'WHILE', 'WITH'), prefix='(?<!\\.)', suffix='\\b'), Keyword)], 'clauses': [(words(('accum', 'having', 'limit', 'order', 'postAccum', 'sample', 'where')), Name.Builtin)], 'accums': [(words(('andaccum', 'arrayaccum', 'avgaccum', 'bagaccum', 'bitwiseandaccum', 'bitwiseoraccum', 'groupbyaccum', 'heapaccum', 'listaccum', 'MapAccum', 'maxaccum', 'minaccum', 'oraccum', 'setaccum', 'sumaccum')), Name.Builtin)], 'relations': [('(-\\s?)(\\(.*\\:\\w?\\))(\\s?-)', bygroups(Operator, using(this), Operator)), ('->|<-', Operator), ('[.*{}\\[\\]\\<\\>\\_]', Punctuation)], 'strings': [('"([^"\\\\]|\\\\.)*"', String), ('@{1,2}\\w+', Name.Variable)], 'whitespace': [('\\s+', Whitespace)], 'barewords': [('[a-z]\\w*', Name), ('(\\d+\\.\\d+|\\d+)', Number)], 'operators': [('\\$|[^0-9|\\/|\\-](\\-\\=|\\+\\=|\\*\\=|\\\\\\=|\\=|\\=\\=|\\=\\=\\=|\\+|\\-|\\*|\\\\|\\+\\=|\\>|\\<)[^\\>|\\/]', Operator), ('(\\||\\(|\\)|\\,|\\;|\\=|\\-|\\+|\\*|\\/|\\>|\\<|\\:)', Operator)]}
  }

  class HareLexer {
      + name = 'Hare'
      + url = 'https://harelang.org/'
      + aliases = ['hare']
      + filenames = ['*.ha']
      + mimetypes = ['text/x-hare']
      + version_added = '2.19'
      + tokens = {'whitespace': [('^use.*;', Comment.Preproc), ('@[a-z]+', Comment.Preproc), ('\\n', Whitespace), ('\\s+', Whitespace), ('//.*?$', Comment.Single)], 'statements': [('"', String, 'string'), ('`[^`]*`', String), ("'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'", String.Char), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[LlUu]*', Number.Float), ('(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float), ('0x[0-9a-fA-F]+[LlUu]*', Number.Hex), ('0o[0-7]+[LlUu]*', Number.Oct), ('\\d+[zui]?(\\d+)?', Number.Integer), ('[~!%^&*+=|?:<>/-]', Operator), (words(('as', 'is', '=>', '..', '...')), Operator), ('[()\\[\\],.{};]+', Punctuation), (words(('abort', 'align', 'alloc', 'append', 'assert', 'case', 'const', 'def', 'defer', 'delete', 'else', 'enum', 'export', 'fn', 'for', 'free', 'if', 'let', 'len', 'match', 'offset', 'return', 'static', 'struct', 'switch', 'type', 'union', 'yield', 'vastart', 'vaarg', 'vaend'), suffix='\\b'), Keyword), ('(bool|int|uint|uintptr|u8|u16|u32|u64|i8|i16|i32|i64|f32|f64|null|done|never|void|nullable|rune|size|valist)\\b', Keyword.Type), ('(true|false|null)\\b', Name.Builtin), ('[a-zA-Z_]\\w*', Name)], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('\\\\', String)], 'root': [include('whitespace'), include('statements')]}
  }

  class HaskellLexer {
      + name = 'Haskell'
      + url = 'https://www.haskell.org/'
      + aliases = ['haskell', 'hs']
      + filenames = ['*.hs']
      + mimetypes = ['text/x-haskell']
      + version_added = '0.8'
      + reserved = ('case', 'class', 'data', 'default', 'deriving', 'do', 'else', 'family', 'if', 'in', 'infix[lr]?', 'instance', 'let', 'newtype', 'of', 'then', 'type', 'where', '_')
      + ascii = ('NUL', 'SOH', '[SE]TX', 'EOT', 'ENQ', 'ACK', 'BEL', 'BS', 'HT', 'LF', 'VT', 'FF', 'CR', 'S[OI]', 'DLE', 'DC[1-4]', 'NAK', 'SYN', 'ETB', 'CAN', 'EM', 'SUB', 'ESC', '[FGRU]S', 'SP', 'DEL')
      + tokens = {'root': [('\\s+', Whitespace), ('--(?![!#$%&*+./<=>?@^|_~:\\\\]).*?$', Comment.Single), ('\\{-', Comment.Multiline, 'comment'), ('\\bimport\\b', Keyword.Reserved, 'import'), ('\\bmodule\\b', Keyword.Reserved, 'module'), ('\\berror\\b', Name.Exception), ("\\b({})(?!\\')\\b".format('|'.join(reserved)), Keyword.Reserved), ("'[^\\\\]'", String.Char), ('^[_' + uni.Ll + "][\\w\\']*", Name.Function), ("'?[_" + uni.Ll + "][\\w']*", Name), ("('')?[" + uni.Lu + "][\\w\\']*", Keyword.Type), ("(')[" + uni.Lu + "][\\w\\']*", Keyword.Type), ("(')\\[[^\\]]*\\]", Keyword.Type), ("(')\\([^)]*\\)", Keyword.Type), ("(')[:!#$%&*+.\\\\/<=>?@^|~-]+", Keyword.Type), ('\\\\(?![:!#$%&*+.\\\\/<=>?@^|~-]+)', Name.Function), ('(<-|::|->|=>|=)(?![:!#$%&*+.\\\\/<=>?@^|~-]+)', Operator.Word), (':[:!#$%&*+.\\\\/<=>?@^|~-]*', Keyword.Type), ('[:!#$%&*+.\\\\/<=>?@^|~-]+', Operator), ('0[xX]_*[\\da-fA-F](_*[\\da-fA-F])*_*[pP][+-]?\\d(_*\\d)*', Number.Float), ('0[xX]_*[\\da-fA-F](_*[\\da-fA-F])*\\.[\\da-fA-F](_*[\\da-fA-F])*(_*[pP][+-]?\\d(_*\\d)*)?', Number.Float), ('\\d(_*\\d)*_*[eE][+-]?\\d(_*\\d)*', Number.Float), ('\\d(_*\\d)*\\.\\d(_*\\d)*(_*[eE][+-]?\\d(_*\\d)*)?', Number.Float), ('0[bB]_*[01](_*[01])*', Number.Bin), ('0[oO]_*[0-7](_*[0-7])*', Number.Oct), ('0[xX]_*[\\da-fA-F](_*[\\da-fA-F])*', Number.Hex), ('\\d(_*\\d)*', Number.Integer), ("'", String.Char, 'character'), ('"', String, 'string'), ('\\[\\]', Keyword.Type), ('\\(\\)', Name.Builtin), ('[][(),;`{}]', Punctuation)], 'import': [('\\s+', Whitespace), ('"', String, 'string'), ('\\)', Punctuation, '#pop'), ('qualified\\b', Keyword), ('([' + uni.Lu + '][\\w.]*)(\\s+)(as)(\\s+)([' + uni.Lu + '][\\w.]*)', bygroups(Name.Namespace, Whitespace, Keyword, Whitespace, Name), '#pop'), ('([' + uni.Lu + '][\\w.]*)(\\s+)(hiding)(\\s+)(\\()', bygroups(Name.Namespace, Whitespace, Keyword, Whitespace, Punctuation), 'funclist'), ('([' + uni.Lu + '][\\w.]*)(\\s+)(\\()', bygroups(Name.Namespace, Whitespace, Punctuation), 'funclist'), ('[\\w.]+', Name.Namespace, '#pop')], 'module': [('\\s+', Whitespace), ('([' + uni.Lu + '][\\w.]*)(\\s+)(\\()', bygroups(Name.Namespace, Whitespace, Punctuation), 'funclist'), ('[' + uni.Lu + '][\\w.]*', Name.Namespace, '#pop')], 'funclist': [('\\s+', Whitespace), ('[' + uni.Lu + ']\\w*', Keyword.Type), ("(_[\\w\\']+|[" + uni.Ll + "][\\w\\']*)", Name.Function), ('--(?![!#$%&*+./<=>?@^|_~:\\\\]).*?$', Comment.Single), ('\\{-', Comment.Multiline, 'comment'), (',', Punctuation), ('[:!#$%&*+.\\\\/<=>?@^|~-]+', Operator), ('\\(', Punctuation, ('funclist', 'funclist')), ('\\)', Punctuation, '#pop:2')], 'comment': [('[^-{}]+', Comment.Multiline), ('\\{-', Comment.Multiline, '#push'), ('-\\}', Comment.Multiline, '#pop'), ('[-{}]', Comment.Multiline)], 'character': [("[^\\\\']'", String.Char, '#pop'), ('\\\\', String.Escape, 'escape'), ("'", String.Char, '#pop')], 'string': [('[^\\\\"]+', String), ('\\\\', String.Escape, 'escape'), ('"', String, '#pop')], 'escape': [('[abfnrtv"\\\'&\\\\]', String.Escape, '#pop'), ('\\^[][' + uni.Lu + '@^_]', String.Escape, '#pop'), ('|'.join(ascii), String.Escape, '#pop'), ('o[0-7]+', String.Escape, '#pop'), ('x[\\da-fA-F]+', String.Escape, '#pop'), ('\\d+', String.Escape, '#pop'), ('(\\s+)(\\\\)', bygroups(Whitespace, String.Escape), '#pop')]}
  }

  class HspecLexer {
      + name = 'Hspec'
      + aliases = ['hspec']
      + filenames = ['*Spec.hs']
      + mimetypes = []
      + version_added = '2.4'
      + tokens = {'root': [('(it)(\\s*)("[^"]*")', bygroups(Text, Whitespace, String.Doc)), ('(describe)(\\s*)("[^"]*")', bygroups(Text, Whitespace, String.Doc)), ('(context)(\\s*)("[^"]*")', bygroups(Text, Whitespace, String.Doc)), inherit]}
  }

  class IdrisLexer {
      + name = 'Idris'
      + url = 'https://www.idris-lang.org/'
      + aliases = ['idris', 'idr']
      + filenames = ['*.idr']
      + mimetypes = ['text/x-idris']
      + version_added = '2.0'
      + reserved = ('case', 'class', 'data', 'default', 'using', 'do', 'else', 'if', 'in', 'infix[lr]?', 'instance', 'rewrite', 'auto', 'namespace', 'codata', 'mutual', 'private', 'public', 'abstract', 'total', 'partial', 'interface', 'implementation', 'export', 'covering', 'constructor', 'let', 'proof', 'of', 'then', 'static', 'where', '_', 'with', 'pattern', 'term', 'syntax', 'prefix', 'postulate', 'parameters', 'record', 'dsl', 'impossible', 'implicit', 'tactics', 'intros', 'intro', 'compute', 'refine', 'exact', 'trivial')
      + ascii = ('NUL', 'SOH', '[SE]TX', 'EOT', 'ENQ', 'ACK', 'BEL', 'BS', 'HT', 'LF', 'VT', 'FF', 'CR', 'S[OI]', 'DLE', 'DC[1-4]', 'NAK', 'SYN', 'ETB', 'CAN', 'EM', 'SUB', 'ESC', '[FGRU]S', 'SP', 'DEL')
      + directives = ('lib', 'link', 'flag', 'include', 'hide', 'freeze', 'access', 'default', 'logging', 'dynamic', 'name', 'error_handlers', 'language')
      + tokens = {'root': [('^(\\s*)(%({}))'.format('|'.join(directives)), bygroups(Whitespace, Keyword.Reserved)), ('(\\s*)(--(?![!#$%&*+./<=>?@^|_~:\\\\]).*?)$', bygroups(Whitespace, Comment.Single)), ('(\\s*)(\\|{3}.*?)$', bygroups(Whitespace, Comment.Single)), ('(\\s*)(\\{-)', bygroups(Whitespace, Comment.Multiline), 'comment'), ('^(\\s*)([^\\s(){}]+)(\\s*)(:)(\\s*)', bygroups(Whitespace, Name.Function, Whitespace, Operator.Word, Whitespace)), ("\\b({})(?!\\')\\b".format('|'.join(reserved)), Keyword.Reserved), ('(import|module)(\\s+)', bygroups(Keyword.Reserved, Whitespace), 'module'), ("('')?[A-Z][\\w\\']*", Keyword.Type), ("[a-z][\\w\\']*", Text), ('(<-|::|->|=>|=)', Operator.Word), ('([(){}\\[\\]:!#$%&*+.\\\\/<=>?@^|~-]+)', Operator.Word), ('\\d+[eE][+-]?\\d+', Number.Float), ('\\d+\\.\\d+([eE][+-]?\\d+)?', Number.Float), ('0[xX][\\da-fA-F]+', Number.Hex), ('\\d+', Number.Integer), ("'", String.Char, 'character'), ('"', String, 'string'), ('[^\\s(){}]+', Text), ('\\s+?', Whitespace)], 'module': [('\\s+', Whitespace), ('([A-Z][\\w.]*)(\\s+)(\\()', bygroups(Name.Namespace, Whitespace, Punctuation), 'funclist'), ('[A-Z][\\w.]*', Name.Namespace, '#pop')], 'funclist': [('\\s+', Whitespace), ('[A-Z]\\w*', Keyword.Type), ("(_[\\w\\']+|[a-z][\\w\\']*)", Name.Function), ('--.*$', Comment.Single), ('\\{-', Comment.Multiline, 'comment'), (',', Punctuation), ('[:!#$%&*+.\\\\/<=>?@^|~-]+', Operator), ('\\(', Punctuation, ('funclist', 'funclist')), ('\\)', Punctuation, '#pop:2')], 'comment': [('[^-{}]+', Comment.Multiline), ('\\{-', Comment.Multiline, '#push'), ('-\\}', Comment.Multiline, '#pop'), ('[-{}]', Comment.Multiline)], 'character': [("[^\\\\']", String.Char), ('\\\\', String.Escape, 'escape'), ("'", String.Char, '#pop')], 'string': [('[^\\\\"]+', String), ('\\\\', String.Escape, 'escape'), ('"', String, '#pop')], 'escape': [('[abfnrtv"\\\'&\\\\]', String.Escape, '#pop'), ('\\^[][A-Z@^_]', String.Escape, '#pop'), ('|'.join(ascii), String.Escape, '#pop'), ('o[0-7]+', String.Escape, '#pop'), ('x[\\da-fA-F]+', String.Escape, '#pop'), ('\\d+', String.Escape, '#pop'), ('(\\s+)(\\\\)', bygroups(Whitespace, String.Escape), '#pop')]}
  }

  class AgdaLexer {
      + name = 'Agda'
      + url = 'http://wiki.portal.chalmers.se/agda/pmwiki.php'
      + aliases = ['agda']
      + filenames = ['*.agda']
      + mimetypes = ['text/x-agda']
      + version_added = '2.0'
      + reserved = ('abstract', 'codata', 'coinductive', 'constructor', 'data', 'do', 'eta-equality', 'field', 'forall', 'hiding', 'in', 'inductive', 'infix', 'infixl', 'infixr', 'instance', 'interleaved', 'let', 'macro', 'mutual', 'no-eta-equality', 'opaque', 'open', 'overlap', 'pattern', 'postulate', 'primitive', 'private', 'quote', 'quoteTerm', 'record', 'renaming', 'rewrite', 'syntax', 'tactic', 'unfolding', 'unquote', 'unquoteDecl', 'unquoteDef', 'using', 'variable', 'where', 'with')
      + tokens = {'root': [('^(\\s*)([^\\s(){}]+)(\\s*)(:)(\\s*)', bygroups(Whitespace, Name.Function, Whitespace, Operator.Word, Whitespace)), ('--(?![!#$%&*+./<=>?@^|_~:\\\\]).*?$', Comment.Single), ('\\{-', Comment.Multiline, 'comment'), ('\\{!', Comment.Directive, 'hole'), ("\\b({})(?!\\')\\b".format('|'.join(reserved)), Keyword.Reserved), ('(import|module)(\\s+)', bygroups(Keyword.Reserved, Whitespace), 'module'), ('\\b(Set|Prop)[\\u2080-\\u2089]*\\b', Keyword.Type), ('(\\(|\\)|\\{|\\})', Operator), ('(\\.{1,3}|\\||\\u03BB|\\u2200|\\u2192|:|=|->)', Operator.Word), ('\\d+[eE][+-]?\\d+', Number.Float), ('\\d+\\.\\d+([eE][+-]?\\d+)?', Number.Float), ('0[xX][\\da-fA-F]+', Number.Hex), ('\\d+', Number.Integer), ("'", String.Char, 'character'), ('"', String, 'string'), ('[^\\s(){}]+', Text), ('\\s+?', Whitespace)], 'hole': [('[^!{}]+', Comment.Directive), ('\\{!', Comment.Directive, '#push'), ('!\\}', Comment.Directive, '#pop'), ('[!{}]', Comment.Directive)], 'module': [('\\{-', Comment.Multiline, 'comment'), ("[a-zA-Z][\\w.\\']*", Name, '#pop'), ('[\\W0-9_]+', Text)], 'comment': HaskellLexer.tokens['comment'], 'character': HaskellLexer.tokens['character'], 'string': HaskellLexer.tokens['string'], 'escape': HaskellLexer.tokens['escape']}
  }

  class CryptolLexer {
      + name = 'Cryptol'
      + aliases = ['cryptol', 'cry']
      + filenames = ['*.cry']
      + mimetypes = ['text/x-cryptol']
      + url = 'https://www.cryptol.net'
      + version_added = '2.0'
      + reserved = ('Arith', 'Bit', 'Cmp', 'False', 'Inf', 'True', 'else', 'export', 'extern', 'fin', 'if', 'import', 'inf', 'lg2', 'max', 'min', 'module', 'newtype', 'pragma', 'property', 'then', 'type', 'where', 'width')
      + ascii = ('NUL', 'SOH', '[SE]TX', 'EOT', 'ENQ', 'ACK', 'BEL', 'BS', 'HT', 'LF', 'VT', 'FF', 'CR', 'S[OI]', 'DLE', 'DC[1-4]', 'NAK', 'SYN', 'ETB', 'CAN', 'EM', 'SUB', 'ESC', '[FGRU]S', 'SP', 'DEL')
      + tokens = {'root': [('\\s+', Whitespace), ('//.*$', Comment.Single), ('/\\*', Comment.Multiline, 'comment'), ('\\bimport\\b', Keyword.Reserved, 'import'), ('\\bmodule\\b', Keyword.Reserved, 'module'), ('\\berror\\b', Name.Exception), ("\\b({})(?!\\')\\b".format('|'.join(reserved)), Keyword.Reserved), ("^[_a-z][\\w\\']*", Name.Function), ("'?[_a-z][\\w']*", Name), ("('')?[A-Z][\\w\\']*", Keyword.Type), ('\\\\(?![:!#$%&*+.\\\\/<=>?@^|~-]+)', Name.Function), ('(<-|::|->|=>|=)(?![:!#$%&*+.\\\\/<=>?@^|~-]+)', Operator.Word), (':[:!#$%&*+.\\\\/<=>?@^|~-]*', Keyword.Type), ('[:!#$%&*+.\\\\/<=>?@^|~-]+', Operator), ('\\d+[eE][+-]?\\d+', Number.Float), ('\\d+\\.\\d+([eE][+-]?\\d+)?', Number.Float), ('0[oO][0-7]+', Number.Oct), ('0[xX][\\da-fA-F]+', Number.Hex), ('\\d+', Number.Integer), ("'", String.Char, 'character'), ('"', String, 'string'), ('\\[\\]', Keyword.Type), ('\\(\\)', Name.Builtin), ('[][(),;`{}]', Punctuation)], 'import': [('\\s+', Whitespace), ('"', String, 'string'), ('\\)', Punctuation, '#pop'), ('qualified\\b', Keyword), ('([A-Z][\\w.]*)(\\s+)(as)(\\s+)([A-Z][\\w.]*)', bygroups(Name.Namespace, Whitespace, Keyword, Whitespace, Name), '#pop'), ('([A-Z][\\w.]*)(\\s+)(hiding)(\\s+)(\\()', bygroups(Name.Namespace, Whitespace, Keyword, Whitespace, Punctuation), 'funclist'), ('([A-Z][\\w.]*)(\\s+)(\\()', bygroups(Name.Namespace, Whitespace, Punctuation), 'funclist'), ('[\\w.]+', Name.Namespace, '#pop')], 'module': [('\\s+', Whitespace), ('([A-Z][\\w.]*)(\\s+)(\\()', bygroups(Name.Namespace, Whitespace, Punctuation), 'funclist'), ('[A-Z][\\w.]*', Name.Namespace, '#pop')], 'funclist': [('\\s+', Whitespace), ('[A-Z]\\w*', Keyword.Type), ("(_[\\w\\']+|[a-z][\\w\\']*)", Name.Function), (',', Punctuation), ('[:!#$%&*+.\\\\/<=>?@^|~-]+', Operator), ('\\(', Punctuation, ('funclist', 'funclist')), ('\\)', Punctuation, '#pop:2')], 'comment': [('[^/*]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'character': [("[^\\\\']'", String.Char, '#pop'), ('\\\\', String.Escape, 'escape'), ("'", String.Char, '#pop')], 'string': [('[^\\\\"]+', String), ('\\\\', String.Escape, 'escape'), ('"', String, '#pop')], 'escape': [('[abfnrtv"\\\'&\\\\]', String.Escape, '#pop'), ('\\^[][A-Z@^_]', String.Escape, '#pop'), ('|'.join(ascii), String.Escape, '#pop'), ('o[0-7]+', String.Escape, '#pop'), ('x[\\da-fA-F]+', String.Escape, '#pop'), ('\\d+', String.Escape, '#pop'), ('(\\s+)(\\\\)', bygroups(Whitespace, String.Escape), '#pop')]}
      + EXTRA_KEYWORDS = {'join', 'split', 'reverse', 'transpose', 'width', 'length', 'tail', '<<', '>>', '<<<', '>>>', 'const', 'reg', 'par', 'seq', 'ASSERT', 'undefined', 'error', 'trace'}
  --
      + get_tokens_unprocessed(text)
  }

  class LiterateLexer {
      + bird_re = re.compile('(>[ \\t]*)(.*\\n)')
  --
      - __init__(baselexer)
      + get_tokens_unprocessed(text)
  }

  class LiterateHaskellLexer {
      + name = 'Literate Haskell'
      + aliases = ['literate-haskell', 'lhaskell', 'lhs']
      + filenames = ['*.lhs']
      + mimetypes = ['text/x-literate-haskell']
      + url = 'https://wiki.haskell.org/Literate_programming'
      + version_added = '0.9'
  --
      - __init__()
  }

  class LiterateIdrisLexer {
      + name = 'Literate Idris'
      + aliases = ['literate-idris', 'lidris', 'lidr']
      + filenames = ['*.lidr']
      + mimetypes = ['text/x-literate-idris']
      + url = 'https://idris2.readthedocs.io/en/latest/reference/literate.html'
      + version_added = '2.0'
  --
      - __init__()
  }

  class LiterateAgdaLexer {
      + name = 'Literate Agda'
      + aliases = ['literate-agda', 'lagda']
      + filenames = ['*.lagda']
      + mimetypes = ['text/x-literate-agda']
      + url = 'https://agda.readthedocs.io/en/latest/tools/literate-programming.html'
      + version_added = '2.0'
  --
      - __init__()
  }

  class LiterateCryptolLexer {
      + name = 'Literate Cryptol'
      + aliases = ['literate-cryptol', 'lcryptol', 'lcry']
      + filenames = ['*.lcry']
      + mimetypes = ['text/x-literate-cryptol']
      + url = 'https://www.cryptol.net'
      + version_added = '2.0'
  --
      - __init__()
  }

  class KokaLexer {
      + name = 'Koka'
      + url = 'https://koka-lang.github.io/koka/doc/index.html'
      + aliases = ['koka']
      + filenames = ['*.kk', '*.kki']
      + mimetypes = ['text/x-koka']
      + version_added = '1.6'
      + keywords = ['infix', 'infixr', 'infixl', 'type', 'cotype', 'rectype', 'alias', 'struct', 'con', 'fun', 'function', 'val', 'var', 'external', 'if', 'then', 'else', 'elif', 'return', 'match', 'private', 'public', 'private', 'module', 'import', 'as', 'include', 'inline', 'rec', 'try', 'yield', 'enum', 'interface', 'instance']
      + typeStartKeywords = ['type', 'cotype', 'rectype', 'alias', 'struct', 'enum']
      + typekeywords = ['forall', 'exists', 'some', 'with']
      + builtin = ['for', 'while', 'repeat', 'foreach', 'foreach-indexed', 'error', 'catch', 'finally', 'cs', 'js', 'file', 'ref', 'assigned']
      + symbols = '[$%&*+@!/\\\\^~=.:\\-?|<>]+'
      + sboundary = '(?!' + symbols + ')'
      + boundary = '(?![\\w/])'
      + tokenType = Name.Attribute
      + tokenTypeDef = Name.Class
      + tokenConstructor = Generic.Emph
      + tokens = {'root': [include('whitespace'), ('::?' + sboundary, tokenType, 'type'), ('(alias)(\\s+)([a-z]\\w*)?', bygroups(Keyword, Whitespace, tokenTypeDef), 'alias-type'), ('(struct)(\\s+)([a-z]\\w*)?', bygroups(Keyword, Whitespace, tokenTypeDef), 'struct-type'), ('({})'.format('|'.join(typeStartKeywords)) + '(\\s+)([a-z]\\w*)?', bygroups(Keyword, Whitespace, tokenTypeDef), 'type'), ('(module)(\\s+)(interface(?=\\s))?(\\s+)?((?:[a-z]\\w*/)*[a-z]\\w*)', bygroups(Keyword, Whitespace, Keyword, Whitespace, Name.Namespace)), ('(import)(\\s+)((?:[a-z]\\w*/)*[a-z]\\w*)(?:(\\s*)(=)(\\s*)(qualified)?(\\s*)((?:[a-z]\\w*/)*[a-z]\\w*))?', bygroups(Keyword, Whitespace, Name.Namespace, Whitespace, Keyword, Whitespace, Keyword, Whitespace, Name.Namespace)), ('^(public|private)?(\\s+)?(function|fun|val)(\\s+)([a-z]\\w*|\\((?:' + symbols + '|/)\\))', bygroups(Keyword, Whitespace, Keyword, Whitespace, Name.Function)), ('^(?:(public|private)(?=\\s+external))?((?<!^)\\s+)?(external)(\\s+)(inline(?=\\s))?(\\s+)?([a-z]\\w*|\\((?:' + symbols + '|/)\\))', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword, Whitespace, Name.Function)), ('({})'.format('|'.join(typekeywords)) + boundary, Keyword.Type), ('({})'.format('|'.join(keywords)) + boundary, Keyword), ('({})'.format('|'.join(builtin)) + boundary, Keyword.Pseudo), ('::?|:=|\\->|[=.]' + sboundary, Keyword), ('((?:[a-z]\\w*/)*)([A-Z]\\w*)', bygroups(Name.Namespace, tokenConstructor)), ('((?:[a-z]\\w*/)*)([a-z]\\w*)', bygroups(Name.Namespace, Name)), ('((?:[a-z]\\w*/)*)(\\((?:' + symbols + '|/)\\))', bygroups(Name.Namespace, Name)), ('_\\w*', Name.Variable), ('@"', String.Double, 'litstring'), (symbols + '|/(?![*/])', Operator), ('`', Operator), ('[{}()\\[\\];,]', Punctuation), ('[0-9]+\\.[0-9]+([eE][\\-+]?[0-9]+)?', Number.Float), ('0[xX][0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ("'", String.Char, 'char'), ('"', String.Double, 'string')], 'alias-type': [('=', Keyword), include('type')], 'struct-type': [('(?=\\((?!,*\\)))', Punctuation, '#pop'), include('type')], 'type': [('[(\\[<]', tokenType, 'type-nested'), include('type-content')], 'type-nested': [('[)\\]>]', tokenType, '#pop'), ('[(\\[<]', tokenType, 'type-nested'), (',', tokenType), ('([a-z]\\w*)(\\s*)(:)(?!:)', bygroups(Name, Whitespace, tokenType)), include('type-content')], 'type-content': [include('whitespace'), ('({})'.format('|'.join(typekeywords)) + boundary, Keyword), ('(?=(({})'.format('|'.join(keywords)) + boundary + '))', Keyword, '#pop'), ('[EPHVX]' + boundary, tokenType), ('[a-z][0-9]*(?![\\w/])', tokenType), ('_\\w*', tokenType.Variable), ('((?:[a-z]\\w*/)*)([A-Z]\\w*)', bygroups(Name.Namespace, tokenType)), ('((?:[a-z]\\w*/)*)([a-z]\\w+)', bygroups(Name.Namespace, tokenType)), ('::|->|[.:|]', tokenType), default('#pop')], 'whitespace': [('(\\n\\s*)(#.*)$', bygroups(Whitespace, Comment.Preproc)), ('\\s+', Whitespace), ('/\\*', Comment.Multiline, 'comment'), ('//.*$', Comment.Single)], 'comment': [('[^/*]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'litstring': [('[^"]+', String.Double), ('""', String.Escape), ('"', String.Double, '#pop')], 'string': [('[^\\\\"\\n]+', String.Double), include('escape-sequence'), ('["\\n]', String.Double, '#pop')], 'char': [("[^\\\\\\'\\n]+", String.Char), include('escape-sequence'), ("[\\'\\n]", String.Char, '#pop')], 'escape-sequence': [('\\\\[nrt\\\\"\\\']', String.Escape), ('\\\\x[0-9a-fA-F]{2}', String.Escape), ('\\\\u[0-9a-fA-F]{4}', String.Escape), ('\\\\U[0-9a-fA-F]{6}', String.Escape)]}
  }

  class HaxeLexer {
      + name = 'Haxe'
      + url = 'http://haxe.org/'
      + aliases = ['haxe', 'hxsl', 'hx']
      + filenames = ['*.hx', '*.hxsl']
      + mimetypes = ['text/haxe', 'text/x-haxe', 'text/x-hx']
      + version_added = '1.3'
      + keyword = '(?:function|class|static|var|if|else|while|do|for|break|return|continue|extends|implements|import|switch|case|default|public|private|try|untyped|catch|new|this|throw|extern|enum|in|interface|cast|override|dynamic|typedef|package|inline|using|null|true|false|abstract)\\b'
      + typeid = '_*[A-Z]\\w*'
      + ident = '(?:_*[a-z]\\w*|_+[0-9]\\w*|' + typeid + '|_+|\\$\\w+)'
      + binop = '(?:%=|&=|\\|=|\\^=|\\+=|\\-=|\\*=|/=|<<=|>\\s*>\\s*=|>\\s*>\\s*>\\s*=|==|!=|<=|>\\s*=|&&|\\|\\||<<|>>>|>\\s*>|\\.\\.\\.|<|>|%|&|\\||\\^|\\+|\\*|/|\\-|=>|=)'
      + ident_no_keyword = '(?!' + keyword + ')' + ident
      + flags = re.DOTALL | re.MULTILINE
      + preproc_stack = []
      + tokens = {'root': [include('spaces'), include('meta'), ('(?:package)\\b', Keyword.Namespace, ('semicolon', 'package')), ('(?:import)\\b', Keyword.Namespace, ('semicolon', 'import')), ('(?:using)\\b', Keyword.Namespace, ('semicolon', 'using')), ('(?:extern|private)\\b', Keyword.Declaration), ('(?:abstract)\\b', Keyword.Declaration, 'abstract'), ('(?:class|interface)\\b', Keyword.Declaration, 'class'), ('(?:enum)\\b', Keyword.Declaration, 'enum'), ('(?:typedef)\\b', Keyword.Declaration, 'typedef'), ('(?=.)', Text, 'expr-statement')], 'spaces': [('\\s+', Whitespace), ('//[^\\n\\r]*', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline), ('(#)(if|elseif|else|end|error)\\b', preproc_callback)], 'string-single-interpol': [('\\$\\{', String.Interpol, ('string-interpol-close', 'expr')), ('\\$\\$', String.Escape), ('\\$(?=' + ident + ')', String.Interpol, 'ident'), include('string-single')], 'string-single': [("'", String.Single, '#pop'), ('\\\\.', String.Escape), ('.', String.Single)], 'string-double': [('"', String.Double, '#pop'), ('\\\\.', String.Escape), ('.', String.Double)], 'string-interpol-close': [('\\$' + ident, String.Interpol), ('\\}', String.Interpol, '#pop')], 'package': [include('spaces'), (ident, Name.Namespace), ('\\.', Punctuation, 'import-ident'), default('#pop')], 'import': [include('spaces'), (ident, Name.Namespace), ('\\*', Keyword), ('\\.', Punctuation, 'import-ident'), ('in', Keyword.Namespace, 'ident'), default('#pop')], 'import-ident': [include('spaces'), ('\\*', Keyword, '#pop'), (ident, Name.Namespace, '#pop')], 'using': [include('spaces'), (ident, Name.Namespace), ('\\.', Punctuation, 'import-ident'), default('#pop')], 'preproc-error': [('\\s+', Whitespace), ("'", String.Single, ('#pop', 'string-single')), ('"', String.Double, ('#pop', 'string-double')), default('#pop')], 'preproc-expr': [('\\s+', Whitespace), ('\\!', Comment.Preproc), ('\\(', Comment.Preproc, ('#pop', 'preproc-parenthesis')), (ident, Comment.Preproc, '#pop'), ('\\.[0-9]+', Number.Float), ('[0-9]+[eE][+\\-]?[0-9]+', Number.Float), ('[0-9]+\\.[0-9]*[eE][+\\-]?[0-9]+', Number.Float), ('[0-9]+\\.[0-9]+', Number.Float), ('[0-9]+\\.(?!' + ident + '|\\.\\.)', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ("'", String.Single, ('#pop', 'string-single')), ('"', String.Double, ('#pop', 'string-double'))], 'preproc-parenthesis': [('\\s+', Whitespace), ('\\)', Comment.Preproc, '#pop'), default('preproc-expr-in-parenthesis')], 'preproc-expr-chain': [('\\s+', Whitespace), (binop, Comment.Preproc, ('#pop', 'preproc-expr-in-parenthesis')), default('#pop')], 'preproc-expr-in-parenthesis': [('\\s+', Whitespace), ('\\!', Comment.Preproc), ('\\(', Comment.Preproc, ('#pop', 'preproc-expr-chain', 'preproc-parenthesis')), (ident, Comment.Preproc, ('#pop', 'preproc-expr-chain')), ('\\.[0-9]+', Number.Float, ('#pop', 'preproc-expr-chain')), ('[0-9]+[eE][+\\-]?[0-9]+', Number.Float, ('#pop', 'preproc-expr-chain')), ('[0-9]+\\.[0-9]*[eE][+\\-]?[0-9]+', Number.Float, ('#pop', 'preproc-expr-chain')), ('[0-9]+\\.[0-9]+', Number.Float, ('#pop', 'preproc-expr-chain')), ('[0-9]+\\.(?!' + ident + '|\\.\\.)', Number.Float, ('#pop', 'preproc-expr-chain')), ('0x[0-9a-fA-F]+', Number.Hex, ('#pop', 'preproc-expr-chain')), ('[0-9]+', Number.Integer, ('#pop', 'preproc-expr-chain')), ("'", String.Single, ('#pop', 'preproc-expr-chain', 'string-single')), ('"', String.Double, ('#pop', 'preproc-expr-chain', 'string-double'))], 'abstract': [include('spaces'), default(('#pop', 'abstract-body', 'abstract-relation', 'abstract-opaque', 'type-param-constraint', 'type-name'))], 'abstract-body': [include('spaces'), ('\\{', Punctuation, ('#pop', 'class-body'))], 'abstract-opaque': [include('spaces'), ('\\(', Punctuation, ('#pop', 'parenthesis-close', 'type')), default('#pop')], 'abstract-relation': [include('spaces'), ('(?:to|from)', Keyword.Declaration, 'type'), (',', Punctuation), default('#pop')], 'meta': [include('spaces'), ('@', Name.Decorator, ('meta-body', 'meta-ident', 'meta-colon'))], 'meta-colon': [include('spaces'), (':', Name.Decorator, '#pop'), default('#pop')], 'meta-ident': [include('spaces'), (ident, Name.Decorator, '#pop')], 'meta-body': [include('spaces'), ('\\(', Name.Decorator, ('#pop', 'meta-call')), default('#pop')], 'meta-call': [include('spaces'), ('\\)', Name.Decorator, '#pop'), default(('#pop', 'meta-call-sep', 'expr'))], 'meta-call-sep': [include('spaces'), ('\\)', Name.Decorator, '#pop'), (',', Punctuation, ('#pop', 'meta-call'))], 'typedef': [include('spaces'), default(('#pop', 'typedef-body', 'type-param-constraint', 'type-name'))], 'typedef-body': [include('spaces'), ('=', Operator, ('#pop', 'optional-semicolon', 'type'))], 'enum': [include('spaces'), default(('#pop', 'enum-body', 'bracket-open', 'type-param-constraint', 'type-name'))], 'enum-body': [include('spaces'), include('meta'), ('\\}', Punctuation, '#pop'), (ident_no_keyword, Name, ('enum-member', 'type-param-constraint'))], 'enum-member': [include('spaces'), ('\\(', Punctuation, ('#pop', 'semicolon', 'flag', 'function-param')), default(('#pop', 'semicolon', 'flag'))], 'class': [include('spaces'), default(('#pop', 'class-body', 'bracket-open', 'extends', 'type-param-constraint', 'type-name'))], 'extends': [include('spaces'), ('(?:extends|implements)\\b', Keyword.Declaration, 'type'), (',', Punctuation), default('#pop')], 'bracket-open': [include('spaces'), ('\\{', Punctuation, '#pop')], 'bracket-close': [include('spaces'), ('\\}', Punctuation, '#pop')], 'class-body': [include('spaces'), include('meta'), ('\\}', Punctuation, '#pop'), ('(?:static|public|private|override|dynamic|inline|macro)\\b', Keyword.Declaration), default('class-member')], 'class-member': [include('spaces'), ('(var)\\b', Keyword.Declaration, ('#pop', 'optional-semicolon', 'var')), ('(function)\\b', Keyword.Declaration, ('#pop', 'optional-semicolon', 'class-method'))], 'function-local': [include('spaces'), (ident_no_keyword, Name.Function, ('#pop', 'optional-expr', 'flag', 'function-param', 'parenthesis-open', 'type-param-constraint')), default(('#pop', 'optional-expr', 'flag', 'function-param', 'parenthesis-open', 'type-param-constraint'))], 'optional-expr': [include('spaces'), include('expr'), default('#pop')], 'class-method': [include('spaces'), (ident, Name.Function, ('#pop', 'optional-expr', 'flag', 'function-param', 'parenthesis-open', 'type-param-constraint'))], 'function-param': [include('spaces'), ('\\)', Punctuation, '#pop'), ('\\?', Punctuation), (ident_no_keyword, Name, ('#pop', 'function-param-sep', 'assign', 'flag'))], 'function-param-sep': [include('spaces'), ('\\)', Punctuation, '#pop'), (',', Punctuation, ('#pop', 'function-param'))], 'prop-get-set': [include('spaces'), ('\\(', Punctuation, ('#pop', 'parenthesis-close', 'prop-get-set-opt', 'comma', 'prop-get-set-opt')), default('#pop')], 'prop-get-set-opt': [include('spaces'), ('(?:default|null|never|dynamic|get|set)\\b', Keyword, '#pop'), (ident_no_keyword, Text, '#pop')], 'expr-statement': [include('spaces'), default(('#pop', 'optional-semicolon', 'expr'))], 'expr': [include('spaces'), ('@', Name.Decorator, ('#pop', 'optional-expr', 'meta-body', 'meta-ident', 'meta-colon')), ('(?:\\+\\+|\\-\\-|~(?!/)|!|\\-)', Operator), ('\\(', Punctuation, ('#pop', 'expr-chain', 'parenthesis')), ('(?:static|public|private|override|dynamic|inline)\\b', Keyword.Declaration), ('(?:function)\\b', Keyword.Declaration, ('#pop', 'expr-chain', 'function-local')), ('\\{', Punctuation, ('#pop', 'expr-chain', 'bracket')), ('(?:true|false|null)\\b', Keyword.Constant, ('#pop', 'expr-chain')), ('(?:this)\\b', Keyword, ('#pop', 'expr-chain')), ('(?:cast)\\b', Keyword, ('#pop', 'expr-chain', 'cast')), ('(?:try)\\b', Keyword, ('#pop', 'catch', 'expr')), ('(?:var)\\b', Keyword.Declaration, ('#pop', 'var')), ('(?:new)\\b', Keyword, ('#pop', 'expr-chain', 'new')), ('(?:switch)\\b', Keyword, ('#pop', 'switch')), ('(?:if)\\b', Keyword, ('#pop', 'if')), ('(?:do)\\b', Keyword, ('#pop', 'do')), ('(?:while)\\b', Keyword, ('#pop', 'while')), ('(?:for)\\b', Keyword, ('#pop', 'for')), ('(?:untyped|throw)\\b', Keyword), ('(?:return)\\b', Keyword, ('#pop', 'optional-expr')), ('(?:macro)\\b', Keyword, ('#pop', 'macro')), ('(?:continue|break)\\b', Keyword, '#pop'), ('(?:\\$\\s*[a-z]\\b|\\$(?!' + ident + '))', Name, ('#pop', 'dollar')), (ident_no_keyword, Name, ('#pop', 'expr-chain')), ('\\.[0-9]+', Number.Float, ('#pop', 'expr-chain')), ('[0-9]+[eE][+\\-]?[0-9]+', Number.Float, ('#pop', 'expr-chain')), ('[0-9]+\\.[0-9]*[eE][+\\-]?[0-9]+', Number.Float, ('#pop', 'expr-chain')), ('[0-9]+\\.[0-9]+', Number.Float, ('#pop', 'expr-chain')), ('[0-9]+\\.(?!' + ident + '|\\.\\.)', Number.Float, ('#pop', 'expr-chain')), ('0x[0-9a-fA-F]+', Number.Hex, ('#pop', 'expr-chain')), ('[0-9]+', Number.Integer, ('#pop', 'expr-chain')), ("'", String.Single, ('#pop', 'expr-chain', 'string-single-interpol')), ('"', String.Double, ('#pop', 'expr-chain', 'string-double')), ('~/(\\\\\\\\|\\\\[^\\\\]|[^/\\\\\\n])*/[gimsu]*', String.Regex, ('#pop', 'expr-chain')), ('\\[', Punctuation, ('#pop', 'expr-chain', 'array-decl'))], 'expr-chain': [include('spaces'), ('(?:\\+\\+|\\-\\-)', Operator), (binop, Operator, ('#pop', 'expr')), ('(?:in)\\b', Keyword, ('#pop', 'expr')), ('\\?', Operator, ('#pop', 'expr', 'ternary', 'expr')), ('(\\.)(' + ident_no_keyword + ')', bygroups(Punctuation, Name)), ('\\[', Punctuation, 'array-access'), ('\\(', Punctuation, 'call'), default('#pop')], 'macro': [include('spaces'), include('meta'), (':', Punctuation, ('#pop', 'type')), ('(?:extern|private)\\b', Keyword.Declaration), ('(?:abstract)\\b', Keyword.Declaration, ('#pop', 'optional-semicolon', 'abstract')), ('(?:class|interface)\\b', Keyword.Declaration, ('#pop', 'optional-semicolon', 'macro-class')), ('(?:enum)\\b', Keyword.Declaration, ('#pop', 'optional-semicolon', 'enum')), ('(?:typedef)\\b', Keyword.Declaration, ('#pop', 'optional-semicolon', 'typedef')), default(('#pop', 'expr'))], 'macro-class': [('\\{', Punctuation, ('#pop', 'class-body')), include('class')], 'cast': [include('spaces'), ('\\(', Punctuation, ('#pop', 'parenthesis-close', 'cast-type', 'expr')), default(('#pop', 'expr'))], 'cast-type': [include('spaces'), (',', Punctuation, ('#pop', 'type')), default('#pop')], 'catch': [include('spaces'), ('(?:catch)\\b', Keyword, ('expr', 'function-param', 'parenthesis-open')), default('#pop')], 'do': [include('spaces'), default(('#pop', 'do-while', 'expr'))], 'do-while': [include('spaces'), ('(?:while)\\b', Keyword, ('#pop', 'parenthesis', 'parenthesis-open'))], 'while': [include('spaces'), ('\\(', Punctuation, ('#pop', 'expr', 'parenthesis'))], 'for': [include('spaces'), ('\\(', Punctuation, ('#pop', 'expr', 'parenthesis'))], 'if': [include('spaces'), ('\\(', Punctuation, ('#pop', 'else', 'optional-semicolon', 'expr', 'parenthesis'))], 'else': [include('spaces'), ('(?:else)\\b', Keyword, ('#pop', 'expr')), default('#pop')], 'switch': [include('spaces'), default(('#pop', 'switch-body', 'bracket-open', 'expr'))], 'switch-body': [include('spaces'), ('(?:case|default)\\b', Keyword, ('case-block', 'case')), ('\\}', Punctuation, '#pop')], 'case': [include('spaces'), (':', Punctuation, '#pop'), default(('#pop', 'case-sep', 'case-guard', 'expr'))], 'case-sep': [include('spaces'), (':', Punctuation, '#pop'), (',', Punctuation, ('#pop', 'case'))], 'case-guard': [include('spaces'), ('(?:if)\\b', Keyword, ('#pop', 'parenthesis', 'parenthesis-open')), default('#pop')], 'case-block': [include('spaces'), ('(?!(?:case|default)\\b|\\})', Keyword, 'expr-statement'), default('#pop')], 'new': [include('spaces'), default(('#pop', 'call', 'parenthesis-open', 'type'))], 'array-decl': [include('spaces'), ('\\]', Punctuation, '#pop'), default(('#pop', 'array-decl-sep', 'expr'))], 'array-decl-sep': [include('spaces'), ('\\]', Punctuation, '#pop'), (',', Punctuation, ('#pop', 'array-decl'))], 'array-access': [include('spaces'), default(('#pop', 'array-access-close', 'expr'))], 'array-access-close': [include('spaces'), ('\\]', Punctuation, '#pop')], 'comma': [include('spaces'), (',', Punctuation, '#pop')], 'colon': [include('spaces'), (':', Punctuation, '#pop')], 'semicolon': [include('spaces'), (';', Punctuation, '#pop')], 'optional-semicolon': [include('spaces'), (';', Punctuation, '#pop'), default('#pop')], 'ident': [include('spaces'), (ident, Name, '#pop')], 'dollar': [include('spaces'), ('\\{', Punctuation, ('#pop', 'expr-chain', 'bracket-close', 'expr')), default(('#pop', 'expr-chain'))], 'type-name': [include('spaces'), (typeid, Name, '#pop')], 'type-full-name': [include('spaces'), ('\\.', Punctuation, 'ident'), default('#pop')], 'type': [include('spaces'), ('\\?', Punctuation), (ident, Name, ('#pop', 'type-check', 'type-full-name')), ('\\{', Punctuation, ('#pop', 'type-check', 'type-struct')), ('\\(', Punctuation, ('#pop', 'type-check', 'type-parenthesis'))], 'type-parenthesis': [include('spaces'), default(('#pop', 'parenthesis-close', 'type'))], 'type-check': [include('spaces'), ('->', Punctuation, ('#pop', 'type')), ('<(?!=)', Punctuation, 'type-param'), default('#pop')], 'type-struct': [include('spaces'), ('\\}', Punctuation, '#pop'), ('\\?', Punctuation), ('>', Punctuation, ('comma', 'type')), (ident_no_keyword, Name, ('#pop', 'type-struct-sep', 'type', 'colon')), include('class-body')], 'type-struct-sep': [include('spaces'), ('\\}', Punctuation, '#pop'), (',', Punctuation, ('#pop', 'type-struct'))], 'type-param-type': [('\\.[0-9]+', Number.Float, '#pop'), ('[0-9]+[eE][+\\-]?[0-9]+', Number.Float, '#pop'), ('[0-9]+\\.[0-9]*[eE][+\\-]?[0-9]+', Number.Float, '#pop'), ('[0-9]+\\.[0-9]+', Number.Float, '#pop'), ('[0-9]+\\.(?!' + ident + '|\\.\\.)', Number.Float, '#pop'), ('0x[0-9a-fA-F]+', Number.Hex, '#pop'), ('[0-9]+', Number.Integer, '#pop'), ("'", String.Single, ('#pop', 'string-single')), ('"', String.Double, ('#pop', 'string-double')), ('~/(\\\\\\\\|\\\\[^\\\\]|[^/\\\\\\n])*/[gim]*', String.Regex, '#pop'), ('\\[', Operator, ('#pop', 'array-decl')), include('type')], 'type-param': [include('spaces'), default(('#pop', 'type-param-sep', 'type-param-type'))], 'type-param-sep': [include('spaces'), ('>', Punctuation, '#pop'), (',', Punctuation, ('#pop', 'type-param'))], 'type-param-constraint': [include('spaces'), ('<(?!=)', Punctuation, ('#pop', 'type-param-constraint-sep', 'type-param-constraint-flag', 'type-name')), default('#pop')], 'type-param-constraint-sep': [include('spaces'), ('>', Punctuation, '#pop'), (',', Punctuation, ('#pop', 'type-param-constraint-sep', 'type-param-constraint-flag', 'type-name'))], 'type-param-constraint-flag': [include('spaces'), (':', Punctuation, ('#pop', 'type-param-constraint-flag-type')), default('#pop')], 'type-param-constraint-flag-type': [include('spaces'), ('\\(', Punctuation, ('#pop', 'type-param-constraint-flag-type-sep', 'type')), default(('#pop', 'type'))], 'type-param-constraint-flag-type-sep': [include('spaces'), ('\\)', Punctuation, '#pop'), (',', Punctuation, 'type')], 'parenthesis': [include('spaces'), default(('#pop', 'parenthesis-close', 'flag', 'expr'))], 'parenthesis-open': [include('spaces'), ('\\(', Punctuation, '#pop')], 'parenthesis-close': [include('spaces'), ('\\)', Punctuation, '#pop')], 'var': [include('spaces'), (ident_no_keyword, Text, ('#pop', 'var-sep', 'assign', 'flag', 'prop-get-set'))], 'var-sep': [include('spaces'), (',', Punctuation, ('#pop', 'var')), default('#pop')], 'assign': [include('spaces'), ('=', Operator, ('#pop', 'expr')), default('#pop')], 'flag': [include('spaces'), (':', Punctuation, ('#pop', 'type')), default('#pop')], 'ternary': [include('spaces'), (':', Operator, '#pop')], 'call': [include('spaces'), ('\\)', Punctuation, '#pop'), default(('#pop', 'call-sep', 'expr'))], 'call-sep': [include('spaces'), ('\\)', Punctuation, '#pop'), (',', Punctuation, ('#pop', 'call'))], 'bracket': [include('spaces'), ('(?!(?:\\$\\s*[a-z]\\b|\\$(?!' + ident + ')))' + ident_no_keyword, Name, ('#pop', 'bracket-check')), ("'", String.Single, ('#pop', 'bracket-check', 'string-single')), ('"', String.Double, ('#pop', 'bracket-check', 'string-double')), default(('#pop', 'block'))], 'bracket-check': [include('spaces'), (':', Punctuation, ('#pop', 'object-sep', 'expr')), default(('#pop', 'block', 'optional-semicolon', 'expr-chain'))], 'block': [include('spaces'), ('\\}', Punctuation, '#pop'), default('expr-statement')], 'object': [include('spaces'), ('\\}', Punctuation, '#pop'), default(('#pop', 'object-sep', 'expr', 'colon', 'ident-or-string'))], 'ident-or-string': [include('spaces'), (ident_no_keyword, Name, '#pop'), ("'", String.Single, ('#pop', 'string-single')), ('"', String.Double, ('#pop', 'string-double'))], 'object-sep': [include('spaces'), ('\\}', Punctuation, '#pop'), (',', Punctuation, ('#pop', 'object'))]}
  --
      + preproc_callback(match, ctx)
      + analyse_text(text)
  }

  class HxmlLexer {
      + name = 'Hxml'
      + url = 'https://haxe.org/manual/compiler-usage-hxml.html'
      + aliases = ['haxeml', 'hxml']
      + filenames = ['*.hxml']
      + version_added = '1.6'
      + tokens = {'root': [('(--)(next)', bygroups(Punctuation, Generic.Heading)), ('(-)(prompt|debug|v)', bygroups(Punctuation, Keyword.Keyword)), ('(--)(neko-source|flash-strict|flash-use-stage|no-opt|no-traces|no-inline|times|no-output)', bygroups(Punctuation, Keyword)), ('(-)(cpp|js|neko|x|as3|swf9?|swf-lib|php|xml|main|lib|D|resource|cp|cmd)( +)(.+)', bygroups(Punctuation, Keyword, Whitespace, String)), ('(-)(swf-version)( +)(\\d+)', bygroups(Punctuation, Keyword, Whitespace, Number.Integer)), ('(-)(swf-header)( +)(\\d+)(:)(\\d+)(:)(\\d+)(:)([A-Fa-f0-9]{6})', bygroups(Punctuation, Keyword, Whitespace, Number.Integer, Punctuation, Number.Integer, Punctuation, Number.Integer, Punctuation, Number.Hex)), ('(--)(js-namespace|php-front|php-lib|remap|gen-hx-classes)( +)(.+)', bygroups(Punctuation, Keyword, Whitespace, String)), ('#.*', Comment.Single)]}
  }

  class VerilogLexer {
      + name = 'verilog'
      + aliases = ['verilog', 'v']
      + filenames = ['*.v']
      + mimetypes = ['text/x-verilog']
      + url = 'https://en.wikipedia.org/wiki/Verilog'
      + version_added = '1.4'
      + tokens = {'root': [('^\\s*`define', Comment.Preproc, 'macro'), ('\\s+', Whitespace), ('(\\\\)(\\n)', bygroups(String.Escape, Whitespace)), ('/(\\\\\\n)?/(\\n|(.|\\n)*?[^\\\\]\\n)', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ('[{}#@]', Punctuation), ('L?"', String, 'string'), ("L?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'", String.Char), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[lL]?', Number.Float), ('(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float), ("([0-9]+)|(\\'h)[0-9a-fA-F]+", Number.Hex), ("([0-9]+)|(\\'b)[01]+", Number.Bin), ("([0-9]+)|(\\'d)[0-9]+", Number.Integer), ("([0-9]+)|(\\'o)[0-7]+", Number.Oct), ("\\'[01xz]", Number), ('\\d+[Ll]?', Number.Integer), ('[~!%^&*+=|?:<>/-]', Operator), ("[()\\[\\],.;\\']", Punctuation), ('`[a-zA-Z_]\\w*', Name.Constant), ('^(\\s*)(package)(\\s+)', bygroups(Whitespace, Keyword.Namespace, Text)), ('^(\\s*)(import)(\\s+)', bygroups(Whitespace, Keyword.Namespace, Text), 'import'), (words(('always', 'always_comb', 'always_ff', 'always_latch', 'and', 'assign', 'automatic', 'begin', 'break', 'buf', 'bufif0', 'bufif1', 'case', 'casex', 'casez', 'cmos', 'const', 'continue', 'deassign', 'default', 'defparam', 'disable', 'do', 'edge', 'else', 'end', 'endcase', 'endfunction', 'endgenerate', 'endmodule', 'endpackage', 'endprimitive', 'endspecify', 'endtable', 'endtask', 'enum', 'event', 'final', 'for', 'force', 'forever', 'fork', 'function', 'generate', 'genvar', 'highz0', 'highz1', 'if', 'initial', 'inout', 'input', 'integer', 'join', 'large', 'localparam', 'macromodule', 'medium', 'module', 'nand', 'negedge', 'nmos', 'nor', 'not', 'notif0', 'notif1', 'or', 'output', 'packed', 'parameter', 'pmos', 'posedge', 'primitive', 'pull0', 'pull1', 'pulldown', 'pullup', 'rcmos', 'ref', 'release', 'repeat', 'return', 'rnmos', 'rpmos', 'rtran', 'rtranif0', 'rtranif1', 'scalared', 'signed', 'small', 'specify', 'specparam', 'strength', 'string', 'strong0', 'strong1', 'struct', 'table', 'task', 'tran', 'tranif0', 'tranif1', 'type', 'typedef', 'unsigned', 'var', 'vectored', 'void', 'wait', 'weak0', 'weak1', 'while', 'xnor', 'xor'), suffix='\\b'), Keyword), (words(('accelerate', 'autoexpand_vectornets', 'celldefine', 'default_nettype', 'else', 'elsif', 'endcelldefine', 'endif', 'endprotect', 'endprotected', 'expand_vectornets', 'ifdef', 'ifndef', 'include', 'noaccelerate', 'noexpand_vectornets', 'noremove_gatenames', 'noremove_netnames', 'nounconnected_drive', 'protect', 'protected', 'remove_gatenames', 'remove_netnames', 'resetall', 'timescale', 'unconnected_drive', 'undef'), prefix='`', suffix='\\b'), Comment.Preproc), (words(('bits', 'bitstoreal', 'bitstoshortreal', 'countdrivers', 'display', 'fclose', 'fdisplay', 'finish', 'floor', 'fmonitor', 'fopen', 'fstrobe', 'fwrite', 'getpattern', 'history', 'incsave', 'input', 'itor', 'key', 'list', 'log', 'monitor', 'monitoroff', 'monitoron', 'nokey', 'nolog', 'printtimescale', 'random', 'readmemb', 'readmemh', 'realtime', 'realtobits', 'reset', 'reset_count', 'reset_value', 'restart', 'rtoi', 'save', 'scale', 'scope', 'shortrealtobits', 'showscopes', 'showvariables', 'showvars', 'sreadmemb', 'sreadmemh', 'stime', 'stop', 'strobe', 'time', 'timeformat', 'write'), prefix='\\$', suffix='\\b'), Name.Builtin), (words(('byte', 'shortint', 'int', 'longint', 'integer', 'time', 'bit', 'logic', 'reg', 'supply0', 'supply1', 'tri', 'triand', 'trior', 'tri0', 'tri1', 'trireg', 'uwire', 'wire', 'wand', 'worshortreal', 'real', 'realtime'), suffix='\\b'), Keyword.Type), ('[a-zA-Z_]\\w*:(?!:)', Name.Label), ('\\$?[a-zA-Z_]\\w*', Name), ('\\\\(\\S+)', Name)], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('(\\\\)(\\n)', bygroups(String.Escape, Whitespace)), ('\\\\', String)], 'macro': [('[^/\\n]+', Comment.Preproc), ('/[*](.|\\n)*?[*]/', Comment.Multiline), ('//.*?\\n', Comment.Single, '#pop'), ('/', Comment.Preproc), ('(?<=\\\\)\\n', Comment.Preproc), ('\\n', Whitespace, '#pop')], 'import': [('[\\w:]+\\*?', Name.Namespace, '#pop')]}
  --
      + analyse_text(text)
  }

  class SystemVerilogLexer {
      + name = 'systemverilog'
      + aliases = ['systemverilog', 'sv']
      + filenames = ['*.sv', '*.svh']
      + mimetypes = ['text/x-systemverilog']
      + url = 'https://en.wikipedia.org/wiki/SystemVerilog'
      + version_added = '1.5'
      + tokens = {'root': [('^(\\s*)(`define)', bygroups(Whitespace, Comment.Preproc), 'macro'), ('^(\\s*)(package)(\\s+)', bygroups(Whitespace, Keyword.Namespace, Whitespace)), ('^(\\s*)(import)(\\s+)', bygroups(Whitespace, Keyword.Namespace, Whitespace), 'import'), ('\\s+', Whitespace), ('(\\\\)(\\n)', bygroups(String.Escape, Whitespace)), ('/(\\\\\\n)?/(\\n|(.|\\n)*?[^\\\\]\\n)', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ('[{}#@]', Punctuation), ('L?"', String, 'string'), ("L?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'", String.Char), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[lL]?', Number.Float), ('(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float), ("([1-9][_0-9]*)?\\s*\\'[sS]?[bB]\\s*[xXzZ?01][_xXzZ?01]*", Number.Bin), ("([1-9][_0-9]*)?\\s*\\'[sS]?[oO]\\s*[xXzZ?0-7][_xXzZ?0-7]*", Number.Oct), ("([1-9][_0-9]*)?\\s*\\'[sS]?[dD]\\s*[xXzZ?0-9][_xXzZ?0-9]*", Number.Integer), ("([1-9][_0-9]*)?\\s*\\'[sS]?[hH]\\s*[xXzZ?0-9a-fA-F][_xXzZ?0-9a-fA-F]*", Number.Hex), ("\\'[01xXzZ]", Number), ('[0-9][_0-9]*', Number.Integer), ('[~!%^&*+=|?:<>/-]', Operator), (words(('inside', 'dist'), suffix='\\b'), Operator.Word), ("[()\\[\\],.;\\'$]", Punctuation), ('`[a-zA-Z_]\\w*', Name.Constant), (words(('accept_on', 'alias', 'always', 'always_comb', 'always_ff', 'always_latch', 'and', 'assert', 'assign', 'assume', 'automatic', 'before', 'begin', 'bind', 'bins', 'binsof', 'break', 'buf', 'bufif0', 'bufif1', 'case', 'casex', 'casez', 'cell', 'checker', 'clocking', 'cmos', 'config', 'constraint', 'context', 'continue', 'cover', 'covergroup', 'coverpoint', 'cross', 'deassign', 'default', 'defparam', 'design', 'disable', 'do', 'edge', 'else', 'end', 'endcase', 'endchecker', 'endclocking', 'endconfig', 'endfunction', 'endgenerate', 'endgroup', 'endinterface', 'endmodule', 'endpackage', 'endprimitive', 'endprogram', 'endproperty', 'endsequence', 'endspecify', 'endtable', 'endtask', 'enum', 'eventually', 'expect', 'export', 'extern', 'final', 'first_match', 'for', 'force', 'foreach', 'forever', 'fork', 'forkjoin', 'function', 'generate', 'genvar', 'global', 'highz0', 'highz1', 'if', 'iff', 'ifnone', 'ignore_bins', 'illegal_bins', 'implies', 'implements', 'import', 'incdir', 'include', 'initial', 'inout', 'input', 'instance', 'interconnect', 'interface', 'intersect', 'join', 'join_any', 'join_none', 'large', 'let', 'liblist', 'library', 'local', 'localparam', 'macromodule', 'matches', 'medium', 'modport', 'module', 'nand', 'negedge', 'nettype', 'new', 'nexttime', 'nmos', 'nor', 'noshowcancelled', 'not', 'notif0', 'notif1', 'null', 'or', 'output', 'package', 'packed', 'parameter', 'pmos', 'posedge', 'primitive', 'priority', 'program', 'property', 'protected', 'pull0', 'pull1', 'pulldown', 'pullup', 'pulsestyle_ondetect', 'pulsestyle_onevent', 'pure', 'rand', 'randc', 'randcase', 'randsequence', 'rcmos', 'ref', 'reject_on', 'release', 'repeat', 'restrict', 'return', 'rnmos', 'rpmos', 'rtran', 'rtranif0', 'rtranif1', 's_always', 's_eventually', 's_nexttime', 's_until', 's_until_with', 'scalared', 'sequence', 'showcancelled', 'small', 'soft', 'solve', 'specify', 'specparam', 'static', 'strong', 'strong0', 'strong1', 'struct', 'super', 'sync_accept_on', 'sync_reject_on', 'table', 'tagged', 'task', 'this', 'throughout', 'timeprecision', 'timeunit', 'tran', 'tranif0', 'tranif1', 'typedef', 'union', 'unique', 'unique0', 'until', 'until_with', 'untyped', 'use', 'vectored', 'virtual', 'wait', 'wait_order', 'weak', 'weak0', 'weak1', 'while', 'wildcard', 'with', 'within', 'xnor', 'xor'), suffix='\\b'), Keyword), ('(class)(\\s+)([a-zA-Z_]\\w*)', bygroups(Keyword.Declaration, Whitespace, Name.Class)), ('(extends)(\\s+)([a-zA-Z_]\\w*)', bygroups(Keyword.Declaration, Whitespace, Name.Class)), ('(endclass\\b)(?:(\\s*)(:)(\\s*)([a-zA-Z_]\\w*))?', bygroups(Keyword.Declaration, Whitespace, Punctuation, Whitespace, Name.Class)), (words(('bit', 'byte', 'chandle', 'const', 'event', 'int', 'integer', 'logic', 'longint', 'real', 'realtime', 'reg', 'shortint', 'shortreal', 'signed', 'string', 'time', 'type', 'unsigned', 'var', 'void', 'supply0', 'supply1', 'tri', 'triand', 'trior', 'trireg', 'tri0', 'tri1', 'uwire', 'wand', 'wire', 'wor'), suffix='\\b'), Keyword.Type), (words(('`__FILE__', '`__LINE__', '`begin_keywords', '`celldefine', '`default_nettype', '`define', '`else', '`elsif', '`end_keywords', '`endcelldefine', '`endif', '`ifdef', '`ifndef', '`include', '`line', '`nounconnected_drive', '`pragma', '`resetall', '`timescale', '`unconnected_drive', '`undef', '`undefineall'), suffix='\\b'), Comment.Preproc), (words(('$exit', '$finish', '$stop', '$realtime', '$stime', '$time', '$printtimescale', '$timeformat', '$bitstoreal', '$bitstoshortreal', '$cast', '$itor', '$realtobits', '$rtoi', '$shortrealtobits', '$signed', '$unsigned', '$bits', '$isunbounded', '$typename', '$dimensions', '$high', '$increment', '$left', '$low', '$right', '$size', '$unpacked_dimensions', '$acos', '$acosh', '$asin', '$asinh', '$atan', '$atan2', '$atanh', '$ceil', '$clog2', '$cos', '$cosh', '$exp', '$floor', '$hypot', '$ln', '$log10', '$pow', '$sin', '$sinh', '$sqrt', '$tan', '$tanh', '$countbits', '$countones', '$isunknown', '$onehot', '$onehot0', '$info', '$error', '$fatal', '$warning', '$assertcontrol', '$assertfailoff', '$assertfailon', '$assertkill', '$assertnonvacuouson', '$assertoff', '$asserton', '$assertpassoff', '$assertpasson', '$assertvacuousoff', '$changed', '$changed_gclk', '$changing_gclk', '$falling_gclk', '$fell', '$fell_gclk', '$future_gclk', '$past', '$past_gclk', '$rising_gclk', '$rose', '$rose_gclk', '$sampled', '$stable', '$stable_gclk', '$steady_gclk', '$coverage_control', '$coverage_get', '$coverage_get_max', '$coverage_merge', '$coverage_save', '$get_coverage', '$load_coverage_db', '$set_coverage_db_name', '$dist_chi_square', '$dist_erlang', '$dist_exponential', '$dist_normal', '$dist_poisson', '$dist_t', '$dist_uniform', '$random', '$q_add', '$q_exam', '$q_full', '$q_initialize', '$q_remove', '$async$and$array', '$async$and$plane', '$async$nand$array', '$async$nand$plane', '$async$nor$array', '$async$nor$plane', '$async$or$array', '$async$or$plane', '$sync$and$array', '$sync$and$plane', '$sync$nand$array', '$sync$nand$plane', '$sync$nor$array', '$sync$nor$plane', '$sync$or$array', '$sync$or$plane', '$system', '$display', '$displayb', '$displayh', '$displayo', '$monitor', '$monitorb', '$monitorh', '$monitoro', '$monitoroff', '$monitoron', '$strobe', '$strobeb', '$strobeh', '$strobeo', '$write', '$writeb', '$writeh', '$writeo', '$fclose', '$fdisplay', '$fdisplayb', '$fdisplayh', '$fdisplayo', '$feof', '$ferror', '$fflush', '$fgetc', '$fgets', '$fmonitor', '$fmonitorb', '$fmonitorh', '$fmonitoro', '$fopen', '$fread', '$fscanf', '$fseek', '$fstrobe', '$fstrobeb', '$fstrobeh', '$fstrobeo', '$ftell', '$fwrite', '$fwriteb', '$fwriteh', '$fwriteo', '$rewind', '$sformat', '$sformatf', '$sscanf', '$swrite', '$swriteb', '$swriteh', '$swriteo', '$ungetc', '$readmemb', '$readmemh', '$writememb', '$writememh', '$test$plusargs', '$value$plusargs', '$dumpall', '$dumpfile', '$dumpflush', '$dumplimit', '$dumpoff', '$dumpon', '$dumpports', '$dumpportsall', '$dumpportsflush', '$dumpportslimit', '$dumpportsoff', '$dumpportson', '$dumpvars'), suffix='\\b'), Name.Builtin), ('[a-zA-Z_]\\w*:(?!:)', Name.Label), ('\\$?[a-zA-Z_]\\w*', Name), ('\\\\(\\S+)', Name)], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('(\\\\)(\\n)', bygroups(String.Escape, Whitespace)), ('\\\\', String)], 'macro': [('[^/\\n]+', Comment.Preproc), ('/[*](.|\\n)*?[*]/', Comment.Multiline), ('//.*?$', Comment.Single, '#pop'), ('/', Comment.Preproc), ('(?<=\\\\)\\n', Comment.Preproc), ('\\n', Whitespace, '#pop')], 'import': [('[\\w:]+\\*?', Name.Namespace, '#pop')]}
  }

  class VhdlLexer {
      + name = 'vhdl'
      + aliases = ['vhdl']
      + filenames = ['*.vhdl', '*.vhd']
      + mimetypes = ['text/x-vhdl']
      + url = 'https://en.wikipedia.org/wiki/VHDL'
      + version_added = '1.5'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('(\\\\)(\\n)', bygroups(String.Escape, Whitespace)), ('--.*?$', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ("'(U|X|0|1|Z|W|L|H|-)'", String.Char), ('[~!%^&*+=|?:<>/-]', Operator), ("'[a-z_]\\w*", Name.Attribute), ("[()\\[\\],.;\\']", Punctuation), ('"[^\\n\\\\"]*"', String), ('(library)(\\s+)([a-z_]\\w*)', bygroups(Keyword, Whitespace, Name.Namespace)), ('(use)(\\s+)(entity)', bygroups(Keyword, Whitespace, Keyword)), ('(use)(\\s+)([a-z_][\\w.]*\\.)(all)', bygroups(Keyword, Whitespace, Name.Namespace, Keyword)), ('(use)(\\s+)([a-z_][\\w.]*)', bygroups(Keyword, Whitespace, Name.Namespace)), ('(std|ieee)(\\.[a-z_]\\w*)', bygroups(Name.Namespace, Name.Namespace)), (words(('std', 'ieee', 'work'), suffix='\\b'), Name.Namespace), ('(entity|component)(\\s+)([a-z_]\\w*)', bygroups(Keyword, Whitespace, Name.Class)), ('(architecture|configuration)(\\s+)([a-z_]\\w*)(\\s+)(of)(\\s+)([a-z_]\\w*)(\\s+)(is)', bygroups(Keyword, Whitespace, Name.Class, Whitespace, Keyword, Whitespace, Name.Class, Whitespace, Keyword)), ('([a-z_]\\w*)(:)(\\s+)(process|for)', bygroups(Name.Class, Operator, Whitespace, Keyword)), ('(end)(\\s+)', bygroups(using(this), Whitespace), 'endblock'), include('types'), include('keywords'), include('numbers'), ('[a-z_]\\w*', Name)], 'endblock': [include('keywords'), ('[a-z_]\\w*', Name.Class), ('\\s+', Whitespace), (';', Punctuation, '#pop')], 'types': [(words(('boolean', 'bit', 'character', 'severity_level', 'integer', 'time', 'delay_length', 'natural', 'positive', 'string', 'bit_vector', 'file_open_kind', 'file_open_status', 'std_ulogic', 'std_ulogic_vector', 'std_logic', 'std_logic_vector', 'signed', 'unsigned'), suffix='\\b'), Keyword.Type)], 'keywords': [(words(('abs', 'access', 'after', 'alias', 'all', 'and', 'architecture', 'array', 'assert', 'attribute', 'begin', 'block', 'body', 'buffer', 'bus', 'case', 'component', 'configuration', 'constant', 'disconnect', 'downto', 'else', 'elsif', 'end', 'entity', 'exit', 'file', 'for', 'function', 'generate', 'generic', 'group', 'guarded', 'if', 'impure', 'in', 'inertial', 'inout', 'is', 'label', 'library', 'linkage', 'literal', 'loop', 'map', 'mod', 'nand', 'new', 'next', 'nor', 'not', 'null', 'of', 'on', 'open', 'or', 'others', 'out', 'package', 'port', 'postponed', 'procedure', 'process', 'pure', 'range', 'record', 'register', 'reject', 'rem', 'return', 'rol', 'ror', 'select', 'severity', 'signal', 'shared', 'sla', 'sll', 'sra', 'srl', 'subtype', 'then', 'to', 'transport', 'type', 'units', 'until', 'use', 'variable', 'wait', 'when', 'while', 'with', 'xnor', 'xor'), suffix='\\b'), Keyword)], 'numbers': [('\\d{1,2}#[0-9a-f_]+#?', Number.Integer), ('\\d+', Number.Integer), ('(\\d+\\.\\d*|\\.\\d+|\\d+)E[+-]?\\d+', Number.Float), ('X"[0-9a-f_]+"', Number.Hex), ('O"[0-7_]+"', Number.Oct), ('B"[01_]+"', Number.Bin)]}
  }

  class HexdumpLexer {
      + name = 'Hexdump'
      + aliases = ['hexdump']
      + url = 'https://en.wikipedia.org/wiki/Hex_dump'
      + version_added = '2.1'
      + hd = '[0-9A-Ha-h]'
      + tokens = {'root': [('\\n', Whitespace), include('offset'), ('(' + hd + '{2})(\\-)(' + hd + '{2})', bygroups(Number.Hex, Punctuation, Number.Hex)), (hd + '{2}', Number.Hex), ('(\\s{2,3})(\\>)(.{16})(\\<)$', bygroups(Whitespace, Punctuation, String, Punctuation), 'bracket-strings'), ('(\\s{2,3})(\\|)(.{16})(\\|)$', bygroups(Whitespace, Punctuation, String, Punctuation), 'piped-strings'), ('(\\s{2,3})(\\>)(.{1,15})(\\<)$', bygroups(Whitespace, Punctuation, String, Punctuation)), ('(\\s{2,3})(\\|)(.{1,15})(\\|)$', bygroups(Whitespace, Punctuation, String, Punctuation)), ('(\\s{2,3})(.{1,15})$', bygroups(Whitespace, String)), ('(\\s{2,3})(.{16}|.{20})$', bygroups(Whitespace, String), 'nonpiped-strings'), ('\\s', Whitespace), ('^\\*', Punctuation)], 'offset': [('^(' + hd + '+)(:)', bygroups(Name.Label, Punctuation), 'offset-mode'), ('^' + hd + '+', Name.Label)], 'offset-mode': [('\\s', Whitespace, '#pop'), (hd + '+', Name.Label), (':', Punctuation)], 'piped-strings': [('\\n', Whitespace), include('offset'), (hd + '{2}', Number.Hex), ('(\\s{2,3})(\\|)(.{1,16})(\\|)$', bygroups(Whitespace, Punctuation, String, Punctuation)), ('\\s', Whitespace), ('^\\*', Punctuation)], 'bracket-strings': [('\\n', Whitespace), include('offset'), (hd + '{2}', Number.Hex), ('(\\s{2,3})(\\>)(.{1,16})(\\<)$', bygroups(Whitespace, Punctuation, String, Punctuation)), ('\\s', Whitespace), ('^\\*', Punctuation)], 'nonpiped-strings': [('\\n', Whitespace), include('offset'), ('(' + hd + '{2})(\\-)(' + hd + '{2})', bygroups(Number.Hex, Punctuation, Number.Hex)), (hd + '{2}', Number.Hex), ('(\\s{19,})(.{1,20}?)$', bygroups(Whitespace, String)), ('(\\s{2,3})(.{1,20})$', bygroups(Whitespace, String)), ('\\s', Whitespace), ('^\\*', Punctuation)]}
  }

  class HtmlLexer {
      + name = 'HTML'
      + url = 'https://html.spec.whatwg.org/'
      + aliases = ['html']
      + filenames = ['*.html', '*.htm', '*.xhtml', '*.xslt']
      + mimetypes = ['text/html', 'application/xhtml+xml']
      + version_added = ''
      + flags = re.IGNORECASE | re.DOTALL
      + tokens = {'root': [('[^<&]+', Text), ('&\\S*?;', Name.Entity), ('\\<\\!\\[CDATA\\[.*?\\]\\]\\>', Comment.Preproc), ('<!--.*?-->', Comment.Multiline), ('<\\?.*?\\?>', Comment.Preproc), ('<![^>]*>', Comment.Preproc), ('(<)(\\s*)(script)(\\s*)', bygroups(Punctuation, Text, Name.Tag, Text), ('script-content', 'tag')), ('(<)(\\s*)(style)(\\s*)', bygroups(Punctuation, Text, Name.Tag, Text), ('style-content', 'tag')), ('(<)(\\s*)([\\w:.-]+)', bygroups(Punctuation, Text, Name.Tag), 'tag'), ('(<)(\\s*)(/)(\\s*)([\\w:.-]+)(\\s*)(>)', bygroups(Punctuation, Text, Punctuation, Text, Name.Tag, Text, Punctuation))], 'tag': [('\\s+', Text), ('([\\w:-]+\\s*)(=)(\\s*)', bygroups(Name.Attribute, Operator, Text), 'attr'), ('[\\w:-]+', Name.Attribute), ('(/?)(\\s*)(>)', bygroups(Punctuation, Text, Punctuation), '#pop')], 'script-content': [('(<)(\\s*)(/)(\\s*)(script)(\\s*)(>)', bygroups(Punctuation, Text, Punctuation, Text, Name.Tag, Text, Punctuation), '#pop'), ('.+?(?=<\\s*/\\s*script\\s*>)', using(JavascriptLexer)), ('.+?\\n', using(JavascriptLexer), '#pop'), ('.+', using(JavascriptLexer), '#pop')], 'style-content': [('(<)(\\s*)(/)(\\s*)(style)(\\s*)(>)', bygroups(Punctuation, Text, Punctuation, Text, Name.Tag, Text, Punctuation), '#pop'), ('.+?(?=<\\s*/\\s*style\\s*>)', using(CssLexer)), ('.+?\\n', using(CssLexer), '#pop'), ('.+', using(CssLexer), '#pop')], 'attr': [('".*?"', String, '#pop'), ("'.*?'", String, '#pop'), ('[^\\s>]+', String, '#pop')]}
  --
      + analyse_text(text)
  }

  class DtdLexer {
      + flags = re.MULTILINE | re.DOTALL
      + name = 'DTD'
      + aliases = ['dtd']
      + filenames = ['*.dtd']
      + mimetypes = ['application/xml-dtd']
      + url = 'https://en.wikipedia.org/wiki/Document_type_definition'
      + version_added = '1.5'
      + tokens = {'root': [include('common'), ('(<!ELEMENT)(\\s+)(\\S+)', bygroups(Keyword, Text, Name.Tag), 'element'), ('(<!ATTLIST)(\\s+)(\\S+)', bygroups(Keyword, Text, Name.Tag), 'attlist'), ('(<!ENTITY)(\\s+)(\\S+)', bygroups(Keyword, Text, Name.Entity), 'entity'), ('(<!NOTATION)(\\s+)(\\S+)', bygroups(Keyword, Text, Name.Tag), 'notation'), ('(<!\\[)([^\\[\\s]+)(\\s*)(\\[)', bygroups(Keyword, Name.Entity, Text, Keyword)), ('(<!DOCTYPE)(\\s+)([^>\\s]+)', bygroups(Keyword, Text, Name.Tag)), ('PUBLIC|SYSTEM', Keyword.Constant), ('[\\[\\]>]', Keyword)], 'common': [('\\s+', Text), ('(%|&)[^;]*;', Name.Entity), ('<!--', Comment, 'comment'), ('[(|)*,?+]', Operator), ('"[^"]*"', String.Double), ("\\'[^\\']*\\'", String.Single)], 'comment': [('[^-]+', Comment), ('-->', Comment, '#pop'), ('-', Comment)], 'element': [include('common'), ('EMPTY|ANY|#PCDATA', Keyword.Constant), ('[^>\\s|()?+*,]+', Name.Tag), ('>', Keyword, '#pop')], 'attlist': [include('common'), ('CDATA|IDREFS|IDREF|ID|NMTOKENS|NMTOKEN|ENTITIES|ENTITY|NOTATION', Keyword.Constant), ('#REQUIRED|#IMPLIED|#FIXED', Keyword.Constant), ('xml:space|xml:lang', Keyword.Reserved), ('[^>\\s|()?+*,]+', Name.Attribute), ('>', Keyword, '#pop')], 'entity': [include('common'), ('SYSTEM|PUBLIC|NDATA', Keyword.Constant), ('[^>\\s|()?+*,]+', Name.Entity), ('>', Keyword, '#pop')], 'notation': [include('common'), ('SYSTEM|PUBLIC', Keyword.Constant), ('[^>\\s|()?+*,]+', Name.Attribute), ('>', Keyword, '#pop')]}
  --
      + analyse_text(text)
  }

  class XmlLexer {
      + flags = re.MULTILINE | re.DOTALL
      + name = 'XML'
      + aliases = ['xml']
      + filenames = ['*.xml', '*.xsl', '*.rss', '*.xslt', '*.xsd', '*.wsdl', '*.wsf']
      + mimetypes = ['text/xml', 'application/xml', 'image/svg+xml', 'application/rss+xml', 'application/atom+xml']
      + url = 'https://www.w3.org/XML'
      + version_added = ''
      + tokens = {'root': [('[^<&\\s]+', Text), ('[^<&\\S]+', Whitespace), ('&\\S*?;', Name.Entity), ('\\<\\!\\[CDATA\\[.*?\\]\\]\\>', Comment.Preproc), ('<!--.*?-->', Comment.Multiline), ('<\\?.*?\\?>', Comment.Preproc), ('<![^>]*>', Comment.Preproc), ('<\\s*[\\w:.-]+', Name.Tag, 'tag'), ('<\\s*/\\s*[\\w:.-]+\\s*>', Name.Tag)], 'tag': [('\\s+', Whitespace), ('[\\w.:-]+\\s*=', Name.Attribute, 'attr'), ('/?\\s*>', Name.Tag, '#pop')], 'attr': [('\\s+', Whitespace), ('".*?"', String, '#pop'), ("'.*?'", String, '#pop'), ('[^\\s>]+', String, '#pop')]}
  --
      + analyse_text(text)
  }

  class XsltLexer {
      + name = 'XSLT'
      + aliases = ['xslt']
      + filenames = ['*.xsl', '*.xslt', '*.xpl']
      + mimetypes = ['application/xsl+xml', 'application/xslt+xml']
      + url = 'https://www.w3.org/TR/xslt-30'
      + version_added = '0.10'
      + EXTRA_KEYWORDS = {'apply-imports', 'apply-templates', 'attribute', 'attribute-set', 'call-template', 'choose', 'comment', 'copy', 'copy-of', 'decimal-format', 'element', 'fallback', 'for-each', 'if', 'import', 'include', 'key', 'message', 'namespace-alias', 'number', 'otherwise', 'output', 'param', 'preserve-space', 'processing-instruction', 'sort', 'strip-space', 'stylesheet', 'template', 'text', 'transform', 'value-of', 'variable', 'when', 'with-param'}
  --
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class HamlLexer {
      + name = 'Haml'
      + aliases = ['haml']
      + filenames = ['*.haml']
      + mimetypes = ['text/x-haml']
      + url = 'https://haml.info'
      + version_added = '1.3'
      + flags = re.IGNORECASE
      + tokens = {'root': [('[ \\t]*\\n', Text), ('[ \\t]*', _indentation)], 'css': [('\\.[\\w:-]+', Name.Class, 'tag'), ('\\#[\\w:-]+', Name.Function, 'tag')], 'eval-or-plain': [('[&!]?==', Punctuation, 'plain'), ('([&!]?[=~])(' + _comma_dot + '*\\n)', bygroups(Punctuation, using(RubyLexer)), 'root'), default('plain')], 'content': [include('css'), ('%[\\w:-]+', Name.Tag, 'tag'), ('!!!' + _dot + '*\\n', Name.Namespace, '#pop'), ('(/)(\\[' + _dot + '*?\\])(' + _dot + '*\\n)', bygroups(Comment, Comment.Special, Comment), '#pop'), ('/' + _dot + '*\\n', _starts_block(Comment, 'html-comment-block'), '#pop'), ('-#' + _dot + '*\\n', _starts_block(Comment.Preproc, 'haml-comment-block'), '#pop'), ('(-)(' + _comma_dot + '*\\n)', bygroups(Punctuation, using(RubyLexer)), '#pop'), (':' + _dot + '*\\n', _starts_block(Name.Decorator, 'filter-block'), '#pop'), include('eval-or-plain')], 'tag': [include('css'), ('\\{(,\\n|' + _dot + ')*?\\}', using(RubyLexer)), ('\\[' + _dot + '*?\\]', using(RubyLexer)), ('\\(', Text, 'html-attributes'), ('/[ \\t]*\\n', Punctuation, '#pop:2'), ('[<>]{1,2}(?=[ \\t=])', Punctuation), include('eval-or-plain')], 'plain': [('([^#\\n]|#[^{\\n]|(\\\\\\\\)*\\\\#\\{)+', Text), ('(#\\{)(' + _dot + '*?)(\\})', bygroups(String.Interpol, using(RubyLexer), String.Interpol)), ('\\n', Text, 'root')], 'html-attributes': [('\\s+', Text), ('[\\w:-]+[ \\t]*=', Name.Attribute, 'html-attribute-value'), ('[\\w:-]+', Name.Attribute), ('\\)', Text, '#pop')], 'html-attribute-value': [('[ \\t]+', Text), ('\\w+', Name.Variable, '#pop'), ('@\\w+', Name.Variable.Instance, '#pop'), ('\\$\\w+', Name.Variable.Global, '#pop'), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\\\n])*'", String, '#pop'), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\\\n])*"', String, '#pop')], 'html-comment-block': [(_dot + '+', Comment), ('\\n', Text, 'root')], 'haml-comment-block': [(_dot + '+', Comment.Preproc), ('\\n', Text, 'root')], 'filter-block': [('([^#\\n]|#[^{\\n]|(\\\\\\\\)*\\\\#\\{)+', Name.Decorator), ('(#\\{)(' + _dot + '*?)(\\})', bygroups(String.Interpol, using(RubyLexer), String.Interpol)), ('\\n', Text, 'root')]}
  }

  class ScamlLexer {
      + name = 'Scaml'
      + aliases = ['scaml']
      + filenames = ['*.scaml']
      + mimetypes = ['text/x-scaml']
      + url = 'https://scalate.github.io/scalate/'
      + version_added = '1.4'
      + flags = re.IGNORECASE
      + tokens = {'root': [('[ \\t]*\\n', Text), ('[ \\t]*', _indentation)], 'css': [('\\.[\\w:-]+', Name.Class, 'tag'), ('\\#[\\w:-]+', Name.Function, 'tag')], 'eval-or-plain': [('[&!]?==', Punctuation, 'plain'), ('([&!]?[=~])(' + _dot + '*\\n)', bygroups(Punctuation, using(ScalaLexer)), 'root'), default('plain')], 'content': [include('css'), ('%[\\w:-]+', Name.Tag, 'tag'), ('!!!' + _dot + '*\\n', Name.Namespace, '#pop'), ('(/)(\\[' + _dot + '*?\\])(' + _dot + '*\\n)', bygroups(Comment, Comment.Special, Comment), '#pop'), ('/' + _dot + '*\\n', _starts_block(Comment, 'html-comment-block'), '#pop'), ('-#' + _dot + '*\\n', _starts_block(Comment.Preproc, 'scaml-comment-block'), '#pop'), ('(-@\\s*)(import)?(' + _dot + '*\\n)', bygroups(Punctuation, Keyword, using(ScalaLexer)), '#pop'), ('(-)(' + _dot + '*\\n)', bygroups(Punctuation, using(ScalaLexer)), '#pop'), (':' + _dot + '*\\n', _starts_block(Name.Decorator, 'filter-block'), '#pop'), include('eval-or-plain')], 'tag': [include('css'), ('\\{(,\\n|' + _dot + ')*?\\}', using(ScalaLexer)), ('\\[' + _dot + '*?\\]', using(ScalaLexer)), ('\\(', Text, 'html-attributes'), ('/[ \\t]*\\n', Punctuation, '#pop:2'), ('[<>]{1,2}(?=[ \\t=])', Punctuation), include('eval-or-plain')], 'plain': [('([^#\\n]|#[^{\\n]|(\\\\\\\\)*\\\\#\\{)+', Text), ('(#\\{)(' + _dot + '*?)(\\})', bygroups(String.Interpol, using(ScalaLexer), String.Interpol)), ('\\n', Text, 'root')], 'html-attributes': [('\\s+', Text), ('[\\w:-]+[ \\t]*=', Name.Attribute, 'html-attribute-value'), ('[\\w:-]+', Name.Attribute), ('\\)', Text, '#pop')], 'html-attribute-value': [('[ \\t]+', Text), ('\\w+', Name.Variable, '#pop'), ('@\\w+', Name.Variable.Instance, '#pop'), ('\\$\\w+', Name.Variable.Global, '#pop'), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\\\n])*'", String, '#pop'), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\\\n])*"', String, '#pop')], 'html-comment-block': [(_dot + '+', Comment), ('\\n', Text, 'root')], 'scaml-comment-block': [(_dot + '+', Comment.Preproc), ('\\n', Text, 'root')], 'filter-block': [('([^#\\n]|#[^{\\n]|(\\\\\\\\)*\\\\#\\{)+', Name.Decorator), ('(#\\{)(' + _dot + '*?)(\\})', bygroups(String.Interpol, using(ScalaLexer), String.Interpol)), ('\\n', Text, 'root')]}
  }

  class PugLexer {
      + name = 'Pug'
      + aliases = ['pug', 'jade']
      + filenames = ['*.pug', '*.jade']
      + mimetypes = ['text/x-pug', 'text/x-jade']
      + url = 'https://pugjs.org'
      + version_added = '1.4'
      + flags = re.IGNORECASE
      + tokens = {'root': [('[ \\t]*\\n', Text), ('[ \\t]*', _indentation)], 'css': [('\\.[\\w:-]+', Name.Class, 'tag'), ('\\#[\\w:-]+', Name.Function, 'tag')], 'eval-or-plain': [('[&!]?==', Punctuation, 'plain'), ('([&!]?[=~])(' + _dot + '*\\n)', bygroups(Punctuation, using(ScalaLexer)), 'root'), default('plain')], 'content': [include('css'), ('!!!' + _dot + '*\\n', Name.Namespace, '#pop'), ('(/)(\\[' + _dot + '*?\\])(' + _dot + '*\\n)', bygroups(Comment, Comment.Special, Comment), '#pop'), ('/' + _dot + '*\\n', _starts_block(Comment, 'html-comment-block'), '#pop'), ('-#' + _dot + '*\\n', _starts_block(Comment.Preproc, 'scaml-comment-block'), '#pop'), ('(-@\\s*)(import)?(' + _dot + '*\\n)', bygroups(Punctuation, Keyword, using(ScalaLexer)), '#pop'), ('(-)(' + _dot + '*\\n)', bygroups(Punctuation, using(ScalaLexer)), '#pop'), (':' + _dot + '*\\n', _starts_block(Name.Decorator, 'filter-block'), '#pop'), ('[\\w:-]+', Name.Tag, 'tag'), ('\\|', Text, 'eval-or-plain')], 'tag': [include('css'), ('\\{(,\\n|' + _dot + ')*?\\}', using(ScalaLexer)), ('\\[' + _dot + '*?\\]', using(ScalaLexer)), ('\\(', Text, 'html-attributes'), ('/[ \\t]*\\n', Punctuation, '#pop:2'), ('[<>]{1,2}(?=[ \\t=])', Punctuation), include('eval-or-plain')], 'plain': [('([^#\\n]|#[^{\\n]|(\\\\\\\\)*\\\\#\\{)+', Text), ('(#\\{)(' + _dot + '*?)(\\})', bygroups(String.Interpol, using(ScalaLexer), String.Interpol)), ('\\n', Text, 'root')], 'html-attributes': [('\\s+', Text), ('[\\w:-]+[ \\t]*=', Name.Attribute, 'html-attribute-value'), ('[\\w:-]+', Name.Attribute), ('\\)', Text, '#pop')], 'html-attribute-value': [('[ \\t]+', Text), ('\\w+', Name.Variable, '#pop'), ('@\\w+', Name.Variable.Instance, '#pop'), ('\\$\\w+', Name.Variable.Global, '#pop'), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\\\n])*'", String, '#pop'), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\\\n])*"', String, '#pop')], 'html-comment-block': [(_dot + '+', Comment), ('\\n', Text, 'root')], 'scaml-comment-block': [(_dot + '+', Comment.Preproc), ('\\n', Text, 'root')], 'filter-block': [('([^#\\n]|#[^{\\n]|(\\\\\\\\)*\\\\#\\{)+', Name.Decorator), ('(#\\{)(' + _dot + '*?)(\\})', bygroups(String.Interpol, using(ScalaLexer), String.Interpol)), ('\\n', Text, 'root')]}
  }

  class UrlEncodedLexer {
      + name = 'urlencoded'
      + aliases = ['urlencoded']
      + mimetypes = ['application/x-www-form-urlencoded']
      + url = 'https://en.wikipedia.org/wiki/Percent-encoding'
      + version_added = '2.16'
      + tokens = {'root': [('([^&=]*)(=)([^=&]*)(&?)', bygroups(Name.Tag, Operator, String, Punctuation))]}
  }

  class VueLexer {
      + name = 'Vue'
      + url = 'https://vuejs.org/api/sfc-spec.html'
      + aliases = ['vue']
      + filenames = ['*.vue']
      + mimetypes = []
      + version_added = '2.19'
      + flags = re.IGNORECASE | re.DOTALL
      + tokens = {'root': [('(\\{\\{)(.*?)(\\}\\})', bygroups(Comment.Preproc, using(JavascriptLexer), Comment.Preproc)), ('[^<&{]+', Text), inherit], 'tag': [('\\s+', Text), ('((?:[@:]|v-)(?:[.\\w:-]|\\[[^\\]]*?\\])+\\s*)(=)(\\s*)', bygroups(using(this, state=['name']), Operator, Text), 'attr-directive'), ('([\\w:-]+\\s*)(=)(\\s*)', bygroups(Name.Attribute, Operator, Text), 'attr'), ('[\\w:-]+', Name.Attribute), ('(/?)(\\s*)(>)', bygroups(Punctuation, Text, Punctuation), '#pop')], 'name': [('[\\w-]+', Name.Attribute), ('[:@.]', Punctuation), ('(\\[)([^\\]]*?)(\\])', bygroups(Comment.Preproc, using(JavascriptLexer), Comment.Preproc))], 'attr-directive': [('(["\\\'])(.*?)(\\1)', bygroups(String, using(JavascriptLexer), String), '#pop'), ('[^\\s>]+', using(JavascriptLexer), '#pop')]}
  }

  class IDLLexer {
      + name = 'IDL'
      + url = 'https://www.l3harrisgeospatial.com/Software-Technology/IDL'
      + aliases = ['idl']
      + filenames = ['*.pro']
      + mimetypes = ['text/idl']
      + version_added = '1.6'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [('(^\\s*)(;.*?)(\\n)', bygroups(Whitespace, Comment.Single, Whitespace)), (words(_RESERVED, prefix='\\b', suffix='\\b'), Keyword), (words(_BUILTIN_LIB, prefix='\\b', suffix='\\b'), Name.Builtin), ('\\+=|-=|\\^=|\\*=|/=|#=|##=|<=|>=|=', Operator), ('\\+\\+|--|->|\\+|-|##|#|\\*|/|<|>|&&|\\^|~|\\|\\|\\?|:', Operator), ('\\b(mod=|lt=|le=|eq=|ne=|ge=|gt=|not=|and=|or=|xor=)', Operator), ('\\b(mod|lt|le|eq|ne|ge|gt|not|and|or|xor)\\b', Operator), ('"[^\\"]*"', String.Double), ("'[^\\']*'", String.Single), ('\\b[+\\-]?([0-9]*\\.[0-9]+|[0-9]+\\.[0-9]*)(D|E)?([+\\-]?[0-9]+)?\\b', Number.Float), ("\\b\\'[+\\-]?[0-9A-F]+\\'X(U?(S?|L{1,2})|B)\\b", Number.Hex), ("\\b\\'[+\\-]?[0-7]+\\'O(U?(S?|L{1,2})|B)\\b", Number.Oct), ('\\b[+\\-]?[0-9]+U?L{1,2}\\b', Number.Integer.Long), ('\\b[+\\-]?[0-9]+U?S?\\b', Number.Integer), ('\\b[+\\-]?[0-9]+B\\b', Number), ('[ \\t]+', Whitespace), ('\\n', Whitespace), ('.', Text)]}
  --
      + analyse_text(text)
  }

  class IgorLexer {
      + name = 'Igor'
      + aliases = ['igor', 'igorpro']
      + filenames = ['*.ipf']
      + mimetypes = ['text/ipf']
      + url = 'http://www.wavemetrics.com'
      + version_added = '2.0'
      + flags = re.IGNORECASE | re.MULTILINE
      + flowControl = ('if', 'else', 'elseif', 'endif', 'for', 'endfor', 'strswitch', 'switch', 'case', 'default', 'endswitch', 'do', 'while', 'try', 'catch', 'endtry', 'break', 'continue', 'return', 'AbortOnRTE', 'AbortOnValue')
      + types = ('variable', 'string', 'constant', 'strconstant', 'NVAR', 'SVAR', 'WAVE', 'STRUCT', 'dfref', 'funcref', 'char', 'uchar', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64', 'float', 'double', 'int')
      + keywords = ('override', 'ThreadSafe', 'MultiThread', 'static', 'Proc', 'Picture', 'Prompt', 'DoPrompt', 'macro', 'window', 'function', 'end', 'Structure', 'EndStructure', 'EndMacro', 'Menu', 'SubMenu')
      + operations = ('Abort', 'AddFIFOData', 'AddFIFOVectData', 'AddMovieAudio', 'AddMovieFrame', 'AddWavesToBoxPlot', 'AddWavesToViolinPlot', 'AdoptFiles', 'APMath', 'Append', 'AppendBoxPlot', 'AppendImage', 'AppendLayoutObject', 'AppendMatrixContour', 'AppendText', 'AppendToGizmo', 'AppendToGraph', 'AppendToLayout', 'AppendToTable', 'AppendViolinPlot', 'AppendXYZContour', 'AutoPositionWindow', 'AxonTelegraphFindServers', 'BackgroundInfo', 'Beep', 'BezierToPolygon', 'BoundingBall', 'BoxSmooth', 'BrowseURL', 'BuildMenu', 'Button', 'cd', 'Chart', 'CheckBox', 'CheckDisplayed', 'ChooseColor', 'Close', 'CloseHelp', 'CloseMovie', 'CloseProc', 'ColorScale', 'ColorTab2Wave', 'Concatenate', 'ControlBar', 'ControlInfo', 'ControlUpdate', 'ConvertGlobalStringTextEncoding', 'ConvexHull', 'Convolve', 'CopyDimLabels', 'CopyFile', 'CopyFolder', 'CopyScales', 'Correlate', 'CreateAliasShortcut', 'CreateBrowser', 'Cross', 'CtrlBackground', 'CtrlFIFO', 'CtrlNamedBackground', 'Cursor', 'CurveFit', 'CustomControl', 'CWT', 'DAQmx_AI_SetupReader', 'DAQmx_AO_SetOutputs', 'DAQmx_CTR_CountEdges', 'DAQmx_CTR_OutputPulse', 'DAQmx_CTR_Period', 'DAQmx_CTR_PulseWidth', 'DAQmx_DeviceInfo', 'DAQmx_DIO_Config', 'DAQmx_DIO_WriteNewData', 'DAQmx_Scan', 'DAQmx_WaveformGen', 'Debugger', 'DebuggerOptions', 'DefaultFont', 'DefaultGuiControls', 'DefaultGuiFont', 'DefaultTextEncoding', 'DefineGuide', 'DelayUpdate', 'DeleteAnnotations', 'DeleteFile', 'DeleteFolder', 'DeletePoints', 'Differentiate', 'dir', 'Display', 'DisplayHelpTopic', 'DisplayProcedure', 'DoAlert', 'DoIgorMenu', 'DoUpdate', 'DoWindow', 'DoXOPIdle', 'DPSS', 'DrawAction', 'DrawArc', 'DrawBezier', 'DrawLine', 'DrawOval', 'DrawPICT', 'DrawPoly', 'DrawRect', 'DrawRRect', 'DrawText', 'DrawUserShape', 'DSPDetrend', 'DSPPeriodogram', 'Duplicate', 'DuplicateDataFolder', 'DWT', 'EdgeStats', 'Edit', 'ErrorBars', 'EstimatePeakSizes', 'Execute', 'ExecuteScriptText', 'ExperimentInfo', 'ExperimentModified', 'ExportGizmo', 'Extract', 'FastGaussTransform', 'FastOp', 'FBinRead', 'FBinWrite', 'FCALL_CallFunction', 'FCALL_FreeLibrary', 'FCALL_GetFunctionList', 'FCALL_GetParamTypeList', 'FCALL_LoadLibrary', 'FCALL_Version', 'FFT', 'FGetPos', 'FIFOStatus', 'FIFO2Wave', 'FilterFIR', 'FilterIIR', 'FindAPeak', 'FindContour', 'FindDuplicates', 'FindLevel', 'FindLevels', 'FindPeak', 'FindPointsInPoly', 'FindRoots', 'FindSequence', 'FindValue', 'FMaxFlat', 'FPClustering', 'fprintf', 'FReadLine', 'FSetPos', 'FStatus', 'FTPCreateDirectory', 'FTPDelete', 'FTPDownload', 'FTPUpload', 'FuncFit', 'FuncFitMD', 'GBLoadWave', 'GetAxis', 'GetCamera', 'GetFileFolderInfo', 'GetGizmo', 'GetLastUserMenuInfo', 'GetMarquee', 'GetMouse', 'GetSelection', 'GetWindow', 'GISCreateVectorLayer', 'GISGetRasterInfo', 'GISGetRegisteredFileInfo', 'GISGetVectorLayerInfo', 'GISLoadRasterData', 'GISLoadVectorData', 'GISRasterizeVectorData', 'GISRegisterFile', 'GISTransformCoords', 'GISUnRegisterFile', 'GISWriteFieldData', 'GISWriteGeometryData', 'GISWriteRaster', 'GPIBReadBinaryWave2', 'GPIBReadBinary2', 'GPIBReadWave2', 'GPIBRead2', 'GPIBWriteBinaryWave2', 'GPIBWriteBinary2', 'GPIBWriteWave2', 'GPIBWrite2', 'GPIB2', 'GraphNormal', 'GraphWaveDraw', 'GraphWaveEdit', 'Grep', 'GroupBox', 'Hanning', 'HCluster', 'HDFInfo', 'HDFReadImage', 'HDFReadSDS', 'HDFReadVset', 'HDF5CloseFile', 'HDF5CloseGroup', 'HDF5Control', 'HDF5CreateFile', 'HDF5CreateGroup', 'HDF5CreateLink', 'HDF5DimensionScale', 'HDF5Dump', 'HDF5DumpErrors', 'HDF5FlushFile', 'HDF5ListAttributes', 'HDF5ListGroup', 'HDF5LoadData', 'HDF5LoadGroup', 'HDF5LoadImage', 'HDF5OpenFile', 'HDF5OpenGroup', 'HDF5SaveData', 'HDF5SaveGroup', 'HDF5SaveImage', 'HDF5UnlinkObject', 'HideIgorMenus', 'HideInfo', 'HideProcedures', 'HideTools', 'HilbertTransform', 'Histogram', 'ICA', 'IFFT', 'ImageAnalyzeParticles', 'ImageBlend', 'ImageBoundaryToMask', 'ImageComposite', 'ImageEdgeDetection', 'ImageFileInfo', 'ImageFilter', 'ImageFocus', 'ImageFromXYZ', 'ImageGenerateROIMask', 'ImageGLCM', 'ImageHistModification', 'ImageHistogram', 'ImageInterpolate', 'ImageLineProfile', 'ImageLoad', 'ImageMorphology', 'ImageRegistration', 'ImageRemoveBackground', 'ImageRestore', 'ImageRotate', 'ImageSave', 'ImageSeedFill', 'ImageSkeleton3d', 'ImageSnake', 'ImageStats', 'ImageThreshold', 'ImageTransform', 'ImageUnwrapPhase', 'ImageWindow', 'IndexSort', 'InsertPoints', 'InstantFrequency', 'Integrate', 'IntegrateODE', 'Integrate2D', 'Interpolate2', 'Interpolate3D', 'Interp3DPath', 'ITCCloseAll2', 'ITCCloseDevice2', 'ITCConfigAllChannels2', 'ITCConfigChannelReset2', 'ITCConfigChannelUpload2', 'ITCConfigChannel2', 'ITCFIFOAvailableAll2', 'ITCFIFOAvailable2', 'ITCGetAllChannelsConfig2', 'ITCGetChannelConfig2', 'ITCGetCurrentDevice2', 'ITCGetDeviceInfo2', 'ITCGetDevices2', 'ITCGetErrorString2', 'ITCGetSerialNumber2', 'ITCGetState2', 'ITCGetVersions2', 'ITCInitialize2', 'ITCOpenDevice2', 'ITCReadADC2', 'ITCReadDigital2', 'ITCReadTimer2', 'ITCSelectDevice2', 'ITCSetDAC2', 'ITCSetGlobals2', 'ITCSetModes2', 'ITCSetState2', 'ITCStartAcq2', 'ITCStopAcq2', 'ITCUpdateFIFOPositionAll2', 'ITCUpdateFIFOPosition2', 'ITCWriteDigital2', 'JCAMPLoadWave', 'JointHistogram', 'JSONXOP_AddTree', 'JSONXOP_AddValue', 'JSONXOP_Dump', 'JSONXOP_GetArraySize', 'JSONXOP_GetKeys', 'JSONXOP_GetMaxArraySize', 'JSONXOP_GetType', 'JSONXOP_GetValue', 'JSONXOP_New', 'JSONXOP_Parse', 'JSONXOP_Release', 'JSONXOP_Remove', 'JSONXOP_Version', 'KillBackground', 'KillControl', 'KillDataFolder', 'KillFIFO', 'KillFreeAxis', 'KillPath', 'KillPICTs', 'KillStrings', 'KillVariables', 'KillWaves', 'KillWindow', 'KMeans', 'Label', 'Layout', 'LayoutPageAction', 'LayoutSlideShow', 'Legend', 'LinearFeedbackShiftRegister', 'ListBox', 'LoadData', 'LoadPackagePreferences', 'LoadPICT', 'LoadWave', 'Loess', 'LombPeriodogram', 'Make', 'MakeIndex', 'MarkPerfTestTime', 'MatrixBalance', 'MatrixConvolve', 'MatrixCorr', 'MatrixEigenV', 'MatrixFactor', 'MatrixFilter', 'MatrixGaussJ', 'MatrixGLM', 'MatrixInverse', 'MatrixLinearSolve', 'MatrixLinearSolveTD', 'MatrixLLS', 'MatrixLUBkSub', 'MatrixLUD', 'MatrixLUDTD', 'MatrixMultiply', 'MatrixMultiplyAdd', 'MatrixOP', 'MatrixReverseBalance', 'MatrixSchur', 'MatrixSolve', 'MatrixSparse', 'MatrixSVBkSub', 'MatrixSVD', 'MatrixTranspose', 'MCC_FindServers', 'MeasureStyledText', 'MFR_CheckForNewBricklets', 'MFR_CloseResultFile', 'MFR_CreateOverviewTable', 'MFR_GetBrickletCount', 'MFR_GetBrickletData', 'MFR_GetBrickletDeployData', 'MFR_GetBrickletMetaData', 'MFR_GetBrickletRawData', 'MFR_GetReportTemplate', 'MFR_GetResultFileMetaData', 'MFR_GetResultFileName', 'MFR_GetVernissageVersion', 'MFR_GetVersion', 'MFR_GetXOPErrorMessage', 'MFR_OpenResultFile', 'MLLoadWave', 'Modify', 'ModifyBoxPlot', 'ModifyBrowser', 'ModifyCamera', 'ModifyContour', 'ModifyControl', 'ModifyControlList', 'ModifyFreeAxis', 'ModifyGizmo', 'ModifyGraph', 'ModifyImage', 'ModifyLayout', 'ModifyPanel', 'ModifyProcedure', 'ModifyTable', 'ModifyViolinPlot', 'ModifyWaterfall', 'MoveDataFolder', 'MoveFile', 'MoveFolder', 'MoveString', 'MoveSubwindow', 'MoveVariable', 'MoveWave', 'MoveWindow', 'MultiTaperPSD', 'MultiThreadingControl', 'NC_CloseFile', 'NC_DumpErrors', 'NC_Inquire', 'NC_ListAttributes', 'NC_ListObjects', 'NC_LoadData', 'NC_OpenFile', 'NeuralNetworkRun', 'NeuralNetworkTrain', 'NewCamera', 'NewDataFolder', 'NewFIFO', 'NewFIFOChan', 'NewFreeAxis', 'NewGizmo', 'NewImage', 'NewLayout', 'NewMovie', 'NewNotebook', 'NewPanel', 'NewPath', 'NewWaterfall', 'NILoadWave', 'NI4882', 'Note', 'Notebook', 'NotebookAction', 'Open', 'OpenHelp', 'OpenNotebook', 'Optimize', 'ParseOperationTemplate', 'PathInfo', 'PauseForUser', 'PauseUpdate', 'PCA', 'PlayMovie', 'PlayMovieAction', 'PlaySound', 'PolygonOp', 'PopupContextualMenu', 'PopupMenu', 'Preferences', 'PrimeFactors', 'Print', 'printf', 'PrintGraphs', 'PrintLayout', 'PrintNotebook', 'PrintSettings', 'PrintTable', 'Project', 'PulseStats', 'PutScrapText', 'pwd', 'Quit', 'RatioFromNumber', 'Redimension', 'Remez', 'Remove', 'RemoveContour', 'RemoveFromGizmo', 'RemoveFromGraph', 'RemoveFromLayout', 'RemoveFromTable', 'RemoveImage', 'RemoveLayoutObjects', 'RemovePath', 'Rename', 'RenameDataFolder', 'RenamePath', 'RenamePICT', 'RenameWindow', 'ReorderImages', 'ReorderTraces', 'ReplaceText', 'ReplaceWave', 'Resample', 'ResumeUpdate', 'Reverse', 'Rotate', 'Save', 'SaveData', 'SaveExperiment', 'SaveGizmoCopy', 'SaveGraphCopy', 'SaveNotebook', 'SavePackagePreferences', 'SavePICT', 'SaveTableCopy', 'SetActiveSubwindow', 'SetAxis', 'SetBackground', 'SetDashPattern', 'SetDataFolder', 'SetDimLabel', 'SetDrawEnv', 'SetDrawLayer', 'SetFileFolderInfo', 'SetFormula', 'SetIdlePeriod', 'SetIgorHook', 'SetIgorMenuMode', 'SetIgorOption', 'SetMarquee', 'SetProcessSleep', 'SetRandomSeed', 'SetScale', 'SetVariable', 'SetWaveLock', 'SetWaveTextEncoding', 'SetWindow', 'ShowIgorMenus', 'ShowInfo', 'ShowTools', 'Silent', 'Sleep', 'Slider', 'Smooth', 'SmoothCustom', 'Sort', 'SortColumns', 'SoundInRecord', 'SoundInSet', 'SoundInStartChart', 'SoundInStatus', 'SoundInStopChart', 'SoundLoadWave', 'SoundSaveWave', 'SphericalInterpolate', 'SphericalTriangulate', 'SplitString', 'SplitWave', 'sprintf', 'SQLHighLevelOp', 'sscanf', 'Stack', 'StackWindows', 'StatsAngularDistanceTest', 'StatsANOVA1Test', 'StatsANOVA2NRTest', 'StatsANOVA2RMTest', 'StatsANOVA2Test', 'StatsChiTest', 'StatsCircularCorrelationTest', 'StatsCircularMeans', 'StatsCircularMoments', 'StatsCircularTwoSampleTest', 'StatsCochranTest', 'StatsContingencyTable', 'StatsDIPTest', 'StatsDunnettTest', 'StatsFriedmanTest', 'StatsFTest', 'StatsHodgesAjneTest', 'StatsJBTest', 'StatsKDE', 'StatsKendallTauTest', 'StatsKSTest', 'StatsKWTest', 'StatsLinearCorrelationTest', 'StatsLinearRegression', 'StatsMultiCorrelationTest', 'StatsNPMCTest', 'StatsNPNominalSRTest', 'StatsQuantiles', 'StatsRankCorrelationTest', 'StatsResample', 'StatsSample', 'StatsScheffeTest', 'StatsShapiroWilkTest', 'StatsSignTest', 'StatsSRTest', 'StatsTTest', 'StatsTukeyTest', 'StatsVariancesTest', 'StatsWatsonUSquaredTest', 'StatsWatsonWilliamsTest', 'StatsWheelerWatsonTest', 'StatsWilcoxonRankTest', 'StatsWRCorrelationTest', 'STFT', 'StructFill', 'StructGet', 'StructPut', 'SumDimension', 'SumSeries', 'TabControl', 'Tag', 'TDMLoadData', 'TDMSaveData', 'TextBox', 'TextHistogram', 'Text2Bezier', 'ThreadGroupPutDF', 'ThreadStart', 'TickWavesFromAxis', 'Tile', 'TileWindows', 'TitleBox', 'ToCommandLine', 'ToolsGrid', 'Triangulate3d', 'TUFXOP_AcquireLock', 'TUFXOP_Clear', 'TUFXOP_GetStorage', 'TUFXOP_Init', 'TUFXOP_ReleaseLock', 'TUFXOP_RunningInMainThread', 'TUFXOP_Version', 'Unwrap', 'UnzipFile', 'URLRequest', 'ValDisplay', 'VDTClosePort2', 'VDTGetPortList2', 'VDTGetStatus2', 'VDTOpenPort2', 'VDTOperationsPort2', 'VDTReadBinaryWave2', 'VDTReadBinary2', 'VDTReadHexWave2', 'VDTReadHex2', 'VDTReadWave2', 'VDTRead2', 'VDTTerminalPort2', 'VDTWriteBinaryWave2', 'VDTWriteBinary2', 'VDTWriteHexWave2', 'VDTWriteHex2', 'VDTWriteWave2', 'VDTWrite2', 'VDT2', 'VISAControl', 'VISARead', 'VISAReadBinary', 'VISAReadBinaryWave', 'VISAReadWave', 'VISAWrite', 'VISAWriteBinary', 'VISAWriteBinaryWave', 'VISAWriteWave', 'WaveMeanStdv', 'WaveStats', 'WaveTracking', 'WaveTransform', 'wfprintf', 'WignerTransform', 'WindowFunction', 'XLLoadWave')
      + functions = ('abs', 'acos', 'acosh', 'AddListItem', 'AiryA', 'AiryAD', 'AiryB', 'AiryBD', 'alog', 'AnnotationInfo', 'AnnotationList', 'area', 'areaXY', 'asin', 'asinh', 'atan', 'atanh', 'atan2', 'AxisInfo', 'AxisLabel', 'AxisList', 'AxisValFromPixel', 'AxonTelegraphAGetDataNum', 'AxonTelegraphAGetDataString', 'AxonTelegraphAGetDataStruct', 'AxonTelegraphGetDataNum', 'AxonTelegraphGetDataString', 'AxonTelegraphGetDataStruct', 'AxonTelegraphGetTimeoutMs', 'AxonTelegraphSetTimeoutMs', 'Base64Decode', 'Base64Encode', 'Besseli', 'Besselj', 'Besselk', 'Bessely', 'beta', 'betai', 'BinarySearch', 'BinarySearchInterp', 'binomial', 'binomialln', 'binomialNoise', 'cabs', 'CaptureHistory', 'CaptureHistoryStart', 'ceil', 'centerOfMass', 'centerOfMassXY', 'cequal', 'char2num', 'chebyshev', 'chebyshevU', 'CheckName', 'ChildWindowList', 'CleanupName', 'cmplx', 'cmpstr', 'conj', 'ContourInfo', 'ContourNameList', 'ContourNameToWaveRef', 'ContourZ', 'ControlNameList', 'ConvertTextEncoding', 'cos', 'cosh', 'cosIntegral', 'cot', 'coth', 'CountObjects', 'CountObjectsDFR', 'cpowi', 'CreateDataObjectName', 'CreationDate', 'csc', 'csch', 'CsrInfo', 'CsrWave', 'CsrWaveRef', 'CsrXWave', 'CsrXWaveRef', 'CTabList', 'DataFolderDir', 'DataFolderExists', 'DataFolderList', 'DataFolderRefChanges', 'DataFolderRefsEqual', 'DataFolderRefStatus', 'date', 'datetime', 'DateToJulian', 'date2secs', 'Dawson', 'defined', 'deltax', 'digamma', 'dilogarithm', 'DimDelta', 'DimOffset', 'DimSize', 'ei', 'ellipticE', 'ellipticK', 'enoise', 'equalWaves', 'erf', 'erfc', 'erfcw', 'erfcx', 'exists', 'exp', 'expInt', 'expIntegralE1', 'expNoise', 'factorial', 'Faddeeva', 'fakedata', 'faverage', 'faverageXY', 'fDAQmx_AI_ChannelConfigs', 'fDAQmx_AI_GetReader', 'fDAQmx_AO_UpdateOutputs', 'fDAQmx_ConnectTerminals', 'fDAQmx_CTR_Finished', 'fDAQmx_CTR_IsFinished', 'fDAQmx_CTR_IsPulseFinished', 'fDAQmx_CTR_ReadCounter', 'fDAQmx_CTR_ReadWithOptions', 'fDAQmx_CTR_SetPulseFrequency', 'fDAQmx_CTR_Start', 'fDAQmx_DeviceNames', 'fDAQmx_DIO_Finished', 'fDAQmx_DIO_PortWidth', 'fDAQmx_DIO_Read', 'fDAQmx_DIO_Write', 'fDAQmx_DisconnectTerminals', 'fDAQmx_ErrorString', 'fDAQmx_ExternalCalDate', 'fDAQmx_NumAnalogInputs', 'fDAQmx_NumAnalogOutputs', 'fDAQmx_NumCounters', 'fDAQmx_NumDIOPorts', 'fDAQmx_ReadChan', 'fDAQmx_ReadNamedChan', 'fDAQmx_ResetDevice', 'fDAQmx_ScanGetAvailable', 'fDAQmx_ScanGetNextIndex', 'fDAQmx_ScanStart', 'fDAQmx_ScanStop', 'fDAQmx_ScanWait', 'fDAQmx_ScanWaitWithTimeout', 'fDAQmx_SelfCalDate', 'fDAQmx_SelfCalibration', 'fDAQmx_WaveformStart', 'fDAQmx_WaveformStop', 'fDAQmx_WF_IsFinished', 'fDAQmx_WF_WaitUntilFinished', 'fDAQmx_WriteChan', 'FetchURL', 'FindDimLabel', 'FindListItem', 'floor', 'FontList', 'FontSizeHeight', 'FontSizeStringWidth', 'FresnelCos', 'FresnelSin', 'FuncRefInfo', 'FunctionInfo', 'FunctionList', 'FunctionPath', 'gamma', 'gammaEuler', 'gammaInc', 'gammaNoise', 'gammln', 'gammp', 'gammq', 'Gauss', 'Gauss1D', 'Gauss2D', 'gcd', 'GeometricMean', 'GetBrowserLine', 'GetBrowserSelection', 'GetDataFolder', 'GetDataFolderDFR', 'GetDefaultFont', 'GetDefaultFontSize', 'GetDefaultFontStyle', 'GetDimLabel', 'GetEnvironmentVariable', 'GetErrMessage', 'GetFormula', 'GetIndependentModuleName', 'GetIndexedObjName', 'GetIndexedObjNameDFR', 'GetKeyState', 'GetRTErrMessage', 'GetRTError', 'GetRTLocation', 'GetRTLocInfo', 'GetRTStackInfo', 'GetScrapText', 'GetUserData', 'GetWavesDataFolder', 'GetWavesDataFolderDFR', 'GetWindowBrowserSelection', 'GISGetAllFileFormats', 'GISSRefsAreEqual', 'GizmoInfo', 'GizmoScale', 'gnoise', 'GrepList', 'GrepString', 'GuideInfo', 'GuideNameList', 'Hash', 'hcsr', 'HDF5AttributeInfo', 'HDF5DatasetInfo', 'HDF5LibraryInfo', 'HDF5LinkInfo', 'HDF5TypeInfo', 'hermite', 'hermiteGauss', 'HyperGNoise', 'HyperGPFQ', 'HyperG0F1', 'HyperG1F1', 'HyperG2F1', 'i', 'IgorInfo', 'IgorVersion', 'imag', 'ImageInfo', 'ImageNameList', 'ImageNameToWaveRef', 'IndependentModuleList', 'IndexedDir', 'IndexedFile', 'IndexToScale', 'Inf', 'Integrate1D', 'interp', 'Interp2D', 'Interp3D', 'inverseERF', 'inverseERFC', 'ItemsInList', 'JacobiCn', 'JacobiSn', 'JulianToDate', 'Laguerre', 'LaguerreA', 'LaguerreGauss', 'LambertW', 'LayoutInfo', 'leftx', 'LegendreA', 'limit', 'ListMatch', 'ListToTextWave', 'ListToWaveRefWave', 'ln', 'log', 'logNormalNoise', 'lorentzianNoise', 'LowerStr', 'MacroInfo', 'MacroList', 'MacroPath', 'magsqr', 'MandelbrotPoint', 'MarcumQ', 'MatrixCondition', 'MatrixDet', 'MatrixDot', 'MatrixRank', 'MatrixTrace', 'max', 'MCC_AutoBridgeBal', 'MCC_AutoFastComp', 'MCC_AutoPipetteOffset', 'MCC_AutoSlowComp', 'MCC_AutoWholeCellComp', 'MCC_GetBridgeBalEnable', 'MCC_GetBridgeBalResist', 'MCC_GetFastCompCap', 'MCC_GetFastCompTau', 'MCC_GetHolding', 'MCC_GetHoldingEnable', 'MCC_GetMode', 'MCC_GetNeutralizationCap', 'MCC_GetNeutralizationEnable', 'MCC_GetOscKillerEnable', 'MCC_GetPipetteOffset', 'MCC_GetPrimarySignalGain', 'MCC_GetPrimarySignalHPF', 'MCC_GetPrimarySignalLPF', 'MCC_GetRsCompBandwidth', 'MCC_GetRsCompCorrection', 'MCC_GetRsCompEnable', 'MCC_GetRsCompPrediction', 'MCC_GetSecondarySignalGain', 'MCC_GetSecondarySignalLPF', 'MCC_GetSlowCompCap', 'MCC_GetSlowCompTau', 'MCC_GetSlowCompTauX20Enable', 'MCC_GetSlowCurrentInjEnable', 'MCC_GetSlowCurrentInjLevel', 'MCC_GetSlowCurrentInjSetlTime', 'MCC_GetWholeCellCompCap', 'MCC_GetWholeCellCompEnable', 'MCC_GetWholeCellCompResist', 'MCC_SelectMultiClamp700B', 'MCC_SetBridgeBalEnable', 'MCC_SetBridgeBalResist', 'MCC_SetFastCompCap', 'MCC_SetFastCompTau', 'MCC_SetHolding', 'MCC_SetHoldingEnable', 'MCC_SetMode', 'MCC_SetNeutralizationCap', 'MCC_SetNeutralizationEnable', 'MCC_SetOscKillerEnable', 'MCC_SetPipetteOffset', 'MCC_SetPrimarySignalGain', 'MCC_SetPrimarySignalHPF', 'MCC_SetPrimarySignalLPF', 'MCC_SetRsCompBandwidth', 'MCC_SetRsCompCorrection', 'MCC_SetRsCompEnable', 'MCC_SetRsCompPrediction', 'MCC_SetSecondarySignalGain', 'MCC_SetSecondarySignalLPF', 'MCC_SetSlowCompCap', 'MCC_SetSlowCompTau', 'MCC_SetSlowCompTauX20Enable', 'MCC_SetSlowCurrentInjEnable', 'MCC_SetSlowCurrentInjLevel', 'MCC_SetSlowCurrentInjSetlTime', 'MCC_SetTimeoutMs', 'MCC_SetWholeCellCompCap', 'MCC_SetWholeCellCompEnable', 'MCC_SetWholeCellCompResist', 'mean', 'median', 'min', 'mod', 'ModDate', 'MPFXEMGPeak', 'MPFXExpConvExpPeak', 'MPFXGaussPeak', 'MPFXLorentzianPeak', 'MPFXVoigtPeak', 'NameOfWave', 'NaN', 'NewFreeDataFolder', 'NewFreeWave', 'norm', 'NormalizeUnicode', 'note', 'NumberByKey', 'numpnts', 'numtype', 'NumVarOrDefault', 'num2char', 'num2istr', 'num2str', 'NVAR_Exists', 'OperationList', 'PadString', 'PanelResolution', 'ParamIsDefault', 'ParseFilePath', 'PathList', 'pcsr', 'Pi', 'PICTInfo', 'PICTList', 'PixelFromAxisVal', 'pnt2x', 'poissonNoise', 'poly', 'PolygonArea', 'poly2D', 'PossiblyQuoteName', 'ProcedureText', 'ProcedureVersion', 'p2rect', 'qcsr', 'real', 'RemoveByKey', 'RemoveEnding', 'RemoveFromList', 'RemoveListItem', 'ReplaceNumberByKey', 'ReplaceString', 'ReplaceStringByKey', 'ReplicateString', 'rightx', 'round', 'r2polar', 'sawtooth', 'scaleToIndex', 'ScreenResolution', 'sec', 'sech', 'Secs2Date', 'Secs2Time', 'SelectNumber', 'SelectString', 'SetEnvironmentVariable', 'sign', 'sin', 'sinc', 'sinh', 'sinIntegral', 'SortList', 'SpecialCharacterInfo', 'SpecialCharacterList', 'SpecialDirPath', 'SphericalBessJ', 'SphericalBessJD', 'SphericalBessY', 'SphericalBessYD', 'SphericalHarmonics', 'SQLAllocHandle', 'SQLAllocStmt', 'SQLBinaryWavesToTextWave', 'SQLBindCol', 'SQLBindParameter', 'SQLBrowseConnect', 'SQLBulkOperations', 'SQLCancel', 'SQLCloseCursor', 'SQLColAttributeNum', 'SQLColAttributeStr', 'SQLColumnPrivileges', 'SQLColumns', 'SQLConnect', 'SQLDataSources', 'SQLDescribeCol', 'SQLDescribeParam', 'SQLDisconnect', 'SQLDriverConnect', 'SQLDrivers', 'SQLEndTran', 'SQLError', 'SQLExecDirect', 'SQLExecute', 'SQLFetch', 'SQLFetchScroll', 'SQLForeignKeys', 'SQLFreeConnect', 'SQLFreeEnv', 'SQLFreeHandle', 'SQLFreeStmt', 'SQLGetConnectAttrNum', 'SQLGetConnectAttrStr', 'SQLGetCursorName', 'SQLGetDataNum', 'SQLGetDataStr', 'SQLGetDescFieldNum', 'SQLGetDescFieldStr', 'SQLGetDescRec', 'SQLGetDiagFieldNum', 'SQLGetDiagFieldStr', 'SQLGetDiagRec', 'SQLGetEnvAttrNum', 'SQLGetEnvAttrStr', 'SQLGetFunctions', 'SQLGetInfoNum', 'SQLGetInfoStr', 'SQLGetStmtAttrNum', 'SQLGetStmtAttrStr', 'SQLGetTypeInfo', 'SQLMoreResults', 'SQLNativeSql', 'SQLNumParams', 'SQLNumResultCols', 'SQLNumResultRowsIfKnown', 'SQLNumRowsFetched', 'SQLParamData', 'SQLPrepare', 'SQLPrimaryKeys', 'SQLProcedureColumns', 'SQLProcedures', 'SQLPutData', 'SQLReinitialize', 'SQLRowCount', 'SQLSetConnectAttrNum', 'SQLSetConnectAttrStr', 'SQLSetCursorName', 'SQLSetDescFieldNum', 'SQLSetDescFieldStr', 'SQLSetDescRec', 'SQLSetEnvAttrNum', 'SQLSetEnvAttrStr', 'SQLSetPos', 'SQLSetStmtAttrNum', 'SQLSetStmtAttrStr', 'SQLSpecialColumns', 'SQLStatistics', 'SQLTablePrivileges', 'SQLTables', 'SQLTextWaveToBinaryWaves', 'SQLTextWaveTo2DBinaryWave', 'SQLUpdateBoundValues', 'SQLXOPCheckState', 'SQL2DBinaryWaveToTextWave', 'sqrt', 'StartMSTimer', 'StatsBetaCDF', 'StatsBetaPDF', 'StatsBinomialCDF', 'StatsBinomialPDF', 'StatsCauchyCDF', 'StatsCauchyPDF', 'StatsChiCDF', 'StatsChiPDF', 'StatsCMSSDCDF', 'StatsCorrelation', 'StatsDExpCDF', 'StatsDExpPDF', 'StatsErlangCDF', 'StatsErlangPDF', 'StatsErrorPDF', 'StatsEValueCDF', 'StatsEValuePDF', 'StatsExpCDF', 'StatsExpPDF', 'StatsFCDF', 'StatsFPDF', 'StatsFriedmanCDF', 'StatsGammaCDF', 'StatsGammaPDF', 'StatsGeometricCDF', 'StatsGeometricPDF', 'StatsGEVCDF', 'StatsGEVPDF', 'StatsHyperGCDF', 'StatsHyperGPDF', 'StatsInvBetaCDF', 'StatsInvBinomialCDF', 'StatsInvCauchyCDF', 'StatsInvChiCDF', 'StatsInvCMSSDCDF', 'StatsInvDExpCDF', 'StatsInvEValueCDF', 'StatsInvExpCDF', 'StatsInvFCDF', 'StatsInvFriedmanCDF', 'StatsInvGammaCDF', 'StatsInvGeometricCDF', 'StatsInvKuiperCDF', 'StatsInvLogisticCDF', 'StatsInvLogNormalCDF', 'StatsInvMaxwellCDF', 'StatsInvMooreCDF', 'StatsInvNBinomialCDF', 'StatsInvNCChiCDF', 'StatsInvNCFCDF', 'StatsInvNormalCDF', 'StatsInvParetoCDF', 'StatsInvPoissonCDF', 'StatsInvPowerCDF', 'StatsInvQCDF', 'StatsInvQpCDF', 'StatsInvRayleighCDF', 'StatsInvRectangularCDF', 'StatsInvSpearmanCDF', 'StatsInvStudentCDF', 'StatsInvTopDownCDF', 'StatsInvTriangularCDF', 'StatsInvUsquaredCDF', 'StatsInvVonMisesCDF', 'StatsInvWeibullCDF', 'StatsKuiperCDF', 'StatsLogisticCDF', 'StatsLogisticPDF', 'StatsLogNormalCDF', 'StatsLogNormalPDF', 'StatsMaxwellCDF', 'StatsMaxwellPDF', 'StatsMedian', 'StatsMooreCDF', 'StatsNBinomialCDF', 'StatsNBinomialPDF', 'StatsNCChiCDF', 'StatsNCChiPDF', 'StatsNCFCDF', 'StatsNCFPDF', 'StatsNCTCDF', 'StatsNCTPDF', 'StatsNormalCDF', 'StatsNormalPDF', 'StatsParetoCDF', 'StatsParetoPDF', 'StatsPermute', 'StatsPoissonCDF', 'StatsPoissonPDF', 'StatsPowerCDF', 'StatsPowerNoise', 'StatsPowerPDF', 'StatsQCDF', 'StatsQpCDF', 'StatsRayleighCDF', 'StatsRayleighPDF', 'StatsRectangularCDF', 'StatsRectangularPDF', 'StatsRunsCDF', 'StatsSpearmanRhoCDF', 'StatsStudentCDF', 'StatsStudentPDF', 'StatsTopDownCDF', 'StatsTriangularCDF', 'StatsTriangularPDF', 'StatsTrimmedMean', 'StatsUSquaredCDF', 'StatsVonMisesCDF', 'StatsVonMisesNoise', 'StatsVonMisesPDF', 'StatsWaldCDF', 'StatsWaldPDF', 'StatsWeibullCDF', 'StatsWeibullPDF', 'StopMSTimer', 'StringByKey', 'stringCRC', 'StringFromList', 'StringList', 'stringmatch', 'StringToUnsignedByteWave', 'strlen', 'strsearch', 'StrVarOrDefault', 'str2num', 'StudentA', 'StudentT', 'sum', 'SVAR_Exists', 'TableInfo', 'TagVal', 'TagWaveRef', 'tan', 'tanh', 'TDMAddChannel', 'TDMAddGroup', 'TDMAppendDataValues', 'TDMAppendDataValuesTime', 'TDMChannelPropertyExists', 'TDMCloseChannel', 'TDMCloseFile', 'TDMCloseGroup', 'TDMCreateChannelProperty', 'TDMCreateFile', 'TDMCreateFileProperty', 'TDMCreateGroupProperty', 'TDMFilePropertyExists', 'TDMGetChannelPropertyNames', 'TDMGetChannelPropertyNum', 'TDMGetChannelPropertyStr', 'TDMGetChannelPropertyTime', 'TDMGetChannelPropertyType', 'TDMGetChannels', 'TDMGetChannelStringPropertyLen', 'TDMGetDataType', 'TDMGetDataValues', 'TDMGetDataValuesTime', 'TDMGetFilePropertyNames', 'TDMGetFilePropertyNum', 'TDMGetFilePropertyStr', 'TDMGetFilePropertyTime', 'TDMGetFilePropertyType', 'TDMGetFileStringPropertyLen', 'TDMGetGroupPropertyNames', 'TDMGetGroupPropertyNum', 'TDMGetGroupPropertyStr', 'TDMGetGroupPropertyTime', 'TDMGetGroupPropertyType', 'TDMGetGroups', 'TDMGetGroupStringPropertyLen', 'TDMGetLibraryErrorDescription', 'TDMGetNumChannelProperties', 'TDMGetNumChannels', 'TDMGetNumDataValues', 'TDMGetNumFileProperties', 'TDMGetNumGroupProperties', 'TDMGetNumGroups', 'TDMGroupPropertyExists', 'TDMOpenFile', 'TDMOpenFileEx', 'TDMRemoveChannel', 'TDMRemoveGroup', 'TDMReplaceDataValues', 'TDMReplaceDataValuesTime', 'TDMSaveFile', 'TDMSetChannelPropertyNum', 'TDMSetChannelPropertyStr', 'TDMSetChannelPropertyTime', 'TDMSetDataValues', 'TDMSetDataValuesTime', 'TDMSetFilePropertyNum', 'TDMSetFilePropertyStr', 'TDMSetFilePropertyTime', 'TDMSetGroupPropertyNum', 'TDMSetGroupPropertyStr', 'TDMSetGroupPropertyTime', 'TextEncodingCode', 'TextEncodingName', 'TextFile', 'ThreadGroupCreate', 'ThreadGroupGetDF', 'ThreadGroupGetDFR', 'ThreadGroupRelease', 'ThreadGroupWait', 'ThreadProcessorCount', 'ThreadReturnValue', 'ticks', 'time', 'TraceFromPixel', 'TraceInfo', 'TraceNameList', 'TraceNameToWaveRef', 'TrimString', 'trunc', 'UniqueName', 'UnPadString', 'UnsetEnvironmentVariable', 'UpperStr', 'URLDecode', 'URLEncode', 'VariableList', 'Variance', 'vcsr', 'viAssertIntrSignal', 'viAssertTrigger', 'viAssertUtilSignal', 'viClear', 'viClose', 'viDisableEvent', 'viDiscardEvents', 'viEnableEvent', 'viFindNext', 'viFindRsrc', 'viGetAttribute', 'viGetAttributeString', 'viGpibCommand', 'viGpibControlATN', 'viGpibControlREN', 'viGpibPassControl', 'viGpibSendIFC', 'viIn8', 'viIn16', 'viIn32', 'viLock', 'viMapAddress', 'viMapTrigger', 'viMemAlloc', 'viMemFree', 'viMoveIn8', 'viMoveIn16', 'viMoveIn32', 'viMoveOut8', 'viMoveOut16', 'viMoveOut32', 'viOpen', 'viOpenDefaultRM', 'viOut8', 'viOut16', 'viOut32', 'viPeek8', 'viPeek16', 'viPeek32', 'viPoke8', 'viPoke16', 'viPoke32', 'viRead', 'viReadSTB', 'viSetAttribute', 'viSetAttributeString', 'viStatusDesc', 'viTerminate', 'viUnlock', 'viUnmapAddress', 'viUnmapTrigger', 'viUsbControlIn', 'viUsbControlOut', 'viVxiCommandQuery', 'viWaitOnEvent', 'viWrite', 'VoigtFunc', 'VoigtPeak', 'WaveCRC', 'WaveDataToString', 'WaveDims', 'WaveExists', 'WaveHash', 'WaveInfo', 'WaveList', 'WaveMax', 'WaveMin', 'WaveMinAndMax', 'WaveModCount', 'WaveName', 'WaveRefIndexed', 'WaveRefIndexedDFR', 'WaveRefsEqual', 'WaveRefWaveToList', 'WaveTextEncoding', 'WaveType', 'WaveUnits', 'WhichListItem', 'WinList', 'WinName', 'WinRecreation', 'WinType', 'wnoise', 'xcsr', 'XWaveName', 'XWaveRefFromTrace', 'x2pnt', 'zcsr', 'ZernikeR', 'zeromq_client_connect', 'zeromq_client_recv', 'zeromq_client_send', 'zeromq_handler_start', 'zeromq_handler_stop', 'zeromq_pub_bind', 'zeromq_pub_send', 'zeromq_server_bind', 'zeromq_server_recv', 'zeromq_server_send', 'zeromq_set', 'zeromq_set_logging_template', 'zeromq_stop', 'zeromq_sub_add_filter', 'zeromq_sub_connect', 'zeromq_sub_recv', 'zeromq_sub_remove_filter', 'zeromq_test_callfunction', 'zeromq_test_serializeWave', 'zeta')
      + tokens = {'root': [('//.*$', Comment.Single), ('"([^"\\\\]|\\\\.)*"', String), (words(flowControl, prefix='\\b', suffix='\\b'), Keyword), (words(types, prefix='\\b', suffix='\\b'), Keyword.Type), (words(keywords, prefix='\\b', suffix='\\b'), Keyword.Reserved), (words(operations, prefix='\\b', suffix='\\b'), Name.Class), (words(functions, prefix='\\b', suffix='\\b'), Name.Function), ('^#(include|pragma|define|undef|ifdef|ifndef|if|elif|else|endif)', Name.Decorator), ('\\s+', Whitespace), ('[^a-z"/]+$', Text), ('.', Text)]}
  }

  class LimboLexer {
      + name = 'Limbo'
      + url = 'http://www.vitanuova.com/inferno/limbo.html'
      + aliases = ['limbo']
      + filenames = ['*.b']
      + mimetypes = ['text/limbo']
      + version_added = '2.0'
      + tokens = {'whitespace': [('^(\\s*)([a-zA-Z_]\\w*:)(\\s*\\n)', bygroups(Whitespace, Name.Label, Whitespace)), ('\\n', Whitespace), ('\\s+', Whitespace), ('#(\\n|(.|\\n)*?[^\\\\]\\n)', Comment.Single)], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('\\\\', String)], 'statements': [('"', String, 'string'), ("'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'", String.Char), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+', Number.Float), ('(\\d+\\.\\d*|\\.\\d+|\\d+[fF])', Number.Float), ('16r[0-9a-fA-F]+', Number.Hex), ('8r[0-7]+', Number.Oct), ('((([1-3]\\d)|([2-9]))r)?(\\d+)', Number.Integer), ('[()\\[\\],.]', Punctuation), ('[~!%^&*+=|?:<>/-]|(->)|(<-)|(=>)|(::)', Operator), ('(alt|break|case|continue|cyclic|do|else|exitfor|hd|if|implement|import|include|len|load|orpick|return|spawn|tagof|tl|to|while)\\b', Keyword), ('(byte|int|big|real|string|array|chan|list|adt|fn|ref|of|module|self|type)\\b', Keyword.Type), ('(con|iota|nil)\\b', Keyword.Constant), ('[a-zA-Z_]\\w*', Name)], 'statement': [include('whitespace'), include('statements'), ('[{}]', Punctuation), (';', Punctuation, '#pop')], 'root': [include('whitespace'), default('statement')]}
  --
      + analyse_text(text)
  }

  class NSISLexer {
      + name = 'NSIS'
      + url = 'http://nsis.sourceforge.net/'
      + aliases = ['nsis', 'nsi', 'nsh']
      + filenames = ['*.nsi', '*.nsh']
      + mimetypes = ['text/x-nsis']
      + version_added = '1.6'
      + flags = re.IGNORECASE
      + tokens = {'root': [('([;#].*)(\\n)', bygroups(Comment, Whitespace)), ("'.*?'", String.Single), ('"', String.Double, 'str_double'), ('`', String.Backtick, 'str_backtick'), include('macro'), include('interpol'), include('basic'), ('\\$\\{[a-z_|][\\w|]*\\}', Keyword.Pseudo), ('/[a-z_]\\w*', Name.Attribute), ('\\s+', Whitespace), ('[\\w.]+', Text)], 'basic': [('(\\n)(Function)(\\s+)([._a-z][.\\w]*)\\b', bygroups(Whitespace, Keyword, Whitespace, Name.Function)), ('\\b([_a-z]\\w*)(::)([a-z][a-z0-9]*)\\b', bygroups(Keyword.Namespace, Punctuation, Name.Function)), ('\\b([_a-z]\\w*)(:)', bygroups(Name.Label, Punctuation)), ('(\\b[ULS]|\\B)([!<>=]?=|\\<\\>?|\\>)\\B', Operator), ('[|+-]', Operator), ('\\\\', Punctuation), ('\\b(Abort|Add(?:BrandingImage|Size)|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|BG(?:Font|Gradient)|BrandingText|BringToFront|Call(?:InstDLL)?|(?:Sub)?Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|Create(?:Directory|Font|Shortcut)|Delete(?:INI(?:Sec|Str)|Reg(?:Key|Value))?|DetailPrint|DetailsButtonText|Dir(?:Show|Text|Var|Verify)|(?:Disabled|Enabled)Bitmap|EnableWindow|EnumReg(?:Key|Value)|Exch|Exec(?:Shell|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read(?:Byte)?|Seek|Write(?:Byte)?)?|Find(?:Close|First|Next|Window)|FlushINI|Function(?:End)?|Get(?:CurInstType|CurrentAddress|DlgItem|DLLVersion(?:Local)?|ErrorLevel|FileTime(?:Local)?|FullPathName|FunctionAddress|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|Inst(?:ProgressFlags|Type(?:[GS]etText)?)|Int(?:CmpU?|Fmt|Op)|IsWindow|LangString(?:UP)?|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|MessageBox|MiscButtonText|Name|Nop|OutFile|(?:Uninst)?Page(?:Ex(?:End)?)?|PluginDir|Pop|Push|Quit|Read(?:(?:Env|INI|Reg)Str|RegDWORD)|Reboot|(?:Un)?RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|Section(?:Divider|End|(?:(?:Get|Set)(?:Flags|InstTypes|Size|Text))|Group(?:End)?|In)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress(?:ionLevel|or(?:DictSize)?)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|Error(?:s|Level)|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|ShellVarContext|Silent|StaticBkColor)|Show(?:(?:I|Uni)nstDetails|Window)|Silent(?:Un)?Install|Sleep|SpaceTexts|Str(?:CmpS?|Cpy|Len)|SubSection(?:End)?|Uninstall(?:ButtonText|(?:Sub)?Caption|EXEName|Icon|Text)|UninstPage|Var|VI(?:AddVersionKey|ProductVersion)|WindowIcon|Write(?:INIStr|Reg(:?Bin|DWORD|(?:Expand)?Str)|Uninstaller)|XPStyle)\\b', Keyword), ('\\b(CUR|END|(?:FILE_ATTRIBUTE_)?(?:ARCHIVE|HIDDEN|NORMAL|OFFLINE|READONLY|SYSTEM|TEMPORARY)|HK(CC|CR|CU|DD|LM|PD|U)|HKEY_(?:CLASSES_ROOT|CURRENT_(?:CONFIG|USER)|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(?:ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(?:ABORTRETRYIGNORE|DEFBUTTON[1-4]|ICON(?:EXCLAMATION|INFORMATION|QUESTION|STOP)|OK(?:CANCEL)?|RETRYCANCEL|RIGHT|SETFOREGROUND|TOPMOST|USERICON|YESNO(?:CANCEL)?)|SET|SHCTX|SW_(?:HIDE|SHOW(?:MAXIMIZED|MINIMIZED|NORMAL))|admin|all|auto|both|bottom|bzip2|checkbox|colored|current|false|force|hide|highest|if(?:diff|newer)|lastused|leave|left|listonly|lzma|nevershow|none|normal|off|on|pop|push|radiobuttons|right|show|silent|silentlog|smooth|textonly|top|true|try|user|zlib)\\b', Name.Constant)], 'macro': [('\\!(addincludedir(?:dir)?|addplugindir|appendfile|cd|define|delfilefile|echo(?:message)?|else|endif|error|execute|if(?:macro)?n?(?:def)?|include|insertmacro|macro(?:end)?|packhdr|search(?:parse|replace)|system|tempfilesymbol|undef|verbose|warning)\\b', Comment.Preproc)], 'interpol': [('\\$(R?[0-9])', Name.Builtin.Pseudo), ('\\$(ADMINTOOLS|APPDATA|CDBURN_AREA|COOKIES|COMMONFILES(?:32|64)|DESKTOP|DOCUMENTS|EXE(?:DIR|FILE|PATH)|FAVORITES|FONTS|HISTORY|HWNDPARENT|INTERNET_CACHE|LOCALAPPDATA|MUSIC|NETHOOD|PICTURES|PLUGINSDIR|PRINTHOOD|PROFILE|PROGRAMFILES(?:32|64)|QUICKLAUNCH|RECENT|RESOURCES(?:_LOCALIZED)?|SENDTO|SM(?:PROGRAMS|STARTUP)|STARTMENU|SYSDIR|TEMP(?:LATES)?|VIDEOS|WINDIR|\\{NSISDIR\\})', Name.Builtin), ('\\$(CMDLINE|INSTDIR|OUTDIR|LANGUAGE)', Name.Variable.Global), ('\\$[a-z_]\\w*', Name.Variable)], 'str_double': [('"', String.Double, '#pop'), ('\\$(\\\\[nrt"]|\\$)', String.Escape), include('interpol'), ('[^"]+', String.Double)], 'str_backtick': [('`', String.Double, '#pop'), ('\\$(\\\\[nrt"]|\\$)', String.Escape), include('interpol'), ('[^`]+', String.Double)]}
  }

  class RPMSpecLexer {
      + name = 'RPMSpec'
      + aliases = ['spec']
      + filenames = ['*.spec']
      + mimetypes = ['text/x-rpm-spec']
      + url = 'https://rpm-software-management.github.io/rpm/manual/spec.html'
      + version_added = '1.6'
      + tokens = {'root': [('#.*$', Comment), include('basic')], 'description': [('^(%' + _directives + ')(.*)$', bygroups(Name.Decorator, Text), '#pop'), ('\\s+', Whitespace), ('.', Text)], 'changelog': [('\\*.*$', Generic.Subheading), ('^(%' + _directives + ')(.*)$', bygroups(Name.Decorator, Text), '#pop'), ('\\s+', Whitespace), ('.', Text)], 'string': [('"', String.Double, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})', String.Escape), include('interpol'), ('.', String.Double)], 'basic': [include('macro'), ('(?i)^(Name|Version|Release|Epoch|Summary|Group|License|Packager|Vendor|Icon|URL|Distribution|Prefix|Patch[0-9]*|Source[0-9]*|Requires\\(?[a-z]*\\)?|[a-z]+Req|Obsoletes|Suggests|Provides|Conflicts|Build[a-z]+|[a-z]+Arch|Auto[a-z]+)(:)(.*)$', bygroups(Generic.Heading, Punctuation, using(this))), ('^%description', Name.Decorator, 'description'), ('^%changelog', Name.Decorator, 'changelog'), ('^(%' + _directives + ')(.*)$', bygroups(Name.Decorator, Text)), ('%(attr|defattr|dir|doc(?:dir)?|setup|config(?:ure)?|make(?:install)|ghost|patch[0-9]+|find_lang|exclude|verify)', Keyword), include('interpol'), ("'.*?'", String.Single), ('"', String.Double, 'string'), ('\\s+', Whitespace), ('.', Text)], 'macro': [('%define.*$', Comment.Preproc), ('%\\{\\!\\?.*%define.*\\}', Comment.Preproc), ('(%(?:if(?:n?arch)?|else(?:if)?|endif))(.*)$', bygroups(Comment.Preproc, Text))], 'interpol': [('%\\{?__[a-z_]+\\}?', Name.Function), ('%\\{?_([a-z_]+dir|[a-z_]+path|prefix)\\}?', Keyword.Pseudo), ('%\\{\\?\\w+\\}', Name.Variable), ('\\$\\{?RPM_[A-Z0-9_]+\\}?', Name.Variable.Global), ('%\\{[a-zA-Z]\\w+\\}', Keyword.Constant)]}
  }

  class DebianSourcesLexer {
      + name = 'Debian Sources file'
      + aliases = ['debian.sources']
      + filenames = ['*.sources']
      + version_added = '2.19'
      + url = 'https://manpages.debian.org/bookworm/apt/sources.list.5.en.html#THE_DEB_AND_DEB-SRC_TYPES:_GENERAL_FORMAT'
      + tokens = {'root': [('^(Signed-By)(:)(\\s*)', bygroups(Keyword, Punctuation, Whitespace), 'signed-by'), ('^([a-zA-Z\\-0-9\\.]*?)(:)(\\s*)(.*?)$', bygroups(Keyword, Punctuation, Whitespace, String))], 'signed-by': [(' -----END PGP PUBLIC KEY BLOCK-----\\n', Text, '#pop'), ('.+\\n', Text)]}
  }

  class SourcesListLexer {
      + name = 'Debian Sourcelist'
      + aliases = ['debsources', 'sourceslist', 'sources.list']
      + filenames = ['sources.list']
      + version_added = '0.7'
      + mimetype = ['application/x-debian-sourceslist']
      + url = 'https://wiki.debian.org/SourcesList'
      + tokens = {'root': [('\\s+', Whitespace), ('#.*?$', Comment), ('^(deb(?:-src)?)(\\s+)', bygroups(Keyword, Whitespace), 'distribution')], 'distribution': [('#.*?$', Comment, '#pop'), ('\\$\\(ARCH\\)', Name.Variable), ('[^\\s$[]+', String), ('\\[', String.Other, 'escaped-distribution'), ('\\$', String), ('\\s+', Whitespace, 'components')], 'escaped-distribution': [('\\]', String.Other, '#pop'), ('\\$\\(ARCH\\)', Name.Variable), ('[^\\]$]+', String.Other), ('\\$', String.Other)], 'components': [('#.*?$', Comment, '#pop:2'), ('$', Text, '#pop:2'), ('\\s+', Whitespace), ('\\S+', Keyword.Pseudo)]}
  --
      + analyse_text(text)
  }

  class DebianControlLexer {
      + name = 'Debian Control file'
      + url = 'https://www.debian.org/doc/debian-policy/ch-controlfields.html'
      + aliases = ['debcontrol', 'control']
      + filenames = ['control']
      + version_added = '0.9'
      + tokens = {'root': [('^(Description)', Keyword, 'description'), ('^(Maintainer|Uploaders|Changed-By)(:)(\\s*)', bygroups(Keyword, Punctuation, Whitespace), 'maintainer'), ('^((?:Build-|Pre-)?Depends(?:-Indep|-Arch)?)(:)(\\s*)', bygroups(Keyword, Punctuation, Whitespace), 'package_list'), ('^(Recommends|Suggests|Enhances|Breaks|Replaces|Provides|Conflicts)(:)(\\s*)', bygroups(Keyword, Punctuation, Whitespace), 'package_list'), ('^((?:Python-)?Version)(:)(\\s*)(\\S+)$', bygroups(Keyword, Punctuation, Whitespace, Number)), ('^((?:Installed-)?Size)(:)(\\s*)(\\S+)$', bygroups(Keyword, Punctuation, Whitespace, Number)), ('^(MD5Sum|SHA1|SHA256)(:)(\\s*)(\\S+)$', bygroups(Keyword, Punctuation, Whitespace, Number)), ('^([a-zA-Z\\-0-9\\.]*?)(:)(\\s*)(.*?)$', bygroups(Keyword, Punctuation, Whitespace, String))], 'maintainer': [('<[^>]+>$', Generic.Strong, '#pop'), ('<[^>]+>', Generic.Strong), (',\\n?', Whitespace), ('[^,<]+$', Text, '#pop'), ('[^,<]+', Text)], 'description': [('(.*)(Homepage)(: )(\\S+)', bygroups(Text, String, Name, Name.Class)), (':.*\\n', Generic.Strong), (' .*\\n', Text), default('#pop')], 'package_list': [('(\\$)(\\{)(\\w+)(\\s*)(:)(\\s*)(\\w+)(\\})', bygroups(Operator, Punctuation, Name.Entity, Whitespace, Punctuation, Whitespace, Text, Punctuation)), ('\\(', Punctuation, 'package_list_vers'), ('\\|', Operator), ('\\n\\s', Whitespace), ('\\n', Whitespace, '#pop'), ('[,\\s]', Text), ('[+.a-zA-Z0-9-]+', Name.Function), ('\\[.*?\\]', Name.Entity)], 'package_list_vers': [('\\)', Punctuation, '#pop'), ('([><=]+)(\\s*)([^)]+)', bygroups(Operator, Whitespace, Number))]}
  }

  class Inform6Lexer {
      + name = 'Inform 6'
      + url = 'http://inform-fiction.org/'
      + aliases = ['inform6', 'i6']
      + filenames = ['*.inf']
      + version_added = '2.0'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [(f'\\A(!%[^{_newline}]*[{_newline}])+', Comment.Preproc, 'directive'), default('directive')], '_whitespace': [('\\s+', Text), (f'![^{_newline}]*', Comment.Single)], 'default': [include('_whitespace'), ('\\[', Punctuation, 'many-values'), (':|(?=;)', Punctuation, '#pop'), ('<', Punctuation), default(('expression', '_expression'))], '_expression': [include('_whitespace'), ('(?=sp\\b)', Text, '#pop'), (f'(?=[{_dquote}{_squote}$0-9#a-zA-Z_])', Text, ('#pop', 'value')), (f'\\+\\+|[{_dash}]{{1,2}}(?!>)|~~?', Operator), (f'(?=[()\\[{_dash},?@{{:;])', Text, '#pop')], 'expression': [include('_whitespace'), ('\\(', Punctuation, ('expression', '_expression')), ('\\)', Punctuation, '#pop'), ('\\[', Punctuation, ('#pop', 'statements', 'locals')), (f'>(?=(\\s+|(![^{_newline}]*))*[>;])', Punctuation), (f'\\+\\+|[{_dash}]{{2}}(?!>)', Operator), (',', Punctuation, '_expression'), (f'&&?|\\|\\|?|[=~><]?=|[{_dash}]{{1,2}}>?|\\.\\.?[&#]?|::|[<>+*/%]', Operator, '_expression'), ('(has|hasnt|in|notin|ofclass|or|provides)\\b', Operator.Word, '_expression'), ('sp\\b', Name), ('\\?~?', Name.Label, 'label?'), ('[@{]', Error), default('#pop')], '_assembly-expression': [('\\(', Punctuation, ('#push', '_expression')), ('[\\[\\]]', Punctuation), (f'[{_dash}]>', Punctuation, '_expression'), ('sp\\b', Keyword.Pseudo), (';', Punctuation, '#pop:3'), include('expression')], '_for-expression': [('\\)', Punctuation, '#pop:2'), (':', Punctuation, '#pop'), include('expression')], '_keyword-expression': [('(from|near|to)\\b', Keyword, '_expression'), include('expression')], '_list-expression': [(',', Punctuation, '#pop'), include('expression')], '_object-expression': [('has\\b', Keyword.Declaration, '#pop'), include('_list-expression')], 'value': [include('_whitespace'), (f'[{_squote}][^@][{_squote}]', String.Char, '#pop'), (f'([{_squote}])(@\\{{[0-9a-fA-F]*\\}})([{_squote}])', bygroups(String.Char, String.Escape, String.Char), '#pop'), (f'([{_squote}])(@.{{2}})([{_squote}])', bygroups(String.Char, String.Escape, String.Char), '#pop'), (f'[{_squote}]', String.Single, ('#pop', 'dictionary-word')), (f'[{_dquote}]', String.Double, ('#pop', 'string')), (f'\\$[<>]?[+{_dash}][0-9]*\\.?[0-9]*([eE][+{_dash}]?[0-9]+)?', Number.Float, '#pop'), ('\\$[0-9a-fA-F]+', Number.Hex, '#pop'), ('\\$\\$[01]+', Number.Bin, '#pop'), ('[0-9]+', Number.Integer, '#pop'), (f'(##|#a\\$)({_name})', bygroups(Operator, Name), '#pop'), (f'(#g\\$)({_name})', bygroups(Operator, Name.Variable.Global), '#pop'), ('#[nw]\\$', Operator, ('#pop', 'obsolete-dictionary-word')), (f'(#r\\$)({_name})', bygroups(Operator, Name.Function), '#pop'), ('#', Name.Builtin, ('#pop', 'system-constant')), (words(('child', 'children', 'elder', 'eldest', 'glk', 'indirect', 'metaclass', 'parent', 'random', 'sibling', 'younger', 'youngest'), suffix='\\b'), Name.Builtin, '#pop'), ('(?i)(Class|Object|Routine|String)\\b', Name.Builtin, '#pop'), (words(('Box__Routine', 'CA__Pr', 'CDefArt', 'CInDefArt', 'Cl__Ms', 'Copy__Primitive', 'CP__Tab', 'DA__Pr', 'DB__Pr', 'DefArt', 'Dynam__String', 'EnglishNumber', 'Glk__Wrap', 'IA__Pr', 'IB__Pr', 'InDefArt', 'Main__', 'Meta__class', 'OB__Move', 'OB__Remove', 'OC__Cl', 'OP__Pr', 'Print__Addr', 'Print__PName', 'PrintShortName', 'RA__Pr', 'RA__Sc', 'RL__Pr', 'R_Process', 'RT__ChG', 'RT__ChGt', 'RT__ChLDB', 'RT__ChLDW', 'RT__ChPR', 'RT__ChPrintA', 'RT__ChPrintC', 'RT__ChPrintO', 'RT__ChPrintS', 'RT__ChPS', 'RT__ChR', 'RT__ChSTB', 'RT__ChSTW', 'RT__ChT', 'RT__Err', 'RT__TrPS', 'RV__Pr', 'Symb__Tab', 'Unsigned__Compare', 'WV__Pr', 'Z__Region'), prefix='(?i)', suffix='\\b'), Name.Builtin, '#pop'), (words(('call', 'copy', 'create', 'DEBUG', 'destroy', 'DICT_CHAR_SIZE', 'DICT_ENTRY_BYTES', 'DICT_IS_UNICODE', 'DICT_WORD_SIZE', 'DOUBLE_HI_INFINITY', 'DOUBLE_HI_NAN', 'DOUBLE_HI_NINFINITY', 'DOUBLE_LO_INFINITY', 'DOUBLE_LO_NAN', 'DOUBLE_LO_NINFINITY', 'false', 'FLOAT_INFINITY', 'FLOAT_NAN', 'FLOAT_NINFINITY', 'GOBJFIELD_CHAIN', 'GOBJFIELD_CHILD', 'GOBJFIELD_NAME', 'GOBJFIELD_PARENT', 'GOBJFIELD_PROPTAB', 'GOBJFIELD_SIBLING', 'GOBJ_EXT_START', 'GOBJ_TOTAL_LENGTH', 'Grammar__Version', 'INDIV_PROP_START', 'INFIX', 'infix__watching', 'MODULE_MODE', 'name', 'nothing', 'NUM_ATTR_BYTES', 'print', 'print_to_array', 'recreate', 'remaining', 'self', 'sender', 'STRICT_MODE', 'sw__var', 'sys__glob0', 'sys__glob1', 'sys__glob2', 'sys_statusline_flag', 'TARGET_GLULX', 'TARGET_ZCODE', 'temp__global2', 'temp__global3', 'temp__global4', 'temp_global', 'true', 'USE_MODULES', 'WORDSIZE'), prefix='(?i)', suffix='\\b'), Name.Builtin, '#pop'), (_name, Name, '#pop')], 'value?': [include('value'), default('#pop')], 'dictionary-word': [(f'[~^]+|//[^{_squote}]*', String.Escape), (f'[^~^/\\\\@({{{_squote}]+', String.Single), ('[/({]', String.Single), ('@\\{[0-9a-fA-F]*\\}', String.Escape), ('@.{2}', String.Escape), (f'[{_squote}]', String.Single, '#pop')], 'string': [('[~^]+', String.Escape), (f'[^~^\\\\@({{{_dquote}]+', String.Double), ('[({]', String.Double), ('\\\\', String.Escape), (f'@(\\\\\\s*[{_newline}]\\s*)*@((\\\\\\s*[{_newline}]\\s*)*[0-9])*', String.Escape), (f'@(\\\\\\s*[{_newline}]\\s*)*[({{]((\\\\\\s*[{_newline}]\\s*)*[0-9a-zA-Z_])*(\\\\\\s*[{_newline}]\\s*)*[)}}]', String.Escape), (f'@(\\\\\\s*[{_newline}]\\s*)*.(\\\\\\s*[{_newline}]\\s*)*.', String.Escape), (f'[{_dquote}]', String.Double, '#pop')], 'plain-string': [(f'[^~^\\\\({{\\[\\]{_dquote}]+', String.Double), ('[~^({\\[\\]]', String.Double), ('\\\\', String.Escape), (f'[{_dquote}]', String.Double, '#pop')], '_constant': [include('_whitespace'), (_name, Name.Constant, '#pop'), include('value')], 'constant*': [include('_whitespace'), (',', Punctuation), ('=', Punctuation, 'value?'), (_name, Name.Constant, 'value?'), default('#pop')], '_global': [include('_whitespace'), (_name, Name.Variable.Global, '#pop'), include('value')], 'label?': [include('_whitespace'), (_name, Name.Label, '#pop'), default('#pop')], 'variable?': [include('_whitespace'), (_name, Name.Variable, '#pop'), default('#pop')], 'obsolete-dictionary-word': [('\\S\\w*', String.Other, '#pop')], 'system-constant': [include('_whitespace'), (_name, Name.Builtin, '#pop')], 'directive': [include('_whitespace'), ('#', Punctuation), (';', Punctuation, '#pop'), ('\\[', Punctuation, ('default', 'statements', 'locals', 'routine-name?')), (words(('abbreviate', 'endif', 'dictionary', 'ifdef', 'iffalse', 'ifndef', 'ifnot', 'iftrue', 'ifv3', 'ifv5', 'release', 'serial', 'switches', 'system_file', 'version'), prefix='(?i)', suffix='\\b'), Keyword, 'default'), ('(?i)(array|global)\\b', Keyword, ('default', 'directive-keyword?', '_global')), ('(?i)attribute\\b', Keyword, ('default', 'alias?', '_constant')), ('(?i)class\\b', Keyword, ('object-body', 'duplicates', 'class-name')), ('(?i)(constant|default)\\b', Keyword, ('default', 'constant*')), ('(?i)(end\\b)(.*)', bygroups(Keyword, Text)), ('(?i)(extend|verb)\\b', Keyword, 'grammar'), ('(?i)fake_action\\b', Keyword, ('default', '_constant')), ('(?i)import\\b', Keyword, 'manifest'), ('(?i)(include|link|origsource)\\b', Keyword, ('default', 'before-plain-string?')), ('(?i)(lowstring|undef)\\b', Keyword, ('default', '_constant')), ('(?i)message\\b', Keyword, ('default', 'diagnostic')), ('(?i)(nearby|object)\\b', Keyword, ('object-body', '_object-head')), ('(?i)property\\b', Keyword, ('default', 'alias?', '_constant', 'property-keyword*')), ('(?i)replace\\b', Keyword, ('default', 'routine-name?', 'routine-name?')), ('(?i)statusline\\b', Keyword, ('default', 'directive-keyword?')), ('(?i)stub\\b', Keyword, ('default', 'routine-name?')), ('(?i)trace\\b', Keyword, ('default', 'trace-keyword?', 'trace-keyword?')), ('(?i)zcharacter\\b', Keyword, ('default', 'directive-keyword?', 'directive-keyword?')), (_name, Name.Class, ('object-body', '_object-head'))], 'routine-name?': [include('_whitespace'), (_name, Name.Function, '#pop'), default('#pop')], 'locals': [include('_whitespace'), (';', Punctuation, '#pop'), ('\\*', Punctuation), ('"', String.Double, 'plain-string'), (_name, Name.Variable)], 'many-values': [include('_whitespace'), (';', Punctuation), ('\\]', Punctuation, '#pop'), (':', Error), default(('expression', '_expression'))], 'alias?': [include('_whitespace'), ('alias\\b', Keyword, ('#pop', '_constant')), default('#pop')], 'class-name': [include('_whitespace'), ('(?=[,;]|(class|has|private|with)\\b)', Text, '#pop'), (_name, Name.Class, '#pop')], 'duplicates': [include('_whitespace'), ('\\(', Punctuation, ('#pop', 'expression', '_expression')), default('#pop')], '_object-head': [(f'[{_dash}]>', Punctuation), ('(class|has|private|with)\\b', Keyword.Declaration, '#pop'), include('_global')], 'object-body': [include('_whitespace'), (';', Punctuation, '#pop:2'), (',', Punctuation), ('class\\b', Keyword.Declaration, 'class-segment'), ('(has|private|with)\\b', Keyword.Declaration), (':', Error), default(('_object-expression', '_expression'))], 'class-segment': [include('_whitespace'), ('(?=[,;]|(class|has|private|with)\\b)', Text, '#pop'), (_name, Name.Class), default('value')], 'grammar': [include('_whitespace'), ('=', Punctuation, ('#pop', 'default')), ('\\*', Punctuation, ('#pop', 'grammar-line')), default('_directive-keyword')], 'grammar-line': [include('_whitespace'), (';', Punctuation, '#pop'), ('[/*]', Punctuation), (f'[{_dash}]>', Punctuation, 'value'), ('(noun|scope)\\b', Keyword, '=routine'), default('_directive-keyword')], '=routine': [include('_whitespace'), ('=', Punctuation, 'routine-name?'), default('#pop')], 'manifest': [include('_whitespace'), (';', Punctuation, '#pop'), (',', Punctuation), ('(?i)global\\b', Keyword, '_global'), default('_global')], 'diagnostic': [include('_whitespace'), (f'[{_dquote}]', String.Double, ('#pop', 'message-string')), default(('#pop', 'before-plain-string?', 'directive-keyword?'))], 'before-plain-string?': [include('_whitespace'), (f'[{_dquote}]', String.Double, ('#pop', 'plain-string')), default('#pop')], 'message-string': [('[~^]+', String.Escape), include('plain-string')], '_directive-keyword!': [include('_whitespace'), (words(('additive', 'alias', 'buffer', 'class', 'creature', 'data', 'error', 'fatalerror', 'first', 'has', 'held', 'individual', 'initial', 'initstr', 'last', 'long', 'meta', 'multi', 'multiexcept', 'multiheld', 'multiinside', 'noun', 'number', 'only', 'private', 'replace', 'reverse', 'scope', 'score', 'special', 'string', 'table', 'terminating', 'time', 'topic', 'warning', 'with'), suffix='\\b'), Keyword, '#pop'), ('static\\b', Keyword), (f'[{_dash}]{{1,2}}>|[+=]', Punctuation, '#pop')], '_directive-keyword': [include('_directive-keyword!'), include('value')], 'directive-keyword?': [include('_directive-keyword!'), default('#pop')], 'property-keyword*': [include('_whitespace'), (words(('additive', 'individual', 'long'), suffix=f'\\b(?=(\\s*|(![^{_newline}]*[{_newline}]))*[_a-zA-Z])'), Keyword), default('#pop')], 'trace-keyword?': [include('_whitespace'), (words(('assembly', 'dictionary', 'expressions', 'lines', 'linker', 'objects', 'off', 'on', 'symbols', 'tokens', 'verbs'), suffix='\\b'), Keyword, '#pop'), default('#pop')], 'statements': [include('_whitespace'), ('\\]', Punctuation, '#pop'), ('[;{}]', Punctuation), (words(('box', 'break', 'continue', 'default', 'give', 'inversion', 'new_line', 'quit', 'read', 'remove', 'return', 'rfalse', 'rtrue', 'spaces', 'string', 'until'), suffix='\\b'), Keyword, 'default'), ('(do|else)\\b', Keyword), ('(font|style)\\b', Keyword, ('default', 'miscellaneous-keyword?')), ('for\\b', Keyword, ('for', '(?')), ('(if|switch|while)', Keyword, ('expression', '_expression', '(?')), ('(jump|save|restore)\\b', Keyword, ('default', 'label?')), ('objectloop\\b', Keyword, ('_keyword-expression', 'variable?', '(?')), (f'print(_ret)?\\b|(?=[{_dquote}])', Keyword, 'print-list'), ('\\.', Name.Label, 'label?'), ('@', Keyword, 'opcode'), ('#(?![agrnw]\\$|#)', Punctuation, 'directive'), ('<', Punctuation, 'default'), ('move\\b', Keyword, ('default', '_keyword-expression', '_expression')), default(('default', '_keyword-expression', '_expression'))], 'miscellaneous-keyword?': [include('_whitespace'), ('(bold|fixed|from|near|off|on|reverse|roman|to|underline)\\b', Keyword, '#pop'), (f'(a|A|an|address|char|name|number|object|property|string|the|The)\\b(?=(\\s+|(![^{_newline}]*))*\\))', Keyword.Pseudo, '#pop'), (f'{_name}(?=(\\s+|(![^{_newline}]*))*\\))', Name.Function, '#pop'), default('#pop')], '(?': [include('_whitespace'), ('\\(', Punctuation, '#pop'), default('#pop')], 'for': [include('_whitespace'), (';', Punctuation, ('_for-expression', '_expression')), default(('_for-expression', '_expression'))], 'print-list': [include('_whitespace'), (';', Punctuation, '#pop'), (':', Error), default(('_list-expression', '_expression', '_list-expression', 'form'))], 'form': [include('_whitespace'), ('\\(', Punctuation, ('#pop', 'miscellaneous-keyword?')), default('#pop')], 'opcode': [include('_whitespace'), (f'[{_dquote}]', String.Double, ('operands', 'plain-string')), (f'[{_dash}]{{1,2}}>', Punctuation, 'operands'), (_name, Keyword, 'operands')], 'operands': [(':', Error), default(('_assembly-expression', '_expression'))]}
  --
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class Inform7Lexer {
      + name = 'Inform 7'
      + url = 'http://inform7.com/'
      + aliases = ['inform7', 'i7']
      + filenames = ['*.ni', '*.i7x']
      + version_added = '2.0'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {}
      + token_variants = ['+i6t-not-inline', '+i6t-inline', '+i6t-use-option']
  --
      - __init__()
  }

  class Inform6TemplateLexer {
      + name = 'Inform 6 template'
      + aliases = ['i6t']
      + filenames = ['*.i6t']
      + version_added = '2.0'
  --
      + get_tokens_unprocessed(text, stack = ('+i6t-root',))
  }

  class Tads3Lexer {
      + name = 'TADS 3'
      + aliases = ['tads3']
      + filenames = ['*.t']
      + url = 'https://www.tads.org'
      + version_added = ''
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'root': [('\ufeff', Text), ('\\{', Punctuation, 'object-body'), (';+', Punctuation), ('(?=(argcount|break|case|catch|continue|default|definingobj|delegated|do|else|for|foreach|finally|goto|if|inherited|invokee|local|nil|new|operator|replaced|return|self|switch|targetobj|targetprop|throw|true|try|while)\\b)', Text, 'block'), (f'({_name})({_ws}*)(\\()', bygroups(Name.Function, using(this, state='whitespace'), Punctuation), ('block?/root', 'more/parameters', 'main/parameters')), include('whitespace'), ('\\++', Punctuation), ('[^\\s!"%-(*->@-_a-z{-~]+', Error), ('(?!\\Z)', Text, 'main/root')], 'main/root': [include('main/basic'), default(('#pop', 'object-body/no-braces', 'classes', 'class'))], 'object-body/no-braces': [(';', Punctuation, '#pop'), ('\\{', Punctuation, ('#pop', 'object-body')), include('object-body')], 'object-body': [(';', Punctuation), ('\\{', Punctuation, '#push'), ('\\}', Punctuation, '#pop'), (':', Punctuation, ('classes', 'class')), (f'({_name}?)({_ws}*)(\\()', bygroups(Name.Function, using(this, state='whitespace'), Punctuation), ('block?', 'more/parameters', 'main/parameters')), (f'({_name})({_ws}*)(\\{{)', bygroups(Name.Function, using(this, state='whitespace'), Punctuation), 'block'), (f'({_name})({_ws}*)(:)', bygroups(Name.Variable, using(this, state='whitespace'), Punctuation), ('object-body/no-braces', 'classes', 'class')), include('whitespace'), (f'->|{_operator}', Punctuation, 'main'), default('main/object-body')], 'main/object-body': [include('main/basic'), (f'({_name})({_ws}*)(=?)', bygroups(Name.Variable, using(this, state='whitespace'), Punctuation), ('#pop', 'more', 'main')), default('#pop:2')], 'block?/root': [('\\{', Punctuation, ('#pop', 'block')), include('whitespace'), ('(?=[\\[\\\'"<(:])', Text, ('#pop', 'object-body/no-braces', 'grammar', 'grammar-rules')), default(('#pop', 'object-body/no-braces'))], 'block?': [('\\{', Punctuation, ('#pop', 'block')), include('whitespace'), default('#pop')], 'block/basic': [('[;:]+', Punctuation), ('\\{', Punctuation, '#push'), ('\\}', Punctuation, '#pop'), ('default\\b', Keyword.Reserved), (f'({_name})({_ws}*)(:)', bygroups(Name.Label, using(this, state='whitespace'), Punctuation)), include('whitespace')], 'block': [include('block/basic'), ('(?!\\Z)', Text, ('more', 'main'))], 'block/embed': [('>>', String.Interpol, '#pop'), include('block/basic'), ('(?!\\Z)', Text, ('more/embed', 'main'))], 'main/basic': [include('whitespace'), ('\\(', Punctuation, ('#pop', 'more', 'main')), ('\\[', Punctuation, ('#pop', 'more/list', 'main')), ('\\{', Punctuation, ('#pop', 'more/inner', 'main/inner', 'more/parameters', 'main/parameters')), ('\\*|\\.{3}', Punctuation, '#pop'), ('(?i)0x[\\da-f]+', Number.Hex, '#pop'), ('(\\d+\\.(?!\\.)\\d*|\\.\\d+)([eE][-+]?\\d+)?|\\d+[eE][-+]?\\d+', Number.Float, '#pop'), ('0[0-7]+', Number.Oct, '#pop'), ('\\d+', Number.Integer, '#pop'), ('"""', String.Double, ('#pop', 'tdqs')), ("'''", String.Single, ('#pop', 'tsqs')), ('"', String.Double, ('#pop', 'dqs')), ("'", String.Single, ('#pop', 'sqs')), ('R"""', String.Regex, ('#pop', 'tdqr')), ("R'''", String.Regex, ('#pop', 'tsqr')), ('R"', String.Regex, ('#pop', 'dqr')), ("R'", String.Regex, ('#pop', 'sqr')), (f'(extern)({_ws}+)(object\\b)', bygroups(Keyword.Reserved, using(this, state='whitespace'), Keyword.Reserved)), (f'(function|method)({_ws}*)(\\()', bygroups(Keyword.Reserved, using(this, state='whitespace'), Punctuation), ('#pop', 'block?', 'more/parameters', 'main/parameters')), (f'(modify)({_ws}+)(grammar\\b)', bygroups(Keyword.Reserved, using(this, state='whitespace'), Keyword.Reserved), ('#pop', 'object-body/no-braces', ':', 'grammar')), (f'(new)({_ws}+(?=(?:function|method)\\b))', bygroups(Keyword.Reserved, using(this, state='whitespace'))), (f'(object)({_ws}+)(template\\b)', bygroups(Keyword.Reserved, using(this, state='whitespace'), Keyword.Reserved), ('#pop', 'template')), (f'(string)({_ws}+)(template\\b)', bygroups(Keyword, using(this, state='whitespace'), Keyword.Reserved), ('#pop', 'function-name')), ('(argcount|definingobj|invokee|replaced|targetobj|targetprop)\\b', Name.Builtin, '#pop'), ('(break|continue|goto)\\b', Keyword.Reserved, ('#pop', 'label')), ('(case|extern|if|intrinsic|return|static|while)\\b', Keyword.Reserved), ('catch\\b', Keyword.Reserved, ('#pop', 'catch')), ('class\\b', Keyword.Reserved, ('#pop', 'object-body/no-braces', 'class')), ('(default|do|else|finally|try)\\b', Keyword.Reserved, '#pop'), ('(dictionary|property)\\b', Keyword.Reserved, ('#pop', 'constants')), ('enum\\b', Keyword.Reserved, ('#pop', 'enum')), ('export\\b', Keyword.Reserved, ('#pop', 'main')), ('(for|foreach)\\b', Keyword.Reserved, ('#pop', 'more/inner', 'main/inner')), ('(function|method)\\b', Keyword.Reserved, ('#pop', 'block?', 'function-name')), ('grammar\\b', Keyword.Reserved, ('#pop', 'object-body/no-braces', 'grammar')), ('inherited\\b', Keyword.Reserved, ('#pop', 'inherited')), ('local\\b', Keyword.Reserved, ('#pop', 'more/local', 'main/local')), ('(modify|replace|switch|throw|transient)\\b', Keyword.Reserved, '#pop'), ('new\\b', Keyword.Reserved, ('#pop', 'class')), ('(nil|true)\\b', Keyword.Constant, '#pop'), ('object\\b', Keyword.Reserved, ('#pop', 'object-body/no-braces')), ('operator\\b', Keyword.Reserved, ('#pop', 'operator')), ('propertyset\\b', Keyword.Reserved, ('#pop', 'propertyset', 'main')), ('self\\b', Name.Builtin.Pseudo, '#pop'), ('template\\b', Keyword.Reserved, ('#pop', 'template')), (f'(__objref|defined)({_ws}*)(\\()', bygroups(Operator.Word, using(this, state='whitespace'), Operator), ('#pop', 'more/__objref', 'main')), ('delegated\\b', Operator.Word), ('(__DATE__|__DEBUG|__LINE__|__FILE__|__TADS_MACRO_FORMAT_VERSION|__TADS_SYS_\\w*|__TADS_SYSTEM_NAME|__TADS_VERSION_MAJOR|__TADS_VERSION_MINOR|__TADS3|__TIME__|construct|finalize|grammarInfo|grammarTag|lexicalParent|miscVocab|sourceTextGroup|sourceTextGroupName|sourceTextGroupOrder|sourceTextOrder)\\b', Name.Builtin, '#pop')], 'main': [include('main/basic'), (_name, Name, '#pop'), default('#pop')], 'more/basic': [('\\(', Punctuation, ('more/list', 'main')), ('\\[', Punctuation, ('more', 'main')), ('\\.{3}', Punctuation), ('->|\\.\\.', Punctuation, 'main'), ('(?=;)|[:)\\]]', Punctuation, '#pop'), include('whitespace'), (_operator, Operator, 'main'), ('\\?', Operator, ('main', 'more/conditional', 'main')), (f'(is|not)({_ws}+)(in\\b)', bygroups(Operator.Word, using(this, state='whitespace'), Operator.Word)), ('[^\\s!"%-_a-z{-~]+', Error)], 'more': [include('more/basic'), default('#pop')], 'more/conditional': [(':(?!:)', Operator, '#pop'), include('more')], 'more/embed': [('>>', String.Interpol, '#pop:2'), include('more')], 'main/inner': [('\\(', Punctuation, ('#pop', 'more/inner', 'main/inner')), ('local\\b', Keyword.Reserved, ('#pop', 'main/local')), include('main')], 'more/inner': [('\\}', Punctuation, '#pop'), (',', Punctuation, 'main/inner'), ('(in|step)\\b', Keyword, 'main/inner'), include('more')], 'main/local': [(_name, Name.Variable, '#pop'), include('whitespace')], 'more/local': [(',', Punctuation, 'main/local'), include('more')], 'more/list': [('[,:]', Punctuation, 'main'), include('more')], 'main/parameters': [(f'({_name})({_ws}*)(?=:)', bygroups(Name.Variable, using(this, state='whitespace')), '#pop'), (f'({_name})({_ws}+)({_name})', bygroups(Name.Class, using(this, state='whitespace'), Name.Variable), '#pop'), ('\\[+', Punctuation), include('main/basic'), (_name, Name.Variable, '#pop'), default('#pop')], 'more/parameters': [(f'(:)({_ws}*(?=[?=,:)]))', bygroups(Punctuation, using(this, state='whitespace'))), ('[?\\]]+', Punctuation), ('[:)]', Punctuation, ('#pop', 'multimethod?')), (',', Punctuation, 'main/parameters'), ('=', Punctuation, ('more/parameter', 'main')), include('more')], 'more/parameter': [('(?=[,)])', Text, '#pop'), include('more')], 'multimethod?': [('multimethod\\b', Keyword, '#pop'), include('whitespace'), default('#pop')], 'more/__objref': [(',', Punctuation, 'mode'), ('\\)', Operator, '#pop'), include('more')], 'mode': [('(error|warn)\\b', Keyword, '#pop'), include('whitespace')], 'catch': [('\\(+', Punctuation), (_name, Name.Exception, ('#pop', 'variables')), include('whitespace')], 'enum': [include('whitespace'), ('token\\b', Keyword, ('#pop', 'constants')), default(('#pop', 'constants'))], 'grammar': [('\\)+', Punctuation), ('\\(', Punctuation, 'grammar-tag'), (':', Punctuation, 'grammar-rules'), (_name, Name.Class), include('whitespace')], 'grammar-tag': [include('whitespace'), ('"""([^\\\\"<]|""?(?!")|\\\\"+|\\\\.|<(?!<))+("{3,}|<<)|R"""([^\\\\"]|""?(?!")|\\\\"+|\\\\.)+"{3,}|\'\'\'([^\\\\\'<]|\'\'?(?!\')|\\\\\'+|\\\\.|<(?!<))+(\'{3,}|<<)|R\'\'\'([^\\\\\']|\'\'?(?!\')|\\\\\'+|\\\\.)+\'{3,}|"([^\\\\"<]|\\\\.|<(?!<))+("|<<)|R"([^\\\\"]|\\\\.)+"|\'([^\\\\\'<]|\\\\.|<(?!<))+(\'|<<)|R\'([^\\\\\']|\\\\.)+\'|([^)\\s\\\\/]|/(?![/*]))+|\\)', String.Other, '#pop')], 'grammar-rules': [include('string'), include('whitespace'), (f'(\\[)({_ws}*)(badness)', bygroups(Punctuation, using(this, state='whitespace'), Keyword), 'main'), (f'->|{_operator}|[()]', Punctuation), (_name, Name.Constant), default('#pop:2')], ':': [(':', Punctuation, '#pop')], 'function-name': [('(<<([^>]|>>>|>(?!>))*>>)+', String.Interpol), (f'(?={_name}?{_ws}*[({{])', Text, '#pop'), (_name, Name.Function, '#pop'), include('whitespace')], 'inherited': [('<', Punctuation, ('#pop', 'classes', 'class')), include('whitespace'), (_name, Name.Class, '#pop'), default('#pop')], 'operator': [('negate\\b', Operator.Word, '#pop'), include('whitespace'), (_operator, Operator), default('#pop')], 'propertyset': [('\\(', Punctuation, ('more/parameters', 'main/parameters')), ('\\{', Punctuation, ('#pop', 'object-body')), include('whitespace')], 'template': [('(?=;)', Text, '#pop'), include('string'), ('inherited\\b', Keyword.Reserved), include('whitespace'), (f'->|\\?|{_operator}', Punctuation), (_name, Name.Variable)], 'class': [('\\*|\\.{3}', Punctuation, '#pop'), ('object\\b', Keyword.Reserved, '#pop'), ('transient\\b', Keyword.Reserved), (_name, Name.Class, '#pop'), include('whitespace'), default('#pop')], 'classes': [('[:,]', Punctuation, 'class'), include('whitespace'), ('>', Punctuation, '#pop'), default('#pop')], 'constants': [(',+', Punctuation), (';', Punctuation, '#pop'), ('property\\b', Keyword.Reserved), (_name, Name.Constant), include('whitespace')], 'label': [(_name, Name.Label, '#pop'), include('whitespace'), default('#pop')], 'variables': [(',+', Punctuation), ('\\)', Punctuation, '#pop'), include('whitespace'), (_name, Name.Variable)], 'whitespace': [(f'^{_ws_pp}*#({_comment_multiline}|[^\\n]|(?<=\\\\)\\n)*\\n?', Comment.Preproc), (_comment_single, Comment.Single), (_comment_multiline, Comment.Multiline), (f'\\\\+\\n+{_ws_pp}*#?|\\n+|([^\\S\\n]|\\\\)+', Text)], 'string': [('"""', String.Double, 'tdqs'), ("'''", String.Single, 'tsqs'), ('"', String.Double, 'dqs'), ("'", String.Single, 'sqs')], 's/escape': [(f'\\{{\\{{|\\}}\\}}|{_escape}', String.Escape)], 's/verbatim': [('<<\\s*(as\\s+decreasingly\\s+likely\\s+outcomes|cycling|else|end|first\\s+time|one\\s+of|only|or|otherwise|(sticky|(then\\s+)?(purely\\s+)?at)\\s+random|stopping|(then\\s+)?(half\\s+)?shuffled|\\|\\|)\\s*>>', String.Interpol), (f'<<(%(_({_escape}|\\\\?.)|[\\-+ ,#]|\\[\\d*\\]?)*\\d*\\.?\\d*({_escape}|\\\\?.)|\\s*((else|otherwise)\\s+)?(if|unless)\\b)?', String.Interpol, ('block/embed', 'more/embed', 'main'))], 's/entity': [('(?i)&(#(x[\\da-f]+|\\d+)|[a-z][\\da-z]*);?', Name.Entity)], 'tdqs': _make_string_state(True, True), 'tsqs': _make_string_state(True, False), 'dqs': _make_string_state(False, True), 'sqs': _make_string_state(False, False), 'tdqs/listing': _make_string_state(True, True, 'listing'), 'tsqs/listing': _make_string_state(True, False, 'listing'), 'dqs/listing': _make_string_state(False, True, 'listing'), 'sqs/listing': _make_string_state(False, False, 'listing'), 'tdqs/xmp': _make_string_state(True, True, 'xmp'), 'tsqs/xmp': _make_string_state(True, False, 'xmp'), 'dqs/xmp': _make_string_state(False, True, 'xmp'), 'sqs/xmp': _make_string_state(False, False, 'xmp'), 'tdqt': _make_tag_state(True, True), 'tsqt': _make_tag_state(True, False), 'dqt': _make_tag_state(False, True), 'sqt': _make_tag_state(False, False), 'dqs/tdqt': _make_attribute_value_state('"', True, True), 'dqs/tsqt': _make_attribute_value_state('"', True, False), 'dqs/dqt': _make_attribute_value_state('"', False, True), 'dqs/sqt': _make_attribute_value_state('"', False, False), 'sqs/tdqt': _make_attribute_value_state("'", True, True), 'sqs/tsqt': _make_attribute_value_state("'", True, False), 'sqs/dqt': _make_attribute_value_state("'", False, True), 'sqs/sqt': _make_attribute_value_state("'", False, False), 'uqs/tdqt': _make_attribute_value_state(_no_quote, True, True), 'uqs/tsqt': _make_attribute_value_state(_no_quote, True, False), 'uqs/dqt': _make_attribute_value_state(_no_quote, False, True), 'uqs/sqt': _make_attribute_value_state(_no_quote, False, False), 'tdqr': [('[^\\\\"]+', String.Regex), ('\\\\"*', String.Regex), ('"{3,}', String.Regex, '#pop'), ('"', String.Regex)], 'tsqr': [("[^\\\\']+", String.Regex), ("\\\\'*", String.Regex), ("'{3,}", String.Regex, '#pop'), ("'", String.Regex)], 'dqr': [('[^\\\\"]+', String.Regex), ('\\\\"?', String.Regex), ('"', String.Regex, '#pop')], 'sqr': [("[^\\\\']+", String.Regex), ("\\\\'?", String.Regex), ("'", String.Regex, '#pop')]}
  --
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class IoLexer {
      + name = 'Io'
      + url = 'http://iolanguage.com/'
      + filenames = ['*.io']
      + aliases = ['io']
      + mimetypes = ['text/x-iosrc']
      + version_added = '0.10'
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), ('//(.*?)$', Comment.Single), ('#(.*?)$', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ('/\\+', Comment.Multiline, 'nestedcomment'), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('::=|:=|=|\\(|\\)|;|,|\\*|-|\\+|>|<|@|!|/|\\||\\^|\\.|%|&|\\[|\\]|\\{|\\}', Operator), ('(clone|do|doFile|doString|method|for|if|else|elseif|then)\\b', Keyword), ('(nil|false|true)\\b', Name.Constant), ('(Object|list|List|Map|args|Sequence|Coroutine|File)\\b', Name.Builtin), ('[a-zA-Z_]\\w*', Name), ('(\\d+\\.?\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number.Float), ('\\d+', Number.Integer)], 'nestedcomment': [('[^+/]+', Comment.Multiline), ('/\\+', Comment.Multiline, '#push'), ('\\+/', Comment.Multiline, '#pop'), ('[+/]', Comment.Multiline)]}
  }

  class JLexer {
      + name = 'J'
      + url = 'http://jsoftware.com/'
      + aliases = ['j']
      + filenames = ['*.ijs']
      + mimetypes = ['text/x-j']
      + version_added = '2.1'
      + validName = '\\b[a-zA-Z]\\w*'
      + tokens = {'root': [('#!.*$', Comment.Preproc), ('NB\\..*', Comment.Single), ('(\\n+\\s*)(Note)', bygroups(Whitespace, Comment.Multiline), 'comment'), ('(\\s*)(Note.*)', bygroups(Whitespace, Comment.Single)), ('\\s+', Whitespace), ("'", String, 'singlequote'), ('0\\s+:\\s*0', Name.Entity, 'nounDefinition'), ('(noun)(\\s+)(define)(\\s*)$', bygroups(Name.Entity, Whitespace, Name.Entity, Whitespace), 'nounDefinition'), ('([1-4]|13)\\s+:\\s*0\\b', Name.Function, 'explicitDefinition'), ('(adverb|conjunction|dyad|monad|verb)(\\s+)(define)\\b', bygroups(Name.Function, Whitespace, Name.Function), 'explicitDefinition'), (words(('for_', 'goto_', 'label_'), suffix=validName + '\\.'), Name.Label), (words(('assert', 'break', 'case', 'catch', 'catchd', 'catcht', 'continue', 'do', 'else', 'elseif', 'end', 'fcase', 'for', 'if', 'return', 'select', 'throw', 'try', 'while', 'whilst'), suffix='\\.'), Name.Label), (validName, Name.Variable), (words(('ARGV', 'CR', 'CRLF', 'DEL', 'Debug', 'EAV', 'EMPTY', 'FF', 'JVERSION', 'LF', 'LF2', 'Note', 'TAB', 'alpha17', 'alpha27', 'apply', 'bind', 'boxopen', 'boxxopen', 'bx', 'clear', 'cutLF', 'cutopen', 'datatype', 'def', 'dfh', 'drop', 'each', 'echo', 'empty', 'erase', 'every', 'evtloop', 'exit', 'expand', 'fetch', 'file2url', 'fixdotdot', 'fliprgb', 'getargs', 'getenv', 'hfd', 'inv', 'inverse', 'iospath', 'isatty', 'isutf8', 'items', 'leaf', 'list', 'nameclass', 'namelist', 'names', 'nc', 'nl', 'on', 'pick', 'rows', 'script', 'scriptd', 'sign', 'sminfo', 'smoutput', 'sort', 'split', 'stderr', 'stdin', 'stdout', 'table', 'take', 'timespacex', 'timex', 'tmoutput', 'toCRLF', 'toHOST', 'toJ', 'tolower', 'toupper', 'type', 'ucp', 'ucpcount', 'usleep', 'utf8', 'uucp')), Name.Function), ('=[.:]', Operator), ('[-=+*#$%@!~`^&";:.,<>{}\\[\\]\\\\|/?]', Operator), ('[abCdDeEfHiIjLMoprtT]\\.', Keyword.Reserved), ('[aDiLpqsStux]\\:', Keyword.Reserved), ('(_[0-9])\\:', Keyword.Constant), ('\\(', Punctuation, 'parentheses'), include('numbers')], 'comment': [('[^)]', Comment.Multiline), ('^\\)', Comment.Multiline, '#pop'), ('[)]', Comment.Multiline)], 'explicitDefinition': [('\\b[nmuvxy]\\b', Name.Decorator), include('root'), ('[^)]', Name), ('^\\)', Name.Label, '#pop'), ('[)]', Name)], 'numbers': [('\\b_{1,2}\\b', Number), ('_?\\d+(\\.\\d+)?(\\s*[ejr]\\s*)_?\\d+(\\.?=\\d+)?', Number), ('_?\\d+\\.(?=\\d+)', Number.Float), ('_?\\d+x', Number.Integer.Long), ('_?\\d+', Number.Integer)], 'nounDefinition': [('[^)]+', String), ('^\\)', Name.Label, '#pop'), ('[)]', String)], 'parentheses': [('\\)', Punctuation, '#pop'), include('explicitDefinition'), include('root')], 'singlequote': [("[^']+", String), ("''", String), ("'", String, '#pop')]}
  }

  class JavascriptLexer {
      + name = 'JavaScript'
      + url = 'https://www.ecma-international.org/publications-and-standards/standards/ecma-262/'
      + aliases = ['javascript', 'js']
      + filenames = ['*.js', '*.jsm', '*.mjs', '*.cjs']
      + mimetypes = ['application/javascript', 'application/x-javascript', 'text/x-javascript', 'text/javascript']
      + version_added = ''
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'commentsandwhitespace': [('\\s+', Whitespace), ('<!--', Comment), ('//.*?$', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline)], 'slashstartsregex': [include('commentsandwhitespace'), ('/(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gimuysd]+\\b|\\B)', String.Regex, '#pop'), ('(?=/)', Text, ('#pop', 'badregex')), default('#pop')], 'badregex': [('\\n', Whitespace, '#pop')], 'root': [('\\A#! ?/.*?$', Comment.Hashbang), ('^(?=\\s|/|<!--)', Text, 'slashstartsregex'), include('commentsandwhitespace'), ('0[bB][01]+n?', Number.Bin), ('0[oO]?[0-7]+n?', Number.Oct), ('0[xX][0-9a-fA-F]+n?', Number.Hex), ('[0-9]+n', Number.Integer), ('(\\.[0-9]+|[0-9]+\\.[0-9]*|[0-9]+)([eE][-+]?[0-9]+)?', Number.Float), ('\\.\\.\\.|=>', Punctuation), ('\\+\\+|--|~|\\?\\?=?|\\?|:|\\\\(?=\\n)|(<<|>>>?|==?|!=?|(?:\\*\\*|\\|\\||&&|[-<>+*%&|^/]))=?', Operator, 'slashstartsregex'), ('[{(\\[;,]', Punctuation, 'slashstartsregex'), ('[})\\].]', Punctuation), ('(typeof|instanceof|in|void|delete|new)\\b', Operator.Word, 'slashstartsregex'), ('\\b(constructor|from|as)\\b', Keyword.Reserved), ('(for|in|while|do|break|return|continue|switch|case|default|if|else|throw|try|catch|finally|yield|await|async|this|of|static|export|import|debugger|extends|super)\\b', Keyword, 'slashstartsregex'), ('(var|let|const|with|function|class)\\b', Keyword.Declaration, 'slashstartsregex'), ('(abstract|boolean|byte|char|double|enum|final|float|goto|implements|int|interface|long|native|package|private|protected|public|short|synchronized|throws|transient|volatile)\\b', Keyword.Reserved), ('(true|false|null|NaN|Infinity|undefined)\\b', Keyword.Constant), ('(Array|Boolean|Date|BigInt|Function|Math|ArrayBuffer|Number|Object|RegExp|String|Promise|Proxy|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|eval|isFinite|isNaN|parseFloat|parseInt|DataView|document|window|globalThis|global|Symbol|Intl|WeakSet|WeakMap|Set|Map|Reflect|JSON|Atomics|Int(?:8|16|32)Array|BigInt64Array|Float32Array|Float64Array|Uint8ClampedArray|Uint(?:8|16|32)Array|BigUint64Array)\\b', Name.Builtin), ('((?:Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\\b', Name.Exception), ('(super)(\\s*)(\\([\\w,?.$\\s]+\\s*\\))', bygroups(Keyword, Whitespace), 'slashstartsregex'), ('([a-zA-Z_?.$][\\w?.$]*)(?=\\(\\) \\{)', Name.Other, 'slashstartsregex'), (JS_IDENT, Name.Other), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('`', String.Backtick, 'interp'), ('#[a-zA-Z_]\\w*', Name)], 'interp': [('`', String.Backtick, '#pop'), ('\\\\.', String.Backtick), ('\\$\\{', String.Interpol, 'interp-inside'), ('\\$', String.Backtick), ('[^`\\\\$]+', String.Backtick)], 'interp-inside': [('\\}', String.Interpol, '#pop'), include('root')]}
  }

  class TypeScriptLexer {
      + name = 'TypeScript'
      + url = 'https://www.typescriptlang.org/'
      + aliases = ['typescript', 'ts']
      + filenames = ['*.ts']
      + mimetypes = ['application/x-typescript', 'text/x-typescript']
      + version_added = '1.6'
      + priority = 0.5
      + tokens = {'root': [('(abstract|implements|private|protected|public|readonly)\\b', Keyword, 'slashstartsregex'), ('(enum|interface|override)\\b', Keyword.Declaration, 'slashstartsregex'), ('\\b(declare|type)\\b', Keyword.Reserved), ('\\b(string|boolean|number)\\b', Keyword.Type), ('\\b(module)(\\s*)([\\w?.$]+)(\\s*)', bygroups(Keyword.Reserved, Whitespace, Name.Other, Whitespace), 'slashstartsregex'), ('([\\w?.$]+)(\\s*)(:)(\\s*)([\\w?.$]+)', bygroups(Name.Other, Whitespace, Operator, Whitespace, Keyword.Type)), ('@' + JS_IDENT, Keyword.Declaration), inherit, ('#[a-zA-Z_]\\w*', Name)]}
  }

  class KalLexer {
      + name = 'Kal'
      + url = 'http://rzimmerman.github.io/kal'
      + aliases = ['kal']
      + filenames = ['*.kal']
      + mimetypes = ['text/kal', 'application/kal']
      + version_added = '2.0'
      + flags = re.DOTALL
      + tokens = {'commentsandwhitespace': [('\\s+', Whitespace), ('###[^#].*?###', Comment.Multiline), ('(#(?!##[^#]).*?)(\\n)', bygroups(Comment.Single, Whitespace))], 'functiondef': [('([$a-zA-Z_][\\w$]*)(\\s*)', bygroups(Name.Function, Whitespace), '#pop'), include('commentsandwhitespace')], 'classdef': [('\\b(inherits)(\\s+)(from)\\b', bygroups(Keyword, Whitespace, Keyword)), ('([$a-zA-Z_][\\w$]*)(?=\\s*\\n)', Name.Class, '#pop'), ('[$a-zA-Z_][\\w$]*\\b', Name.Class), include('commentsandwhitespace')], 'listcomprehension': [('\\]', Punctuation, '#pop'), ('\\b(property|value)\\b', Keyword), include('root')], 'waitfor': [('\\n', Whitespace, '#pop'), ('\\bfrom\\b', Keyword), include('root')], 'root': [include('commentsandwhitespace'), ('/(?! )(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gimuysd]+\\b|\\B)', String.Regex), ('\\?|:|_(?=\\n)|==?|!=|-(?!>)|[<>+*/-]=?', Operator), ('\\b(and|or|isnt|is|not|but|bitwise|mod|\\^|xor|exists|doesnt\\s+exist)\\b', Operator.Word), ('(\\([^()]+\\))?(\\s*)(>)', bygroups(Name.Function, Whitespace, Punctuation)), ('[{(]', Punctuation), ('\\[', Punctuation, 'listcomprehension'), ('[})\\].,]', Punctuation), ('\\b(function|method|task)\\b', Keyword.Declaration, 'functiondef'), ('\\bclass\\b', Keyword.Declaration, 'classdef'), ('\\b(safe(?=\\s))?(\\s*)(wait(?=\\s))(\\s+)(for)\\b', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword), 'waitfor'), ('\\b(me|this)(\\.[$a-zA-Z_][\\w.$]*)?\\b', Name.Variable.Instance), ('(?<![.$])(run)(\\s+)(in)(\\s+)(parallel)\\b', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword)), ('(?<![.$])(for)(\\s+)(parallel|series)?\\b', bygroups(Keyword, Whitespace, Keyword)), ('(?<![.$])(except)(\\s+)(when)?\\b', bygroups(Keyword, Whitespace, Keyword)), ('(?<![.$])(fail)(\\s+)(with)?\\b', bygroups(Keyword, Whitespace, Keyword)), ('(?<![.$])(inherits)(\\s+)(from)?\\b', bygroups(Keyword, Whitespace, Keyword)), ('(?<![.$])(for)(\\s+)(parallel|series)?\\b', bygroups(Keyword, Whitespace, Keyword)), (words(('in', 'of', 'while', 'until', 'break', 'return', 'continue', 'when', 'if', 'unless', 'else', 'otherwise', 'throw', 'raise', 'try', 'catch', 'finally', 'new', 'delete', 'typeof', 'instanceof', 'super'), prefix='(?<![.$])', suffix='\\b'), Keyword), (words(('true', 'false', 'yes', 'no', 'on', 'off', 'null', 'nothing', 'none', 'NaN', 'Infinity', 'undefined'), prefix='(?<![.$])', suffix='\\b'), Keyword.Constant), (words(('Array', 'Boolean', 'Date', 'Error', 'Function', 'Math', 'Number', 'Object', 'RegExp', 'String', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'eval', 'isFinite', 'isNaN', 'isSafeInteger', 'parseFloat', 'parseInt', 'document', 'window', 'globalThis', 'Symbol', 'print'), suffix='\\b'), Name.Builtin), ('([$a-zA-Z_][\\w.$]*)(\\s*)(:|[+\\-*/]?\\=)?\\b', bygroups(Name.Variable, Whitespace, Operator)), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ('"""', String, 'tdqs'), ("'''", String, 'tsqs'), ('"', String, 'dqs'), ("'", String, 'sqs')], 'strings': [('[^#\\\\\\\'"]+', String)], 'interpoling_string': [('\\}', String.Interpol, '#pop'), include('root')], 'dqs': [('"', String, '#pop'), ("\\\\.|\\'", String), ('#\\{', String.Interpol, 'interpoling_string'), include('strings')], 'sqs': [("'", String, '#pop'), ('#|\\\\.|"', String), include('strings')], 'tdqs': [('"""', String, '#pop'), ('\\\\.|\\\'|"', String), ('#\\{', String.Interpol, 'interpoling_string'), include('strings')], 'tsqs': [("'''", String, '#pop'), ('#|\\\\.|\\\'|"', String), include('strings')]}
  }

  class LiveScriptLexer {
      + name = 'LiveScript'
      + url = 'https://livescript.net/'
      + aliases = ['livescript', 'live-script']
      + filenames = ['*.ls']
      + mimetypes = ['text/livescript']
      + version_added = '1.6'
      + flags = re.DOTALL
      + tokens = {'commentsandwhitespace': [('\\s+', Whitespace), ('/\\*.*?\\*/', Comment.Multiline), ('(#.*?)(\\n)', bygroups(Comment.Single, Whitespace))], 'multilineregex': [include('commentsandwhitespace'), ('//([gimuysd]+\\b|\\B)', String.Regex, '#pop'), ('/', String.Regex), ('[^/#]+', String.Regex)], 'slashstartsregex': [include('commentsandwhitespace'), ('//', String.Regex, ('#pop', 'multilineregex')), ('/(?! )(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gimuysd]+\\b|\\B)', String.Regex, '#pop'), ('/', Operator, '#pop'), default('#pop')], 'root': [('\\A(?=\\s|/)', Text, 'slashstartsregex'), include('commentsandwhitespace'), ('(?:\\([^()]+\\))?[ ]*[~-]{1,2}>|(?:\\(?[^()\\n]+\\)?)?[ ]*<[~-]{1,2}', Name.Function), ('\\+\\+|&&|(?<![.$])\\b(?:and|x?or|is|isnt|not)\\b|\\?|:|=|\\|\\||\\\\(?=\\n)|(<<|>>>?|==?|!=?|~(?!\\~?>)|-(?!\\-?>)|<(?!\\[)|(?<!\\])>|[+*`%&|^/])=?', Operator, 'slashstartsregex'), ('[{(\\[;,]', Punctuation, 'slashstartsregex'), ('[})\\].]', Punctuation), ('(?<![.$])(for|own|in|of|while|until|loop|break|return|continue|switch|when|then|if|unless|else|throw|try|catch|finally|new|delete|typeof|instanceof|super|extends|this|class|by|const|var|to|til)\\b', Keyword, 'slashstartsregex'), ('(?<![.$])(true|false|yes|no|on|off|null|NaN|Infinity|undefined|void)\\b', Keyword.Constant), ('(Array|Boolean|Date|Error|Function|Math|Number|Object|RegExp|String|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|eval|isFinite|isNaN|parseFloat|parseInt|document|window|globalThis|Symbol|Symbol|BigInt)\\b', Name.Builtin), ('([$a-zA-Z_][\\w.\\-:$]*)(\\s*)([:=])(\\s+)', bygroups(Name.Variable, Whitespace, Operator, Whitespace), 'slashstartsregex'), ('(@[$a-zA-Z_][\\w.\\-:$]*)(\\s*)([:=])(\\s+)', bygroups(Name.Variable.Instance, Whitespace, Operator, Whitespace), 'slashstartsregex'), ('@', Name.Other, 'slashstartsregex'), ('@?[$a-zA-Z_][\\w-]*', Name.Other, 'slashstartsregex'), ('[0-9]+\\.[0-9]+([eE][0-9]+)?[fd]?(?:[a-zA-Z_]+)?', Number.Float), ('[0-9]+(~[0-9a-z]+)?(?:[a-zA-Z_]+)?', Number.Integer), ('"""', String, 'tdqs'), ("'''", String, 'tsqs'), ('"', String, 'dqs'), ("'", String, 'sqs'), ('\\\\\\S+', String), ('<\\[.*?\\]>', String)], 'strings': [('[^#\\\\\\\'"]+', String)], 'interpoling_string': [('\\}', String.Interpol, '#pop'), include('root')], 'dqs': [('"', String, '#pop'), ("\\\\.|\\'", String), ('#\\{', String.Interpol, 'interpoling_string'), ('#', String), include('strings')], 'sqs': [("'", String, '#pop'), ('#|\\\\.|"', String), include('strings')], 'tdqs': [('"""', String, '#pop'), ('\\\\.|\\\'|"', String), ('#\\{', String.Interpol, 'interpoling_string'), ('#', String), include('strings')], 'tsqs': [("'''", String, '#pop'), ('#|\\\\.|\\\'|"', String), include('strings')]}
  }

  class DartLexer {
      + name = 'Dart'
      + url = 'http://dart.dev/'
      + aliases = ['dart']
      + filenames = ['*.dart']
      + mimetypes = ['text/x-dart']
      + version_added = '1.5'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [include('string_literal'), ('#!(.*?)$', Comment.Preproc), ('\\b(import|export)\\b', Keyword, 'import_decl'), ('\\b(library|source|part of|part)\\b', Keyword), ('[^\\S\\n]+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/\\*.*?\\*/', Comment.Multiline), ('\\b(class|extension|mixin)\\b(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'class'), ('\\b(as|assert|break|case|catch|const|continue|default|do|else|finally|for|if|in|is|new|rethrow|return|super|switch|this|throw|try|while)\\b', Keyword), ('\\b(abstract|async|await|const|covariant|extends|external|factory|final|get|implements|late|native|on|operator|required|set|static|sync|typedef|var|with|yield)\\b', Keyword.Declaration), ('\\b(bool|double|dynamic|int|num|Function|Never|Null|Object|String|void)\\b', Keyword.Type), ('\\b(false|null|true)\\b', Keyword.Constant), ('[~!%^&*+=|?:<>/-]|as\\b', Operator), ('@[a-zA-Z_$]\\w*', Name.Decorator), ('[a-zA-Z_$]\\w*:', Name.Label), ('[a-zA-Z_$]\\w*', Name), ('[(){}\\[\\],.;]', Punctuation), ('0[xX][0-9a-fA-F]+', Number.Hex), ('\\d+(\\.\\d*)?([eE][+-]?\\d+)?', Number), ('\\.\\d+([eE][+-]?\\d+)?', Number), ('\\n', Whitespace)], 'class': [('[a-zA-Z_$]\\w*', Name.Class, '#pop')], 'import_decl': [include('string_literal'), ('\\s+', Whitespace), ('\\b(as|deferred|show|hide)\\b', Keyword), ('[a-zA-Z_$]\\w*', Name), ('\\,', Punctuation), ('\\;', Punctuation, '#pop')], 'string_literal': [('r"""([\\w\\W]*?)"""', String.Double), ("r'''([\\w\\W]*?)'''", String.Single), ('r"(.*?)"', String.Double), ("r'(.*?)'", String.Single), ('"""', String.Double, 'string_double_multiline'), ("'''", String.Single, 'string_single_multiline'), ('"', String.Double, 'string_double'), ("'", String.Single, 'string_single')], 'string_common': [('\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]*\\}|[a-z\'\\"$\\\\])', String.Escape), ('(\\$)([a-zA-Z_]\\w*)', bygroups(String.Interpol, Name)), ('(\\$\\{)(.*?)(\\})', bygroups(String.Interpol, using(this), String.Interpol))], 'string_double': [('"', String.Double, '#pop'), ('[^"$\\\\\\n]+', String.Double), include('string_common'), ('\\$+', String.Double)], 'string_double_multiline': [('"""', String.Double, '#pop'), ('[^"$\\\\]+', String.Double), include('string_common'), ('(\\$|\\")+', String.Double)], 'string_single': [("'", String.Single, '#pop'), ("[^'$\\\\\\n]+", String.Single), include('string_common'), ('\\$+', String.Single)], 'string_single_multiline': [("'''", String.Single, '#pop'), ("[^\\'$\\\\]+", String.Single), include('string_common'), ("(\\$|\\')+", String.Single)]}
  }

  class LassoLexer {
      + name = 'Lasso'
      + aliases = ['lasso', 'lassoscript']
      + filenames = ['*.lasso', '*.lasso[89]']
      + version_added = '1.6'
      + alias_filenames = ['*.incl', '*.inc', '*.las']
      + mimetypes = ['text/x-lasso']
      + url = 'https://www.lassosoft.com'
      + flags = re.IGNORECASE | re.DOTALL | re.MULTILINE
      + tokens = {'root': [('^#![ \\S]+lasso9\\b', Comment.Preproc, 'lasso'), ('(?=\\[|<)', Other, 'delimiters'), ('\\s+', Whitespace), default(('delimiters', 'lassofile'))], 'delimiters': [('\\[no_square_brackets\\]', Comment.Preproc, 'nosquarebrackets'), ('\\[noprocess\\]', Comment.Preproc, 'noprocess'), ('\\[', Comment.Preproc, 'squarebrackets'), ('<\\?(lasso(script)?|=)', Comment.Preproc, 'anglebrackets'), ('<(!--.*?-->)?', Other), ('[^[<]+', Other)], 'nosquarebrackets': [('\\[noprocess\\]', Comment.Preproc, 'noprocess'), ('\\[', Other), ('<\\?(lasso(script)?|=)', Comment.Preproc, 'anglebrackets'), ('<(!--.*?-->)?', Other), ('[^[<]+', Other)], 'noprocess': [('\\[/noprocess\\]', Comment.Preproc, '#pop'), ('\\[', Other), ('[^[]', Other)], 'squarebrackets': [('\\]', Comment.Preproc, '#pop'), include('lasso')], 'anglebrackets': [('\\?>', Comment.Preproc, '#pop'), include('lasso')], 'lassofile': [('\\]|\\?>', Comment.Preproc, '#pop'), include('lasso')], 'whitespacecomments': [('\\s+', Whitespace), ('(//.*?)(\\s*)$', bygroups(Comment.Single, Whitespace)), ('/\\*\\*!.*?\\*/', String.Doc), ('/\\*.*?\\*/', Comment.Multiline)], 'lasso': [include('whitespacecomments'), ('\\d*\\.\\d+(e[+-]?\\d+)?', Number.Float), ('0x[\\da-f]+', Number.Hex), ('\\d+', Number.Integer), ('(infinity|NaN)\\b', Number), ("'", String.Single, 'singlestring'), ('"', String.Double, 'doublestring'), ('`[^`]*`', String.Backtick), ('\\$[a-z_][\\w.]*', Name.Variable), ('#([a-z_][\\w.]*|\\d+\\b)', Name.Variable.Instance), ("(\\.)(\\s*)('[a-z_][\\w.]*')", bygroups(Name.Builtin.Pseudo, Whitespace, Name.Variable.Class)), ("(self)(\\s*)(->)(\\s*)('[a-z_][\\w.]*')", bygroups(Name.Builtin.Pseudo, Whitespace, Operator, Whitespace, Name.Variable.Class)), ('(\\.\\.?)(\\s*)([a-z_][\\w.]*(=(?!=))?)', bygroups(Name.Builtin.Pseudo, Whitespace, Name.Other.Member)), ('(->\\\\?|&)(\\s*)([a-z_][\\w.]*(=(?!=))?)', bygroups(Operator, Whitespace, Name.Other.Member)), ('(?<!->)(self|inherited|currentcapture|givenblock)\\b', Name.Builtin.Pseudo), ('-(?!infinity)[a-z_][\\w.]*', Name.Attribute), ('(::)(\\s*)([a-z_][\\w.]*)', bygroups(Punctuation, Whitespace, Name.Label)), ('(error_(code|msg)_\\w+|Error_AddError|Error_ColumnRestriction|Error_DatabaseConnectionUnavailable|Error_DatabaseTimeout|Error_DeleteError|Error_FieldRestriction|Error_FileNotFound|Error_InvalidDatabase|Error_InvalidPassword|Error_InvalidUsername|Error_ModuleNotFound|Error_NoError|Error_NoPermission|Error_OutOfMemory|Error_ReqColumnMissing|Error_ReqFieldMissing|Error_RequiredColumnMissing|Error_RequiredFieldMissing|Error_UpdateError)\\b', Name.Exception), ('(define)(\\s+)([a-z_][\\w.]*)(\\s*)(=>)(\\s*)(type|trait|thread)\\b', bygroups(Keyword.Declaration, Whitespace, Name.Class, Whitespace, Operator, Whitespace, Keyword)), ('(define)(\\s+)([a-z_][\\w.]*)(\\s*)(->)(\\s*)([a-z_][\\w.]*=?|[-+*/%])', bygroups(Keyword.Declaration, Whitespace, Name.Class, Whitespace, Operator, Whitespace, Name.Function), 'signature'), ('(define)(\\s+)([a-z_][\\w.]*)', bygroups(Keyword.Declaration, Whitespace, Name.Function), 'signature'), ('(public|protected|private|provide)(\\s+)(([a-z_][\\w.]*=?|[-+*/%])(?=\\s*\\())', bygroups(Keyword, Whitespace, Name.Function), 'signature'), ('(public|protected|private|provide)(\\s+)([a-z_][\\w.]*)', bygroups(Keyword, Whitespace, Name.Function)), ('(true|false|none|minimal|full|all|void)\\b', Keyword.Constant), ('(local|var|variable|global|data(?=\\s))\\b', Keyword.Declaration), ('(array|date|decimal|duration|integer|map|pair|string|tag|xml|null|boolean|bytes|keyword|list|locale|queue|set|stack|staticarray)\\b', Keyword.Type), ('([a-z_][\\w.]*)(\\s+)(in)\\b', bygroups(Name, Whitespace, Keyword)), ('(let|into)(\\s+)([a-z_][\\w.]*)', bygroups(Keyword, Whitespace, Name)), ('require\\b', Keyword, 'requiresection'), ('(/?)(Namespace_Using)\\b', bygroups(Punctuation, Keyword.Namespace)), ('(/?)(Cache|Database_Names|Database_SchemaNames|Database_TableNames|Define_Tag|Define_Type|Email_Batch|Encode_Set|HTML_Comment|Handle|Handle_Error|Header|If|Inline|Iterate|LJAX_Target|Link|Link_CurrentAction|Link_CurrentGroup|Link_CurrentRecord|Link_Detail|Link_FirstGroup|Link_FirstRecord|Link_LastGroup|Link_LastRecord|Link_NextGroup|Link_NextRecord|Link_PrevGroup|Link_PrevRecord|Log|Loop|Output_None|Portal|Private|Protect|Records|Referer|Referrer|Repeating|ResultSet|Rows|Search_Args|Search_Arguments|Select|Sort_Args|Sort_Arguments|Thread_Atomic|Value_List|While|Abort|Case|Else|Fail_If|Fail_IfNot|Fail|If_Empty|If_False|If_Null|If_True|Loop_Abort|Loop_Continue|Loop_Count|Params|Params_Up|Return|Return_Value|Run_Children|SOAP_DefineTag|SOAP_LastRequest|SOAP_LastResponse|Tag_Name|ascending|average|by|define|descending|do|equals|frozen|group|handle_failure|import|in|into|join|let|match|max|min|on|order|parent|protected|provide|public|require|returnhome|skip|split_thread|sum|take|thread|to|trait|type|where|with|yield|yieldhome)\\b', bygroups(Punctuation, Keyword)), (',', Punctuation, 'commamember'), ('(and|or|not)\\b', Operator.Word), ('([a-z_][\\w.]*)(\\s*)(::)(\\s*)([a-z_][\\w.]*)?(\\s*=(?!=))', bygroups(Name, Whitespace, Punctuation, Whitespace, Name.Label, Operator)), ('(/?)([\\w.]+)', bygroups(Punctuation, Name.Other)), ('(=)(n?bw|n?ew|n?cn|lte?|gte?|n?eq|n?rx|ft)\\b', bygroups(Operator, Operator.Word)), (':=|[-+*/%=<>&|!?\\\\]+', Operator), ('[{}():;,@^]', Punctuation)], 'singlestring': [("'", String.Single, '#pop'), ("[^'\\\\]+", String.Single), include('escape'), ('\\\\', String.Single)], 'doublestring': [('"', String.Double, '#pop'), ('[^"\\\\]+', String.Double), include('escape'), ('\\\\', String.Double)], 'escape': [('\\\\(U[\\da-f]{8}|u[\\da-f]{4}|x[\\da-f]{1,2}|[0-7]{1,3}|:[^:\\n\\r]+:|[abefnrtv?"\\\'\\\\]|$)', String.Escape)], 'signature': [('=>', Operator, '#pop'), ('\\)', Punctuation, '#pop'), ('[(,]', Punctuation, 'parameter'), include('lasso')], 'parameter': [('\\)', Punctuation, '#pop'), ('-?[a-z_][\\w.]*', Name.Attribute, '#pop'), ('\\.\\.\\.', Name.Builtin.Pseudo), include('lasso')], 'requiresection': [('(([a-z_][\\w.]*=?|[-+*/%])(?=\\s*\\())', Name, 'requiresignature'), ('(([a-z_][\\w.]*=?|[-+*/%])(?=(\\s*::\\s*[\\w.]+)?\\s*,))', Name), ('[a-z_][\\w.]*=?|[-+*/%]', Name, '#pop'), ('(::)(\\s*)([a-z_][\\w.]*)', bygroups(Punctuation, Whitespace, Name.Label)), (',', Punctuation), include('whitespacecomments')], 'requiresignature': [('(\\)(?=(\\s*::\\s*[\\w.]+)?\\s*,))', Punctuation, '#pop'), ('\\)', Punctuation, '#pop:2'), ('-?[a-z_][\\w.]*', Name.Attribute), ('(::)(\\s*)([a-z_][\\w.]*)', bygroups(Punctuation, Whitespace, Name.Label)), ('\\.\\.\\.', Name.Builtin.Pseudo), ('[(,]', Punctuation), include('whitespacecomments')], 'commamember': [('(([a-z_][\\w.]*=?|[-+*/%])(?=\\s*(\\(([^()]*\\([^()]*\\))*[^)]*\\)\\s*)?(::[\\w.\\s]+)?=>))', Name.Function, 'signature'), include('whitespacecomments'), default('#pop')]}
  --
      - __init__()
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class ObjectiveJLexer {
      + name = 'Objective-J'
      + aliases = ['objective-j', 'objectivej', 'obj-j', 'objj']
      + filenames = ['*.j']
      + mimetypes = ['text/x-objective-j']
      + url = 'https://www.cappuccino.dev/learn/objective-j.html'
      + version_added = '1.3'
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'root': [include('whitespace'), ('^(' + _ws + '[+-]' + _ws + ')([(a-zA-Z_].*?[^(])(' + _ws + '\\{)', bygroups(using(this), using(this, state='function_signature'), using(this))), ('(@interface|@implementation)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), ('(@class|@protocol)(\\s*)', bygroups(Keyword, Whitespace), 'forward_classname'), ('(\\s*)(@end)(\\s*)', bygroups(Whitespace, Keyword, Whitespace)), include('statements'), ('[{()}]', Punctuation), (';', Punctuation)], 'whitespace': [('(@import)(\\s+)("(?:\\\\\\\\|\\\\"|[^"])*")', bygroups(Comment.Preproc, Whitespace, String.Double)), ('(@import)(\\s+)(<(?:\\\\\\\\|\\\\>|[^>])*>)', bygroups(Comment.Preproc, Whitespace, String.Double)), ('(#(?:include|import))(\\s+)("(?:\\\\\\\\|\\\\"|[^"])*")', bygroups(Comment.Preproc, Whitespace, String.Double)), ('(#(?:include|import))(\\s+)(<(?:\\\\\\\\|\\\\>|[^>])*>)', bygroups(Comment.Preproc, Whitespace, String.Double)), ('#if\\s+0', Comment.Preproc, 'if0'), ('#', Comment.Preproc, 'macro'), ('\\s+', Whitespace), ('(\\\\)(\\n)', bygroups(String.Escape, Whitespace)), ('//(\\n|(.|\\n)*?[^\\\\]\\n)', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ('<!--', Comment)], 'slashstartsregex': [include('whitespace'), ('/(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gim]+\\b|\\B)', String.Regex, '#pop'), ('(?=/)', Text, ('#pop', 'badregex')), default('#pop')], 'badregex': [('\\n', Whitespace, '#pop')], 'statements': [('(L|@)?"', String, 'string'), ("(L|@)?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'", String.Char), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[lL]?', Number.Float), ('(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float), ('0x[0-9a-fA-F]+[Ll]?', Number.Hex), ('0[0-7]+[Ll]?', Number.Oct), ('\\d+[Ll]?', Number.Integer), ('^(?=\\s|/|<!--)', Text, 'slashstartsregex'), ('\\+\\+|--|~|&&|\\?|:|\\|\\||\\\\(?=\\n)|(<<|>>>?|==?|!=?|[-<>+*%&|^/])=?', Operator, 'slashstartsregex'), ('[{(\\[;,]', Punctuation, 'slashstartsregex'), ('[})\\].]', Punctuation), ('(for|in|while|do|break|return|continue|switch|case|default|if|else|throw|try|catch|finally|new|delete|typeof|instanceof|void|prototype|__proto__)\\b', Keyword, 'slashstartsregex'), ('(var|with|function)\\b', Keyword.Declaration, 'slashstartsregex'), ('(@selector|@private|@protected|@public|@encode|@synchronized|@try|@throw|@catch|@finally|@end|@property|@synthesize|@dynamic|@for|@accessors|new)\\b', Keyword), ('(int|long|float|short|double|char|unsigned|signed|void|id|BOOL|bool|boolean|IBOutlet|IBAction|SEL|@outlet|@action)\\b', Keyword.Type), ('(self|super)\\b', Name.Builtin), ('(TRUE|YES|FALSE|NO|Nil|nil|NULL)\\b', Keyword.Constant), ('(true|false|null|NaN|Infinity|undefined)\\b', Keyword.Constant), ('(ABS|ASIN|ACOS|ATAN|ATAN2|SIN|COS|TAN|EXP|POW|CEIL|FLOOR|ROUND|MIN|MAX|RAND|SQRT|E|LN2|LN10|LOG2E|LOG10E|PI|PI2|PI_2|SQRT1_2|SQRT2)\\b', Keyword.Constant), ('(Array|Boolean|Date|Error|Function|Math|Number|Object|RegExp|String|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|Error|eval|isFinite|isNaN|parseFloat|parseInt|document|this|window|globalThis|Symbol)\\b', Name.Builtin), ('([$a-zA-Z_]\\w*)(' + _ws + ')(?=\\()', bygroups(Name.Function, using(this))), ('[$a-zA-Z_]\\w*', Name)], 'classname': [('([a-zA-Z_]\\w*)(' + _ws + ':' + _ws + ')([a-zA-Z_]\\w*)?', bygroups(Name.Class, using(this), Name.Class), '#pop'), ('([a-zA-Z_]\\w*)(' + _ws + '\\()([a-zA-Z_]\\w*)(\\))', bygroups(Name.Class, using(this), Name.Label, Text), '#pop'), ('([a-zA-Z_]\\w*)', Name.Class, '#pop')], 'forward_classname': [('([a-zA-Z_]\\w*)(\\s*)(,)(\\s*)', bygroups(Name.Class, Whitespace, Text, Whitespace), '#push'), ('([a-zA-Z_]\\w*)(\\s*)(;?)', bygroups(Name.Class, Whitespace, Text), '#pop')], 'function_signature': [include('whitespace'), ('(\\(' + _ws + ')([a-zA-Z_]\\w+)(' + _ws + '\\)' + _ws + ')([$a-zA-Z_]\\w+' + _ws + ':)', bygroups(using(this), Keyword.Type, using(this), Name.Function), 'function_parameters'), ('(\\(' + _ws + ')([a-zA-Z_]\\w+)(' + _ws + '\\)' + _ws + ')([$a-zA-Z_]\\w+)', bygroups(using(this), Keyword.Type, using(this), Name.Function), '#pop'), ('([$a-zA-Z_]\\w+' + _ws + ':)', bygroups(Name.Function), 'function_parameters'), ('([$a-zA-Z_]\\w+)', bygroups(Name.Function), '#pop'), default('#pop')], 'function_parameters': [include('whitespace'), ('(\\(' + _ws + ')([^)]+)(' + _ws + '\\)' + _ws + ')([$a-zA-Z_]\\w+)', bygroups(using(this), Keyword.Type, using(this), Text)), ('([$a-zA-Z_]\\w+' + _ws + ':)', Name.Function), ('(:)', Name.Function), ('(,' + _ws + '\\.\\.\\.)', using(this)), ('([$a-zA-Z_]\\w+)', Text)], 'expression': [('([$a-zA-Z_]\\w*)(\\()', bygroups(Name.Function, Punctuation)), ('(\\))', Punctuation, '#pop')], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('(\\\\)(\\n)', bygroups(String.Escape, Whitespace)), ('\\\\', String)], 'macro': [('[^/\\n]+', Comment.Preproc), ('/[*](.|\\n)*?[*]/', Comment.Multiline), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace), '#pop'), ('/', Comment.Preproc), ('(?<=\\\\)\\n', Whitespace), ('\\n', Whitespace, '#pop')], 'if0': [('^\\s*#if.*?(?<!\\\\)\\n', Comment.Preproc, '#push'), ('^\\s*#endif.*?(?<!\\\\)\\n', Comment.Preproc, '#pop'), ('(.*?)(\\n)', bygroups(Comment, Whitespace))]}
  --
      + analyse_text(text)
  }

  class CoffeeScriptLexer {
      + name = 'CoffeeScript'
      + url = 'http://coffeescript.org'
      + aliases = ['coffeescript', 'coffee-script', 'coffee']
      + filenames = ['*.coffee']
      + mimetypes = ['text/coffeescript']
      + version_added = '1.3'
      + flags = re.DOTALL
      + tokens = {'commentsandwhitespace': [('\\s+', Whitespace), ('###[^#].*?###', Comment.Multiline), ('(#(?!##[^#]).*?)(\\n)', bygroups(Comment.Single, Whitespace))], 'multilineregex': [('[^/#]+', String.Regex), ('///([gimuysd]+\\b|\\B)', String.Regex, '#pop'), ('#\\{', String.Interpol, 'interpoling_string'), ('[/#]', String.Regex)], 'slashstartsregex': [include('commentsandwhitespace'), ('///', String.Regex, ('#pop', 'multilineregex')), ('/(?! )(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gimuysd]+\\b|\\B)', String.Regex, '#pop'), ('/', Operator, '#pop'), default('#pop')], 'root': [include('commentsandwhitespace'), ('\\A(?=\\s|/)', Text, 'slashstartsregex'), (_operator_re, Operator, 'slashstartsregex'), ('(?:\\([^()]*\\))?\\s*[=-]>', Name.Function, 'slashstartsregex'), ('[{(\\[;,]', Punctuation, 'slashstartsregex'), ('[})\\].]', Punctuation), ('(?<![.$])(for|own|in|of|while|until|loop|break|return|continue|switch|when|then|if|unless|else|throw|try|catch|finally|new|delete|typeof|instanceof|super|extends|this|class|by)\\b', Keyword, 'slashstartsregex'), ('(?<![.$])(true|false|yes|no|on|off|null|NaN|Infinity|undefined)\\b', Keyword.Constant), ('(Array|Boolean|Date|Error|Function|Math|Number|Object|RegExp|String|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|eval|isFinite|isNaN|parseFloat|parseInt|document|window|globalThis|Symbol)\\b', Name.Builtin), ('([$a-zA-Z_][\\w.:$]*)(\\s*)([:=])(\\s+)', bygroups(Name.Variable, Whitespace, Operator, Whitespace), 'slashstartsregex'), ('(@[$a-zA-Z_][\\w.:$]*)(\\s*)([:=])(\\s+)', bygroups(Name.Variable.Instance, Whitespace, Operator, Whitespace), 'slashstartsregex'), ('@', Name.Other, 'slashstartsregex'), ('@?[$a-zA-Z_][\\w$]*', Name.Other), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ('"""', String, 'tdqs'), ("'''", String, 'tsqs'), ('"', String, 'dqs'), ("'", String, 'sqs')], 'strings': [('[^#\\\\\\\'"]+', String)], 'interpoling_string': [('\\}', String.Interpol, '#pop'), include('root')], 'dqs': [('"', String, '#pop'), ("\\\\.|\\'", String), ('#\\{', String.Interpol, 'interpoling_string'), ('#', String), include('strings')], 'sqs': [("'", String, '#pop'), ('#|\\\\.|"', String), include('strings')], 'tdqs': [('"""', String, '#pop'), ('\\\\.|\\\'|"', String), ('#\\{', String.Interpol, 'interpoling_string'), ('#', String), include('strings')], 'tsqs': [("'''", String, '#pop'), ('#|\\\\.|\\\'|"', String), include('strings')]}
  }

  class MaskLexer {
      + name = 'Mask'
      + url = 'https://github.com/atmajs/MaskJS'
      + aliases = ['mask']
      + filenames = ['*.mask']
      + mimetypes = ['text/x-mask']
      + version_added = '2.0'
      + flags = re.MULTILINE | re.IGNORECASE | re.DOTALL
      + tokens = {'root': [('\\s+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/\\*.*?\\*/', Comment.Multiline), ('[{};>]', Punctuation), ("'''", String, 'string-trpl-single'), ('"""', String, 'string-trpl-double'), ("'", String, 'string-single'), ('"', String, 'string-double'), ('([\\w-]+)', Name.Tag, 'node'), ('([^.#;{>\\s]+)', Name.Class, 'node'), ('(#[\\w-]+)', Name.Function, 'node'), ('(\\.[\\w-]+)', Name.Variable.Class, 'node')], 'string-base': [('\\\\.', String.Escape), ('~\\[', String.Interpol, 'interpolation'), ('.', String.Single)], 'string-single': [("'", String.Single, '#pop'), include('string-base')], 'string-double': [('"', String.Single, '#pop'), include('string-base')], 'string-trpl-single': [("'''", String.Single, '#pop'), include('string-base')], 'string-trpl-double': [('"""', String.Single, '#pop'), include('string-base')], 'interpolation': [('\\]', String.Interpol, '#pop'), ('(\\s*)(:)', bygroups(Whitespace, String.Interpol), 'expression'), ('(\\s*)(\\w+)(:)', bygroups(Whitespace, Name.Other, Punctuation)), ('[^\\]]+', String.Interpol)], 'expression': [('[^\\]]+', using(JavascriptLexer), '#pop')], 'node': [('\\s+', Whitespace), ('\\.', Name.Variable.Class, 'node-class'), ('\\#', Name.Function, 'node-id'), ('(style)([ \\t]*)(=)', bygroups(Name.Attribute, Whitespace, Operator), 'node-attr-style-value'), ('([\\w:-]+)([ \\t]*)(=)', bygroups(Name.Attribute, Whitespace, Operator), 'node-attr-value'), ('[\\w:-]+', Name.Attribute), ('[>{;]', Punctuation, '#pop')], 'node-class': [('[\\w-]+', Name.Variable.Class), ('~\\[', String.Interpol, 'interpolation'), default('#pop')], 'node-id': [('[\\w-]+', Name.Function), ('~\\[', String.Interpol, 'interpolation'), default('#pop')], 'node-attr-value': [('\\s+', Whitespace), ('\\w+', Name.Variable, '#pop'), ("'", String, 'string-single-pop2'), ('"', String, 'string-double-pop2'), default('#pop')], 'node-attr-style-value': [('\\s+', Whitespace), ("'", String.Single, 'css-single-end'), ('"', String.Single, 'css-double-end'), include('node-attr-value')], 'css-base': [('\\s+', Whitespace), (';', Punctuation), ('[\\w\\-]+\\s*:', Name.Builtin)], 'css-single-end': [include('css-base'), ("'", String.Single, '#pop:2'), ("[^;']+", Name.Entity)], 'css-double-end': [include('css-base'), ('"', String.Single, '#pop:2'), ('[^;"]+', Name.Entity)], 'string-single-pop2': [("'", String.Single, '#pop:2'), include('string-base')], 'string-double-pop2': [('"', String.Single, '#pop:2'), include('string-base')]}
  }

  class EarlGreyLexer {
      + name = 'Earl Grey'
      + aliases = ['earl-grey', 'earlgrey', 'eg']
      + filenames = ['*.eg']
      + mimetypes = ['text/x-earl-grey']
      + url = 'https://github.com/breuleux/earl-grey'
      + version_added = ''
      + tokens = {'root': [('\\n', Whitespace), include('control'), ('[^\\S\\n]+', Text), ('(;;.*)(\\n)', bygroups(Comment, Whitespace)), ('[\\[\\]{}:(),;]', Punctuation), ('(\\\\)(\\n)', bygroups(String.Escape, Whitespace)), ('\\\\', Text), include('errors'), (words(('with', 'where', 'when', 'and', 'not', 'or', 'in', 'as', 'of', 'is'), prefix='(?<=\\s|\\[)', suffix='(?![\\w$\\-])'), Operator.Word), ('[*@]?->', Name.Function), ('[+\\-*/~^<>%&|?!@#.]*=', Operator.Word), ('\\.{2,3}', Operator.Word), ('([+*/~^<>&|?!]+)|([#\\-](?=\\s))|@@+(?=\\s)|=+', Operator), ('(?<![\\w$\\-])(var|let)(?:[^\\w$])', Keyword.Declaration), include('keywords'), include('builtins'), include('assignment'), ('(?x)\n                (?:()([a-zA-Z$_](?:[\\w$\\-]*[\\w$])?)|\n                   (?<=[\\s{\\[(])(\\.)([a-zA-Z$_](?:[\\w$\\-]*[\\w$])?))\n                (?=.*%)', bygroups(Punctuation, Name.Tag, Punctuation, Name.Class.Start), 'dbs'), ('[rR]?`', String.Backtick, 'bt'), ('[rR]?```', String.Backtick, 'tbt'), ('(?<=[\\s\\[{(,;])\\.([a-zA-Z$_](?:[\\w$\\-]*[\\w$])?)(?=[\\s\\]}),;])', String.Symbol), include('nested'), ('(?:[rR]|[rR]\\.[gmi]{1,3})?"', String, combined('stringescape', 'dqs')), ("(?:[rR]|[rR]\\.[gmi]{1,3})?\\'", String, combined('stringescape', 'sqs')), ('"""', String, combined('stringescape', 'tdqs')), include('tuple'), include('import_paths'), include('name'), include('numbers')], 'dbs': [('(\\.)([a-zA-Z$_](?:[\\w$\\-]*[\\w$])?)(?=[.\\[\\s])', bygroups(Punctuation, Name.Class.DBS)), ('(\\[)([\\^#][a-zA-Z$_](?:[\\w$\\-]*[\\w$])?)(\\])', bygroups(Punctuation, Name.Entity.DBS, Punctuation)), ('\\s+', Whitespace), ('%', Operator.DBS, '#pop')], 'import_paths': [('(?<=[\\s:;,])(\\.{1,3}(?:[\\w\\-]*/)*)(\\w(?:[\\w\\-]*\\w)*)(?=[\\s;,])', bygroups(Text.Whitespace, Text))], 'assignment': [('(\\.)?([a-zA-Z$_](?:[\\w$\\-]*[\\w$])?)(?=\\s+[+\\-*/~^<>%&|?!@#.]*\\=\\s)', bygroups(Punctuation, Name.Variable))], 'errors': [(words(('Error', 'TypeError', 'ReferenceError'), prefix='(?<![\\w\\-$.])', suffix='(?![\\w\\-$.])'), Name.Exception), ('(?x)\n                (?<![\\w$])\n                E\\.[\\w$](?:[\\w$\\-]*[\\w$])?\n                (?:\\.[\\w$](?:[\\w$\\-]*[\\w$])?)*\n                (?=[({\\[?!\\s])', Name.Exception)], 'control': [('(?x)\n                ([a-zA-Z$_](?:[\\w$-]*[\\w$])?)\n                (?!\\n)\\s+\n                (?!and|as|each\\*|each|in|is|mod|of|or|when|where|with)\n                (?=(?:[+\\-*/~^<>%&|?!@#.])?[a-zA-Z$_](?:[\\w$-]*[\\w$])?)', Keyword.Control), ('([a-zA-Z$_](?:[\\w$-]*[\\w$])?)(?!\\n)(\\s+)(?=[\\\'"\\d{\\[(])', bygroups(Keyword.Control, Whitespace)), ('(?x)\n                (?:\n                    (?<=[%=])|\n                    (?<=[=\\-]>)|\n                    (?<=with|each|with)|\n                    (?<=each\\*|where)\n                )(\\s+)\n                ([a-zA-Z$_](?:[\\w$-]*[\\w$])?)(:)', bygroups(Whitespace, Keyword.Control, Punctuation)), ('(?x)\n                (?<![+\\-*/~^<>%&|?!@#.])(\\s+)\n                ([a-zA-Z$_](?:[\\w$-]*[\\w$])?)(:)', bygroups(Whitespace, Keyword.Control, Punctuation))], 'nested': [('(?x)\n                (?<=[\\w$\\]})])(\\.)\n                ([a-zA-Z$_](?:[\\w$-]*[\\w$])?)\n                (?=\\s+with(?:\\s|\\n))', bygroups(Punctuation, Name.Function)), ('(?x)\n                (?<!\\s)(\\.)\n                ([a-zA-Z$_](?:[\\w$-]*[\\w$])?)\n                (?=[}\\]).,;:\\s])', bygroups(Punctuation, Name.Field)), ('(?x)\n                (?<=[\\w$\\]})])(\\.)\n                ([a-zA-Z$_](?:[\\w$-]*[\\w$])?)\n                (?=[\\[{(:])', bygroups(Punctuation, Name.Function))], 'keywords': [(words(('each', 'each*', 'mod', 'await', 'break', 'chain', 'continue', 'elif', 'expr-value', 'if', 'match', 'return', 'yield', 'pass', 'else', 'require', 'var', 'let', 'async', 'method', 'gen'), prefix='(?<![\\w\\-$.])', suffix='(?![\\w\\-$.])'), Keyword.Pseudo), (words(('this', 'self', '@'), prefix='(?<![\\w\\-$.])', suffix='(?![\\w\\-$])'), Keyword.Constant), (words(('Function', 'Object', 'Array', 'String', 'Number', 'Boolean', 'ErrorFactory', 'ENode', 'Promise'), prefix='(?<![\\w\\-$.])', suffix='(?![\\w\\-$])'), Keyword.Type)], 'builtins': [(words(('send', 'object', 'keys', 'items', 'enumerate', 'zip', 'product', 'neighbours', 'predicate', 'equal', 'nequal', 'contains', 'repr', 'clone', 'range', 'getChecker', 'get-checker', 'getProperty', 'get-property', 'getProjector', 'get-projector', 'consume', 'take', 'promisify', 'spawn', 'constructor'), prefix='(?<![\\w\\-#.])', suffix='(?![\\w\\-.])'), Name.Builtin), (words(('true', 'false', 'null', 'undefined'), prefix='(?<![\\w\\-$.])', suffix='(?![\\w\\-$.])'), Name.Constant)], 'name': [('@([a-zA-Z$_](?:[\\w$-]*[\\w$])?)', Name.Variable.Instance), ('([a-zA-Z$_](?:[\\w$-]*[\\w$])?)(\\+\\+|\\-\\-)?', bygroups(Name.Symbol, Operator.Word))], 'tuple': [('#[a-zA-Z_][\\w\\-]*(?=[\\s{(,;])', Name.Namespace)], 'interpoling_string': [('\\}', String.Interpol, '#pop'), include('root')], 'stringescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'strings': [('[^\\\\\\\'"]', String), ('[\\\'"\\\\]', String), ('\\n', String)], 'dqs': [('"', String, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('strings')], 'sqs': [("'", String, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), ('\\{', String.Interpol, 'interpoling_string'), include('strings')], 'tdqs': [('"""', String, '#pop'), include('strings')], 'bt': [('`', String.Backtick, '#pop'), ('(?<!`)\\n', String.Backtick), ('\\^=?', String.Escape), ('.+', String.Backtick)], 'tbt': [('```', String.Backtick, '#pop'), ('\\n', String.Backtick), ('\\^=?', String.Escape), ('[^`]+', String.Backtick)], 'numbers': [('\\d+\\.(?!\\.)\\d*([eE][+-]?[0-9]+)?', Number.Float), ('\\d+[eE][+-]?[0-9]+', Number.Float), ('8r[0-7]+', Number.Oct), ('2r[01]+', Number.Bin), ('16r[a-fA-F0-9]+', Number.Hex), ('([3-79]|[12][0-9]|3[0-6])r[a-zA-Z\\d]+(\\.[a-zA-Z\\d]+)?', Number.Radix), ('\\d+', Number.Integer)]}
  }

  class JuttleLexer {
      + name = 'Juttle'
      + url = 'http://juttle.github.io/'
      + aliases = ['juttle']
      + filenames = ['*.juttle']
      + mimetypes = ['application/juttle', 'application/x-juttle', 'text/x-juttle', 'text/juttle']
      + version_added = '2.2'
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'commentsandwhitespace': [('\\s+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/\\*.*?\\*/', Comment.Multiline)], 'slashstartsregex': [include('commentsandwhitespace'), ('/(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gimuysd]+\\b|\\B)', String.Regex, '#pop'), ('(?=/)', Text, ('#pop', 'badregex')), default('#pop')], 'badregex': [('\\n', Text, '#pop')], 'root': [('^(?=\\s|/)', Text, 'slashstartsregex'), include('commentsandwhitespace'), (':\\d{2}:\\d{2}:\\d{2}(\\.\\d*)?:', String.Moment), (':(now|beginning|end|forever|yesterday|today|tomorrow|(\\d+(\\.\\d*)?|\\.\\d+)(ms|[smhdwMy])?):', String.Moment), (':\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d*)?)?(Z|[+-]\\d{2}:\\d{2}|[+-]\\d{4})?:', String.Moment), (':((\\d+(\\.\\d*)?|\\.\\d+)[ ]+)?(millisecond|second|minute|hour|day|week|month|year)[s]?(([ ]+and[ ]+(\\d+[ ]+)?(millisecond|second|minute|hour|day|week|month|year)[s]?)|[ ]+(ago|from[ ]+now))*:', String.Moment), ('\\+\\+|--|~|&&|\\?|:|\\|\\||\\\\(?=\\n)|(==?|!=?|[-<>+*%&|^/])=?', Operator, 'slashstartsregex'), ('[{(\\[;,]', Punctuation, 'slashstartsregex'), ('[})\\].]', Punctuation), ('(import|return|continue|if|else)\\b', Keyword, 'slashstartsregex'), ('(var|const|function|reducer|sub|input)\\b', Keyword.Declaration, 'slashstartsregex'), ('(batch|emit|filter|head|join|keep|pace|pass|put|read|reduce|remove|sequence|skip|sort|split|tail|unbatch|uniq|view|write)\\b', Keyword.Reserved), ('(true|false|null|Infinity)\\b', Keyword.Constant), ('(Array|Date|Juttle|Math|Number|Object|RegExp|String)\\b', Name.Builtin), (JS_IDENT, Name.Other), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('[0-9]+', Number.Integer), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single)]}
  }

  class NodeConsoleLexer {
      + name = 'Node.js REPL console session'
      + aliases = ['nodejsrepl']
      + mimetypes = ['text/x-nodejsrepl']
      + url = 'https://nodejs.org'
      + version_added = ''
  --
      + get_tokens_unprocessed(text)
  }

  class JMESPathLexer {
      + name = 'JMESPath'
      + url = 'https://jmespath.org'
      + filenames = ['*.jp']
      + aliases = ['jmespath', 'jp']
      + version_added = ''
      + tokens = {'string': [("'(\\\\(.|\\n)|[^'\\\\])*'", String)], 'punctuation': [('(\\[\\?|[\\.\\*\\[\\],:\\(\\)\\{\\}\\|])', Punctuation)], 'ws': [(' |\\t|\\n|\\r', Whitespace)], 'dq-identifier': [('[^\\\\"]+', Name.Variable), ('\\\\"', Name.Variable), ('.', Punctuation, '#pop')], 'identifier': [('(&)?(")', bygroups(Name.Variable, Punctuation), 'dq-identifier'), ('(")?(&?[A-Za-z][A-Za-z0-9_-]*)(")?', bygroups(Punctuation, Name.Variable, Punctuation))], 'root': [include('ws'), include('string'), ('(==|!=|<=|>=|<|>|&&|\\|\\||!)', Operator), include('punctuation'), ('@', Name.Variable.Global), ('(&?[A-Za-z][A-Za-z0-9_]*)(\\()', bygroups(Name.Function, Punctuation)), ('(&)(\\()', bygroups(Name.Variable, Punctuation)), include('identifier'), ('-?\\d+', Number), ('`', Literal, 'literal')], 'literal': [include('ws'), include('string'), include('punctuation'), ('(false|true|null)\\b', Keyword.Constant), include('identifier'), ('-?\\d+\\.?\\d*([eE][-+]\\d+)?', Number), ('\\\\`', Literal), ('`', Literal, '#pop')]}
  }

  class JSLTLexer {
      + name = 'JSLT'
      + url = 'https://github.com/schibsted/jslt'
      + filenames = ['*.jslt']
      + aliases = ['jslt']
      + mimetypes = ['text/x-jslt']
      + version_added = '2.10'
      + tokens = {'root': [('[\\t\\n\\f\\r ]+', Whitespace), ('//.*(\\n|\\Z)', Comment.Single), ('-?(0|[1-9][0-9]*)', Number.Integer), ('-?(0|[1-9][0-9]*)(.[0-9]+a)?([Ee][+-]?[0-9]+)', Number.Float), ('"([^"\\\\]|\\\\.)*"', String.Double), ('[(),:\\[\\]{}]', Punctuation), ('(!=|[<=>]=?)', Operator), ('[*+/|-]', Operator), ('\\.', Operator), (words(('import',), suffix=_WORD_END), Keyword.Namespace, combined('import-path', 'whitespace')), (words(('as',), suffix=_WORD_END), Keyword.Namespace, combined('import-alias', 'whitespace')), (words(('let',), suffix=_WORD_END), Keyword.Declaration, combined('constant', 'whitespace')), (words(('def',), suffix=_WORD_END), Keyword.Declaration, combined('function', 'whitespace')), (words(('false', 'null', 'true'), suffix=_WORD_END), Keyword.Constant), (words(('else', 'for', 'if'), suffix=_WORD_END), Keyword), (words(('and', 'or'), suffix=_WORD_END), Operator.Word), (words(('all', 'any', 'array', 'boolean', 'capture', 'ceiling', 'contains', 'ends-with', 'error', 'flatten', 'floor', 'format-time', 'from-json', 'get-key', 'hash-int', 'index-of', 'is-array', 'is-boolean', 'is-decimal', 'is-integer', 'is-number', 'is-object', 'is-string', 'join', 'lowercase', 'max', 'min', 'mod', 'not', 'now', 'number', 'parse-time', 'parse-url', 'random', 'replace', 'round', 'sha256-hex', 'size', 'split', 'starts-with', 'string', 'sum', 'test', 'to-json', 'trim', 'uppercase', 'zip', 'zip-with-index', 'fallback'), suffix=_WORD_END), Name.Builtin), ('[A-Z_a-z][0-9A-Z_a-z-]*:[A-Z_a-z][0-9A-Z_a-z-]*', Name.Function), ('[A-Z_a-z][0-9A-Z_a-z-]*', Name), ('\\$[A-Z_a-z][0-9A-Z_a-z-]*', Name.Variable)], 'constant': [('[A-Z_a-z][0-9A-Z_a-z-]*', Name.Variable, 'root')], 'function': [('[A-Z_a-z][0-9A-Z_a-z-]*', Name.Function, combined('function-parameter-list', 'whitespace'))], 'function-parameter-list': [('\\(', Punctuation, combined('function-parameters', 'whitespace'))], 'function-parameters': [(',', Punctuation), ('\\)', Punctuation, 'root'), ('[A-Z_a-z][0-9A-Z_a-z-]*', Name.Variable)], 'import-path': [('"([^"]|\\\\.)*"', String.Symbol, 'root')], 'import-alias': [('[A-Z_a-z][0-9A-Z_a-z-]*', Name.Namespace, 'root')], 'string': [('"', String.Double, '#pop'), ('\\\\.', String.Escape)], 'whitespace': [('[\\t\\n\\f\\r ]+', Whitespace), ('//.*(\\n|\\Z)', Comment.Single)]}
  }

  class Json5Lexer {
      + name = 'JSON5'
      + aliases = ['json5']
      + filenames = ['*.json5']
      + url = 'https://json5.org'
      + version_added = '2.19'
      + tokens = {'_comments': [('(//|#).*\\n', Comment.Single), ('/\\*\\*([^/]|/(?!\\*))*\\*/', String.Doc), ('/\\*([^/]|/(?!\\*))*\\*/', Comment)], 'root': [include('_comments'), ("'", String, 'singlestring'), ('"', String, 'doublestring'), ('[+-]?0[xX][0-9a-fA-F]+', Number.Hex), ('[+-.]?[0-9]+[.]?[0-9]?([eE][-]?[0-9]+)?', Number.Float), ('\\{', Punctuation, 'object'), ('\\[', Punctuation, 'array'), (words(['false', 'Infinity', '+Infinity', '-Infinity', 'NaN', 'null', 'true'], suffix='\\b'), Keyword), ('\\s+', Whitespace), (':', Punctuation)], 'singlestring': string_rules("'"), 'doublestring': string_rules('"'), 'array': [(',', Punctuation), ('\\]', Punctuation, '#pop'), include('root')], 'object': [('\\s+', Whitespace), ('\\}', Punctuation, '#pop'), ('\\b([^:]+)', Name.Variable, 'object_value'), ('"', Name.Variable, 'double_field_name'), ("'", Name.Variable, 'single_field_name'), include('_comments')], 'double_field_name': quoted_field_name('"'), 'single_field_name': quoted_field_name("'"), 'object_value': [(',', Punctuation, '#pop'), ('\\}', Punctuation, '#pop:2'), include('root')]}
  }

  class JsonnetLexer {
      + name = 'Jsonnet'
      + aliases = ['jsonnet']
      + filenames = ['*.jsonnet', '*.libsonnet']
      + url = 'https://jsonnet.org'
      + version_added = ''
      + tokens = {'_comments': [('(//|#).*\\n', Comment.Single), ('/\\*\\*([^/]|/(?!\\*))*\\*/', String.Doc), ('/\\*([^/]|/(?!\\*))*\\*/', Comment)], 'root': [include('_comments'), ("@'.*'", String), ('@".*"', String), ("'", String, 'singlestring'), ('"', String, 'doublestring'), ('\\|\\|\\|(.|\\n)*\\|\\|\\|', String), ('[+-]?[0-9]+(.[0-9])?', Number.Float), ('[!$~+\\-&|^=<>*/%]', Operator), ('\\{', Punctuation, 'object'), ('\\[', Punctuation, 'array'), ('local\\b', Keyword, 'local_name'), ('assert\\b', Keyword, 'assert'), (words(['assert', 'else', 'error', 'false', 'for', 'if', 'import', 'importstr', 'in', 'null', 'tailstrict', 'then', 'self', 'super', 'true'], suffix='\\b'), Keyword), ('\\s+', Whitespace), ('function(?=\\()', Keyword, 'function_params'), ('std\\.' + jsonnet_function_token, Name.Builtin, 'function_args'), (jsonnet_function_token, Name.Function, 'function_args'), (jsonnet_token, Name.Variable), ('[\\.()]', Punctuation)], 'singlestring': string_rules("'"), 'doublestring': string_rules('"'), 'array': [(',', Punctuation), ('\\]', Punctuation, '#pop'), include('root')], 'local_name': [(jsonnet_function_token, Name.Function, 'function_params'), (jsonnet_token, Name.Variable), ('\\s+', Whitespace), ('(?==)', Whitespace, ('#pop', 'local_value'))], 'local_value': [('=', Operator), (';', Punctuation, '#pop'), include('root')], 'assert': [(':', Punctuation), (';', Punctuation, '#pop'), include('root')], 'function_params': [(jsonnet_token, Name.Variable), ('\\(', Punctuation), ('\\)', Punctuation, '#pop'), (',', Punctuation), ('\\s+', Whitespace), ('=', Operator, 'function_param_default')], 'function_args': [('\\(', Punctuation), ('\\)', Punctuation, '#pop'), (',', Punctuation), ('\\s+', Whitespace), include('root')], 'object': [('\\s+', Whitespace), ('local\\b', Keyword, 'object_local_name'), ('assert\\b', Keyword, 'object_assert'), ('\\[', Operator, 'field_name_expr'), (f'(?={jsonnet_token})', Text, 'field_name'), ('\\}', Punctuation, '#pop'), ('"', Name.Variable, 'double_field_name'), ("'", Name.Variable, 'single_field_name'), include('_comments')], 'field_name': [(jsonnet_function_token, Name.Function, ('field_separator', 'function_params')), (jsonnet_token, Name.Variable, 'field_separator')], 'double_field_name': quoted_field_name('"'), 'single_field_name': quoted_field_name("'"), 'field_name_expr': [('\\]', Operator, 'field_separator'), include('root')], 'function_param_default': [('(?=[,\\)])', Whitespace, '#pop'), include('root')], 'field_separator': [('\\s+', Whitespace), ('\\+?::?:?', Punctuation, ('#pop', '#pop', 'field_value')), include('_comments')], 'field_value': [(',', Punctuation, '#pop'), ('\\}', Punctuation, '#pop:2'), include('root')], 'object_assert': [(':', Punctuation), (',', Punctuation, '#pop'), include('root')], 'object_local_name': [(jsonnet_token, Name.Variable, ('#pop', 'object_local_value')), ('\\s+', Whitespace)], 'object_local_value': [('=', Operator), (',', Punctuation, '#pop'), ('\\}', Punctuation, '#pop:2'), include('root')]}
  }

  class JsxLexer {
      + name = 'JSX'
      + aliases = ['jsx', 'react']
      + filenames = ['*.jsx', '*.react']
      + mimetypes = ['text/jsx', 'text/typescript-jsx']
      + url = 'https://facebook.github.io/jsx/'
      + version_added = '2.17'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [include('jsx'), inherit], **_JSX_RULES}
  }

  class TsxLexer {
      + name = 'TSX'
      + aliases = ['tsx']
      + filenames = ['*.tsx']
      + mimetypes = ['text/typescript-tsx']
      + url = 'https://www.typescriptlang.org/docs/handbook/jsx.html'
      + version_added = '2.19'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [include('jsx'), inherit], **_JSX_RULES}
  }

  class JuliaLexer {
      + name = 'Julia'
      + url = 'https://julialang.org/'
      + aliases = ['julia', 'jl']
      + filenames = ['*.jl']
      + mimetypes = ['text/x-julia', 'application/x-julia']
      + version_added = '1.6'
      + tokens = {'root': [('\\n', Whitespace), ('[^\\S\\n]+', Whitespace), ('#=', Comment.Multiline, 'blockcomment'), ('#.*$', Comment), ('[\\[\\](),;]', Punctuation), ('(' + allowed_variable + ')(\\s*)(:)(' + allowed_variable + ')', bygroups(Name, Whitespace, Operator, Name)), ('(?<![\\]):<>\\d.])(:' + allowed_variable + ')', String.Symbol), ('(?<=::)(\\s*)(' + allowed_variable + ')\\b(?![(\\[])', bygroups(Whitespace, Keyword.Type)), ('(' + allowed_variable + ')(\\s*)([<>]:)(\\s*)(' + allowed_variable + ')\\b(?![(\\[])', bygroups(Keyword.Type, Whitespace, Operator, Whitespace, Keyword.Type)), ('([<>]:)(\\s*)(' + allowed_variable + ')\\b(?![(\\[])', bygroups(Operator, Whitespace, Keyword.Type)), ('\\b(' + allowed_variable + ')(\\s*)([<>]:)', bygroups(Keyword.Type, Whitespace, Operator)), (words([*OPERATORS_LIST, *DOTTED_OPERATORS_LIST], suffix=operator_suffixes), Operator), (words(['.' + o for o in DOTTED_OPERATORS_LIST], suffix=operator_suffixes), Operator), (words(['...', '..']), Operator), ("'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,3}|\\\\u[a-fA-F0-9]{1,4}|\\\\U[a-fA-F0-9]{1,6}|[^\\\\\\'\\n])'", String.Char), ("(?<=[.\\w)\\]])(\\'" + operator_suffixes + ')+', Operator), ('(raw)(""")', bygroups(String.Affix, String), 'tqrawstring'), ('(raw)(")', bygroups(String.Affix, String), 'rawstring'), ('(r)(""")', bygroups(String.Affix, String.Regex), 'tqregex'), ('(r)(")', bygroups(String.Affix, String.Regex), 'regex'), ('(' + allowed_variable + ')?(""")', bygroups(String.Affix, String), 'tqstring'), ('(' + allowed_variable + ')?(")', bygroups(String.Affix, String), 'string'), ('(' + allowed_variable + ')?(```)', bygroups(String.Affix, String.Backtick), 'tqcommand'), ('(' + allowed_variable + ')?(`)', bygroups(String.Affix, String.Backtick), 'command'), ('(' + allowed_variable + ')(\\{)', bygroups(Keyword.Type, Punctuation), 'curly'), ('(where)(\\s+)(' + allowed_variable + ')', bygroups(Keyword, Whitespace, Keyword.Type)), ('(\\{)', Punctuation, 'curly'), ('(abstract|primitive)([ \\t]+)(type\\b)([\\s()]+)(' + allowed_variable + ')', bygroups(Keyword, Whitespace, Keyword, Text, Keyword.Type)), ('(mutable(?=[ \\t]))?([ \\t]+)?(struct\\b)([\\s()]+)(' + allowed_variable + ')', bygroups(Keyword, Whitespace, Keyword, Text, Keyword.Type)), ('@' + allowed_variable, Name.Decorator), (words([*OPERATORS_LIST, '..', '.', *DOTTED_OPERATORS_LIST], prefix='@', suffix=operator_suffixes), Name.Decorator), (words(KEYWORD_LIST, suffix='\\b'), Keyword), (words(BUILTIN_LIST, suffix='\\b'), Keyword.Type), (words(LITERAL_LIST, suffix='\\b'), Name.Builtin), (allowed_variable, Name), ('(\\d+((_\\d+)+)?\\.(?!\\.)(\\d+((_\\d+)+)?)?|\\.\\d+((_\\d+)+)?)([eEf][+-]?[0-9]+)?', Number.Float), ('\\d+((_\\d+)+)?[eEf][+-]?[0-9]+', Number.Float), ('0x[a-fA-F0-9]+((_[a-fA-F0-9]+)+)?(\\.([a-fA-F0-9]+((_[a-fA-F0-9]+)+)?)?)?p[+-]?\\d+', Number.Float), ('0b[01]+((_[01]+)+)?', Number.Bin), ('0o[0-7]+((_[0-7]+)+)?', Number.Oct), ('0x[a-fA-F0-9]+((_[a-fA-F0-9]+)+)?', Number.Hex), ('\\d+((_\\d+)+)?', Number.Integer), (words(['.']), Operator)], 'blockcomment': [('[^=#]', Comment.Multiline), ('#=', Comment.Multiline, '#push'), ('=#', Comment.Multiline, '#pop'), ('[=#]', Comment.Multiline)], 'curly': [('\\{', Punctuation, '#push'), ('\\}', Punctuation, '#pop'), (allowed_variable, Keyword.Type), include('root')], 'tqrawstring': [('"""', String, '#pop'), ('([^"]|"[^"][^"])+', String)], 'rawstring': [('"', String, '#pop'), ('\\\\"', String.Escape), ('([^"\\\\]|\\\\[^"])+', String)], 'interp': [('\\$' + allowed_variable, String.Interpol), ('(\\$)(\\()', bygroups(String.Interpol, Punctuation), 'in-intp')], 'in-intp': [('\\(', Punctuation, '#push'), ('\\)', Punctuation, '#pop'), include('root')], 'string': [('(")(' + allowed_variable + '|\\d+)?', bygroups(String, String.Affix), '#pop'), ('\\\\([\\\\"\\\'$nrbtfav]|(x|u|U)[a-fA-F0-9]+|\\d+)', String.Escape), include('interp'), ('%[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[E-GXc-giorsux%]', String.Interpol), ('[^"$%\\\\]+', String), ('.', String)], 'tqstring': [('(""")(' + allowed_variable + '|\\d+)?', bygroups(String, String.Affix), '#pop'), ('\\\\([\\\\"\\\'$nrbtfav]|(x|u|U)[a-fA-F0-9]+|\\d+)', String.Escape), include('interp'), ('[^"$%\\\\]+', String), ('.', String)], 'regex': [('(")([imsxa]*)?', bygroups(String.Regex, String.Affix), '#pop'), ('\\\\"', String.Regex), ('[^\\\\"]+', String.Regex)], 'tqregex': [('(""")([imsxa]*)?', bygroups(String.Regex, String.Affix), '#pop'), ('[^"]+', String.Regex)], 'command': [('(`)(' + allowed_variable + '|\\d+)?', bygroups(String.Backtick, String.Affix), '#pop'), ('\\\\[`$]', String.Escape), include('interp'), ('[^\\\\`$]+', String.Backtick), ('.', String.Backtick)], 'tqcommand': [('(```)(' + allowed_variable + '|\\d+)?', bygroups(String.Backtick, String.Affix), '#pop'), ('\\\\\\$', String.Escape), include('interp'), ('[^\\\\`$]+', String.Backtick), ('.', String.Backtick)]}
  --
      + analyse_text(text)
  }

  class JuliaConsoleLexer {
      + name = 'Julia console'
      + aliases = ['jlcon', 'julia-repl']
      + url = 'https://julialang.org/'
      + version_added = '1.6'
  --
      + get_tokens_unprocessed(text)
  }

  class JavaLexer {
      + name = 'Java'
      + url = 'https://www.oracle.com/technetwork/java/'
      + aliases = ['java']
      + filenames = ['*.java']
      + mimetypes = ['text/x-java']
      + version_added = ''
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('(^\\s*)((?:(?:public|private|protected|static|strictfp)(?:\\s+))*)(record)\\b', bygroups(Whitespace, using(this), Keyword.Declaration), 'class'), ('[^\\S\\n]+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/\\*.*?\\*/', Comment.Multiline), ('(assert|break|case|catch|continue|default|do|else|finally|for|if|goto|instanceof|new|return|switch|this|throw|try|while)\\b', Keyword), ('((?:(?:[^\\W\\d]|\\$)[\\w.\\[\\]$<>?]*\\s+)+?)((?:[^\\W\\d]|\\$)[\\w$]*)(\\s*)(\\()', bygroups(using(this), Name.Function, Whitespace, Punctuation)), ('@[^\\W\\d][\\w.]*', Name.Decorator), ('(abstract|const|enum|extends|final|implements|native|private|protected|public|sealed|static|strictfp|super|synchronized|throws|transient|volatile|yield)\\b', Keyword.Declaration), ('(boolean|byte|char|double|float|int|long|short|void)\\b', Keyword.Type), ('(package)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'import'), ('(true|false|null)\\b', Keyword.Constant), ('(class|interface)\\b', Keyword.Declaration, 'class'), ('(var)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'var'), ('(import(?:\\s+static)?)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'import'), ('"""\\n', String, 'multiline_string'), ('"', String, 'string'), ("'\\\\.'|'[^\\\\]'|'\\\\u[0-9a-fA-F]{4}'", String.Char), ('(\\.)((?:[^\\W\\d]|\\$)[\\w$]*)', bygroups(Punctuation, Name.Attribute)), ('^(\\s*)(default)(:)', bygroups(Whitespace, Keyword, Punctuation)), ('^(\\s*)((?:[^\\W\\d]|\\$)[\\w$]*)(:)', bygroups(Whitespace, Name.Label, Punctuation)), ('([^\\W\\d]|\\$)[\\w$]*', Name), ('([0-9][0-9_]*\\.([0-9][0-9_]*)?|\\.[0-9][0-9_]*)([eE][+\\-]?[0-9][0-9_]*)?[fFdD]?|[0-9][eE][+\\-]?[0-9][0-9_]*[fFdD]?|[0-9]([eE][+\\-]?[0-9][0-9_]*)?[fFdD]|0[xX]([0-9a-fA-F][0-9a-fA-F_]*\\.?|([0-9a-fA-F][0-9a-fA-F_]*)?\\.[0-9a-fA-F][0-9a-fA-F_]*)[pP][+\\-]?[0-9][0-9_]*[fFdD]?', Number.Float), ('0[xX][0-9a-fA-F][0-9a-fA-F_]*[lL]?', Number.Hex), ('0[bB][01][01_]*[lL]?', Number.Bin), ('0[0-7_]+[lL]?', Number.Oct), ('0|[1-9][0-9_]*[lL]?', Number.Integer), ('[~^*!%&\\[\\]<>|+=/?-]', Operator), ('[{}();:.,]', Punctuation), ('\\n', Whitespace)], 'class': [('\\s+', Text), ('([^\\W\\d]|\\$)[\\w$]*', Name.Class, '#pop')], 'var': [('([^\\W\\d]|\\$)[\\w$]*', Name, '#pop')], 'import': [('[\\w.]+\\*?', Name.Namespace, '#pop')], 'multiline_string': [('"""', String, '#pop'), ('"', String), include('string')], 'string': [('[^\\\\"]+', String), ('\\\\\\\\', String), ('\\\\"', String), ('\\\\', String), ('"', String, '#pop')]}
  }

  class AspectJLexer {
      + name = 'AspectJ'
      + url = 'http://www.eclipse.org/aspectj/'
      + aliases = ['aspectj']
      + filenames = ['*.aj']
      + mimetypes = ['text/x-aspectj']
      + version_added = '1.6'
      + aj_keywords = {'aspect', 'pointcut', 'privileged', 'call', 'execution', 'initialization', 'preinitialization', 'handler', 'get', 'set', 'staticinitialization', 'target', 'args', 'within', 'withincode', 'cflow', 'cflowbelow', 'annotation', 'before', 'after', 'around', 'proceed', 'throwing', 'returning', 'adviceexecution', 'declare', 'parents', 'warning', 'error', 'soft', 'precedence', 'thisJoinPoint', 'thisJoinPointStaticPart', 'thisEnclosingJoinPointStaticPart', 'issingleton', 'perthis', 'pertarget', 'percflow', 'percflowbelow', 'pertypewithin', 'lock', 'unlock', 'thisAspectInstance'}
      + aj_inter_type = {'parents:', 'warning:', 'error:', 'soft:', 'precedence:'}
      + aj_inter_type_annotation = {'@type', '@method', '@constructor', '@field'}
  --
      + get_tokens_unprocessed(text)
  }

  class ScalaLexer {
      + name = 'Scala'
      + url = 'http://www.scala-lang.org'
      + aliases = ['scala']
      + filenames = ['*.scala']
      + mimetypes = ['text/x-scala']
      + version_added = ''
      + flags = re.MULTILINE | re.DOTALL
      + opchar = '[!#%&*\\-\\/:?@^' + uni.combine('Sm', 'So') + ']'
      + letter = '[_\\$' + uni.combine('Ll', 'Lu', 'Lo', 'Nl', 'Lt') + ']'
      + upperLetter = '[' + uni.combine('Lu', 'Lt') + ']'
      + letterOrDigit = f'(?:{letter}|[0-9])'
      + letterOrDigitNoDollarSign = '(?:{}|[0-9])'.format(letter.replace('\\$', ''))
      + alphaId = f'{letter}+'
      + simpleInterpolatedVariable = f'{letter}{letterOrDigitNoDollarSign}*'
      + idrest = f'{letter}{letterOrDigit}*(?:(?<=_){opchar}+)?'
      + idUpper = f'{upperLetter}{letterOrDigit}*(?:(?<=_){opchar}+)?'
      + plainid = f'(?:{idrest}|{opchar}+)'
      + backQuotedId = '`[^`]+`'
      + anyId = f'(?:{plainid}|{backQuotedId})'
      + notStartOfComment = '(?!//|/\\*)'
      + endOfLineMaybeWithComment = '(?=\\s*(//|$))'
      + keywords = ('new', 'return', 'throw', 'classOf', 'isInstanceOf', 'asInstanceOf', 'else', 'if', 'then', 'do', 'while', 'for', 'yield', 'match', 'case', 'catch', 'finally', 'try')
      + operators = ('<%', '=:=', '<:<', '<%<', '>:', '<:', '=', '==', '!=', '<=', '>=', '<>', '<', '>', '<-', '←', '->', '→', '=>', '⇒', '?', '@', '|', '-', '+', '*', '%', '~', '\\')
      + storage_modifiers = ('private', 'protected', 'synchronized', '@volatile', 'abstract', 'final', 'lazy', 'sealed', 'implicit', 'override', '@transient', '@native')
      + tokens = {'root': [include('whitespace'), include('comments'), include('script-header'), include('imports'), include('exports'), include('storage-modifiers'), include('annotations'), include('using'), include('declarations'), include('inheritance'), include('extension'), include('end'), include('constants'), include('strings'), include('symbols'), include('singleton-type'), include('inline'), include('quoted'), include('keywords'), include('operators'), include('punctuation'), include('names')], 'whitespace': [('\\s+', Whitespace)], 'comments': [('//.*?\\n', Comment.Single), ('/\\*', Comment.Multiline, 'comment')], 'script-header': [('^#!([^\\n]*)$', Comment.Hashbang)], 'imports': [('\\b(import)(\\s+)', bygroups(Keyword, Whitespace), 'import-path')], 'exports': [('\\b(export)(\\s+)(given)(\\s+)', bygroups(Keyword, Whitespace, Keyword, Whitespace), 'export-path'), ('\\b(export)(\\s+)', bygroups(Keyword, Whitespace), 'export-path')], 'storage-modifiers': [(words(storage_modifiers, prefix='\\b', suffix='\\b'), Keyword), ('\\b(transparent|opaque|infix|open|inline)\\b(?=[a-z\\s]*\\b(def|val|var|given|type|class|trait|object|enum)\\b)', Keyword)], 'annotations': [(f'@{idrest}', Name.Decorator)], 'using': [('(\\()(\\s*)(using)(\\s)', bygroups(Punctuation, Whitespace, Keyword, Whitespace))], 'declarations': [(f'\\b(def)\\b(\\s*){notStartOfComment}({anyId})?', bygroups(Keyword, Whitespace, Name.Function)), (f'\\b(trait)\\b(\\s*){notStartOfComment}({anyId})?', bygroups(Keyword, Whitespace, Name.Class)), (f'\\b(?:(case)(\\s+))?(class|object|enum)\\b(\\s*){notStartOfComment}({anyId})?', bygroups(Keyword, Whitespace, Keyword, Whitespace, Name.Class)), (f'(?<!\\.)\\b(type)\\b(\\s*){notStartOfComment}({anyId})?', bygroups(Keyword, Whitespace, Name.Class)), ('\\b(val|var)\\b', Keyword.Declaration), (f'\\b(package)(\\s+)(object)\\b(\\s*){notStartOfComment}({anyId})?', bygroups(Keyword, Whitespace, Keyword, Whitespace, Name.Namespace)), ('\\b(package)(\\s+)', bygroups(Keyword, Whitespace), 'package'), (f'\\b(given)\\b(\\s*)({idUpper})', bygroups(Keyword, Whitespace, Name.Class)), (f'\\b(given)\\b(\\s*)({anyId})?', bygroups(Keyword, Whitespace, Name))], 'inheritance': [(f'\\b(extends|with|derives)\\b(\\s*)({idUpper}|{backQuotedId}|(?=\\([^\\)]+=>)|(?={plainid})|(?="))?', bygroups(Keyword, Whitespace, Name.Class))], 'extension': [('\\b(extension)(\\s+)(?=[\\[\\(])', bygroups(Keyword, Whitespace))], 'end': [('\\b(end)(\\s+)(if|while|for|match|new|extension|val|var)\\b', bygroups(Keyword, Whitespace, Keyword)), (f'\\b(end)(\\s+)({idUpper}){endOfLineMaybeWithComment}', bygroups(Keyword, Whitespace, Name.Class)), (f'\\b(end)(\\s+)({backQuotedId}|{plainid})?{endOfLineMaybeWithComment}', bygroups(Keyword, Whitespace, Name.Namespace))], 'punctuation': [('[{}()\\[\\];,.]', Punctuation), ('(?<!:):(?!:)', Punctuation)], 'keywords': [(words(keywords, prefix='\\b', suffix='\\b'), Keyword)], 'operators': [(f'({opchar}{{2,}})(\\s+)', bygroups(Operator, Whitespace)), ('/(?![/*])', Operator), (words(operators), Operator), (f'(?<!{opchar})(!|&&|\\|\\|)(?!{opchar})', Operator)], 'constants': [('\\b(this|super)\\b', Name.Builtin.Pseudo), ('(true|false|null)\\b', Keyword.Constant), ('0[xX][0-9a-fA-F_]*', Number.Hex), ('([0-9][0-9_]*\\.[0-9][0-9_]*|\\.[0-9][0-9_]*)([eE][+-]?[0-9][0-9_]*)?[fFdD]?', Number.Float), ('[0-9]+([eE][+-]?[0-9]+)?[fFdD]', Number.Float), ('[0-9]+([eE][+-]?[0-9]+)[fFdD]?', Number.Float), ('[0-9]+[lL]', Number.Integer.Long), ('[0-9]+', Number.Integer), ('""".*?"""(?!")', String), ('"(\\\\\\\\|\\\\"|[^"])*"', String), ("(')(\\\\.)(')", bygroups(String.Char, String.Escape, String.Char)), ("'[^\\\\]'|'\\\\u[0-9a-fA-F]{4}'", String.Char)], 'strings': [('[fs]"""', String, 'interpolated-string-triple'), ('[fs]"', String, 'interpolated-string'), ('raw"(\\\\\\\\|\\\\"|[^"])*"', String)], 'symbols': [(f"('{plainid})(?!')", String.Symbol)], 'singleton-type': [('(\\.)(type)\\b', bygroups(Punctuation, Keyword))], 'inline': [(f'\\b(inline)(?=\\s+({plainid}|{backQuotedId})\\s*:)', Keyword), ('\\b(inline)\\b(?=(?:.(?!\\b(?:val|def|given)\\b))*\\b(if|match)\\b)', Keyword)], 'quoted': [("['$]\\{(?!')", Punctuation), ("'\\[(?!')", Punctuation)], 'names': [(idUpper, Name.Class), (anyId, Name)], 'comment': [('[^/*]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'import-path': [('(?<=[\\n;:])', Text, '#pop'), include('comments'), ('\\b(given)\\b', Keyword), include('qualified-name'), ('\\{', Punctuation, 'import-path-curly-brace')], 'import-path-curly-brace': [include('whitespace'), include('comments'), ('\\b(given)\\b', Keyword), ('=>', Operator), ('\\}', Punctuation, '#pop'), (',', Punctuation), ('[\\[\\]]', Punctuation), include('qualified-name')], 'export-path': [('(?<=[\\n;:])', Text, '#pop'), include('comments'), include('qualified-name'), ('\\{', Punctuation, 'export-path-curly-brace')], 'export-path-curly-brace': [include('whitespace'), include('comments'), ('=>', Operator), ('\\}', Punctuation, '#pop'), (',', Punctuation), include('qualified-name')], 'package': [('(?<=[\\n;])', Text, '#pop'), (':', Punctuation, '#pop'), include('comments'), include('qualified-name')], 'interpolated-string-triple': [('"""(?!")', String, '#pop'), ('"', String), include('interpolated-string-common')], 'interpolated-string': [('"', String, '#pop'), include('interpolated-string-common')], 'interpolated-string-brace': [('\\}', String.Interpol, '#pop'), ('\\{', Punctuation, 'interpolated-string-nested-brace'), include('root')], 'interpolated-string-nested-brace': [('\\{', Punctuation, '#push'), ('\\}', Punctuation, '#pop'), include('root')], 'qualified-name': [(idUpper, Name.Class), (f'({anyId})(\\.)', bygroups(Name.Namespace, Punctuation)), ('\\.', Punctuation), (anyId, Name), ('[^\\S\\n]+', Whitespace)], 'interpolated-string-common': [('[^"$\\\\]+', String), ('\\$\\$', String.Escape), (f'(\\$)({simpleInterpolatedVariable})', bygroups(String.Interpol, Name)), ('\\$\\{', String.Interpol, 'interpolated-string-brace'), ('\\\\.', String)]}
  }

  class GosuLexer {
      + name = 'Gosu'
      + aliases = ['gosu']
      + filenames = ['*.gs', '*.gsx', '*.gsp', '*.vark']
      + mimetypes = ['text/x-gosu']
      + url = 'https://gosu-lang.github.io'
      + version_added = '1.5'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('^(\\s*(?:[a-zA-Z_][\\w.\\[\\]]*\\s+)+?)([a-zA-Z_]\\w*)(\\s*)(\\()', bygroups(using(this), Name.Function, Whitespace, Operator)), ('[^\\S\\n]+', Whitespace), ('//.*?\\n', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline), ('@[a-zA-Z_][\\w.]*', Name.Decorator), ('(in|as|typeof|statictypeof|typeis|typeas|if|else|foreach|for|index|while|do|continue|break|return|try|catch|finally|this|throw|new|switch|case|default|eval|super|outer|classpath|using)\\b', Keyword), ('(var|delegate|construct|function|private|internal|protected|public|abstract|override|final|static|extends|transient|implements|represents|readonly)\\b', Keyword.Declaration), ('(property)(\\s+)(get|set)?', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration)), ('(boolean|byte|char|double|float|int|long|short|void|block)\\b', Keyword.Type), ('(package)(\\s+)', bygroups(Keyword.Namespace, Whitespace)), ('(true|false|null|NaN|Infinity)\\b', Keyword.Constant), ('(class|interface|enhancement|enum)(\\s+)([a-zA-Z_]\\w*)', bygroups(Keyword.Declaration, Whitespace, Name.Class)), ('(uses)(\\s+)([\\w.]+\\*?)', bygroups(Keyword.Namespace, Whitespace, Name.Namespace)), ('"', String, 'string'), ('(\\??[.#])([a-zA-Z_]\\w*)', bygroups(Operator, Name.Attribute)), ('(:)([a-zA-Z_]\\w*)', bygroups(Operator, Name.Attribute)), ('[a-zA-Z_$]\\w*', Name), ('and|or|not|[\\\\~^*!%&\\[\\](){}<>|+=:;,./?-]', Operator), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('[0-9]+', Number.Integer), ('\\n', Whitespace)], 'templateText': [('(\\\\<)|(\\\\\\$)', String), ('(<%@\\s+)(extends|params)', bygroups(Operator, Name.Decorator), 'stringTemplate'), ('<%!--.*?--%>', Comment.Multiline), ('(<%)|(<%=)', Operator, 'stringTemplate'), ('\\$\\{', Operator, 'stringTemplateShorthand'), ('.', String)], 'string': [('"', String, '#pop'), include('templateText')], 'stringTemplate': [('"', String, 'string'), ('%>', Operator, '#pop'), include('root')], 'stringTemplateShorthand': [('"', String, 'string'), ('\\{', Operator, 'stringTemplateShorthand'), ('\\}', Operator, '#pop'), include('root')]}
  }

  class GosuTemplateLexer {
      + name = 'Gosu Template'
      + aliases = ['gst']
      + filenames = ['*.gst']
      + mimetypes = ['text/x-gosu-template']
      + url = 'https://gosu-lang.github.io'
      + version_added = '1.5'
  --
      + get_tokens_unprocessed(text)
  }

  class GroovyLexer {
      + name = 'Groovy'
      + url = 'https://groovy-lang.org/'
      + aliases = ['groovy']
      + filenames = ['*.groovy', '*.gradle']
      + mimetypes = ['text/x-groovy']
      + version_added = '1.5'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('#!(.*?)$', Comment.Preproc, 'base'), default('base')], 'base': [('[^\\S\\n]+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/\\*.*?\\*/', Comment.Multiline), ('(assert|break|case|catch|continue|default|do|else|finally|for|if|goto|instanceof|new|return|switch|this|throw|try|while|in|as)\\b', Keyword), ('^(\\s*(?:[a-zA-Z_][\\w.\\[\\]]*\\s+)+?)([a-zA-Z_]\\w*|"(?:\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"|\'(?:\\\\\\\\|\\\\[^\\\\]|[^\'\\\\])*\')(\\s*)(\\()', bygroups(using(this), Name.Function, Whitespace, Operator)), ('@[a-zA-Z_][\\w.]*', Name.Decorator), ('(abstract|const|enum|extends|final|implements|native|private|protected|public|static|strictfp|super|synchronized|throws|transient|volatile)\\b', Keyword.Declaration), ('(def|boolean|byte|char|double|float|int|long|short|void)\\b', Keyword.Type), ('(package)(\\s+)', bygroups(Keyword.Namespace, Whitespace)), ('(true|false|null)\\b', Keyword.Constant), ('(class|interface)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'class'), ('(import)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'import'), ('""".*?"""', String.Double), ("'''.*?'''", String.Single), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('\\$/((?!/\\$).)*/\\$', String), ('/(\\\\\\\\|\\\\[^\\\\]|[^/\\\\])*/', String), ("'\\\\.'|'[^\\\\]'|'\\\\u[0-9a-fA-F]{4}'", String.Char), ('(\\.)([a-zA-Z_]\\w*)', bygroups(Operator, Name.Attribute)), ('[a-zA-Z_]\\w*:', Name.Label), ('[a-zA-Z_$]\\w*', Name), ('[~^*!%&\\[\\](){}<>|+=:;,./?-]', Operator), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+L?', Number.Integer), ('\\n', Whitespace)], 'class': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'import': [('[\\w.]+\\*?', Name.Namespace, '#pop')]}
  --
      + analyse_text(text)
  }

  class IokeLexer {
      + name = 'Ioke'
      + url = 'https://ioke.org/'
      + filenames = ['*.ik']
      + aliases = ['ioke', 'ik']
      + mimetypes = ['text/x-iokesrc']
      + version_added = '1.4'
      + tokens = {'interpolatableText': [('(\\\\b|\\\\e|\\\\t|\\\\n|\\\\f|\\\\r|\\\\"|\\\\\\\\|\\\\#|\\\\\\Z|\\\\u[0-9a-fA-F]{1,4}|\\\\[0-3]?[0-7]?[0-7])', String.Escape), ('#\\{', Punctuation, 'textInterpolationRoot')], 'text': [('(?<!\\\\)"', String, '#pop'), include('interpolatableText'), ('[^"]', String)], 'documentation': [('(?<!\\\\)"', String.Doc, '#pop'), include('interpolatableText'), ('[^"]', String.Doc)], 'textInterpolationRoot': [('\\}', Punctuation, '#pop'), include('root')], 'slashRegexp': [('(?<!\\\\)/[im-psux]*', String.Regex, '#pop'), include('interpolatableText'), ('\\\\/', String.Regex), ('[^/]', String.Regex)], 'squareRegexp': [('(?<!\\\\)][im-psux]*', String.Regex, '#pop'), include('interpolatableText'), ('\\\\]', String.Regex), ('[^\\]]', String.Regex)], 'squareText': [('(?<!\\\\)]', String, '#pop'), include('interpolatableText'), ('[^\\]]', String)], 'root': [('\\n', Whitespace), ('\\s+', Whitespace), (';(.*?)\\n', Comment), ('\\A#!(.*?)\\n', Comment), ('#/', String.Regex, 'slashRegexp'), ('#r\\[', String.Regex, 'squareRegexp'), (':[\\w!:?]+', String.Symbol), ('[\\w!:?]+:(?![\\w!?])', String.Other), (':"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Symbol), ('((?<=fn\\()|(?<=fnx\\()|(?<=method\\()|(?<=macro\\()|(?<=lecro\\()|(?<=syntax\\()|(?<=dmacro\\()|(?<=dlecro\\()|(?<=dlecrox\\()|(?<=dsyntax\\())(\\s*)"', String.Doc, 'documentation'), ('"', String, 'text'), ('#\\[', String, 'squareText'), ('\\w[\\w!:?]+(?=\\s*=.*mimic\\s)', Name.Entity), ('[a-zA-Z_][\\w!:?]*(?=[\\s]*[+*/-]?=[^=].*($|\\.))', Name.Variable), ('(break|cond|continue|do|ensure|for|for:dict|for:set|if|let|loop|p:for|p:for:dict|p:for:set|return|unless|until|while|with)(?![\\w!:?])', Keyword.Reserved), ('(eval|mimic|print|println)(?![\\w!:?])', Keyword), ('(cell\\?|cellNames|cellOwner\\?|cellOwner|cells|cell|documentation|hash|identity|mimic|removeCell\\!|undefineCell\\!)(?![\\w!:?])', Keyword), ('(stackTraceAsText)(?![\\w!:?])', Keyword), ('(dict|list|message|set)(?![\\w!:?])', Keyword.Reserved), ('(case|case:and|case:else|case:nand|case:nor|case:not|case:or|case:otherwise|case:xor)(?![\\w!:?])', Keyword.Reserved), ('(asText|become\\!|derive|freeze\\!|frozen\\?|in\\?|is\\?|kind\\?|mimic\\!|mimics|mimics\\?|prependMimic\\!|removeAllMimics\\!|removeMimic\\!|same\\?|send|thaw\\!|uniqueHexId)(?![\\w!:?])', Keyword), ('(after|around|before)(?![\\w!:?])', Keyword.Reserved), ('(kind|cellDescriptionDict|cellSummary|genSym|inspect|notice)(?![\\w!:?])', Keyword), ('(use|destructuring)', Keyword.Reserved), ('(cell\\?|cellOwner\\?|cellOwner|cellNames|cells|cell|documentation|identity|removeCell!|undefineCell)(?![\\w!:?])', Keyword), ('(internal:compositeRegexp|internal:concatenateText|internal:createDecimal|internal:createNumber|internal:createRegexp|internal:createText)(?![\\w!:?])', Keyword.Reserved), ('(availableRestarts|bind|error\\!|findRestart|handle|invokeRestart|rescue|restart|signal\\!|warn\\!)(?![\\w!:?])', Keyword.Reserved), ('(nil|false|true)(?![\\w!:?])', Name.Constant), ('(Arity|Base|Call|Condition|DateTime|Aspects|Pointcut|Assignment|BaseBehavior|Boolean|Case|AndCombiner|Else|NAndCombiner|NOrCombiner|NotCombiner|OrCombiner|XOrCombiner|Conditions|Definitions|FlowControl|Internal|Literals|Reflection|DefaultMacro|DefaultMethod|DefaultSyntax|Dict|FileSystem|Ground|Handler|Hook|IO|IokeGround|Struct|LexicalBlock|LexicalMacro|List|Message|Method|Mixins|NativeMethod|Number|Origin|Pair|Range|Reflector|Regexp Match|Regexp|Rescue|Restart|Runtime|Sequence|Set|Symbol|System|Text|Tuple)(?![\\w!:?])', Name.Builtin), ('(generateMatchMethod|aliasMethod|λ|ʎ|fnx|fn|method|dmacro|dlecro|syntax|macro|dlecrox|lecrox|lecro|syntax)(?![\\w!:?])', Name.Function), ('-?0[xX][0-9a-fA-F]+', Number.Hex), ('-?(\\d+\\.?\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number.Float), ('-?\\d+', Number.Integer), ('#\\(', Punctuation), ('(&&>>|\\|\\|>>|\\*\\*>>|:::|::|\\.\\.\\.|===|\\*\\*>|\\*\\*=|&&>|&&=|\\|\\|>|\\|\\|=|\\->>|\\+>>|!>>|<>>>|<>>|&>>|%>>|#>>|@>>|/>>|\\*>>|\\?>>|\\|>>|\\^>>|~>>|\\$>>|=>>|<<=|>>=|<=>|<\\->|=~|!~|=>|\\+\\+|\\-\\-|<=|>=|==|!=|&&|\\.\\.|\\+=|\\-=|\\*=|\\/=|%=|&=|\\^=|\\|=|<\\-|\\+>|!>|<>|&>|%>|#>|\\@>|\\/>|\\*>|\\?>|\\|>|\\^>|~>|\\$>|<\\->|\\->|<<|>>|\\*\\*|\\?\\||\\?&|\\|\\||>|<|\\*|\\/|%|\\+|\\-|&|\\^|\\||=|\\$|!|~|\\?|#|\\u2260|\\u2218|\\u2208|\\u2209)', Operator), ('(and|nand|or|xor|nor|return|import)(?![\\w!?])', Operator), ("(\\`\\`|\\`|\\'\\'|\\'|\\.|\\,|@@|@|\\[|\\]|\\(|\\)|\\{|\\})", Punctuation), ('[A-Z][\\w!:?]*', Name.Class), ('[a-z_][\\w!:?]*', Name)]}
  }

  class ClojureLexer {
      + name = 'Clojure'
      + url = 'http://clojure.org/'
      + aliases = ['clojure', 'clj']
      + filenames = ['*.clj', '*.cljc']
      + mimetypes = ['text/x-clojure', 'application/x-clojure']
      + version_added = '0.11'
      + special_forms = ('.', 'def', 'do', 'fn', 'if', 'let', 'new', 'quote', 'var', 'loop')
      + declarations = ('def-', 'defn', 'defn-', 'defmacro', 'defmulti', 'defmethod', 'defstruct', 'defonce', 'declare', 'definline', 'definterface', 'defprotocol', 'defrecord', 'deftype', 'defproject', 'ns')
      + builtins = ('*', '+', '-', '->', '/', '<', '<=', '=', '==', '>', '>=', '..', 'accessor', 'agent', 'agent-errors', 'aget', 'alength', 'all-ns', 'alter', 'and', 'append-child', 'apply', 'array-map', 'aset', 'aset-boolean', 'aset-byte', 'aset-char', 'aset-double', 'aset-float', 'aset-int', 'aset-long', 'aset-short', 'assert', 'assoc', 'await', 'await-for', 'bean', 'binding', 'bit-and', 'bit-not', 'bit-or', 'bit-shift-left', 'bit-shift-right', 'bit-xor', 'boolean', 'branch?', 'butlast', 'byte', 'cast', 'char', 'children', 'class', 'clear-agent-errors', 'comment', 'commute', 'comp', 'comparator', 'complement', 'concat', 'conj', 'cons', 'constantly', 'cond', 'if-not', 'construct-proxy', 'contains?', 'count', 'create-ns', 'create-struct', 'cycle', 'dec', 'deref', 'difference', 'disj', 'dissoc', 'distinct', 'doall', 'doc', 'dorun', 'doseq', 'dosync', 'dotimes', 'doto', 'double', 'down', 'drop', 'drop-while', 'edit', 'end?', 'ensure', 'eval', 'every?', 'false?', 'ffirst', 'file-seq', 'filter', 'find', 'find-doc', 'find-ns', 'find-var', 'first', 'float', 'flush', 'for', 'fnseq', 'frest', 'gensym', 'get-proxy-class', 'get', 'hash-map', 'hash-set', 'identical?', 'identity', 'if-let', 'import', 'in-ns', 'inc', 'index', 'insert-child', 'insert-left', 'insert-right', 'inspect-table', 'inspect-tree', 'instance?', 'int', 'interleave', 'intersection', 'into', 'into-array', 'iterate', 'join', 'key', 'keys', 'keyword', 'keyword?', 'last', 'lazy-cat', 'lazy-cons', 'left', 'lefts', 'line-seq', 'list*', 'list', 'load', 'load-file', 'locking', 'long', 'loop', 'macroexpand', 'macroexpand-1', 'make-array', 'make-node', 'map', 'map-invert', 'map?', 'mapcat', 'max', 'max-key', 'memfn', 'merge', 'merge-with', 'meta', 'min', 'min-key', 'name', 'namespace', 'neg?', 'new', 'newline', 'next', 'nil?', 'node', 'not', 'not-any?', 'not-every?', 'not=', 'ns-imports', 'ns-interns', 'ns-map', 'ns-name', 'ns-publics', 'ns-refers', 'ns-resolve', 'ns-unmap', 'nth', 'nthrest', 'or', 'parse', 'partial', 'path', 'peek', 'pop', 'pos?', 'pr', 'pr-str', 'print', 'print-str', 'println', 'println-str', 'prn', 'prn-str', 'project', 'proxy', 'proxy-mappings', 'quot', 'rand', 'rand-int', 'range', 're-find', 're-groups', 're-matcher', 're-matches', 're-pattern', 're-seq', 'read', 'read-line', 'reduce', 'ref', 'ref-set', 'refer', 'rem', 'remove', 'remove-method', 'remove-ns', 'rename', 'rename-keys', 'repeat', 'replace', 'replicate', 'resolve', 'rest', 'resultset-seq', 'reverse', 'rfirst', 'right', 'rights', 'root', 'rrest', 'rseq', 'second', 'select', 'select-keys', 'send', 'send-off', 'seq', 'seq-zip', 'seq?', 'set', 'short', 'slurp', 'some', 'sort', 'sort-by', 'sorted-map', 'sorted-map-by', 'sorted-set', 'special-symbol?', 'split-at', 'split-with', 'str', 'string?', 'struct', 'struct-map', 'subs', 'subvec', 'symbol', 'symbol?', 'sync', 'take', 'take-nth', 'take-while', 'test', 'time', 'to-array', 'to-array-2d', 'tree-seq', 'true?', 'union', 'up', 'update-proxy', 'val', 'vals', 'var-get', 'var-set', 'var?', 'vector', 'vector-zip', 'vector?', 'when', 'when-first', 'when-let', 'when-not', 'with-local-vars', 'with-meta', 'with-open', 'with-out-str', 'xml-seq', 'xml-zip', 'zero?', 'zipmap', 'zipper')
      + valid_name = '(?!#)[\\w!$%*+<=>?/.#|-]+'
      + tokens = {'root': [(';.*$', Comment.Single), (',+', Text), ('\\s+', Whitespace), ('-?\\d+\\.\\d+', Number.Float), ('-?\\d+/\\d+', Number), ('-?\\d+', Number.Integer), ('0x-?[abcdef\\d]+', Number.Hex), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ("'" + valid_name, String.Symbol), ('\\\\(.|[a-z]+)', String.Char), ('::?#?' + valid_name, String.Symbol), ("~@|[`\\'#^~&@]", Operator), (words(special_forms, suffix=' '), Keyword), (words(declarations, suffix=' '), Keyword.Declaration), (words(builtins, suffix=' '), Name.Builtin), ('(?<=\\()' + valid_name, Name.Function), (valid_name, Name.Variable), ('(\\[|\\])', Punctuation), ('(\\{|\\})', Punctuation), ('(\\(|\\))', Punctuation)]}
  }

  class ClojureScriptLexer {
      + name = 'ClojureScript'
      + url = 'http://clojure.org/clojurescript'
      + aliases = ['clojurescript', 'cljs']
      + filenames = ['*.cljs']
      + mimetypes = ['text/x-clojurescript', 'application/x-clojurescript']
      + version_added = '2.0'
  }

  class TeaLangLexer {
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('^(\\s*(?:[a-zA-Z_][\\w\\.\\[\\]]*\\s+)+?)([a-zA-Z_]\\w*)(\\s*)(\\()', bygroups(using(this), Name.Function, Whitespace, Operator)), ('[^\\S\\n]+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/\\*.*?\\*/', Comment.Multiline), ('@[a-zA-Z_][\\w\\.]*', Name.Decorator), ('(and|break|else|foreach|if|in|not|or|reverse)\\b', Keyword), ('(as|call|define)\\b', Keyword.Declaration), ('(true|false|null)\\b', Keyword.Constant), ('(template)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'template'), ('(import)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'import'), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('(\\.)([a-zA-Z_]\\w*)', bygroups(Operator, Name.Attribute)), ('[a-zA-Z_]\\w*:', Name.Label), ('[a-zA-Z_\\$]\\w*', Name), ('(isa|[.]{3}|[.]{2}|[=#!<>+-/%&;,.\\*\\\\\\(\\)\\[\\]\\{\\}])', Operator), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+L?', Number.Integer), ('\\n', Whitespace)], 'template': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'import': [('[\\w.]+\\*?', Name.Namespace, '#pop')]}
  }

  class CeylonLexer {
      + name = 'Ceylon'
      + url = 'http://ceylon-lang.org/'
      + aliases = ['ceylon']
      + filenames = ['*.ceylon']
      + mimetypes = ['text/x-ceylon']
      + version_added = '1.6'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('^(\\s*(?:[a-zA-Z_][\\w.\\[\\]]*\\s+)+?)([a-zA-Z_]\\w*)(\\s*)(\\()', bygroups(using(this), Name.Function, Whitespace, Operator)), ('[^\\S\\n]+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/\\*', Comment.Multiline, 'comment'), ('(shared|abstract|formal|default|actual|variable|deprecated|small|late|literal|doc|by|see|throws|optional|license|tagged|final|native|annotation|sealed)\\b', Name.Decorator), ('(break|case|catch|continue|else|finally|for|in|if|return|switch|this|throw|try|while|is|exists|dynamic|nonempty|then|outer|assert|let)\\b', Keyword), ('(abstracts|extends|satisfies|super|given|of|out|assign)\\b', Keyword.Declaration), ('(function|value|void|new)\\b', Keyword.Type), ('(assembly|module|package)(\\s+)', bygroups(Keyword.Namespace, Whitespace)), ('(true|false|null)\\b', Keyword.Constant), ('(class|interface|object|alias)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'class'), ('(import)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'import'), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ("'\\\\.'|'[^\\\\]'|'\\\\\\{#[0-9a-fA-F]{4}\\}'", String.Char), ('(\\.)([a-z_]\\w*)', bygroups(Operator, Name.Attribute)), ('[a-zA-Z_]\\w*:', Name.Label), ('[a-zA-Z_]\\w*', Name), ('[~^*!%&\\[\\](){}<>|+=:;,./?-]', Operator), ('\\d{1,3}(_\\d{3})+\\.\\d{1,3}(_\\d{3})+[kMGTPmunpf]?', Number.Float), ('\\d{1,3}(_\\d{3})+\\.[0-9]+([eE][+-]?[0-9]+)?[kMGTPmunpf]?', Number.Float), ('[0-9][0-9]*\\.\\d{1,3}(_\\d{3})+[kMGTPmunpf]?', Number.Float), ('[0-9][0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[kMGTPmunpf]?', Number.Float), ('#([0-9a-fA-F]{4})(_[0-9a-fA-F]{4})+', Number.Hex), ('#[0-9a-fA-F]+', Number.Hex), ('\\$([01]{4})(_[01]{4})+', Number.Bin), ('\\$[01]+', Number.Bin), ('\\d{1,3}(_\\d{3})+[kMGTP]?', Number.Integer), ('[0-9]+[kMGTP]?', Number.Integer), ('\\n', Whitespace)], 'class': [('[A-Za-z_]\\w*', Name.Class, '#pop')], 'import': [('[a-z][\\w.]*', Name.Namespace, '#pop')], 'comment': [('[^*/]', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  }

  class KotlinLexer {
      + name = 'Kotlin'
      + url = 'http://kotlinlang.org/'
      + aliases = ['kotlin']
      + filenames = ['*.kt', '*.kts']
      + mimetypes = ['text/x-kotlin']
      + version_added = '1.5'
      + flags = re.MULTILINE | re.DOTALL
      + kt_name = '@?[_' + uni.combine('Lu', 'Ll', 'Lt', 'Lm', 'Nl') + ']' + '[' + uni.combine('Lu', 'Ll', 'Lt', 'Lm', 'Nl', 'Nd', 'Pc', 'Cf', 'Mn', 'Mc') + ']*'
      + kt_space_name = '@?[_' + uni.combine('Lu', 'Ll', 'Lt', 'Lm', 'Nl') + ']' + '[' + uni.combine('Lu', 'Ll', 'Lt', 'Lm', 'Nl', 'Nd', 'Pc', 'Cf', 'Mn', 'Mc', 'Zs') + "\\'~!%^&*()+=|\\[\\]:;,.<>/\\?-]*"
      + kt_id = '(' + kt_name + '|`' + kt_space_name + '`)'
      + modifiers = 'actual|abstract|annotation|companion|const|crossinline|data|enum|expect|external|final|infix|inline|inner|internal|lateinit|noinline|open|operator|override|private|protected|public|sealed|suspend|tailrec|value'
      + tokens = {'root': [('[^\\S\\n]+', Whitespace), ('\\s+', Whitespace), ('\\\\$', String.Escape), ('\\n', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('^(#!/.+?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/[*].*?[*]/', Comment.Multiline), ('as\\?', Keyword), ('(as|break|by|catch|constructor|continue|do|dynamic|else|finally|get|for|if|init|[!]*in|[!]*is|out|reified|return|set|super|this|throw|try|typealias|typeof|vararg|when|where|while)\\b', Keyword), ('it\\b', Name.Builtin), (words(('Boolean?', 'Byte?', 'Char?', 'Double?', 'Float?', 'Int?', 'Long?', 'Short?', 'String?', 'Any?', 'Unit?')), Keyword.Type), (words(('Boolean', 'Byte', 'Char', 'Double', 'Float', 'Int', 'Long', 'Short', 'String', 'Any', 'Unit'), suffix='\\b'), Keyword.Type), ('(true|false|null)\\b', Keyword.Constant), ('(package|import)(\\s+)(\\S+)', bygroups(Keyword, Whitespace, Name.Namespace)), ('(\\?\\.)((?:[^\\W\\d]|\\$)[\\w$]*)', bygroups(Operator, Name.Attribute)), ('(\\.)((?:[^\\W\\d]|\\$)[\\w$]*)', bygroups(Punctuation, Name.Attribute)), ('@[^\\W\\d][\\w.]*', Name.Decorator), ('[^\\W\\d][\\w.]+@', Name.Decorator), ('(object)(\\s+)(:)(\\s+)', bygroups(Keyword, Whitespace, Punctuation, Whitespace), 'class'), ('((?:(?:' + modifiers + '|fun)\\s+)*)(class|interface|object)(\\s+)', bygroups(using(this, state='modifiers'), Keyword.Declaration, Whitespace), 'class'), ('(var|val)(\\s+)(\\()', bygroups(Keyword.Declaration, Whitespace, Punctuation), 'destructuring_assignment'), ('((?:(?:' + modifiers + ')\\s+)*)(var|val)(\\s+)', bygroups(using(this, state='modifiers'), Keyword.Declaration, Whitespace), 'variable'), ('((?:(?:' + modifiers + ')\\s+)*)(fun)(\\s+)', bygroups(using(this, state='modifiers'), Keyword.Declaration, Whitespace), 'function'), ('::|!!|\\?[:.]', Operator), ('[~^*!%&\\[\\]<>|+=/?-]', Operator), ('[{}();:.,]', Punctuation), ('"""', String, 'multiline_string'), ('"', String, 'string'), ("'\\\\.'|'[^\\\\]'", String.Char), ('[0-9](\\.[0-9]*)?([eE][+-][0-9]+)?[flFL]?|0[xX][0-9a-fA-F]+[Ll]?', Number), ('' + kt_id + '((\\?[^.])?)', Name)], 'class': [(kt_id, Name.Class, '#pop')], 'variable': [(kt_id, Name.Variable, '#pop')], 'destructuring_assignment': [(',', Punctuation), ('\\s+', Whitespace), (kt_id, Name.Variable), ('(:)(\\s+)(' + kt_id + ')', bygroups(Punctuation, Whitespace, Name)), ('<', Operator, 'generic'), ('\\)', Punctuation, '#pop')], 'function': [('<', Operator, 'generic'), ('' + kt_id + '(\\.)' + kt_id, bygroups(Name, Punctuation, Name.Function), '#pop'), (kt_id, Name.Function, '#pop')], 'generic': [('(>)(\\s*)', bygroups(Operator, Whitespace), '#pop'), (':', Punctuation), ('(reified|out|in)\\b', Keyword), (',', Punctuation), ('\\s+', Whitespace), (kt_id, Name)], 'modifiers': [('\\w+', Keyword.Declaration), ('\\s+', Whitespace), default('#pop')], 'string': [('"', String, '#pop'), include('string_common')], 'multiline_string': [('"""', String, '#pop'), ('"', String), include('string_common')], 'string_common': [('\\\\\\\\', String), ('\\\\"', String), ('\\\\', String), ('\\$\\{', String.Interpol, 'interpolation'), ('(\\$)(\\w+)', bygroups(String.Interpol, Name)), ('[^\\\\"$]+', String)], 'interpolation': [('"', String), ('\\$\\{', String.Interpol, 'interpolation'), ('\\{', Punctuation, 'scope'), ('\\}', String.Interpol, '#pop'), include('root')], 'scope': [('\\{', Punctuation, 'scope'), ('\\}', Punctuation, '#pop'), include('root')]}
  }

  class XtendLexer {
      + name = 'Xtend'
      + url = 'https://www.eclipse.org/xtend/'
      + aliases = ['xtend']
      + filenames = ['*.xtend']
      + mimetypes = ['text/x-xtend']
      + version_added = '1.6'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('^(\\s*(?:[a-zA-Z_][\\w.\\[\\]]*\\s+)+?)([a-zA-Z_$][\\w$]*)(\\s*)(\\()', bygroups(using(this), Name.Function, Whitespace, Operator)), ('[^\\S\\n]+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/\\*.*?\\*/', Comment.Multiline), ('@[a-zA-Z_][\\w.]*', Name.Decorator), ('(assert|break|case|catch|continue|default|do|else|finally|for|if|goto|instanceof|new|return|switch|this|throw|try|while|IF|ELSE|ELSEIF|ENDIF|FOR|ENDFOR|SEPARATOR|BEFORE|AFTER)\\b', Keyword), ('(def|abstract|const|enum|extends|final|implements|native|private|protected|public|static|strictfp|super|synchronized|throws|transient|volatile|val|var)\\b', Keyword.Declaration), ('(boolean|byte|char|double|float|int|long|short|void)\\b', Keyword.Type), ('(package)(\\s+)', bygroups(Keyword.Namespace, Whitespace)), ('(true|false|null)\\b', Keyword.Constant), ('(class|interface)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'class'), ('(import)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'import'), ("(''')", String, 'template'), ('(\\u00BB)', String, 'template'), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('[a-zA-Z_]\\w*:', Name.Label), ('[a-zA-Z_$]\\w*', Name), ('[~^*!%&\\[\\](){}<>\\|+=:;,./?-]', Operator), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+L?', Number.Integer), ('\\n', Whitespace)], 'class': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'import': [('[\\w.]+\\*?', Name.Namespace, '#pop')], 'template': [("'''", String, '#pop'), ('\\u00AB', String, '#pop'), ('.', String)]}
  }

  class PigLexer {
      + name = 'Pig'
      + url = 'https://pig.apache.org/'
      + aliases = ['pig']
      + filenames = ['*.pig']
      + mimetypes = ['text/x-pig']
      + version_added = '2.0'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('--.*', Comment), ('/\\*[\\w\\W]*?\\*/', Comment.Multiline), ('\\\\$', String.Escape), ('\\\\', Text), ("\\'(?:\\\\[ntbrf\\\\\\']|\\\\u[0-9a-f]{4}|[^\\'\\\\\\n\\r])*\\'", String), include('keywords'), include('types'), include('builtins'), include('punct'), include('operators'), ('[0-9]*\\.[0-9]+(e[0-9]+)?[fd]?', Number.Float), ('0x[0-9a-f]+', Number.Hex), ('[0-9]+L?', Number.Integer), ('\\n', Whitespace), ('([a-z_]\\w*)(\\s*)(\\()', bygroups(Name.Function, Whitespace, Punctuation)), ('[()#:]', Text), ('[^(:#\\\'")\\s]+', Text), ('\\S+\\s+', Text)], 'keywords': [('(assert|and|any|all|arrange|as|asc|bag|by|cache|CASE|cat|cd|cp|%declare|%default|define|dense|desc|describe|distinct|du|dump|eval|exex|explain|filter|flatten|foreach|full|generate|group|help|if|illustrate|import|inner|input|into|is|join|kill|left|limit|load|ls|map|matches|mkdir|mv|not|null|onschema|or|order|outer|output|parallel|pig|pwd|quit|register|returns|right|rm|rmf|rollup|run|sample|set|ship|split|stderr|stdin|stdout|store|stream|through|union|using|void)\\b', Keyword)], 'builtins': [('(AVG|BinStorage|cogroup|CONCAT|copyFromLocal|copyToLocal|COUNT|cross|DIFF|MAX|MIN|PigDump|PigStorage|SIZE|SUM|TextLoader|TOKENIZE)\\b', Name.Builtin)], 'types': [('(bytearray|BIGINTEGER|BIGDECIMAL|chararray|datetime|double|float|int|long|tuple)\\b', Keyword.Type)], 'punct': [('[;(){}\\[\\]]', Punctuation)], 'operators': [('[#=,./%+\\-?]', Operator), ('(eq|gt|lt|gte|lte|neq|matches)\\b', Operator), ('(==|<=|<|>=|>|!=)', Operator)]}
  }

  class GoloLexer {
      + name = 'Golo'
      + url = 'http://golo-lang.org/'
      + filenames = ['*.golo']
      + aliases = ['golo']
      + version_added = '2.0'
      + tokens = {'root': [('[^\\S\\n]+', Whitespace), ('#.*$', Comment), ('(\\^|\\.\\.\\.|:|\\?:|->|==|!=|=|\\+|\\*|%|/|<=|<|>=|>|=|\\.)', Operator), ('(?<=[^-])(-)(?=[^-])', Operator), ('(?<=[^`])(is|isnt|and|or|not|oftype|in|orIfNull)\\b', Operator.Word), ('[]{}|(),[]', Punctuation), ('(module|import)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'modname'), ('\\b([a-zA-Z_][\\w$.]*)(::)', bygroups(Name.Namespace, Punctuation)), ('\\b([a-zA-Z_][\\w$]*(?:\\.[a-zA-Z_][\\w$]*)+)\\b', Name.Namespace), ('(let|var)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'varname'), ('(struct)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'structname'), ('(function)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'funcname'), ('(null|true|false)\\b', Keyword.Constant), ('(augment|pimp|if|else|case|match|return|case|when|then|otherwise|while|for|foreach|try|catch|finally|throw|local|continue|break)\\b', Keyword), ('(map|array|list|set|vector|tuple)(\\[)', bygroups(Name.Builtin, Punctuation)), ('(print|println|readln|raise|fun|asInterfaceInstance)\\b', Name.Builtin), ('(`?[a-zA-Z_][\\w$]*)(\\()', bygroups(Name.Function, Punctuation)), ('-?[\\d_]*\\.[\\d_]*([eE][+-]?\\d[\\d_]*)?F?', Number.Float), ('0[0-7]+j?', Number.Oct), ('0[xX][a-fA-F0-9]+', Number.Hex), ('-?\\d[\\d_]*L', Number.Integer.Long), ('-?\\d[\\d_]*', Number.Integer), ('`?[a-zA-Z_][\\w$]*', Name), ('@[a-zA-Z_][\\w$.]*', Name.Decorator), ('"""', String, combined('stringescape', 'triplestring')), ('"', String, combined('stringescape', 'doublestring')), ("'", String, combined('stringescape', 'singlestring')), ('----((.|\\n)*?)----', String.Doc)], 'funcname': [('`?[a-zA-Z_][\\w$]*', Name.Function, '#pop')], 'modname': [('[a-zA-Z_][\\w$.]*\\*?', Name.Namespace, '#pop')], 'structname': [('`?[\\w.]+\\*?', Name.Class, '#pop')], 'varname': [('`?[a-zA-Z_][\\w$]*', Name.Variable, '#pop')], 'string': [('[^\\\\\\\'"\\n]+', String), ('[\\\'"\\\\]', String)], 'stringescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'triplestring': [('"""', String, '#pop'), include('string'), ('\\n', String)], 'doublestring': [('"', String.Double, '#pop'), include('string')], 'singlestring': [("'", String, '#pop'), include('string')], 'operators': [('[#=,./%+\\-?]', Operator), ('(eq|gt|lt|gte|lte|neq|matches)\\b', Operator), ('(==|<=|<|>=|>|!=)', Operator)]}
  }

  class JasminLexer {
      + name = 'Jasmin'
      + url = 'http://jasmin.sourceforge.net/'
      + aliases = ['jasmin', 'jasminxt']
      + filenames = ['*.j']
      + version_added = '2.0'
      + tokens = {'default': [('\\n', Whitespace, '#pop'), ("'", String.Single, ('#pop', 'quote')), ('"', String.Double, 'string'), ('=', Punctuation), (':', Punctuation, 'label'), (_ws, Whitespace), (';.*', Comment.Single), (f'(\\$[-+])?0x-?[\\da-fA-F]+{_break}', Number.Hex), (f'(\\$[-+]|\\+)?-?\\d+{_break}', Number.Integer), (f'-?(\\d+\\.\\d*|\\.\\d+)([eE][-+]?\\d+)?[fFdD]?[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f]*{_break}', Number.Float), (f'\\${_name}', Name.Variable), (f'\\.annotation{_break}', Keyword.Reserved, 'annotation'), (f'(\\.attribute|\\.bytecode|\\.debug|\\.deprecated|\\.enclosing|\\.interface|\\.line|\\.signature|\\.source|\\.stack|\\.var|abstract|annotation|bridge|class|default|enum|field|final|fpstrict|interface|native|private|protected|public|signature|static|synchronized|synthetic|transient|varargs|volatile){_break}', Keyword.Reserved), (f'\\.catch{_break}', Keyword.Reserved, 'caught-exception'), (f'(\\.class|\\.implements|\\.inner|\\.super|inner|invisible|invisibleparam|outer|visible|visibleparam){_break}', Keyword.Reserved, 'class/convert-dots'), (f'\\.field{_break}', Keyword.Reserved, ('descriptor/convert-dots', 'field')), (f'(\\.end|\\.limit|use){_break}', Keyword.Reserved, 'no-verification'), (f'\\.method{_break}', Keyword.Reserved, 'method'), (f'\\.set{_break}', Keyword.Reserved, 'var'), (f'\\.throws{_break}', Keyword.Reserved, 'exception'), (f'(from|offset|to|using){_break}', Keyword.Reserved, 'label'), (f'is{_break}', Keyword.Reserved, ('descriptor/convert-dots', 'var')), (f'(locals|stack){_break}', Keyword.Reserved, 'verification'), (f'method{_break}', Keyword.Reserved, 'enclosing-method'), (words(('aaload', 'aastore', 'aconst_null', 'aload', 'aload_0', 'aload_1', 'aload_2', 'aload_3', 'aload_w', 'areturn', 'arraylength', 'astore', 'astore_0', 'astore_1', 'astore_2', 'astore_3', 'astore_w', 'athrow', 'baload', 'bastore', 'bipush', 'breakpoint', 'caload', 'castore', 'd2f', 'd2i', 'd2l', 'dadd', 'daload', 'dastore', 'dcmpg', 'dcmpl', 'dconst_0', 'dconst_1', 'ddiv', 'dload', 'dload_0', 'dload_1', 'dload_2', 'dload_3', 'dload_w', 'dmul', 'dneg', 'drem', 'dreturn', 'dstore', 'dstore_0', 'dstore_1', 'dstore_2', 'dstore_3', 'dstore_w', 'dsub', 'dup', 'dup2', 'dup2_x1', 'dup2_x2', 'dup_x1', 'dup_x2', 'f2d', 'f2i', 'f2l', 'fadd', 'faload', 'fastore', 'fcmpg', 'fcmpl', 'fconst_0', 'fconst_1', 'fconst_2', 'fdiv', 'fload', 'fload_0', 'fload_1', 'fload_2', 'fload_3', 'fload_w', 'fmul', 'fneg', 'frem', 'freturn', 'fstore', 'fstore_0', 'fstore_1', 'fstore_2', 'fstore_3', 'fstore_w', 'fsub', 'i2b', 'i2c', 'i2d', 'i2f', 'i2l', 'i2s', 'iadd', 'iaload', 'iand', 'iastore', 'iconst_0', 'iconst_1', 'iconst_2', 'iconst_3', 'iconst_4', 'iconst_5', 'iconst_m1', 'idiv', 'iinc', 'iinc_w', 'iload', 'iload_0', 'iload_1', 'iload_2', 'iload_3', 'iload_w', 'imul', 'ineg', 'int2byte', 'int2char', 'int2short', 'ior', 'irem', 'ireturn', 'ishl', 'ishr', 'istore', 'istore_0', 'istore_1', 'istore_2', 'istore_3', 'istore_w', 'isub', 'iushr', 'ixor', 'l2d', 'l2f', 'l2i', 'ladd', 'laload', 'land', 'lastore', 'lcmp', 'lconst_0', 'lconst_1', 'ldc2_w', 'ldiv', 'lload', 'lload_0', 'lload_1', 'lload_2', 'lload_3', 'lload_w', 'lmul', 'lneg', 'lookupswitch', 'lor', 'lrem', 'lreturn', 'lshl', 'lshr', 'lstore', 'lstore_0', 'lstore_1', 'lstore_2', 'lstore_3', 'lstore_w', 'lsub', 'lushr', 'lxor', 'monitorenter', 'monitorexit', 'nop', 'pop', 'pop2', 'ret', 'ret_w', 'return', 'saload', 'sastore', 'sipush', 'swap'), suffix=_break), Keyword.Reserved), (f'(anewarray|checkcast|instanceof|ldc|ldc_w|new){_break}', Keyword.Reserved, 'class/no-dots'), (f'invoke(dynamic|interface|nonvirtual|special|static|virtual){_break}', Keyword.Reserved, 'invocation'), (f'(getfield|putfield){_break}', Keyword.Reserved, ('descriptor/no-dots', 'field')), (f'(getstatic|putstatic){_break}', Keyword.Reserved, ('descriptor/no-dots', 'static')), (words(('goto', 'goto_w', 'if_acmpeq', 'if_acmpne', 'if_icmpeq', 'if_icmpge', 'if_icmpgt', 'if_icmple', 'if_icmplt', 'if_icmpne', 'ifeq', 'ifge', 'ifgt', 'ifle', 'iflt', 'ifne', 'ifnonnull', 'ifnull', 'jsr', 'jsr_w'), suffix=_break), Keyword.Reserved, 'label'), (f'(multianewarray|newarray){_break}', Keyword.Reserved, 'descriptor/convert-dots'), (f'tableswitch{_break}', Keyword.Reserved, 'table')], 'quote': [("'", String.Single, '#pop'), ('\\\\u[\\da-fA-F]{4}', String.Escape), ("[^'\\\\]+", String.Single)], 'string': [('"', String.Double, '#pop'), ('\\\\([nrtfb"\\\'\\\\]|u[\\da-fA-F]{4}|[0-3]?[0-7]{1,2})', String.Escape), ('[^"\\\\]+', String.Double)], 'root': [('\\n+', Whitespace), ("'", String.Single, 'quote'), include('default'), (f'({_name})([ \\t\\r]*)(:)', bygroups(Name.Label, Whitespace, Punctuation)), (_name, String.Other)], 'annotation': [('\\n', Whitespace, ('#pop', 'annotation-body')), (f'default{_break}', Keyword.Reserved, ('#pop', 'annotation-default')), include('default')], 'annotation-body': [('\\n+', Whitespace), (f'\\.end{_break}', Keyword.Reserved, '#pop'), include('default'), (_name, String.Other, ('annotation-items', 'descriptor/no-dots'))], 'annotation-default': [('\\n+', Whitespace), (f'\\.end{_break}', Keyword.Reserved, '#pop'), include('default'), default(('annotation-items', 'descriptor/no-dots'))], 'annotation-items': [("'", String.Single, 'quote'), include('default'), (_name, String.Other)], 'caught-exception': [(f'all{_break}', Keyword, '#pop'), include('exception')], 'class/convert-dots': [include('default'), (f'(L)((?:{_unqualified_name}[/.])*)({_name})(;)', bygroups(Keyword.Type, Name.Namespace, Name.Class, Punctuation), '#pop'), (f'((?:{_unqualified_name}[/.])*)({_name})', bygroups(Name.Namespace, Name.Class), '#pop')], 'class/no-dots': [include('default'), ('\\[+', Punctuation, ('#pop', 'descriptor/no-dots')), (f'(L)((?:{_unqualified_name}/)*)({_name})(;)', bygroups(Keyword.Type, Name.Namespace, Name.Class, Punctuation), '#pop'), (f'((?:{_unqualified_name}/)*)({_name})', bygroups(Name.Namespace, Name.Class), '#pop')], 'descriptor/convert-dots': [include('default'), ('\\[+', Punctuation), (f'(L)((?:{_unqualified_name}[/.])*)({_name}?)(;)', bygroups(Keyword.Type, Name.Namespace, Name.Class, Punctuation), '#pop'), (f'[^{_separator}\\[)L]+', Keyword.Type, '#pop'), default('#pop')], 'descriptor/no-dots': [include('default'), ('\\[+', Punctuation), (f'(L)((?:{_unqualified_name}/)*)({_name})(;)', bygroups(Keyword.Type, Name.Namespace, Name.Class, Punctuation), '#pop'), (f'[^{_separator}\\[)L]+', Keyword.Type, '#pop'), default('#pop')], 'descriptors/convert-dots': [('\\)', Punctuation, '#pop'), default('descriptor/convert-dots')], 'enclosing-method': [(_ws, Whitespace), (f'(?=[^{_separator}]*\\()', Text, ('#pop', 'invocation')), default(('#pop', 'class/convert-dots'))], 'exception': [include('default'), (f'((?:{_unqualified_name}[/.])*)({_name})', bygroups(Name.Namespace, Name.Exception), '#pop')], 'field': [(f'static{_break}', Keyword.Reserved, ('#pop', 'static')), include('default'), (f'((?:{_unqualified_name}[/.](?=[^{_separator}]*[/.]))*)({_unqualified_name}[/.])?({_name})', bygroups(Name.Namespace, Name.Class, Name.Variable.Instance), '#pop')], 'invocation': [include('default'), (f'((?:{_unqualified_name}[/.](?=[^{_separator}(]*[/.]))*)({_unqualified_name}[/.])?({_name})(\\()', bygroups(Name.Namespace, Name.Class, Name.Function, Punctuation), ('#pop', 'descriptor/convert-dots', 'descriptors/convert-dots', 'descriptor/convert-dots'))], 'label': [include('default'), (_name, Name.Label, '#pop')], 'method': [include('default'), (f'({_name})(\\()', bygroups(Name.Function, Punctuation), ('#pop', 'descriptor/convert-dots', 'descriptors/convert-dots', 'descriptor/convert-dots'))], 'no-verification': [(f'(locals|method|stack){_break}', Keyword.Reserved, '#pop'), include('default')], 'static': [include('default'), (f'((?:{_unqualified_name}[/.](?=[^{_separator}]*[/.]))*)({_unqualified_name}[/.])?({_name})', bygroups(Name.Namespace, Name.Class, Name.Variable.Class), '#pop')], 'table': [('\\n+', Whitespace), (f'default{_break}', Keyword.Reserved, '#pop'), include('default'), (_name, Name.Label)], 'var': [include('default'), (_name, Name.Variable, '#pop')], 'verification': [include('default'), (f'(Double|Float|Integer|Long|Null|Top|UninitializedThis){_break}', Keyword, '#pop'), (f'Object{_break}', Keyword, ('#pop', 'class/no-dots')), (f'Uninitialized{_break}', Keyword, ('#pop', 'label'))]}
  --
      + analyse_text(text)
  }

  class SarlLexer {
      + name = 'SARL'
      + url = 'http://www.sarl.io'
      + aliases = ['sarl']
      + filenames = ['*.sarl']
      + mimetypes = ['text/x-sarl']
      + version_added = '2.4'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('^(\\s*(?:[a-zA-Z_][\\w.\\[\\]]*\\s+)+?)([a-zA-Z_$][\\w$]*)(\\s*)(\\()', bygroups(using(this), Name.Function, Whitespace, Operator)), ('[^\\S\\n]+', Whitespace), ('(//.*?)(\\n)', bygroups(Comment.Single, Whitespace)), ('/\\*.*?\\*/', Comment.Multiline), ('@[a-zA-Z_][\\w.]*', Name.Decorator), ('(as|break|case|catch|default|do|else|extends|extension|finally|fires|for|if|implements|instanceof|new|on|requires|return|super|switch|throw|throws|try|typeof|uses|while|with)\\b', Keyword), ('(abstract|def|dispatch|final|native|override|private|protected|public|static|strictfp|synchronized|transient|val|var|volatile)\\b', Keyword.Declaration), ('(boolean|byte|char|double|float|int|long|short|void)\\b', Keyword.Type), ('(package)(\\s+)', bygroups(Keyword.Namespace, Whitespace)), ('(false|it|null|occurrence|this|true|void)\\b', Keyword.Constant), ('(agent|annotation|artifact|behavior|capacity|class|enum|event|interface|skill|space)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'class'), ('(import)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'import'), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('[a-zA-Z_]\\w*:', Name.Label), ('[a-zA-Z_$]\\w*', Name), ('[~^*!%&\\[\\](){}<>\\|+=:;,./?-]', Operator), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+L?', Number.Integer), ('\\n', Whitespace)], 'class': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'import': [('[\\w.]+\\*?', Name.Namespace, '#pop')]}
  }

  class KuinLexer {
      + name = 'Kuin'
      + url = 'https://github.com/kuina/Kuin'
      + aliases = ['kuin']
      + filenames = ['*.kn']
      + version_added = '2.9'
      + tokens = {'root': [include('statement')], 'statement': [include('whitespace'), ('(\\+?)([ \\t]*)(\\*?)([ \\t]*)(\\bfunc)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)([a-zA-Z_][0-9a-zA-Z_]*)', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword, using(this), Name.Function), 'func_'), ('\\b(class)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)([a-zA-Z_][0-9a-zA-Z_]*)', bygroups(Keyword, using(this), Name.Class), 'class_'), ('\\b(enum)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)([a-zA-Z_][0-9a-zA-Z_]*)', bygroups(Keyword, using(this), Name.Constant), 'enum_'), ('\\b(block)\\b(?:([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)([a-zA-Z_][0-9a-zA-Z_]*))?', bygroups(Keyword, using(this), Name.Other), 'block_'), ('\\b(ifdef)\\b(?:([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)([a-zA-Z_][0-9a-zA-Z_]*))?', bygroups(Keyword, using(this), Name.Other), 'ifdef_'), ('\\b(if)\\b(?:([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)([a-zA-Z_][0-9a-zA-Z_]*))?', bygroups(Keyword, using(this), Name.Other), 'if_'), ('\\b(switch)\\b(?:([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)([a-zA-Z_][0-9a-zA-Z_]*))?', bygroups(Keyword, using(this), Name.Other), 'switch_'), ('\\b(while)\\b(?:([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)([a-zA-Z_][0-9a-zA-Z_]*))?', bygroups(Keyword, using(this), Name.Other), 'while_'), ('\\b(for)\\b(?:([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)([a-zA-Z_][0-9a-zA-Z_]*))?', bygroups(Keyword, using(this), Name.Other), 'for_'), ('\\b(foreach)\\b(?:([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)([a-zA-Z_][0-9a-zA-Z_]*))?', bygroups(Keyword, using(this), Name.Other), 'foreach_'), ('\\b(try)\\b(?:([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)([a-zA-Z_][0-9a-zA-Z_]*))?', bygroups(Keyword, using(this), Name.Other), 'try_'), ('\\b(do)\\b', Keyword, 'do'), ('(\\+?[ \\t]*\\bvar)\\b', Keyword, 'var'), ('\\b(const)\\b', Keyword, 'const'), ('\\b(ret)\\b', Keyword, 'ret'), ('\\b(throw)\\b', Keyword, 'throw'), ('\\b(alias)\\b', Keyword, 'alias'), ('\\b(assert)\\b', Keyword, 'assert'), ('\\|', Text, 'continued_line'), ('[ \\t]*\\n', Whitespace)], 'whitespace': [('^([ \\t]*)(;.*)', bygroups(Comment.Single, Whitespace)), ('[ \\t]+(?![; \\t])', Whitespace), ('\\{', Comment.Multiline, 'multiline_comment')], 'multiline_comment': [('\\{', Comment.Multiline, 'multiline_comment'), ('(?:\\s*;.*|[^{}\\n]+)', Comment.Multiline), ('\\n', Comment.Multiline), ('\\}', Comment.Multiline, '#pop')], 'func_': [include('expr'), ('\\n', Whitespace, 'func')], 'func': [('\\b(end)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)(func)\\b', bygroups(Keyword, using(this), Keyword), '#pop:2'), include('statement')], 'class_': [include('expr'), ('\\n', Whitespace, 'class')], 'class': [('\\b(end)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)(class)\\b', bygroups(Keyword, using(this), Keyword), '#pop:2'), include('statement')], 'enum_': [include('expr'), ('\\n', Whitespace, 'enum')], 'enum': [('\\b(end)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)(enum)\\b', bygroups(Keyword, using(this), Keyword), '#pop:2'), include('expr'), ('\\n', Whitespace)], 'block_': [include('expr'), ('\\n', Whitespace, 'block')], 'block': [('\\b(end)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)(block)\\b', bygroups(Keyword, using(this), Keyword), '#pop:2'), include('statement'), include('break'), include('skip')], 'ifdef_': [include('expr'), ('\\n', Whitespace, 'ifdef')], 'ifdef': [('\\b(end)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)(ifdef)\\b', bygroups(Keyword, using(this), Keyword), '#pop:2'), (words(('rls', 'dbg'), prefix='\\b', suffix='\\b'), Keyword.Constant, 'ifdef_sp'), include('statement'), include('break'), include('skip')], 'ifdef_sp': [include('expr'), ('\\n', Whitespace, '#pop')], 'if_': [include('expr'), ('\\n', Whitespace, 'if')], 'if': [('\\b(end)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)(if)\\b', bygroups(Keyword, using(this), Keyword), '#pop:2'), (words(('elif', 'else'), prefix='\\b', suffix='\\b'), Keyword, 'if_sp'), include('statement'), include('break'), include('skip')], 'if_sp': [include('expr'), ('\\n', Whitespace, '#pop')], 'switch_': [include('expr'), ('\\n', Whitespace, 'switch')], 'switch': [('\\b(end)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)(switch)\\b', bygroups(Keyword, using(this), Keyword), '#pop:2'), (words(('case', 'default', 'to'), prefix='\\b', suffix='\\b'), Keyword, 'switch_sp'), include('statement'), include('break'), include('skip')], 'switch_sp': [include('expr'), ('\\n', Whitespace, '#pop')], 'while_': [include('expr'), ('\\n', Whitespace, 'while')], 'while': [('\\b(end)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)(while)\\b', bygroups(Keyword, using(this), Keyword), '#pop:2'), include('statement'), include('break'), include('skip')], 'for_': [include('expr'), ('\\n', Whitespace, 'for')], 'for': [('\\b(end)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)(for)\\b', bygroups(Keyword, using(this), Keyword), '#pop:2'), include('statement'), include('break'), include('skip')], 'foreach_': [include('expr'), ('\\n', Whitespace, 'foreach')], 'foreach': [('\\b(end)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)(foreach)\\b', bygroups(Keyword, using(this), Keyword), '#pop:2'), include('statement'), include('break'), include('skip')], 'try_': [include('expr'), ('\\n', Whitespace, 'try')], 'try': [('\\b(end)([ \\t]+(?:\\n\\s*\\|)*[ \\t]*)(try)\\b', bygroups(Keyword, using(this), Keyword), '#pop:2'), (words(('catch', 'finally', 'to'), prefix='\\b', suffix='\\b'), Keyword, 'try_sp'), include('statement'), include('break'), include('skip')], 'try_sp': [include('expr'), ('\\n', Whitespace, '#pop')], 'break': [('\\b(break)\\b([ \\t]+)([a-zA-Z_][0-9a-zA-Z_]*)', bygroups(Keyword, using(this), Name.Other))], 'skip': [('\\b(skip)\\b([ \\t]+)([a-zA-Z_][0-9a-zA-Z_]*)', bygroups(Keyword, using(this), Name.Other))], 'alias': [include('expr'), ('\\n', Whitespace, '#pop')], 'assert': [include('expr'), ('\\n', Whitespace, '#pop')], 'const': [include('expr'), ('\\n', Whitespace, '#pop')], 'do': [include('expr'), ('\\n', Whitespace, '#pop')], 'ret': [include('expr'), ('\\n', Whitespace, '#pop')], 'throw': [include('expr'), ('\\n', Whitespace, '#pop')], 'var': [include('expr'), ('\\n', Whitespace, '#pop')], 'continued_line': [include('expr'), ('\\n', Whitespace, '#pop')], 'expr': [include('whitespace'), ('\\(', Punctuation), ('\\)', Punctuation), ('\\[', Punctuation), ('\\]', Punctuation), (',', Punctuation), (words(('true', 'false', 'null', 'inf'), prefix='\\b', suffix='\\b'), Keyword.Constant), (words('me', prefix='\\b', suffix='\\b'), Keyword), (words(('bit16', 'bit32', 'bit64', 'bit8', 'bool', 'char', 'class', 'dict', 'enum', 'float', 'func', 'int', 'list', 'queue', 'stack'), prefix='\\b', suffix='\\b'), Keyword.Type), ('\\b[0-9]\\.[0-9]+(?!\\.)(:?e[\\+-][0-9]+)?\\b', Number.Float), ('\\b2#[01]+(?:b(?:8|16|32|64))?\\b', Number.Bin), ('\\b8#[0-7]+(?:b(?:8|16|32|64))?\\b', Number.Oct), ('\\b16#[0-9A-F]+(?:b(?:8|16|32|64))?\\b', Number.Hex), ('\\b[0-9]+(?:b(?:8|16|32|64))?\\b', Number.Decimal), ('"', String.Double, 'string'), ("'(?:\\\\.|.)+?'", String.Char), ('(?:\\.|\\$(?:>|<)?)', Operator), ('(?:\\^)', Operator), ('(?:\\+|-|!|##?)', Operator), ('(?:\\*|/|%)', Operator), ('(?:~)', Operator), ('(?:(?:=|<>)(?:&|\\$)?|<=?|>=?)', Operator), ('(?:&)', Operator), ('(?:\\|)', Operator), ('(?:\\?)', Operator), ('(?::(?::|\\+|-|\\*|/|%|\\^|~)?)', Operator), ('\\b([a-zA-Z_][0-9a-zA-Z_]*)(?=@)\\b', Name), ('(@)?\\b([a-zA-Z_][0-9a-zA-Z_]*)\\b', bygroups(Name.Other, Name.Variable))], 'string': [('(?:\\\\[^{\\n]|[^"\\\\])+', String.Double), ('\\\\\\{', String.Double, 'toStrInString'), ('"', String.Double, '#pop')], 'toStrInString': [include('expr'), ('\\}', String.Double, '#pop')]}
  }

  class KustoLexer {
      + name = 'Kusto'
      + aliases = ['kql', 'kusto']
      + filenames = ['*.kql', '*.kusto', '.csl']
      + url = 'https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query'
      + version_added = '2.17'
      + tokens = {'root': [('\\s+', Whitespace), (words(KUSTO_KEYWORDS, suffix='\\b'), Keyword), ('//.*', Comment), (words(KUSTO_PUNCTUATION), Punctuation), ('[^\\W\\d]\\w*', Name), ('\\d+[.]\\d*|[.]\\d+', Number.Float), ('\\d+', Number.Integer), ("'", String, 'single_string'), ('"', String, 'double_string'), ("@'", String, 'single_verbatim'), ('@"', String, 'double_verbatim'), ('```', String, 'multi_string')], 'single_string': [("'", String, '#pop'), ('\\\\.', String.Escape), ("[^'\\\\]+", String)], 'double_string': [('"', String, '#pop'), ('\\\\.', String.Escape), ('[^"\\\\]+', String)], 'single_verbatim': [("'", String, '#pop'), ("[^']+", String)], 'double_verbatim': [('"', String, '#pop'), ('[^"]+', String)], 'multi_string': [('[^`]+', String), ('```', String, '#pop'), ('`', String)]}
  }

  class LdifLexer {
      + name = 'LDIF'
      + aliases = ['ldif']
      + filenames = ['*.ldif']
      + mimetypes = ['text/x-ldif']
      + url = 'https://datatracker.ietf.org/doc/html/rfc2849'
      + version_added = '2.17'
      + tokens = {'root': [('\\s*\\n', Whitespace), ('(-)(\\n)', bygroups(Punctuation, Whitespace)), ('(#.*)(\\n)', bygroups(Comment.Single, Whitespace)), ('(version)(:)([ \\t]*)(.*)([ \\t]*\\n)', bygroups(Keyword, Punctuation, Whitespace, Number.Integer, Whitespace)), ('(control)(:)([ \\t]*)([\\.0-9]+)([ \\t]+)((?:true|false)?)([ \\t]*)', bygroups(Keyword, Punctuation, Whitespace, Name.Other, Whitespace, Keyword, Whitespace), 'after-control'), ('(deleteoldrdn)(:)([ \\n]*)([0-1]+)([ \\t]*\\n)', bygroups(Keyword, Punctuation, Whitespace, Number, Whitespace)), ('(add|delete|replace)(::?)(\\s*)(.*)([ \\t]*\\n)', bygroups(Keyword, Punctuation, Whitespace, Name.Attribute, Whitespace)), ('(changetype)(:)([ \\t]*)([a-z]*)([ \\t]*\\n)', bygroups(Keyword, Punctuation, Whitespace, Keyword, Whitespace)), ('(dn|newrdn)(::)', bygroups(Keyword, Punctuation), 'base64-dn'), ('(dn|newrdn)(:)', bygroups(Keyword, Punctuation), 'dn'), ('(objectclass)(:)([ \\t]*)([^ \\t\\n]*)([ \\t]*\\n)', bygroups(Keyword, Punctuation, Whitespace, Name.Class, Whitespace)), ('([a-zA-Z]*|[0-9][0-9\\.]*[0-9])(;)', bygroups(Name.Attribute, Punctuation), 'property'), ('([a-zA-Z]*|[0-9][0-9\\.]*[0-9])(:<)', bygroups(Name.Attribute, Punctuation), 'url'), ('([a-zA-Z]*|[0-9][0-9\\.]*[0-9])(::?)', bygroups(Name.Attribute, Punctuation), 'value')], 'after-control': [(':<', Punctuation, ('#pop', 'url')), ('::?', Punctuation, ('#pop', 'value')), default('#pop')], 'property': [('([-a-zA-Z0-9]*)(;)', bygroups(Name.Property, Punctuation)), ('([-a-zA-Z0-9]*)(:<)', bygroups(Name.Property, Punctuation), ('#pop', 'url')), ('([-a-zA-Z0-9]*)(::?)', bygroups(Name.Property, Punctuation), ('#pop', 'value'))], 'value': [('(\\s*)([^\\n]+\\S)(\\n )', bygroups(Whitespace, String, Whitespace)), ('(\\s*)([^\\n]+\\S)(\\n)', bygroups(Whitespace, String, Whitespace), '#pop')], 'url': [('([ \\t]*)(\\S*)([ \\t]*\\n )', bygroups(Whitespace, Comment.PreprocFile, Whitespace)), ('([ \\t]*)(\\S*)([ \\t]*\\n)', bygroups(Whitespace, Comment.PreprocFile, Whitespace), '#pop')], 'dn': [('([ \\t]*)([-a-zA-Z0-9\\.]+)(=)', bygroups(Whitespace, Name.Attribute, Operator), ('#pop', 'dn-value'))], 'dn-value': [('\\\\[^\\n]', Escape), (',', Punctuation, ('#pop', 'dn')), ('\\+', Operator, ('#pop', 'dn')), ('[^,\\+\\n]+', String), ('\\n ', Whitespace), ('\\n', Whitespace, '#pop')], 'base64-dn': [('([ \\t]*)([^ \\t\\n][^ \\t\\n]*[^\\n])([ \\t]*\\n )', bygroups(Whitespace, Name, Whitespace)), ('([ \\t]*)([^ \\t\\n][^ \\t\\n]*[^\\n])([ \\t]*\\n)', bygroups(Whitespace, Name, Whitespace), '#pop')]}
  }

  class LdaprcLexer {
      + name = 'LDAP configuration file'
      + aliases = ['ldapconf', 'ldaprc']
      + filenames = ['.ldaprc', 'ldaprc', 'ldap.conf']
      + mimetypes = ['text/x-ldapconf']
      + url = 'https://www.openldap.org/software//man.cgi?query=ldap.conf&sektion=5&apropos=0&manpath=OpenLDAP+2.4-Release'
      + version_added = '2.17'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [('#.*', Comment.Single), ('\\s+', Whitespace), (f'({_boolean_keywords})(\\s+)(on|true|yes|off|false|no)$', bygroups(Keyword, Whitespace, Keyword.Constant)), (f'({_integer_keywords})(\\s+)(\\d+)', bygroups(Keyword, Whitespace, Number.Integer)), ('(VERSION)(\\s+)(2|3)', bygroups(Keyword, Whitespace, Number.Integer)), ('(DEREF)(\\s+)(never|searching|finding|always)', bygroups(Keyword, Whitespace, Keyword.Constant)), (f'(SASL_SECPROPS)(\\s+)((?:{_secprops})(?:,{_secprops})*)', bygroups(Keyword, Whitespace, Keyword.Constant)), ('(SASL_CBINDING)(\\s+)(none|tls-unique|tls-endpoint)', bygroups(Keyword, Whitespace, Keyword.Constant)), ('(TLS_REQ(?:CERT|SAN))(\\s+)(allow|demand|hard|never|try)', bygroups(Keyword, Whitespace, Keyword.Constant)), ('(TLS_CRLCHECK)(\\s+)(none|peer|all)', bygroups(Keyword, Whitespace, Keyword.Constant)), ('(BASE|BINDDN)(\\s+)(\\S+)$', bygroups(Keyword, Whitespace, Literal)), ('(HOST)(\\s+)([a-z0-9]+)((?::(\\d+))?)', bygroups(Keyword, Whitespace, Literal, Number.Integer)), (f'({_literal_keywords})(\\s+)(\\S+)$', bygroups(Keyword, Whitespace, Literal))]}
  }

  class Lean3Lexer {
      + name = 'Lean'
      + url = 'https://leanprover-community.github.io/lean3'
      + aliases = ['lean', 'lean3']
      + filenames = ['*.lean']
      + mimetypes = ['text/x-lean', 'text/x-lean3']
      + version_added = '2.0'
      + tokens = {'expression': [('\\s+', Whitespace), ('/--', String.Doc, 'docstring'), ('/-', Comment, 'comment'), ('--.*?$', Comment.Single), (words(('forall', 'fun', 'Pi', 'from', 'have', 'show', 'assume', 'suffices', 'let', 'if', 'else', 'then', 'in', 'with', 'calc', 'match', 'do'), prefix='\\b', suffix='\\b'), Keyword), (words(('sorry', 'admit'), prefix='\\b', suffix='\\b'), Generic.Error), (words(('Sort', 'Prop', 'Type'), prefix='\\b', suffix='\\b'), Keyword.Type), (words(('(', ')', ':', '{', '}', '[', ']', '⟨', '⟩', '‹', '›', '⦃', '⦄', ':=', ',')), Operator), (_name, Name), ('``?' + _name, String.Symbol), ('0x[A-Za-z0-9]+', Number.Integer), ('0b[01]+', Number.Integer), ('\\d+', Number.Integer), ('"', String.Double, 'string'), ('\'(?:(\\\\[\\\\\\"\'nt])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4})|.)\'', String.Char), ("[~?][a-z][\\w\\']*:", Name.Variable), ('\\S', Name.Builtin.Pseudo)], 'root': [(words(('import', 'renaming', 'hiding', 'namespace', 'local', 'private', 'protected', 'section', 'include', 'omit', 'section', 'protected', 'export', 'open', 'attribute'), prefix='\\b', suffix='\\b'), Keyword.Namespace), (words(('lemma', 'theorem', 'def', 'definition', 'example', 'axiom', 'axioms', 'constant', 'constants', 'universe', 'universes', 'inductive', 'coinductive', 'structure', 'extends', 'class', 'instance', 'abbreviation', 'noncomputable theory', 'noncomputable', 'mutual', 'meta', 'attribute', 'parameter', 'parameters', 'variable', 'variables', 'reserve', 'precedence', 'postfix', 'prefix', 'notation', 'infix', 'infixl', 'infixr', 'begin', 'by', 'end', 'set_option', 'run_cmd'), prefix='\\b', suffix='\\b'), Keyword.Declaration), ('@\\[', Keyword.Declaration, 'attribute'), (words(('#eval', '#check', '#reduce', '#exit', '#print', '#help'), suffix='\\b'), Keyword), include('expression')], 'attribute': [('\\]', Keyword.Declaration, '#pop'), include('expression')], 'comment': [('[^/-]+', Comment.Multiline), ('/-', Comment.Multiline, '#push'), ('-/', Comment.Multiline, '#pop'), ('[/-]', Comment.Multiline)], 'docstring': [('[^/-]+', String.Doc), ('-/', String.Doc, '#pop'), ('[/-]', String.Doc)], 'string': [('[^\\\\"]+', String.Double), ('(?:(\\\\[\\\\\\"\'nt])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4}))', String.Escape), ('"', String.Double, '#pop')]}
  --
      + analyse_text(text)
  }

  class Lean4Lexer {
      + name = 'Lean4'
      + url = 'https://github.com/leanprover/lean4'
      + aliases = ['lean4']
      + filenames = ['*.lean']
      + mimetypes = ['text/x-lean4']
      + version_added = '2.18'
      + keywords1 = ('import', 'unif_hint', 'renaming', 'inline', 'hiding', 'lemma', 'variable', 'theorem', 'axiom', 'inductive', 'structure', 'universe', 'alias', '#help', 'precedence', 'postfix', 'prefix', 'infix', 'infixl', 'infixr', 'notation', '#eval', '#check', '#reduce', '#exit', 'end', 'private', 'using', 'namespace', 'instance', 'section', 'protected', 'export', 'set_option', 'extends', 'open', 'example', '#print', 'opaque', 'def', 'macro', 'elab', 'syntax', 'macro_rules', '#reduce', 'where', 'abbrev', 'noncomputable', 'class', 'attribute', '#synth', 'mutual', 'scoped', 'local')
      + keywords2 = ('forall', 'fun', 'obtain', 'from', 'have', 'show', 'assume', 'let', 'if', 'else', 'then', 'by', 'in', 'with', 'calc', 'match', 'nomatch', 'do', 'at')
      + keywords3 = ('Type', 'Prop', 'Sort')
      + operators = ('!=', '#', '&', '&&', '*', '+', '-', '/', '@', '!', '-.', '->', '.', '..', '...', '::', ':>', ';', ';;', '<', '<-', '=', '==', '>', '_', '|', '||', '~', '=>', '<=', '>=', '/\\', '\\/', '∀', 'Π', 'λ', '↔', '∧', '∨', '≠', '≤', '≥', '¬', '⁻¹', '⬝', '▸', '→', '∃', '≈', '×', '⌞', '⌟', '≡', '⟨', '⟩', '↦')
      + punctuation = ('(', ')', ':', '{', '}', '[', ']', '⦃', '⦄', ':=', ',')
      + tokens = {'expression': [('\\s+', Whitespace), ('/--', String.Doc, 'docstring'), ('/-', Comment, 'comment'), ('--.*$', Comment.Single), (words(keywords3, prefix='\\b', suffix='\\b'), Keyword.Type), (words(('sorry', 'admit'), prefix='\\b', suffix='\\b'), Generic.Error), (words(operators), Name.Builtin.Pseudo), (words(punctuation), Operator), (_name_segment, Name), ('``?' + _name, String.Symbol), ('(?<=\\.)\\d+', Number), ('(\\d+\\.\\d*)([eE][+-]?[0-9]+)?', Number.Float), ('\\d+', Number.Integer), ('"', String.Double, 'string'), ("[~?][a-z][\\w\\']*:", Name.Variable), ('\\S', Name.Builtin.Pseudo)], 'root': [(words(keywords1, prefix='\\b', suffix='\\b'), Keyword.Namespace), (words(keywords2, prefix='\\b', suffix='\\b'), Keyword), ('@\\[', Keyword.Declaration, 'attribute'), include('expression')], 'attribute': [('\\]', Keyword.Declaration, '#pop'), include('expression')], 'comment': [('[^/-]+', Comment.Multiline), ('/-', Comment.Multiline, '#push'), ('-/', Comment.Multiline, '#pop'), ('[/-]', Comment.Multiline)], 'docstring': [('[^/-]+', String.Doc), ('-/', String.Doc, '#pop'), ('[/-]', String.Doc)], 'string': [('[^\\\\"]+', String.Double), ('\\\\[n"\\\\\\n]', String.Escape), ('"', String.Double, '#pop')]}
  --
      + analyse_text(text)
  }

  class LilyPondLexer {
      + name = 'LilyPond'
      + url = 'https://lilypond.org'
      + aliases = ['lilypond']
      + filenames = ['*.ly']
      + mimetypes = []
      + version_added = '2.11'
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'root': [('\\s+', Token.Text.Whitespace), ('%\\{.*?%\\}', Token.Comment.Multiline), ('%.*?$', Token.Comment.Single), ('#\\}', Token.Punctuation, '#pop'), ('[#$]@?', Token.Punctuation, 'value'), ('(?x)\n               \\\\\\\\\n               | (?<= \\s ) (?: -- | __ )\n               | [{}<>=.,:|]\n              ', Token.Punctuation), (words(pitches, suffix="=?[',]*!?\\??" + NAME_END_RE), Token.Pitch), ('[\\-_^]?"', Token.String, 'string'), ('-?\\d+\\.\\d+', Token.Number.Float), ('-?\\d+/\\d+', Token.Number.Fraction), ('(?x)\n               (?<= \\s ) -\\d+\n               | (?: (?: \\d+ | \\\\breve | \\\\longa | \\\\maxima )\n                     \\.* )\n              ', Token.Number), ('\\*', Token.Number), ('[~()[\\]]', Token.Name.Builtin.Articulation), ('[\\-_^][>^_!.\\-+]', Token.Name.Builtin.Articulation), ('[\\-_^]?\\\\?\\d+', Token.Name.Builtin.Articulation), (builtin_words(keywords, 'mandatory'), Token.Keyword), (builtin_words(pitch_language_names, 'disallowed'), Token.Name.PitchLanguage), (builtin_words(clefs, 'disallowed'), Token.Name.Builtin.Clef), (builtin_words(scales, 'mandatory'), Token.Name.Builtin.Scale), (builtin_words(repeat_types, 'disallowed'), Token.Name.Builtin.RepeatType), (builtin_words(units, 'mandatory'), Token.Number), (builtin_words(chord_modifiers, 'disallowed'), Token.ChordModifier), (builtin_words(music_functions, 'mandatory'), Token.Name.Builtin.MusicFunction), (builtin_words(dynamics, 'mandatory'), Token.Name.Builtin.Dynamic), (builtin_words(articulations, 'mandatory'), Token.Name.Builtin.Articulation), (builtin_words(music_commands, 'mandatory'), Token.Name.Builtin.MusicCommand), (builtin_words(markup_commands, 'mandatory'), Token.Name.Builtin.MarkupCommand), (builtin_words(grobs, 'disallowed'), Token.Name.Builtin.Grob), (builtin_words(translators, 'disallowed'), Token.Name.Builtin.Translator), (builtin_words(contexts, 'optional'), Token.Name.Builtin.Context), (builtin_words(context_properties, 'disallowed'), Token.Name.Builtin.ContextProperty), (builtin_words(grob_properties, 'disallowed'), Token.Name.Builtin.GrobProperty, 'maybe-subproperties'), (builtin_words(paper_variables, 'optional'), Token.Name.Builtin.PaperVariable), (builtin_words(header_variables, 'optional'), Token.Name.Builtin.HeaderVariable), ('[\\-_^]?\\\\.+?' + NAME_END_RE, Token.Name.BackslashReference), ('(?x)\n               (?: [^\\W\\d] | - )+\n               (?= (?: [^\\W\\d] | [\\-.] )* \\s* = )\n              ', Token.Name.Lvalue), ('([^\\W\\d]|-)+?' + NAME_END_RE, Token.Text), ('.', Token.Text)], 'string': [('"', Token.String, '#pop'), ('\\\\.', Token.String.Escape), ('[^\\\\"]+', Token.String)], 'value': [('#\\{', Token.Punctuation, ('#pop', 'root')), inherit], 'maybe-subproperties': [('\\s+', Token.Text.Whitespace), ('(\\.)((?:[^\\W\\d]|-)+?)' + NAME_END_RE, bygroups(Token.Punctuation, Token.Name.Builtin.GrobProperty)), default('#pop')]}
  --
      + get_tokens_unprocessed(text)
  }

  class SchemeLexer {
      + name = 'Scheme'
      + url = 'http://www.scheme-reports.org/'
      + aliases = ['scheme', 'scm']
      + filenames = ['*.scm', '*.ss']
      + mimetypes = ['text/x-scheme', 'application/x-scheme']
      + version_added = '0.6'
      + flags = re.DOTALL | re.MULTILINE
      + valid_name = '[\\w!$%&*+,/:<=>?@^~|-]+'
      + token_end = '\n      (?=\n        \\s         # whitespace\n        | ;        # comment\n        | \\#[;|!] # fancy comments\n        | [)\\]]    # end delimiters\n        | $        # end of file\n      )\n    '
      + number_rules = {}
      + tokens = {'root': [default('scheme-root')], 'scheme-root': [default('value')], 'value': [(';.*?$', Comment.Single), ('#\\|', Comment.Multiline, 'multiline-comment'), ('#;[([]', Comment, 'commented-form'), ('#;', Comment, 'commented-datum'), ('#!r6rs', Comment), ('\\s+', Whitespace), (number_rules[2], Number.Bin, '#pop'), (number_rules[8], Number.Oct, '#pop'), (number_rules[10], decimal_cb, '#pop'), (number_rules[16], Number.Hex, '#pop'), ('"', String, 'string'), ("'" + valid_name, String.Symbol, '#pop'), ('#:' + valid_name, Keyword.Declaration, '#pop'), ('#\\\\([()/\'\\"._!§$%& ?=+-]|[a-zA-Z0-9]+)', String.Char, '#pop'), ('(#t|#f)', Name.Constant, '#pop'), ("('|#|`|,@|,|\\.)", Operator), ("(?<='\\()" + valid_name, Name.Variable, '#pop'), ('(?<=#\\()' + valid_name, Name.Variable, '#pop'), ('(?<=\\()' + valid_name, Name.Function, '#pop'), (valid_name, Name.Variable, '#pop'), ('[([]', Punctuation, 'scheme-root'), ('[)\\]]', Punctuation, '#pop:3')], 'multiline-comment': [('#\\|', Comment.Multiline, '#push'), ('\\|#', Comment.Multiline, '#pop'), ('[^|#]+', Comment.Multiline), ('[|#]', Comment.Multiline)], 'commented-form': [('[([]', Comment, '#push'), ('[)\\]]', Comment, '#pop'), ('[^()[\\]]+', Comment)], 'commented-datum': [(f'(?x).*?{token_end}', Comment, '#pop')], 'string': [('"', String, '#pop:2'), ('\\\\x[0-9a-fA-F]+;', String.Escape), ('\\\\x[0-9a-fA-F]{2}', String.Escape), ('\\\\u[0-9a-fA-F]{4}', String.Escape), ('\\\\U[0-9a-fA-F]{6}', String.Escape), ('\\\\.', String.Escape), ('[^\\\\"]+', String)]}
  --
      + get_tokens_unprocessed(text)
      + decimal_cb(match)
  }

  class CommonLispLexer {
      + name = 'Common Lisp'
      + url = 'https://lisp-lang.org/'
      + aliases = ['common-lisp', 'cl', 'lisp']
      + filenames = ['*.cl', '*.lisp']
      + mimetypes = ['text/x-common-lisp']
      + version_added = '0.9'
      + flags = re.IGNORECASE | re.MULTILINE
      + nonmacro = '\\\\.|[\\w!$%&*+-/<=>?@\\[\\]^{}~]'
      + constituent = nonmacro + '|[#.:]'
      + terminated = '(?=[ "()\\\'\\n,;`])'
      + symbol = f'(\\|[^|]+\\||(?:{nonmacro})(?:{constituent})*)'
      + tokens = {'root': [default('body')], 'multiline-comment': [('#\\|', Comment.Multiline, '#push'), ('\\|#', Comment.Multiline, '#pop'), ('[^|#]+', Comment.Multiline), ('[|#]', Comment.Multiline)], 'commented-form': [('\\(', Comment.Preproc, '#push'), ('\\)', Comment.Preproc, '#pop'), ('[^()]+', Comment.Preproc)], 'body': [('\\s+', Whitespace), (';.*$', Comment.Single), ('#\\|', Comment.Multiline, 'multiline-comment'), ('#\\d*Y.*$', Comment.Special), ('"(\\\\.|\\\\\\n|[^"\\\\])*"', String), (':' + symbol, String.Symbol), ('::' + symbol, String.Symbol), (':#' + symbol, String.Symbol), ("'" + symbol, String.Symbol), ("'", Operator), ('`', Operator), ('[-+]?\\d+\\.?' + terminated, Number.Integer), ('[-+]?\\d+/\\d+' + terminated, Number), ('[-+]?(\\d*\\.\\d+([defls][-+]?\\d+)?|\\d+(\\.\\d*)?[defls][-+]?\\d+)' + terminated, Number.Float), ('#\\\\.' + terminated, String.Char), ('#\\\\' + symbol, String.Char), ('#\\(', Operator, 'body'), ('#\\d*\\*[01]*', Literal.Other), ('#:' + symbol, String.Symbol), ('#[.,]', Operator), ("#\\'", Name.Function), ('#b[+-]?[01]+(/[01]+)?', Number.Bin), ('#o[+-]?[0-7]+(/[0-7]+)?', Number.Oct), ('#x[+-]?[0-9a-f]+(/[0-9a-f]+)?', Number.Hex), ('#\\d+r[+-]?[0-9a-z]+(/[0-9a-z]+)?', Number), ('(#c)(\\()', bygroups(Number, Punctuation), 'body'), ('(#\\d+a)(\\()', bygroups(Literal.Other, Punctuation), 'body'), ('(#s)(\\()', bygroups(Literal.Other, Punctuation), 'body'), ('#p?"(\\\\.|[^"])*"', Literal.Other), ('#\\d+=', Operator), ('#\\d+#', Operator), ('#+nil' + terminated + '\\s*\\(', Comment.Preproc, 'commented-form'), ('#[+-]', Operator), ('(,@|,|\\.)', Operator), ('(t|nil)' + terminated, Name.Constant), ('\\*' + symbol + '\\*', Name.Variable.Global), (symbol, Name.Variable), ('\\(', Punctuation, 'body'), ('\\)', Punctuation, '#pop')]}
  --
      - __init__()
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class HyLexer {
      + name = 'Hy'
      + url = 'http://hylang.org/'
      + aliases = ['hylang', 'hy']
      + filenames = ['*.hy']
      + mimetypes = ['text/x-hy', 'application/x-hy']
      + version_added = '2.0'
      + special_forms = ('cond', 'for', '->', '->>', 'car', 'cdr', 'first', 'rest', 'let', 'when', 'unless', 'import', 'do', 'progn', 'get', 'slice', 'assoc', 'with-decorator', ',', 'list_comp', 'kwapply', '~', 'is', 'in', 'is-not', 'not-in', 'quasiquote', 'unquote', 'unquote-splice', 'quote', '|', '<<=', '>>=', 'foreach', 'while', 'eval-and-compile', 'eval-when-compile')
      + declarations = ('def', 'defn', 'defun', 'defmacro', 'defclass', 'lambda', 'fn', 'setv')
      + hy_builtins = ()
      + hy_core = ('cycle', 'dec', 'distinct', 'drop', 'even?', 'filter', 'inc', 'instance?', 'iterable?', 'iterate', 'iterator?', 'neg?', 'none?', 'nth', 'numeric?', 'odd?', 'pos?', 'remove', 'repeat', 'repeatedly', 'take', 'take_nth', 'take_while', 'zero?')
      + builtins = hy_builtins + hy_core
      + valid_name = '[^ \\t\\n\\r\\f\\v()[\\]{};\\"\'`~]+'
      + tokens = {'root': [(';.*$', Comment.Single), ('[ \\t\\n\\r\\f\\v]+', Whitespace), ('-?\\d+\\.\\d+', Number.Float), ('-?\\d+', Number.Integer), ('0[0-7]+j?', Number.Oct), ('0[xX][a-fA-F0-9]+', Number.Hex), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ("'" + valid_name, String.Symbol), ('\\\\(.|[a-z]+)', String.Char), ('^(\\s*)([rRuU]{,2}"""(?:.|\\n)*?""")', bygroups(Text, String.Doc)), ("^(\\s*)([rRuU]{,2}'''(?:.|\\n)*?''')", bygroups(Text, String.Doc)), ('::?' + valid_name, String.Symbol), ("~@|[`\\'#^~&@]", Operator), include('py-keywords'), include('py-builtins'), (_multi_escape(special_forms), Keyword), (_multi_escape(declarations), Keyword.Declaration), (_multi_escape(builtins), Name.Builtin), ('(?<=\\()' + valid_name, Name.Function), (valid_name, Name.Variable), ('(\\[|\\])', Punctuation), ('(\\{|\\})', Punctuation), ('(\\(|\\))', Punctuation)], 'py-keywords': PythonLexer.tokens['keywords'], 'py-builtins': PythonLexer.tokens['builtins']}
  --
      + analyse_text(text)
  }

  class RacketLexer {
      + name = 'Racket'
      + url = 'http://racket-lang.org/'
      + aliases = ['racket', 'rkt']
      + filenames = ['*.rkt', '*.rktd', '*.rktl']
      + mimetypes = ['text/x-racket', 'application/x-racket']
      + version_added = '1.6'
      + tokens = {'root': [(_closing_parenthesis, Error), ('(?!\\Z)', Text, 'unquoted-datum')], 'datum': [('(?s)#;|#![ /]([^\\\\\\n]|\\\\.)*', Comment), (';[^\\n\\r\\x85\\u2028\\u2029]*', Comment.Single), ('#\\|', Comment.Multiline, 'block-comment'), ('(?u)\\s+', Whitespace), (f'(?i){_exact_decimal_prefix}[-+]?\\d+(?=[{_delimiters}])', Number.Integer, '#pop'), (f'(?i){_exact_decimal_prefix}[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([deflst][-+]?\\d+)?(?=[{_delimiters}])', Number.Float, '#pop'), (f'(?i){_exact_decimal_prefix}[-+]?({_inexact_normal_no_hashes}([-+]{_inexact_normal_no_hashes}?i)?|[-+]{_inexact_normal_no_hashes}?i)(?=[{_delimiters}])', Number, '#pop'), (f'(?i)(#d)?({_inexact_real}([-+]{_inexact_unsigned}?i)?|[-+]{_inexact_unsigned}?i|{_inexact_real}@{_inexact_real})(?=[{_delimiters}])', Number.Float, '#pop'), (f'(?i)(([-+]?{_inexact_simple}t[-+]?\\d+)|[-+](inf|nan)\\.t)(?=[{_delimiters}])', Number.Float, '#pop'), (f'(?iu)(#[ei])?#b{_symbol}', Number.Bin, '#pop'), (f'(?iu)(#[ei])?#o{_symbol}', Number.Oct, '#pop'), (f'(?iu)(#[ei])?#x{_symbol}', Number.Hex, '#pop'), (f'(?iu)(#d)?#i{_symbol}', Number.Float, '#pop'), ('#?"', String.Double, ('#pop', 'string')), ('#<<(.+)\\n(^(?!\\1$).*$\\n)*^\\1$', String.Heredoc, '#pop'), ('#\\\\(u[\\da-fA-F]{1,4}|U[\\da-fA-F]{1,8})', String.Char, '#pop'), ('(?is)#\\\\([0-7]{3}|[a-z]+|.)', String.Char, '#pop'), ('(?s)#[pr]x#?"(\\\\?.)*?"', String.Regex, '#pop'), ('#(true|false|[tTfF])', Name.Constant, '#pop'), (f'#:{_symbol}', Keyword.Declaration, '#pop'), ('(#lang |#!)(\\S+)', bygroups(Keyword.Namespace, Name.Namespace)), ('#reader', Keyword.Namespace, 'quoted-datum'), (f"(?i)\\.(?=[{_delimiters}])|#c[is]|#['`]|#,@?", Operator), (f"'|#[s&]|#hash(eqv?)?|#\\d*(?={_opening_parenthesis})", Operator, ('#pop', 'quoted-datum'))], 'datum*': [('`|,@?', Operator), (_symbol, String.Symbol, '#pop'), ('[|\\\\]', Error), default('#pop')], 'list': [(_closing_parenthesis, Punctuation, '#pop')], 'unquoted-datum': [include('datum'), (f'quote(?=[{_delimiters}])', Keyword, ('#pop', 'quoted-datum')), ('`', Operator, ('#pop', 'quasiquoted-datum')), (f'quasiquote(?=[{_delimiters}])', Keyword, ('#pop', 'quasiquoted-datum')), (_opening_parenthesis, Punctuation, ('#pop', 'unquoted-list')), (words(_keywords, suffix=f'(?=[{_delimiters}])'), Keyword, '#pop'), (words(_builtins, suffix=f'(?=[{_delimiters}])'), Name.Builtin, '#pop'), (_symbol, Name, '#pop'), include('datum*')], 'unquoted-list': [include('list'), ('(?!\\Z)', Text, 'unquoted-datum')], 'quasiquoted-datum': [include('datum'), (',@?', Operator, ('#pop', 'unquoted-datum')), (f'unquote(-splicing)?(?=[{_delimiters}])', Keyword, ('#pop', 'unquoted-datum')), (_opening_parenthesis, Punctuation, ('#pop', 'quasiquoted-list')), include('datum*')], 'quasiquoted-list': [include('list'), ('(?!\\Z)', Text, 'quasiquoted-datum')], 'quoted-datum': [include('datum'), (_opening_parenthesis, Punctuation, ('#pop', 'quoted-list')), include('datum*')], 'quoted-list': [include('list'), ('(?!\\Z)', Text, 'quoted-datum')], 'block-comment': [('#\\|', Comment.Multiline, '#push'), ('\\|#', Comment.Multiline, '#pop'), ('[^#|]+|.', Comment.Multiline)], 'string': [('"', String.Double, '#pop'), ('(?s)\\\\([0-7]{1,3}|x[\\da-fA-F]{1,2}|u[\\da-fA-F]{1,4}|U[\\da-fA-F]{1,8}|.)', String.Escape), ('[^\\\\"]+', String.Double)]}
  }

  class NewLispLexer {
      + name = 'NewLisp'
      + url = 'http://www.newlisp.org/'
      + aliases = ['newlisp']
      + filenames = ['*.lsp', '*.nl', '*.kif']
      + mimetypes = ['text/x-newlisp', 'application/x-newlisp']
      + version_added = '1.5'
      + flags = re.IGNORECASE | re.MULTILINE
      + builtins = ('^', '--', '-', ':', '!', '!=', '?', '@', '*', '/', '&', '%', '+', '++', '<', '<<', '<=', '=', '>', '>=', '>>', '|', '~', '$', '$0', '$1', '$10', '$11', '$12', '$13', '$14', '$15', '$2', '$3', '$4', '$5', '$6', '$7', '$8', '$9', '$args', '$idx', '$it', '$main-args', 'abort', 'abs', 'acos', 'acosh', 'add', 'address', 'amb', 'and', 'append-file', 'append', 'apply', 'args', 'array-list', 'array?', 'array', 'asin', 'asinh', 'assoc', 'atan', 'atan2', 'atanh', 'atom?', 'base64-dec', 'base64-enc', 'bayes-query', 'bayes-train', 'begin', 'beta', 'betai', 'bind', 'binomial', 'bits', 'callback', 'case', 'catch', 'ceil', 'change-dir', 'char', 'chop', 'Class', 'clean', 'close', 'command-event', 'cond', 'cons', 'constant', 'context?', 'context', 'copy-file', 'copy', 'cos', 'cosh', 'count', 'cpymem', 'crc32', 'crit-chi2', 'crit-z', 'current-line', 'curry', 'date-list', 'date-parse', 'date-value', 'date', 'debug', 'dec', 'def-new', 'default', 'define-macro', 'define', 'delete-file', 'delete-url', 'delete', 'destroy', 'det', 'device', 'difference', 'directory?', 'directory', 'div', 'do-until', 'do-while', 'doargs', 'dolist', 'dostring', 'dotimes', 'dotree', 'dump', 'dup', 'empty?', 'encrypt', 'ends-with', 'env', 'erf', 'error-event', 'eval-string', 'eval', 'exec', 'exists', 'exit', 'exp', 'expand', 'explode', 'extend', 'factor', 'fft', 'file-info', 'file?', 'filter', 'find-all', 'find', 'first', 'flat', 'float?', 'float', 'floor', 'flt', 'fn', 'for-all', 'for', 'fork', 'format', 'fv', 'gammai', 'gammaln', 'gcd', 'get-char', 'get-float', 'get-int', 'get-long', 'get-string', 'get-url', 'global?', 'global', 'if-not', 'if', 'ifft', 'import', 'inc', 'index', 'inf?', 'int', 'integer?', 'integer', 'intersect', 'invert', 'irr', 'join', 'lambda-macro', 'lambda?', 'lambda', 'last-error', 'last', 'legal?', 'length', 'let', 'letex', 'letn', 'list?', 'list', 'load', 'local', 'log', 'lookup', 'lower-case', 'macro?', 'main-args', 'MAIN', 'make-dir', 'map', 'mat', 'match', 'max', 'member', 'min', 'mod', 'module', 'mul', 'multiply', 'NaN?', 'net-accept', 'net-close', 'net-connect', 'net-error', 'net-eval', 'net-interface', 'net-ipv', 'net-listen', 'net-local', 'net-lookup', 'net-packet', 'net-peek', 'net-peer', 'net-ping', 'net-receive-from', 'net-receive-udp', 'net-receive', 'net-select', 'net-send-to', 'net-send-udp', 'net-send', 'net-service', 'net-sessions', 'new', 'nil?', 'nil', 'normal', 'not', 'now', 'nper', 'npv', 'nth', 'null?', 'number?', 'open', 'or', 'ostype', 'pack', 'parse-date', 'parse', 'peek', 'pipe', 'pmt', 'pop-assoc', 'pop', 'post-url', 'pow', 'prefix', 'pretty-print', 'primitive?', 'print', 'println', 'prob-chi2', 'prob-z', 'process', 'prompt-event', 'protected?', 'push', 'put-url', 'pv', 'quote?', 'quote', 'rand', 'random', 'randomize', 'read', 'read-char', 'read-expr', 'read-file', 'read-key', 'read-line', 'read-utf8', 'reader-event', 'real-path', 'receive', 'ref-all', 'ref', 'regex-comp', 'regex', 'remove-dir', 'rename-file', 'replace', 'reset', 'rest', 'reverse', 'rotate', 'round', 'save', 'search', 'seed', 'seek', 'select', 'self', 'semaphore', 'send', 'sequence', 'series', 'set-locale', 'set-ref-all', 'set-ref', 'set', 'setf', 'setq', 'sgn', 'share', 'signal', 'silent', 'sin', 'sinh', 'sleep', 'slice', 'sort', 'source', 'spawn', 'sqrt', 'starts-with', 'string?', 'string', 'sub', 'swap', 'sym', 'symbol?', 'symbols', 'sync', 'sys-error', 'sys-info', 'tan', 'tanh', 'term', 'throw-error', 'throw', 'time-of-day', 'time', 'timer', 'title-case', 'trace-highlight', 'trace', 'transpose', 'Tree', 'trim', 'true?', 'true', 'unicode', 'unify', 'unique', 'unless', 'unpack', 'until', 'upper-case', 'utf8', 'utf8len', 'uuid', 'wait-pid', 'when', 'while', 'write', 'write-char', 'write-file', 'write-line', 'xfer-event', 'xml-error', 'xml-parse', 'xml-type-tags', 'zero?')
      + valid_name = '([\\w!$%&*+.,/<=>?@^~|-])+|(\\[.*?\\])+'
      + tokens = {'root': [('#!(.*?)$', Comment.Preproc), (';.*$', Comment.Single), ('#.*$', Comment.Single), ('\\s+', Whitespace), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('\\{', String, 'bracestring'), ('\\[text\\]*', String, 'tagstring'), ("('|:)", Operator), (words(builtins, suffix='\\b'), Keyword), ('(?<=\\()' + valid_name, Name.Variable), (valid_name, String.Symbol), ('(\\(|\\))', Punctuation)], 'bracestring': [('\\{', String, '#push'), ('\\}', String, '#pop'), ('[^{}]+', String)], 'tagstring': [('(?s)(.*?)(\\[/text\\])', String, '#pop')]}
  }

  class EmacsLispLexer {
      + name = 'EmacsLisp'
      + aliases = ['emacs-lisp', 'elisp', 'emacs']
      + filenames = ['*.el']
      + mimetypes = ['text/x-elisp', 'application/x-elisp']
      + url = 'https://www.gnu.org/software/emacs'
      + version_added = '2.1'
      + flags = re.MULTILINE
      + nonmacro = '\\\\.|[\\w!$%&*+-/<=>?@^{}~|]'
      + constituent = nonmacro + '|[#.:]'
      + terminated = '(?=[ "()\\]\\\'\\n,;`])'
      + symbol = f'((?:{nonmacro})(?:{constituent})*)'
      + macros = {'atomic-change-group', 'case', 'block', 'cl-block', 'cl-callf', 'cl-callf2', 'cl-case', 'cl-decf', 'cl-declaim', 'cl-declare', 'cl-define-compiler-macro', 'cl-defmacro', 'cl-defstruct', 'cl-defsubst', 'cl-deftype', 'cl-defun', 'cl-destructuring-bind', 'cl-do', 'cl-do*', 'cl-do-all-symbols', 'cl-do-symbols', 'cl-dolist', 'cl-dotimes', 'cl-ecase', 'cl-etypecase', 'eval-when', 'cl-eval-when', 'cl-flet', 'cl-flet*', 'cl-function', 'cl-incf', 'cl-labels', 'cl-letf', 'cl-letf*', 'cl-load-time-value', 'cl-locally', 'cl-loop', 'cl-macrolet', 'cl-multiple-value-bind', 'cl-multiple-value-setq', 'cl-progv', 'cl-psetf', 'cl-psetq', 'cl-pushnew', 'cl-remf', 'cl-return', 'cl-return-from', 'cl-rotatef', 'cl-shiftf', 'cl-symbol-macrolet', 'cl-tagbody', 'cl-the', 'cl-typecase', 'combine-after-change-calls', 'condition-case-unless-debug', 'decf', 'declaim', 'declare', 'declare-function', 'def-edebug-spec', 'defadvice', 'defclass', 'defcustom', 'defface', 'defgeneric', 'defgroup', 'define-advice', 'define-alternatives', 'define-compiler-macro', 'define-derived-mode', 'define-generic-mode', 'define-global-minor-mode', 'define-globalized-minor-mode', 'define-minor-mode', 'define-modify-macro', 'define-obsolete-face-alias', 'define-obsolete-function-alias', 'define-obsolete-variable-alias', 'define-setf-expander', 'define-skeleton', 'defmacro', 'defmethod', 'defsetf', 'defstruct', 'defsubst', 'deftheme', 'deftype', 'defun', 'defvar-local', 'delay-mode-hooks', 'destructuring-bind', 'do', 'do*', 'do-all-symbols', 'do-symbols', 'dolist', 'dont-compile', 'dotimes', 'dotimes-with-progress-reporter', 'ecase', 'ert-deftest', 'etypecase', 'eval-and-compile', 'eval-when-compile', 'flet', 'ignore-errors', 'incf', 'labels', 'lambda', 'letrec', 'lexical-let', 'lexical-let*', 'loop', 'multiple-value-bind', 'multiple-value-setq', 'noreturn', 'oref', 'oref-default', 'oset', 'oset-default', 'pcase', 'pcase-defmacro', 'pcase-dolist', 'pcase-exhaustive', 'pcase-let', 'pcase-let*', 'pop', 'psetf', 'psetq', 'push', 'pushnew', 'remf', 'return', 'rotatef', 'rx', 'save-match-data', 'save-selected-window', 'save-window-excursion', 'setf', 'setq-local', 'shiftf', 'track-mouse', 'typecase', 'unless', 'use-package', 'when', 'while-no-input', 'with-case-table', 'with-category-table', 'with-coding-priority', 'with-current-buffer', 'with-demoted-errors', 'with-eval-after-load', 'with-file-modes', 'with-local-quit', 'with-output-to-string', 'with-output-to-temp-buffer', 'with-parsed-tramp-file-name', 'with-selected-frame', 'with-selected-window', 'with-silent-modifications', 'with-slots', 'with-syntax-table', 'with-temp-buffer', 'with-temp-file', 'with-temp-message', 'with-timeout', 'with-tramp-connection-property', 'with-tramp-file-property', 'with-tramp-progress-reporter', 'with-wrapper-hook', 'load-time-value', 'locally', 'macrolet', 'progv', 'return-from'}
      + special_forms = {'and', 'catch', 'cond', 'condition-case', 'defconst', 'defvar', 'function', 'if', 'interactive', 'let', 'let*', 'or', 'prog1', 'prog2', 'progn', 'quote', 'save-current-buffer', 'save-excursion', 'save-restriction', 'setq', 'setq-default', 'subr-arity', 'unwind-protect', 'while'}
      + builtin_function = {'%', '*', '+', '-', '/', '/=', '1+', '1-', '<', '<=', '=', '>', '>=', 'Snarf-documentation', 'abort-recursive-edit', 'abs', 'accept-process-output', 'access-file', 'accessible-keymaps', 'acos', 'active-minibuffer-window', 'add-face-text-property', 'add-name-to-file', 'add-text-properties', 'all-completions', 'append', 'apply', 'apropos-internal', 'aref', 'arrayp', 'aset', 'ash', 'asin', 'assoc', 'assoc-string', 'assq', 'atan', 'atom', 'autoload', 'autoload-do-load', 'backtrace', 'backtrace--locals', 'backtrace-debug', 'backtrace-eval', 'backtrace-frame', 'backward-char', 'backward-prefix-chars', 'barf-if-buffer-read-only', 'base64-decode-region', 'base64-decode-string', 'base64-encode-region', 'base64-encode-string', 'beginning-of-line', 'bidi-find-overridden-directionality', 'bidi-resolved-levels', 'bitmap-spec-p', 'bobp', 'bolp', 'bool-vector', 'bool-vector-count-consecutive', 'bool-vector-count-population', 'bool-vector-exclusive-or', 'bool-vector-intersection', 'bool-vector-not', 'bool-vector-p', 'bool-vector-set-difference', 'bool-vector-subsetp', 'bool-vector-union', 'boundp', 'buffer-base-buffer', 'buffer-chars-modified-tick', 'buffer-enable-undo', 'buffer-file-name', 'buffer-has-markers-at', 'buffer-list', 'buffer-live-p', 'buffer-local-value', 'buffer-local-variables', 'buffer-modified-p', 'buffer-modified-tick', 'buffer-name', 'buffer-size', 'buffer-string', 'buffer-substring', 'buffer-substring-no-properties', 'buffer-swap-text', 'bufferp', 'bury-buffer-internal', 'byte-code', 'byte-code-function-p', 'byte-to-position', 'byte-to-string', 'byteorder', 'call-interactively', 'call-last-kbd-macro', 'call-process', 'call-process-region', 'cancel-kbd-macro-events', 'capitalize', 'capitalize-region', 'capitalize-word', 'car', 'car-less-than-car', 'car-safe', 'case-table-p', 'category-docstring', 'category-set-mnemonics', 'category-table', 'category-table-p', 'ccl-execute', 'ccl-execute-on-string', 'ccl-program-p', 'cdr', 'cdr-safe', 'ceiling', 'char-after', 'char-before', 'char-category-set', 'char-charset', 'char-equal', 'char-or-string-p', 'char-resolve-modifiers', 'char-syntax', 'char-table-extra-slot', 'char-table-p', 'char-table-parent', 'char-table-range', 'char-table-subtype', 'char-to-string', 'char-width', 'characterp', 'charset-after', 'charset-id-internal', 'charset-plist', 'charset-priority-list', 'charsetp', 'check-coding-system', 'check-coding-systems-region', 'clear-buffer-auto-save-failure', 'clear-charset-maps', 'clear-face-cache', 'clear-font-cache', 'clear-image-cache', 'clear-string', 'clear-this-command-keys', 'close-font', 'clrhash', 'coding-system-aliases', 'coding-system-base', 'coding-system-eol-type', 'coding-system-p', 'coding-system-plist', 'coding-system-priority-list', 'coding-system-put', 'color-distance', 'color-gray-p', 'color-supported-p', 'combine-after-change-execute', 'command-error-default-function', 'command-remapping', 'commandp', 'compare-buffer-substrings', 'compare-strings', 'compare-window-configurations', 'completing-read', 'compose-region-internal', 'compose-string-internal', 'composition-get-gstring', 'compute-motion', 'concat', 'cons', 'consp', 'constrain-to-field', 'continue-process', 'controlling-tty-p', 'coordinates-in-window-p', 'copy-alist', 'copy-category-table', 'copy-file', 'copy-hash-table', 'copy-keymap', 'copy-marker', 'copy-sequence', 'copy-syntax-table', 'copysign', 'cos', 'current-active-maps', 'current-bidi-paragraph-direction', 'current-buffer', 'current-case-table', 'current-column', 'current-global-map', 'current-idle-time', 'current-indentation', 'current-input-mode', 'current-local-map', 'current-message', 'current-minor-mode-maps', 'current-time', 'current-time-string', 'current-time-zone', 'current-window-configuration', 'cygwin-convert-file-name-from-windows', 'cygwin-convert-file-name-to-windows', 'daemon-initialized', 'daemonp', 'dbus--init-bus', 'dbus-get-unique-name', 'dbus-message-internal', 'debug-timer-check', 'declare-equiv-charset', 'decode-big5-char', 'decode-char', 'decode-coding-region', 'decode-coding-string', 'decode-sjis-char', 'decode-time', 'default-boundp', 'default-file-modes', 'default-printer-name', 'default-toplevel-value', 'default-value', 'define-category', 'define-charset-alias', 'define-charset-internal', 'define-coding-system-alias', 'define-coding-system-internal', 'define-fringe-bitmap', 'define-hash-table-test', 'define-key', 'define-prefix-command', 'delete', 'delete-all-overlays', 'delete-and-extract-region', 'delete-char', 'delete-directory-internal', 'delete-field', 'delete-file', 'delete-frame', 'delete-other-windows-internal', 'delete-overlay', 'delete-process', 'delete-region', 'delete-terminal', 'delete-window-internal', 'delq', 'describe-buffer-bindings', 'describe-vector', 'destroy-fringe-bitmap', 'detect-coding-region', 'detect-coding-string', 'ding', 'directory-file-name', 'directory-files', 'directory-files-and-attributes', 'discard-input', 'display-supports-face-attributes-p', 'do-auto-save', 'documentation', 'documentation-property', 'downcase', 'downcase-region', 'downcase-word', 'draw-string', 'dump-colors', 'dump-emacs', 'dump-face', 'dump-frame-glyph-matrix', 'dump-glyph-matrix', 'dump-glyph-row', 'dump-redisplay-history', 'dump-tool-bar-row', 'elt', 'emacs-pid', 'encode-big5-char', 'encode-char', 'encode-coding-region', 'encode-coding-string', 'encode-sjis-char', 'encode-time', 'end-kbd-macro', 'end-of-line', 'eobp', 'eolp', 'eq', 'eql', 'equal', 'equal-including-properties', 'erase-buffer', 'error-message-string', 'eval', 'eval-buffer', 'eval-region', 'event-convert-list', 'execute-kbd-macro', 'exit-recursive-edit', 'exp', 'expand-file-name', 'expt', 'external-debugging-output', 'face-attribute-relative-p', 'face-attributes-as-vector', 'face-font', 'fboundp', 'fceiling', 'fetch-bytecode', 'ffloor', 'field-beginning', 'field-end', 'field-string', 'field-string-no-properties', 'file-accessible-directory-p', 'file-acl', 'file-attributes', 'file-attributes-lessp', 'file-directory-p', 'file-executable-p', 'file-exists-p', 'file-locked-p', 'file-modes', 'file-name-absolute-p', 'file-name-all-completions', 'file-name-as-directory', 'file-name-completion', 'file-name-directory', 'file-name-nondirectory', 'file-newer-than-file-p', 'file-readable-p', 'file-regular-p', 'file-selinux-context', 'file-symlink-p', 'file-system-info', 'file-system-info', 'file-writable-p', 'fillarray', 'find-charset-region', 'find-charset-string', 'find-coding-systems-region-internal', 'find-composition-internal', 'find-file-name-handler', 'find-font', 'find-operation-coding-system', 'float', 'float-time', 'floatp', 'floor', 'fmakunbound', 'following-char', 'font-at', 'font-drive-otf', 'font-face-attributes', 'font-family-list', 'font-get', 'font-get-glyphs', 'font-get-system-font', 'font-get-system-normal-font', 'font-info', 'font-match-p', 'font-otf-alternates', 'font-put', 'font-shape-gstring', 'font-spec', 'font-variation-glyphs', 'font-xlfd-name', 'fontp', 'fontset-font', 'fontset-info', 'fontset-list', 'fontset-list-all', 'force-mode-line-update', 'force-window-update', 'format', 'format-mode-line', 'format-network-address', 'format-time-string', 'forward-char', 'forward-comment', 'forward-line', 'forward-word', 'frame-border-width', 'frame-bottom-divider-width', 'frame-can-run-window-configuration-change-hook', 'frame-char-height', 'frame-char-width', 'frame-face-alist', 'frame-first-window', 'frame-focus', 'frame-font-cache', 'frame-fringe-width', 'frame-list', 'frame-live-p', 'frame-or-buffer-changed-p', 'frame-parameter', 'frame-parameters', 'frame-pixel-height', 'frame-pixel-width', 'frame-pointer-visible-p', 'frame-right-divider-width', 'frame-root-window', 'frame-scroll-bar-height', 'frame-scroll-bar-width', 'frame-selected-window', 'frame-terminal', 'frame-text-cols', 'frame-text-height', 'frame-text-lines', 'frame-text-width', 'frame-total-cols', 'frame-total-lines', 'frame-visible-p', 'framep', 'frexp', 'fringe-bitmaps-at-pos', 'fround', 'fset', 'ftruncate', 'funcall', 'funcall-interactively', 'function-equal', 'functionp', 'gap-position', 'gap-size', 'garbage-collect', 'gc-status', 'generate-new-buffer-name', 'get', 'get-buffer', 'get-buffer-create', 'get-buffer-process', 'get-buffer-window', 'get-byte', 'get-char-property', 'get-char-property-and-overlay', 'get-file-buffer', 'get-file-char', 'get-internal-run-time', 'get-load-suffixes', 'get-pos-property', 'get-process', 'get-screen-color', 'get-text-property', 'get-unicode-property-internal', 'get-unused-category', 'get-unused-iso-final-char', 'getenv-internal', 'gethash', 'gfile-add-watch', 'gfile-rm-watch', 'global-key-binding', 'gnutls-available-p', 'gnutls-boot', 'gnutls-bye', 'gnutls-deinit', 'gnutls-error-fatalp', 'gnutls-error-string', 'gnutls-errorp', 'gnutls-get-initstage', 'gnutls-peer-status', 'gnutls-peer-status-warning-describe', 'goto-char', 'gpm-mouse-start', 'gpm-mouse-stop', 'group-gid', 'group-real-gid', 'handle-save-session', 'handle-switch-frame', 'hash-table-count', 'hash-table-p', 'hash-table-rehash-size', 'hash-table-rehash-threshold', 'hash-table-size', 'hash-table-test', 'hash-table-weakness', 'iconify-frame', 'identity', 'image-flush', 'image-mask-p', 'image-metadata', 'image-size', 'imagemagick-types', 'imagep', 'indent-to', 'indirect-function', 'indirect-variable', 'init-image-library', 'inotify-add-watch', 'inotify-rm-watch', 'input-pending-p', 'insert', 'insert-and-inherit', 'insert-before-markers', 'insert-before-markers-and-inherit', 'insert-buffer-substring', 'insert-byte', 'insert-char', 'insert-file-contents', 'insert-startup-screen', 'int86', 'integer-or-marker-p', 'integerp', 'interactive-form', 'intern', 'intern-soft', 'internal--track-mouse', 'internal-char-font', 'internal-complete-buffer', 'internal-copy-lisp-face', 'internal-default-process-filter', 'internal-default-process-sentinel', 'internal-describe-syntax-value', 'internal-event-symbol-parse-modifiers', 'internal-face-x-get-resource', 'internal-get-lisp-face-attribute', 'internal-lisp-face-attribute-values', 'internal-lisp-face-empty-p', 'internal-lisp-face-equal-p', 'internal-lisp-face-p', 'internal-make-lisp-face', 'internal-make-var-non-special', 'internal-merge-in-global-face', 'internal-set-alternative-font-family-alist', 'internal-set-alternative-font-registry-alist', 'internal-set-font-selection-order', 'internal-set-lisp-face-attribute', 'internal-set-lisp-face-attribute-from-resource', 'internal-show-cursor', 'internal-show-cursor-p', 'interrupt-process', 'invisible-p', 'invocation-directory', 'invocation-name', 'isnan', 'iso-charset', 'key-binding', 'key-description', 'keyboard-coding-system', 'keymap-parent', 'keymap-prompt', 'keymapp', 'keywordp', 'kill-all-local-variables', 'kill-buffer', 'kill-emacs', 'kill-local-variable', 'kill-process', 'last-nonminibuffer-frame', 'lax-plist-get', 'lax-plist-put', 'ldexp', 'length', 'libxml-parse-html-region', 'libxml-parse-xml-region', 'line-beginning-position', 'line-end-position', 'line-pixel-height', 'list', 'list-fonts', 'list-system-processes', 'listp', 'load', 'load-average', 'local-key-binding', 'local-variable-if-set-p', 'local-variable-p', 'locale-info', 'locate-file-internal', 'lock-buffer', 'log', 'logand', 'logb', 'logior', 'lognot', 'logxor', 'looking-at', 'lookup-image', 'lookup-image-map', 'lookup-key', 'lower-frame', 'lsh', 'macroexpand', 'make-bool-vector', 'make-byte-code', 'make-category-set', 'make-category-table', 'make-char', 'make-char-table', 'make-directory-internal', 'make-frame-invisible', 'make-frame-visible', 'make-hash-table', 'make-indirect-buffer', 'make-keymap', 'make-list', 'make-local-variable', 'make-marker', 'make-network-process', 'make-overlay', 'make-serial-process', 'make-sparse-keymap', 'make-string', 'make-symbol', 'make-symbolic-link', 'make-temp-name', 'make-terminal-frame', 'make-variable-buffer-local', 'make-variable-frame-local', 'make-vector', 'makunbound', 'map-char-table', 'map-charset-chars', 'map-keymap', 'map-keymap-internal', 'mapatoms', 'mapc', 'mapcar', 'mapconcat', 'maphash', 'mark-marker', 'marker-buffer', 'marker-insertion-type', 'marker-position', 'markerp', 'match-beginning', 'match-data', 'match-end', 'matching-paren', 'max', 'max-char', 'md5', 'member', 'memory-info', 'memory-limit', 'memory-use-counts', 'memq', 'memql', 'menu-bar-menu-at-x-y', 'menu-or-popup-active-p', 'menu-or-popup-active-p', 'merge-face-attribute', 'message', 'message-box', 'message-or-box', 'min', 'minibuffer-completion-contents', 'minibuffer-contents', 'minibuffer-contents-no-properties', 'minibuffer-depth', 'minibuffer-prompt', 'minibuffer-prompt-end', 'minibuffer-selected-window', 'minibuffer-window', 'minibufferp', 'minor-mode-key-binding', 'mod', 'modify-category-entry', 'modify-frame-parameters', 'modify-syntax-entry', 'mouse-pixel-position', 'mouse-position', 'move-overlay', 'move-point-visually', 'move-to-column', 'move-to-window-line', 'msdos-downcase-filename', 'msdos-long-file-names', 'msdos-memget', 'msdos-memput', 'msdos-mouse-disable', 'msdos-mouse-enable', 'msdos-mouse-init', 'msdos-mouse-p', 'msdos-remember-default-colors', 'msdos-set-keyboard', 'msdos-set-mouse-buttons', 'multibyte-char-to-unibyte', 'multibyte-string-p', 'narrow-to-region', 'natnump', 'nconc', 'network-interface-info', 'network-interface-list', 'new-fontset', 'newline-cache-check', 'next-char-property-change', 'next-frame', 'next-overlay-change', 'next-property-change', 'next-read-file-uses-dialog-p', 'next-single-char-property-change', 'next-single-property-change', 'next-window', 'nlistp', 'nreverse', 'nth', 'nthcdr', 'null', 'number-or-marker-p', 'number-to-string', 'numberp', 'open-dribble-file', 'open-font', 'open-termscript', 'optimize-char-table', 'other-buffer', 'other-window-for-scrolling', 'overlay-buffer', 'overlay-end', 'overlay-get', 'overlay-lists', 'overlay-properties', 'overlay-put', 'overlay-recenter', 'overlay-start', 'overlayp', 'overlays-at', 'overlays-in', 'parse-partial-sexp', 'play-sound-internal', 'plist-get', 'plist-member', 'plist-put', 'point', 'point-marker', 'point-max', 'point-max-marker', 'point-min', 'point-min-marker', 'pos-visible-in-window-p', 'position-bytes', 'posix-looking-at', 'posix-search-backward', 'posix-search-forward', 'posix-string-match', 'posn-at-point', 'posn-at-x-y', 'preceding-char', 'prefix-numeric-value', 'previous-char-property-change', 'previous-frame', 'previous-overlay-change', 'previous-property-change', 'previous-single-char-property-change', 'previous-single-property-change', 'previous-window', 'prin1', 'prin1-to-string', 'princ', 'print', 'process-attributes', 'process-buffer', 'process-coding-system', 'process-command', 'process-connection', 'process-contact', 'process-datagram-address', 'process-exit-status', 'process-filter', 'process-filter-multibyte-p', 'process-id', 'process-inherit-coding-system-flag', 'process-list', 'process-mark', 'process-name', 'process-plist', 'process-query-on-exit-flag', 'process-running-child-p', 'process-send-eof', 'process-send-region', 'process-send-string', 'process-sentinel', 'process-status', 'process-tty-name', 'process-type', 'processp', 'profiler-cpu-log', 'profiler-cpu-running-p', 'profiler-cpu-start', 'profiler-cpu-stop', 'profiler-memory-log', 'profiler-memory-running-p', 'profiler-memory-start', 'profiler-memory-stop', 'propertize', 'purecopy', 'put', 'put-text-property', 'put-unicode-property-internal', 'puthash', 'query-font', 'query-fontset', 'quit-process', 'raise-frame', 'random', 'rassoc', 'rassq', 're-search-backward', 're-search-forward', 'read', 'read-buffer', 'read-char', 'read-char-exclusive', 'read-coding-system', 'read-command', 'read-event', 'read-from-minibuffer', 'read-from-string', 'read-function', 'read-key-sequence', 'read-key-sequence-vector', 'read-no-blanks-input', 'read-non-nil-coding-system', 'read-string', 'read-variable', 'recent-auto-save-p', 'recent-doskeys', 'recent-keys', 'recenter', 'recursion-depth', 'recursive-edit', 'redirect-debugging-output', 'redirect-frame-focus', 'redisplay', 'redraw-display', 'redraw-frame', 'regexp-quote', 'region-beginning', 'region-end', 'register-ccl-program', 'register-code-conversion-map', 'remhash', 'remove-list-of-text-properties', 'remove-text-properties', 'rename-buffer', 'rename-file', 'replace-match', 'reset-this-command-lengths', 'resize-mini-window-internal', 'restore-buffer-modified-p', 'resume-tty', 'reverse', 'round', 'run-hook-with-args', 'run-hook-with-args-until-failure', 'run-hook-with-args-until-success', 'run-hook-wrapped', 'run-hooks', 'run-window-configuration-change-hook', 'run-window-scroll-functions', 'safe-length', 'scan-lists', 'scan-sexps', 'scroll-down', 'scroll-left', 'scroll-other-window', 'scroll-right', 'scroll-up', 'search-backward', 'search-forward', 'secure-hash', 'select-frame', 'select-window', 'selected-frame', 'selected-window', 'self-insert-command', 'send-string-to-terminal', 'sequencep', 'serial-process-configure', 'set', 'set-buffer', 'set-buffer-auto-saved', 'set-buffer-major-mode', 'set-buffer-modified-p', 'set-buffer-multibyte', 'set-case-table', 'set-category-table', 'set-char-table-extra-slot', 'set-char-table-parent', 'set-char-table-range', 'set-charset-plist', 'set-charset-priority', 'set-coding-system-priority', 'set-cursor-size', 'set-default', 'set-default-file-modes', 'set-default-toplevel-value', 'set-file-acl', 'set-file-modes', 'set-file-selinux-context', 'set-file-times', 'set-fontset-font', 'set-frame-height', 'set-frame-position', 'set-frame-selected-window', 'set-frame-size', 'set-frame-width', 'set-fringe-bitmap-face', 'set-input-interrupt-mode', 'set-input-meta-mode', 'set-input-mode', 'set-keyboard-coding-system-internal', 'set-keymap-parent', 'set-marker', 'set-marker-insertion-type', 'set-match-data', 'set-message-beep', 'set-minibuffer-window', 'set-mouse-pixel-position', 'set-mouse-position', 'set-network-process-option', 'set-output-flow-control', 'set-process-buffer', 'set-process-coding-system', 'set-process-datagram-address', 'set-process-filter', 'set-process-filter-multibyte', 'set-process-inherit-coding-system-flag', 'set-process-plist', 'set-process-query-on-exit-flag', 'set-process-sentinel', 'set-process-window-size', 'set-quit-char', 'set-safe-terminal-coding-system-internal', 'set-screen-color', 'set-standard-case-table', 'set-syntax-table', 'set-terminal-coding-system-internal', 'set-terminal-local-value', 'set-terminal-parameter', 'set-text-properties', 'set-time-zone-rule', 'set-visited-file-modtime', 'set-window-buffer', 'set-window-combination-limit', 'set-window-configuration', 'set-window-dedicated-p', 'set-window-display-table', 'set-window-fringes', 'set-window-hscroll', 'set-window-margins', 'set-window-new-normal', 'set-window-new-pixel', 'set-window-new-total', 'set-window-next-buffers', 'set-window-parameter', 'set-window-point', 'set-window-prev-buffers', 'set-window-redisplay-end-trigger', 'set-window-scroll-bars', 'set-window-start', 'set-window-vscroll', 'setcar', 'setcdr', 'setplist', 'show-face-resources', 'signal', 'signal-process', 'sin', 'single-key-description', 'skip-chars-backward', 'skip-chars-forward', 'skip-syntax-backward', 'skip-syntax-forward', 'sleep-for', 'sort', 'sort-charsets', 'special-variable-p', 'split-char', 'split-window-internal', 'sqrt', 'standard-case-table', 'standard-category-table', 'standard-syntax-table', 'start-kbd-macro', 'start-process', 'stop-process', 'store-kbd-macro-event', 'string', 'string=', 'string<', 'string>', 'string-as-multibyte', 'string-as-unibyte', 'string-bytes', 'string-collate-equalp', 'string-collate-lessp', 'string-equal', 'string-greaterp', 'string-lessp', 'string-make-multibyte', 'string-make-unibyte', 'string-match', 'string-to-char', 'string-to-multibyte', 'string-to-number', 'string-to-syntax', 'string-to-unibyte', 'string-width', 'stringp', 'subr-name', 'subrp', 'subst-char-in-region', 'substitute-command-keys', 'substitute-in-file-name', 'substring', 'substring-no-properties', 'suspend-emacs', 'suspend-tty', 'suspicious-object', 'sxhash', 'symbol-function', 'symbol-name', 'symbol-plist', 'symbol-value', 'symbolp', 'syntax-table', 'syntax-table-p', 'system-groups', 'system-move-file-to-trash', 'system-name', 'system-users', 'tan', 'terminal-coding-system', 'terminal-list', 'terminal-live-p', 'terminal-local-value', 'terminal-name', 'terminal-parameter', 'terminal-parameters', 'terpri', 'test-completion', 'text-char-description', 'text-properties-at', 'text-property-any', 'text-property-not-all', 'this-command-keys', 'this-command-keys-vector', 'this-single-command-keys', 'this-single-command-raw-keys', 'time-add', 'time-less-p', 'time-subtract', 'tool-bar-get-system-style', 'tool-bar-height', 'tool-bar-pixel-width', 'top-level', 'trace-redisplay', 'trace-to-stderr', 'translate-region-internal', 'transpose-regions', 'truncate', 'try-completion', 'tty-display-color-cells', 'tty-display-color-p', 'tty-no-underline', 'tty-suppress-bold-inverse-default-colors', 'tty-top-frame', 'tty-type', 'type-of', 'undo-boundary', 'unencodable-char-position', 'unhandled-file-name-directory', 'unibyte-char-to-multibyte', 'unibyte-string', 'unicode-property-table-internal', 'unify-charset', 'unintern', 'unix-sync', 'unlock-buffer', 'upcase', 'upcase-initials', 'upcase-initials-region', 'upcase-region', 'upcase-word', 'use-global-map', 'use-local-map', 'user-full-name', 'user-login-name', 'user-real-login-name', 'user-real-uid', 'user-uid', 'variable-binding-locus', 'vconcat', 'vector', 'vector-or-char-table-p', 'vectorp', 'verify-visited-file-modtime', 'vertical-motion', 'visible-frame-list', 'visited-file-modtime', 'w16-get-clipboard-data', 'w16-selection-exists-p', 'w16-set-clipboard-data', 'w32-battery-status', 'w32-default-color-map', 'w32-define-rgb-color', 'w32-display-monitor-attributes-list', 'w32-frame-menu-bar-size', 'w32-frame-rect', 'w32-get-clipboard-data', 'w32-get-codepage-charset', 'w32-get-console-codepage', 'w32-get-console-output-codepage', 'w32-get-current-locale-id', 'w32-get-default-locale-id', 'w32-get-keyboard-layout', 'w32-get-locale-info', 'w32-get-valid-codepages', 'w32-get-valid-keyboard-layouts', 'w32-get-valid-locale-ids', 'w32-has-winsock', 'w32-long-file-name', 'w32-reconstruct-hot-key', 'w32-register-hot-key', 'w32-registered-hot-keys', 'w32-selection-exists-p', 'w32-send-sys-command', 'w32-set-clipboard-data', 'w32-set-console-codepage', 'w32-set-console-output-codepage', 'w32-set-current-locale', 'w32-set-keyboard-layout', 'w32-set-process-priority', 'w32-shell-execute', 'w32-short-file-name', 'w32-toggle-lock-key', 'w32-unload-winsock', 'w32-unregister-hot-key', 'w32-window-exists-p', 'w32notify-add-watch', 'w32notify-rm-watch', 'waiting-for-user-input-p', 'where-is-internal', 'widen', 'widget-apply', 'widget-get', 'widget-put', 'window-absolute-pixel-edges', 'window-at', 'window-body-height', 'window-body-width', 'window-bottom-divider-width', 'window-buffer', 'window-combination-limit', 'window-configuration-frame', 'window-configuration-p', 'window-dedicated-p', 'window-display-table', 'window-edges', 'window-end', 'window-frame', 'window-fringes', 'window-header-line-height', 'window-hscroll', 'window-inside-absolute-pixel-edges', 'window-inside-edges', 'window-inside-pixel-edges', 'window-left-child', 'window-left-column', 'window-line-height', 'window-list', 'window-list-1', 'window-live-p', 'window-margins', 'window-minibuffer-p', 'window-mode-line-height', 'window-new-normal', 'window-new-pixel', 'window-new-total', 'window-next-buffers', 'window-next-sibling', 'window-normal-size', 'window-old-point', 'window-parameter', 'window-parameters', 'window-parent', 'window-pixel-edges', 'window-pixel-height', 'window-pixel-left', 'window-pixel-top', 'window-pixel-width', 'window-point', 'window-prev-buffers', 'window-prev-sibling', 'window-redisplay-end-trigger', 'window-resize-apply', 'window-resize-apply-total', 'window-right-divider-width', 'window-scroll-bar-height', 'window-scroll-bar-width', 'window-scroll-bars', 'window-start', 'window-system', 'window-text-height', 'window-text-pixel-size', 'window-text-width', 'window-top-child', 'window-top-line', 'window-total-height', 'window-total-width', 'window-use-time', 'window-valid-p', 'window-vscroll', 'windowp', 'write-char', 'write-region', 'x-backspace-delete-keys-p', 'x-change-window-property', 'x-change-window-property', 'x-close-connection', 'x-close-connection', 'x-create-frame', 'x-create-frame', 'x-delete-window-property', 'x-delete-window-property', 'x-disown-selection-internal', 'x-display-backing-store', 'x-display-backing-store', 'x-display-color-cells', 'x-display-color-cells', 'x-display-grayscale-p', 'x-display-grayscale-p', 'x-display-list', 'x-display-list', 'x-display-mm-height', 'x-display-mm-height', 'x-display-mm-width', 'x-display-mm-width', 'x-display-monitor-attributes-list', 'x-display-pixel-height', 'x-display-pixel-height', 'x-display-pixel-width', 'x-display-pixel-width', 'x-display-planes', 'x-display-planes', 'x-display-save-under', 'x-display-save-under', 'x-display-screens', 'x-display-screens', 'x-display-visual-class', 'x-display-visual-class', 'x-family-fonts', 'x-file-dialog', 'x-file-dialog', 'x-file-dialog', 'x-focus-frame', 'x-frame-geometry', 'x-frame-geometry', 'x-get-atom-name', 'x-get-resource', 'x-get-selection-internal', 'x-hide-tip', 'x-hide-tip', 'x-list-fonts', 'x-load-color-file', 'x-menu-bar-open-internal', 'x-menu-bar-open-internal', 'x-open-connection', 'x-open-connection', 'x-own-selection-internal', 'x-parse-geometry', 'x-popup-dialog', 'x-popup-menu', 'x-register-dnd-atom', 'x-select-font', 'x-select-font', 'x-selection-exists-p', 'x-selection-owner-p', 'x-send-client-message', 'x-server-max-request-size', 'x-server-max-request-size', 'x-server-vendor', 'x-server-vendor', 'x-server-version', 'x-server-version', 'x-show-tip', 'x-show-tip', 'x-synchronize', 'x-synchronize', 'x-uses-old-gtk-dialog', 'x-window-property', 'x-window-property', 'x-wm-set-size-hint', 'xw-color-defined-p', 'xw-color-defined-p', 'xw-color-values', 'xw-color-values', 'xw-display-color-p', 'xw-display-color-p', 'yes-or-no-p', 'zlib-available-p', 'zlib-decompress-region', 'forward-point'}
      + builtin_function_highlighted = {'defvaralias', 'provide', 'require', 'with-no-warnings', 'define-widget', 'with-electric-help', 'throw', 'defalias', 'featurep'}
      + lambda_list_keywords = {'&allow-other-keys', '&aux', '&body', '&environment', '&key', '&optional', '&rest', '&whole'}
      + error_keywords = {'cl-assert', 'cl-check-type', 'error', 'signal', 'user-error', 'warn'}
      + tokens = {'root': [default('body')], 'body': [('\\s+', Whitespace), (';.*$', Comment.Single), ('"', String, 'string'), ('\\?([^\\\\]|\\\\.)', String.Char), (':' + symbol, Name.Builtin), ('::' + symbol, String.Symbol), ("'" + symbol, String.Symbol), ("'", Operator), ('`', Operator), ('[-+]?\\d+\\.?' + terminated, Number.Integer), ('[-+]?\\d+/\\d+' + terminated, Number), ('[-+]?(\\d*\\.\\d+([defls][-+]?\\d+)?|\\d+(\\.\\d*)?[defls][-+]?\\d+)' + terminated, Number.Float), ('\\[|\\]', Punctuation), ('#:' + symbol, String.Symbol), ('#\\^\\^?', Operator), ("#\\'", Name.Function), ('#[bB][+-]?[01]+(/[01]+)?', Number.Bin), ('#[oO][+-]?[0-7]+(/[0-7]+)?', Number.Oct), ('#[xX][+-]?[0-9a-fA-F]+(/[0-9a-fA-F]+)?', Number.Hex), ('#\\d+r[+-]?[0-9a-zA-Z]+(/[0-9a-zA-Z]+)?', Number), ('#\\d+=', Operator), ('#\\d+#', Operator), ('(,@|,|\\.|:)', Operator), ('(t|nil)' + terminated, Name.Constant), ('\\*' + symbol + '\\*', Name.Variable.Global), (symbol, Name.Variable), ('#\\(', Operator, 'body'), ('\\(', Punctuation, 'body'), ('\\)', Punctuation, '#pop')], 'string': [('[^"\\\\`]+', String), (f"`{symbol}\\'", String.Symbol), ('`', String), ('\\\\.', String), ('\\\\\\n', String), ('"', String, '#pop')]}
  --
      + get_tokens_unprocessed(text)
  }

  class ShenLexer {
      + name = 'Shen'
      + url = 'http://shenlanguage.org/'
      + aliases = ['shen']
      + filenames = ['*.shen']
      + mimetypes = ['text/x-shen', 'application/x-shen']
      + version_added = '2.1'
      + DECLARATIONS = ('datatype', 'define', 'defmacro', 'defprolog', 'defcc', 'synonyms', 'declare', 'package', 'type', 'function')
      + SPECIAL_FORMS = ('lambda', 'get', 'let', 'if', 'cases', 'cond', 'put', 'time', 'freeze', 'value', 'load', '$', 'protect', 'or', 'and', 'not', 'do', 'output', 'prolog?', 'trap-error', 'error', 'make-string', '/.', 'set', '@p', '@s', '@v')
      + BUILTINS = ('==', '=', '*', '+', '-', '/', '<', '>', '>=', '<=', '<-address', '<-vector', 'abort', 'absvector', 'absvector?', 'address->', 'adjoin', 'append', 'arity', 'assoc', 'bind', 'boolean?', 'bound?', 'call', 'cd', 'close', 'cn', 'compile', 'concat', 'cons', 'cons?', 'cut', 'destroy', 'difference', 'element?', 'empty?', 'enable-type-theory', 'error-to-string', 'eval', 'eval-kl', 'exception', 'explode', 'external', 'fail', 'fail-if', 'file', 'findall', 'fix', 'fst', 'fwhen', 'gensym', 'get-time', 'hash', 'hd', 'hdstr', 'hdv', 'head', 'identical', 'implementation', 'in', 'include', 'include-all-but', 'inferences', 'input', 'input+', 'integer?', 'intern', 'intersection', 'is', 'kill', 'language', 'length', 'limit', 'lineread', 'loaded', 'macro', 'macroexpand', 'map', 'mapcan', 'maxinferences', 'mode', 'n->string', 'nl', 'nth', 'null', 'number?', 'occurrences', 'occurs-check', 'open', 'os', 'out', 'port', 'porters', 'pos', 'pr', 'preclude', 'preclude-all-but', 'print', 'profile', 'profile-results', 'ps', 'quit', 'read', 'read+', 'read-byte', 'read-file', 'read-file-as-bytelist', 'read-file-as-string', 'read-from-string', 'release', 'remove', 'return', 'reverse', 'run', 'save', 'set', 'simple-error', 'snd', 'specialise', 'spy', 'step', 'stinput', 'stoutput', 'str', 'string->n', 'string->symbol', 'string?', 'subst', 'symbol?', 'systemf', 'tail', 'tc', 'tc?', 'thaw', 'tl', 'tlstr', 'tlv', 'track', 'tuple?', 'undefmacro', 'unify', 'unify!', 'union', 'unprofile', 'unspecialise', 'untrack', 'variable?', 'vector', 'vector->', 'vector?', 'verified', 'version', 'warn', 'when', 'write-byte', 'write-to-file', 'y-or-n?')
      + BUILTINS_ANYWHERE = ('where', 'skip', '>>', '_', '!', '<e>', '<!>')
      + MAPPINGS = {s: Keyword for s in DECLARATIONS}
      + valid_symbol_chars = "[\\w!$%*+,<=>?/.\\'@&#:-]"
      + valid_name = f'{valid_symbol_chars}+'
      + symbol_name = f"[a-z!$%*+,<=>?/.\\'@&#_-]{valid_symbol_chars}*"
      + variable = f'[A-Z]{valid_symbol_chars}*'
      + tokens = {'string': [('"', String, '#pop'), ('c#\\d{1,3};', String.Escape), ('~[ARS%]', String.Interpol), ('(?s).', String)], 'root': [('(?s)\\\\\\*.*?\\*\\\\', Comment.Multiline), ('\\\\\\\\.*', Comment.Single), ('\\s+', Whitespace), ('_{5,}', Punctuation), ('={5,}', Punctuation), ('(;|:=|\\||--?>|<--?)', Punctuation), ('(:-|:|\\{|\\})', Literal), ('[+-]*\\d*\\.\\d+(e[+-]?\\d+)?', Number.Float), ('[+-]*\\d+', Number.Integer), ('"', String, 'string'), (variable, Name.Variable), ('(true|false|<>|\\[\\])', Keyword.Pseudo), (symbol_name, Literal), ('(\\[|\\]|\\(|\\))', Punctuation)]}
  --
      + get_tokens_unprocessed(text)
  }

  class CPSALexer {
      + name = 'CPSA'
      + aliases = ['cpsa']
      + filenames = ['*.cpsa']
      + mimetypes = []
      + url = 'https://web.cs.wpi.edu/~guttman/cs564/cpsauser.html'
      + version_added = '2.1'
      + valid_name = '[\\w!$%&*+,/:<=>?@^~|-]+'
      + tokens = {'root': [(';.*$', Comment.Single), ('\\s+', Whitespace), ('-?\\d+\\.\\d+', Number.Float), ('-?\\d+', Number.Integer), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ("'" + valid_name, String.Symbol), ('#\\\\([()/\'\\"._!§$%& ?=+-]|[a-zA-Z0-9]+)', String.Char), ('(#t|#f)', Name.Constant), ("('|#|`|,@|,|\\.)", Operator), (words(_keywords, suffix='\\b'), Keyword), ("(?<='\\()" + valid_name, Name.Variable), ('(?<=#\\()' + valid_name, Name.Variable), (words(_builtins, prefix='(?<=\\()', suffix='\\b'), Name.Builtin), ('(?<=\\()' + valid_name, Name.Function), (valid_name, Name.Variable), ('(\\(|\\))', Punctuation), ('(\\[|\\])', Punctuation)]}
  }

  class XtlangLexer {
      + name = 'xtlang'
      + url = 'http://extempore.moso.com.au'
      + aliases = ['extempore']
      + filenames = ['*.xtm']
      + mimetypes = []
      + version_added = '2.2'
      + common_keywords = ('lambda', 'define', 'if', 'else', 'cond', 'and', 'or', 'let', 'begin', 'set!', 'map', 'for-each')
      + scheme_keywords = ('do', 'delay', 'quasiquote', 'unquote', 'unquote-splicing', 'eval', 'case', 'let*', 'letrec', 'quote')
      + xtlang_bind_keywords = ('bind-func', 'bind-val', 'bind-lib', 'bind-type', 'bind-alias', 'bind-poly', 'bind-dylib', 'bind-lib-func', 'bind-lib-val')
      + xtlang_keywords = ('letz', 'memzone', 'cast', 'convert', 'dotimes', 'doloop')
      + common_functions = ('*', '+', '-', '/', '<', '<=', '=', '>', '>=', '%', 'abs', 'acos', 'angle', 'append', 'apply', 'asin', 'assoc', 'assq', 'assv', 'atan', 'boolean?', 'caaaar', 'caaadr', 'caaar', 'caadar', 'caaddr', 'caadr', 'caar', 'cadaar', 'cadadr', 'cadar', 'caddar', 'cadddr', 'caddr', 'cadr', 'car', 'cdaaar', 'cdaadr', 'cdaar', 'cdadar', 'cdaddr', 'cdadr', 'cdar', 'cddaar', 'cddadr', 'cddar', 'cdddar', 'cddddr', 'cdddr', 'cddr', 'cdr', 'ceiling', 'cons', 'cos', 'floor', 'length', 'list', 'log', 'max', 'member', 'min', 'modulo', 'not', 'reverse', 'round', 'sin', 'sqrt', 'substring', 'tan', 'println', 'random', 'null?', 'callback', 'now')
      + scheme_functions = ('call-with-current-continuation', 'call-with-input-file', 'call-with-output-file', 'call-with-values', 'call/cc', 'char->integer', 'char-alphabetic?', 'char-ci<=?', 'char-ci<?', 'char-ci=?', 'char-ci>=?', 'char-ci>?', 'char-downcase', 'char-lower-case?', 'char-numeric?', 'char-ready?', 'char-upcase', 'char-upper-case?', 'char-whitespace?', 'char<=?', 'char<?', 'char=?', 'char>=?', 'char>?', 'char?', 'close-input-port', 'close-output-port', 'complex?', 'current-input-port', 'current-output-port', 'denominator', 'display', 'dynamic-wind', 'eof-object?', 'eq?', 'equal?', 'eqv?', 'even?', 'exact->inexact', 'exact?', 'exp', 'expt', 'force', 'gcd', 'imag-part', 'inexact->exact', 'inexact?', 'input-port?', 'integer->char', 'integer?', 'interaction-environment', 'lcm', 'list->string', 'list->vector', 'list-ref', 'list-tail', 'list?', 'load', 'magnitude', 'make-polar', 'make-rectangular', 'make-string', 'make-vector', 'memq', 'memv', 'negative?', 'newline', 'null-environment', 'number->string', 'number?', 'numerator', 'odd?', 'open-input-file', 'open-output-file', 'output-port?', 'pair?', 'peek-char', 'port?', 'positive?', 'procedure?', 'quotient', 'rational?', 'rationalize', 'read', 'read-char', 'real-part', 'real?', 'remainder', 'scheme-report-environment', 'set-car!', 'set-cdr!', 'string', 'string->list', 'string->number', 'string->symbol', 'string-append', 'string-ci<=?', 'string-ci<?', 'string-ci=?', 'string-ci>=?', 'string-ci>?', 'string-copy', 'string-fill!', 'string-length', 'string-ref', 'string-set!', 'string<=?', 'string<?', 'string=?', 'string>=?', 'string>?', 'string?', 'symbol->string', 'symbol?', 'transcript-off', 'transcript-on', 'truncate', 'values', 'vector', 'vector->list', 'vector-fill!', 'vector-length', 'vector?', 'with-input-from-file', 'with-output-to-file', 'write', 'write-char', 'zero?')
      + xtlang_functions = ('toString', 'afill!', 'pfill!', 'tfill!', 'tbind', 'vfill!', 'array-fill!', 'pointer-fill!', 'tuple-fill!', 'vector-fill!', 'free', 'array', 'tuple', 'list', '~', 'cset!', 'cref', '&', 'bor', 'ang-names', '<<', '>>', 'nil', 'printf', 'sprintf', 'null', 'now', 'pset!', 'pref-ptr', 'vset!', 'vref', 'aset!', 'aref', 'aref-ptr', 'tset!', 'tref', 'tref-ptr', 'salloc', 'halloc', 'zalloc', 'alloc', 'schedule', 'exp', 'log', 'sin', 'cos', 'tan', 'asin', 'acos', 'atan', 'sqrt', 'expt', 'floor', 'ceiling', 'truncate', 'round', 'llvm_printf', 'push_zone', 'pop_zone', 'memzone', 'callback', 'llvm_sprintf', 'make-array', 'array-set!', 'array-ref', 'array-ref-ptr', 'pointer-set!', 'pointer-ref', 'pointer-ref-ptr', 'stack-alloc', 'heap-alloc', 'zone-alloc', 'make-tuple', 'tuple-set!', 'tuple-ref', 'tuple-ref-ptr', 'closure-set!', 'closure-ref', 'pref', 'pdref', 'impc_null', 'bitcast', 'void', 'ifret', 'ret->', 'clrun->', 'make-env-zone', 'make-env', '<>', 'dtof', 'ftod', 'i1tof', 'i1tod', 'i1toi8', 'i1toi32', 'i1toi64', 'i8tof', 'i8tod', 'i8toi1', 'i8toi32', 'i8toi64', 'i32tof', 'i32tod', 'i32toi1', 'i32toi8', 'i32toi64', 'i64tof', 'i64tod', 'i64toi1', 'i64toi8', 'i64toi32')
      + valid_scheme_name = '[\\w!$%&*+,/:<=>?@^~|-]+'
      + valid_xtlang_name = '[\\w.!-]+'
      + valid_xtlang_type = '[]{}[\\w<>,*/|!-]+'
      + tokens = {'xtlang': [('\\(', Punctuation, '#push'), ('\\)', Punctuation, '#pop'), ('(?<=bind-func\\s)' + valid_xtlang_name, Name.Function), ('(?<=bind-val\\s)' + valid_xtlang_name, Name.Function), ('(?<=bind-type\\s)' + valid_xtlang_name, Name.Function), ('(?<=bind-alias\\s)' + valid_xtlang_name, Name.Function), ('(?<=bind-poly\\s)' + valid_xtlang_name, Name.Function), ('(?<=bind-lib\\s)' + valid_xtlang_name, Name.Function), ('(?<=bind-dylib\\s)' + valid_xtlang_name, Name.Function), ('(?<=bind-lib-func\\s)' + valid_xtlang_name, Name.Function), ('(?<=bind-lib-val\\s)' + valid_xtlang_name, Name.Function), (':' + valid_xtlang_type, Keyword.Type), ('(<' + valid_xtlang_type + '>|\\|' + valid_xtlang_type + '\\||/' + valid_xtlang_type + '/|' + valid_xtlang_type + '\\*)\\**', Keyword.Type), (words(xtlang_keywords, prefix='(?<=\\()'), Keyword), (words(xtlang_functions, prefix='(?<=\\()'), Name.Function), include('common'), (valid_xtlang_name, Name.Variable)], 'scheme': [("'" + valid_scheme_name, String.Symbol), ('#\\\\([()/\'\\"._!§$%& ?=+-]|[a-zA-Z0-9]+)', String.Char), ("('|#|`|,@|,|\\.)", Operator), (words(scheme_keywords, prefix='(?<=\\()'), Keyword), (words(scheme_functions, prefix='(?<=\\()'), Name.Function), include('common'), (valid_scheme_name, Name.Variable)], 'common': [(';.*$', Comment.Single), ('\\s+', Whitespace), ('-?\\d+\\.\\d+', Number.Float), ('-?\\d+', Number.Integer), ('(#b|#o|#x)[\\d.]+', Number), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('(#t|#f)', Name.Constant), (words(common_keywords, prefix='(?<=\\()'), Keyword), (words(common_functions, prefix='(?<=\\()'), Name.Function), ('(\\(|\\))', Punctuation)], 'root': [(words(xtlang_bind_keywords, prefix='(?<=\\()', suffix='\\b'), Keyword, 'xtlang'), include('scheme')]}
  }

  class FennelLexer {
      + name = 'Fennel'
      + url = 'https://fennel-lang.org'
      + aliases = ['fennel', 'fnl']
      + filenames = ['*.fnl']
      + version_added = '2.3'
      + special_forms = ('#', '%', '*', '+', '-', '->', '->>', '-?>', '-?>>', '.', '..', '/', '//', ':', '<', '<=', '=', '>', '>=', '?.', '^', 'accumulate', 'and', 'band', 'bnot', 'bor', 'bxor', 'collect', 'comment', 'do', 'doc', 'doto', 'each', 'eval-compiler', 'for', 'hashfn', 'icollect', 'if', 'import-macros', 'include', 'length', 'let', 'lshift', 'lua', 'macrodebug', 'match', 'not', 'not=', 'or', 'partial', 'pick-args', 'pick-values', 'quote', 'require-macros', 'rshift', 'set', 'set-forcibly!', 'tset', 'values', 'when', 'while', 'with-open', '~=')
      + declarations = ('fn', 'global', 'lambda', 'local', 'macro', 'macros', 'var', 'λ')
      + builtins = ('_G', '_VERSION', 'arg', 'assert', 'bit32', 'collectgarbage', 'coroutine', 'debug', 'dofile', 'error', 'getfenv', 'getmetatable', 'io', 'ipairs', 'load', 'loadfile', 'loadstring', 'math', 'next', 'os', 'package', 'pairs', 'pcall', 'print', 'rawequal', 'rawget', 'rawlen', 'rawset', 'require', 'select', 'setfenv', 'setmetatable', 'string', 'table', 'tonumber', 'tostring', 'type', 'unpack', 'xpcall')
      + valid_name = '[a-zA-Z_!$%&*+/:<=>?^~|-][\\w!$%&*+/:<=>?^~|\\.-]*'
      + tokens = {'root': [(';.*$', Comment.Single), (',+', Text), ('\\s+', Whitespace), ('-?\\d+\\.\\d+', Number.Float), ('-?\\d+', Number.Integer), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('(true|false|nil)', Name.Constant), (':' + valid_name, String.Symbol), (words(special_forms, suffix=' '), Keyword), (words(declarations, suffix=' '), Keyword.Declaration), (words(builtins, suffix=' '), Name.Builtin), ('\\.\\.\\.', Name.Variable), (valid_name, Name.Variable), ('(\\(|\\))', Punctuation), ('(\\[|\\])', Punctuation), ('(\\{|\\})', Punctuation), ('#', Punctuation)]}
  }

  class JanetLexer {
      + name = 'Janet'
      + url = 'https://janet-lang.org/'
      + aliases = ['janet']
      + filenames = ['*.janet', '*.jdn']
      + mimetypes = ['text/x-janet', 'application/x-janet']
      + version_added = '2.18'
      + special_forms = ('break', 'def', 'do', 'fn', 'if', 'quote', 'quasiquote', 'splice', 'set', 'unquote', 'upscope', 'var', 'while')
      + builtin_macros = ('%=', '*=', '++', '+=', '--', '-=', '->', '->>', '-?>', '-?>>', '/=', 'and', 'as->', 'as-macro', 'as?->', 'assert', 'case', 'catseq', 'chr', 'comment', 'compif', 'comptime', 'compwhen', 'cond', 'coro', 'def-', 'default', 'defdyn', 'defer', 'defmacro', 'defmacro-', 'defn', 'defn-', 'delay', 'doc', 'each', 'eachk', 'eachp', 'edefer', 'ev/do-thread', 'ev/gather', 'ev/spawn', 'ev/spawn-thread', 'ev/with-deadline', 'ffi/defbind', 'fiber-fn', 'for', 'forever', 'forv', 'generate', 'if-let', 'if-not', 'if-with', 'import', 'juxt', 'label', 'let', 'loop', 'match', 'or', 'prompt', 'protect', 'repeat', 'seq', 'short-fn', 'tabseq', 'toggle', 'tracev', 'try', 'unless', 'use', 'var-', 'varfn', 'when', 'when-let', 'when-with', 'with', 'with-dyns', 'with-syms', 'with-vars', 'eachy')
      + builtin_functions = ('%', '*', '+', '-', '/', '<', '<=', '=', '>', '>=', 'abstract?', 'accumulate', 'accumulate2', 'all', 'all-bindings', 'all-dynamics', 'any?', 'apply', 'array', 'array/clear', 'array/concat', 'array/ensure', 'array/fill', 'array/insert', 'array/new', 'array/new-filled', 'array/peek', 'array/pop', 'array/push', 'array/remove', 'array/slice', 'array/trim', 'array/weak', 'array?', 'asm', 'bad-compile', 'bad-parse', 'band', 'blshift', 'bnot', 'boolean?', 'bor', 'brshift', 'brushift', 'buffer', 'buffer/bit', 'buffer/bit-clear', 'buffer/bit-set', 'buffer/bit-toggle', 'buffer/blit', 'buffer/clear', 'buffer/fill', 'buffer/format', 'buffer/from-bytes', 'buffer/new', 'buffer/new-filled', 'buffer/popn', 'buffer/push', 'buffer/push-at', 'buffer/push-byte', 'buffer/push-string', 'buffer/push-word', 'buffer/slice', 'buffer/trim', 'buffer?', 'bxor', 'bytes?', 'cancel', 'cfunction?', 'cli-main', 'cmp', 'comp', 'compare', 'compare<', 'compare<=', 'compare=', 'compare>', 'compare>=', 'compile', 'complement', 'count', 'curenv', 'debug', 'debug/arg-stack', 'debug/break', 'debug/fbreak', 'debug/lineage', 'debug/stack', 'debug/stacktrace', 'debug/step', 'debug/unbreak', 'debug/unfbreak', 'debugger', 'debugger-on-status', 'dec', 'deep-not=', 'deep=', 'defglobal', 'describe', 'dictionary?', 'disasm', 'distinct', 'div', 'doc*', 'doc-format', 'doc-of', 'dofile', 'drop', 'drop-until', 'drop-while', 'dyn', 'eflush', 'empty?', 'env-lookup', 'eprin', 'eprinf', 'eprint', 'eprintf', 'error', 'errorf', 'ev/acquire-lock', 'ev/acquire-rlock', 'ev/acquire-wlock', 'ev/all-tasks', 'ev/call', 'ev/cancel', 'ev/capacity', 'ev/chan', 'ev/chan-close', 'ev/chunk', 'ev/close', 'ev/count', 'ev/deadline', 'ev/full', 'ev/give', 'ev/give-supervisor', 'ev/go', 'ev/lock', 'ev/read', 'ev/release-lock', 'ev/release-rlock', 'ev/release-wlock', 'ev/rselect', 'ev/rwlock', 'ev/select', 'ev/sleep', 'ev/take', 'ev/thread', 'ev/thread-chan', 'ev/write', 'eval', 'eval-string', 'even?', 'every?', 'extreme', 'false?', 'ffi/align', 'ffi/call', 'ffi/calling-conventions', 'ffi/close', 'ffi/context', 'ffi/free', 'ffi/jitfn', 'ffi/lookup', 'ffi/malloc', 'ffi/native', 'ffi/pointer-buffer', 'ffi/pointer-cfunction', 'ffi/read', 'ffi/signature', 'ffi/size', 'ffi/struct', 'ffi/trampoline', 'ffi/write', 'fiber/can-resume?', 'fiber/current', 'fiber/getenv', 'fiber/last-value', 'fiber/maxstack', 'fiber/new', 'fiber/root', 'fiber/setenv', 'fiber/setmaxstack', 'fiber/status', 'fiber?', 'file/close', 'file/flush', 'file/lines', 'file/open', 'file/read', 'file/seek', 'file/tell', 'file/temp', 'file/write', 'filter', 'find', 'find-index', 'first', 'flatten', 'flatten-into', 'flush', 'flycheck', 'freeze', 'frequencies', 'from-pairs', 'function?', 'gccollect', 'gcinterval', 'gcsetinterval', 'gensym', 'get', 'get-in', 'getline', 'getproto', 'group-by', 'has-key?', 'has-value?', 'hash', 'idempotent?', 'identity', 'import*', 'in', 'inc', 'index-of', 'indexed?', 'int/s64', 'int/to-bytes', 'int/to-number', 'int/u64', 'int?', 'interleave', 'interpose', 'invert', 'juxt*', 'keep', 'keep-syntax', 'keep-syntax!', 'keys', 'keyword', 'keyword/slice', 'keyword?', 'kvs', 'last', 'length', 'lengthable?', 'load-image', 'macex', 'macex1', 'maclintf', 'make-env', 'make-image', 'map', 'mapcat', 'marshal', 'math/abs', 'math/acos', 'math/acosh', 'math/asin', 'math/asinh', 'math/atan', 'math/atan2', 'math/atanh', 'math/cbrt', 'math/ceil', 'math/cos', 'math/cosh', 'math/erf', 'math/erfc', 'math/exp', 'math/exp2', 'math/expm1', 'math/floor', 'math/gamma', 'math/gcd', 'math/hypot', 'math/lcm', 'math/log', 'math/log-gamma', 'math/log10', 'math/log1p', 'math/log2', 'math/next', 'math/pow', 'math/random', 'math/rng', 'math/rng-buffer', 'math/rng-int', 'math/rng-uniform', 'math/round', 'math/seedrandom', 'math/sin', 'math/sinh', 'math/sqrt', 'math/tan', 'math/tanh', 'math/trunc', 'max', 'max-of', 'mean', 'memcmp', 'merge', 'merge-into', 'merge-module', 'min', 'min-of', 'mod', 'module/add-paths', 'module/expand-path', 'module/find', 'module/value', 'nan?', 'nat?', 'native', 'neg?', 'net/accept', 'net/accept-loop', 'net/address', 'net/address-unpack', 'net/chunk', 'net/close', 'net/connect', 'net/flush', 'net/listen', 'net/localname', 'net/peername', 'net/read', 'net/recv-from', 'net/send-to', 'net/server', 'net/setsockopt', 'net/shutdown', 'net/write', 'next', 'nil?', 'not', 'not=', 'number?', 'odd?', 'one?', 'os/arch', 'os/cd', 'os/chmod', 'os/clock', 'os/compiler', 'os/cpu-count', 'os/cryptorand', 'os/cwd', 'os/date', 'os/dir', 'os/environ', 'os/execute', 'os/exit', 'os/getenv', 'os/isatty', 'os/link', 'os/lstat', 'os/mkdir', 'os/mktime', 'os/open', 'os/perm-int', 'os/perm-string', 'os/pipe', 'os/posix-exec', 'os/posix-fork', 'os/proc-close', 'os/proc-kill', 'os/proc-wait', 'os/readlink', 'os/realpath', 'os/rename', 'os/rm', 'os/rmdir', 'os/setenv', 'os/shell', 'os/sigaction', 'os/sleep', 'os/spawn', 'os/stat', 'os/strftime', 'os/symlink', 'os/time', 'os/touch', 'os/umask', 'os/which', 'pairs', 'parse', 'parse-all', 'parser/byte', 'parser/clone', 'parser/consume', 'parser/eof', 'parser/error', 'parser/flush', 'parser/has-more', 'parser/insert', 'parser/new', 'parser/produce', 'parser/state', 'parser/status', 'parser/where', 'partial', 'partition', 'partition-by', 'peg/compile', 'peg/find', 'peg/find-all', 'peg/match', 'peg/replace', 'peg/replace-all', 'pos?', 'postwalk', 'pp', 'prewalk', 'prin', 'prinf', 'print', 'printf', 'product', 'propagate', 'put', 'put-in', 'quit', 'range', 'reduce', 'reduce2', 'repl', 'require', 'resume', 'return', 'reverse', 'reverse!', 'run-context', 'sandbox', 'scan-number', 'setdyn', 'signal', 'slice', 'slurp', 'some', 'sort', 'sort-by', 'sorted', 'sorted-by', 'spit', 'string', 'string/ascii-lower', 'string/ascii-upper', 'string/bytes', 'string/check-set', 'string/find', 'string/find-all', 'string/format', 'string/from-bytes', 'string/has-prefix?', 'string/has-suffix?', 'string/join', 'string/repeat', 'string/replace', 'string/replace-all', 'string/reverse', 'string/slice', 'string/split', 'string/trim', 'string/triml', 'string/trimr', 'string?', 'struct', 'struct/getproto', 'struct/proto-flatten', 'struct/to-table', 'struct/with-proto', 'struct?', 'sum', 'symbol', 'symbol/slice', 'symbol?', 'table', 'table/clear', 'table/clone', 'table/getproto', 'table/new', 'table/proto-flatten', 'table/rawget', 'table/setproto', 'table/to-struct', 'table/weak', 'table/weak-keys', 'table/weak-values', 'table?', 'take', 'take-until', 'take-while', 'thaw', 'trace', 'true?', 'truthy?', 'tuple', 'tuple/brackets', 'tuple/setmap', 'tuple/slice', 'tuple/sourcemap', 'tuple/type', 'tuple?', 'type', 'unmarshal', 'untrace', 'update', 'update-in', 'values', 'varglobal', 'walk', 'warn-compile', 'xprin', 'xprinf', 'xprint', 'xprintf', 'yield', 'zero?', 'zipcoll', 'tarray/buffer', 'tarray/copy-bytes', 'tarray/length', 'tarray/new', 'tarray/properties', 'tarray/slice', 'tarray/swap-bytes', 'thread/close', 'thread/current', 'thread/exit', 'thread/new', 'thread/receive', 'thread/send')
      + builtin_variables = ('debugger-env', 'default-peg-grammar', 'janet/build', 'janet/config-bits', 'janet/version', 'load-image-dict', 'make-image-dict', 'math/-inf', 'math/e', 'math/inf', 'math/int-max', 'math/int-min', 'math/int32-max', 'math/int32-min', 'math/nan', 'math/pi', 'module/cache', 'module/loaders', 'module/loading', 'module/paths', 'root-env', 'stderr', 'stdin', 'stdout')
      + constants = ('false', 'nil', 'true')
      + valid_name = f'{_first_char}({_rest_char})*'
      + tokens = {'root': [('#.*$', Comment.Single), ('\\s+', Whitespace), (f'(?x)\n                  [+-]? [0-9]{{1,2}} r {_radix_unit} \\. ({_radix_unit})?\n                  ({_radix_exp})?\n               ', Number), (f'(?x)\n                  [+-]? [0-9]{{1,2}} r (\\.)? {_radix_unit}\n                  ({_radix_exp})?\n               ', Number), (f'(?x) [+-]? 0x {_hex_unit} \\. ({_hex_unit})?', Number.Hex), (f'(?x) [+-]? 0x (\\.)? {_hex_unit}', Number.Hex), (f'(?x) [+-]? {_dec_unit} \\. ({_dec_unit})? ({_dec_exp})?', Number.Float), (f'(?x) [+-]? (\\.)? {_dec_unit} ({_dec_exp})?', Number.Float), ('@?"', String, 'string'), ('@?(`+)(.|\\n)+?\\1', String), ("['~,;|]", Operator), ('@?[(\\[{]|[)\\]}]', Punctuation), (words(constants, suffix=_token_end), Keyword.Constants), (f'(:({_rest_char})+|:)', Name.Constant), (words(builtin_variables, suffix=_token_end), Name.Variable.Global), (words(special_forms, prefix='(?<=\\()', suffix=_token_end), Keyword.Reserved), (words(builtin_macros, prefix='(?<=\\()', suffix=_token_end), Name.Builtin), (words(builtin_functions, prefix='(?<=\\()', suffix=_token_end), Name.Function), (valid_name, Name.Variable)], 'string': [('\\\\(u[0-9a-fA-F]{4}|U[0-9a-fA-F]{6})', String.Escape), ('\\\\x[0-9a-fA-F]{2}', String.Escape), ('\\\\.', String.Escape), ('"', String, '#pop'), ('[^\\\\"]+', String)]}
  }

  class Macaulay2Lexer {
      + name = 'Macaulay2'
      + url = 'https://macaulay2.com/'
      + aliases = ['macaulay2']
      + filenames = ['*.m2']
      + version_added = '2.12'
      + tokens = {'root': [('--.*$', Comment.Single), ('-\\*', Comment.Multiline, 'block comment'), ('"', String, 'quote string'), ('///', String, 'slash string'), (words(M2KEYWORDS, prefix='\\b', suffix='\\b'), Keyword), (words(M2DATATYPES, prefix='\\b', suffix='\\b'), Name.Builtin), (words(M2FUNCTIONS, prefix='\\b', suffix='\\b'), Name.Function), (words(M2CONSTANTS, prefix='\\b', suffix='\\b'), Name.Constant), ('\\s+', Text.Whitespace), ('.', Text)], 'block comment': [('[^*-]+', Comment.Multiline), ('\\*-', Comment.Multiline, '#pop'), ('[*-]', Comment.Multiline)], 'quote string': [('[^\\\\"]+', String), ('"', String, '#pop'), ('\\\\"?', String)], 'slash string': [('[^/]+', String), ('(//)+(?!/)', String), ('/(//)+(?!/)', String, '#pop'), ('/', String)]}
  }

  class MakefileLexer {
      + name = 'Makefile'
      + aliases = ['make', 'makefile', 'mf', 'bsdmake']
      + filenames = ['*.mak', '*.mk', 'Makefile', 'makefile', 'Makefile.*', 'GNUmakefile']
      + mimetypes = ['text/x-makefile']
      + url = 'https://en.wikipedia.org/wiki/Make_(software)'
      + version_added = ''
      + r_special = re.compile('^(?:\\.\\s*(include|undef|error|warning|if|else|elif|endif|for|endfor)|\\s*(ifeq|ifneq|ifdef|ifndef|else|endif|-?include|define|endef|:|vpath)|\\s*(if|else|endif))(?=\\s)')
      + r_comment = re.compile('^\\s*@?#')
  --
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class BaseMakefileLexer {
      + name = 'Base Makefile'
      + aliases = ['basemake']
      + filenames = []
      + mimetypes = []
      + url = 'https://en.wikipedia.org/wiki/Make_(software)'
      + version_added = '0.10'
      + tokens = {'root': [('^(?:[\\t ]+.*\\n|\\n)+', using(BashLexer)), ('\\$[<@$+%?|*]', Keyword), ('\\s+', Whitespace), ('#.*?\\n', Comment), ('((?:un)?export)(\\s+)(?=[\\w${}\\t -]+\\n)', bygroups(Keyword, Whitespace), 'export'), ('(?:un)?export\\s+', Keyword), ('([\\w${}().-]+)(\\s*)([!?:+]?=)([ \\t]*)((?:.*\\\\\\n)+|.*\\n)', bygroups(Name.Variable, Whitespace, Operator, Whitespace, using(BashLexer))), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('([^\\n:]+)(:+)([ \\t]*)', bygroups(Name.Function, Operator, Whitespace), 'block-header'), ('\\$\\(', Keyword, 'expansion')], 'expansion': [('[^\\w$().-]+', Text), ('[\\w.-]+', Name.Variable), ('\\$', Keyword), ('\\(', Keyword, '#push'), ('\\)', Keyword, '#pop')], 'export': [('[\\w${}-]+', Name.Variable), ('\\n', Text, '#pop'), ('\\s+', Whitespace)], 'block-header': [('[,|]', Punctuation), ('#.*?\\n', Comment, '#pop'), ('\\\\\\n', Text), ('\\$\\(', Keyword, 'expansion'), ('[a-zA-Z_]+', Name), ('\\n', Whitespace, '#pop'), ('.', Text)]}
  }

  class CMakeLexer {
      + name = 'CMake'
      + url = 'https://cmake.org/documentation/'
      + aliases = ['cmake']
      + filenames = ['*.cmake', 'CMakeLists.txt']
      + mimetypes = ['text/x-cmake']
      + version_added = '1.2'
      + tokens = {'root': [('\\b(\\w+)([ \\t]*)(\\()', bygroups(Name.Builtin, Whitespace, Punctuation), 'args'), include('keywords'), include('ws')], 'args': [('\\(', Punctuation, '#push'), ('\\)', Punctuation, '#pop'), ('(\\$\\{)(.+?)(\\})', bygroups(Operator, Name.Variable, Operator)), ('(\\$ENV\\{)(.+?)(\\})', bygroups(Operator, Name.Variable, Operator)), ('(\\$<)(.+?)(>)', bygroups(Operator, Name.Variable, Operator)), ('(?s)".*?"', String.Double), ('\\\\\\S+', String), ('\\[(?P<level>=*)\\[[\\w\\W]*?\\](?P=level)\\]', String.Multiline), ('[^)$"# \\t\\n]+', String), ('\\n', Whitespace), include('keywords'), include('ws')], 'string': [], 'keywords': [('\\b(WIN32|UNIX|APPLE|CYGWIN|BORLAND|MINGW|MSVC|MSVC_IDE|MSVC60|MSVC70|MSVC71|MSVC80|MSVC90)\\b', Keyword)], 'ws': [('[ \\t]+', Whitespace), ('#\\[(?P<level>=*)\\[[\\w\\W]*?\\](?P=level)\\]', Comment), ('#.*\\n', Comment)]}
  --
      + analyse_text(text)
  }

  class MapleLexer {
      + name = 'Maple'
      + aliases = ['maple']
      + filenames = ['*.mpl', '*.mi', '*.mm']
      + mimetypes = ['text/x-maple']
      + url = 'https://www.maplesoft.com/products/Maple/'
      + version_added = '2.19'
      + keywords = ('and', 'assuming', 'break', 'by', 'catch', 'description', 'do', 'done', 'elif', 'else', 'end', 'error', 'export', 'fi', 'finally', 'for', 'from', 'global', 'if', 'implies', 'in', 'intersect', 'local', 'minus', 'mod', 'module', 'next', 'not', 'od', 'option', 'options', 'or', 'proc', 'quit', 'read', 'return', 'save', 'stop', 'subset', 'then', 'to', 'try', 'union', 'use', 'uses', 'while', 'xor')
      + builtins = ('abs', 'add', 'addressof', 'anames', 'and', 'andmap', 'andseq', 'appendto', 'Array', 'array', 'ArrayOptions', 'assemble', 'ASSERT', 'assign', 'assigned', 'attributes', 'cat', 'ceil', 'coeff', 'coeffs', 'conjugate', 'convert', 'CopySign', 'DEBUG', 'debugopts', 'Default0', 'DefaultOverflow', 'DefaultUnderflow', 'degree', 'denom', 'diff', 'disassemble', 'divide', 'done', 'entries', 'EqualEntries', 'eval', 'evalb', 'evalf', 'evalhf', 'evalindets', 'evaln', 'expand', 'exports', 'factorial', 'floor', 'frac', 'frem', 'FromInert', 'frontend', 'gc', 'genpoly', 'has', 'hastype', 'hfarray', 'icontent', 'igcd', 'ilcm', 'ilog10', 'Im', 'implies', 'indets', 'indices', 'intersect', 'iolib', 'iquo', 'irem', 'iroot', 'iroot', 'isqrt', 'kernelopts', 'lcoeff', 'ldegree', 'length', 'lexorder', 'lhs', 'lowerbound', 'lprint', 'macro', 'map', 'max', 'maxnorm', 'member', 'membertype', 'min', 'minus', 'mod', 'modp', 'modp1', 'modp2', 'mods', 'mul', 'NextAfter', 'nops', 'normal', 'not', 'numboccur', 'numelems', 'numer', 'NumericClass', 'NumericEvent', 'NumericEventHandler', 'NumericStatus', 'op', 'or', 'order', 'OrderedNE', 'ormap', 'orseq', 'parse', 'piecewise', 'pointto', 'print', 'quit', 'Re', 'readlib', 'Record', 'remove', 'rhs', 'round', 'rtable', 'rtable_elems', 'rtable_eval', 'rtable_indfns', 'rtable_num_elems', 'rtable_options', 'rtable_redim', 'rtable_scanblock', 'rtable_set_indfn', 'rtable_split_unit', 'savelib', 'Scale10', 'Scale2', 'SDMPolynom', 'searchtext', 'SearchText', 'select', 'selectremove', 'seq', 'series', 'setattribute', 'SFloatExponent', 'SFloatMantissa', 'sign', 'sort', 'ssystem', 'stop', 'String', 'subs', 'subset', 'subsindets', 'subsop', 'substring', 'system', 'table', 'taylor', 'tcoeff', 'time', 'timelimit', 'ToInert', 'traperror', 'trunc', 'type', 'typematch', 'unames', 'unassign', 'union', 'Unordered', 'upperbound', 'userinfo', 'writeto', 'xor', 'xormap', 'xorseq')
      + tokens = {'root': [('#.*\\n', Comment.Single), ('\\(\\*', Comment.Multiline, 'comment'), ('"(\\\\.|.|\\s)*?"', String), ("('+)((.|\\n)*?)\\1", delayed_callback), ('`(\\\\`|.)*?`', Name), (words(keywords, prefix='\\b', suffix='\\b'), Keyword), (words(builtins, prefix='\\b', suffix='\\b'), Name.Builtin), ('[a-zA-Z_][a-zA-Z0-9_]*', Name), ('(:=|\\*\\*|@@|<=|>=|<>|->|::|\\.\\.|&\\+|[\\+\\-\\*\\.\\^\\$/@&,:=<>%~])', Operator), ('[;^!@$\\(\\)\\[\\]{}|_\\\\#?]+', Punctuation), ('(\\d+)(\\.\\.)', bygroups(Number.Integer, Punctuation)), ('(\\d*\\.\\d+|\\d+\\.\\d*)([eE][+-]?\\d+)?', Number.Float), ('\\d+', Number.Integer), ('\\s+', Whitespace)], 'comment': [('.*\\(\\*', Comment.Multiline, '#push'), ('.*\\*\\)', Comment.Multiline, '#pop'), ('.*\\n', Comment.Multiline)]}
  --
      + delayed_callback(match, ctx)
      + analyse_text(text)
  }

  class BBCodeLexer {
      + name = 'BBCode'
      + aliases = ['bbcode']
      + mimetypes = ['text/x-bbcode']
      + url = 'https://www.bbcode.org/'
      + version_added = '0.6'
      + tokens = {'root': [('[^[]+', Text), ('\\[/?\\w+', Keyword, 'tag'), ('\\[', Text)], 'tag': [('\\s+', Text), ('(\\w+)(=)("?[^\\s"\\]]+"?)', bygroups(Name.Attribute, Operator, String)), ('(=)("?[^\\s"\\]]+"?)', bygroups(Operator, String)), ('\\]', Keyword, '#pop')]}
  }

  class MoinWikiLexer {
      + name = 'MoinMoin/Trac Wiki markup'
      + aliases = ['trac-wiki', 'moin']
      + filenames = []
      + mimetypes = ['text/x-trac-wiki']
      + url = 'https://moinmo.in'
      + version_added = '0.7'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': [('^#.*$', Comment), ('(!)(\\S+)', bygroups(Keyword, Text)), ('^(=+)([^=]+)(=+)(\\s*#.+)?$', bygroups(Generic.Heading, using(this), Generic.Heading, String)), ('(\\{\\{\\{)(\\n#!.+)?', bygroups(Name.Builtin, Name.Namespace), 'codeblock'), ("(\\'\\'\\'?|\\|\\||`|__|~~|\\^|,,|::)", Comment), ('^( +)([.*-])( )', bygroups(Text, Name.Builtin, Text)), ('^( +)([a-z]{1,5}\\.)( )', bygroups(Text, Name.Builtin, Text)), ('\\[\\[\\w+.*?\\]\\]', Keyword), ('(\\[[^\\s\\]]+)(\\s+[^\\]]+?)?(\\])', bygroups(Keyword, String, Keyword)), ('^----+$', Keyword), ("[^\\n\\'\\[{!_~^,|]+", Text), ('\\n', Text), ('.', Text)], 'codeblock': [('\\}\\}\\}', Name.Builtin, '#pop'), ('\\{\\{\\{', Text, '#push'), ('[^{}]+', Comment.Preproc), ('.', Comment.Preproc)]}
  }

  class RstLexer {
      + name = 'reStructuredText'
      + url = 'https://docutils.sourceforge.io/rst.html'
      + aliases = ['restructuredtext', 'rst', 'rest']
      + filenames = ['*.rst', '*.rest']
      + mimetypes = ['text/x-rst', 'text/prs.fallenstein.rst']
      + version_added = '0.7'
      + flags = re.MULTILINE
      + closers = '\'")]}>’”»!?'
      + unicode_delimiters = '‐‑‒–—\xa0'
      + end_string_suffix = f'((?=$)|(?=[-/:.,; \\n\\x00{re.escape(unicode_delimiters)}{re.escape(closers)}]))'
      + tokens = {'root': [('^(=+|-+|`+|:+|\\.+|\\\'+|"+|~+|\\^+|_+|\\*+|\\++|#+)([ \\t]*\\n)(.+)(\\n)(\\1)(\\n)', bygroups(Generic.Heading, Text, Generic.Heading, Text, Generic.Heading, Text)), ('^(\\S.*)(\\n)(={3,}|-{3,}|`{3,}|:{3,}|\\.{3,}|\\\'{3,}|"{3,}|~{3,}|\\^{3,}|_{3,}|\\*{3,}|\\+{3,}|#{3,})(\\n)', bygroups(Generic.Heading, Text, Generic.Heading, Text)), ('^(\\s*)([-*+])( .+\\n(?:\\1  .+\\n)*)', bygroups(Text, Number, using(this, state='inline'))), ('^(\\s*)([0-9#ivxlcmIVXLCM]+\\.)( .+\\n(?:\\1  .+\\n)*)', bygroups(Text, Number, using(this, state='inline'))), ('^(\\s*)(\\(?[0-9#ivxlcmIVXLCM]+\\))( .+\\n(?:\\1  .+\\n)*)', bygroups(Text, Number, using(this, state='inline'))), ('^(\\s*)([A-Z]+\\.)( .+\\n(?:\\1  .+\\n)+)', bygroups(Text, Number, using(this, state='inline'))), ('^(\\s*)(\\(?[A-Za-z]+\\))( .+\\n(?:\\1  .+\\n)+)', bygroups(Text, Number, using(this, state='inline'))), ('^(\\s*)(\\|)( .+\\n(?:\\|  .+\\n)*)', bygroups(Text, Operator, using(this, state='inline'))), ('^( *\\.\\.)(\\s*)((?:source)?code(?:-block)?)(::)([ \\t]*)([^\\n]+)(\\n[ \\t]*\\n)([ \\t]+)(.*)(\\n)((?:(?:\\8.*)?\\n)+)', _handle_sourcecode), ('^( *\\.\\.)(\\s*)([\\w:-]+?)(::)(?:([ \\t]*)(.*))', bygroups(Punctuation, Text, Operator.Word, Punctuation, Text, using(this, state='inline'))), ('^( *\\.\\.)(\\s*)(_(?:[^:\\\\]|\\\\.)+:)(.*?)$', bygroups(Punctuation, Text, Name.Tag, using(this, state='inline'))), ('^( *\\.\\.)(\\s*)(\\[.+\\])(.*?)$', bygroups(Punctuation, Text, Name.Tag, using(this, state='inline'))), ('^( *\\.\\.)(\\s*)(\\|.+\\|)(\\s*)([\\w:-]+?)(::)(?:([ \\t]*)(.*))', bygroups(Punctuation, Text, Name.Tag, Text, Operator.Word, Punctuation, Text, using(this, state='inline'))), ('^ *\\.\\..*(\\n( +.*\\n|\\n)+)?', Comment), ('^( *)(:(?:\\\\\\\\|\\\\:|[^:\\n])+:(?=\\s))([ \\t]*)', bygroups(Text, Name.Class, Text)), ('^(\\S.*(?<!::)\\n)((?:(?: +.*)\\n)+)', bygroups(using(this, state='inline'), using(this, state='inline'))), ('(::)(\\n[ \\t]*\\n)([ \\t]+)(.*)(\\n)((?:(?:\\3.*)?\\n)+)', bygroups(String.Escape, Text, String, String, Text, String)), include('inline')], 'inline': [('\\\\.', Text), ('``', String, 'literal'), ('(`.+?)(<.+?>)(`__?)', bygroups(String, String.Interpol, String)), ('`.+?`__?', String), ('(`.+?`)(:[a-zA-Z0-9:-]+?:)?', bygroups(Name.Variable, Name.Attribute)), ('(:[a-zA-Z0-9:-]+?:)(`.+?`)', bygroups(Name.Attribute, Name.Variable)), ('\\*\\*.+?\\*\\*', Generic.Strong), ('\\*.+?\\*', Generic.Emph), ('\\[.*?\\]_', String), ('<.+?>', Name.Tag), ('[^\\\\\\n\\[*`:]+', Text), ('.', Text)], 'literal': [('[^`]+', String), ('``' + end_string_suffix, String, '#pop'), ('`', String)]}
  --
      - __init__()
      + analyse_text(text)
  }

  class TexLexer {
      + name = 'TeX'
      + aliases = ['tex', 'latex']
      + filenames = ['*.tex', '*.aux', '*.toc']
      + mimetypes = ['text/x-tex', 'text/x-latex']
      + url = 'https://tug.org'
      + version_added = ''
      + tokens = {'general': [('%.*?\\n', Comment), ('[{}]', Name.Builtin), ('[&_^]', Name.Builtin)], 'root': [('\\\\\\[', String.Backtick, 'displaymath'), ('\\\\\\(', String, 'inlinemath'), ('\\$\\$', String.Backtick, 'displaymath'), ('\\$', String, 'inlinemath'), ('\\\\([a-zA-Z@_:]+|\\S?)', Keyword, 'command'), ('\\\\$', Keyword), include('general'), ('[^\\\\$%&_^{}]+', Text)], 'math': [('\\\\([a-zA-Z]+|\\S?)', Name.Variable), include('general'), ('[0-9]+', Number), ('[-=!+*/()\\[\\]]', Operator), ('[^=!+*/()\\[\\]\\\\$%&_^{}0-9-]+', Name.Builtin)], 'inlinemath': [('\\\\\\)', String, '#pop'), ('\\$', String, '#pop'), include('math')], 'displaymath': [('\\\\\\]', String, '#pop'), ('\\$\\$', String, '#pop'), ('\\$', Name.Builtin), include('math')], 'command': [('\\[.*?\\]', Name.Attribute), ('\\*', Keyword), default('#pop')]}
  --
      + analyse_text(text)
  }

  class GroffLexer {
      + name = 'Groff'
      + aliases = ['groff', 'nroff', 'man']
      + filenames = ['*.[1-9]', '*.man', '*.1p', '*.3pm']
      + mimetypes = ['application/x-troff', 'text/troff']
      + url = 'https://www.gnu.org/software/groff'
      + version_added = '0.6'
      + tokens = {'root': [('(\\.)(\\w+)', bygroups(Text, Keyword), 'request'), ('\\.', Punctuation, 'request'), ('[^\\\\\\n]+', Text, 'textline'), default('textline')], 'textline': [include('escapes'), ('[^\\\\\\n]+', Text), ('\\n', Text, '#pop')], 'escapes': [('\\\\"[^\\n]*', Comment), ('\\\\[fn]\\w', String.Escape), ('\\\\\\(.{2}', String.Escape), ('\\\\.\\[.*\\]', String.Escape), ('\\\\.', String.Escape), ('\\\\\\n', Text, 'request')], 'request': [('\\n', Text, '#pop'), include('escapes'), ('"[^\\n"]+"', String.Double), ('\\d+', Number), ('\\S+', String), ('\\s+', Text)]}
  --
      + analyse_text(text)
  }

  class MozPreprocHashLexer {
      + name = 'mozhashpreproc'
      + aliases = [name]
      + filenames = []
      + mimetypes = []
      + url = 'https://firefox-source-docs.mozilla.org/build/buildsystem/preprocessor.html'
      + version_added = '2.0'
      + tokens = {'root': [('^#', Comment.Preproc, ('expr', 'exprstart')), ('.+', Other)], 'exprstart': [('(literal)(.*)', bygroups(Comment.Preproc, Text), '#pop:2'), (words(('define', 'undef', 'if', 'ifdef', 'ifndef', 'else', 'elif', 'elifdef', 'elifndef', 'endif', 'expand', 'filter', 'unfilter', 'include', 'includesubst', 'error')), Comment.Preproc, '#pop')], 'expr': [(words(('!', '!=', '==', '&&', '||')), Operator), ('(defined)(\\()', bygroups(Keyword, Punctuation)), ('\\)', Punctuation), ('[0-9]+', Number.Decimal), ('__\\w+?__', Name.Variable), ('@\\w+?@', Name.Class), ('\\w+', Name), ('\\n', Text, '#pop'), ('\\s+', Text), ('\\S', Punctuation)]}
  }

  class MozPreprocPercentLexer {
      + name = 'mozpercentpreproc'
      + aliases = [name]
      + filenames = []
      + mimetypes = []
      + url = 'https://firefox-source-docs.mozilla.org/build/buildsystem/preprocessor.html'
      + version_added = '2.0'
      + tokens = {'root': [('^%', Comment.Preproc, ('expr', 'exprstart')), ('.+', Other)]}
  }

  class MozPreprocXulLexer {
      + name = 'XUL+mozpreproc'
      + aliases = ['xul+mozpreproc']
      + filenames = ['*.xul.in']
      + mimetypes = []
      + url = 'https://firefox-source-docs.mozilla.org/build/buildsystem/preprocessor.html'
      + version_added = '2.0'
  --
      - __init__()
  }

  class MozPreprocJavascriptLexer {
      + name = 'Javascript+mozpreproc'
      + aliases = ['javascript+mozpreproc']
      + filenames = ['*.js.in']
      + mimetypes = []
      + url = 'https://firefox-source-docs.mozilla.org/build/buildsystem/preprocessor.html'
      + version_added = '2.0'
  --
      - __init__()
  }

  class MozPreprocCssLexer {
      + name = 'CSS+mozpreproc'
      + aliases = ['css+mozpreproc']
      + filenames = ['*.css.in']
      + mimetypes = []
      + url = 'https://firefox-source-docs.mozilla.org/build/buildsystem/preprocessor.html'
      + version_added = '2.0'
  --
      - __init__()
  }

  class MarkdownLexer {
      + name = 'Markdown'
      + url = 'https://daringfireball.net/projects/markdown/'
      + aliases = ['markdown', 'md']
      + filenames = ['*.md', '*.markdown']
      + mimetypes = ['text/x-markdown']
      + version_added = '2.2'
      + flags = re.MULTILINE
      + tokens = {'root': [('(^#[^#].+)(\\n)', bygroups(Generic.Heading, Text)), ('(^#{2,6}[^#].+)(\\n)', bygroups(Generic.Subheading, Text)), ('^(.+)(\\n)(=+)(\\n)', bygroups(Generic.Heading, Text, Generic.Heading, Text)), ('^(.+)(\\n)(-+)(\\n)', bygroups(Generic.Subheading, Text, Generic.Subheading, Text)), ('^(\\s*)([*-] )(\\[[ xX]\\])( .+\\n)', bygroups(Whitespace, Keyword, Keyword, using(this, state='inline'))), ('^(\\s*)([*-])(\\s)(.+\\n)', bygroups(Whitespace, Keyword, Whitespace, using(this, state='inline'))), ('^(\\s*)([0-9]+\\.)( .+\\n)', bygroups(Whitespace, Keyword, using(this, state='inline'))), ('^(\\s*>\\s)(.+\\n)', bygroups(Keyword, Generic.Emph)), ('^(\\s*```\\n[\\w\\W]*?^\\s*```$\\n)', String.Backtick), ('(?x)\n              ^(?P<initial>\\s*```)\n              (?P<lang>[\\w\\-]+)\n              (?P<afterlang>\n                 (?P<whitespace>[^\\S\\n]+)\n                 (?P<extra>.*))?\n              (?P<newline>\\n)\n              (?P<code>(.|\\n)*?)\n              (?P<terminator>^\\s*```$\\n)\n              ', _handle_codeblock), include('inline')], 'inline': [('\\\\.', Text), ('([^`]?)(`[^`\\n]+`)', bygroups(Text, String.Backtick)), ('([^\\*]?)(\\*\\*[^* \\n][^*\\n]*\\*\\*)', bygroups(Text, Generic.Strong)), ('([^_]?)(__[^_ \\n][^_\\n]*__)', bygroups(Text, Generic.Strong)), ('([^\\*]?)(\\*[^* \\n][^*\\n]*\\*)', bygroups(Text, Generic.Emph)), ('([^_]?)(_[^_ \\n][^_\\n]*_)', bygroups(Text, Generic.Emph)), ('([^~]?)(~~[^~ \\n][^~\\n]*~~)', bygroups(Text, Generic.Deleted)), ('[@#][\\w/:]+', Name.Entity), ('(!?\\[)([^]]+)(\\])(\\()([^)]+)(\\))', bygroups(Text, Name.Tag, Text, Text, Name.Attribute, Text)), ('(\\[)([^]]+)(\\])(\\[)([^]]*)(\\])', bygroups(Text, Name.Tag, Text, Text, Name.Label, Text)), ('^(\\s*\\[)([^]]*)(\\]:\\s*)(.+)', bygroups(Text, Name.Label, Text, Name.Attribute)), ('[^\\\\\\s]+', Text), ('.', Text)]}
  --
      - __init__()
  }

  class OrgLexer {
      + name = 'Org Mode'
      + url = 'https://orgmode.org'
      + aliases = ['org', 'orgmode', 'org-mode']
      + filenames = ['*.org']
      + mimetypes = ['text/org']
      + version_added = '2.18'
      + tokens = {'root': [('^# .*', Comment.Single), ('^(\\* )(COMMENT)( .*)', bygroups(Generic.Heading, Comment.Preproc, Generic.Heading)), ('^(\\*\\*+ )(COMMENT)( .*)', bygroups(Generic.Subheading, Comment.Preproc, Generic.Subheading)), ('^(\\* )(DONE)( .*)', bygroups(Generic.Heading, Generic.Deleted, Generic.Heading)), ('^(\\*\\*+ )(DONE)( .*)', bygroups(Generic.Subheading, Generic.Deleted, Generic.Subheading)), ('^(\\* )(TODO)( .*)', bygroups(Generic.Heading, Generic.Error, Generic.Heading)), ('^(\\*\\*+ )(TODO)( .*)', bygroups(Generic.Subheading, Generic.Error, Generic.Subheading)), ('^(\\* .+?)( :[a-zA-Z0-9_@:]+:)?$', bygroups(Generic.Heading, Generic.Emph)), ('^(\\*\\*+ .+?)( :[a-zA-Z0-9_@:]+:)?$', bygroups(Generic.Subheading, Generic.Emph)), ('^(?:( *)([+-] )|( +)(\\* ))(\\[[ X-]\\])?(.+ ::)?', bygroups(Whitespace, Keyword, Whitespace, Keyword, Generic.Prompt, Name.Label)), ('^( *)([0-9]+[.)])( \\[@[0-9]+\\])?', bygroups(Whitespace, Keyword, Generic.Emph)), ('(?i)^( *#\\+begin: *)((?:.|\\n)*?)(^ *#\\+end: *$)', bygroups(Operator.Word, using(this), Operator.Word)), ('(?i)^( *#\\+begin_comment *\\n)((?:.|\\n)*?)(^ *#\\+end_comment *$)', bygroups(Operator.Word, Comment.Multiline, Operator.Word)), ('(?i)^( *#\\+begin_src .*)((?:.|\\n)*?)(^ *#\\+end_src *$)', bygroups(Operator.Word, Text, Operator.Word)), ('(?i)^( *#\\+begin_\\w+)( *\\n)((?:.|\\n)*?)(^ *#\\+end_\\w+)( *$)', bygroups(Operator.Word, Whitespace, Text, Operator.Word, Whitespace)), ('^(#\\+\\w+:)(.*)$', bygroups(Name.Namespace, Text)), ('(?i)^( *:\\w+: *\\n)((?:.|\\n)*?)(^ *:end: *$)', bygroups(Name.Decorator, Comment.Special, Name.Decorator)), ('\\\\\\\\$', Operator), ('(?i)^( *(?:DEADLINE|SCHEDULED): )(<.+?> *)$', bygroups(Generic.Error, Literal.Date)), ('(?i)^( *CLOSED: )(\\[.+?\\] *)$', bygroups(Generic.Deleted, Literal.Date)), (_inline('\\*', '\\*+'), Generic.Strong), (_inline('/', '/'), Generic.Emph), (_inline('=', '='), String), (_inline('~', '~'), String), (_inline('\\+', '\\+'), Generic.Deleted), (_inline('_', '_+'), Generic.EmphStrong), ('<.+?>', Literal.Date), ('\\{\\{\\{.+?\\}\\}\\}', Comment.Preproc), ('(?<!\\[)\\[fn:.+?\\]', Name.Tag), ('(?s)(\\[\\[)(.*?)(\\]\\[)(.*?)(\\]\\])', bygroups(Punctuation, Name.Attribute, Punctuation, Name.Tag, Punctuation)), ('(?s)(\\[\\[)(.+?)(\\]\\])', bygroups(Punctuation, Name.Attribute, Punctuation)), ('(<<)(.+?)(>>)', bygroups(Punctuation, Name.Attribute, Punctuation)), ('^( *)(\\|[ -].*?[ -]\\|)$', bygroups(Whitespace, String)), ('[^#*+\\-0-9:\\\\/=~_<{\\[|\\n]+', Text), ('[#*+\\-0-9:\\\\/=~_<{\\[|\\n]', Text)]}
  }

  class TiddlyWiki5Lexer {
      + name = 'tiddler'
      + url = 'https://tiddlywiki.com/#TiddlerFiles'
      + aliases = ['tid']
      + filenames = ['*.tid']
      + mimetypes = ['text/vnd.tiddlywiki']
      + version_added = '2.7'
      + flags = re.MULTILINE
      + tokens = {'root': [('^(title)(:\\s)(.+\\n)', bygroups(Keyword, Text, Generic.Heading)), ('^(!)([^!].+\\n)', bygroups(Generic.Heading, Text)), ('^(!{2,6})(.+\\n)', bygroups(Generic.Subheading, Text)), ('^(\\s*)([*#>]+)(\\s*)(.+\\n)', bygroups(Text, Keyword, Text, using(this, state='inline'))), ('^(<<<.*\\n)([\\w\\W]*?)(^<<<.*$)', bygroups(String, Text, String)), ('^(\\|.*?\\|h)$', bygroups(Generic.Strong)), ('^(\\|.*?\\|[cf])$', bygroups(Generic.Emph)), ('^(\\|.*?\\|k)$', bygroups(Name.Tag)), ('^(;.*)$', bygroups(Generic.Strong)), ('^(```\\n)([\\w\\W]*?)(^```$)', bygroups(String, Text, String)), ('^(```)(\\w+)(\\n)([\\w\\W]*?)(^```$)', _handle_codeblock), ('^(<style>)(\\n)([\\w\\W]*?)(^</style>$)', _handle_cssblock), include('keywords'), include('inline')], 'keywords': [(words(('\\define', '\\end', 'caption', 'created', 'modified', 'tags', 'title', 'type'), prefix='^', suffix='\\b'), Keyword)], 'inline': [('\\\\.', Text), ('\\d{17}', Number.Integer), ('(\\s)(//[^/]+//)((?=\\W|\\n))', bygroups(Text, Generic.Emph, Text)), ('(\\s)(\\^\\^[^\\^]+\\^\\^)', bygroups(Text, Generic.Emph)), ('(\\s)(,,[^,]+,,)', bygroups(Text, Generic.Emph)), ('(\\s)(__[^_]+__)', bygroups(Text, Generic.Strong)), ("(\\s)(''[^']+'')((?=\\W|\\n))", bygroups(Text, Generic.Strong, Text)), ('(\\s)(~~[^~]+~~)((?=\\W|\\n))', bygroups(Text, Generic.Deleted, Text)), ('<<[^>]+>>', Name.Tag), ('\\$\\$[^$]+\\$\\$', Name.Tag), ('\\$\\([^)]+\\)\\$', Name.Tag), ('^@@.*$', Name.Tag), ('</?[^>]+>', Name.Tag), ('`[^`]+`', String.Backtick), ('&\\S*?;', String.Regex), ('(\\[{2})([^]\\|]+)(\\]{2})', bygroups(Text, Name.Tag, Text)), ('(\\[{2})([^]\\|]+)(\\|)([^]\\|]+)(\\]{2})', bygroups(Text, Name.Tag, Text, Name.Attribute, Text)), ('(\\{{2})([^}]+)(\\}{2})', bygroups(Text, Name.Tag, Text)), ('(\\b.?.?tps?://[^\\s"]+)', bygroups(Name.Attribute)), ('[\\w]+', Text), ('.', Text)]}
  --
      - __init__()
  }

  class WikitextLexer {
      + name = 'Wikitext'
      + url = 'https://www.mediawiki.org/wiki/Wikitext'
      + aliases = ['wikitext', 'mediawiki']
      + filenames = []
      + mimetypes = ['text/x-wiki']
      + version_added = '2.15'
      + flags = re.MULTILINE
      + title_char = ' %!"$&\\\'()*,\\-./0-9:;=?@A-Z\\\\\\^_`~+\\u0080-\\uFFFF'
      + nbsp_char = '(?:\\t|&nbsp;|&\\#0*160;|&\\#[Xx]0*[Aa]0;|[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000])'
      + link_address = '(?:[0-9.]+|\\[[0-9a-f:.]+\\]|[^\\x00-\\x20"<>\\[\\]\\x7F\\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000\\uFFFD])'
      + link_char_class = '[^\\x00-\\x20"<>\\[\\]\\x7F\\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000\\uFFFD]'
      + double_slashes_i = {'__FORCETOC__', '__NOCONTENTCONVERT__', '__NOCC__', '__NOEDITSECTION__', '__NOGALLERY__', '__NOTITLECONVERT__', '__NOTC__', '__NOTOC__', '__TOC__'}
      + double_slashes = {'__EXPECTUNUSEDCATEGORY__', '__HIDDENCAT__', '__INDEX__', '__NEWSECTIONLINK__', '__NOINDEX__', '__NONEWSECTIONLINK__', '__STATICREDIRECT__', '__NOGLOBAL__', '__DISAMBIG__', '__EXPECTED_UNCONNECTED_PAGE__'}
      + protocols = {'bitcoin:', 'ftp://', 'ftps://', 'geo:', 'git://', 'gopher://', 'http://', 'https://', 'irc://', 'ircs://', 'magnet:', 'mailto:', 'mms://', 'news:', 'nntp://', 'redis://', 'sftp://', 'sip:', 'sips:', 'sms:', 'ssh://', 'svn://', 'tel:', 'telnet://', 'urn:', 'worldwind://', 'xmpp:', '//'}
      + non_relative_protocols = protocols - {'//'}
      + html_tags = {'abbr', 'b', 'bdi', 'bdo', 'big', 'blockquote', 'br', 'caption', 'center', 'cite', 'code', 'data', 'dd', 'del', 'dfn', 'div', 'dl', 'dt', 'em', 'font', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'ins', 'kbd', 'li', 'link', 'mark', 'meta', 'ol', 'p', 'q', 'rb', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'table', 'td', 'th', 'time', 'tr', 'tt', 'u', 'ul', 'var', 'wbr'}
      + parser_tags = {'graph', 'charinsert', 'rss', 'chem', 'categorytree', 'nowiki', 'inputbox', 'math', 'hiero', 'score', 'pre', 'ref', 'translate', 'imagemap', 'templatestyles', 'languages', 'noinclude', 'mapframe', 'section', 'poem', 'syntaxhighlight', 'includeonly', 'tvar', 'onlyinclude', 'templatedata', 'langconvert', 'timeline', 'dynamicpagelist', 'gallery', 'maplink', 'ce', 'references'}
      + variant_langs = {'zh', 'zh-hans', 'zh-hant', 'zh-cn', 'zh-hk', 'zh-mo', 'zh-my', 'zh-sg', 'zh-tw', 'wuu', 'wuu-hans', 'wuu-hant', 'uz', 'uz-latn', 'uz-cyrl', 'tly', 'tly-cyrl', 'tg', 'tg-latn', 'sr', 'sr-ec', 'sr-el', 'shi', 'shi-tfng', 'shi-latn', 'sh-latn', 'sh-cyrl', 'ku', 'ku-arab', 'ku-latn', 'iu', 'ike-cans', 'ike-latn', 'gan', 'gan-hans', 'gan-hant', 'en', 'en-x-piglatin', 'crh', 'crh-cyrl', 'crh-latn', 'ban', 'ban-bali', 'ban-x-dharma', 'ban-x-palmleaf', 'ban-x-pku'}
      + magic_vars_i = {'ARTICLEPATH', 'INT', 'PAGEID', 'SCRIPTPATH', 'SERVER', 'SERVERNAME', 'STYLEPATH'}
      + magic_vars = {'!', '=', 'BASEPAGENAME', 'BASEPAGENAMEE', 'CASCADINGSOURCES', 'CONTENTLANGUAGE', 'CONTENTLANG', 'CURRENTDAY', 'CURRENTDAY2', 'CURRENTDAYNAME', 'CURRENTDOW', 'CURRENTHOUR', 'CURRENTMONTH', 'CURRENTMONTH2', 'CURRENTMONTH1', 'CURRENTMONTHABBREV', 'CURRENTMONTHNAME', 'CURRENTMONTHNAMEGEN', 'CURRENTTIME', 'CURRENTTIMESTAMP', 'CURRENTVERSION', 'CURRENTWEEK', 'CURRENTYEAR', 'DIRECTIONMARK', 'DIRMARK', 'FULLPAGENAME', 'FULLPAGENAMEE', 'LOCALDAY', 'LOCALDAY2', 'LOCALDAYNAME', 'LOCALDOW', 'LOCALHOUR', 'LOCALMONTH', 'LOCALMONTH2', 'LOCALMONTH1', 'LOCALMONTHABBREV', 'LOCALMONTHNAME', 'LOCALMONTHNAMEGEN', 'LOCALTIME', 'LOCALTIMESTAMP', 'LOCALWEEK', 'LOCALYEAR', 'NAMESPACE', 'NAMESPACEE', 'NAMESPACENUMBER', 'NUMBEROFACTIVEUSERS', 'NUMBEROFADMINS', 'NUMBEROFARTICLES', 'NUMBEROFEDITS', 'NUMBEROFFILES', 'NUMBEROFPAGES', 'NUMBEROFUSERS', 'PAGELANGUAGE', 'PAGENAME', 'PAGENAMEE', 'REVISIONDAY', 'REVISIONDAY2', 'REVISIONID', 'REVISIONMONTH', 'REVISIONMONTH1', 'REVISIONSIZE', 'REVISIONTIMESTAMP', 'REVISIONUSER', 'REVISIONYEAR', 'ROOTPAGENAME', 'ROOTPAGENAMEE', 'SITENAME', 'SUBJECTPAGENAME', 'ARTICLEPAGENAME', 'SUBJECTPAGENAMEE', 'ARTICLEPAGENAMEE', 'SUBJECTSPACE', 'ARTICLESPACE', 'SUBJECTSPACEE', 'ARTICLESPACEE', 'SUBPAGENAME', 'SUBPAGENAMEE', 'TALKPAGENAME', 'TALKPAGENAMEE', 'TALKSPACE', 'TALKSPACEE'}
      + parser_functions_i = {'ANCHORENCODE', 'BIDI', 'CANONICALURL', 'CANONICALURLE', 'FILEPATH', 'FORMATNUM', 'FULLURL', 'FULLURLE', 'GENDER', 'GRAMMAR', 'INT', '\\#LANGUAGE', 'LC', 'LCFIRST', 'LOCALURL', 'LOCALURLE', 'NS', 'NSE', 'PADLEFT', 'PADRIGHT', 'PAGEID', 'PLURAL', 'UC', 'UCFIRST', 'URLENCODE'}
      + parser_functions = {'BASEPAGENAME', 'BASEPAGENAMEE', 'CASCADINGSOURCES', 'DEFAULTSORT', 'DEFAULTSORTKEY', 'DEFAULTCATEGORYSORT', 'FULLPAGENAME', 'FULLPAGENAMEE', 'NAMESPACE', 'NAMESPACEE', 'NAMESPACENUMBER', 'NUMBERINGROUP', 'NUMINGROUP', 'NUMBEROFACTIVEUSERS', 'NUMBEROFADMINS', 'NUMBEROFARTICLES', 'NUMBEROFEDITS', 'NUMBEROFFILES', 'NUMBEROFPAGES', 'NUMBEROFUSERS', 'PAGENAME', 'PAGENAMEE', 'PAGESINCATEGORY', 'PAGESINCAT', 'PAGESIZE', 'PROTECTIONEXPIRY', 'PROTECTIONLEVEL', 'REVISIONDAY', 'REVISIONDAY2', 'REVISIONID', 'REVISIONMONTH', 'REVISIONMONTH1', 'REVISIONTIMESTAMP', 'REVISIONUSER', 'REVISIONYEAR', 'ROOTPAGENAME', 'ROOTPAGENAMEE', 'SUBJECTPAGENAME', 'ARTICLEPAGENAME', 'SUBJECTPAGENAMEE', 'ARTICLEPAGENAMEE', 'SUBJECTSPACE', 'ARTICLESPACE', 'SUBJECTSPACEE', 'ARTICLESPACEE', 'SUBPAGENAME', 'SUBPAGENAMEE', 'TALKPAGENAME', 'TALKPAGENAMEE', 'TALKSPACE', 'TALKSPACEE', 'INT', 'DISPLAYTITLE', 'PAGESINNAMESPACE', 'PAGESINNS'}
      + tokens = {'root': [('(?xi)\n                (\\A\\s*?)(\\#REDIRECT:?) # may contain a colon\n                (\\s+)(\\[\\[) (?=[^\\]\\n]* \\]\\]$)\n            ', bygroups(Whitespace, Keyword, Whitespace, Punctuation), 'redirect-inner'), ('^(={2,6})(.+?)(\\1)(\\s*$\\n)', bygroups(Generic.Subheading, Generic.Subheading, Generic.Subheading, Whitespace)), ('^(=.+?=)(\\s*$\\n)', bygroups(Generic.Heading, Whitespace)), (words(double_slashes_i, prefix='(?i)'), Name.Function.Magic), (words(double_slashes), Name.Function.Magic), ('(?i)\\b(?:{}){}{}*'.format('|'.join(protocols), link_address, link_char_class), Name.Label), (f'\\b(?:RFC|PMID){nbsp_char}+[0-9]+\\b', Name.Function.Magic), ('(?x)\n                \\bISBN {nbsp_char}\n                (?: 97[89] {nbsp_dash}? )?\n                (?: [0-9] {nbsp_dash}? ){{9}} # escape format()\n                [0-9Xx]\\b\n            '.format(nbsp_char=nbsp_char, nbsp_dash=f'(?:-|{nbsp_char})'), Name.Function.Magic), include('list'), include('inline'), include('text')], 'redirect-inner': [('(\\]\\])(\\s*?\\n)', bygroups(Punctuation, Whitespace), '#pop'), ('(\\#)([^#]*?)', bygroups(Punctuation, Name.Label)), (f'(?i)[{title_char}]+', Name.Tag)], 'list': [('^;', Keyword, 'dt'), ('^[#:*]+', Keyword), ('^-{4,}', Keyword)], 'inline': [('~{3,5}', Keyword), include('entity'), ("('')(''')(?!')", bygroups(Generic.Emph, Generic.EmphStrong), 'inline-italic-bold'), ("'''(?!')", Generic.Strong, 'inline-bold'), ("''(?!')", Generic.Emph, 'inline-italic'), include('replaceable'), ('(?xi)\n                (\\[\\[)\n                    (File|Image) (:)\n                    ((?: [{}] | \\{{{{2,3}}[^{{}}]*?\\}}{{2,3}} | <!--[\\s\\S]*?--> )*)\n                    (?: (\\#) ([{}]*?) )?\n                '.format(title_char, f'{title_char}#'), bygroups(Punctuation, Name.Namespace, Punctuation, using(this, state=['wikilink-name']), Punctuation, Name.Label), 'medialink-inner'), ('(?xi)\n                (\\[\\[)(?!{}) # Should not contain URLs\n                    (?: ([{}]*) (:))?\n                    ((?: [{}] | \\{{{{2,3}}[^{{}}]*?\\}}{{2,3}} | <!--[\\s\\S]*?--> )*?)\n                    (?: (\\#) ([{}]*?) )?\n                (\\]\\])\n                '.format('|'.join(protocols), title_char.replace('/', ''), title_char, f'{title_char}#'), bygroups(Punctuation, Name.Namespace, Punctuation, using(this, state=['wikilink-name']), Punctuation, Name.Label, Punctuation)), ('(?xi)\n                (\\[\\[)(?!{})\n                    (?: ([{}]*) (:))?\n                    ((?: [{}] | \\{{{{2,3}}[^{{}}]*?\\}}{{2,3}} | <!--[\\s\\S]*?--> )*?)\n                    (?: (\\#) ([{}]*?) )?\n                    (\\|)\n                '.format('|'.join(protocols), title_char.replace('/', ''), title_char, f'{title_char}#'), bygroups(Punctuation, Name.Namespace, Punctuation, using(this, state=['wikilink-name']), Punctuation, Name.Label, Punctuation), 'wikilink-inner'), ('(?xi)\n                (\\[)\n                    ((?:{}) {} {}*)\n                    (\\s*)\n                '.format('|'.join(protocols), link_address, link_char_class), bygroups(Punctuation, Name.Label, Whitespace), 'extlink-inner'), ('^(:*)(\\s*?)(\\{\\|)([^\\n]*)$', bygroups(Keyword, Whitespace, Punctuation, using(this, state=['root', 'attr'])), 'table'), ('(?i)(<)({})\\b'.format('|'.join(html_tags)), bygroups(Punctuation, Name.Tag), 'tag-inner-ordinary'), ('(?i)(</)({})\\b(\\s*)(>)'.format('|'.join(html_tags)), bygroups(Punctuation, Name.Tag, Whitespace, Punctuation)), ('(?i)(<)(nowiki)\\b', bygroups(Punctuation, Name.Tag), ('tag-nowiki', 'tag-inner')), ('(?i)(<)(pre)\\b', bygroups(Punctuation, Name.Tag), ('tag-pre', 'tag-inner')), ('(?i)(<)(categorytree)\\b', bygroups(Punctuation, Name.Tag), ('tag-categorytree', 'tag-inner')), ('(?i)(<)(hiero)\\b', bygroups(Punctuation, Name.Tag), ('tag-hiero', 'tag-inner')), ('(?i)(<)(math)\\b', bygroups(Punctuation, Name.Tag), ('tag-math', 'tag-inner')), ('(?i)(<)(chem)\\b', bygroups(Punctuation, Name.Tag), ('tag-chem', 'tag-inner')), ('(?i)(<)(ce)\\b', bygroups(Punctuation, Name.Tag), ('tag-ce', 'tag-inner')), ('(?i)(<)(charinsert)\\b', bygroups(Punctuation, Name.Tag), ('tag-charinsert', 'tag-inner')), ('(?i)(<)(templatedata)\\b', bygroups(Punctuation, Name.Tag), ('tag-templatedata', 'tag-inner')), ('(?i)(<)(gallery)\\b', bygroups(Punctuation, Name.Tag), ('tag-gallery', 'tag-inner')), ('(?i)(<)(gallery)\\b', bygroups(Punctuation, Name.Tag), ('tag-graph', 'tag-inner')), ('(?i)(<)(dynamicpagelist)\\b', bygroups(Punctuation, Name.Tag), ('tag-dynamicpagelist', 'tag-inner')), ('(?i)(<)(inputbox)\\b', bygroups(Punctuation, Name.Tag), ('tag-inputbox', 'tag-inner')), ('(?i)(<)(rss)\\b', bygroups(Punctuation, Name.Tag), ('tag-rss', 'tag-inner')), ('(?i)(<)(imagemap)\\b', bygroups(Punctuation, Name.Tag), ('tag-imagemap', 'tag-inner')), ('(?i)(</)(syntaxhighlight)\\b(\\s*)(>)', bygroups(Punctuation, Name.Tag, Whitespace, Punctuation)), ('(?si)(<)(syntaxhighlight)\\b([^>]*?(?<!/)>.*?)(?=</\\2\\s*>)', bygroups(Punctuation, Name.Tag, handle_syntaxhighlight)), ('(?i)(<)(syntaxhighlight)\\b(\\s*?)((?:[^>]|-->)*?)(/\\s*?(?<!--)>)', bygroups(Punctuation, Name.Tag, Whitespace, using(this, state=['root', 'attr']), Punctuation)), ('(?i)(</)(source)\\b(\\s*)(>)', bygroups(Punctuation, Name.Tag, Whitespace, Punctuation)), ('(?si)(<)(source)\\b([^>]*?(?<!/)>.*?)(?=</\\2\\s*>)', bygroups(Punctuation, Name.Tag, handle_syntaxhighlight)), ('(?i)(<)(source)\\b(\\s*?)((?:[^>]|-->)*?)(/\\s*?(?<!--)>)', bygroups(Punctuation, Name.Tag, Whitespace, using(this, state=['root', 'attr']), Punctuation)), ('(?i)(</)(score)\\b(\\s*)(>)', bygroups(Punctuation, Name.Tag, Whitespace, Punctuation)), ('(?si)(<)(score)\\b([^>]*?(?<!/)>.*?)(?=</\\2\\s*>)', bygroups(Punctuation, Name.Tag, handle_score)), ('(?i)(<)(score)\\b(\\s*?)((?:[^>]|-->)*?)(/\\s*?(?<!--)>)', bygroups(Punctuation, Name.Tag, Whitespace, using(this, state=['root', 'attr']), Punctuation)), ('(?i)(<)({})\\b'.format('|'.join(parser_tags)), bygroups(Punctuation, Name.Tag), 'tag-inner-ordinary'), ('(?i)(</)({})\\b(\\s*)(>)'.format('|'.join(parser_tags)), bygroups(Punctuation, Name.Tag, Whitespace, Punctuation)), ('(?xi)\n                (-\\{{) # Use {{ to escape format()\n                    ([^|]) (\\|)\n                    (?:\n                        (?: ([^;]*?) (=>))?\n                        (\\s* (?:{variants}) \\s*) (:)\n                    )?\n                '.format(variants='|'.join(variant_langs)), bygroups(Punctuation, Keyword, Punctuation, using(this, state=['root', 'lc-raw']), Operator, Name.Label, Punctuation), 'lc-inner'), ('(?xi)\n                (-\\{)\n                    ([a-z\\s;-]*?) (\\|)\n                ', bygroups(Punctuation, using(this, state=['root', 'lc-flag']), Punctuation), 'lc-raw'), ('(?xi)\n                (-\\{{) (?!\\{{) # Use {{ to escape format()\n                    (?: (\\s* (?:{variants}) \\s*) (:))?\n                '.format(variants='|'.join(variant_langs)), bygroups(Punctuation, Name.Label, Punctuation), 'lc-inner')], 'wikilink-name': [include('replaceable'), ('[^{<]+', Name.Tag), ('(?s).', Name.Tag)], 'wikilink-inner': [('(?=\\[\\[)', Punctuation, '#pop'), ('\\]\\]', Punctuation, '#pop'), include('inline'), include('text')], 'medialink-inner': [('\\]\\]', Punctuation, '#pop'), ('(\\|)([^\\n=|]*)(=)', bygroups(Punctuation, Name.Attribute, Operator)), ('\\|', Punctuation), include('inline'), include('text')], 'quote-common': [('(?=\\]\\]|\\{\\{|\\}\\})', Punctuation, '#pop'), ('\\n', Text, '#pop')], 'inline-italic': [include('quote-common'), ("('')(''')(?!')", bygroups(Generic.Emph, Generic.Strong), ('#pop', 'inline-bold')), ("'''(?!')", Generic.EmphStrong, ('#pop', 'inline-italic-bold')), ("''(?!')", Generic.Emph, '#pop'), include('inline'), include('text-italic')], 'inline-bold': [include('quote-common'), ("(''')('')(?!')", bygroups(Generic.Strong, Generic.Emph), ('#pop', 'inline-italic')), ("'''(?!')", Generic.Strong, '#pop'), ("''(?!')", Generic.EmphStrong, ('#pop', 'inline-bold-italic')), include('inline'), include('text-bold')], 'inline-bold-italic': [include('quote-common'), ("('')(''')(?!')", bygroups(Generic.EmphStrong, Generic.Strong), '#pop'), ("'''(?!')", Generic.EmphStrong, ('#pop', 'inline-italic')), ("''(?!')", Generic.EmphStrong, ('#pop', 'inline-bold')), include('inline'), include('text-bold-italic')], 'inline-italic-bold': [include('quote-common'), ("(''')('')(?!')", bygroups(Generic.EmphStrong, Generic.Emph), '#pop'), ("'''(?!')", Generic.EmphStrong, ('#pop', 'inline-italic')), ("''(?!')", Generic.EmphStrong, ('#pop', 'inline-bold')), include('inline'), include('text-bold-italic')], 'lc-flag': [('\\s+', Whitespace), (';', Punctuation), *text_rules(Keyword)], 'lc-inner': [('(?xi)\n                (;)\n                (?: ([^;]*?) (=>))?\n                (\\s* (?:{variants}) \\s*) (:)\n                '.format(variants='|'.join(variant_langs)), bygroups(Punctuation, using(this, state=['root', 'lc-raw']), Operator, Name.Label, Punctuation)), (';?\\s*?\\}-', Punctuation, '#pop'), include('inline'), include('text')], 'lc-raw': [('\\}-', Punctuation, '#pop'), include('inline'), include('text')], 'replaceable': [('<!--[\\s\\S]*?(?:-->|\\Z)', Comment.Multiline), ('(?x)\n                (\\{{3})\n                    ([^|]*?)\n                    (?=\\}{3}|\\|)\n                ', bygroups(Punctuation, Name.Variable), 'parameter-inner'), ('(?i)(\\{{\\{{)(\\s*)({})(\\s*)(\\}}\\}})'.format('|'.join(magic_vars_i)), bygroups(Punctuation, Whitespace, Name.Function, Whitespace, Punctuation)), ('(\\{{\\{{)(\\s*)({})(\\s*)(\\}}\\}})'.format('|'.join(magic_vars)), bygroups(Punctuation, Whitespace, Name.Function, Whitespace, Punctuation)), ('\\{\\{', Punctuation, 'template-begin-space'), ('(?i)(<)(tvar)\\b(\\|)([^>]*?)(>)', bygroups(Punctuation, Name.Tag, Punctuation, String, Punctuation)), ('</>', Punctuation, '#pop'), ('(?i)(<)(tvar)\\b', bygroups(Punctuation, Name.Tag), 'tag-inner-ordinary'), ('(?i)(</)(tvar)\\b(\\s*)(>)', bygroups(Punctuation, Name.Tag, Whitespace, Punctuation))], 'parameter-inner': [('\\}{3}', Punctuation, '#pop'), ('\\|', Punctuation), include('inline'), include('text')], 'template-begin-space': [('<!--[\\s\\S]*?(?:-->|\\Z)', Comment.Multiline), ('\\s+', Whitespace), ('(?i)(\\#[{}]*?|{})(:)'.format(title_char, '|'.join(parser_functions_i)), bygroups(Name.Function, Punctuation), ('#pop', 'template-inner')), ('({})(:)'.format('|'.join(parser_functions)), bygroups(Name.Function, Punctuation), ('#pop', 'template-inner')), (f'(?i)([{title_char}]*?)(:)', bygroups(Name.Namespace, Punctuation), ('#pop', 'template-name')), default(('#pop', 'template-name'))], 'template-name': [('(\\s*?)(\\|)', bygroups(Text, Punctuation), ('#pop', 'template-inner')), ('\\}\\}', Punctuation, '#pop'), ('\\n', Text, '#pop'), include('replaceable'), *text_rules(Name.Tag)], 'template-inner': [('\\}\\}', Punctuation, '#pop'), ('\\|', Punctuation), ('(?x)\n                    (?<=\\|)\n                    ( (?: (?! \\{\\{ | \\}\\} )[^=\\|<])*? ) # Exclude templates and tags\n                    (=)\n                ', bygroups(Name.Label, Operator)), include('inline'), include('text')], 'table': [('^([ \\t\\n\\r\\0\\x0B]*?)(\\|\\})', bygroups(Whitespace, Punctuation), '#pop'), ('^([ \\t\\n\\r\\0\\x0B]*?)(\\|-+)(.*)$', bygroups(Whitespace, Punctuation, using(this, state=['root', 'attr']))), ('(?x)\n                ^([ \\t\\n\\r\\0\\x0B]*?)(\\|\\+)\n                # Exclude links, template and tags\n                (?: ( (?: (?! \\[\\[ | \\{\\{ )[^|\\n<] )*? )(\\|) )?\n                (.*?)$\n                ', bygroups(Whitespace, Punctuation, using(this, state=['root', 'attr']), Punctuation, Generic.Heading)), ('(?x)\n                ( ^(?:[ \\t\\n\\r\\0\\x0B]*?)\\| | \\|\\| )\n                (?: ( (?: (?! \\[\\[ | \\{\\{ )[^|\\n<] )*? )(\\|)(?!\\|) )?\n                ', bygroups(Punctuation, using(this, state=['root', 'attr']), Punctuation)), ('(?x)\n                ( ^(?:[ \\t\\n\\r\\0\\x0B]*?)!  )\n                (?: ( (?: (?! \\[\\[ | \\{\\{ )[^|\\n<] )*? )(\\|)(?!\\|) )?\n                ', bygroups(Punctuation, using(this, state=['root', 'attr']), Punctuation), 'table-header'), include('list'), include('inline'), include('text')], 'table-header': [('\\n', Text, '#pop'), ('(?x)\n                (!!|\\|\\|)\n                (?:\n                    ( (?: (?! \\[\\[ | \\{\\{ )[^|\\n<] )*? )\n                    (\\|)(?!\\|)\n                )?\n                ', bygroups(Punctuation, using(this, state=['root', 'attr']), Punctuation)), *text_rules(Generic.Subheading)], 'entity': [('&\\S*?;', Name.Entity)], 'dt': [('\\n', Text, '#pop'), include('inline'), (':', Keyword, '#pop'), include('text')], 'extlink-inner': [('\\]', Punctuation, '#pop'), include('inline'), include('text')], 'nowiki-ish': [include('entity'), include('text')], 'attr': [include('replaceable'), ('\\s+', Whitespace), ('(=)(\\s*)(")', bygroups(Operator, Whitespace, String.Double), 'attr-val-2'), ("(=)(\\s*)(')", bygroups(Operator, Whitespace, String.Single), 'attr-val-1'), ('(=)(\\s*)', bygroups(Operator, Whitespace), 'attr-val-0'), ('[\\w:-]+', Name.Attribute)], 'attr-val-0': [('\\s', Whitespace, '#pop'), include('replaceable'), *text_rules(String)], 'attr-val-1': [("'", String.Single, '#pop'), include('replaceable'), *text_rules(String.Single)], 'attr-val-2': [('"', String.Double, '#pop'), include('replaceable'), *text_rules(String.Double)], 'tag-inner-ordinary': [('/?\\s*>', Punctuation, '#pop'), include('tag-attr')], 'tag-inner': [('/\\s*>', Punctuation, '#pop:2'), ('\\s*>', Punctuation, '#pop'), include('tag-attr')], 'tag-attr': [include('replaceable'), ('\\s+', Whitespace), ('(=)(\\s*)(")', bygroups(Operator, Whitespace, String.Double), 'tag-attr-val-2'), ("(=)(\\s*)(')", bygroups(Operator, Whitespace, String.Single), 'tag-attr-val-1'), ('(=)(\\s*)', bygroups(Operator, Whitespace), 'tag-attr-val-0'), ('[\\w:-]+', Name.Attribute)], 'tag-attr-val-0': [('\\s', Whitespace, '#pop'), ('/?>', Punctuation, '#pop:2'), include('replaceable'), *text_rules(String)], 'tag-attr-val-1': [("'", String.Single, '#pop'), ('/?>', Punctuation, '#pop:2'), include('replaceable'), *text_rules(String.Single)], 'tag-attr-val-2': [('"', String.Double, '#pop'), ('/?>', Punctuation, '#pop:2'), include('replaceable'), *text_rules(String.Double)], 'tag-nowiki': nowiki_tag_rules('nowiki'), 'tag-pre': nowiki_tag_rules('pre'), 'tag-categorytree': plaintext_tag_rules('categorytree'), 'tag-dynamicpagelist': plaintext_tag_rules('dynamicpagelist'), 'tag-hiero': plaintext_tag_rules('hiero'), 'tag-inputbox': plaintext_tag_rules('inputbox'), 'tag-imagemap': plaintext_tag_rules('imagemap'), 'tag-charinsert': plaintext_tag_rules('charinsert'), 'tag-timeline': plaintext_tag_rules('timeline'), 'tag-gallery': plaintext_tag_rules('gallery'), 'tag-graph': plaintext_tag_rules('graph'), 'tag-rss': plaintext_tag_rules('rss'), 'tag-math': delegate_tag_rules('math', TexLexer, state='math'), 'tag-chem': delegate_tag_rules('chem', TexLexer, state='math'), 'tag-ce': delegate_tag_rules('ce', TexLexer, state='math'), 'tag-templatedata': delegate_tag_rules('templatedata', JsonLexer), 'text-italic': text_rules(Generic.Emph), 'text-bold': text_rules(Generic.Strong), 'text-bold-italic': text_rules(Generic.EmphStrong), 'text': text_rules(Text)}
  --
      + nowiki_tag_rules(tag_name)
      + plaintext_tag_rules(tag_name)
      + delegate_tag_rules(tag_name, lexer)
      + text_rules(token)
      + handle_syntaxhighlight(match, ctx)
      + handle_score(match, ctx)
  }

  class MatlabLexer {
      + name = 'Matlab'
      + aliases = ['matlab']
      + filenames = ['*.m']
      + mimetypes = ['text/matlab']
      + url = 'https://www.mathworks.com/products/matlab.html'
      + version_added = '0.10'
      + tokens = {'expressions': [(_operators, Operator), (f'(?<!\\w)((\\d+\\.\\d+)|(\\d*\\.\\d+)|(\\d+\\.(?!{_operators})))([eEf][+-]?\\d+)?(?!\\w)', Number.Float), ('\\b\\d+[eEf][+-]?[0-9]+\\b', Number.Float), ('\\b\\d+\\b', Number.Integer), ('\\[|\\]|\\(|\\)|\\{|\\}|:|@|\\.|,', Punctuation), ('=|:|;', Punctuation), ("(?<=[\\w)\\].])\\'+", Operator), ('"(""|[^"])*"', String), ("(?<![\\w)\\].])\\'", String, 'string'), ('[a-zA-Z_]\\w*', Name), ('\\s+', Whitespace), ('.', Text)], 'root': [('^!.*', String.Other), ('%\\{\\s*\\n', Comment.Multiline, 'blockcomment'), ('%.*$', Comment), ('(\\s*^\\s*)(function)\\b', bygroups(Whitespace, Keyword), 'deffunc'), ('(\\s*^\\s*)(properties)(\\s+)(\\()', bygroups(Whitespace, Keyword, Whitespace, Punctuation), ('defprops', 'propattrs')), ('(\\s*^\\s*)(properties)\\b', bygroups(Whitespace, Keyword), 'defprops'), (words(('break', 'case', 'catch', 'classdef', 'continue', 'dynamicprops', 'else', 'elseif', 'end', 'for', 'function', 'global', 'if', 'methods', 'otherwise', 'parfor', 'persistent', 'return', 'spmd', 'switch', 'try', 'while'), prefix='(?<!\\.)(\\s*)(', suffix=')\\b'), bygroups(Whitespace, Keyword)), (words(['BeginInvoke', 'COM', 'Combine', 'CombinedDatastore', 'EndInvoke', 'Execute', 'FactoryGroup', 'FactorySetting', 'Feval', 'FunctionTestCase', 'GetCharArray', 'GetFullMatrix', 'GetVariable', 'GetWorkspaceData', 'GraphPlot', 'H5.close', 'H5.garbage_collect', 'H5.get_libversion', 'H5.open', 'H5.set_free_list_limits', 'H5A.close', 'H5A.create', 'H5A.delete', 'H5A.get_info', 'H5A.get_name', 'H5A.get_space', 'H5A.get_type', 'H5A.iterate', 'H5A.open', 'H5A.open_by_idx', 'H5A.open_by_name', 'H5A.read', 'H5A.write', 'H5D.close', 'H5D.create', 'H5D.get_access_plist', 'H5D.get_create_plist', 'H5D.get_offset', 'H5D.get_space', 'H5D.get_space_status', 'H5D.get_storage_size', 'H5D.get_type', 'H5D.open', 'H5D.read', 'H5D.set_extent', 'H5D.vlen_get_buf_size', 'H5D.write', 'H5DS.attach_scale', 'H5DS.detach_scale', 'H5DS.get_label', 'H5DS.get_num_scales', 'H5DS.get_scale_name', 'H5DS.is_scale', 'H5DS.iterate_scales', 'H5DS.set_label', 'H5DS.set_scale', 'H5E.clear', 'H5E.get_major', 'H5E.get_minor', 'H5E.walk', 'H5F.close', 'H5F.create', 'H5F.flush', 'H5F.get_access_plist', 'H5F.get_create_plist', 'H5F.get_filesize', 'H5F.get_freespace', 'H5F.get_info', 'H5F.get_mdc_config', 'H5F.get_mdc_hit_rate', 'H5F.get_mdc_size', 'H5F.get_name', 'H5F.get_obj_count', 'H5F.get_obj_ids', 'H5F.is_hdf5', 'H5F.mount', 'H5F.open', 'H5F.reopen', 'H5F.set_mdc_config', 'H5F.unmount', 'H5G.close', 'H5G.create', 'H5G.get_info', 'H5G.open', 'H5I.dec_ref', 'H5I.get_file_id', 'H5I.get_name', 'H5I.get_ref', 'H5I.get_type', 'H5I.inc_ref', 'H5I.is_valid', 'H5L.copy', 'H5L.create_external', 'H5L.create_hard', 'H5L.create_soft', 'H5L.delete', 'H5L.exists', 'H5L.get_info', 'H5L.get_name_by_idx', 'H5L.get_val', 'H5L.iterate', 'H5L.iterate_by_name', 'H5L.move', 'H5L.visit', 'H5L.visit_by_name', 'H5ML.compare_values', 'H5ML.get_constant_names', 'H5ML.get_constant_value', 'H5ML.get_function_names', 'H5ML.get_mem_datatype', 'H5O.close', 'H5O.copy', 'H5O.get_comment', 'H5O.get_comment_by_name', 'H5O.get_info', 'H5O.link', 'H5O.open', 'H5O.open_by_idx', 'H5O.set_comment', 'H5O.set_comment_by_name', 'H5O.visit', 'H5O.visit_by_name', 'H5P.all_filters_avail', 'H5P.close', 'H5P.close_class', 'H5P.copy', 'H5P.create', 'H5P.equal', 'H5P.exist', 'H5P.fill_value_defined', 'H5P.get', 'H5P.get_alignment', 'H5P.get_alloc_time', 'H5P.get_attr_creation_order', 'H5P.get_attr_phase_change', 'H5P.get_btree_ratios', 'H5P.get_char_encoding', 'H5P.get_chunk', 'H5P.get_chunk_cache', 'H5P.get_class', 'H5P.get_class_name', 'H5P.get_class_parent', 'H5P.get_copy_object', 'H5P.get_create_intermediate_group', 'H5P.get_driver', 'H5P.get_edc_check', 'H5P.get_external', 'H5P.get_external_count', 'H5P.get_family_offset', 'H5P.get_fapl_core', 'H5P.get_fapl_family', 'H5P.get_fapl_multi', 'H5P.get_fclose_degree', 'H5P.get_fill_time', 'H5P.get_fill_value', 'H5P.get_filter', 'H5P.get_filter_by_id', 'H5P.get_gc_references', 'H5P.get_hyper_vector_size', 'H5P.get_istore_k', 'H5P.get_layout', 'H5P.get_libver_bounds', 'H5P.get_link_creation_order', 'H5P.get_link_phase_change', 'H5P.get_mdc_config', 'H5P.get_meta_block_size', 'H5P.get_multi_type', 'H5P.get_nfilters', 'H5P.get_nprops', 'H5P.get_sieve_buf_size', 'H5P.get_size', 'H5P.get_sizes', 'H5P.get_small_data_block_size', 'H5P.get_sym_k', 'H5P.get_userblock', 'H5P.get_version', 'H5P.isa_class', 'H5P.iterate', 'H5P.modify_filter', 'H5P.remove_filter', 'H5P.set', 'H5P.set_alignment', 'H5P.set_alloc_time', 'H5P.set_attr_creation_order', 'H5P.set_attr_phase_change', 'H5P.set_btree_ratios', 'H5P.set_char_encoding', 'H5P.set_chunk', 'H5P.set_chunk_cache', 'H5P.set_copy_object', 'H5P.set_create_intermediate_group', 'H5P.set_deflate', 'H5P.set_edc_check', 'H5P.set_external', 'H5P.set_family_offset', 'H5P.set_fapl_core', 'H5P.set_fapl_family', 'H5P.set_fapl_log', 'H5P.set_fapl_multi', 'H5P.set_fapl_sec2', 'H5P.set_fapl_split', 'H5P.set_fapl_stdio', 'H5P.set_fclose_degree', 'H5P.set_fill_time', 'H5P.set_fill_value', 'H5P.set_filter', 'H5P.set_fletcher32', 'H5P.set_gc_references', 'H5P.set_hyper_vector_size', 'H5P.set_istore_k', 'H5P.set_layout', 'H5P.set_libver_bounds', 'H5P.set_link_creation_order', 'H5P.set_link_phase_change', 'H5P.set_mdc_config', 'H5P.set_meta_block_size', 'H5P.set_multi_type', 'H5P.set_nbit', 'H5P.set_scaleoffset', 'H5P.set_shuffle', 'H5P.set_sieve_buf_size', 'H5P.set_sizes', 'H5P.set_small_data_block_size', 'H5P.set_sym_k', 'H5P.set_userblock', 'H5R.create', 'H5R.dereference', 'H5R.get_name', 'H5R.get_obj_type', 'H5R.get_region', 'H5S.close', 'H5S.copy', 'H5S.create', 'H5S.create_simple', 'H5S.extent_copy', 'H5S.get_select_bounds', 'H5S.get_select_elem_npoints', 'H5S.get_select_elem_pointlist', 'H5S.get_select_hyper_blocklist', 'H5S.get_select_hyper_nblocks', 'H5S.get_select_npoints', 'H5S.get_select_type', 'H5S.get_simple_extent_dims', 'H5S.get_simple_extent_ndims', 'H5S.get_simple_extent_npoints', 'H5S.get_simple_extent_type', 'H5S.is_simple', 'H5S.offset_simple', 'H5S.select_all', 'H5S.select_elements', 'H5S.select_hyperslab', 'H5S.select_none', 'H5S.select_valid', 'H5S.set_extent_none', 'H5S.set_extent_simple', 'H5T.array_create', 'H5T.close', 'H5T.commit', 'H5T.committed', 'H5T.copy', 'H5T.create', 'H5T.detect_class', 'H5T.enum_create', 'H5T.enum_insert', 'H5T.enum_nameof', 'H5T.enum_valueof', 'H5T.equal', 'H5T.get_array_dims', 'H5T.get_array_ndims', 'H5T.get_class', 'H5T.get_create_plist', 'H5T.get_cset', 'H5T.get_ebias', 'H5T.get_fields', 'H5T.get_inpad', 'H5T.get_member_class', 'H5T.get_member_index', 'H5T.get_member_name', 'H5T.get_member_offset', 'H5T.get_member_type', 'H5T.get_member_value', 'H5T.get_native_type', 'H5T.get_nmembers', 'H5T.get_norm', 'H5T.get_offset', 'H5T.get_order', 'H5T.get_pad', 'H5T.get_precision', 'H5T.get_sign', 'H5T.get_size', 'H5T.get_strpad', 'H5T.get_super', 'H5T.get_tag', 'H5T.insert', 'H5T.is_variable_str', 'H5T.lock', 'H5T.open', 'H5T.pack', 'H5T.set_cset', 'H5T.set_ebias', 'H5T.set_fields', 'H5T.set_inpad', 'H5T.set_norm', 'H5T.set_offset', 'H5T.set_order', 'H5T.set_pad', 'H5T.set_precision', 'H5T.set_sign', 'H5T.set_size', 'H5T.set_strpad', 'H5T.set_tag', 'H5T.vlen_create', 'H5Z.filter_avail', 'H5Z.get_filter_info', 'Inf', 'KeyValueDatastore', 'KeyValueStore', 'MException', 'MException.last', 'MaximizeCommandWindow', 'MemoizedFunction', 'MinimizeCommandWindow', 'NET', 'NET.Assembly', 'NET.GenericClass', 'NET.NetException', 'NET.addAssembly', 'NET.convertArray', 'NET.createArray', 'NET.createGeneric', 'NET.disableAutoRelease', 'NET.enableAutoRelease', 'NET.invokeGenericMethod', 'NET.isNETSupported', 'NET.setStaticProperty', 'NaN', 'NaT', 'OperationResult', 'PutCharArray', 'PutFullMatrix', 'PutWorkspaceData', 'PythonEnvironment', 'Quit', 'RandStream', 'ReleaseCompatibilityException', 'ReleaseCompatibilityResults', 'Remove', 'RemoveAll', 'Setting', 'SettingsGroup', 'TallDatastore', 'Test', 'TestResult', 'Tiff', 'TransformedDatastore', 'ValueIterator', 'VersionResults', 'VideoReader', 'VideoWriter', 'abs', 'accumarray', 'acos', 'acosd', 'acosh', 'acot', 'acotd', 'acoth', 'acsc', 'acscd', 'acsch', 'actxGetRunningServer', 'actxserver', 'add', 'addCause', 'addCorrection', 'addFile', 'addFolderIncludingChildFiles', 'addGroup', 'addLabel', 'addPath', 'addReference', 'addSetting', 'addShortcut', 'addShutdownFile', 'addStartupFile', 'addStyle', 'addToolbarExplorationButtons', 'addboundary', 'addcats', 'addedge', 'addevent', 'addlistener', 'addmulti', 'addnode', 'addpath', 'addpoints', 'addpref', 'addprop', 'addsample', 'addsampletocollection', 'addtodate', 'addts', 'addvars', 'adjacency', 'airy', 'align', 'alim', 'all', 'allchild', 'alpha', 'alphaShape', 'alphaSpectrum', 'alphaTriangulation', 'alphamap', 'alphanumericBoundary', 'alphanumericsPattern', 'amd', 'analyzeCodeCompatibility', 'ancestor', 'angle', 'animatedline', 'annotation', 'ans', 'any', 'appdesigner', 'append', 'area', 'arguments', 'array2table', 'array2timetable', 'arrayDatastore', 'arrayfun', 'asFewOfPattern', 'asManyOfPattern', 'ascii', 'asec', 'asecd', 'asech', 'asin', 'asind', 'asinh', 'assert', 'assignin', 'atan', 'atan2', 'atan2d', 'atand', 'atanh', 'audiodevinfo', 'audiodevreset', 'audioinfo', 'audioplayer', 'audioread', 'audiorecorder', 'audiowrite', 'autumn', 'axes', 'axis', 'axtoolbar', 'axtoolbarbtn', 'balance', 'bandwidth', 'bar', 'bar3', 'bar3h', 'barh', 'barycentricToCartesian', 'base2dec', 'batchStartupOptionUsed', 'bctree', 'beep', 'bench', 'besselh', 'besseli', 'besselj', 'besselk', 'bessely', 'beta', 'betainc', 'betaincinv', 'betaln', 'between', 'bfsearch', 'bicg', 'bicgstab', 'bicgstabl', 'biconncomp', 'bin2dec', 'binary', 'binscatter', 'bitand', 'bitcmp', 'bitget', 'bitnot', 'bitor', 'bitset', 'bitshift', 'bitxor', 'blanks', 'ble', 'blelist', 'blkdiag', 'bluetooth', 'bluetoothlist', 'bone', 'boundary', 'boundaryFacets', 'boundaryshape', 'boundingbox', 'bounds', 'box', 'boxchart', 'brighten', 'brush', 'bsxfun', 'bubblechart', 'bubblechart3', 'bubblelegend', 'bubblelim', 'bubblesize', 'builddocsearchdb', 'builtin', 'bvp4c', 'bvp5c', 'bvpget', 'bvpinit', 'bvpset', 'bvpxtend', 'caldays', 'caldiff', 'calendar', 'calendarDuration', 'calllib', 'calmonths', 'calquarters', 'calweeks', 'calyears', 'camdolly', 'cameratoolbar', 'camlight', 'camlookat', 'camorbit', 'campan', 'campos', 'camproj', 'camroll', 'camtarget', 'camup', 'camva', 'camzoom', 'canUseGPU', 'canUseParallelPool', 'cart2pol', 'cart2sph', 'cartesianToBarycentric', 'caseInsensitivePattern', 'caseSensitivePattern', 'cast', 'cat', 'categorical', 'categories', 'caxis', 'cd', 'cdf2rdf', 'cdfepoch', 'cdfinfo', 'cdflib', 'cdfread', 'ceil', 'cell', 'cell2mat', 'cell2struct', 'cell2table', 'celldisp', 'cellfun', 'cellplot', 'cellstr', 'centrality', 'centroid', 'cgs', 'char', 'characterListPattern', 'characteristic', 'checkcode', 'chol', 'cholupdate', 'choose', 'chooseContextMenu', 'circshift', 'circumcenter', 'cla', 'clabel', 'class', 'classUnderlying', 'clc', 'clear', 'clearAllMemoizedCaches', 'clearPersonalValue', 'clearTemporaryValue', 'clearpoints', 'clearvars', 'clf', 'clibArray', 'clibConvertArray', 'clibIsNull', 'clibIsReadOnly', 'clibRelease', 'clibgen.buildInterface', 'clibgen.generateLibraryDefinition', 'clipboard', 'clock', 'clone', 'close', 'closeFile', 'closereq', 'cmap2gray', 'cmpermute', 'cmunique', 'codeCompatibilityReport', 'colamd', 'collapse', 'colon', 'colorbar', 'colorcube', 'colormap', 'colororder', 'colperm', 'com.mathworks.engine.MatlabEngine', 'com.mathworks.matlab.types.CellStr', 'com.mathworks.matlab.types.Complex', 'com.mathworks.matlab.types.HandleObject', 'com.mathworks.matlab.types.Struct', 'combine', 'comet', 'comet3', 'compan', 'compass', 'complex', 'compose', 'computer', 'comserver', 'cond', 'condeig', 'condensation', 'condest', 'coneplot', 'configureCallback', 'configureTerminator', 'conj', 'conncomp', 'containers.Map', 'contains', 'containsrange', 'contour', 'contour3', 'contourc', 'contourf', 'contourslice', 'contrast', 'conv', 'conv2', 'convertCharsToStrings', 'convertContainedStringsToChars', 'convertStringsToChars', 'convertTo', 'convertvars', 'convexHull', 'convhull', 'convhulln', 'convn', 'cool', 'copper', 'copyHDU', 'copyfile', 'copygraphics', 'copyobj', 'corrcoef', 'cos', 'cosd', 'cosh', 'cospi', 'cot', 'cotd', 'coth', 'count', 'countcats', 'cov', 'cplxpair', 'cputime', 'createCategory', 'createFile', 'createImg', 'createLabel', 'createTbl', 'criticalAlpha', 'cross', 'csc', 'cscd', 'csch', 'ctranspose', 'cummax', 'cummin', 'cumprod', 'cumsum', 'cumtrapz', 'curl', 'currentProject', 'cylinder', 'daspect', 'dataTipInteraction', 'dataTipTextRow', 'datacursormode', 'datastore', 'datatip', 'date', 'datenum', 'dateshift', 'datestr', 'datetick', 'datetime', 'datevec', 'day', 'days', 'dbclear', 'dbcont', 'dbdown', 'dbmex', 'dbquit', 'dbstack', 'dbstatus', 'dbstep', 'dbstop', 'dbtype', 'dbup', 'dde23', 'ddeget', 'ddensd', 'ddesd', 'ddeset', 'deblank', 'dec2base', 'dec2bin', 'dec2hex', 'decic', 'decomposition', 'deconv', 'deg2rad', 'degree', 'del2', 'delaunay', 'delaunayTriangulation', 'delaunayn', 'delete', 'deleteCol', 'deleteFile', 'deleteHDU', 'deleteKey', 'deleteRecord', 'deleteRows', 'delevent', 'delimitedTextImportOptions', 'delsample', 'delsamplefromcollection', 'demo', 'descriptor', 'det', 'details', 'detectImportOptions', 'detrend', 'deval', 'dfsearch', 'diag', 'dialog', 'diary', 'diff', 'diffuse', 'digitBoundary', 'digitsPattern', 'digraph', 'dir', 'disableDefaultInteractivity', 'discretize', 'disp', 'display', 'dissect', 'distances', 'dither', 'divergence', 'dmperm', 'doc', 'docsearch', 'dos', 'dot', 'double', 'drag', 'dragrect', 'drawnow', 'dsearchn', 'duration', 'dynamicprops', 'echo', 'echodemo', 'echotcpip', 'edgeAttachments', 'edgecount', 'edges', 'edit', 'eig', 'eigs', 'ellipj', 'ellipke', 'ellipsoid', 'empty', 'enableDefaultInteractivity', 'enableLegacyExplorationModes', 'enableNETfromNetworkDrive', 'enableservice', 'endsWith', 'enumeration', 'eomday', 'eps', 'eq', 'equilibrate', 'erase', 'eraseBetween', 'erf', 'erfc', 'erfcinv', 'erfcx', 'erfinv', 'error', 'errorbar', 'errordlg', 'etime', 'etree', 'etreeplot', 'eval', 'evalc', 'evalin', 'event.ClassInstanceEvent', 'event.DynamicPropertyEvent', 'event.EventData', 'event.PropertyEvent', 'event.hasListener', 'event.listener', 'event.proplistener', 'eventlisteners', 'events', 'exceltime', 'exist', 'exit', 'exp', 'expand', 'expint', 'expm', 'expm1', 'export', 'export2wsdlg', 'exportapp', 'exportgraphics', 'exportsetupdlg', 'extract', 'extractAfter', 'extractBefore', 'extractBetween', 'eye', 'ezpolar', 'faceNormal', 'factor', 'factorial', 'false', 'fclose', 'fcontour', 'feather', 'featureEdges', 'feof', 'ferror', 'feval', 'fewerbins', 'fft', 'fft2', 'fftn', 'fftshift', 'fftw', 'fgetl', 'fgets', 'fieldnames', 'figure', 'figurepalette', 'fileDatastore', 'fileMode', 'fileName', 'fileattrib', 'filemarker', 'fileparts', 'fileread', 'filesep', 'fill', 'fill3', 'fillmissing', 'filloutliers', 'filter', 'filter2', 'fimplicit', 'fimplicit3', 'find', 'findCategory', 'findEvent', 'findFile', 'findLabel', 'findall', 'findedge', 'findfigs', 'findgroups', 'findnode', 'findobj', 'findprop', 'finish', 'fitsdisp', 'fitsinfo', 'fitsread', 'fitswrite', 'fix', 'fixedWidthImportOptions', 'flag', 'flintmax', 'flip', 'flipedge', 'fliplr', 'flipud', 'floor', 'flow', 'flush', 'fmesh', 'fminbnd', 'fminsearch', 'fopen', 'format', 'fplot', 'fplot3', 'fprintf', 'frame2im', 'fread', 'freeBoundary', 'freqspace', 'frewind', 'fscanf', 'fseek', 'fsurf', 'ftell', 'ftp', 'full', 'fullfile', 'func2str', 'function_handle', 'functions', 'functiontests', 'funm', 'fwrite', 'fzero', 'gallery', 'gamma', 'gammainc', 'gammaincinv', 'gammaln', 'gather', 'gca', 'gcbf', 'gcbo', 'gcd', 'gcf', 'gcmr', 'gco', 'genpath', 'geoaxes', 'geobasemap', 'geobubble', 'geodensityplot', 'geolimits', 'geoplot', 'geoscatter', 'geotickformat', 'get', 'getAColParms', 'getAxes', 'getBColParms', 'getColName', 'getColType', 'getColorbar', 'getConstantValue', 'getEqColType', 'getFileFormats', 'getHDUnum', 'getHDUtype', 'getHdrSpace', 'getImgSize', 'getImgType', 'getLayout', 'getLegend', 'getMockHistory', 'getNumCols', 'getNumHDUs', 'getNumInputs', 'getNumInputsImpl', 'getNumOutputs', 'getNumOutputsImpl', 'getNumRows', 'getOpenFiles', 'getProfiles', 'getPropertyGroupsImpl', 'getReport', 'getTimeStr', 'getVersion', 'getabstime', 'getappdata', 'getaudiodata', 'getdatasamples', 'getdatasamplesize', 'getenv', 'getfield', 'getframe', 'getinterpmethod', 'getnext', 'getpinstatus', 'getpixelposition', 'getplayer', 'getpoints', 'getpref', 'getqualitydesc', 'getrangefromclass', 'getsamples', 'getsampleusingtime', 'gettimeseriesnames', 'gettsafteratevent', 'gettsafterevent', 'gettsatevent', 'gettsbeforeatevent', 'gettsbeforeevent', 'gettsbetweenevents', 'getvaropts', 'ginput', 'gmres', 'gobjects', 'gplot', 'grabcode', 'gradient', 'graph', 'gray', 'grid', 'griddata', 'griddatan', 'griddedInterpolant', 'groot', 'groupcounts', 'groupfilter', 'groupsummary', 'grouptransform', 'gsvd', 'gtext', 'guidata', 'guide', 'guihandles', 'gunzip', 'gzip', 'h5create', 'h5disp', 'h5info', 'h5read', 'h5readatt', 'h5write', 'h5writeatt', 'hadamard', 'handle', 'hankel', 'hasFactoryValue', 'hasFrame', 'hasGroup', 'hasPersonalValue', 'hasSetting', 'hasTemporaryValue', 'hasdata', 'hasnext', 'hdfan', 'hdfdf24', 'hdfdfr8', 'hdfh', 'hdfhd', 'hdfhe', 'hdfhx', 'hdfinfo', 'hdfml', 'hdfpt', 'hdfread', 'hdfv', 'hdfvf', 'hdfvh', 'hdfvs', 'head', 'heatmap', 'height', 'help', 'helpdlg', 'hess', 'hex2dec', 'hex2num', 'hgexport', 'hggroup', 'hgtransform', 'hidden', 'highlight', 'hilb', 'histcounts', 'histcounts2', 'histogram', 'histogram2', 'hms', 'hold', 'holes', 'home', 'horzcat', 'hot', 'hour', 'hours', 'hover', 'hsv', 'hsv2rgb', 'hypot', 'i', 'ichol', 'idealfilter', 'idivide', 'ifft', 'ifft2', 'ifftn', 'ifftshift', 'ilu', 'im2double', 'im2frame', 'im2gray', 'im2java', 'imag', 'image', 'imageDatastore', 'imagesc', 'imapprox', 'imfinfo', 'imformats', 'imgCompress', 'import', 'importdata', 'imread', 'imresize', 'imshow', 'imtile', 'imwrite', 'inShape', 'incenter', 'incidence', 'ind2rgb', 'ind2sub', 'indegree', 'inedges', 'infoImpl', 'inmem', 'inner2outer', 'innerjoin', 'inpolygon', 'input', 'inputParser', 'inputdlg', 'inputname', 'insertATbl', 'insertAfter', 'insertBTbl', 'insertBefore', 'insertCol', 'insertImg', 'insertRows', 'int16', 'int2str', 'int32', 'int64', 'int8', 'integral', 'integral2', 'integral3', 'interp1', 'interp2', 'interp3', 'interpft', 'interpn', 'interpstreamspeed', 'intersect', 'intmax', 'intmin', 'inv', 'invhilb', 'ipermute', 'iqr', 'isCompressedImg', 'isConnected', 'isDiscreteStateSpecificationMutableImpl', 'isDone', 'isDoneImpl', 'isInactivePropertyImpl', 'isInputComplexityMutableImpl', 'isInputDataTypeMutableImpl', 'isInputSizeMutableImpl', 'isInterior', 'isKey', 'isLoaded', 'isLocked', 'isMATLABReleaseOlderThan', 'isPartitionable', 'isShuffleable', 'isStringScalar', 'isTunablePropertyDataTypeMutableImpl', 'isUnderlyingType', 'isa', 'isaUnderlying', 'isappdata', 'isbanded', 'isbetween', 'iscalendarduration', 'iscategorical', 'iscategory', 'iscell', 'iscellstr', 'ischange', 'ischar', 'iscolumn', 'iscom', 'isdag', 'isdatetime', 'isdiag', 'isdst', 'isduration', 'isempty', 'isenum', 'isequal', 'isequaln', 'isevent', 'isfield', 'isfile', 'isfinite', 'isfloat', 'isfolder', 'isgraphics', 'ishandle', 'ishermitian', 'ishold', 'ishole', 'isinf', 'isinteger', 'isinterface', 'isinterior', 'isisomorphic', 'isjava', 'iskeyword', 'isletter', 'islocalmax', 'islocalmin', 'islogical', 'ismac', 'ismatrix', 'ismember', 'ismembertol', 'ismethod', 'ismissing', 'ismultigraph', 'isnan', 'isnat', 'isnumeric', 'isobject', 'isocaps', 'isocolors', 'isomorphism', 'isonormals', 'isordinal', 'isosurface', 'isoutlier', 'ispc', 'isplaying', 'ispref', 'isprime', 'isprop', 'isprotected', 'isreal', 'isrecording', 'isregular', 'isrow', 'isscalar', 'issimplified', 'issorted', 'issortedrows', 'isspace', 'issparse', 'isstring', 'isstrprop', 'isstruct', 'isstudent', 'issymmetric', 'istable', 'istall', 'istimetable', 'istril', 'istriu', 'isundefined', 'isunix', 'isvalid', 'isvarname', 'isvector', 'isweekend', 'j', 'javaArray', 'javaMethod', 'javaMethodEDT', 'javaObject', 'javaObjectEDT', 'javaaddpath', 'javachk', 'javaclasspath', 'javarmpath', 'jet', 'join', 'jsondecode', 'jsonencode', 'juliandate', 'keyboard', 'keys', 'kron', 'labeledge', 'labelnode', 'lag', 'laplacian', 'lastwarn', 'layout', 'lcm', 'ldl', 'leapseconds', 'legend', 'legendre', 'length', 'letterBoundary', 'lettersPattern', 'lib.pointer', 'libfunctions', 'libfunctionsview', 'libisloaded', 'libpointer', 'libstruct', 'license', 'light', 'lightangle', 'lighting', 'lin2mu', 'line', 'lineBoundary', 'lines', 'linkaxes', 'linkdata', 'linkprop', 'linsolve', 'linspace', 'listModifiedFiles', 'listRequiredFiles', 'listdlg', 'listener', 'listfonts', 'load', 'loadObjectImpl', 'loadlibrary', 'loadobj', 'localfunctions', 'log', 'log10', 'log1p', 'log2', 'logical', 'loglog', 'logm', 'logspace', 'lookAheadBoundary', 'lookBehindBoundary', 'lookfor', 'lower', 'ls', 'lscov', 'lsqminnorm', 'lsqnonneg', 'lsqr', 'lu', 'magic', 'makehgtform', 'makima', 'mapreduce', 'mapreducer', 'maskedPattern', 'mat2cell', 'mat2str', 'matches', 'matchpairs', 'material', 'matfile', 'matlab.System', 'matlab.addons.disableAddon', 'matlab.addons.enableAddon', 'matlab.addons.install', 'matlab.addons.installedAddons', 'matlab.addons.isAddonEnabled', 'matlab.addons.toolbox.installToolbox', 'matlab.addons.toolbox.installedToolboxes', 'matlab.addons.toolbox.packageToolbox', 'matlab.addons.toolbox.toolboxVersion', 'matlab.addons.toolbox.uninstallToolbox', 'matlab.addons.uninstall', 'matlab.apputil.create', 'matlab.apputil.getInstalledAppInfo', 'matlab.apputil.install', 'matlab.apputil.package', 'matlab.apputil.run', 'matlab.apputil.uninstall', 'matlab.codetools.requiredFilesAndProducts', 'matlab.engine.FutureResult', 'matlab.engine.MatlabEngine', 'matlab.engine.connect_matlab', 'matlab.engine.engineName', 'matlab.engine.find_matlab', 'matlab.engine.isEngineShared', 'matlab.engine.shareEngine', 'matlab.engine.start_matlab', 'matlab.exception.JavaException', 'matlab.exception.PyException', 'matlab.graphics.chartcontainer.ChartContainer', 'matlab.graphics.chartcontainer.mixin.Colorbar', 'matlab.graphics.chartcontainer.mixin.Legend', 'matlab.io.Datastore', 'matlab.io.datastore.BlockedFileSet', 'matlab.io.datastore.DsFileReader', 'matlab.io.datastore.DsFileSet', 'matlab.io.datastore.FileSet', 'matlab.io.datastore.FileWritable', 'matlab.io.datastore.FoldersPropertyProvider', 'matlab.io.datastore.HadoopLocationBased', 'matlab.io.datastore.Partitionable', 'matlab.io.datastore.Shuffleable', 'matlab.io.hdf4.sd', 'matlab.io.hdfeos.gd', 'matlab.io.hdfeos.sw', 'matlab.io.saveVariablesToScript', 'matlab.lang.OnOffSwitchState', 'matlab.lang.correction.AppendArgumentsCorrection', 'matlab.lang.correction.ConvertToFunctionNotationCorrection', 'matlab.lang.correction.ReplaceIdentifierCorrection', 'matlab.lang.makeUniqueStrings', 'matlab.lang.makeValidName', 'matlab.mex.MexHost', 'matlab.mixin.Copyable', 'matlab.mixin.CustomDisplay', 'matlab.mixin.Heterogeneous', 'matlab.mixin.SetGet', 'matlab.mixin.SetGetExactNames', 'matlab.mixin.util.PropertyGroup', 'matlab.mock.AnyArguments', 'matlab.mock.InteractionHistory', 'matlab.mock.InteractionHistory.forMock', 'matlab.mock.MethodCallBehavior', 'matlab.mock.PropertyBehavior', 'matlab.mock.PropertyGetBehavior', 'matlab.mock.PropertySetBehavior', 'matlab.mock.TestCase', 'matlab.mock.actions.AssignOutputs', 'matlab.mock.actions.DoNothing', 'matlab.mock.actions.Invoke', 'matlab.mock.actions.ReturnStoredValue', 'matlab.mock.actions.StoreValue', 'matlab.mock.actions.ThrowException', 'matlab.mock.constraints.Occurred', 'matlab.mock.constraints.WasAccessed', 'matlab.mock.constraints.WasCalled', 'matlab.mock.constraints.WasSet', 'matlab.net.ArrayFormat', 'matlab.net.QueryParameter', 'matlab.net.URI', 'matlab.net.base64decode', 'matlab.net.base64encode', 'matlab.net.http.AuthInfo', 'matlab.net.http.AuthenticationScheme', 'matlab.net.http.Cookie', 'matlab.net.http.CookieInfo', 'matlab.net.http.Credentials', 'matlab.net.http.Disposition', 'matlab.net.http.HTTPException', 'matlab.net.http.HTTPOptions', 'matlab.net.http.HeaderField', 'matlab.net.http.LogRecord', 'matlab.net.http.MediaType', 'matlab.net.http.Message', 'matlab.net.http.MessageBody', 'matlab.net.http.MessageType', 'matlab.net.http.ProgressMonitor', 'matlab.net.http.ProtocolVersion', 'matlab.net.http.RequestLine', 'matlab.net.http.RequestMessage', 'matlab.net.http.RequestMethod', 'matlab.net.http.ResponseMessage', 'matlab.net.http.StartLine', 'matlab.net.http.StatusClass', 'matlab.net.http.StatusCode', 'matlab.net.http.StatusLine', 'matlab.net.http.field.AcceptField', 'matlab.net.http.field.AuthenticateField', 'matlab.net.http.field.AuthenticationInfoField', 'matlab.net.http.field.AuthorizationField', 'matlab.net.http.field.ContentDispositionField', 'matlab.net.http.field.ContentLengthField', 'matlab.net.http.field.ContentLocationField', 'matlab.net.http.field.ContentTypeField', 'matlab.net.http.field.CookieField', 'matlab.net.http.field.DateField', 'matlab.net.http.field.GenericField', 'matlab.net.http.field.GenericParameterizedField', 'matlab.net.http.field.HTTPDateField', 'matlab.net.http.field.IntegerField', 'matlab.net.http.field.LocationField', 'matlab.net.http.field.MediaRangeField', 'matlab.net.http.field.SetCookieField', 'matlab.net.http.field.URIReferenceField', 'matlab.net.http.io.BinaryConsumer', 'matlab.net.http.io.ContentConsumer', 'matlab.net.http.io.ContentProvider', 'matlab.net.http.io.FileConsumer', 'matlab.net.http.io.FileProvider', 'matlab.net.http.io.FormProvider', 'matlab.net.http.io.GenericConsumer', 'matlab.net.http.io.GenericProvider', 'matlab.net.http.io.ImageConsumer', 'matlab.net.http.io.ImageProvider', 'matlab.net.http.io.JSONConsumer', 'matlab.net.http.io.JSONProvider', 'matlab.net.http.io.MultipartConsumer', 'matlab.net.http.io.MultipartFormProvider', 'matlab.net.http.io.MultipartProvider', 'matlab.net.http.io.StringConsumer', 'matlab.net.http.io.StringProvider', 'matlab.perftest.FixedTimeExperiment', 'matlab.perftest.FrequentistTimeExperiment', 'matlab.perftest.TestCase', 'matlab.perftest.TimeExperiment', 'matlab.perftest.TimeResult', 'matlab.project.Project', 'matlab.project.convertDefinitionFiles', 'matlab.project.createProject', 'matlab.project.deleteProject', 'matlab.project.loadProject', 'matlab.project.rootProject', 'matlab.settings.FactoryGroup.createToolboxGroup', 'matlab.settings.SettingsFileUpgrader', 'matlab.settings.loadSettingsCompatibilityResults', 'matlab.settings.mustBeIntegerScalar', 'matlab.settings.mustBeLogicalScalar', 'matlab.settings.mustBeNumericScalar', 'matlab.settings.mustBeStringScalar', 'matlab.settings.reloadFactoryFile', 'matlab.system.mixin.FiniteSource', 'matlab.tall.blockMovingWindow', 'matlab.tall.movingWindow', 'matlab.tall.reduce', 'matlab.tall.transform', 'matlab.test.behavior.Missing', 'matlab.ui.componentcontainer.ComponentContainer', 'matlab.uitest.TestCase', 'matlab.uitest.TestCase.forInteractiveUse', 'matlab.uitest.unlock', 'matlab.unittest.Test', 'matlab.unittest.TestCase', 'matlab.unittest.TestResult', 'matlab.unittest.TestRunner', 'matlab.unittest.TestSuite', 'matlab.unittest.constraints.BooleanConstraint', 'matlab.unittest.constraints.Constraint', 'matlab.unittest.constraints.Tolerance', 'matlab.unittest.diagnostics.ConstraintDiagnostic', 'matlab.unittest.diagnostics.Diagnostic', 'matlab.unittest.fixtures.Fixture', 'matlab.unittest.measurement.DefaultMeasurementResult', 'matlab.unittest.measurement.MeasurementResult', 'matlab.unittest.measurement.chart.ComparisonPlot', 'matlab.unittest.plugins.OutputStream', 'matlab.unittest.plugins.Parallelizable', 'matlab.unittest.plugins.QualifyingPlugin', 'matlab.unittest.plugins.TestRunnerPlugin', 'matlab.wsdl.createWSDLClient', 'matlab.wsdl.setWSDLToolPath', 'matlabRelease', 'matlabrc', 'matlabroot', 'max', 'maxflow', 'maxk', 'mean', 'median', 'memmapfile', 'memoize', 'memory', 'mergecats', 'mergevars', 'mesh', 'meshc', 'meshgrid', 'meshz', 'meta.ArrayDimension', 'meta.DynamicProperty', 'meta.EnumeratedValue', 'meta.FixedDimension', 'meta.MetaData', 'meta.UnrestrictedDimension', 'meta.Validation', 'meta.abstractDetails', 'meta.class', 'meta.class.fromName', 'meta.event', 'meta.method', 'meta.package', 'meta.package.fromName', 'meta.package.getAllPackages', 'meta.property', 'metaclass', 'methods', 'methodsview', 'mex', 'mexext', 'mexhost', 'mfilename', 'mget', 'milliseconds', 'min', 'mink', 'minres', 'minspantree', 'minute', 'minutes', 'mislocked', 'missing', 'mkdir', 'mkpp', 'mldivide', 'mlintrpt', 'mlock', 'mmfileinfo', 'mod', 'mode', 'month', 'more', 'morebins', 'movAbsHDU', 'movNamHDU', 'movRelHDU', 'move', 'movefile', 'movegui', 'movevars', 'movie', 'movmad', 'movmax', 'movmean', 'movmedian', 'movmin', 'movprod', 'movstd', 'movsum', 'movvar', 'mpower', 'mput', 'mrdivide', 'msgbox', 'mtimes', 'mu2lin', 'multibandread', 'multibandwrite', 'munlock', 'mustBeA', 'mustBeFile', 'mustBeFinite', 'mustBeFloat', 'mustBeFolder', 'mustBeGreaterThan', 'mustBeGreaterThanOrEqual', 'mustBeInRange', 'mustBeInteger', 'mustBeLessThan', 'mustBeLessThanOrEqual', 'mustBeMember', 'mustBeNegative', 'mustBeNonNan', 'mustBeNonempty', 'mustBeNonmissing', 'mustBeNonnegative', 'mustBeNonpositive', 'mustBeNonsparse', 'mustBeNonzero', 'mustBeNonzeroLengthText', 'mustBeNumeric', 'mustBeNumericOrLogical', 'mustBePositive', 'mustBeReal', 'mustBeScalarOrEmpty', 'mustBeText', 'mustBeTextScalar', 'mustBeUnderlyingType', 'mustBeValidVariableName', 'mustBeVector', 'namedPattern', 'namedargs2cell', 'namelengthmax', 'nargin', 'narginchk', 'nargout', 'nargoutchk', 'native2unicode', 'nccreate', 'ncdisp', 'nchoosek', 'ncinfo', 'ncread', 'ncreadatt', 'ncwrite', 'ncwriteatt', 'ncwriteschema', 'ndgrid', 'ndims', 'nearest', 'nearestNeighbor', 'nearestvertex', 'neighbors', 'netcdf.abort', 'netcdf.close', 'netcdf.copyAtt', 'netcdf.create', 'netcdf.defDim', 'netcdf.defGrp', 'netcdf.defVar', 'netcdf.defVarChunking', 'netcdf.defVarDeflate', 'netcdf.defVarFill', 'netcdf.defVarFletcher32', 'netcdf.delAtt', 'netcdf.endDef', 'netcdf.getAtt', 'netcdf.getChunkCache', 'netcdf.getConstant', 'netcdf.getConstantNames', 'netcdf.getVar', 'netcdf.inq', 'netcdf.inqAtt', 'netcdf.inqAttID', 'netcdf.inqAttName', 'netcdf.inqDim', 'netcdf.inqDimID', 'netcdf.inqDimIDs', 'netcdf.inqFormat', 'netcdf.inqGrpName', 'netcdf.inqGrpNameFull', 'netcdf.inqGrpParent', 'netcdf.inqGrps', 'netcdf.inqLibVers', 'netcdf.inqNcid', 'netcdf.inqUnlimDims', 'netcdf.inqVar', 'netcdf.inqVarChunking', 'netcdf.inqVarDeflate', 'netcdf.inqVarFill', 'netcdf.inqVarFletcher32', 'netcdf.inqVarID', 'netcdf.inqVarIDs', 'netcdf.open', 'netcdf.putAtt', 'netcdf.putVar', 'netcdf.reDef', 'netcdf.renameAtt', 'netcdf.renameDim', 'netcdf.renameVar', 'netcdf.setChunkCache', 'netcdf.setDefaultFormat', 'netcdf.setFill', 'netcdf.sync', 'newline', 'newplot', 'nextpow2', 'nexttile', 'nnz', 'nonzeros', 'norm', 'normalize', 'normest', 'notify', 'now', 'nsidedpoly', 'nthroot', 'nufft', 'nufftn', 'null', 'num2cell', 'num2hex', 'num2ruler', 'num2str', 'numArgumentsFromSubscript', 'numRegions', 'numboundaries', 'numedges', 'numel', 'numnodes', 'numpartitions', 'numsides', 'nzmax', 'ode113', 'ode15i', 'ode15s', 'ode23', 'ode23s', 'ode23t', 'ode23tb', 'ode45', 'odeget', 'odeset', 'odextend', 'onCleanup', 'ones', 'open', 'openDiskFile', 'openFile', 'openProject', 'openfig', 'opengl', 'openvar', 'optimget', 'optimset', 'optionalPattern', 'ordeig', 'orderfields', 'ordqz', 'ordschur', 'orient', 'orth', 'outdegree', 'outedges', 'outerjoin', 'overlaps', 'overlapsrange', 'pack', 'pad', 'padecoef', 'pagectranspose', 'pagemtimes', 'pagetranspose', 'pan', 'panInteraction', 'parallelplot', 'pareto', 'parquetDatastore', 'parquetinfo', 'parquetread', 'parquetwrite', 'partition', 'parula', 'pascal', 'patch', 'path', 'pathsep', 'pathtool', 'pattern', 'pause', 'pbaspect', 'pcg', 'pchip', 'pcode', 'pcolor', 'pdepe', 'pdeval', 'peaks', 'perimeter', 'perl', 'perms', 'permute', 'pi', 'pie', 'pie3', 'pink', 'pinv', 'planerot', 'play', 'playblocking', 'plot', 'plot3', 'plotbrowser', 'plotedit', 'plotmatrix', 'plottools', 'plus', 'pointLocation', 'pol2cart', 'polaraxes', 'polarbubblechart', 'polarhistogram', 'polarplot', 'polarscatter', 'poly', 'polyarea', 'polybuffer', 'polyder', 'polyeig', 'polyfit', 'polyint', 'polyshape', 'polyval', 'polyvalm', 'posixtime', 'possessivePattern', 'pow2', 'ppval', 'predecessors', 'prefdir', 'preferences', 'press', 'preview', 'primes', 'print', 'printdlg', 'printopt', 'printpreview', 'prism', 'processInputSpecificationChangeImpl', 'processTunedPropertiesImpl', 'prod', 'profile', 'propedit', 'properties', 'propertyeditor', 'psi', 'publish', 'pwd', 'pyargs', 'pyenv', 'qmr', 'qr', 'qrdelete', 'qrinsert', 'qrupdate', 'quad2d', 'quadgk', 'quarter', 'questdlg', 'quit', 'quiver', 'quiver3', 'qz', 'rad2deg', 'rand', 'randi', 'randn', 'randperm', 'rank', 'rat', 'rats', 'rbbox', 'rcond', 'read', 'readATblHdr', 'readBTblHdr', 'readCard', 'readCol', 'readFrame', 'readImg', 'readKey', 'readKeyCmplx', 'readKeyDbl', 'readKeyLongLong', 'readKeyLongStr', 'readKeyUnit', 'readRecord', 'readall', 'readcell', 'readline', 'readlines', 'readmatrix', 'readstruct', 'readtable', 'readtimetable', 'readvars', 'real', 'reallog', 'realmax', 'realmin', 'realpow', 'realsqrt', 'record', 'recordblocking', 'rectangle', 'rectint', 'recycle', 'reducepatch', 'reducevolume', 'refresh', 'refreshSourceControl', 'refreshdata', 'regexp', 'regexpPattern', 'regexpi', 'regexprep', 'regexptranslate', 'regionZoomInteraction', 'regions', 'registerevent', 'regmatlabserver', 'rehash', 'relationaloperators', 'release', 'releaseImpl', 'reload', 'rem', 'remove', 'removeCategory', 'removeFile', 'removeGroup', 'removeLabel', 'removePath', 'removeReference', 'removeSetting', 'removeShortcut', 'removeShutdownFile', 'removeStartupFile', 'removeStyle', 'removeToolbarExplorationButtons', 'removecats', 'removets', 'removevars', 'rename', 'renamecats', 'renamevars', 'rendererinfo', 'reordercats', 'reordernodes', 'repelem', 'replace', 'replaceBetween', 'repmat', 'resample', 'rescale', 'reset', 'resetImpl', 'reshape', 'residue', 'restoredefaultpath', 'resume', 'rethrow', 'retime', 'reverse', 'rgb2gray', 'rgb2hsv', 'rgb2ind', 'rgbplot', 'ribbon', 'rlim', 'rmappdata', 'rmboundary', 'rmdir', 'rmedge', 'rmfield', 'rmholes', 'rmmissing', 'rmnode', 'rmoutliers', 'rmpath', 'rmpref', 'rmprop', 'rmslivers', 'rng', 'roots', 'rosser', 'rot90', 'rotate', 'rotate3d', 'rotateInteraction', 'round', 'rowfun', 'rows2vars', 'rref', 'rsf2csf', 'rtickangle', 'rtickformat', 'rticklabels', 'rticks', 'ruler2num', 'rulerPanInteraction', 'run', 'runChecks', 'runperf', 'runtests', 'save', 'saveObjectImpl', 'saveas', 'savefig', 'saveobj', 'savepath', 'scale', 'scatter', 'scatter3', 'scatteredInterpolant', 'scatterhistogram', 'schur', 'scroll', 'sec', 'secd', 'sech', 'second', 'seconds', 'semilogx', 'semilogy', 'sendmail', 'serialport', 'serialportlist', 'set', 'setBscale', 'setCompressionType', 'setDTR', 'setHCompScale', 'setHCompSmooth', 'setProperties', 'setRTS', 'setTileDim', 'setTscale', 'setabstime', 'setappdata', 'setcats', 'setdiff', 'setenv', 'setfield', 'setinterpmethod', 'setpixelposition', 'setpref', 'settimeseriesnames', 'settings', 'setuniformtime', 'setup', 'setupImpl', 'setvaropts', 'setvartype', 'setxor', 'sgtitle', 'shading', 'sheetnames', 'shg', 'shiftdim', 'shortestpath', 'shortestpathtree', 'showplottool', 'shrinkfaces', 'shuffle', 'sign', 'simplify', 'sin', 'sind', 'single', 'sinh', 'sinpi', 'size', 'slice', 'smooth3', 'smoothdata', 'snapnow', 'sort', 'sortboundaries', 'sortregions', 'sortrows', 'sortx', 'sorty', 'sound', 'soundsc', 'spalloc', 'sparse', 'spaugment', 'spconvert', 'spdiags', 'specular', 'speye', 'spfun', 'sph2cart', 'sphere', 'spinmap', 'spline', 'split', 'splitapply', 'splitlines', 'splitvars', 'spones', 'spparms', 'sprand', 'sprandn', 'sprandsym', 'sprank', 'spreadsheetDatastore', 'spreadsheetImportOptions', 'spring', 'sprintf', 'spy', 'sqrt', 'sqrtm', 'squeeze', 'ss2tf', 'sscanf', 'stack', 'stackedplot', 'stairs', 'standardizeMissing', 'start', 'startat', 'startsWith', 'startup', 'std', 'stem', 'stem3', 'step', 'stepImpl', 'stlread', 'stlwrite', 'stop', 'str2double', 'str2func', 'str2num', 'strcat', 'strcmp', 'strcmpi', 'stream2', 'stream3', 'streamline', 'streamparticles', 'streamribbon', 'streamslice', 'streamtube', 'strfind', 'string', 'strings', 'strip', 'strjoin', 'strjust', 'strlength', 'strncmp', 'strncmpi', 'strrep', 'strsplit', 'strtok', 'strtrim', 'struct', 'struct2cell', 'struct2table', 'structfun', 'sub2ind', 'subgraph', 'subplot', 'subsasgn', 'subscribe', 'subsindex', 'subspace', 'subsref', 'substruct', 'subtitle', 'subtract', 'subvolume', 'successors', 'sum', 'summary', 'summer', 'superclasses', 'surf', 'surf2patch', 'surface', 'surfaceArea', 'surfc', 'surfl', 'surfnorm', 'svd', 'svds', 'svdsketch', 'swapbytes', 'swarmchart', 'swarmchart3', 'sylvester', 'symamd', 'symbfact', 'symmlq', 'symrcm', 'synchronize', 'sysobjupdate', 'system', 'table', 'table2array', 'table2cell', 'table2struct', 'table2timetable', 'tabularTextDatastore', 'tail', 'tall', 'tallrng', 'tan', 'tand', 'tanh', 'tar', 'tcpclient', 'tempdir', 'tempname', 'testsuite', 'tetramesh', 'texlabel', 'text', 'textBoundary', 'textscan', 'textwrap', 'tfqmr', 'thetalim', 'thetatickformat', 'thetaticklabels', 'thetaticks', 'thingSpeakRead', 'thingSpeakWrite', 'throw', 'throwAsCaller', 'tic', 'tiledlayout', 'time', 'timeit', 'timeofday', 'timer', 'timerange', 'timerfind', 'timerfindall', 'timeseries', 'timetable', 'timetable2table', 'timezones', 'title', 'toc', 'todatenum', 'toeplitz', 'toolboxdir', 'topkrows', 'toposort', 'trace', 'transclosure', 'transform', 'translate', 'transpose', 'transreduction', 'trapz', 'treelayout', 'treeplot', 'triangulation', 'tril', 'trimesh', 'triplot', 'trisurf', 'triu', 'true', 'tscollection', 'tsdata.event', 'tsearchn', 'turbo', 'turningdist', 'type', 'typecast', 'tzoffset', 'uialert', 'uiaxes', 'uibutton', 'uibuttongroup', 'uicheckbox', 'uiconfirm', 'uicontextmenu', 'uicontrol', 'uidatepicker', 'uidropdown', 'uieditfield', 'uifigure', 'uigauge', 'uigetdir', 'uigetfile', 'uigetpref', 'uigridlayout', 'uihtml', 'uiimage', 'uiknob', 'uilabel', 'uilamp', 'uilistbox', 'uimenu', 'uint16', 'uint32', 'uint64', 'uint8', 'uiopen', 'uipanel', 'uiprogressdlg', 'uipushtool', 'uiputfile', 'uiradiobutton', 'uiresume', 'uisave', 'uisetcolor', 'uisetfont', 'uisetpref', 'uislider', 'uispinner', 'uistack', 'uistyle', 'uiswitch', 'uitab', 'uitabgroup', 'uitable', 'uitextarea', 'uitogglebutton', 'uitoggletool', 'uitoolbar', 'uitree', 'uitreenode', 'uiwait', 'uminus', 'underlyingType', 'underlyingValue', 'unicode2native', 'union', 'unique', 'uniquetol', 'unix', 'unloadlibrary', 'unmesh', 'unmkpp', 'unregisterallevents', 'unregisterevent', 'unstack', 'unsubscribe', 'untar', 'unwrap', 'unzip', 'update', 'updateDependencies', 'uplus', 'upper', 'usejava', 'userpath', 'validateFunctionSignaturesJSON', 'validateInputsImpl', 'validatePropertiesImpl', 'validateattributes', 'validatecolor', 'validatestring', 'values', 'vander', 'var', 'varargin', 'varargout', 'varfun', 'vartype', 'vecnorm', 'ver', 'verLessThan', 'version', 'vertcat', 'vertexAttachments', 'vertexNormal', 'view', 'viewmtx', 'visdiff', 'volume', 'volumebounds', 'voronoi', 'voronoiDiagram', 'voronoin', 'wait', 'waitbar', 'waitfor', 'waitforbuttonpress', 'warndlg', 'warning', 'waterfall', 'web', 'weboptions', 'webread', 'websave', 'webwrite', 'week', 'weekday', 'what', 'which', 'whitespaceBoundary', 'whitespacePattern', 'who', 'whos', 'width', 'wildcardPattern', 'wilkinson', 'winopen', 'winqueryreg', 'winter', 'withinrange', 'withtol', 'wordcloud', 'write', 'writeChecksum', 'writeCol', 'writeComment', 'writeDate', 'writeHistory', 'writeImg', 'writeKey', 'writeKeyUnit', 'writeVideo', 'writeall', 'writecell', 'writeline', 'writematrix', 'writestruct', 'writetable', 'writetimetable', 'xcorr', 'xcov', 'xlabel', 'xlim', 'xline', 'xmlread', 'xmlwrite', 'xor', 'xslt', 'xtickangle', 'xtickformat', 'xticklabels', 'xticks', 'year', 'years', 'ylabel', 'ylim', 'yline', 'ymd', 'ytickangle', 'ytickformat', 'yticklabels', 'yticks', 'yyaxis', 'yyyymmdd', 'zeros', 'zip', 'zlabel', 'zlim', 'zoom', 'zoomInteraction', 'ztickangle', 'ztickformat', 'zticklabels', 'zticks'], prefix='(?<!\\.)(', suffix=')\\b'), Name.Builtin), ('(\\.\\.\\.)(.*)$', bygroups(Keyword, Comment)), (f'(?:^|(?<=;))(\\s*)(\\w+)(\\s+)(?!=|\\(|{_operators}\\s|\\s)', bygroups(Whitespace, Name, Whitespace), 'commandargs'), include('expressions')], 'blockcomment': [('^\\s*%\\}', Comment.Multiline, '#pop'), ('^.*\\n', Comment.Multiline), ('.', Comment.Multiline)], 'deffunc': [('(\\s*)(?:(\\S+)(\\s*)(=)(\\s*))?(.+)(\\()(.*)(\\))(\\s*)', bygroups(Whitespace, Text, Whitespace, Punctuation, Whitespace, Name.Function, Punctuation, Text, Punctuation, Whitespace), '#pop'), ('(\\s*)([a-zA-Z_]\\w*)', bygroups(Whitespace, Name.Function), '#pop')], 'propattrs': [('(\\w+)(\\s*)(=)(\\s*)(\\d+)', bygroups(Name.Builtin, Whitespace, Punctuation, Whitespace, Number)), ('(\\w+)(\\s*)(=)(\\s*)([a-zA-Z]\\w*)', bygroups(Name.Builtin, Whitespace, Punctuation, Whitespace, Keyword)), (',', Punctuation), ('\\)', Punctuation, '#pop'), ('\\s+', Whitespace), ('.', Text)], 'defprops': [('%\\{\\s*\\n', Comment.Multiline, 'blockcomment'), ('%.*$', Comment), ('(?<!\\.)end\\b', Keyword, '#pop'), include('expressions')], 'string': [("[^']*'", String, '#pop')], 'commandargs': [('=', Punctuation, '#pop'), (_operators, Operator, '#pop'), ('[ \\t]+', Whitespace), ("'[^']*'", String), ("[^';\\s]+", String), (';', Punctuation, '#pop'), default('#pop')]}
  --
      + analyse_text(text)
  }

  class MatlabSessionLexer {
      + name = 'Matlab session'
      + aliases = ['matlabsession']
      + url = 'https://www.mathworks.com/products/matlab.html'
      + version_added = '0.10'
  --
      + get_tokens_unprocessed(text)
  }

  class OctaveLexer {
      + name = 'Octave'
      + url = 'https://www.gnu.org/software/octave/index'
      + aliases = ['octave']
      + filenames = ['*.m']
      + mimetypes = ['text/octave']
      + version_added = '1.5'
      + builtin_kw = ('addlistener', 'addpath', 'addproperty', 'all', 'and', 'any', 'argnames', 'argv', 'assignin', 'atexit', 'autoload', 'available_graphics_toolkits', 'beep_on_error', 'bitand', 'bitmax', 'bitor', 'bitshift', 'bitxor', 'cat', 'cell', 'cellstr', 'char', 'class', 'clc', 'columns', 'command_line_path', 'completion_append_char', 'completion_matches', 'complex', 'confirm_recursive_rmdir', 'cputime', 'crash_dumps_octave_core', 'ctranspose', 'cumprod', 'cumsum', 'debug_on_error', 'debug_on_interrupt', 'debug_on_warning', 'default_save_options', 'dellistener', 'diag', 'diff', 'disp', 'doc_cache_file', 'do_string_escapes', 'double', 'drawnow', 'e', 'echo_executing_commands', 'eps', 'eq', 'errno', 'errno_list', 'error', 'eval', 'evalin', 'exec', 'exist', 'exit', 'eye', 'false', 'fclear', 'fclose', 'fcntl', 'fdisp', 'feof', 'ferror', 'feval', 'fflush', 'fgetl', 'fgets', 'fieldnames', 'file_in_loadpath', 'file_in_path', 'filemarker', 'filesep', 'find_dir_in_path', 'fixed_point_format', 'fnmatch', 'fopen', 'fork', 'formula', 'fprintf', 'fputs', 'fread', 'freport', 'frewind', 'fscanf', 'fseek', 'fskipl', 'ftell', 'functions', 'fwrite', 'ge', 'genpath', 'get', 'getegid', 'getenv', 'geteuid', 'getgid', 'getpgrp', 'getpid', 'getppid', 'getuid', 'glob', 'gt', 'gui_mode', 'history_control', 'history_file', 'history_size', 'history_timestamp_format_string', 'home', 'horzcat', 'hypot', 'ifelse', 'ignore_function_time_stamp', 'inferiorto', 'info_file', 'info_program', 'inline', 'input', 'intmax', 'intmin', 'ipermute', 'is_absolute_filename', 'isargout', 'isbool', 'iscell', 'iscellstr', 'ischar', 'iscomplex', 'isempty', 'isfield', 'isfloat', 'isglobal', 'ishandle', 'isieee', 'isindex', 'isinteger', 'islogical', 'ismatrix', 'ismethod', 'isnull', 'isnumeric', 'isobject', 'isreal', 'is_rooted_relative_filename', 'issorted', 'isstruct', 'isvarname', 'kbhit', 'keyboard', 'kill', 'lasterr', 'lasterror', 'lastwarn', 'ldivide', 'le', 'length', 'link', 'linspace', 'logical', 'lstat', 'lt', 'make_absolute_filename', 'makeinfo_program', 'max_recursion_depth', 'merge', 'methods', 'mfilename', 'minus', 'mislocked', 'mkdir', 'mkfifo', 'mkstemp', 'mldivide', 'mlock', 'mouse_wheel_zoom', 'mpower', 'mrdivide', 'mtimes', 'munlock', 'nargin', 'nargout', 'native_float_format', 'ndims', 'ne', 'nfields', 'nnz', 'norm', 'not', 'numel', 'nzmax', 'octave_config_info', 'octave_core_file_limit', 'octave_core_file_name', 'octave_core_file_options', 'ones', 'or', 'output_max_field_width', 'output_precision', 'page_output_immediately', 'page_screen_output', 'path', 'pathsep', 'pause', 'pclose', 'permute', 'pi', 'pipe', 'plus', 'popen', 'power', 'print_empty_dimensions', 'printf', 'print_struct_array_contents', 'prod', 'program_invocation_name', 'program_name', 'putenv', 'puts', 'pwd', 'quit', 'rats', 'rdivide', 'readdir', 'readlink', 'read_readline_init_file', 'realmax', 'realmin', 'rehash', 'rename', 'repelems', 're_read_readline_init_file', 'reset', 'reshape', 'resize', 'restoredefaultpath', 'rethrow', 'rmdir', 'rmfield', 'rmpath', 'rows', 'save_header_format_string', 'save_precision', 'saving_history', 'scanf', 'set', 'setenv', 'shell_cmd', 'sighup_dumps_octave_core', 'sigterm_dumps_octave_core', 'silent_functions', 'single', 'size', 'size_equal', 'sizemax', 'sizeof', 'sleep', 'source', 'sparse_auto_mutate', 'split_long_rows', 'sprintf', 'squeeze', 'sscanf', 'stat', 'stderr', 'stdin', 'stdout', 'strcmp', 'strcmpi', 'string_fill_char', 'strncmp', 'strncmpi', 'struct', 'struct_levels_to_print', 'strvcat', 'subsasgn', 'subsref', 'sum', 'sumsq', 'superiorto', 'suppress_verbose_help_message', 'symlink', 'system', 'tic', 'tilde_expand', 'times', 'tmpfile', 'tmpnam', 'toc', 'toupper', 'transpose', 'true', 'typeinfo', 'umask', 'uminus', 'uname', 'undo_string_escapes', 'unlink', 'uplus', 'upper', 'usage', 'usleep', 'vec', 'vectorize', 'vertcat', 'waitpid', 'warning', 'warranty', 'whos_line_format', 'yes_or_no', 'zeros', 'inf', 'Inf', 'nan', 'NaN')
      + command_kw = ('close', 'load', 'who', 'whos')
      + function_kw = ('accumarray', 'accumdim', 'acosd', 'acotd', 'acscd', 'addtodate', 'allchild', 'ancestor', 'anova', 'arch_fit', 'arch_rnd', 'arch_test', 'area', 'arma_rnd', 'arrayfun', 'ascii', 'asctime', 'asecd', 'asind', 'assert', 'atand', 'autoreg_matrix', 'autumn', 'axes', 'axis', 'bar', 'barh', 'bartlett', 'bartlett_test', 'beep', 'betacdf', 'betainv', 'betapdf', 'betarnd', 'bicgstab', 'bicubic', 'binary', 'binocdf', 'binoinv', 'binopdf', 'binornd', 'bitcmp', 'bitget', 'bitset', 'blackman', 'blanks', 'blkdiag', 'bone', 'box', 'brighten', 'calendar', 'cast', 'cauchy_cdf', 'cauchy_inv', 'cauchy_pdf', 'cauchy_rnd', 'caxis', 'celldisp', 'center', 'cgs', 'chisquare_test_homogeneity', 'chisquare_test_independence', 'circshift', 'cla', 'clabel', 'clf', 'clock', 'cloglog', 'closereq', 'colon', 'colorbar', 'colormap', 'colperm', 'comet', 'common_size', 'commutation_matrix', 'compan', 'compare_versions', 'compass', 'computer', 'cond', 'condest', 'contour', 'contourc', 'contourf', 'contrast', 'conv', 'convhull', 'cool', 'copper', 'copyfile', 'cor', 'corrcoef', 'cor_test', 'cosd', 'cotd', 'cov', 'cplxpair', 'cross', 'cscd', 'cstrcat', 'csvread', 'csvwrite', 'ctime', 'cumtrapz', 'curl', 'cut', 'cylinder', 'date', 'datenum', 'datestr', 'datetick', 'datevec', 'dblquad', 'deal', 'deblank', 'deconv', 'delaunay', 'delaunayn', 'delete', 'demo', 'detrend', 'diffpara', 'diffuse', 'dir', 'discrete_cdf', 'discrete_inv', 'discrete_pdf', 'discrete_rnd', 'display', 'divergence', 'dlmwrite', 'dos', 'dsearch', 'dsearchn', 'duplication_matrix', 'durbinlevinson', 'ellipsoid', 'empirical_cdf', 'empirical_inv', 'empirical_pdf', 'empirical_rnd', 'eomday', 'errorbar', 'etime', 'etreeplot', 'example', 'expcdf', 'expinv', 'expm', 'exppdf', 'exprnd', 'ezcontour', 'ezcontourf', 'ezmesh', 'ezmeshc', 'ezplot', 'ezpolar', 'ezsurf', 'ezsurfc', 'factor', 'factorial', 'fail', 'fcdf', 'feather', 'fftconv', 'fftfilt', 'fftshift', 'figure', 'fileattrib', 'fileparts', 'fill', 'findall', 'findobj', 'findstr', 'finv', 'flag', 'flipdim', 'fliplr', 'flipud', 'fpdf', 'fplot', 'fractdiff', 'freqz', 'freqz_plot', 'frnd', 'fsolve', 'f_test_regression', 'ftp', 'fullfile', 'fzero', 'gamcdf', 'gaminv', 'gampdf', 'gamrnd', 'gca', 'gcbf', 'gcbo', 'gcf', 'genvarname', 'geocdf', 'geoinv', 'geopdf', 'geornd', 'getfield', 'ginput', 'glpk', 'gls', 'gplot', 'gradient', 'graphics_toolkit', 'gray', 'grid', 'griddata', 'griddatan', 'gtext', 'gunzip', 'gzip', 'hadamard', 'hamming', 'hankel', 'hanning', 'hggroup', 'hidden', 'hilb', 'hist', 'histc', 'hold', 'hot', 'hotelling_test', 'housh', 'hsv', 'hurst', 'hygecdf', 'hygeinv', 'hygepdf', 'hygernd', 'idivide', 'ifftshift', 'image', 'imagesc', 'imfinfo', 'imread', 'imshow', 'imwrite', 'index', 'info', 'inpolygon', 'inputname', 'interpft', 'interpn', 'intersect', 'invhilb', 'iqr', 'isa', 'isdefinite', 'isdir', 'is_duplicate_entry', 'isequal', 'isequalwithequalnans', 'isfigure', 'ishermitian', 'ishghandle', 'is_leap_year', 'isletter', 'ismac', 'ismember', 'ispc', 'isprime', 'isprop', 'isscalar', 'issquare', 'isstrprop', 'issymmetric', 'isunix', 'is_valid_file_id', 'isvector', 'jet', 'kendall', 'kolmogorov_smirnov_cdf', 'kolmogorov_smirnov_test', 'kruskal_wallis_test', 'krylov', 'kurtosis', 'laplace_cdf', 'laplace_inv', 'laplace_pdf', 'laplace_rnd', 'legend', 'legendre', 'license', 'line', 'linkprop', 'list_primes', 'loadaudio', 'loadobj', 'logistic_cdf', 'logistic_inv', 'logistic_pdf', 'logistic_rnd', 'logit', 'loglog', 'loglogerr', 'logm', 'logncdf', 'logninv', 'lognpdf', 'lognrnd', 'logspace', 'lookfor', 'ls_command', 'lsqnonneg', 'magic', 'mahalanobis', 'manova', 'matlabroot', 'mcnemar_test', 'mean', 'meansq', 'median', 'menu', 'mesh', 'meshc', 'meshgrid', 'meshz', 'mexext', 'mget', 'mkpp', 'mode', 'moment', 'movefile', 'mpoles', 'mput', 'namelengthmax', 'nargchk', 'nargoutchk', 'nbincdf', 'nbininv', 'nbinpdf', 'nbinrnd', 'nchoosek', 'ndgrid', 'newplot', 'news', 'nonzeros', 'normcdf', 'normest', 'norminv', 'normpdf', 'normrnd', 'now', 'nthroot', 'null', 'ocean', 'ols', 'onenormest', 'optimget', 'optimset', 'orderfields', 'orient', 'orth', 'pack', 'pareto', 'parseparams', 'pascal', 'patch', 'pathdef', 'pcg', 'pchip', 'pcolor', 'pcr', 'peaks', 'periodogram', 'perl', 'perms', 'pie', 'pink', 'planerot', 'playaudio', 'plot', 'plotmatrix', 'plotyy', 'poisscdf', 'poissinv', 'poisspdf', 'poissrnd', 'polar', 'poly', 'polyaffine', 'polyarea', 'polyderiv', 'polyfit', 'polygcd', 'polyint', 'polyout', 'polyreduce', 'polyval', 'polyvalm', 'postpad', 'powerset', 'ppder', 'ppint', 'ppjumps', 'ppplot', 'ppval', 'pqpnonneg', 'prepad', 'primes', 'print', 'print_usage', 'prism', 'probit', 'qp', 'qqplot', 'quadcc', 'quadgk', 'quadl', 'quadv', 'quiver', 'qzhess', 'rainbow', 'randi', 'range', 'rank', 'ranks', 'rat', 'reallog', 'realpow', 'realsqrt', 'record', 'rectangle_lw', 'rectangle_sw', 'rectint', 'refresh', 'refreshdata', 'regexptranslate', 'repmat', 'residue', 'ribbon', 'rindex', 'roots', 'rose', 'rosser', 'rotdim', 'rref', 'run', 'run_count', 'rundemos', 'run_test', 'runtests', 'saveas', 'saveaudio', 'saveobj', 'savepath', 'scatter', 'secd', 'semilogx', 'semilogxerr', 'semilogy', 'semilogyerr', 'setaudio', 'setdiff', 'setfield', 'setxor', 'shading', 'shift', 'shiftdim', 'sign_test', 'sinc', 'sind', 'sinetone', 'sinewave', 'skewness', 'slice', 'sombrero', 'sortrows', 'spaugment', 'spconvert', 'spdiags', 'spearman', 'spectral_adf', 'spectral_xdf', 'specular', 'speed', 'spencer', 'speye', 'spfun', 'sphere', 'spinmap', 'spline', 'spones', 'sprand', 'sprandn', 'sprandsym', 'spring', 'spstats', 'spy', 'sqp', 'stairs', 'statistics', 'std', 'stdnormal_cdf', 'stdnormal_inv', 'stdnormal_pdf', 'stdnormal_rnd', 'stem', 'stft', 'strcat', 'strchr', 'strjust', 'strmatch', 'strread', 'strsplit', 'strtok', 'strtrim', 'strtrunc', 'structfun', 'studentize', 'subplot', 'subsindex', 'subspace', 'substr', 'substruct', 'summer', 'surf', 'surface', 'surfc', 'surfl', 'surfnorm', 'svds', 'swapbytes', 'sylvester_matrix', 'symvar', 'synthesis', 'table', 'tand', 'tar', 'tcdf', 'tempdir', 'tempname', 'test', 'text', 'textread', 'textscan', 'tinv', 'title', 'toeplitz', 'tpdf', 'trace', 'trapz', 'treelayout', 'treeplot', 'triangle_lw', 'triangle_sw', 'tril', 'trimesh', 'triplequad', 'triplot', 'trisurf', 'triu', 'trnd', 'tsearchn', 't_test', 't_test_regression', 'type', 'unidcdf', 'unidinv', 'unidpdf', 'unidrnd', 'unifcdf', 'unifinv', 'unifpdf', 'unifrnd', 'union', 'unique', 'unix', 'unmkpp', 'unpack', 'untabify', 'untar', 'unwrap', 'unzip', 'u_test', 'validatestring', 'vander', 'var', 'var_test', 'vech', 'ver', 'version', 'view', 'voronoi', 'voronoin', 'waitforbuttonpress', 'wavread', 'wavwrite', 'wblcdf', 'wblinv', 'wblpdf', 'wblrnd', 'weekday', 'welch_test', 'what', 'white', 'whitebg', 'wienrnd', 'wilcoxon_test', 'wilkinson', 'winter', 'xlabel', 'xlim', 'ylabel', 'yulewalker', 'zip', 'zlabel', 'z_test')
      + loadable_kw = ('airy', 'amd', 'balance', 'besselh', 'besseli', 'besselj', 'besselk', 'bessely', 'bitpack', 'bsxfun', 'builtin', 'ccolamd', 'cellfun', 'cellslices', 'chol', 'choldelete', 'cholinsert', 'cholinv', 'cholshift', 'cholupdate', 'colamd', 'colloc', 'convhulln', 'convn', 'csymamd', 'cummax', 'cummin', 'daspk', 'daspk_options', 'dasrt', 'dasrt_options', 'dassl', 'dassl_options', 'dbclear', 'dbdown', 'dbstack', 'dbstatus', 'dbstop', 'dbtype', 'dbup', 'dbwhere', 'det', 'dlmread', 'dmperm', 'dot', 'eig', 'eigs', 'endgrent', 'endpwent', 'etree', 'fft', 'fftn', 'fftw', 'filter', 'find', 'full', 'gcd', 'getgrent', 'getgrgid', 'getgrnam', 'getpwent', 'getpwnam', 'getpwuid', 'getrusage', 'givens', 'gmtime', 'gnuplot_binary', 'hess', 'ifft', 'ifftn', 'inv', 'isdebugmode', 'issparse', 'kron', 'localtime', 'lookup', 'lsode', 'lsode_options', 'lu', 'luinc', 'luupdate', 'matrix_type', 'max', 'min', 'mktime', 'pinv', 'qr', 'qrdelete', 'qrinsert', 'qrshift', 'qrupdate', 'quad', 'quad_options', 'qz', 'rand', 'rande', 'randg', 'randn', 'randp', 'randperm', 'rcond', 'regexp', 'regexpi', 'regexprep', 'schur', 'setgrent', 'setpwent', 'sort', 'spalloc', 'sparse', 'spparms', 'sprank', 'sqrtm', 'strfind', 'strftime', 'strptime', 'strrep', 'svd', 'svd_driver', 'syl', 'symamd', 'symbfact', 'symrcm', 'time', 'tsearch', 'typecast', 'urlread', 'urlwrite')
      + mapping_kw = ('abs', 'acos', 'acosh', 'acot', 'acoth', 'acsc', 'acsch', 'angle', 'arg', 'asec', 'asech', 'asin', 'asinh', 'atan', 'atanh', 'beta', 'betainc', 'betaln', 'bincoeff', 'cbrt', 'ceil', 'conj', 'cos', 'cosh', 'cot', 'coth', 'csc', 'csch', 'erf', 'erfc', 'erfcx', 'erfinv', 'exp', 'finite', 'fix', 'floor', 'fmod', 'gamma', 'gammainc', 'gammaln', 'imag', 'isalnum', 'isalpha', 'isascii', 'iscntrl', 'isdigit', 'isfinite', 'isgraph', 'isinf', 'islower', 'isna', 'isnan', 'isprint', 'ispunct', 'isspace', 'isupper', 'isxdigit', 'lcm', 'lgamma', 'log', 'lower', 'mod', 'real', 'rem', 'round', 'roundb', 'sec', 'sech', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'toascii', 'tolower', 'xor')
      + builtin_consts = ('EDITOR', 'EXEC_PATH', 'I', 'IMAGE_PATH', 'NA', 'OCTAVE_HOME', 'OCTAVE_VERSION', 'PAGER', 'PAGER_FLAGS', 'SEEK_CUR', 'SEEK_END', 'SEEK_SET', 'SIG', 'S_ISBLK', 'S_ISCHR', 'S_ISDIR', 'S_ISFIFO', 'S_ISLNK', 'S_ISREG', 'S_ISSOCK', 'WCONTINUE', 'WCOREDUMP', 'WEXITSTATUS', 'WIFCONTINUED', 'WIFEXITED', 'WIFSIGNALED', 'WIFSTOPPED', 'WNOHANG', 'WSTOPSIG', 'WTERMSIG', 'WUNTRACED')
      + tokens = {'root': [('%\\{\\s*\\n', Comment.Multiline, 'percentblockcomment'), ('#\\{\\s*\\n', Comment.Multiline, 'hashblockcomment'), ('[%#].*$', Comment), ('^\\s*function\\b', Keyword, 'deffunc'), (words(('__FILE__', '__LINE__', 'break', 'case', 'catch', 'classdef', 'continue', 'do', 'else', 'elseif', 'end', 'end_try_catch', 'end_unwind_protect', 'endclassdef', 'endevents', 'endfor', 'endfunction', 'endif', 'endmethods', 'endproperties', 'endswitch', 'endwhile', 'events', 'for', 'function', 'get', 'global', 'if', 'methods', 'otherwise', 'persistent', 'properties', 'return', 'set', 'static', 'switch', 'try', 'until', 'unwind_protect', 'unwind_protect_cleanup', 'while'), suffix='\\b'), Keyword), (words(builtin_kw + command_kw + function_kw + loadable_kw + mapping_kw, suffix='\\b'), Name.Builtin), (words(builtin_consts, suffix='\\b'), Name.Constant), ('-=|!=|!|/=|--', Operator), ('-|==|~=|<|>|<=|>=|&&|&|~|\\|\\|?', Operator), ('\\*=|\\+=|\\^=|\\/=|\\\\=|\\*\\*|\\+\\+|\\.\\*\\*', Operator), ('\\.\\*|\\*|\\+|\\.\\^|\\^|\\.\\\\|\\.\\/|\\/|\\\\', Operator), ('[\\[\\](){}:@.,]', Punctuation), ('=|:|;', Punctuation), ('"[^"]*"', String), ('(\\d+\\.\\d*|\\d*\\.\\d+)([eEf][+-]?[0-9]+)?', Number.Float), ('\\d+[eEf][+-]?[0-9]+', Number.Float), ('\\d+', Number.Integer), ("(?<=[\\w)\\].])\\'+", Operator), ("(?<![\\w)\\].])\\'", String, 'string'), ('[a-zA-Z_]\\w*', Name), ('\\s+', Text), ('.', Text)], 'percentblockcomment': [('^\\s*%\\}', Comment.Multiline, '#pop'), ('^.*\\n', Comment.Multiline), ('.', Comment.Multiline)], 'hashblockcomment': [('^\\s*#\\}', Comment.Multiline, '#pop'), ('^.*\\n', Comment.Multiline), ('.', Comment.Multiline)], 'string': [("[^']*'", String, '#pop')], 'deffunc': [('(\\s*)(?:(\\S+)(\\s*)(=)(\\s*))?(.+)(\\()(.*)(\\))(\\s*)', bygroups(Whitespace, Text, Whitespace, Punctuation, Whitespace, Name.Function, Punctuation, Text, Punctuation, Whitespace), '#pop'), ('(\\s*)([a-zA-Z_]\\w*)', bygroups(Whitespace, Name.Function), '#pop')]}
  --
      + analyse_text(text)
  }

  class ScilabLexer {
      + name = 'Scilab'
      + url = 'https://www.scilab.org/'
      + aliases = ['scilab']
      + filenames = ['*.sci', '*.sce', '*.tst']
      + mimetypes = ['text/scilab']
      + version_added = '1.5'
      + tokens = {'root': [('//.*?$', Comment.Single), ('^\\s*function\\b', Keyword, 'deffunc'), (words(('__FILE__', '__LINE__', 'break', 'case', 'catch', 'classdef', 'continue', 'do', 'else', 'elseif', 'end', 'end_try_catch', 'end_unwind_protect', 'endclassdef', 'endevents', 'endfor', 'endfunction', 'endif', 'endmethods', 'endproperties', 'endswitch', 'endwhile', 'events', 'for', 'function', 'get', 'global', 'if', 'methods', 'otherwise', 'persistent', 'properties', 'return', 'set', 'static', 'switch', 'try', 'until', 'unwind_protect', 'unwind_protect_cleanup', 'while'), suffix='\\b'), Keyword), (words(_scilab_builtins.functions_kw + _scilab_builtins.commands_kw + _scilab_builtins.macros_kw, suffix='\\b'), Name.Builtin), (words(_scilab_builtins.variables_kw, suffix='\\b'), Name.Constant), ('-|==|~=|<|>|<=|>=|&&|&|~|\\|\\|?', Operator), ('\\.\\*|\\*|\\+|\\.\\^|\\^|\\.\\\\|\\.\\/|\\/|\\\\', Operator), ('[\\[\\](){}@.,=:;]+', Punctuation), ('"[^"]*"', String), ("(?<=[\\w)\\].])\\'+", Operator), ("(?<![\\w)\\].])\\'", String, 'string'), ('(\\d+\\.\\d*|\\d*\\.\\d+)([eEf][+-]?[0-9]+)?', Number.Float), ('\\d+[eEf][+-]?[0-9]+', Number.Float), ('\\d+', Number.Integer), ('[a-zA-Z_]\\w*', Name), ('\\s+', Whitespace), ('.', Text)], 'string': [("[^']*'", String, '#pop'), ('.', String, '#pop')], 'deffunc': [('(\\s*)(?:(\\S+)(\\s*)(=)(\\s*))?(.+)(\\()(.*)(\\))(\\s*)', bygroups(Whitespace, Text, Whitespace, Punctuation, Whitespace, Name.Function, Punctuation, Text, Punctuation, Whitespace), '#pop'), ('(\\s*)([a-zA-Z_]\\w*)', bygroups(Text, Name.Function), '#pop')]}
  --
      + analyse_text(text)
  }

  class MaximaLexer {
      + name = 'Maxima'
      + url = 'http://maxima.sourceforge.net'
      + aliases = ['maxima', 'macsyma']
      + filenames = ['*.mac', '*.max']
      + version_added = '2.11'
      + keywords = ('if', 'then', 'else', 'elseif', 'do', 'while', 'repeat', 'until', 'for', 'from', 'to', 'downto', 'step', 'thru')
      + constants = ('%pi', '%e', '%phi', '%gamma', '%i', 'und', 'ind', 'infinity', 'inf', 'minf', 'true', 'false', 'unknown', 'done')
      + operators = ('.', ':', '=', '#', '+', '-', '*', '/', '^', '@', '>', '<', '|', '!', "'")
      + operator_words = ('and', 'or', 'not')
      + tokens = {'root': [('/\\*', Comment.Multiline, 'comment'), ('"(?:[^"\\\\]|\\\\.)*"', String), ('\\(|\\)|\\[|\\]|\\{|\\}', Punctuation), ('[,;$]', Punctuation), (words(constants), Name.Constant), (words(keywords), Keyword), (words(operators), Operator), (words(operator_words), Operator.Word), ('(?x)\n              ((?:[a-zA-Z_#][\\w#]*|`[^`]*`)\n              (?:::[a-zA-Z_#][\\w#]*|`[^`]*`)*)(\\s*)([(])', bygroups(Name.Function, Text.Whitespace, Punctuation)), ('(?x)\n              (?:[a-zA-Z_#%][\\w#%]*|`[^`]*`)\n              (?:::[a-zA-Z_#%][\\w#%]*|`[^`]*`)*', Name.Variable), ('[-+]?(\\d*\\.\\d+([bdefls][-+]?\\d+)?|\\d+(\\.\\d*)?[bdefls][-+]?\\d+)', Number.Float), ('[-+]?\\d+', Number.Integer), ('\\s+', Text.Whitespace), ('.', Text)], 'comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  --
      + analyse_text(text)
  }

  class MesonLexer {
      + name = 'Meson'
      + url = 'https://mesonbuild.com/'
      + aliases = ['meson', 'meson.build']
      + filenames = ['meson.build', 'meson_options.txt']
      + mimetypes = ['text/x-meson']
      + version_added = '2.10'
      + tokens = {'root': [('#.*?$', Comment), ("'''.*'''", String.Single), ('[1-9][0-9]*', Number.Integer), ('0o[0-7]+', Number.Oct), ('0x[a-fA-F0-9]+', Number.Hex), include('string'), include('keywords'), include('expr'), ('[a-zA-Z_][a-zA-Z_0-9]*', Name), ('\\s+', Whitespace)], 'string': [("[']{3}([']{0,2}([^\\\\']|\\\\(.|\\n)))*[']{3}", String), ("'.*?(?<!\\\\)(\\\\\\\\)*?'", String)], 'keywords': [(words(('if', 'elif', 'else', 'endif', 'foreach', 'endforeach', 'break', 'continue'), suffix='\\b'), Keyword)], 'expr': [('(in|and|or|not)\\b', Operator.Word), ('(\\*=|/=|%=|\\+]=|-=|==|!=|\\+|-|=)', Operator), ('[\\[\\]{}:().,?]', Punctuation), (words(('true', 'false'), suffix='\\b'), Keyword.Constant), include('builtins'), (words(('meson', 'build_machine', 'host_machine', 'target_machine'), suffix='\\b'), Name.Variable.Magic)], 'builtins': [(words(('add_global_arguments', 'add_global_link_arguments', 'add_languages', 'add_project_arguments', 'add_project_link_arguments', 'add_test_setup', 'assert', 'benchmark', 'both_libraries', 'build_target', 'configuration_data', 'configure_file', 'custom_target', 'declare_dependency', 'dependency', 'disabler', 'environment', 'error', 'executable', 'files', 'find_library', 'find_program', 'generator', 'get_option', 'get_variable', 'include_directories', 'install_data', 'install_headers', 'install_man', 'install_subdir', 'is_disabler', 'is_variable', 'jar', 'join_paths', 'library', 'message', 'project', 'range', 'run_command', 'set_variable', 'shared_library', 'shared_module', 'static_library', 'subdir', 'subdir_done', 'subproject', 'summary', 'test', 'vcs_tag', 'warning'), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin), ('(?<!\\.)import\\b', Name.Namespace)]}
  }

  class MIMELexer {
      + name = 'MIME'
      + aliases = ['mime']
      + mimetypes = ['multipart/mixed', 'multipart/related', 'multipart/alternative']
      + url = 'https://en.wikipedia.org/wiki/MIME'
      + version_added = '2.5'
      + attention_headers = {'content-type', 'content-transfer-encoding'}
      + tokens = {'root': [('^([\\w-]+):( *)([\\s\\S]*?\\n)(?![ \\t])', get_header_tokens), ('^$[\\s\\S]+', get_body_tokens)], 'header': [('\\n[ \\t]', Text.Whitespace), ('\\n(?![ \\t])', Text.Whitespace, '#pop')], 'content-type': [include('header'), ('^\\s*((multipart|application|audio|font|image|model|text|video|message)/([\\w-]+))', store_content_type), ('(;)((?:[ \\t]|\\n[ \\t])*)([\\w:-]+)(=)([\\s\\S]*?)(?=;|\\n(?![ \\t]))', get_content_type_subtokens), (';[ \\t]*\\n(?![ \\t])', Text, '#pop')], 'content-transfer-encoding': [include('header'), ('([\\w-]+)', store_content_transfer_encoding)]}
  --
      - __init__()
      + get_header_tokens(match)
      + get_body_tokens(match)
      + get_bodypart_tokens(text)
      + store_content_type(match)
      + get_content_type_subtokens(match)
      + store_content_transfer_encoding(match)
  }

  class SNBTLexer {
      + name = 'SNBT'
      + url = 'https://minecraft.wiki/w/NBT_format'
      + aliases = ['snbt']
      + filenames = ['*.snbt']
      + mimetypes = ['text/snbt']
      + version_added = '2.12'
      + tokens = {'root': [('\\{', Punctuation, 'compound'), ('[^\\{]+', Text)], 'whitespace': [('\\s+', Whitespace)], 'operators': [('[,:;]', Punctuation)], 'literals': [('(true|false)', Keyword.Constant), ('-?\\d+[eE]-?\\d+', Number.Float), ('-?\\d*\\.\\d+[fFdD]?', Number.Float), ('-?\\d+[bBsSlLfFdD]?', Number.Integer), ('"', String.Double, 'literals.string_double'), ("'", String.Single, 'literals.string_single')], 'literals.string_double': [('\\\\.', String.Escape), ('[^\\\\"\\n]+', String.Double), ('"', String.Double, '#pop')], 'literals.string_single': [('\\\\.', String.Escape), ("[^\\\\'\\n]+", String.Single), ("'", String.Single, '#pop')], 'compound': [('[A-Z_a-z]+', Name.Attribute), include('operators'), include('whitespace'), include('literals'), ('\\{', Punctuation, '#push'), ('\\[', Punctuation, 'list'), ('\\}', Punctuation, '#pop')], 'list': [('[A-Z_a-z]+', Name.Attribute), include('literals'), include('operators'), include('whitespace'), ('\\[', Punctuation, '#push'), ('\\{', Punctuation, 'compound'), ('\\]', Punctuation, '#pop')]}
  }

  class MCFunctionLexer {
      + name = 'MCFunction'
      + url = 'https://minecraft.wiki/w/Commands'
      + aliases = ['mcfunction', 'mcf']
      + filenames = ['*.mcfunction']
      + mimetypes = ['text/mcfunction']
      + version_added = '2.12'
      + tokens = {'root': [include('names'), include('comments'), include('literals'), include('whitespace'), include('property'), include('operators'), include('selectors')], 'names': [('^(\\s*)([a-z_]+)', bygroups(Whitespace, Name.Builtin)), ('(?<=run)\\s+[a-z_]+', Name.Builtin), ('\\b[0-9a-fA-F]+(?:-[0-9a-fA-F]+){4}\\b', Name.Variable), include('resource-name'), ('[A-Za-z_][\\w.#%$]+', Keyword.Constant), ('[#%$][\\w.#%$]+', Name.Variable.Magic)], 'resource-name': [('#?[a-z_][a-z_.-]*:[a-z0-9_./-]+', Name.Function), ('#?[a-z0-9_\\.\\-]+\\/[a-z0-9_\\.\\-\\/]+', Name.Function)], 'whitespace': [('\\s+', Whitespace)], 'comments': [(f'^\\s*(#{_block_comment_prefix})', Comment.Multiline, ('comments.block', 'comments.block.emphasized')), ('#.*$', Comment.Single)], 'comments.block': [(f'^\\s*#{_block_comment_prefix}', Comment.Multiline, 'comments.block.emphasized'), ('^\\s*#', Comment.Multiline, 'comments.block.normal'), default('#pop')], 'comments.block.normal': [include('comments.block.special'), ('\\S+', Comment.Multiline), ('\\n', Text, '#pop'), include('whitespace')], 'comments.block.emphasized': [include('comments.block.special'), ('\\S+', String.Doc), ('\\n', Text, '#pop'), include('whitespace')], 'comments.block.special': [('@\\S+', Name.Decorator), include('resource-name'), ('[#%$][\\w.#%$]+', Name.Variable.Magic)], 'operators': [('[\\-~%^?!+*<>\\\\/|&=.]', Operator)], 'literals': [('\\.\\.', Literal), ('(true|false)', Keyword.Pseudo), ('[A-Za-z_]+', Name.Variable.Class), ('[0-7]b', Number.Byte), ('[+-]?\\d*\\.?\\d+([eE]?[+-]?\\d+)?[df]?\\b', Number.Float), ('[+-]?\\d+\\b', Number.Integer), ('"', String.Double, 'literals.string-double'), ("'", String.Single, 'literals.string-single')], 'literals.string-double': [('\\\\.', String.Escape), ('[^\\\\"\\n]+', String.Double), ('"', String.Double, '#pop')], 'literals.string-single': [('\\\\.', String.Escape), ("[^\\\\'\\n]+", String.Single), ("'", String.Single, '#pop')], 'selectors': [('@[a-z]', Name.Variable)], 'property': [('\\{', Punctuation, ('property.curly', 'property.key')), ('\\[', Punctuation, ('property.square', 'property.key'))], 'property.curly': [include('whitespace'), include('property'), ('\\}', Punctuation, '#pop')], 'property.square': [include('whitespace'), include('property'), ('\\]', Punctuation, '#pop'), (',', Punctuation)], 'property.key': [include('whitespace'), ('#?[a-z_][a-z_\\.\\-]*\\:[a-z0-9_\\.\\-/]+(?=\\s*\\=)', Name.Attribute, 'property.delimiter'), ('#?[a-z_][a-z0-9_\\.\\-/]+', Name.Attribute, 'property.delimiter'), ('[A-Za-z_\\-\\+]+', Name.Attribute, 'property.delimiter'), ('"', Name.Attribute, 'property.delimiter', 'literals.string-double'), ("'", Name.Attribute, 'property.delimiter', 'literals.string-single'), ('-?\\d+', Number.Integer, 'property.delimiter'), default('#pop')], 'property.key.string-double': [('\\\\.', String.Escape), ('[^\\\\"\\n]+', Name.Attribute), ('"', Name.Attribute, '#pop')], 'property.key.string-single': [('\\\\.', String.Escape), ("[^\\\\'\\n]+", Name.Attribute), ("'", Name.Attribute, '#pop')], 'property.delimiter': [include('whitespace'), ('[:=]!?', Punctuation, 'property.value'), (',', Punctuation), default('#pop')], 'property.value': [include('whitespace'), ('#?[a-z_][a-z_\\.\\-]*\\:[a-z0-9_\\.\\-/]+', Name.Tag), ('#?[a-z_][a-z0-9_\\.\\-/]+', Name.Tag), include('literals'), include('property'), default('#pop')]}
  }

  class MCSchemaLexer {
      + name = 'MCSchema'
      + url = 'https://learn.microsoft.com/en-us/minecraft/creator/reference/content/schemasreference/'
      + aliases = ['mcschema']
      + filenames = ['*.mcschema']
      + mimetypes = ['text/mcschema']
      + version_added = '2.14'
      + tokens = {'commentsandwhitespace': [('\\s+', Whitespace), ('//.*?$', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline)], 'slashstartsregex': [include('commentsandwhitespace'), ('/(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gimuysd]+\\b|\\B)', String.Regex, '#pop'), ('(?=/)', Text, ('#pop', 'badregex')), default('#pop')], 'badregex': [('\\n', Whitespace, '#pop')], 'singlestring': [('\\\\.', String.Escape), ("'", String.Single, '#pop'), ("[^\\\\']+", String.Single)], 'doublestring': [('\\\\.', String.Escape), ('"', String.Double, '#pop'), ('[^\\\\"]+', String.Double)], 'root': [('^(?=\\s|/|<!--)', Text, 'slashstartsregex'), include('commentsandwhitespace'), ('(?<=: )opt', Operator.Word), ('(?<=\\s)[\\w-]*(?=(\\s+"|\\n))', Keyword.Declaration), ('0[bB][01]+', Number.Bin), ('0[oO]?[0-7]+', Number.Oct), ('0[xX][0-9a-fA-F]+', Number.Hex), ('\\d+', Number.Integer), ('(\\.\\d+|\\d+\\.\\d*|\\d+)([eE][-+]?\\d+)?', Number.Float), ('\\.\\.\\.|=>', Punctuation), ('\\+\\+|--|~|\\?\\?=?|\\?|:|\\\\(?=\\n)|(<<|>>>?|==?|!=?|(?:\\*\\*|\\|\\||&&|[-<>+*%&|^/]))=?', Operator, 'slashstartsregex'), ('[{(\\[;,]', Punctuation, 'slashstartsregex'), ('[})\\].]', Punctuation), ("'", String.Single, 'singlestring'), ('"', String.Double, 'doublestring'), ('[\\w-]*?(?=:\\{?\\n)', String.Symbol), ('([\\w-]*?)(:)(\\d+)(?:(\\.)(\\d+)(?:(\\.)(\\d+)(?:(\\-)((?:[^\\W_]|-)*(?:\\.(?:[^\\W_]|-)*)*))?(?:(\\+)((?:[^\\W_]|-)+(?:\\.(?:[^\\W_]|-)+)*))?)?)?(?=:\\{?\\n)', bygroups(String.Symbol, Operator, Number.Integer, Operator, Number.Integer, Operator, Number.Integer, Operator, String, Operator, String)), ('.*\\n', Text)]}
  }

  class MIPSLexer {
      + name = 'MIPS'
      + aliases = ['mips']
      + version_added = ''
      + filenames = ['*.mips', '*.MIPS']
      + url = 'https://mips.com'
      + keywords = ['add', 'sub', 'subu', 'addi', 'subi', 'addu', 'addiu', 'mul', 'mult', 'multu', 'mulu', 'madd', 'maddu', 'msub', 'msubu', 'div', 'divu', 'and', 'or', 'nor', 'xor', 'andi', 'ori', 'xori', 'clo', 'clz', 'sll', 'srl', 'sllv', 'srlv', 'sra', 'srav', 'slt', 'sltu', 'slti', 'sltiu', 'mfhi', 'mthi', 'mflo', 'mtlo', 'movn', 'movz', 'movf', 'movt', 'j', 'jal', 'jalr', 'jr', 'bc1f', 'bc1t', 'beq', 'bgez', 'bgezal', 'bgtz', 'blez', 'bltzal', 'bltz', 'bne', 'lui', 'lb', 'lbu', 'lh', 'lhu', 'lw', 'lwcl', 'lwl', 'lwr', 'sb', 'sh', 'sw', 'swl', 'swr', 'll', 'sc', 'teq', 'teqi', 'tne', 'tneqi', 'tge', 'tgeu', 'tgei', 'tgeiu', 'tlt', 'tltu', 'tlti', 'tltiu', 'eret', 'break', 'bop', 'syscall', 'add.s', 'add.d', 'sub.s', 'sub.d', 'mul.s', 'mul.d', 'div.s', 'div.d', 'neg.d', 'neg.s', 'c.e.d', 'c.e.s', 'c.le.d', 'c.le.s', 'c.lt.s', 'c.lt.d', 'madd.s', 'madd.d', 'msub.s', 'msub.d', 'mov.d', 'move.s', 'movf.d', 'movf.s', 'movt.d', 'movt.s', 'movn.d', 'movn.s', 'movnzd', 'movz.s', 'movz.d', 'cvt.d.s', 'cvt.d.w', 'cvt.s.d', 'cvt.s.w', 'cvt.w.d', 'cvt.w.s', 'trunc.w.d', 'trunc.w.s', 'abs.s', 'abs.d', 'sqrt.s', 'sqrt.d', 'ceil.w.d', 'ceil.w.s', 'floor.w.d', 'floor.w.s', 'round.w.d', 'round.w.s']
      + pseudoinstructions = ['rem', 'remu', 'mulo', 'mulou', 'abs', 'neg', 'negu', 'not', 'rol', 'ror', 'b', 'beqz', 'bge', 'bgeu', 'bgt', 'bgtu', 'ble', 'bleu', 'blt', 'bltu', 'bnez', 'la', 'li', 'ld', 'ulh', 'ulhu', 'ulw', 'sd', 'ush', 'usw', 'move', 'sgt', 'sgtu', 'sge', 'sgeu', 'sle', 'sleu', 'sne', 'seq', 'l.d', 'l.s', 's.d', 's.s']
      + directives = ['.align', '.ascii', '.asciiz', '.byte', '.data', '.double', '.extern', '.float', '.globl', '.half', '.kdata', '.ktext', '.space', '.text', '.word']
      + deprecated = ['beql', 'bnel', 'bgtzl', 'bgezl', 'bltzl', 'blezl', 'bltzall', 'bgezall']
      + tokens = {'root': [('\\s+', Whitespace), ('#.*', Comment), ('"', String, 'string'), ('-?[0-9]+?', Keyword.Constant), ('\\w*:', Name.Function), (words(deprecated, suffix='\\b'), Keyword.Pseudo), (words(pseudoinstructions, suffix='\\b'), Name.Variable), (words(keywords, suffix='\\b'), Keyword), ('[slm][ftwd]c[0-9]([.]d)?', Keyword), ('\\$(f?[0-2][0-9]|f?3[01]|[ft]?[0-9]|[vk][01]|a[0-3]|s[0-7]|[gsf]p|ra|at|zero)', Keyword.Type), (words(directives, suffix='\\b'), Name.Entity), (':|,|;|\\{|\\}|=>|@|\\$|=', Name.Builtin), ('\\w+', Text), ('.', Text)], 'string': [('\\\\.', String.Escape), ('"', String, '#pop'), ('[^\\\\"]+', String)]}
  }

  class SMLLexer {
      + name = 'Standard ML'
      + aliases = ['sml']
      + filenames = ['*.sml', '*.sig', '*.fun']
      + mimetypes = ['text/x-standardml', 'application/x-standardml']
      + url = 'https://en.wikipedia.org/wiki/Standard_ML'
      + version_added = '1.5'
      + alphanumid_reserved = {'abstype', 'and', 'andalso', 'as', 'case', 'datatype', 'do', 'else', 'end', 'exception', 'fn', 'fun', 'handle', 'if', 'in', 'infix', 'infixr', 'let', 'local', 'nonfix', 'of', 'op', 'open', 'orelse', 'raise', 'rec', 'then', 'type', 'val', 'with', 'withtype', 'while', 'eqtype', 'functor', 'include', 'sharing', 'sig', 'signature', 'struct', 'structure', 'where'}
      + symbolicid_reserved = {':', '\\|', '=', '=>', '->', '#', ':>'}
      + nonid_reserved = {'(', ')', '[', ']', '{', '}', ',', ';', '...', '_'}
      + alphanumid_re = "[a-zA-Z][\\w']*"
      + symbolicid_re = '[!%&$#+\\-/:<=>?@\\\\~`^|*]+'
      + tokens = {'whitespace': [('\\s+', Text), ('\\(\\*', Comment.Multiline, 'comment')], 'delimiters': [('\\(|\\[|\\{', Punctuation, 'main'), ('\\)|\\]|\\}', Punctuation, '#pop'), ("\\b(let|if|local)\\b(?!\\')", Keyword.Reserved, ('main', 'main')), ("\\b(struct|sig|while)\\b(?!\\')", Keyword.Reserved, 'main'), ("\\b(do|else|end|in|then)\\b(?!\\')", Keyword.Reserved, '#pop')], 'core': [('({})'.format('|'.join((re.escape(z) for z in nonid_reserved))), Punctuation), ('#"', String.Char, 'char'), ('"', String.Double, 'string'), ('~?0x[0-9a-fA-F]+', Number.Hex), ('0wx[0-9a-fA-F]+', Number.Hex), ('0w\\d+', Number.Integer), ('~?\\d+\\.\\d+[eE]~?\\d+', Number.Float), ('~?\\d+\\.\\d+', Number.Float), ('~?\\d+[eE]~?\\d+', Number.Float), ('~?\\d+', Number.Integer), ('#\\s*[1-9][0-9]*', Name.Label), (f'#\\s*({alphanumid_re})', Name.Label), (f'#\\s+({symbolicid_re})', Name.Label), ("\\b(datatype|abstype)\\b(?!\\')", Keyword.Reserved, 'dname'), ("\\b(exception)\\b(?!\\')", Keyword.Reserved, 'ename'), ("\\b(functor|include|open|signature|structure)\\b(?!\\')", Keyword.Reserved, 'sname'), ("\\b(type|eqtype)\\b(?!\\')", Keyword.Reserved, 'tname'), ("\\'[\\w\\']*", Name.Decorator), (f'({alphanumid_re})(\\.)', long_id_callback, 'dotted'), (f'({alphanumid_re})', id_callback), (f'({symbolicid_re})', id_callback)], 'dotted': [(f'({alphanumid_re})(\\.)', long_id_callback), (f'({alphanumid_re})', end_id_callback, '#pop'), (f'({symbolicid_re})', end_id_callback, '#pop'), ('\\s+', Error), ('\\S+', Error)], 'root': [default('main')], 'main': [include('whitespace'), ("\\b(val|and)\\b(?!\\')", Keyword.Reserved, 'vname'), ("\\b(fun)\\b(?!\\')", Keyword.Reserved, ('#pop', 'main-fun', 'fname')), include('delimiters'), include('core'), ('\\S+', Error)], 'main-fun': [include('whitespace'), ('\\s', Text), ('\\(\\*', Comment.Multiline, 'comment'), ("\\b(fun|and)\\b(?!\\')", Keyword.Reserved, 'fname'), ("\\b(val)\\b(?!\\')", Keyword.Reserved, ('#pop', 'main', 'vname')), ('\\|', Punctuation, 'fname'), ("\\b(case|handle)\\b(?!\\')", Keyword.Reserved, ('#pop', 'main')), include('delimiters'), include('core'), ('\\S+', Error)], 'char': stringy(String.Char), 'string': stringy(String.Double), 'breakout': [("(?=\\b({})\\b(?!\\'))".format('|'.join(alphanumid_reserved)), Text, '#pop')], 'sname': [include('whitespace'), include('breakout'), (f'({alphanumid_re})', Name.Namespace), default('#pop')], 'fname': [include('whitespace'), ("\\'[\\w\\']*", Name.Decorator), ('\\(', Punctuation, 'tyvarseq'), (f'({alphanumid_re})', Name.Function, '#pop'), (f'({symbolicid_re})', Name.Function, '#pop'), default('#pop')], 'vname': [include('whitespace'), ("\\'[\\w\\']*", Name.Decorator), ('\\(', Punctuation, 'tyvarseq'), (f'({alphanumid_re})(\\s*)(=(?!{symbolicid_re}))', bygroups(Name.Variable, Text, Punctuation), '#pop'), (f'({symbolicid_re})(\\s*)(=(?!{symbolicid_re}))', bygroups(Name.Variable, Text, Punctuation), '#pop'), (f'({alphanumid_re})', Name.Variable, '#pop'), (f'({symbolicid_re})', Name.Variable, '#pop'), default('#pop')], 'tname': [include('whitespace'), include('breakout'), ("\\'[\\w\\']*", Name.Decorator), ('\\(', Punctuation, 'tyvarseq'), (f'=(?!{symbolicid_re})', Punctuation, ('#pop', 'typbind')), (f'({alphanumid_re})', Keyword.Type), (f'({symbolicid_re})', Keyword.Type), ('\\S+', Error, '#pop')], 'typbind': [include('whitespace'), ("\\b(and)\\b(?!\\')", Keyword.Reserved, ('#pop', 'tname')), include('breakout'), include('core'), ('\\S+', Error, '#pop')], 'dname': [include('whitespace'), include('breakout'), ("\\'[\\w\\']*", Name.Decorator), ('\\(', Punctuation, 'tyvarseq'), ('(=)(\\s*)(datatype)', bygroups(Punctuation, Text, Keyword.Reserved), '#pop'), (f'=(?!{symbolicid_re})', Punctuation, ('#pop', 'datbind', 'datcon')), (f'({alphanumid_re})', Keyword.Type), (f'({symbolicid_re})', Keyword.Type), ('\\S+', Error, '#pop')], 'datbind': [include('whitespace'), ("\\b(and)\\b(?!\\')", Keyword.Reserved, ('#pop', 'dname')), ("\\b(withtype)\\b(?!\\')", Keyword.Reserved, ('#pop', 'tname')), ("\\b(of)\\b(?!\\')", Keyword.Reserved), (f'(\\|)(\\s*)({alphanumid_re})', bygroups(Punctuation, Text, Name.Class)), (f'(\\|)(\\s+)({symbolicid_re})', bygroups(Punctuation, Text, Name.Class)), include('breakout'), include('core'), ('\\S+', Error)], 'ename': [include('whitespace'), (f'(and\\b)(\\s+)({alphanumid_re})', bygroups(Keyword.Reserved, Text, Name.Class)), (f'(and\\b)(\\s*)({symbolicid_re})', bygroups(Keyword.Reserved, Text, Name.Class)), ("\\b(of)\\b(?!\\')", Keyword.Reserved), (f'({alphanumid_re})|({symbolicid_re})', Name.Class), default('#pop')], 'datcon': [include('whitespace'), (f'({alphanumid_re})', Name.Class, '#pop'), (f'({symbolicid_re})', Name.Class, '#pop'), ('\\S+', Error, '#pop')], 'tyvarseq': [('\\s', Text), ('\\(\\*', Comment.Multiline, 'comment'), ("\\'[\\w\\']*", Name.Decorator), (alphanumid_re, Name), (',', Punctuation), ('\\)', Punctuation, '#pop'), (symbolicid_re, Name)], 'comment': [('[^(*)]', Comment.Multiline), ('\\(\\*', Comment.Multiline, '#push'), ('\\*\\)', Comment.Multiline, '#pop'), ('[(*)]', Comment.Multiline)]}
  --
      + stringy(whatkind)
      + long_id_callback(match)
      + end_id_callback(match)
      + id_callback(match)
  }

  class OcamlLexer {
      + name = 'OCaml'
      + url = 'https://ocaml.org/'
      + aliases = ['ocaml']
      + filenames = ['*.ml', '*.mli', '*.mll', '*.mly']
      + mimetypes = ['text/x-ocaml']
      + version_added = '0.7'
      + keywords = ('and', 'as', 'assert', 'begin', 'class', 'constraint', 'do', 'done', 'downto', 'else', 'end', 'exception', 'external', 'false', 'for', 'fun', 'function', 'functor', 'if', 'in', 'include', 'inherit', 'initializer', 'lazy', 'let', 'match', 'method', 'module', 'mutable', 'new', 'object', 'of', 'open', 'private', 'raise', 'rec', 'sig', 'struct', 'then', 'to', 'true', 'try', 'type', 'val', 'virtual', 'when', 'while', 'with')
      + keyopts = ('!=', '#', '&', '&&', '\\(', '\\)', '\\*', '\\+', ',', '-', '-\\.', '->', '\\.', '\\.\\.', ':', '::', ':=', ':>', ';', ';;', '<', '<-', '=', '>', '>]', '>\\}', '\\?', '\\?\\?', '\\[', '\\[<', '\\[>', '\\[\\|', ']', '_', '`', '\\{', '\\{<', '\\|', '\\|]', '\\}', '~')
      + operators = '[!$%&*+\\./:<=>?@^|~-]'
      + word_operators = ('asr', 'land', 'lor', 'lsl', 'lxor', 'mod', 'or')
      + prefix_syms = '[!?~]'
      + infix_syms = '[=<>@^|&+\\*/$%-]'
      + primitives = ('unit', 'int', 'float', 'bool', 'string', 'char', 'list', 'array')
      + tokens = {'escape-sequence': [('\\\\[\\\\"\\\'ntbr]', String.Escape), ('\\\\[0-9]{3}', String.Escape), ('\\\\x[0-9a-fA-F]{2}', String.Escape)], 'root': [('\\s+', Text), ('false|true|\\(\\)|\\[\\]', Name.Builtin.Pseudo), ("\\b([A-Z][\\w\\']*)(?=\\s*\\.)", Name.Namespace, 'dotted'), ("\\b([A-Z][\\w\\']*)", Name.Class), ('\\(\\*(?![)])', Comment, 'comment'), ('\\b({})\\b'.format('|'.join(keywords)), Keyword), ('({})'.format('|'.join(keyopts[::-1])), Operator), (f'({infix_syms}|{prefix_syms})?{operators}', Operator), ('\\b({})\\b'.format('|'.join(word_operators)), Operator.Word), ('\\b({})\\b'.format('|'.join(primitives)), Keyword.Type), ("[^\\W\\d][\\w']*", Name), ('-?\\d[\\d_]*(.[\\d_]*)?([eE][+\\-]?\\d[\\d_]*)', Number.Float), ('0[xX][\\da-fA-F][\\da-fA-F_]*', Number.Hex), ('0[oO][0-7][0-7_]*', Number.Oct), ('0[bB][01][01_]*', Number.Bin), ('\\d[\\d_]*', Number.Integer), ('\'(?:(\\\\[\\\\\\"\'ntbr ])|(\\\\[0-9]{3})|(\\\\x[0-9a-fA-F]{2}))\'', String.Char), ("'.'", String.Char), ("'", Keyword), ('"', String.Double, 'string'), ("[~?][a-z][\\w\\']*:", Name.Variable)], 'comment': [('[^(*)]+', Comment), ('\\(\\*', Comment, '#push'), ('\\*\\)', Comment, '#pop'), ('[(*)]', Comment)], 'string': [('[^\\\\"]+', String.Double), include('escape-sequence'), ('\\\\\\n', String.Double), ('"', String.Double, '#pop')], 'dotted': [('\\s+', Text), ('\\.', Punctuation), ("[A-Z][\\w\\']*(?=\\s*\\.)", Name.Namespace), ("[A-Z][\\w\\']*", Name.Class, '#pop'), ("[a-z_][\\w\\']*", Name, '#pop'), default('#pop')]}
  }

  class OpaLexer {
      + name = 'Opa'
      + aliases = ['opa']
      + filenames = ['*.opa']
      + mimetypes = ['text/x-opa']
      + url = 'http://opalang.org'
      + version_added = '1.5'
      + keywords = ('and', 'as', 'begin', 'case', 'client', 'css', 'database', 'db', 'do', 'else', 'end', 'external', 'forall', 'function', 'if', 'import', 'match', 'module', 'or', 'package', 'parser', 'rec', 'server', 'then', 'type', 'val', 'with', 'xml_parser')
      + ident_re = '(([a-zA-Z_]\\w*)|(`[^`]*`))'
      + op_re = '[.=\\-<>,@~%/+?*&^!]'
      + punc_re = '[()\\[\\],;|]'
      + tokens = {'escape-sequence': [('\\\\[\\\\"\\\'ntr}]', String.Escape), ('\\\\[0-9]{3}', String.Escape), ('\\\\x[0-9a-fA-F]{2}', String.Escape)], 'comments': [('/\\*', Comment, 'nested-comment'), ('//.*?$', Comment)], 'comments-and-spaces': [include('comments'), ('\\s+', Text)], 'root': [include('comments-and-spaces'), (words(keywords, prefix='\\b', suffix='\\b'), Keyword), ('@' + ident_re + '\\b', Name.Builtin.Pseudo), ('-?.[\\d]+([eE][+\\-]?\\d+)', Number.Float), ('-?\\d+.\\d*([eE][+\\-]?\\d+)', Number.Float), ('-?\\d+[eE][+\\-]?\\d+', Number.Float), ('0[xX][\\da-fA-F]+', Number.Hex), ('0[oO][0-7]+', Number.Oct), ('0[bB][01]+', Number.Bin), ('\\d+', Number.Integer), ('#[\\da-fA-F]{3,6}', Number.Integer), ('"', String.Double, 'string'), ('\'(?:(\\\\[\\\\\\"\'ntbr ])|(\\\\[0-9]{3})|(\\\\x[0-9a-fA-F]{2})|.)\'', String.Char), ('\\{', Operator, '#push'), ('\\}', Operator, '#pop'), ('<(?=[a-zA-Z>])', String.Single, 'html-open-tag'), ('[@?!]?(/\\w+)+(\\[_\\])?', Name.Variable), ('<-(?!' + op_re + ')', Name.Variable), ('\\b([A-Z]\\w*)(?=\\.)', Name.Namespace), ('=(?!' + op_re + ')', Keyword), (f'({op_re})+', Operator), (f'({punc_re})+', Operator), (':', Operator, 'type'), ("'" + ident_re, Keyword.Type), ('#' + ident_re, String.Single), ('#(?=\\{)', String.Single), (ident_re, Text)], 'type': [include('comments-and-spaces'), ('->', Keyword.Type), default(('#pop', 'type-lhs-1', 'type-with-slash'))], 'type-1': [include('comments-and-spaces'), ('\\(', Keyword.Type, ('#pop', 'type-tuple')), ('~?\\{', Keyword.Type, ('#pop', 'type-record')), (ident_re + '\\(', Keyword.Type, ('#pop', 'type-tuple')), (ident_re, Keyword.Type, '#pop'), ("'" + ident_re, Keyword.Type), default('#pop')], 'type-with-slash': [include('comments-and-spaces'), default(('#pop', 'slash-type-1', 'type-1'))], 'slash-type-1': [include('comments-and-spaces'), ('/', Keyword.Type, ('#pop', 'type-1')), default('#pop')], 'type-lhs-1': [include('comments-and-spaces'), ('->', Keyword.Type, ('#pop', 'type')), ('(?=,)', Keyword.Type, ('#pop', 'type-arrow')), default('#pop')], 'type-arrow': [include('comments-and-spaces'), (',(?=[^:]*?->)', Keyword.Type, 'type-with-slash'), ('->', Keyword.Type, ('#pop', 'type')), default('#pop')], 'type-tuple': [include('comments-and-spaces'), ('[^()/*]+', Keyword.Type), ('[/*]', Keyword.Type), ('\\(', Keyword.Type, '#push'), ('\\)', Keyword.Type, '#pop')], 'type-record': [include('comments-and-spaces'), ('[^{}/*]+', Keyword.Type), ('[/*]', Keyword.Type), ('\\{', Keyword.Type, '#push'), ('\\}', Keyword.Type, '#pop')], 'nested-comment': [('[^/*]+', Comment), ('/\\*', Comment, '#push'), ('\\*/', Comment, '#pop'), ('[/*]', Comment)], 'string': [('[^\\\\"{]+', String.Double), ('"', String.Double, '#pop'), ('\\{', Operator, 'root'), include('escape-sequence')], 'single-string': [("[^\\\\\\'{]+", String.Double), ("\\'", String.Double, '#pop'), ('\\{', Operator, 'root'), include('escape-sequence')], 'html-open-tag': [('[\\w\\-:]+', String.Single, ('#pop', 'html-attr')), ('>', String.Single, ('#pop', 'html-content'))], 'html-end-tag': [('[\\w\\-:]*>', String.Single, '#pop')], 'html-attr': [('\\s+', Text), ('[\\w\\-:]+=', String.Single, 'html-attr-value'), ('/>', String.Single, '#pop'), ('>', String.Single, ('#pop', 'html-content'))], 'html-attr-value': [("'", String.Single, ('#pop', 'single-string')), ('"', String.Single, ('#pop', 'string')), ('#' + ident_re, String.Single, '#pop'), ('#(?=\\{)', String.Single, ('#pop', 'root')), ('[^"\\\'{`=<>]+', String.Single, '#pop'), ('\\{', Operator, ('#pop', 'root'))], 'html-content': [('<!--', Comment, 'html-comment'), ('</', String.Single, ('#pop', 'html-end-tag')), ('<', String.Single, 'html-open-tag'), ('\\{', Operator, 'root'), ('[^<{]+', String.Single)], 'html-comment': [('-->', Comment, '#pop'), ('[^\\-]+|-', Comment)]}
  }

  class ReasonLexer {
      + name = 'ReasonML'
      + url = 'https://reasonml.github.io/'
      + aliases = ['reasonml', 'reason']
      + filenames = ['*.re', '*.rei']
      + mimetypes = ['text/x-reasonml']
      + version_added = '2.6'
      + keywords = ('as', 'assert', 'begin', 'class', 'constraint', 'do', 'done', 'downto', 'else', 'end', 'exception', 'external', 'false', 'for', 'fun', 'esfun', 'function', 'functor', 'if', 'in', 'include', 'inherit', 'initializer', 'lazy', 'let', 'switch', 'module', 'pub', 'mutable', 'new', 'nonrec', 'object', 'of', 'open', 'pri', 'rec', 'sig', 'struct', 'then', 'to', 'true', 'try', 'type', 'val', 'virtual', 'when', 'while', 'with')
      + keyopts = ('!=', '#', '&', '&&', '\\(', '\\)', '\\*', '\\+', ',', '-', '-\\.', '=>', '\\.', '\\.\\.', '\\.\\.\\.', ':', '::', ':=', ':>', ';', ';;', '<', '<-', '=', '>', '>]', '>\\}', '\\?', '\\?\\?', '\\[', '\\[<', '\\[>', '\\[\\|', ']', '_', '`', '\\{', '\\{<', '\\|', '\\|\\|', '\\|]', '\\}', '~')
      + operators = '[!$%&*+\\./:<=>?@^|~-]'
      + word_operators = ('and', 'asr', 'land', 'lor', 'lsl', 'lsr', 'lxor', 'mod', 'or')
      + prefix_syms = '[!?~]'
      + infix_syms = '[=<>@^|&+\\*/$%-]'
      + primitives = ('unit', 'int', 'float', 'bool', 'string', 'char', 'list', 'array')
      + tokens = {'escape-sequence': [('\\\\[\\\\"\\\'ntbr]', String.Escape), ('\\\\[0-9]{3}', String.Escape), ('\\\\x[0-9a-fA-F]{2}', String.Escape)], 'root': [('\\s+', Text), ('false|true|\\(\\)|\\[\\]', Name.Builtin.Pseudo), ("\\b([A-Z][\\w\\']*)(?=\\s*\\.)", Name.Namespace, 'dotted'), ("\\b([A-Z][\\w\\']*)", Name.Class), ('//.*?\\n', Comment.Single), ('\\/\\*(?!/)', Comment.Multiline, 'comment'), ('\\b({})\\b'.format('|'.join(keywords)), Keyword), ('({})'.format('|'.join(keyopts[::-1])), Operator.Word), (f'({infix_syms}|{prefix_syms})?{operators}', Operator), ('\\b({})\\b'.format('|'.join(word_operators)), Operator.Word), ('\\b({})\\b'.format('|'.join(primitives)), Keyword.Type), ("[^\\W\\d][\\w']*", Name), ('-?\\d[\\d_]*(.[\\d_]*)?([eE][+\\-]?\\d[\\d_]*)', Number.Float), ('0[xX][\\da-fA-F][\\da-fA-F_]*', Number.Hex), ('0[oO][0-7][0-7_]*', Number.Oct), ('0[bB][01][01_]*', Number.Bin), ('\\d[\\d_]*', Number.Integer), ('\'(?:(\\\\[\\\\\\"\'ntbr ])|(\\\\[0-9]{3})|(\\\\x[0-9a-fA-F]{2}))\'', String.Char), ("'.'", String.Char), ("'", Keyword), ('"', String.Double, 'string'), ("[~?][a-z][\\w\\']*:", Name.Variable)], 'comment': [('[^/*]+', Comment.Multiline), ('\\/\\*', Comment.Multiline, '#push'), ('\\*\\/', Comment.Multiline, '#pop'), ('\\*', Comment.Multiline)], 'string': [('[^\\\\"]+', String.Double), include('escape-sequence'), ('\\\\\\n', String.Double), ('"', String.Double, '#pop')], 'dotted': [('\\s+', Text), ('\\.', Punctuation), ("[A-Z][\\w\\']*(?=\\s*\\.)", Name.Namespace), ("[A-Z][\\w\\']*", Name.Class, '#pop'), ("[a-z_][\\w\\']*", Name, '#pop'), default('#pop')]}
  }

  class FStarLexer {
      + name = 'FStar'
      + url = 'https://www.fstar-lang.org/'
      + aliases = ['fstar']
      + filenames = ['*.fst', '*.fsti']
      + mimetypes = ['text/x-fstar']
      + version_added = '2.7'
      + keywords = ('abstract', 'attributes', 'noeq', 'unopteq', 'andbegin', 'by', 'default', 'effect', 'else', 'end', 'ensures', 'exception', 'exists', 'false', 'forall', 'fun', 'function', 'if', 'in', 'include', 'inline', 'inline_for_extraction', 'irreducible', 'logic', 'match', 'module', 'mutable', 'new', 'new_effect', 'noextract', 'of', 'open', 'opaque', 'private', 'range_of', 'reifiable', 'reify', 'reflectable', 'requires', 'set_range_of', 'sub_effect', 'synth', 'then', 'total', 'true', 'try', 'type', 'unfold', 'unfoldable', 'val', 'when', 'with', 'not')
      + decl_keywords = ('let', 'rec')
      + assume_keywords = ('assume', 'admit', 'assert', 'calc')
      + keyopts = ('~', '-', '/\\\\', '\\\\/', '<:', '<@', '\\(\\|', '\\|\\)', '#', 'u#', '&', '\\(', '\\)', '\\(\\)', ',', '~>', '->', '<-', '<--', '<==>', '==>', '\\.', '\\?', '\\?\\.', '\\.\\[', '\\.\\(', '\\.\\(\\|', '\\.\\[\\|', '\\{:pattern', ':', '::', ':=', ';', ';;', '=', '%\\[', '!\\{', '\\[', '\\[@', '\\[\\|', '\\|>', '\\]', '\\|\\]', '\\{', '\\|', '\\}', '\\$')
      + operators = '[!$%&*+\\./:<=>?@^|~-]'
      + prefix_syms = '[!?~]'
      + infix_syms = '[=<>@^|&+\\*/$%-]'
      + primitives = ('unit', 'int', 'float', 'bool', 'string', 'char', 'list', 'array')
      + tokens = {'escape-sequence': [('\\\\[\\\\"\\\'ntbr]', String.Escape), ('\\\\[0-9]{3}', String.Escape), ('\\\\x[0-9a-fA-F]{2}', String.Escape)], 'root': [('\\s+', Text), ('false|true|False|True|\\(\\)|\\[\\]', Name.Builtin.Pseudo), ("\\b([A-Z][\\w\\']*)(?=\\s*\\.)", Name.Namespace, 'dotted'), ("\\b([A-Z][\\w\\']*)", Name.Class), ('\\(\\*(?![)])', Comment, 'comment'), ('\\/\\/.+$', Comment), ('\\b({})\\b'.format('|'.join(keywords)), Keyword), ('\\b({})\\b'.format('|'.join(assume_keywords)), Name.Exception), ('\\b({})\\b'.format('|'.join(decl_keywords)), Keyword.Declaration), ('({})'.format('|'.join(keyopts[::-1])), Operator), (f'({infix_syms}|{prefix_syms})?{operators}', Operator), ('\\b({})\\b'.format('|'.join(primitives)), Keyword.Type), ("[^\\W\\d][\\w']*", Name), ('-?\\d[\\d_]*(.[\\d_]*)?([eE][+\\-]?\\d[\\d_]*)', Number.Float), ('0[xX][\\da-fA-F][\\da-fA-F_]*', Number.Hex), ('0[oO][0-7][0-7_]*', Number.Oct), ('0[bB][01][01_]*', Number.Bin), ('\\d[\\d_]*', Number.Integer), ('\'(?:(\\\\[\\\\\\"\'ntbr ])|(\\\\[0-9]{3})|(\\\\x[0-9a-fA-F]{2}))\'', String.Char), ("'.'", String.Char), ("'", Keyword), ("\\`([\\w\\'.]+)\\`", Operator.Word), ('\\`', Keyword), ('"', String.Double, 'string'), ("[~?][a-z][\\w\\']*:", Name.Variable)], 'comment': [('[^(*)]+', Comment), ('\\(\\*', Comment, '#push'), ('\\*\\)', Comment, '#pop'), ('[(*)]', Comment)], 'string': [('[^\\\\"]+', String.Double), include('escape-sequence'), ('\\\\\\n', String.Double), ('"', String.Double, '#pop')], 'dotted': [('\\s+', Text), ('\\.', Punctuation), ("[A-Z][\\w\\']*(?=\\s*\\.)", Name.Namespace), ("[A-Z][\\w\\']*", Name.Class, '#pop'), ("[a-z_][\\w\\']*", Name, '#pop'), default('#pop')]}
  }

  class ModelicaLexer {
      + name = 'Modelica'
      + url = 'http://www.modelica.org/'
      + aliases = ['modelica']
      + filenames = ['*.mo']
      + mimetypes = ['text/x-modelica']
      + version_added = '1.1'
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'whitespace': [('[\\s\\ufeff]+', Text), ('//[^\\n]*\\n?', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline)], 'root': [include('whitespace'), ('"', String.Double, 'string'), ('[()\\[\\]{},;]+', Punctuation), ('\\.?[*^/+-]|\\.|<>|[<>:=]=?', Operator), ('\\d+(\\.?\\d*[eE][-+]?\\d+|\\.\\d*)', Number.Float), ('\\d+', Number.Integer), ('(abs|acos|actualStream|array|asin|assert|AssertionLevel|atan|atan2|backSample|Boolean|cardinality|cat|ceil|change|Clock|Connections|cos|cosh|cross|delay|diagonal|div|edge|exp|ExternalObject|fill|floor|getInstanceName|hold|homotopy|identity|inStream|integer|Integer|interval|inverse|isPresent|linspace|log|log10|matrix|max|min|mod|ndims|noClock|noEvent|ones|outerProduct|pre|previous|product|Real|reinit|rem|rooted|sample|scalar|semiLinear|shiftSample|sign|sin|sinh|size|skew|smooth|spatialDistribution|sqrt|StateSelect|String|subSample|sum|superSample|symmetric|tan|tanh|terminal|terminate|time|transpose|vector|zeros)\\b', Name.Builtin), ('(algorithm|annotation|break|connect|constant|constrainedby|der|discrete|each|else|elseif|elsewhen|encapsulated|enumeration|equation|exit|expandable|extends|external|firstTick|final|flow|for|if|import|impure|in|initial|inner|input|interval|loop|nondiscrete|outer|output|parameter|partial|protected|public|pure|redeclare|replaceable|return|stream|then|when|while)\\b', Keyword.Reserved), ('(and|not|or)\\b', Operator.Word), ('(block|class|connector|end|function|model|operator|package|record|type)\\b', Keyword.Reserved, 'class'), ('(false|true)\\b', Keyword.Constant), ('within\\b', Keyword.Reserved, 'package-prefix'), (_name, Name)], 'class': [include('whitespace'), ('(function|record)\\b', Keyword.Reserved), ('(if|for|when|while)\\b', Keyword.Reserved, '#pop'), (_name, Name.Class, '#pop'), default('#pop')], 'package-prefix': [include('whitespace'), (_name, Name.Namespace, '#pop'), default('#pop')], 'string': [('"', String.Double, '#pop'), ('\\\\[\\\'"?\\\\abfnrtv]', String.Escape), ('(?i)<\\s*html\\s*>([^\\\\"]|\\\\.)+?(<\\s*/\\s*html\\s*>|(?="))', using(HtmlLexer)), ('<|\\\\?[^"\\\\<]+', String.Double)]}
  }

  class BugsLexer {
      + name = 'BUGS'
      + aliases = ['bugs', 'winbugs', 'openbugs']
      + filenames = ['*.bug']
      + url = 'https://www.mrc-bsu.cam.ac.uk/software/bugs/openbugs'
      + version_added = '1.6'
      + tokens = {'whitespace': [('\\s+', Text)], 'comments': [('#.*$', Comment.Single)], 'root': [include('comments'), include('whitespace'), ('(model)(\\s+)(\\{)', bygroups(Keyword.Namespace, Text, Punctuation)), ('(for|in)(?![\\w.])', Keyword.Reserved), ('({})(?=\\s*\\()'.format('|'.join(_FUNCTIONS + _DISTRIBUTIONS)), Name.Builtin), ('[A-Za-z][\\w.]*', Name), ('[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?', Number), ('\\[|\\]|\\(|\\)|:|,|;', Punctuation), ('<-|~', Operator), ('\\+|-|\\*|/', Operator), ('[{}]', Punctuation)]}
  --
      + analyse_text(text)
  }

  class JagsLexer {
      + name = 'JAGS'
      + aliases = ['jags']
      + filenames = ['*.jag', '*.bug']
      + url = 'https://mcmc-jags.sourceforge.io'
      + version_added = '1.6'
      + tokens = {'whitespace': [('\\s+', Text)], 'names': [('[a-zA-Z][\\w.]*\\b', Name)], 'comments': [('(?s)/\\*.*?\\*/', Comment.Multiline), ('#.*$', Comment.Single)], 'root': [include('comments'), include('whitespace'), ('(model|data)(\\s+)(\\{)', bygroups(Keyword.Namespace, Text, Punctuation)), ('var(?![\\w.])', Keyword.Declaration), ('(for|in)(?![\\w.])', Keyword.Reserved), ('({})(?=\\s*\\()'.format('|'.join(_FUNCTIONS + _DISTRIBUTIONS + _OTHER_DISTRIBUTIONS)), Name.Builtin), include('names'), ('[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?', Number), ('\\[|\\]|\\(|\\)|:|,|;', Punctuation), ('<-|~', Operator), ('\\+|-|\\*|\\/|\\|\\|[&]{2}|[<>=]=?|\\^|%.*?%', Operator), ('[{}]', Punctuation)]}
  --
      + analyse_text(text)
  }

  class StanLexer {
      + name = 'Stan'
      + aliases = ['stan']
      + filenames = ['*.stan']
      + url = 'https://mc-stan.org'
      + version_added = '1.6'
      + tokens = {'whitespace': [('\\s+', Text)], 'comments': [('(?s)/\\*.*?\\*/', Comment.Multiline), ('(//|#).*$', Comment.Single)], 'root': [('"[^"]*"', String), include('comments'), include('whitespace'), ('({})(\\s*)(\\{{)'.format('|'.join(('functions', 'data', 'transformed\\s+?data', 'parameters', 'transformed\\s+parameters', 'model', 'generated\\s+quantities'))), bygroups(Keyword.Namespace, Text, Punctuation)), ('target\\s*\\+=', Keyword), ('({})\\b'.format('|'.join(_stan_builtins.KEYWORDS)), Keyword), ('T(?=\\s*\\[)', Keyword), ('({})\\b'.format('|'.join(_stan_builtins.TYPES)), Keyword.Type), ('(<)(\\s*)(upper|lower|offset|multiplier)(\\s*)(=)', bygroups(Operator, Whitespace, Keyword, Whitespace, Punctuation)), ('(,)(\\s*)(upper)(\\s*)(=)', bygroups(Punctuation, Whitespace, Keyword, Whitespace, Punctuation)), ('[;,\\[\\]()]', Punctuation), ('({})(?=\\s*\\()'.format('|'.join(_stan_builtins.FUNCTIONS)), Name.Builtin), ('(~)(\\s*)({})(?=\\s*\\()'.format('|'.join(_stan_builtins.DISTRIBUTIONS)), bygroups(Operator, Whitespace, Name.Builtin)), ('[A-Za-z]\\w*__\\b', Name.Builtin.Pseudo), ('({})\\b'.format('|'.join(_stan_builtins.RESERVED)), Keyword.Reserved), ('[A-Za-z]\\w*(?=\\s*\\()]', Name.Function), ('[0-9]+(\\.[0-9]*)?([eE][+-]?[0-9]+)?i', Number.Float), ('\\.[0-9]+([eE][+-]?[0-9]+)?i', Number.Float), ('[0-9]+i', Number.Float), ('[0-9]+(\\.[0-9]*)?([eE][+-]?[0-9]+)?', Number.Float), ('\\.[0-9]+([eE][+-]?[0-9]+)?', Number.Float), ('[0-9]+', Number.Integer), ('[A-Za-z]\\w*\\b', Name), ('<-|(?:\\+|-|\\.?/|\\.?\\*|=)?=|~', Operator), ("\\+|-|\\.?\\*|\\.?/|\\\\|'|\\.?\\^|!=?|<=?|>=?|\\|\\||&&|%|\\?|:|%/%|!", Operator), ('[{}]', Punctuation), ('\\|', Punctuation)]}
  --
      + analyse_text(text)
  }

  class Modula2Lexer {
      + name = 'Modula-2'
      + url = 'http://www.modula2.org/'
      + aliases = ['modula2', 'm2']
      + filenames = ['*.def', '*.mod']
      + mimetypes = ['text/x-modula2']
      + version_added = '1.3'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'whitespace': [('\\n+', Text), ('\\s+', Text)], 'dialecttags': [('\\(\\*!m2pim\\*\\)', Comment.Special), ('\\(\\*!m2iso\\*\\)', Comment.Special), ('\\(\\*!m2r10\\*\\)', Comment.Special), ('\\(\\*!objm2\\*\\)', Comment.Special), ('\\(\\*!m2iso\\+aglet\\*\\)', Comment.Special), ('\\(\\*!m2pim\\+gm2\\*\\)', Comment.Special), ('\\(\\*!m2iso\\+p1\\*\\)', Comment.Special), ('\\(\\*!m2iso\\+xds\\*\\)', Comment.Special)], 'identifiers': [('([a-zA-Z_$][\\w$]*)', Name)], 'prefixed_number_literals': [("0b[01]+(\\'[01]+)*", Number.Bin), ("0[ux][0-9A-F]+(\\'[0-9A-F]+)*", Number.Hex)], 'plain_number_literals': [("[0-9]+(\\'[0-9]+)*\\.[0-9]+(\\'[0-9]+)*[eE][+-]?[0-9]+(\\'[0-9]+)*", Number.Float), ("[0-9]+(\\'[0-9]+)*\\.[0-9]+(\\'[0-9]+)*", Number.Float), ("[0-9]+(\\'[0-9]+)*", Number.Integer)], 'suffixed_number_literals': [('[0-7]+B', Number.Oct), ('[0-7]+C', Number.Oct), ('[0-9A-F]+H', Number.Hex)], 'string_literals': [('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single)], 'digraph_operators': [('\\*\\.', Operator), ('\\+>', Operator), ('<>', Operator), ('<=', Operator), ('>=', Operator), ('==', Operator), ('::', Operator), (':=', Operator), ('\\+\\+', Operator), ('--', Operator)], 'unigraph_operators': [('[+-]', Operator), ('[*/]', Operator), ('\\\\', Operator), ('[=#<>]', Operator), ('\\^', Operator), ('@', Operator), ('&', Operator), ('~', Operator), ('`', Operator)], 'digraph_punctuation': [('\\.\\.', Punctuation), ('<<', Punctuation), ('>>', Punctuation), ('->', Punctuation), ('\\|#', Punctuation), ('##', Punctuation), ('\\|\\*', Punctuation)], 'unigraph_punctuation': [('[()\\[\\]{},.:;|]', Punctuation), ('!', Punctuation), ('\\?', Punctuation)], 'comments': [('^//.*?\\n', Comment.Single), ('\\(\\*([^$].*?)\\*\\)', Comment.Multiline), ('/\\*(.*?)\\*/', Comment.Multiline)], 'pragmas': [('<\\*.*?\\*>', Comment.Preproc), ('\\(\\*\\$.*?\\*\\)', Comment.Preproc)], 'root': [include('whitespace'), include('dialecttags'), include('pragmas'), include('comments'), include('identifiers'), include('suffixed_number_literals'), include('prefixed_number_literals'), include('plain_number_literals'), include('string_literals'), include('digraph_punctuation'), include('digraph_operators'), include('unigraph_punctuation'), include('unigraph_operators')]}
      + common_reserved_words = ('AND', 'ARRAY', 'BEGIN', 'BY', 'CASE', 'CONST', 'DEFINITION', 'DIV', 'DO', 'ELSE', 'ELSIF', 'END', 'EXIT', 'FOR', 'FROM', 'IF', 'IMPLEMENTATION', 'IMPORT', 'IN', 'LOOP', 'MOD', 'MODULE', 'NOT', 'OF', 'OR', 'POINTER', 'PROCEDURE', 'RECORD', 'REPEAT', 'RETURN', 'SET', 'THEN', 'TO', 'TYPE', 'UNTIL', 'VAR', 'WHILE')
      + common_builtins = ('ABS', 'BOOLEAN', 'CARDINAL', 'CHAR', 'CHR', 'FALSE', 'INTEGER', 'LONGINT', 'LONGREAL', 'MAX', 'MIN', 'NIL', 'ODD', 'ORD', 'REAL', 'TRUE')
      + common_pseudo_builtins = ('ADDRESS', 'BYTE', 'WORD', 'ADR')
      + pim_lexemes_to_reject = ('!', '`', '@', '$', '%', '?', '\\', '==', '++', '--', '::', '*.', '+>', '->', '<<', '>>', '|#', '##')
      + pim_additional_reserved_words = ('EXPORT', 'QUALIFIED', 'WITH')
      + pim_additional_builtins = ('BITSET', 'CAP', 'DEC', 'DISPOSE', 'EXCL', 'FLOAT', 'HALT', 'HIGH', 'INC', 'INCL', 'NEW', 'NIL', 'PROC', 'SIZE', 'TRUNC', 'VAL')
      + pim_additional_pseudo_builtins = ('SYSTEM', 'PROCESS', 'TSIZE', 'NEWPROCESS', 'TRANSFER')
      + iso_lexemes_to_reject = ('`', '$', '%', '?', '\\', '==', '++', '--', '::', '*.', '+>', '->', '<<', '>>', '|#', '##')
      + iso_additional_reserved_words = ('EXCEPT', 'EXPORT', 'FINALLY', 'FORWARD', 'PACKEDSET', 'QUALIFIED', 'REM', 'RETRY', 'WITH', 'ABSTRACT', 'AS', 'CLASS', 'GUARD', 'INHERIT', 'OVERRIDE', 'READONLY', 'REVEAL', 'TRACED', 'UNSAFEGUARDED')
      + iso_additional_builtins = ('BITSET', 'CAP', 'CMPLX', 'COMPLEX', 'DEC', 'DISPOSE', 'EXCL', 'FLOAT', 'HALT', 'HIGH', 'IM', 'INC', 'INCL', 'INT', 'INTERRUPTIBLE', 'LENGTH', 'LFLOAT', 'LONGCOMPLEX', 'NEW', 'PROC', 'PROTECTION', 'RE', 'SIZE', 'TRUNC', 'UNINTERRUBTIBLE', 'VAL', 'CREATE', 'DESTROY', 'EMPTY', 'ISMEMBER', 'SELF')
      + iso_additional_pseudo_builtins = ('SYSTEM', 'BITSPERLOC', 'LOCSPERBYTE', 'LOCSPERWORD', 'LOC', 'ADDADR', 'SUBADR', 'DIFADR', 'MAKEADR', 'ADR', 'ROTATE', 'SHIFT', 'CAST', 'TSIZE', 'COROUTINES', 'ATTACH', 'COROUTINE', 'CURRENT', 'DETACH', 'HANDLER', 'INTERRUPTSOURCE', 'IOTRANSFER', 'IsATTACHED', 'LISTEN', 'NEWCOROUTINE', 'PROT', 'TRANSFER', 'EXCEPTIONS', 'AllocateSource', 'CurrentNumber', 'ExceptionNumber', 'ExceptionSource', 'GetMessage', 'IsCurrentSource', 'IsExceptionalExecution', 'RAISE', 'TERMINATION', 'IsTerminating', 'HasHalted', 'M2EXCEPTION', 'M2Exceptions', 'M2Exception', 'IsM2Exception', 'indexException', 'rangeException', 'caseSelectException', 'invalidLocation', 'functionException', 'wholeValueException', 'wholeDivException', 'realValueException', 'realDivException', 'complexValueException', 'complexDivException', 'protException', 'sysException', 'coException', 'exException')
      + m2r10_lexemes_to_reject = ('!', '`', '@', '$', '%', '&', '<>')
      + m2r10_additional_reserved_words = ('ALIAS', 'ARGLIST', 'BLUEPRINT', 'COPY', 'GENLIB', 'INDETERMINATE', 'NEW', 'NONE', 'OPAQUE', 'REFERENTIAL', 'RELEASE', 'RETAIN', 'ASM', 'REG')
      + m2r10_additional_builtins = ('CARDINAL', 'COUNT', 'EMPTY', 'EXISTS', 'INSERT', 'LENGTH', 'LONGCARD', 'OCTET', 'PTR', 'PRED', 'READ', 'READNEW', 'REMOVE', 'RETRIEVE', 'SORT', 'STORE', 'SUBSET', 'SUCC', 'TLIMIT', 'TMAX', 'TMIN', 'TRUE', 'TSIZE', 'UNICHAR', 'WRITE', 'WRITEF')
      + m2r10_additional_pseudo_builtins = ('TPROPERTIES', 'PROPERTY', 'LITERAL', 'TPROPERTY', 'TLITERAL', 'TBUILTIN', 'TDYN', 'TREFC', 'TNIL', 'TBASE', 'TPRECISION', 'TMAXEXP', 'TMINEXP', 'CONVERSION', 'TSXFSIZE', 'SXF', 'VAL', 'UNSAFE', 'CAST', 'INTRINSIC', 'AVAIL', 'ADD', 'SUB', 'ADDC', 'SUBC', 'FETCHADD', 'FETCHSUB', 'SHL', 'SHR', 'ASHR', 'ROTL', 'ROTR', 'ROTLC', 'ROTRC', 'BWNOT', 'BWAND', 'BWOR', 'BWXOR', 'BWNAND', 'BWNOR', 'SETBIT', 'TESTBIT', 'LSBIT', 'MSBIT', 'CSBITS', 'BAIL', 'HALT', 'TODO', 'FFI', 'ADDR', 'VARGLIST', 'VARGC', 'ATOMIC', 'INTRINSIC', 'AVAIL', 'SWAP', 'CAS', 'INC', 'DEC', 'BWAND', 'BWNAND', 'BWOR', 'BWXOR', 'COMPILER', 'DEBUG', 'MODNAME', 'PROCNAME', 'LINENUM', 'DEFAULT', 'HASH', 'ASSEMBLER', 'REGISTER', 'SETREG', 'GETREG', 'CODE')
      + objm2_lexemes_to_reject = ('!', '$', '%', '&', '<>')
      + objm2_additional_reserved_words = ('BYCOPY', 'BYREF', 'CLASS', 'CONTINUE', 'CRITICAL', 'INOUT', 'METHOD', 'ON', 'OPTIONAL', 'OUT', 'PRIVATE', 'PROTECTED', 'PROTOCOL', 'PUBLIC', 'SUPER', 'TRY')
      + objm2_additional_builtins = ('OBJECT', 'NO', 'YES')
      + objm2_additional_pseudo_builtins = ()
      + aglet_additional_reserved_words = ()
      + aglet_additional_builtins = ('BITSET8', 'BITSET16', 'BITSET32', 'CARDINAL8', 'CARDINAL16', 'CARDINAL32', 'INTEGER8', 'INTEGER16', 'INTEGER32')
      + aglet_additional_pseudo_builtins = ()
      + gm2_additional_reserved_words = ('ASM', '__ATTRIBUTE__', '__BUILTIN__', '__COLUMN__', '__DATE__', '__FILE__', '__FUNCTION__', '__LINE__', '__MODULE__', 'VOLATILE')
      + gm2_additional_builtins = ('BITSET8', 'BITSET16', 'BITSET32', 'CARDINAL8', 'CARDINAL16', 'CARDINAL32', 'CARDINAL64', 'COMPLEX32', 'COMPLEX64', 'COMPLEX96', 'COMPLEX128', 'INTEGER8', 'INTEGER16', 'INTEGER32', 'INTEGER64', 'REAL8', 'REAL16', 'REAL32', 'REAL96', 'REAL128', 'THROW')
      + gm2_additional_pseudo_builtins = ()
      + p1_additional_reserved_words = ()
      + p1_additional_builtins = ()
      + p1_additional_pseudo_builtins = ('BCD',)
      + xds_additional_reserved_words = ('SEQ',)
      + xds_additional_builtins = ('ASH', 'ASSERT', 'DIFFADR_TYPE', 'ENTIER', 'INDEX', 'LEN', 'LONGCARD', 'SHORTCARD', 'SHORTINT')
      + xds_additional_pseudo_builtins = ('PROCESS', 'NEWPROCESS', 'BOOL8', 'BOOL16', 'BOOL32', 'CARD8', 'CARD16', 'CARD32', 'INT8', 'INT16', 'INT32', 'REF', 'MOVE', 'FILL', 'GET', 'PUT', 'CC', 'int', 'unsigned', 'size_t', 'voidCOMPILER', 'OPTION', 'EQUATION')
      + pim_stdlib_module_identifiers = ('Terminal', 'FileSystem', 'InOut', 'RealInOut', 'MathLib0', 'Storage')
      + pim_stdlib_type_identifiers = ('Flag', 'FlagSet', 'Response', 'Command', 'Lock', 'Permission', 'MediumType', 'File', 'FileProc', 'DirectoryProc', 'FileCommand', 'DirectoryCommand')
      + pim_stdlib_proc_identifiers = ('Read', 'BusyRead', 'ReadAgain', 'Write', 'WriteString', 'WriteLn', 'Create', 'Lookup', 'Close', 'Delete', 'Rename', 'SetRead', 'SetWrite', 'SetModify', 'SetOpen', 'Doio', 'SetPos', 'GetPos', 'Length', 'Reset', 'Again', 'ReadWord', 'WriteWord', 'ReadChar', 'WriteChar', 'CreateMedium', 'DeleteMedium', 'AssignName', 'DeassignName', 'ReadMedium', 'LookupMedium', 'OpenInput', 'OpenOutput', 'CloseInput', 'CloseOutput', 'ReadString', 'ReadInt', 'ReadCard', 'ReadWrd', 'WriteInt', 'WriteCard', 'WriteOct', 'WriteHex', 'WriteWrd', 'ReadReal', 'WriteReal', 'WriteFixPt', 'WriteRealOct', 'sqrt', 'exp', 'ln', 'sin', 'cos', 'arctan', 'entier', 'ALLOCATE', 'DEALLOCATE')
      + pim_stdlib_var_identifiers = ('Done', 'termCH', 'in', 'out')
      + pim_stdlib_const_identifiers = ('EOL',)
      + iso_stdlib_module_identifiers = ()
      + iso_stdlib_type_identifiers = ()
      + iso_stdlib_proc_identifiers = ()
      + iso_stdlib_var_identifiers = ()
      + iso_stdlib_const_identifiers = ()
      + m2r10_stdlib_adt_identifiers = ('BCD', 'LONGBCD', 'BITSET', 'SHORTBITSET', 'LONGBITSET', 'LONGLONGBITSET', 'COMPLEX', 'LONGCOMPLEX', 'SHORTCARD', 'LONGLONGCARD', 'SHORTINT', 'LONGLONGINT', 'POSINT', 'SHORTPOSINT', 'LONGPOSINT', 'LONGLONGPOSINT', 'BITSET8', 'BITSET16', 'BITSET32', 'BITSET64', 'BITSET128', 'BS8', 'BS16', 'BS32', 'BS64', 'BS128', 'CARDINAL8', 'CARDINAL16', 'CARDINAL32', 'CARDINAL64', 'CARDINAL128', 'CARD8', 'CARD16', 'CARD32', 'CARD64', 'CARD128', 'INTEGER8', 'INTEGER16', 'INTEGER32', 'INTEGER64', 'INTEGER128', 'INT8', 'INT16', 'INT32', 'INT64', 'INT128', 'STRING', 'UNISTRING')
      + m2r10_stdlib_blueprint_identifiers = ('ProtoRoot', 'ProtoComputational', 'ProtoNumeric', 'ProtoScalar', 'ProtoNonScalar', 'ProtoCardinal', 'ProtoInteger', 'ProtoReal', 'ProtoComplex', 'ProtoVector', 'ProtoTuple', 'ProtoCompArray', 'ProtoCollection', 'ProtoStaticArray', 'ProtoStaticSet', 'ProtoStaticString', 'ProtoArray', 'ProtoString', 'ProtoSet', 'ProtoMultiSet', 'ProtoDictionary', 'ProtoMultiDict', 'ProtoExtension', 'ProtoIO', 'ProtoCardMath', 'ProtoIntMath', 'ProtoRealMath')
      + m2r10_stdlib_module_identifiers = ('ASCII', 'BooleanIO', 'CharIO', 'UnicharIO', 'OctetIO', 'CardinalIO', 'LongCardIO', 'IntegerIO', 'LongIntIO', 'RealIO', 'LongRealIO', 'BCDIO', 'LongBCDIO', 'CardMath', 'LongCardMath', 'IntMath', 'LongIntMath', 'RealMath', 'LongRealMath', 'BCDMath', 'LongBCDMath', 'FileIO', 'FileSystem', 'Storage', 'IOSupport')
      + m2r10_stdlib_type_identifiers = ('File', 'Status')
      + m2r10_stdlib_proc_identifiers = ('ALLOCATE', 'DEALLOCATE', 'SIZE')
      + m2r10_stdlib_var_identifiers = ('stdIn', 'stdOut', 'stdErr')
      + m2r10_stdlib_const_identifiers = ('pi', 'tau')
      + dialects = ('unknown', 'm2pim', 'm2iso', 'm2r10', 'objm2', 'm2iso+aglet', 'm2pim+gm2', 'm2iso+p1', 'm2iso+xds')
      + lexemes_to_reject_db = {'unknown': (), 'm2pim': (pim_lexemes_to_reject,), 'm2iso': (iso_lexemes_to_reject,), 'm2r10': (m2r10_lexemes_to_reject,), 'objm2': (objm2_lexemes_to_reject,), 'm2iso+aglet': (iso_lexemes_to_reject,), 'm2pim+gm2': (pim_lexemes_to_reject,), 'm2iso+p1': (iso_lexemes_to_reject,), 'm2iso+xds': (iso_lexemes_to_reject,)}
      + reserved_words_db = {'unknown': (common_reserved_words, pim_additional_reserved_words, iso_additional_reserved_words, m2r10_additional_reserved_words), 'm2pim': (common_reserved_words, pim_additional_reserved_words), 'm2iso': (common_reserved_words, iso_additional_reserved_words), 'm2r10': (common_reserved_words, m2r10_additional_reserved_words), 'objm2': (common_reserved_words, m2r10_additional_reserved_words, objm2_additional_reserved_words), 'm2iso+aglet': (common_reserved_words, iso_additional_reserved_words, aglet_additional_reserved_words), 'm2pim+gm2': (common_reserved_words, pim_additional_reserved_words, gm2_additional_reserved_words), 'm2iso+p1': (common_reserved_words, iso_additional_reserved_words, p1_additional_reserved_words), 'm2iso+xds': (common_reserved_words, iso_additional_reserved_words, xds_additional_reserved_words)}
      + builtins_db = {'unknown': (common_builtins, pim_additional_builtins, iso_additional_builtins, m2r10_additional_builtins), 'm2pim': (common_builtins, pim_additional_builtins), 'm2iso': (common_builtins, iso_additional_builtins), 'm2r10': (common_builtins, m2r10_additional_builtins), 'objm2': (common_builtins, m2r10_additional_builtins, objm2_additional_builtins), 'm2iso+aglet': (common_builtins, iso_additional_builtins, aglet_additional_builtins), 'm2pim+gm2': (common_builtins, pim_additional_builtins, gm2_additional_builtins), 'm2iso+p1': (common_builtins, iso_additional_builtins, p1_additional_builtins), 'm2iso+xds': (common_builtins, iso_additional_builtins, xds_additional_builtins)}
      + pseudo_builtins_db = {'unknown': (common_pseudo_builtins, pim_additional_pseudo_builtins, iso_additional_pseudo_builtins, m2r10_additional_pseudo_builtins), 'm2pim': (common_pseudo_builtins, pim_additional_pseudo_builtins), 'm2iso': (common_pseudo_builtins, iso_additional_pseudo_builtins), 'm2r10': (common_pseudo_builtins, m2r10_additional_pseudo_builtins), 'objm2': (common_pseudo_builtins, m2r10_additional_pseudo_builtins, objm2_additional_pseudo_builtins), 'm2iso+aglet': (common_pseudo_builtins, iso_additional_pseudo_builtins, aglet_additional_pseudo_builtins), 'm2pim+gm2': (common_pseudo_builtins, pim_additional_pseudo_builtins, gm2_additional_pseudo_builtins), 'm2iso+p1': (common_pseudo_builtins, iso_additional_pseudo_builtins, p1_additional_pseudo_builtins), 'm2iso+xds': (common_pseudo_builtins, iso_additional_pseudo_builtins, xds_additional_pseudo_builtins)}
      + stdlib_adts_db = {'unknown': (), 'm2pim': (), 'm2iso': (), 'm2r10': (m2r10_stdlib_adt_identifiers,), 'objm2': (m2r10_stdlib_adt_identifiers,), 'm2iso+aglet': (), 'm2pim+gm2': (), 'm2iso+p1': (), 'm2iso+xds': ()}
      + stdlib_modules_db = {'unknown': (), 'm2pim': (pim_stdlib_module_identifiers,), 'm2iso': (iso_stdlib_module_identifiers,), 'm2r10': (m2r10_stdlib_blueprint_identifiers, m2r10_stdlib_module_identifiers, m2r10_stdlib_adt_identifiers), 'objm2': (m2r10_stdlib_blueprint_identifiers, m2r10_stdlib_module_identifiers), 'm2iso+aglet': (iso_stdlib_module_identifiers,), 'm2pim+gm2': (pim_stdlib_module_identifiers,), 'm2iso+p1': (iso_stdlib_module_identifiers,), 'm2iso+xds': (iso_stdlib_module_identifiers,)}
      + stdlib_types_db = {'unknown': (), 'm2pim': (pim_stdlib_type_identifiers,), 'm2iso': (iso_stdlib_type_identifiers,), 'm2r10': (m2r10_stdlib_type_identifiers,), 'objm2': (m2r10_stdlib_type_identifiers,), 'm2iso+aglet': (iso_stdlib_type_identifiers,), 'm2pim+gm2': (pim_stdlib_type_identifiers,), 'm2iso+p1': (iso_stdlib_type_identifiers,), 'm2iso+xds': (iso_stdlib_type_identifiers,)}
      + stdlib_procedures_db = {'unknown': (), 'm2pim': (pim_stdlib_proc_identifiers,), 'm2iso': (iso_stdlib_proc_identifiers,), 'm2r10': (m2r10_stdlib_proc_identifiers,), 'objm2': (m2r10_stdlib_proc_identifiers,), 'm2iso+aglet': (iso_stdlib_proc_identifiers,), 'm2pim+gm2': (pim_stdlib_proc_identifiers,), 'm2iso+p1': (iso_stdlib_proc_identifiers,), 'm2iso+xds': (iso_stdlib_proc_identifiers,)}
      + stdlib_variables_db = {'unknown': (), 'm2pim': (pim_stdlib_var_identifiers,), 'm2iso': (iso_stdlib_var_identifiers,), 'm2r10': (m2r10_stdlib_var_identifiers,), 'objm2': (m2r10_stdlib_var_identifiers,), 'm2iso+aglet': (iso_stdlib_var_identifiers,), 'm2pim+gm2': (pim_stdlib_var_identifiers,), 'm2iso+p1': (iso_stdlib_var_identifiers,), 'm2iso+xds': (iso_stdlib_var_identifiers,)}
      + stdlib_constants_db = {'unknown': (), 'm2pim': (pim_stdlib_const_identifiers,), 'm2iso': (iso_stdlib_const_identifiers,), 'm2r10': (m2r10_stdlib_const_identifiers,), 'objm2': (m2r10_stdlib_const_identifiers,), 'm2iso+aglet': (iso_stdlib_const_identifiers,), 'm2pim+gm2': (pim_stdlib_const_identifiers,), 'm2iso+p1': (iso_stdlib_const_identifiers,), 'm2iso+xds': (iso_stdlib_const_identifiers,)}
  --
      - __init__()
      + set_dialect(dialect_id)
      + get_dialect_from_dialect_tag(dialect_tag)
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class MojoLexer {
      + name = 'Mojo'
      + url = 'https://docs.modular.com/mojo/'
      + aliases = ['mojo', '🔥']
      + filenames = ['*.mojo', '*.🔥']
      + mimetypes = ['text/x-mojo', 'application/x-mojo']
      + version_added = '2.18'
      + uni_name = f'[{uni.xid_start}][{uni.xid_continue}]*'
      + tokens = {'root': [('\\s+', Whitespace), ('^(\\s*)([rRuUbB]{,2})("""(?:.|\\n)*?""")', bygroups(Whitespace, String.Affix, String.Doc)), ("^(\\s*)([rRuUbB]{,2})('''(?:.|\\n)*?''')", bygroups(Whitespace, String.Affix, String.Doc)), ('\\A#!.+$', Comment.Hashbang), ('#.*$', Comment.Single), ('\\\\\\n', Whitespace), ('\\\\', Whitespace), include('keywords'), include('soft-keywords'), ('(alias)(\\s+)', bygroups(Keyword, Whitespace), 'varname'), ('(var)(\\s+)', bygroups(Keyword, Whitespace), 'varname'), ('(def)(\\s+)', bygroups(Keyword, Whitespace), 'funcname'), ('(fn)(\\s+)', bygroups(Keyword, Whitespace), 'funcname'), ('(class)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), ('(struct)(\\s+)', bygroups(Keyword, Whitespace), 'structname'), ('(trait)(\\s+)', bygroups(Keyword, Whitespace), 'structname'), ('(from)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'fromimport'), ('(import)(\\s+)', bygroups(Keyword.Namespace, Whitespace), 'import'), include('expr')], 'expr': [('(?i)(rf|fr)(""")', bygroups(String.Affix, String.Double), combined('rfstringescape', 'tdqf')), ("(?i)(rf|fr)(''')", bygroups(String.Affix, String.Single), combined('rfstringescape', 'tsqf')), ('(?i)(rf|fr)(")', bygroups(String.Affix, String.Double), combined('rfstringescape', 'dqf')), ("(?i)(rf|fr)(')", bygroups(String.Affix, String.Single), combined('rfstringescape', 'sqf')), ('([fF])(""")', bygroups(String.Affix, String.Double), combined('fstringescape', 'tdqf')), ("([fF])(''')", bygroups(String.Affix, String.Single), combined('fstringescape', 'tsqf')), ('([fF])(")', bygroups(String.Affix, String.Double), combined('fstringescape', 'dqf')), ("([fF])(')", bygroups(String.Affix, String.Single), combined('fstringescape', 'sqf')), ('(?i)(rb|br|r)(""")', bygroups(String.Affix, String.Double), 'tdqs'), ("(?i)(rb|br|r)(''')", bygroups(String.Affix, String.Single), 'tsqs'), ('(?i)(rb|br|r)(")', bygroups(String.Affix, String.Double), 'dqs'), ("(?i)(rb|br|r)(')", bygroups(String.Affix, String.Single), 'sqs'), ('([uU]?)(""")', bygroups(String.Affix, String.Double), combined('stringescape', 'tdqs')), ("([uU]?)(''')", bygroups(String.Affix, String.Single), combined('stringescape', 'tsqs')), ('([uU]?)(")', bygroups(String.Affix, String.Double), combined('stringescape', 'dqs')), ("([uU]?)(')", bygroups(String.Affix, String.Single), combined('stringescape', 'sqs')), ('([bB])(""")', bygroups(String.Affix, String.Double), combined('bytesescape', 'tdqs')), ("([bB])(''')", bygroups(String.Affix, String.Single), combined('bytesescape', 'tsqs')), ('([bB])(")', bygroups(String.Affix, String.Double), combined('bytesescape', 'dqs')), ("([bB])(')", bygroups(String.Affix, String.Single), combined('bytesescape', 'sqs')), ('[^\\S\\n]+', Text), include('numbers'), ('!=|==|<<|>>|:=|[-~+/*%=<>&^|.]', Operator), ('([]{}:\\(\\),;[])+', Punctuation), ('(in|is|and|or|not)\\b', Operator.Word), include('expr-keywords'), include('builtins'), include('magicfuncs'), include('magicvars'), include('name')], 'expr-inside-fstring': [('[{([]', Punctuation, 'expr-inside-fstring-inner'), ('(=\\s*)?(\\![sraf])?\\}', String.Interpol, '#pop'), ('(=\\s*)?(\\![sraf])?:', String.Interpol, '#pop'), ('\\s+', Whitespace), include('expr')], 'expr-inside-fstring-inner': [('[{([]', Punctuation, 'expr-inside-fstring-inner'), ('[])}]', Punctuation, '#pop'), ('\\s+', Whitespace), include('expr')], 'expr-keywords': [(words(('async for', 'async with', 'await', 'else', 'for', 'if', 'lambda', 'yield', 'yield from'), suffix='\\b'), Keyword), (words(('True', 'False', 'None'), suffix='\\b'), Keyword.Constant)], 'keywords': [(words(('assert', 'async', 'await', 'borrowed', 'break', 'continue', 'del', 'elif', 'else', 'except', 'finally', 'for', 'global', 'if', 'lambda', 'pass', 'raise', 'nonlocal', 'return', 'try', 'while', 'yield', 'yield from', 'as', 'with'), suffix='\\b'), Keyword), (words(('True', 'False', 'None'), suffix='\\b'), Keyword.Constant)], 'soft-keywords': [('(^[ \\t]*)(match|case)\\b(?![ \\t]*(?:[:,;=^&|@~)\\]}]|(?:' + '|'.join((k for k in keyword.kwlist if k[0].islower())) + ')\\b))', bygroups(Whitespace, Keyword), 'soft-keywords-inner')], 'soft-keywords-inner': [('(\\s+)([^\\n_]*)(_\\b)', bygroups(Whitespace, using(this), Keyword)), default('#pop')], 'builtins': [(words(('__import__', 'abs', 'aiter', 'all', 'any', 'bin', 'bool', 'bytearray', 'breakpoint', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip', 'AnyType', 'Coroutine', 'DType', 'Error', 'Int', 'List', 'ListLiteral', 'Scalar', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64', 'BFloat16', 'Float16', 'Float32', 'Float64', 'SIMD', 'String', 'Tensor', 'Tuple', 'Movable', 'Copyable', 'CollectionElement'), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin), ('(?<!\\.)(self|Ellipsis|NotImplemented|cls)\\b', Name.Builtin.Pseudo), (words(('Error',), prefix='(?<!\\.)', suffix='\\b'), Name.Exception)], 'magicfuncs': [(words(('__abs__', '__add__', '__aenter__', '__aexit__', '__aiter__', '__and__', '__anext__', '__await__', '__bool__', '__bytes__', '__call__', '__complex__', '__contains__', '__del__', '__delattr__', '__delete__', '__delitem__', '__dir__', '__divmod__', '__enter__', '__eq__', '__exit__', '__float__', '__floordiv__', '__format__', '__ge__', '__get__', '__getattr__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__iand__', '__ifloordiv__', '__ilshift__', '__imatmul__', '__imod__', '__imul__', '__index__', '__init__', '__instancecheck__', '__int__', '__invert__', '__ior__', '__ipow__', '__irshift__', '__isub__', '__iter__', '__itruediv__', '__ixor__', '__le__', '__len__', '__length_hint__', '__lshift__', '__lt__', '__matmul__', '__missing__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__next__', '__or__', '__pos__', '__pow__', '__prepare__', '__radd__', '__rand__', '__rdivmod__', '__repr__', '__reversed__', '__rfloordiv__', '__rlshift__', '__rmatmul__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__set__', '__setattr__', '__setitem__', '__str__', '__sub__', '__subclasscheck__', '__truediv__', '__xor__'), suffix='\\b'), Name.Function.Magic)], 'magicvars': [(words(('__annotations__', '__bases__', '__class__', '__closure__', '__code__', '__defaults__', '__dict__', '__doc__', '__file__', '__func__', '__globals__', '__kwdefaults__', '__module__', '__mro__', '__name__', '__objclass__', '__qualname__', '__self__', '__slots__', '__weakref__'), suffix='\\b'), Name.Variable.Magic)], 'numbers': [('(\\d(?:_?\\d)*\\.(?:\\d(?:_?\\d)*)?|(?:\\d(?:_?\\d)*)?\\.\\d(?:_?\\d)*)([eE][+-]?\\d(?:_?\\d)*)?', Number.Float), ('\\d(?:_?\\d)*[eE][+-]?\\d(?:_?\\d)*j?', Number.Float), ('0[oO](?:_?[0-7])+', Number.Oct), ('0[bB](?:_?[01])+', Number.Bin), ('0[xX](?:_?[a-fA-F0-9])+', Number.Hex), ('\\d(?:_?\\d)*', Number.Integer)], 'name': [('@' + uni_name, Name.Decorator), ('@', Operator), (uni_name, Name)], 'varname': [(uni_name, Name.Variable, '#pop')], 'funcname': [include('magicfuncs'), (uni_name, Name.Function, '#pop'), default('#pop')], 'classname': [(uni_name, Name.Class, '#pop')], 'structname': [(uni_name, Name.Struct, '#pop')], 'import': [('(\\s+)(as)(\\s+)', bygroups(Whitespace, Keyword, Whitespace)), ('\\.', Name.Namespace), (uni_name, Name.Namespace), ('(\\s*)(,)(\\s*)', bygroups(Whitespace, Operator, Whitespace)), default('#pop')], 'fromimport': [('(\\s+)(import)\\b', bygroups(Whitespace, Keyword.Namespace), '#pop'), ('\\.', Name.Namespace), ('None\\b', Keyword.Constant, '#pop'), (uni_name, Name.Namespace), default('#pop')], 'rfstringescape': [('\\{\\{', String.Escape), ('\\}\\}', String.Escape)], 'fstringescape': [include('rfstringescape'), include('stringescape')], 'bytesescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'stringescape': [('\\\\(N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})', String.Escape), include('bytesescape')], 'fstrings-single': fstring_rules(String.Single), 'fstrings-double': fstring_rules(String.Double), 'strings-single': innerstring_rules(String.Single), 'strings-double': innerstring_rules(String.Double), 'dqf': [('"', String.Double, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('fstrings-double')], 'sqf': [("'", String.Single, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('fstrings-single')], 'dqs': [('"', String.Double, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('strings-double')], 'sqs': [("'", String.Single, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('strings-single')], 'tdqf': [('"""', String.Double, '#pop'), include('fstrings-double'), ('\\n', String.Double)], 'tsqf': [("'''", String.Single, '#pop'), include('fstrings-single'), ('\\n', String.Single)], 'tdqs': [('"""', String.Double, '#pop'), include('strings-double'), ('\\n', String.Double)], 'tsqs': [("'''", String.Single, '#pop'), include('strings-single'), ('\\n', String.Single)]}
  --
      + innerstring_rules(ttype)
      + fstring_rules(ttype)
      + analyse_text(text)
  }

  class MonteLexer {
      + name = 'Monte'
      + url = 'https://monte.readthedocs.io/'
      + aliases = ['monte']
      + filenames = ['*.mt']
      + version_added = '2.2'
      + tokens = {'root': [('#[^\\n]*\\n', Comment), ('/\\*\\*.*?\\*/', String.Doc), ('\\bvar\\b', Keyword.Declaration, 'var'), ('\\binterface\\b', Keyword.Declaration, 'interface'), (words(_methods, prefix='\\b', suffix='\\b'), Keyword, 'method'), (words(_declarations, prefix='\\b', suffix='\\b'), Keyword.Declaration), (words(_keywords, prefix='\\b', suffix='\\b'), Keyword), ('[+-]?0x[_0-9a-fA-F]+', Number.Hex), ('[+-]?[_0-9]+\\.[_0-9]*([eE][+-]?[_0-9]+)?', Number.Float), ('[+-]?[_0-9]+', Number.Integer), ("'", String.Double, 'char'), ('"', String.Double, 'string'), ('`', String.Backtick, 'ql'), (words(_operators), Operator), (_identifier + '=', Operator.Word), (words(_constants, prefix='\\b', suffix='\\b'), Keyword.Pseudo), (words(_guards, prefix='\\b', suffix='\\b'), Keyword.Type), (words(_safeScope, prefix='\\b', suffix='\\b'), Name.Builtin), (_identifier, Name), ('\\(|\\)|\\{|\\}|\\[|\\]|:|,', Punctuation), (' +', Whitespace), ('=', Error)], 'char': [("'", Error, 'root'), (_escape_pattern, String.Escape, 'charEnd'), ('.', String.Char, 'charEnd')], 'charEnd': [("'", String.Char, '#pop:2'), ('.', Error)], 'interface': [(' +', Whitespace), (_identifier, Name.Class, '#pop'), include('root')], 'method': [(' +', Whitespace), (_identifier, Name.Function, '#pop'), include('root')], 'string': [('"', String.Double, 'root'), (_escape_pattern, String.Escape), ('\\n', String.Double), ('.', String.Double)], 'ql': [('`', String.Backtick, 'root'), ('\\$' + _escape_pattern, String.Escape), ('\\$\\$', String.Escape), ('@@', String.Escape), ('\\$\\{', String.Interpol, 'qlNest'), ('@\\{', String.Interpol, 'qlNest'), ('\\$' + _identifier, Name), ('@' + _identifier, Name), ('.', String.Backtick)], 'qlNest': [('\\}', String.Interpol, '#pop'), include('root')], 'var': [(' +', Whitespace), (_identifier, Name.Variable, '#pop'), include('root')]}
  }

  class MoselLexer {
      + name = 'Mosel'
      + aliases = ['mosel']
      + filenames = ['*.mos']
      + url = 'https://www.fico.com/fico-xpress-optimization/docs/latest/mosel/mosel_lang/dhtml/moselreflang.html'
      + version_added = '2.6'
      + tokens = {'root': [('\\n', Text), ('\\s+', Text.Whitespace), ('!.*?\\n', Comment.Single), ('\\(!(.|\\n)*?!\\)', Comment.Multiline), (words(('and', 'as', 'break', 'case', 'count', 'declarations', 'do', 'dynamic', 'elif', 'else', 'end-', 'end', 'evaluation', 'false', 'forall', 'forward', 'from', 'function', 'hashmap', 'if', 'imports', 'include', 'initialisations', 'initializations', 'inter', 'max', 'min', 'model', 'namespace', 'next', 'not', 'nsgroup', 'nssearch', 'of', 'options', 'or', 'package', 'parameters', 'procedure', 'public', 'prod', 'record', 'repeat', 'requirements', 'return', 'sum', 'then', 'to', 'true', 'union', 'until', 'uses', 'version', 'while', 'with'), prefix='\\b', suffix='\\b'), Keyword.Builtin), (words(('range', 'array', 'set', 'list', 'mpvar', 'mpproblem', 'linctr', 'nlctr', 'integer', 'string', 'real', 'boolean', 'text', 'time', 'date', 'datetime', 'returned', 'Model', 'Mosel', 'counter', 'xmldoc', 'is_sos1', 'is_sos2', 'is_integer', 'is_binary', 'is_continuous', 'is_free', 'is_semcont', 'is_semint', 'is_partint'), prefix='\\b', suffix='\\b'), Keyword.Type), ('(\\+|\\-|\\*|/|=|<=|>=|\\||\\^|<|>|<>|\\.\\.|\\.|:=|::|:|in|mod|div)', Operator), ('[()\\[\\]{},;]+', Punctuation), (words(FUNCTIONS, prefix='\\b', suffix='\\b'), Name.Function), ('(\\d+\\.(?!\\.)\\d*|\\.(?!.)\\d+)([eE][+-]?\\d+)?', Number.Float), ('\\d+([eE][+-]?\\d+)?', Number.Integer), ('[+-]?Infinity', Number.Integer), ('0[xX][0-9a-fA-F]+', Number), ('"', String.Double, 'double_quote'), ("\\'", String.Single, 'single_quote'), ('(\\w+|(\\.(?!\\.)))', Text)], 'single_quote': [("\\'", String.Single, '#pop'), ("[^\\']+", String.Single)], 'double_quote': [('(\\\\"|\\\\[0-7]{1,3}\\D|\\\\[abfnrtv]|\\\\\\\\)', String.Escape), ('\\"', String.Double, '#pop'), ('[^"\\\\]+', String.Double)]}
  }

  class NCLLexer {
      + name = 'NCL'
      + aliases = ['ncl']
      + filenames = ['*.ncl']
      + mimetypes = ['text/ncl']
      + url = 'https://www.ncl.ucar.edu'
      + version_added = '2.2'
      + flags = re.MULTILINE
      + tokens = {'root': [(';.*\\n', Comment), include('strings'), include('core'), ('[a-zA-Z_]\\w*', Name), include('nums'), ('[\\s]+', Text)], 'core': [(words(('begin', 'break', 'continue', 'create', 'defaultapp', 'do', 'else', 'end', 'external', 'exit', 'True', 'False', 'file', 'function', 'getvalues', 'graphic', 'group', 'if', 'list', 'load', 'local', 'new', '_Missing', 'Missing', 'noparent', 'procedure', 'quit', 'QUIT', 'Quit', 'record', 'return', 'setvalues', 'stop', 'then', 'while'), prefix='\\b', suffix='\\s*\\b'), Keyword), (words(('ubyte', 'uint', 'uint64', 'ulong', 'string', 'byte', 'character', 'double', 'float', 'integer', 'int64', 'logical', 'long', 'short', 'ushort', 'enumeric', 'numeric', 'snumeric'), prefix='\\b', suffix='\\s*\\b'), Keyword.Type), ('[\\%^*+\\-/<>]', Operator), ('[\\[\\]():@$!&|.,\\\\{}]', Punctuation), ('[=:]', Punctuation), (words(('abs', 'acos', 'addfile', 'addfiles', 'all', 'angmom_atm', 'any', 'area_conserve_remap', 'area_hi2lores', 'area_poly_sphere', 'asciiread', 'asciiwrite', 'asin', 'atan', 'atan2', 'attsetvalues', 'avg', 'betainc', 'bin_avg', 'bin_sum', 'bw_bandpass_filter', 'cancor', 'cbinread', 'cbinwrite', 'cd_calendar', 'cd_inv_calendar', 'cdfbin_p', 'cdfbin_pr', 'cdfbin_s', 'cdfbin_xn', 'cdfchi_p', 'cdfchi_x', 'cdfgam_p', 'cdfgam_x', 'cdfnor_p', 'cdfnor_x', 'cdft_p', 'cdft_t', 'ceil', 'center_finite_diff', 'center_finite_diff_n', 'cfftb', 'cfftf', 'cfftf_frq_reorder', 'charactertodouble', 'charactertofloat', 'charactertointeger', 'charactertolong', 'charactertoshort', 'charactertostring', 'chartodouble', 'chartofloat', 'chartoint', 'chartointeger', 'chartolong', 'chartoshort', 'chartostring', 'chiinv', 'clear', 'color_index_to_rgba', 'conform', 'conform_dims', 'cos', 'cosh', 'count_unique_values', 'covcorm', 'covcorm_xy', 'craybinnumrec', 'craybinrecread', 'create_graphic', 'csa1', 'csa1d', 'csa1s', 'csa1x', 'csa1xd', 'csa1xs', 'csa2', 'csa2d', 'csa2l', 'csa2ld', 'csa2ls', 'csa2lx', 'csa2lxd', 'csa2lxs', 'csa2s', 'csa2x', 'csa2xd', 'csa2xs', 'csa3', 'csa3d', 'csa3l', 'csa3ld', 'csa3ls', 'csa3lx', 'csa3lxd', 'csa3lxs', 'csa3s', 'csa3x', 'csa3xd', 'csa3xs', 'csc2s', 'csgetp', 'css2c', 'cssetp', 'cssgrid', 'csstri', 'csvoro', 'cumsum', 'cz2ccm', 'datatondc', 'day_of_week', 'day_of_year', 'days_in_month', 'default_fillvalue', 'delete', 'depth_to_pres', 'destroy', 'determinant', 'dewtemp_trh', 'dgeevx_lapack', 'dim_acumrun_n', 'dim_avg', 'dim_avg_n', 'dim_avg_wgt', 'dim_avg_wgt_n', 'dim_cumsum', 'dim_cumsum_n', 'dim_gamfit_n', 'dim_gbits', 'dim_max', 'dim_max_n', 'dim_median', 'dim_median_n', 'dim_min', 'dim_min_n', 'dim_num', 'dim_num_n', 'dim_numrun_n', 'dim_pqsort', 'dim_pqsort_n', 'dim_product', 'dim_product_n', 'dim_rmsd', 'dim_rmsd_n', 'dim_rmvmean', 'dim_rmvmean_n', 'dim_rmvmed', 'dim_rmvmed_n', 'dim_spi_n', 'dim_standardize', 'dim_standardize_n', 'dim_stat4', 'dim_stat4_n', 'dim_stddev', 'dim_stddev_n', 'dim_sum', 'dim_sum_n', 'dim_sum_wgt', 'dim_sum_wgt_n', 'dim_variance', 'dim_variance_n', 'dimsizes', 'doubletobyte', 'doubletochar', 'doubletocharacter', 'doubletofloat', 'doubletoint', 'doubletointeger', 'doubletolong', 'doubletoshort', 'dpres_hybrid_ccm', 'dpres_plevel', 'draw', 'draw_color_palette', 'dsgetp', 'dsgrid2', 'dsgrid2d', 'dsgrid2s', 'dsgrid3', 'dsgrid3d', 'dsgrid3s', 'dspnt2', 'dspnt2d', 'dspnt2s', 'dspnt3', 'dspnt3d', 'dspnt3s', 'dssetp', 'dtrend', 'dtrend_msg', 'dtrend_msg_n', 'dtrend_n', 'dtrend_quadratic', 'dtrend_quadratic_msg_n', 'dv2uvf', 'dv2uvg', 'dz_height', 'echo_off', 'echo_on', 'eof2data', 'eof_varimax', 'eofcor', 'eofcor_pcmsg', 'eofcor_ts', 'eofcov', 'eofcov_pcmsg', 'eofcov_ts', 'eofunc', 'eofunc_ts', 'eofunc_varimax', 'equiv_sample_size', 'erf', 'erfc', 'esacr', 'esacv', 'esccr', 'esccv', 'escorc', 'escorc_n', 'escovc', 'exit', 'exp', 'exp_tapersh', 'exp_tapersh_wgts', 'exp_tapershC', 'ezfftb', 'ezfftb_n', 'ezfftf', 'ezfftf_n', 'f2fosh', 'f2foshv', 'f2fsh', 'f2fshv', 'f2gsh', 'f2gshv', 'fabs', 'fbindirread', 'fbindirwrite', 'fbinnumrec', 'fbinread', 'fbinrecread', 'fbinrecwrite', 'fbinwrite', 'fft2db', 'fft2df', 'fftshift', 'fileattdef', 'filechunkdimdef', 'filedimdef', 'fileexists', 'filegrpdef', 'filevarattdef', 'filevarchunkdef', 'filevarcompressleveldef', 'filevardef', 'filevardimsizes', 'filwgts_lancos', 'filwgts_lanczos', 'filwgts_normal', 'floattobyte', 'floattochar', 'floattocharacter', 'floattoint', 'floattointeger', 'floattolong', 'floattoshort', 'floor', 'fluxEddy', 'fo2fsh', 'fo2fshv', 'fourier_info', 'frame', 'fspan', 'ftcurv', 'ftcurvd', 'ftcurvi', 'ftcurvp', 'ftcurvpi', 'ftcurvps', 'ftcurvs', 'ftest', 'ftgetp', 'ftkurv', 'ftkurvd', 'ftkurvp', 'ftkurvpd', 'ftsetp', 'ftsurf', 'g2fsh', 'g2fshv', 'g2gsh', 'g2gshv', 'gamma', 'gammainc', 'gaus', 'gaus_lobat', 'gaus_lobat_wgt', 'gc_aangle', 'gc_clkwise', 'gc_dangle', 'gc_inout', 'gc_latlon', 'gc_onarc', 'gc_pnt2gc', 'gc_qarea', 'gc_tarea', 'generate_2d_array', 'get_color_index', 'get_color_rgba', 'get_cpu_time', 'get_isolines', 'get_ncl_version', 'get_script_name', 'get_script_prefix_name', 'get_sphere_radius', 'get_unique_values', 'getbitsone', 'getenv', 'getfiledimsizes', 'getfilegrpnames', 'getfilepath', 'getfilevaratts', 'getfilevarchunkdimsizes', 'getfilevardims', 'getfilevardimsizes', 'getfilevarnames', 'getfilevartypes', 'getvaratts', 'getvardims', 'gradsf', 'gradsg', 'greg2jul', 'grid2triple', 'hlsrgb', 'hsvrgb', 'hydro', 'hyi2hyo', 'idsfft', 'igradsf', 'igradsg', 'ilapsf', 'ilapsg', 'ilapvf', 'ilapvg', 'ind', 'ind_resolve', 'int2p', 'int2p_n', 'integertobyte', 'integertochar', 'integertocharacter', 'integertoshort', 'inttobyte', 'inttochar', 'inttoshort', 'inverse_matrix', 'isatt', 'isbigendian', 'isbyte', 'ischar', 'iscoord', 'isdefined', 'isdim', 'isdimnamed', 'isdouble', 'isenumeric', 'isfile', 'isfilepresent', 'isfilevar', 'isfilevaratt', 'isfilevarcoord', 'isfilevardim', 'isfloat', 'isfunc', 'isgraphic', 'isint', 'isint64', 'isinteger', 'isleapyear', 'islogical', 'islong', 'ismissing', 'isnan_ieee', 'isnumeric', 'ispan', 'isproc', 'isshort', 'issnumeric', 'isstring', 'isubyte', 'isuint', 'isuint64', 'isulong', 'isunlimited', 'isunsigned', 'isushort', 'isvar', 'jul2greg', 'kmeans_as136', 'kolsm2_n', 'kron_product', 'lapsf', 'lapsg', 'lapvf', 'lapvg', 'latlon2utm', 'lclvl', 'lderuvf', 'lderuvg', 'linint1', 'linint1_n', 'linint2', 'linint2_points', 'linmsg', 'linmsg_n', 'linrood_latwgt', 'linrood_wgt', 'list_files', 'list_filevars', 'list_hlus', 'list_procfuncs', 'list_vars', 'ListAppend', 'ListCount', 'ListGetType', 'ListIndex', 'ListIndexFromName', 'ListPop', 'ListPush', 'ListSetType', 'loadscript', 'local_max', 'local_min', 'log', 'log10', 'longtobyte', 'longtochar', 'longtocharacter', 'longtoint', 'longtointeger', 'longtoshort', 'lspoly', 'lspoly_n', 'mask', 'max', 'maxind', 'min', 'minind', 'mixed_layer_depth', 'mixhum_ptd', 'mixhum_ptrh', 'mjo_cross_coh2pha', 'mjo_cross_segment', 'moc_globe_atl', 'monthday', 'natgrid', 'natgridd', 'natgrids', 'ncargpath', 'ncargversion', 'ndctodata', 'ndtooned', 'new', 'NewList', 'ngezlogo', 'nggcog', 'nggetp', 'nglogo', 'ngsetp', 'NhlAddAnnotation', 'NhlAddData', 'NhlAddOverlay', 'NhlAddPrimitive', 'NhlAppGetDefaultParentId', 'NhlChangeWorkstation', 'NhlClassName', 'NhlClearWorkstation', 'NhlDataPolygon', 'NhlDataPolyline', 'NhlDataPolymarker', 'NhlDataToNDC', 'NhlDestroy', 'NhlDraw', 'NhlFrame', 'NhlFreeColor', 'NhlGetBB', 'NhlGetClassResources', 'NhlGetErrorObjectId', 'NhlGetNamedColorIndex', 'NhlGetParentId', 'NhlGetParentWorkstation', 'NhlGetWorkspaceObjectId', 'NhlIsAllocatedColor', 'NhlIsApp', 'NhlIsDataComm', 'NhlIsDataItem', 'NhlIsDataSpec', 'NhlIsTransform', 'NhlIsView', 'NhlIsWorkstation', 'NhlName', 'NhlNDCPolygon', 'NhlNDCPolyline', 'NhlNDCPolymarker', 'NhlNDCToData', 'NhlNewColor', 'NhlNewDashPattern', 'NhlNewMarker', 'NhlPalGetDefined', 'NhlRemoveAnnotation', 'NhlRemoveData', 'NhlRemoveOverlay', 'NhlRemovePrimitive', 'NhlSetColor', 'NhlSetDashPattern', 'NhlSetMarker', 'NhlUpdateData', 'NhlUpdateWorkstation', 'nice_mnmxintvl', 'nngetaspectd', 'nngetaspects', 'nngetp', 'nngetsloped', 'nngetslopes', 'nngetwts', 'nngetwtsd', 'nnpnt', 'nnpntd', 'nnpntend', 'nnpntendd', 'nnpntinit', 'nnpntinitd', 'nnpntinits', 'nnpnts', 'nnsetp', 'num', 'obj_anal_ic', 'omega_ccm', 'onedtond', 'overlay', 'paleo_outline', 'pdfxy_bin', 'poisson_grid_fill', 'pop_remap', 'potmp_insitu_ocn', 'prcwater_dp', 'pres2hybrid', 'pres_hybrid_ccm', 'pres_sigma', 'print', 'print_table', 'printFileVarSummary', 'printVarSummary', 'product', 'pslec', 'pslhor', 'pslhyp', 'qsort', 'rand', 'random_chi', 'random_gamma', 'random_normal', 'random_setallseed', 'random_uniform', 'rcm2points', 'rcm2rgrid', 'rdsstoi', 'read_colormap_file', 'reg_multlin', 'regcoef', 'regCoef_n', 'regline', 'relhum', 'replace_ieeenan', 'reshape', 'reshape_ind', 'rgba_to_color_index', 'rgbhls', 'rgbhsv', 'rgbyiq', 'rgrid2rcm', 'rhomb_trunc', 'rip_cape_2d', 'rip_cape_3d', 'round', 'rtest', 'runave', 'runave_n', 'set_default_fillvalue', 'set_sphere_radius', 'setfileoption', 'sfvp2uvf', 'sfvp2uvg', 'shaec', 'shagc', 'shgetnp', 'shgetp', 'shgrid', 'shorttobyte', 'shorttochar', 'shorttocharacter', 'show_ascii', 'shsec', 'shsetp', 'shsgc', 'shsgc_R42', 'sigma2hybrid', 'simpeq', 'simpne', 'sin', 'sindex_yrmo', 'sinh', 'sizeof', 'sleep', 'smth9', 'snindex_yrmo', 'solve_linsys', 'span_color_indexes', 'span_color_rgba', 'sparse_matrix_mult', 'spcorr', 'spcorr_n', 'specx_anal', 'specxy_anal', 'spei', 'sprintf', 'sprinti', 'sqrt', 'sqsort', 'srand', 'stat2', 'stat4', 'stat_medrng', 'stat_trim', 'status_exit', 'stdatmus_p2tdz', 'stdatmus_z2tdp', 'stddev', 'str_capital', 'str_concat', 'str_fields_count', 'str_get_cols', 'str_get_dq', 'str_get_field', 'str_get_nl', 'str_get_sq', 'str_get_tab', 'str_index_of_substr', 'str_insert', 'str_is_blank', 'str_join', 'str_left_strip', 'str_lower', 'str_match', 'str_match_ic', 'str_match_ic_regex', 'str_match_ind', 'str_match_ind_ic', 'str_match_ind_ic_regex', 'str_match_ind_regex', 'str_match_regex', 'str_right_strip', 'str_split', 'str_split_by_length', 'str_split_csv', 'str_squeeze', 'str_strip', 'str_sub_str', 'str_switch', 'str_upper', 'stringtochar', 'stringtocharacter', 'stringtodouble', 'stringtofloat', 'stringtoint', 'stringtointeger', 'stringtolong', 'stringtoshort', 'strlen', 'student_t', 'sum', 'svd_lapack', 'svdcov', 'svdcov_sv', 'svdstd', 'svdstd_sv', 'system', 'systemfunc', 'tan', 'tanh', 'taper', 'taper_n', 'tdclrs', 'tdctri', 'tdcudp', 'tdcurv', 'tddtri', 'tdez2d', 'tdez3d', 'tdgetp', 'tdgrds', 'tdgrid', 'tdgtrs', 'tdinit', 'tditri', 'tdlbla', 'tdlblp', 'tdlbls', 'tdline', 'tdlndp', 'tdlnpa', 'tdlpdp', 'tdmtri', 'tdotri', 'tdpara', 'tdplch', 'tdprpa', 'tdprpi', 'tdprpt', 'tdsetp', 'tdsort', 'tdstri', 'tdstrs', 'tdttri', 'thornthwaite', 'tobyte', 'tochar', 'todouble', 'tofloat', 'toint', 'toint64', 'tointeger', 'tolong', 'toshort', 'tosigned', 'tostring', 'tostring_with_format', 'totype', 'toubyte', 'touint', 'touint64', 'toulong', 'tounsigned', 'toushort', 'trend_manken', 'tri_trunc', 'triple2grid', 'triple2grid2d', 'trop_wmo', 'ttest', 'typeof', 'undef', 'unique_string', 'update', 'ushorttoint', 'ut_calendar', 'ut_inv_calendar', 'utm2latlon', 'uv2dv_cfd', 'uv2dvf', 'uv2dvg', 'uv2sfvpf', 'uv2sfvpg', 'uv2vr_cfd', 'uv2vrdvf', 'uv2vrdvg', 'uv2vrf', 'uv2vrg', 'v5d_close', 'v5d_create', 'v5d_setLowLev', 'v5d_setUnits', 'v5d_write', 'v5d_write_var', 'variance', 'vhaec', 'vhagc', 'vhsec', 'vhsgc', 'vibeta', 'vinth2p', 'vinth2p_ecmwf', 'vinth2p_ecmwf_nodes', 'vinth2p_nodes', 'vintp2p_ecmwf', 'vr2uvf', 'vr2uvg', 'vrdv2uvf', 'vrdv2uvg', 'wavelet', 'wavelet_default', 'weibull', 'wgt_area_smooth', 'wgt_areaave', 'wgt_areaave2', 'wgt_arearmse', 'wgt_arearmse2', 'wgt_areasum2', 'wgt_runave', 'wgt_runave_n', 'wgt_vert_avg_beta', 'wgt_volave', 'wgt_volave_ccm', 'wgt_volrmse', 'wgt_volrmse_ccm', 'where', 'wk_smooth121', 'wmbarb', 'wmbarbmap', 'wmdrft', 'wmgetp', 'wmlabs', 'wmsetp', 'wmstnm', 'wmvect', 'wmvectmap', 'wmvlbl', 'wrf_avo', 'wrf_cape_2d', 'wrf_cape_3d', 'wrf_dbz', 'wrf_eth', 'wrf_helicity', 'wrf_ij_to_ll', 'wrf_interp_1d', 'wrf_interp_2d_xy', 'wrf_interp_3d_z', 'wrf_latlon_to_ij', 'wrf_ll_to_ij', 'wrf_omega', 'wrf_pvo', 'wrf_rh', 'wrf_slp', 'wrf_smooth_2d', 'wrf_td', 'wrf_tk', 'wrf_updraft_helicity', 'wrf_uvmet', 'wrf_virtual_temp', 'wrf_wetbulb', 'wrf_wps_close_int', 'wrf_wps_open_int', 'wrf_wps_rddata_int', 'wrf_wps_rdhead_int', 'wrf_wps_read_int', 'wrf_wps_write_int', 'write_matrix', 'write_table', 'yiqrgb', 'z2geouv', 'zonal_mpsi', 'addfiles_GetVar', 'advect_variable', 'area_conserve_remap_Wrap', 'area_hi2lores_Wrap', 'array_append_record', 'assignFillValue', 'byte2flt', 'byte2flt_hdf', 'calcDayAnomTLL', 'calcMonAnomLLLT', 'calcMonAnomLLT', 'calcMonAnomTLL', 'calcMonAnomTLLL', 'calculate_monthly_values', 'cd_convert', 'changeCase', 'changeCaseChar', 'clmDayTLL', 'clmDayTLLL', 'clmMon2clmDay', 'clmMonLLLT', 'clmMonLLT', 'clmMonTLL', 'clmMonTLLL', 'closest_val', 'copy_VarAtts', 'copy_VarCoords', 'copy_VarCoords_1', 'copy_VarCoords_2', 'copy_VarMeta', 'copyatt', 'crossp3', 'cshstringtolist', 'cssgrid_Wrap', 'dble2flt', 'decimalPlaces', 'delete_VarAtts', 'dim_avg_n_Wrap', 'dim_avg_wgt_n_Wrap', 'dim_avg_wgt_Wrap', 'dim_avg_Wrap', 'dim_cumsum_n_Wrap', 'dim_cumsum_Wrap', 'dim_max_n_Wrap', 'dim_min_n_Wrap', 'dim_rmsd_n_Wrap', 'dim_rmsd_Wrap', 'dim_rmvmean_n_Wrap', 'dim_rmvmean_Wrap', 'dim_rmvmed_n_Wrap', 'dim_rmvmed_Wrap', 'dim_standardize_n_Wrap', 'dim_standardize_Wrap', 'dim_stddev_n_Wrap', 'dim_stddev_Wrap', 'dim_sum_n_Wrap', 'dim_sum_wgt_n_Wrap', 'dim_sum_wgt_Wrap', 'dim_sum_Wrap', 'dim_variance_n_Wrap', 'dim_variance_Wrap', 'dpres_plevel_Wrap', 'dtrend_leftdim', 'dv2uvF_Wrap', 'dv2uvG_Wrap', 'eof_north', 'eofcor_Wrap', 'eofcov_Wrap', 'eofunc_north', 'eofunc_ts_Wrap', 'eofunc_varimax_reorder', 'eofunc_varimax_Wrap', 'eofunc_Wrap', 'epsZero', 'f2fosh_Wrap', 'f2foshv_Wrap', 'f2fsh_Wrap', 'f2fshv_Wrap', 'f2gsh_Wrap', 'f2gshv_Wrap', 'fbindirSwap', 'fbinseqSwap1', 'fbinseqSwap2', 'flt2dble', 'flt2string', 'fo2fsh_Wrap', 'fo2fshv_Wrap', 'g2fsh_Wrap', 'g2fshv_Wrap', 'g2gsh_Wrap', 'g2gshv_Wrap', 'generate_resample_indices', 'generate_sample_indices', 'generate_unique_indices', 'genNormalDist', 'get1Dindex', 'get1Dindex_Collapse', 'get1Dindex_Exclude', 'get_file_suffix', 'GetFillColor', 'GetFillColorIndex', 'getFillValue', 'getind_latlon2d', 'getVarDimNames', 'getVarFillValue', 'grib_stime2itime', 'hyi2hyo_Wrap', 'ilapsF_Wrap', 'ilapsG_Wrap', 'ind_nearest_coord', 'indStrSubset', 'int2dble', 'int2flt', 'int2p_n_Wrap', 'int2p_Wrap', 'isMonotonic', 'isStrSubset', 'latGau', 'latGauWgt', 'latGlobeF', 'latGlobeFo', 'latRegWgt', 'linint1_n_Wrap', 'linint1_Wrap', 'linint2_points_Wrap', 'linint2_Wrap', 'local_max_1d', 'local_min_1d', 'lonFlip', 'lonGlobeF', 'lonGlobeFo', 'lonPivot', 'merge_levels_sfc', 'mod', 'month_to_annual', 'month_to_annual_weighted', 'month_to_season', 'month_to_season12', 'month_to_seasonN', 'monthly_total_to_daily_mean', 'nameDim', 'natgrid_Wrap', 'NewCosWeight', 'niceLatLon2D', 'NormCosWgtGlobe', 'numAsciiCol', 'numAsciiRow', 'numeric2int', 'obj_anal_ic_deprecated', 'obj_anal_ic_Wrap', 'omega_ccm_driver', 'omega_to_w', 'oneDtostring', 'pack_values', 'pattern_cor', 'pdfx', 'pdfxy', 'pdfxy_conform', 'pot_temp', 'pot_vort_hybrid', 'pot_vort_isobaric', 'pres2hybrid_Wrap', 'print_clock', 'printMinMax', 'quadroots', 'rcm2points_Wrap', 'rcm2rgrid_Wrap', 'readAsciiHead', 'readAsciiTable', 'reg_multlin_stats', 'region_ind', 'regline_stats', 'relhum_ttd', 'replaceSingleChar', 'RGBtoCmap', 'rgrid2rcm_Wrap', 'rho_mwjf', 'rm_single_dims', 'rmAnnCycle1D', 'rmInsufData', 'rmMonAnnCycLLLT', 'rmMonAnnCycLLT', 'rmMonAnnCycTLL', 'runave_n_Wrap', 'runave_Wrap', 'short2flt', 'short2flt_hdf', 'shsgc_R42_Wrap', 'sign_f90', 'sign_matlab', 'smth9_Wrap', 'smthClmDayTLL', 'smthClmDayTLLL', 'SqrtCosWeight', 'stat_dispersion', 'static_stability', 'stdMonLLLT', 'stdMonLLT', 'stdMonTLL', 'stdMonTLLL', 'symMinMaxPlt', 'table_attach_columns', 'table_attach_rows', 'time_to_newtime', 'transpose', 'triple2grid_Wrap', 'ut_convert', 'uv2dvF_Wrap', 'uv2dvG_Wrap', 'uv2vrF_Wrap', 'uv2vrG_Wrap', 'vr2uvF_Wrap', 'vr2uvG_Wrap', 'w_to_omega', 'wallClockElapseTime', 'wave_number_spc', 'wgt_areaave_Wrap', 'wgt_runave_leftdim', 'wgt_runave_n_Wrap', 'wgt_runave_Wrap', 'wgt_vertical_n', 'wind_component', 'wind_direction', 'yyyyddd_to_yyyymmdd', 'yyyymm_time', 'yyyymm_to_yyyyfrac', 'yyyymmdd_time', 'yyyymmdd_to_yyyyddd', 'yyyymmdd_to_yyyyfrac', 'yyyymmddhh_time', 'yyyymmddhh_to_yyyyfrac', 'zonal_mpsi_Wrap', 'zonalAve', 'calendar_decode2', 'cd_string', 'kf_filter', 'run_cor', 'time_axis_labels', 'ut_string', 'wrf_contour', 'wrf_map', 'wrf_map_overlay', 'wrf_map_overlays', 'wrf_map_resources', 'wrf_map_zoom', 'wrf_overlay', 'wrf_overlays', 'wrf_user_getvar', 'wrf_user_ij_to_ll', 'wrf_user_intrp2d', 'wrf_user_intrp3d', 'wrf_user_latlon_to_ij', 'wrf_user_list_times', 'wrf_user_ll_to_ij', 'wrf_user_unstagger', 'wrf_user_vert_interp', 'wrf_vector', 'gsn_add_annotation', 'gsn_add_polygon', 'gsn_add_polyline', 'gsn_add_polymarker', 'gsn_add_shapefile_polygons', 'gsn_add_shapefile_polylines', 'gsn_add_shapefile_polymarkers', 'gsn_add_text', 'gsn_attach_plots', 'gsn_blank_plot', 'gsn_contour', 'gsn_contour_map', 'gsn_contour_shade', 'gsn_coordinates', 'gsn_create_labelbar', 'gsn_create_legend', 'gsn_create_text', 'gsn_csm_attach_zonal_means', 'gsn_csm_blank_plot', 'gsn_csm_contour', 'gsn_csm_contour_map', 'gsn_csm_contour_map_ce', 'gsn_csm_contour_map_overlay', 'gsn_csm_contour_map_polar', 'gsn_csm_hov', 'gsn_csm_lat_time', 'gsn_csm_map', 'gsn_csm_map_ce', 'gsn_csm_map_polar', 'gsn_csm_pres_hgt', 'gsn_csm_pres_hgt_streamline', 'gsn_csm_pres_hgt_vector', 'gsn_csm_streamline', 'gsn_csm_streamline_contour_map', 'gsn_csm_streamline_contour_map_ce', 'gsn_csm_streamline_contour_map_polar', 'gsn_csm_streamline_map', 'gsn_csm_streamline_map_ce', 'gsn_csm_streamline_map_polar', 'gsn_csm_streamline_scalar', 'gsn_csm_streamline_scalar_map', 'gsn_csm_streamline_scalar_map_ce', 'gsn_csm_streamline_scalar_map_polar', 'gsn_csm_time_lat', 'gsn_csm_vector', 'gsn_csm_vector_map', 'gsn_csm_vector_map_ce', 'gsn_csm_vector_map_polar', 'gsn_csm_vector_scalar', 'gsn_csm_vector_scalar_map', 'gsn_csm_vector_scalar_map_ce', 'gsn_csm_vector_scalar_map_polar', 'gsn_csm_x2y', 'gsn_csm_x2y2', 'gsn_csm_xy', 'gsn_csm_xy2', 'gsn_csm_xy3', 'gsn_csm_y', 'gsn_define_colormap', 'gsn_draw_colormap', 'gsn_draw_named_colors', 'gsn_histogram', 'gsn_labelbar_ndc', 'gsn_legend_ndc', 'gsn_map', 'gsn_merge_colormaps', 'gsn_open_wks', 'gsn_panel', 'gsn_polygon', 'gsn_polygon_ndc', 'gsn_polyline', 'gsn_polyline_ndc', 'gsn_polymarker', 'gsn_polymarker_ndc', 'gsn_retrieve_colormap', 'gsn_reverse_colormap', 'gsn_streamline', 'gsn_streamline_map', 'gsn_streamline_scalar', 'gsn_streamline_scalar_map', 'gsn_table', 'gsn_text', 'gsn_text_ndc', 'gsn_vector', 'gsn_vector_map', 'gsn_vector_scalar', 'gsn_vector_scalar_map', 'gsn_xy', 'gsn_y', 'hsv2rgb', 'maximize_output', 'namedcolor2rgb', 'namedcolor2rgba', 'reset_device_coordinates', 'span_named_colors'), prefix='\\b'), Name.Builtin), (words(('amDataXF', 'amDataYF', 'amJust', 'amOn', 'amOrthogonalPosF', 'amParallelPosF', 'amResizeNotify', 'amSide', 'amTrackData', 'amViewId', 'amZone', 'appDefaultParent', 'appFileSuffix', 'appResources', 'appSysDir', 'appUsrDir', 'caCopyArrays', 'caXArray', 'caXCast', 'caXMaxV', 'caXMinV', 'caXMissingV', 'caYArray', 'caYCast', 'caYMaxV', 'caYMinV', 'caYMissingV', 'cnCellFillEdgeColor', 'cnCellFillMissingValEdgeColor', 'cnConpackParams', 'cnConstFEnableFill', 'cnConstFLabelAngleF', 'cnConstFLabelBackgroundColor', 'cnConstFLabelConstantSpacingF', 'cnConstFLabelFont', 'cnConstFLabelFontAspectF', 'cnConstFLabelFontColor', 'cnConstFLabelFontHeightF', 'cnConstFLabelFontQuality', 'cnConstFLabelFontThicknessF', 'cnConstFLabelFormat', 'cnConstFLabelFuncCode', 'cnConstFLabelJust', 'cnConstFLabelOn', 'cnConstFLabelOrthogonalPosF', 'cnConstFLabelParallelPosF', 'cnConstFLabelPerimColor', 'cnConstFLabelPerimOn', 'cnConstFLabelPerimSpaceF', 'cnConstFLabelPerimThicknessF', 'cnConstFLabelSide', 'cnConstFLabelString', 'cnConstFLabelTextDirection', 'cnConstFLabelZone', 'cnConstFUseInfoLabelRes', 'cnExplicitLabelBarLabelsOn', 'cnExplicitLegendLabelsOn', 'cnExplicitLineLabelsOn', 'cnFillBackgroundColor', 'cnFillColor', 'cnFillColors', 'cnFillDotSizeF', 'cnFillDrawOrder', 'cnFillMode', 'cnFillOn', 'cnFillOpacityF', 'cnFillPalette', 'cnFillPattern', 'cnFillPatterns', 'cnFillScaleF', 'cnFillScales', 'cnFixFillBleed', 'cnGridBoundFillColor', 'cnGridBoundFillPattern', 'cnGridBoundFillScaleF', 'cnGridBoundPerimColor', 'cnGridBoundPerimDashPattern', 'cnGridBoundPerimOn', 'cnGridBoundPerimThicknessF', 'cnHighLabelAngleF', 'cnHighLabelBackgroundColor', 'cnHighLabelConstantSpacingF', 'cnHighLabelCount', 'cnHighLabelFont', 'cnHighLabelFontAspectF', 'cnHighLabelFontColor', 'cnHighLabelFontHeightF', 'cnHighLabelFontQuality', 'cnHighLabelFontThicknessF', 'cnHighLabelFormat', 'cnHighLabelFuncCode', 'cnHighLabelPerimColor', 'cnHighLabelPerimOn', 'cnHighLabelPerimSpaceF', 'cnHighLabelPerimThicknessF', 'cnHighLabelString', 'cnHighLabelsOn', 'cnHighLowLabelOverlapMode', 'cnHighUseLineLabelRes', 'cnInfoLabelAngleF', 'cnInfoLabelBackgroundColor', 'cnInfoLabelConstantSpacingF', 'cnInfoLabelFont', 'cnInfoLabelFontAspectF', 'cnInfoLabelFontColor', 'cnInfoLabelFontHeightF', 'cnInfoLabelFontQuality', 'cnInfoLabelFontThicknessF', 'cnInfoLabelFormat', 'cnInfoLabelFuncCode', 'cnInfoLabelJust', 'cnInfoLabelOn', 'cnInfoLabelOrthogonalPosF', 'cnInfoLabelParallelPosF', 'cnInfoLabelPerimColor', 'cnInfoLabelPerimOn', 'cnInfoLabelPerimSpaceF', 'cnInfoLabelPerimThicknessF', 'cnInfoLabelSide', 'cnInfoLabelString', 'cnInfoLabelTextDirection', 'cnInfoLabelZone', 'cnLabelBarEndLabelsOn', 'cnLabelBarEndStyle', 'cnLabelDrawOrder', 'cnLabelMasking', 'cnLabelScaleFactorF', 'cnLabelScaleValueF', 'cnLabelScalingMode', 'cnLegendLevelFlags', 'cnLevelCount', 'cnLevelFlag', 'cnLevelFlags', 'cnLevelSelectionMode', 'cnLevelSpacingF', 'cnLevels', 'cnLineColor', 'cnLineColors', 'cnLineDashPattern', 'cnLineDashPatterns', 'cnLineDashSegLenF', 'cnLineDrawOrder', 'cnLineLabelAngleF', 'cnLineLabelBackgroundColor', 'cnLineLabelConstantSpacingF', 'cnLineLabelCount', 'cnLineLabelDensityF', 'cnLineLabelFont', 'cnLineLabelFontAspectF', 'cnLineLabelFontColor', 'cnLineLabelFontColors', 'cnLineLabelFontHeightF', 'cnLineLabelFontQuality', 'cnLineLabelFontThicknessF', 'cnLineLabelFormat', 'cnLineLabelFuncCode', 'cnLineLabelInterval', 'cnLineLabelPerimColor', 'cnLineLabelPerimOn', 'cnLineLabelPerimSpaceF', 'cnLineLabelPerimThicknessF', 'cnLineLabelPlacementMode', 'cnLineLabelStrings', 'cnLineLabelsOn', 'cnLinePalette', 'cnLineThicknessF', 'cnLineThicknesses', 'cnLinesOn', 'cnLowLabelAngleF', 'cnLowLabelBackgroundColor', 'cnLowLabelConstantSpacingF', 'cnLowLabelCount', 'cnLowLabelFont', 'cnLowLabelFontAspectF', 'cnLowLabelFontColor', 'cnLowLabelFontHeightF', 'cnLowLabelFontQuality', 'cnLowLabelFontThicknessF', 'cnLowLabelFormat', 'cnLowLabelFuncCode', 'cnLowLabelPerimColor', 'cnLowLabelPerimOn', 'cnLowLabelPerimSpaceF', 'cnLowLabelPerimThicknessF', 'cnLowLabelString', 'cnLowLabelsOn', 'cnLowUseHighLabelRes', 'cnMaxDataValueFormat', 'cnMaxLevelCount', 'cnMaxLevelValF', 'cnMaxPointDistanceF', 'cnMinLevelValF', 'cnMissingValFillColor', 'cnMissingValFillPattern', 'cnMissingValFillScaleF', 'cnMissingValPerimColor', 'cnMissingValPerimDashPattern', 'cnMissingValPerimGridBoundOn', 'cnMissingValPerimOn', 'cnMissingValPerimThicknessF', 'cnMonoFillColor', 'cnMonoFillPattern', 'cnMonoFillScale', 'cnMonoLevelFlag', 'cnMonoLineColor', 'cnMonoLineDashPattern', 'cnMonoLineLabelFontColor', 'cnMonoLineThickness', 'cnNoDataLabelOn', 'cnNoDataLabelString', 'cnOutOfRangeFillColor', 'cnOutOfRangeFillPattern', 'cnOutOfRangeFillScaleF', 'cnOutOfRangePerimColor', 'cnOutOfRangePerimDashPattern', 'cnOutOfRangePerimOn', 'cnOutOfRangePerimThicknessF', 'cnRasterCellSizeF', 'cnRasterMinCellSizeF', 'cnRasterModeOn', 'cnRasterSampleFactorF', 'cnRasterSmoothingOn', 'cnScalarFieldData', 'cnSmoothingDistanceF', 'cnSmoothingOn', 'cnSmoothingTensionF', 'cnSpanFillPalette', 'cnSpanLinePalette', 'ctCopyTables', 'ctXElementSize', 'ctXMaxV', 'ctXMinV', 'ctXMissingV', 'ctXTable', 'ctXTableLengths', 'ctXTableType', 'ctYElementSize', 'ctYMaxV', 'ctYMinV', 'ctYMissingV', 'ctYTable', 'ctYTableLengths', 'ctYTableType', 'dcDelayCompute', 'errBuffer', 'errFileName', 'errFilePtr', 'errLevel', 'errPrint', 'errUnitNumber', 'gsClipOn', 'gsColors', 'gsEdgeColor', 'gsEdgeDashPattern', 'gsEdgeDashSegLenF', 'gsEdgeThicknessF', 'gsEdgesOn', 'gsFillBackgroundColor', 'gsFillColor', 'gsFillDotSizeF', 'gsFillIndex', 'gsFillLineThicknessF', 'gsFillOpacityF', 'gsFillScaleF', 'gsFont', 'gsFontAspectF', 'gsFontColor', 'gsFontHeightF', 'gsFontOpacityF', 'gsFontQuality', 'gsFontThicknessF', 'gsLineColor', 'gsLineDashPattern', 'gsLineDashSegLenF', 'gsLineLabelConstantSpacingF', 'gsLineLabelFont', 'gsLineLabelFontAspectF', 'gsLineLabelFontColor', 'gsLineLabelFontHeightF', 'gsLineLabelFontQuality', 'gsLineLabelFontThicknessF', 'gsLineLabelFuncCode', 'gsLineLabelString', 'gsLineOpacityF', 'gsLineThicknessF', 'gsMarkerColor', 'gsMarkerIndex', 'gsMarkerOpacityF', 'gsMarkerSizeF', 'gsMarkerThicknessF', 'gsSegments', 'gsTextAngleF', 'gsTextConstantSpacingF', 'gsTextDirection', 'gsTextFuncCode', 'gsTextJustification', 'gsnAboveYRefLineBarColors', 'gsnAboveYRefLineBarFillScales', 'gsnAboveYRefLineBarPatterns', 'gsnAboveYRefLineColor', 'gsnAddCyclic', 'gsnAttachBorderOn', 'gsnAttachPlotsXAxis', 'gsnBelowYRefLineBarColors', 'gsnBelowYRefLineBarFillScales', 'gsnBelowYRefLineBarPatterns', 'gsnBelowYRefLineColor', 'gsnBoxMargin', 'gsnCenterString', 'gsnCenterStringFontColor', 'gsnCenterStringFontHeightF', 'gsnCenterStringFuncCode', 'gsnCenterStringOrthogonalPosF', 'gsnCenterStringParallelPosF', 'gsnContourLineThicknessesScale', 'gsnContourNegLineDashPattern', 'gsnContourPosLineDashPattern', 'gsnContourZeroLineThicknessF', 'gsnDebugWriteFileName', 'gsnDraw', 'gsnFrame', 'gsnHistogramBarWidthPercent', 'gsnHistogramBinIntervals', 'gsnHistogramBinMissing', 'gsnHistogramBinWidth', 'gsnHistogramClassIntervals', 'gsnHistogramCompare', 'gsnHistogramComputePercentages', 'gsnHistogramComputePercentagesNoMissing', 'gsnHistogramDiscreteBinValues', 'gsnHistogramDiscreteClassValues', 'gsnHistogramHorizontal', 'gsnHistogramMinMaxBinsOn', 'gsnHistogramNumberOfBins', 'gsnHistogramPercentSign', 'gsnHistogramSelectNiceIntervals', 'gsnLeftString', 'gsnLeftStringFontColor', 'gsnLeftStringFontHeightF', 'gsnLeftStringFuncCode', 'gsnLeftStringOrthogonalPosF', 'gsnLeftStringParallelPosF', 'gsnMajorLatSpacing', 'gsnMajorLonSpacing', 'gsnMaskLambertConformal', 'gsnMaskLambertConformalOutlineOn', 'gsnMaximize', 'gsnMinorLatSpacing', 'gsnMinorLonSpacing', 'gsnPanelBottom', 'gsnPanelCenter', 'gsnPanelDebug', 'gsnPanelFigureStrings', 'gsnPanelFigureStringsBackgroundFillColor', 'gsnPanelFigureStringsFontHeightF', 'gsnPanelFigureStringsJust', 'gsnPanelFigureStringsPerimOn', 'gsnPanelLabelBar', 'gsnPanelLeft', 'gsnPanelMainFont', 'gsnPanelMainFontColor', 'gsnPanelMainFontHeightF', 'gsnPanelMainString', 'gsnPanelRight', 'gsnPanelRowSpec', 'gsnPanelScalePlotIndex', 'gsnPanelTop', 'gsnPanelXF', 'gsnPanelXWhiteSpacePercent', 'gsnPanelYF', 'gsnPanelYWhiteSpacePercent', 'gsnPaperHeight', 'gsnPaperMargin', 'gsnPaperOrientation', 'gsnPaperWidth', 'gsnPolar', 'gsnPolarLabelDistance', 'gsnPolarLabelFont', 'gsnPolarLabelFontHeightF', 'gsnPolarLabelSpacing', 'gsnPolarTime', 'gsnPolarUT', 'gsnRightString', 'gsnRightStringFontColor', 'gsnRightStringFontHeightF', 'gsnRightStringFuncCode', 'gsnRightStringOrthogonalPosF', 'gsnRightStringParallelPosF', 'gsnScalarContour', 'gsnScale', 'gsnShape', 'gsnSpreadColorEnd', 'gsnSpreadColorStart', 'gsnSpreadColors', 'gsnStringFont', 'gsnStringFontColor', 'gsnStringFontHeightF', 'gsnStringFuncCode', 'gsnTickMarksOn', 'gsnXAxisIrregular2Linear', 'gsnXAxisIrregular2Log', 'gsnXRefLine', 'gsnXRefLineColor', 'gsnXRefLineDashPattern', 'gsnXRefLineThicknessF', 'gsnXYAboveFillColors', 'gsnXYBarChart', 'gsnXYBarChartBarWidth', 'gsnXYBarChartColors', 'gsnXYBarChartColors2', 'gsnXYBarChartFillDotSizeF', 'gsnXYBarChartFillLineThicknessF', 'gsnXYBarChartFillOpacityF', 'gsnXYBarChartFillScaleF', 'gsnXYBarChartOutlineOnly', 'gsnXYBarChartOutlineThicknessF', 'gsnXYBarChartPatterns', 'gsnXYBarChartPatterns2', 'gsnXYBelowFillColors', 'gsnXYFillColors', 'gsnXYFillOpacities', 'gsnXYLeftFillColors', 'gsnXYRightFillColors', 'gsnYAxisIrregular2Linear', 'gsnYAxisIrregular2Log', 'gsnYRefLine', 'gsnYRefLineColor', 'gsnYRefLineColors', 'gsnYRefLineDashPattern', 'gsnYRefLineDashPatterns', 'gsnYRefLineThicknessF', 'gsnYRefLineThicknesses', 'gsnZonalMean', 'gsnZonalMeanXMaxF', 'gsnZonalMeanXMinF', 'gsnZonalMeanYRefLine', 'lbAutoManage', 'lbBottomMarginF', 'lbBoxCount', 'lbBoxEndCapStyle', 'lbBoxFractions', 'lbBoxLineColor', 'lbBoxLineDashPattern', 'lbBoxLineDashSegLenF', 'lbBoxLineThicknessF', 'lbBoxLinesOn', 'lbBoxMajorExtentF', 'lbBoxMinorExtentF', 'lbBoxSeparatorLinesOn', 'lbBoxSizing', 'lbFillBackground', 'lbFillColor', 'lbFillColors', 'lbFillDotSizeF', 'lbFillLineThicknessF', 'lbFillPattern', 'lbFillPatterns', 'lbFillScaleF', 'lbFillScales', 'lbJustification', 'lbLabelAlignment', 'lbLabelAngleF', 'lbLabelAutoStride', 'lbLabelBarOn', 'lbLabelConstantSpacingF', 'lbLabelDirection', 'lbLabelFont', 'lbLabelFontAspectF', 'lbLabelFontColor', 'lbLabelFontHeightF', 'lbLabelFontQuality', 'lbLabelFontThicknessF', 'lbLabelFuncCode', 'lbLabelJust', 'lbLabelOffsetF', 'lbLabelPosition', 'lbLabelStride', 'lbLabelStrings', 'lbLabelsOn', 'lbLeftMarginF', 'lbMaxLabelLenF', 'lbMinLabelSpacingF', 'lbMonoFillColor', 'lbMonoFillPattern', 'lbMonoFillScale', 'lbOrientation', 'lbPerimColor', 'lbPerimDashPattern', 'lbPerimDashSegLenF', 'lbPerimFill', 'lbPerimFillColor', 'lbPerimOn', 'lbPerimThicknessF', 'lbRasterFillOn', 'lbRightMarginF', 'lbTitleAngleF', 'lbTitleConstantSpacingF', 'lbTitleDirection', 'lbTitleExtentF', 'lbTitleFont', 'lbTitleFontAspectF', 'lbTitleFontColor', 'lbTitleFontHeightF', 'lbTitleFontQuality', 'lbTitleFontThicknessF', 'lbTitleFuncCode', 'lbTitleJust', 'lbTitleOffsetF', 'lbTitleOn', 'lbTitlePosition', 'lbTitleString', 'lbTopMarginF', 'lgAutoManage', 'lgBottomMarginF', 'lgBoxBackground', 'lgBoxLineColor', 'lgBoxLineDashPattern', 'lgBoxLineDashSegLenF', 'lgBoxLineThicknessF', 'lgBoxLinesOn', 'lgBoxMajorExtentF', 'lgBoxMinorExtentF', 'lgDashIndex', 'lgDashIndexes', 'lgItemCount', 'lgItemOrder', 'lgItemPlacement', 'lgItemPositions', 'lgItemType', 'lgItemTypes', 'lgJustification', 'lgLabelAlignment', 'lgLabelAngleF', 'lgLabelAutoStride', 'lgLabelConstantSpacingF', 'lgLabelDirection', 'lgLabelFont', 'lgLabelFontAspectF', 'lgLabelFontColor', 'lgLabelFontHeightF', 'lgLabelFontQuality', 'lgLabelFontThicknessF', 'lgLabelFuncCode', 'lgLabelJust', 'lgLabelOffsetF', 'lgLabelPosition', 'lgLabelStride', 'lgLabelStrings', 'lgLabelsOn', 'lgLeftMarginF', 'lgLegendOn', 'lgLineColor', 'lgLineColors', 'lgLineDashSegLenF', 'lgLineDashSegLens', 'lgLineLabelConstantSpacingF', 'lgLineLabelFont', 'lgLineLabelFontAspectF', 'lgLineLabelFontColor', 'lgLineLabelFontColors', 'lgLineLabelFontHeightF', 'lgLineLabelFontHeights', 'lgLineLabelFontQuality', 'lgLineLabelFontThicknessF', 'lgLineLabelFuncCode', 'lgLineLabelStrings', 'lgLineLabelsOn', 'lgLineThicknessF', 'lgLineThicknesses', 'lgMarkerColor', 'lgMarkerColors', 'lgMarkerIndex', 'lgMarkerIndexes', 'lgMarkerSizeF', 'lgMarkerSizes', 'lgMarkerThicknessF', 'lgMarkerThicknesses', 'lgMonoDashIndex', 'lgMonoItemType', 'lgMonoLineColor', 'lgMonoLineDashSegLen', 'lgMonoLineLabelFontColor', 'lgMonoLineLabelFontHeight', 'lgMonoLineThickness', 'lgMonoMarkerColor', 'lgMonoMarkerIndex', 'lgMonoMarkerSize', 'lgMonoMarkerThickness', 'lgOrientation', 'lgPerimColor', 'lgPerimDashPattern', 'lgPerimDashSegLenF', 'lgPerimFill', 'lgPerimFillColor', 'lgPerimOn', 'lgPerimThicknessF', 'lgRightMarginF', 'lgTitleAngleF', 'lgTitleConstantSpacingF', 'lgTitleDirection', 'lgTitleExtentF', 'lgTitleFont', 'lgTitleFontAspectF', 'lgTitleFontColor', 'lgTitleFontHeightF', 'lgTitleFontQuality', 'lgTitleFontThicknessF', 'lgTitleFuncCode', 'lgTitleJust', 'lgTitleOffsetF', 'lgTitleOn', 'lgTitlePosition', 'lgTitleString', 'lgTopMarginF', 'mpAreaGroupCount', 'mpAreaMaskingOn', 'mpAreaNames', 'mpAreaTypes', 'mpBottomAngleF', 'mpBottomMapPosF', 'mpBottomNDCF', 'mpBottomNPCF', 'mpBottomPointLatF', 'mpBottomPointLonF', 'mpBottomWindowF', 'mpCenterLatF', 'mpCenterLonF', 'mpCenterRotF', 'mpCountyLineColor', 'mpCountyLineDashPattern', 'mpCountyLineDashSegLenF', 'mpCountyLineThicknessF', 'mpDataBaseVersion', 'mpDataResolution', 'mpDataSetName', 'mpDefaultFillColor', 'mpDefaultFillPattern', 'mpDefaultFillScaleF', 'mpDynamicAreaGroups', 'mpEllipticalBoundary', 'mpFillAreaSpecifiers', 'mpFillBoundarySets', 'mpFillColor', 'mpFillColors', 'mpFillColors-default', 'mpFillDotSizeF', 'mpFillDrawOrder', 'mpFillOn', 'mpFillPatternBackground', 'mpFillPattern', 'mpFillPatterns', 'mpFillPatterns-default', 'mpFillScaleF', 'mpFillScales', 'mpFillScales-default', 'mpFixedAreaGroups', 'mpGeophysicalLineColor', 'mpGeophysicalLineDashPattern', 'mpGeophysicalLineDashSegLenF', 'mpGeophysicalLineThicknessF', 'mpGreatCircleLinesOn', 'mpGridAndLimbDrawOrder', 'mpGridAndLimbOn', 'mpGridLatSpacingF', 'mpGridLineColor', 'mpGridLineDashPattern', 'mpGridLineDashSegLenF', 'mpGridLineThicknessF', 'mpGridLonSpacingF', 'mpGridMaskMode', 'mpGridMaxLatF', 'mpGridPolarLonSpacingF', 'mpGridSpacingF', 'mpInlandWaterFillColor', 'mpInlandWaterFillPattern', 'mpInlandWaterFillScaleF', 'mpLabelDrawOrder', 'mpLabelFontColor', 'mpLabelFontHeightF', 'mpLabelsOn', 'mpLambertMeridianF', 'mpLambertParallel1F', 'mpLambertParallel2F', 'mpLandFillColor', 'mpLandFillPattern', 'mpLandFillScaleF', 'mpLeftAngleF', 'mpLeftCornerLatF', 'mpLeftCornerLonF', 'mpLeftMapPosF', 'mpLeftNDCF', 'mpLeftNPCF', 'mpLeftPointLatF', 'mpLeftPointLonF', 'mpLeftWindowF', 'mpLimbLineColor', 'mpLimbLineDashPattern', 'mpLimbLineDashSegLenF', 'mpLimbLineThicknessF', 'mpLimitMode', 'mpMaskAreaSpecifiers', 'mpMaskOutlineSpecifiers', 'mpMaxLatF', 'mpMaxLonF', 'mpMinLatF', 'mpMinLonF', 'mpMonoFillColor', 'mpMonoFillPattern', 'mpMonoFillScale', 'mpNationalLineColor', 'mpNationalLineDashPattern', 'mpNationalLineThicknessF', 'mpOceanFillColor', 'mpOceanFillPattern', 'mpOceanFillScaleF', 'mpOutlineBoundarySets', 'mpOutlineDrawOrder', 'mpOutlineMaskingOn', 'mpOutlineOn', 'mpOutlineSpecifiers', 'mpPerimDrawOrder', 'mpPerimLineColor', 'mpPerimLineDashPattern', 'mpPerimLineDashSegLenF', 'mpPerimLineThicknessF', 'mpPerimOn', 'mpPolyMode', 'mpProjection', 'mpProvincialLineColor', 'mpProvincialLineDashPattern', 'mpProvincialLineDashSegLenF', 'mpProvincialLineThicknessF', 'mpRelativeCenterLat', 'mpRelativeCenterLon', 'mpRightAngleF', 'mpRightCornerLatF', 'mpRightCornerLonF', 'mpRightMapPosF', 'mpRightNDCF', 'mpRightNPCF', 'mpRightPointLatF', 'mpRightPointLonF', 'mpRightWindowF', 'mpSatelliteAngle1F', 'mpSatelliteAngle2F', 'mpSatelliteDistF', 'mpShapeMode', 'mpSpecifiedFillColors', 'mpSpecifiedFillDirectIndexing', 'mpSpecifiedFillPatterns', 'mpSpecifiedFillPriority', 'mpSpecifiedFillScales', 'mpTopAngleF', 'mpTopMapPosF', 'mpTopNDCF', 'mpTopNPCF', 'mpTopPointLatF', 'mpTopPointLonF', 'mpTopWindowF', 'mpUSStateLineColor', 'mpUSStateLineDashPattern', 'mpUSStateLineDashSegLenF', 'mpUSStateLineThicknessF', 'pmAnnoManagers', 'pmAnnoViews', 'pmLabelBarDisplayMode', 'pmLabelBarHeightF', 'pmLabelBarKeepAspect', 'pmLabelBarOrthogonalPosF', 'pmLabelBarParallelPosF', 'pmLabelBarSide', 'pmLabelBarWidthF', 'pmLabelBarZone', 'pmLegendDisplayMode', 'pmLegendHeightF', 'pmLegendKeepAspect', 'pmLegendOrthogonalPosF', 'pmLegendParallelPosF', 'pmLegendSide', 'pmLegendWidthF', 'pmLegendZone', 'pmOverlaySequenceIds', 'pmTickMarkDisplayMode', 'pmTickMarkZone', 'pmTitleDisplayMode', 'pmTitleZone', 'prGraphicStyle', 'prPolyType', 'prXArray', 'prYArray', 'sfCopyData', 'sfDataArray', 'sfDataMaxV', 'sfDataMinV', 'sfElementNodes', 'sfExchangeDimensions', 'sfFirstNodeIndex', 'sfMissingValueV', 'sfXArray', 'sfXCActualEndF', 'sfXCActualStartF', 'sfXCEndIndex', 'sfXCEndSubsetV', 'sfXCEndV', 'sfXCStartIndex', 'sfXCStartSubsetV', 'sfXCStartV', 'sfXCStride', 'sfXCellBounds', 'sfYArray', 'sfYCActualEndF', 'sfYCActualStartF', 'sfYCEndIndex', 'sfYCEndSubsetV', 'sfYCEndV', 'sfYCStartIndex', 'sfYCStartSubsetV', 'sfYCStartV', 'sfYCStride', 'sfYCellBounds', 'stArrowLengthF', 'stArrowStride', 'stCrossoverCheckCount', 'stExplicitLabelBarLabelsOn', 'stLabelBarEndLabelsOn', 'stLabelFormat', 'stLengthCheckCount', 'stLevelColors', 'stLevelCount', 'stLevelPalette', 'stLevelSelectionMode', 'stLevelSpacingF', 'stLevels', 'stLineColor', 'stLineOpacityF', 'stLineStartStride', 'stLineThicknessF', 'stMapDirection', 'stMaxLevelCount', 'stMaxLevelValF', 'stMinArrowSpacingF', 'stMinDistanceF', 'stMinLevelValF', 'stMinLineSpacingF', 'stMinStepFactorF', 'stMonoLineColor', 'stNoDataLabelOn', 'stNoDataLabelString', 'stScalarFieldData', 'stScalarMissingValColor', 'stSpanLevelPalette', 'stStepSizeF', 'stStreamlineDrawOrder', 'stUseScalarArray', 'stVectorFieldData', 'stZeroFLabelAngleF', 'stZeroFLabelBackgroundColor', 'stZeroFLabelConstantSpacingF', 'stZeroFLabelFont', 'stZeroFLabelFontAspectF', 'stZeroFLabelFontColor', 'stZeroFLabelFontHeightF', 'stZeroFLabelFontQuality', 'stZeroFLabelFontThicknessF', 'stZeroFLabelFuncCode', 'stZeroFLabelJust', 'stZeroFLabelOn', 'stZeroFLabelOrthogonalPosF', 'stZeroFLabelParallelPosF', 'stZeroFLabelPerimColor', 'stZeroFLabelPerimOn', 'stZeroFLabelPerimSpaceF', 'stZeroFLabelPerimThicknessF', 'stZeroFLabelSide', 'stZeroFLabelString', 'stZeroFLabelTextDirection', 'stZeroFLabelZone', 'tfDoNDCOverlay', 'tfPlotManagerOn', 'tfPolyDrawList', 'tfPolyDrawOrder', 'tiDeltaF', 'tiMainAngleF', 'tiMainConstantSpacingF', 'tiMainDirection', 'tiMainFont', 'tiMainFontAspectF', 'tiMainFontColor', 'tiMainFontHeightF', 'tiMainFontQuality', 'tiMainFontThicknessF', 'tiMainFuncCode', 'tiMainJust', 'tiMainOffsetXF', 'tiMainOffsetYF', 'tiMainOn', 'tiMainPosition', 'tiMainSide', 'tiMainString', 'tiUseMainAttributes', 'tiXAxisAngleF', 'tiXAxisConstantSpacingF', 'tiXAxisDirection', 'tiXAxisFont', 'tiXAxisFontAspectF', 'tiXAxisFontColor', 'tiXAxisFontHeightF', 'tiXAxisFontQuality', 'tiXAxisFontThicknessF', 'tiXAxisFuncCode', 'tiXAxisJust', 'tiXAxisOffsetXF', 'tiXAxisOffsetYF', 'tiXAxisOn', 'tiXAxisPosition', 'tiXAxisSide', 'tiXAxisString', 'tiYAxisAngleF', 'tiYAxisConstantSpacingF', 'tiYAxisDirection', 'tiYAxisFont', 'tiYAxisFontAspectF', 'tiYAxisFontColor', 'tiYAxisFontHeightF', 'tiYAxisFontQuality', 'tiYAxisFontThicknessF', 'tiYAxisFuncCode', 'tiYAxisJust', 'tiYAxisOffsetXF', 'tiYAxisOffsetYF', 'tiYAxisOn', 'tiYAxisPosition', 'tiYAxisSide', 'tiYAxisString', 'tmBorderLineColor', 'tmBorderThicknessF', 'tmEqualizeXYSizes', 'tmLabelAutoStride', 'tmSciNoteCutoff', 'tmXBAutoPrecision', 'tmXBBorderOn', 'tmXBDataLeftF', 'tmXBDataRightF', 'tmXBFormat', 'tmXBIrrTensionF', 'tmXBIrregularPoints', 'tmXBLabelAngleF', 'tmXBLabelConstantSpacingF', 'tmXBLabelDeltaF', 'tmXBLabelDirection', 'tmXBLabelFont', 'tmXBLabelFontAspectF', 'tmXBLabelFontColor', 'tmXBLabelFontHeightF', 'tmXBLabelFontQuality', 'tmXBLabelFontThicknessF', 'tmXBLabelFuncCode', 'tmXBLabelJust', 'tmXBLabelStride', 'tmXBLabels', 'tmXBLabelsOn', 'tmXBMajorLengthF', 'tmXBMajorLineColor', 'tmXBMajorOutwardLengthF', 'tmXBMajorThicknessF', 'tmXBMaxLabelLenF', 'tmXBMaxTicks', 'tmXBMinLabelSpacingF', 'tmXBMinorLengthF', 'tmXBMinorLineColor', 'tmXBMinorOn', 'tmXBMinorOutwardLengthF', 'tmXBMinorPerMajor', 'tmXBMinorThicknessF', 'tmXBMinorValues', 'tmXBMode', 'tmXBOn', 'tmXBPrecision', 'tmXBStyle', 'tmXBTickEndF', 'tmXBTickSpacingF', 'tmXBTickStartF', 'tmXBValues', 'tmXMajorGrid', 'tmXMajorGridLineColor', 'tmXMajorGridLineDashPattern', 'tmXMajorGridThicknessF', 'tmXMinorGrid', 'tmXMinorGridLineColor', 'tmXMinorGridLineDashPattern', 'tmXMinorGridThicknessF', 'tmXTAutoPrecision', 'tmXTBorderOn', 'tmXTDataLeftF', 'tmXTDataRightF', 'tmXTFormat', 'tmXTIrrTensionF', 'tmXTIrregularPoints', 'tmXTLabelAngleF', 'tmXTLabelConstantSpacingF', 'tmXTLabelDeltaF', 'tmXTLabelDirection', 'tmXTLabelFont', 'tmXTLabelFontAspectF', 'tmXTLabelFontColor', 'tmXTLabelFontHeightF', 'tmXTLabelFontQuality', 'tmXTLabelFontThicknessF', 'tmXTLabelFuncCode', 'tmXTLabelJust', 'tmXTLabelStride', 'tmXTLabels', 'tmXTLabelsOn', 'tmXTMajorLengthF', 'tmXTMajorLineColor', 'tmXTMajorOutwardLengthF', 'tmXTMajorThicknessF', 'tmXTMaxLabelLenF', 'tmXTMaxTicks', 'tmXTMinLabelSpacingF', 'tmXTMinorLengthF', 'tmXTMinorLineColor', 'tmXTMinorOn', 'tmXTMinorOutwardLengthF', 'tmXTMinorPerMajor', 'tmXTMinorThicknessF', 'tmXTMinorValues', 'tmXTMode', 'tmXTOn', 'tmXTPrecision', 'tmXTStyle', 'tmXTTickEndF', 'tmXTTickSpacingF', 'tmXTTickStartF', 'tmXTValues', 'tmXUseBottom', 'tmYLAutoPrecision', 'tmYLBorderOn', 'tmYLDataBottomF', 'tmYLDataTopF', 'tmYLFormat', 'tmYLIrrTensionF', 'tmYLIrregularPoints', 'tmYLLabelAngleF', 'tmYLLabelConstantSpacingF', 'tmYLLabelDeltaF', 'tmYLLabelDirection', 'tmYLLabelFont', 'tmYLLabelFontAspectF', 'tmYLLabelFontColor', 'tmYLLabelFontHeightF', 'tmYLLabelFontQuality', 'tmYLLabelFontThicknessF', 'tmYLLabelFuncCode', 'tmYLLabelJust', 'tmYLLabelStride', 'tmYLLabels', 'tmYLLabelsOn', 'tmYLMajorLengthF', 'tmYLMajorLineColor', 'tmYLMajorOutwardLengthF', 'tmYLMajorThicknessF', 'tmYLMaxLabelLenF', 'tmYLMaxTicks', 'tmYLMinLabelSpacingF', 'tmYLMinorLengthF', 'tmYLMinorLineColor', 'tmYLMinorOn', 'tmYLMinorOutwardLengthF', 'tmYLMinorPerMajor', 'tmYLMinorThicknessF', 'tmYLMinorValues', 'tmYLMode', 'tmYLOn', 'tmYLPrecision', 'tmYLStyle', 'tmYLTickEndF', 'tmYLTickSpacingF', 'tmYLTickStartF', 'tmYLValues', 'tmYMajorGrid', 'tmYMajorGridLineColor', 'tmYMajorGridLineDashPattern', 'tmYMajorGridThicknessF', 'tmYMinorGrid', 'tmYMinorGridLineColor', 'tmYMinorGridLineDashPattern', 'tmYMinorGridThicknessF', 'tmYRAutoPrecision', 'tmYRBorderOn', 'tmYRDataBottomF', 'tmYRDataTopF', 'tmYRFormat', 'tmYRIrrTensionF', 'tmYRIrregularPoints', 'tmYRLabelAngleF', 'tmYRLabelConstantSpacingF', 'tmYRLabelDeltaF', 'tmYRLabelDirection', 'tmYRLabelFont', 'tmYRLabelFontAspectF', 'tmYRLabelFontColor', 'tmYRLabelFontHeightF', 'tmYRLabelFontQuality', 'tmYRLabelFontThicknessF', 'tmYRLabelFuncCode', 'tmYRLabelJust', 'tmYRLabelStride', 'tmYRLabels', 'tmYRLabelsOn', 'tmYRMajorLengthF', 'tmYRMajorLineColor', 'tmYRMajorOutwardLengthF', 'tmYRMajorThicknessF', 'tmYRMaxLabelLenF', 'tmYRMaxTicks', 'tmYRMinLabelSpacingF', 'tmYRMinorLengthF', 'tmYRMinorLineColor', 'tmYRMinorOn', 'tmYRMinorOutwardLengthF', 'tmYRMinorPerMajor', 'tmYRMinorThicknessF', 'tmYRMinorValues', 'tmYRMode', 'tmYROn', 'tmYRPrecision', 'tmYRStyle', 'tmYRTickEndF', 'tmYRTickSpacingF', 'tmYRTickStartF', 'tmYRValues', 'tmYUseLeft', 'trGridType', 'trLineInterpolationOn', 'trXAxisType', 'trXCoordPoints', 'trXInterPoints', 'trXLog', 'trXMaxF', 'trXMinF', 'trXReverse', 'trXSamples', 'trXTensionF', 'trYAxisType', 'trYCoordPoints', 'trYInterPoints', 'trYLog', 'trYMaxF', 'trYMinF', 'trYReverse', 'trYSamples', 'trYTensionF', 'txAngleF', 'txBackgroundFillColor', 'txConstantSpacingF', 'txDirection', 'txFont', 'HLU-Fonts', 'txFontAspectF', 'txFontColor', 'txFontHeightF', 'txFontOpacityF', 'txFontQuality', 'txFontThicknessF', 'txFuncCode', 'txJust', 'txPerimColor', 'txPerimDashLengthF', 'txPerimDashPattern', 'txPerimOn', 'txPerimSpaceF', 'txPerimThicknessF', 'txPosXF', 'txPosYF', 'txString', 'vcExplicitLabelBarLabelsOn', 'vcFillArrowEdgeColor', 'vcFillArrowEdgeThicknessF', 'vcFillArrowFillColor', 'vcFillArrowHeadInteriorXF', 'vcFillArrowHeadMinFracXF', 'vcFillArrowHeadMinFracYF', 'vcFillArrowHeadXF', 'vcFillArrowHeadYF', 'vcFillArrowMinFracWidthF', 'vcFillArrowWidthF', 'vcFillArrowsOn', 'vcFillOverEdge', 'vcGlyphOpacityF', 'vcGlyphStyle', 'vcLabelBarEndLabelsOn', 'vcLabelFontColor', 'vcLabelFontHeightF', 'vcLabelsOn', 'vcLabelsUseVectorColor', 'vcLevelColors', 'vcLevelCount', 'vcLevelPalette', 'vcLevelSelectionMode', 'vcLevelSpacingF', 'vcLevels', 'vcLineArrowColor', 'vcLineArrowHeadMaxSizeF', 'vcLineArrowHeadMinSizeF', 'vcLineArrowThicknessF', 'vcMagnitudeFormat', 'vcMagnitudeScaleFactorF', 'vcMagnitudeScaleValueF', 'vcMagnitudeScalingMode', 'vcMapDirection', 'vcMaxLevelCount', 'vcMaxLevelValF', 'vcMaxMagnitudeF', 'vcMinAnnoAngleF', 'vcMinAnnoArrowAngleF', 'vcMinAnnoArrowEdgeColor', 'vcMinAnnoArrowFillColor', 'vcMinAnnoArrowLineColor', 'vcMinAnnoArrowMinOffsetF', 'vcMinAnnoArrowSpaceF', 'vcMinAnnoArrowUseVecColor', 'vcMinAnnoBackgroundColor', 'vcMinAnnoConstantSpacingF', 'vcMinAnnoExplicitMagnitudeF', 'vcMinAnnoFont', 'vcMinAnnoFontAspectF', 'vcMinAnnoFontColor', 'vcMinAnnoFontHeightF', 'vcMinAnnoFontQuality', 'vcMinAnnoFontThicknessF', 'vcMinAnnoFuncCode', 'vcMinAnnoJust', 'vcMinAnnoOn', 'vcMinAnnoOrientation', 'vcMinAnnoOrthogonalPosF', 'vcMinAnnoParallelPosF', 'vcMinAnnoPerimColor', 'vcMinAnnoPerimOn', 'vcMinAnnoPerimSpaceF', 'vcMinAnnoPerimThicknessF', 'vcMinAnnoSide', 'vcMinAnnoString1', 'vcMinAnnoString1On', 'vcMinAnnoString2', 'vcMinAnnoString2On', 'vcMinAnnoTextDirection', 'vcMinAnnoZone', 'vcMinDistanceF', 'vcMinFracLengthF', 'vcMinLevelValF', 'vcMinMagnitudeF', 'vcMonoFillArrowEdgeColor', 'vcMonoFillArrowFillColor', 'vcMonoLineArrowColor', 'vcMonoWindBarbColor', 'vcNoDataLabelOn', 'vcNoDataLabelString', 'vcPositionMode', 'vcRefAnnoAngleF', 'vcRefAnnoArrowAngleF', 'vcRefAnnoArrowEdgeColor', 'vcRefAnnoArrowFillColor', 'vcRefAnnoArrowLineColor', 'vcRefAnnoArrowMinOffsetF', 'vcRefAnnoArrowSpaceF', 'vcRefAnnoArrowUseVecColor', 'vcRefAnnoBackgroundColor', 'vcRefAnnoConstantSpacingF', 'vcRefAnnoExplicitMagnitudeF', 'vcRefAnnoFont', 'vcRefAnnoFontAspectF', 'vcRefAnnoFontColor', 'vcRefAnnoFontHeightF', 'vcRefAnnoFontQuality', 'vcRefAnnoFontThicknessF', 'vcRefAnnoFuncCode', 'vcRefAnnoJust', 'vcRefAnnoOn', 'vcRefAnnoOrientation', 'vcRefAnnoOrthogonalPosF', 'vcRefAnnoParallelPosF', 'vcRefAnnoPerimColor', 'vcRefAnnoPerimOn', 'vcRefAnnoPerimSpaceF', 'vcRefAnnoPerimThicknessF', 'vcRefAnnoSide', 'vcRefAnnoString1', 'vcRefAnnoString1On', 'vcRefAnnoString2', 'vcRefAnnoString2On', 'vcRefAnnoTextDirection', 'vcRefAnnoZone', 'vcRefLengthF', 'vcRefMagnitudeF', 'vcScalarFieldData', 'vcScalarMissingValColor', 'vcScalarValueFormat', 'vcScalarValueScaleFactorF', 'vcScalarValueScaleValueF', 'vcScalarValueScalingMode', 'vcSpanLevelPalette', 'vcUseRefAnnoRes', 'vcUseScalarArray', 'vcVectorDrawOrder', 'vcVectorFieldData', 'vcWindBarbCalmCircleSizeF', 'vcWindBarbColor', 'vcWindBarbLineThicknessF', 'vcWindBarbScaleFactorF', 'vcWindBarbTickAngleF', 'vcWindBarbTickLengthF', 'vcWindBarbTickSpacingF', 'vcZeroFLabelAngleF', 'vcZeroFLabelBackgroundColor', 'vcZeroFLabelConstantSpacingF', 'vcZeroFLabelFont', 'vcZeroFLabelFontAspectF', 'vcZeroFLabelFontColor', 'vcZeroFLabelFontHeightF', 'vcZeroFLabelFontQuality', 'vcZeroFLabelFontThicknessF', 'vcZeroFLabelFuncCode', 'vcZeroFLabelJust', 'vcZeroFLabelOn', 'vcZeroFLabelOrthogonalPosF', 'vcZeroFLabelParallelPosF', 'vcZeroFLabelPerimColor', 'vcZeroFLabelPerimOn', 'vcZeroFLabelPerimSpaceF', 'vcZeroFLabelPerimThicknessF', 'vcZeroFLabelSide', 'vcZeroFLabelString', 'vcZeroFLabelTextDirection', 'vcZeroFLabelZone', 'vfCopyData', 'vfDataArray', 'vfExchangeDimensions', 'vfExchangeUVData', 'vfMagMaxV', 'vfMagMinV', 'vfMissingUValueV', 'vfMissingVValueV', 'vfPolarData', 'vfSingleMissingValue', 'vfUDataArray', 'vfUMaxV', 'vfUMinV', 'vfVDataArray', 'vfVMaxV', 'vfVMinV', 'vfXArray', 'vfXCActualEndF', 'vfXCActualStartF', 'vfXCEndIndex', 'vfXCEndSubsetV', 'vfXCEndV', 'vfXCStartIndex', 'vfXCStartSubsetV', 'vfXCStartV', 'vfXCStride', 'vfYArray', 'vfYCActualEndF', 'vfYCActualStartF', 'vfYCEndIndex', 'vfYCEndSubsetV', 'vfYCEndV', 'vfYCStartIndex', 'vfYCStartSubsetV', 'vfYCStartV', 'vfYCStride', 'vpAnnoManagerId', 'vpClipOn', 'vpHeightF', 'vpKeepAspect', 'vpOn', 'vpUseSegments', 'vpWidthF', 'vpXF', 'vpYF', 'wkAntiAlias', 'wkBackgroundColor', 'wkBackgroundOpacityF', 'wkColorMapLen', 'wkColorMap', 'wkColorModel', 'wkDashTableLength', 'wkDefGraphicStyleId', 'wkDeviceLowerX', 'wkDeviceLowerY', 'wkDeviceUpperX', 'wkDeviceUpperY', 'wkFileName', 'wkFillTableLength', 'wkForegroundColor', 'wkFormat', 'wkFullBackground', 'wkGksWorkId', 'wkHeight', 'wkMarkerTableLength', 'wkMetaName', 'wkOrientation', 'wkPDFFileName', 'wkPDFFormat', 'wkPDFResolution', 'wkPSFileName', 'wkPSFormat', 'wkPSResolution', 'wkPaperHeightF', 'wkPaperSize', 'wkPaperWidthF', 'wkPause', 'wkTopLevelViews', 'wkViews', 'wkVisualType', 'wkWidth', 'wkWindowId', 'wkXColorMode', 'wsCurrentSize', 'wsMaximumSize', 'wsThresholdSize', 'xyComputeXMax', 'xyComputeXMin', 'xyComputeYMax', 'xyComputeYMin', 'xyCoordData', 'xyCoordDataSpec', 'xyCurveDrawOrder', 'xyDashPattern', 'xyDashPatterns', 'xyExplicitLabels', 'xyExplicitLegendLabels', 'xyLabelMode', 'xyLineColor', 'xyLineColors', 'xyLineDashSegLenF', 'xyLineLabelConstantSpacingF', 'xyLineLabelFont', 'xyLineLabelFontAspectF', 'xyLineLabelFontColor', 'xyLineLabelFontColors', 'xyLineLabelFontHeightF', 'xyLineLabelFontQuality', 'xyLineLabelFontThicknessF', 'xyLineLabelFuncCode', 'xyLineThicknessF', 'xyLineThicknesses', 'xyMarkLineMode', 'xyMarkLineModes', 'xyMarker', 'xyMarkerColor', 'xyMarkerColors', 'xyMarkerSizeF', 'xyMarkerSizes', 'xyMarkerThicknessF', 'xyMarkerThicknesses', 'xyMarkers', 'xyMonoDashPattern', 'xyMonoLineColor', 'xyMonoLineLabelFontColor', 'xyMonoLineThickness', 'xyMonoMarkLineMode', 'xyMonoMarker', 'xyMonoMarkerColor', 'xyMonoMarkerSize', 'xyMonoMarkerThickness', 'xyXIrrTensionF', 'xyXIrregularPoints', 'xyXStyle', 'xyYIrrTensionF', 'xyYIrregularPoints', 'xyYStyle'), prefix='\\b'), Name.Builtin), ('\\.(True|False)\\.', Name.Builtin), ('\\.(eq|ne|lt|le|gt|ge|not|and|or|xor)\\.', Operator.Word)], 'strings': [('(?s)"(\\\\\\\\|\\\\[0-7]+|\\\\.|[^"\\\\])*"', String.Double)], 'nums': [('\\d+(?![.e])(_[a-z]\\w+)?', Number.Integer), ('[+-]?\\d*\\.\\d+(e[-+]?\\d+)?(_[a-z]\\w+)?', Number.Float), ('[+-]?\\d+\\.\\d*(e[-+]?\\d+)?(_[a-z]\\w+)?', Number.Float)]}
  }

  class NimrodLexer {
      + name = 'Nimrod'
      + url = 'http://nim-lang.org/'
      + aliases = ['nimrod', 'nim']
      + filenames = ['*.nim', '*.nimrod']
      + mimetypes = ['text/x-nim']
      + version_added = '1.5'
      + flags = re.MULTILINE | re.IGNORECASE
      + keywords = ['addr', 'and', 'as', 'asm', 'bind', 'block', 'break', 'case', 'cast', 'concept', 'const', 'continue', 'converter', 'defer', 'discard', 'distinct', 'div', 'do', 'elif', 'else', 'end', 'enum', 'except', 'export', 'finally', 'for', 'if', 'in', 'yield', 'interface', 'is', 'isnot', 'iterator', 'let', 'mixin', 'mod', 'not', 'notin', 'object', 'of', 'or', 'out', 'ptr', 'raise', 'ref', 'return', 'shl', 'shr', 'static', 'try', 'tuple', 'type', 'using', 'when', 'while', 'xor']
      + keywordsPseudo = ['nil', 'true', 'false']
      + opWords = ['and', 'or', 'not', 'xor', 'shl', 'shr', 'div', 'mod', 'in', 'notin', 'is', 'isnot']
      + types = ['int', 'int8', 'int16', 'int32', 'int64', 'float', 'float32', 'float64', 'bool', 'char', 'range', 'array', 'seq', 'set', 'string']
      + tokens = {'root': [('##\\[', String.Doc, 'doccomment'), ('##.*$', String.Doc), ('#\\[', Comment.Multiline, 'comment'), ('#.*$', Comment), ('\\{\\.', String.Other, 'pragma'), ('[*=><+\\-/@$~&%!?|\\\\\\[\\]]', Operator), ('\\.\\.|\\.|,|\\[\\.|\\.\\]|\\{\\.|\\.\\}|\\(\\.|\\.\\)|\\{|\\}|\\(|\\)|:|\\^|`|;', Punctuation), ('(\\n\\s*)(of)(\\s)', bygroups(Text.Whitespace, Keyword, Text.Whitespace), 'casebranch'), ('(?:[\\w]+)"', String, 'rdqs'), ('"""', String.Double, 'tdqs'), ('"', String, 'dqs'), ("'", String.Char, 'chars'), (f'({underscorize(opWords)})\\b', Operator.Word), ('(proc|func|method|macro|template)(\\s)(?![(\\[\\]])', bygroups(Keyword, Text.Whitespace), 'funcname'), (f'({underscorize(keywords)})\\b', Keyword), ('({})\\b'.format(underscorize(['from', 'import', 'include', 'export'])), Keyword.Namespace), ('(v_?a_?r)\\b', Keyword.Declaration), (f'({underscorize(types)})\\b', Name.Builtin), (f'({underscorize(keywordsPseudo)})\\b', Keyword.Pseudo), ('\\b((?![_\\d])\\w)(((?!_)\\w)|(_(?!_)\\w))*', Name), ("[0-9][0-9_]*(?=([e.]|\\'f(32|64)))", Number.Float, ('float-suffix', 'float-number')), ('0x[a-f0-9][a-f0-9_]*', Number.Hex, 'int-suffix'), ('0b[01][01_]*', Number.Bin, 'int-suffix'), ('0o[0-7][0-7_]*', Number.Oct, 'int-suffix'), ('[0-9][0-9_]*', Number.Integer, 'int-suffix'), ('\\s+', Text.Whitespace), ('.+$', Error)], 'chars': [('\\\\([\\\\abcefnrtvl"\\\']|x[a-f0-9]{2}|[0-9]{1,3})', String.Escape), ("'", String.Char, '#pop'), ('.', String.Char)], 'strings': [('(?<!\\$)\\$(\\d+|#|\\w+)+', String.Interpol), ('[^\\\\\\\'"$\\n]+', String), ('[\\\'"\\\\]', String), ('\\$', String)], 'doccomment': [('[^\\]#]+', String.Doc), ('##\\[', String.Doc, '#push'), ('\\]##', String.Doc, '#pop'), ('[\\]#]', String.Doc)], 'comment': [('[^\\]#]+', Comment.Multiline), ('#\\[', Comment.Multiline, '#push'), ('\\]#', Comment.Multiline, '#pop'), ('[\\]#]', Comment.Multiline)], 'dqs': [('\\\\([\\\\abcefnrtvl"\\\']|\\n|x[a-f0-9]{2}|[0-9]{1,3})', String.Escape), ('"', String, '#pop'), include('strings')], 'rdqs': [('"(?!")', String, '#pop'), ('""', String.Escape), include('strings')], 'tdqs': [('"""', String.Double, '#pop'), include('strings'), ('\\n', String.Double)], 'funcname': [('((?![\\d_])\\w)(((?!_)\\w)|(_(?!_)\\w))*', Name.Function, '#pop'), ('`.+`', Name.Function, '#pop')], 'nl': [('\\n', String)], 'float-number': [('\\.(?!\\.)[0-9_]*[f]*', Number.Float), ('e[+-]?[0-9][0-9_]*', Number.Float), default('#pop')], 'float-suffix': [("\\'f(32|64)", Number.Float), default('#pop')], 'int-suffix': [("\\'i(32|64)", Number.Integer.Long), ("\\'i(8|16)", Number.Integer), default('#pop')], 'casebranch': [(',', Punctuation), ('[\\n ]+', Text.Whitespace), (':', Operator, '#pop'), ('\\w+|[^:]', Name.Label)], 'pragma': [('[:,]', Text), ('[\\n ]+', Text.Whitespace), ('\\.\\}', String.Other, '#pop'), ('\\w+|\\W+|[^.}]', String.Other)]}
  --
      + underscorize(words)
  }

  class NitLexer {
      + name = 'Nit'
      + url = 'http://nitlanguage.org'
      + aliases = ['nit']
      + filenames = ['*.nit']
      + version_added = '2.0'
      + tokens = {'root': [('#.*?$', Comment.Single), (words(('package', 'module', 'import', 'class', 'abstract', 'interface', 'universal', 'enum', 'end', 'fun', 'type', 'init', 'redef', 'isa', 'do', 'readable', 'writable', 'var', 'intern', 'extern', 'public', 'protected', 'private', 'intrude', 'if', 'then', 'else', 'while', 'loop', 'for', 'in', 'and', 'or', 'not', 'implies', 'return', 'continue', 'break', 'abort', 'assert', 'new', 'is', 'once', 'super', 'self', 'true', 'false', 'nullable', 'null', 'as', 'isset', 'label', '__debug__'), suffix='(?=[\\r\\n\\t( ])'), Keyword), ('[A-Z]\\w*', Name.Class), ('"""(([^\\\'\\\\]|\\\\.)|\\\\r|\\\\n)*((\\{\\{?)?(""?\\{\\{?)*""""*)', String), ("\\'\\'\\'(((\\\\.|[^\\'\\\\])|\\\\r|\\\\n)|\\'((\\\\.|[^\\'\\\\])|\\\\r|\\\\n)|\\'\\'((\\\\.|[^\\'\\\\])|\\\\r|\\\\n))*\\'\\'\\'", String), ('"""(([^\\\'\\\\]|\\\\.)|\\\\r|\\\\n)*((""?)?(\\{\\{?""?)*\\{\\{\\{\\{*)', String), ('\\}\\}\\}(((\\\\.|[^\\\'\\\\])|\\\\r|\\\\n))*(""?)?(\\{\\{?""?)*\\{\\{\\{\\{*', String), ('\\}\\}\\}(((\\\\.|[^\\\'\\\\])|\\\\r|\\\\n))*(\\{\\{?)?(""?\\{\\{?)*""""*', String), ('"(\\\\.|([^"}{\\\\]))*"', String), ('"(\\\\.|([^"}{\\\\]))*\\{', String), ('\\}(\\\\.|([^"}{\\\\]))*\\{', String), ('\\}(\\\\.|([^"}{\\\\]))*"', String), ("(\\'[^\\'\\\\]\\')|(\\'\\\\.\\')", String.Char), ('[0-9]+', Number.Integer), ('[0-9]*.[0-9]+', Number.Float), ('0(x|X)[0-9A-Fa-f]+', Number.Hex), ('[a-z]\\w*', Name), ('_\\w+', Name.Variable.Instance), ('==|!=|<==>|>=|>>|>|<=|<<|<|\\+|-|=|/|\\*|%|\\+=|-=|!|@', Operator), ('\\(|\\)|\\[|\\]|,|\\.\\.\\.|\\.\\.|\\.|::|:', Punctuation), ('`\\{[^`]*`\\}', Text), ('[\\r\\n\\t ]+', Text)]}
  }

  class NixLexer {
      + name = 'Nix'
      + url = 'http://nixos.org/nix/'
      + aliases = ['nixos', 'nix']
      + filenames = ['*.nix']
      + mimetypes = ['text/x-nix']
      + version_added = '2.0'
      + keywords = ['rec', 'with', 'let', 'in', 'inherit', 'assert', 'if', 'else', 'then', '...']
      + builtins = ['import', 'abort', 'baseNameOf', 'dirOf', 'isNull', 'builtins', 'map', 'removeAttrs', 'throw', 'toString', 'derivation']
      + operators = ['++', '+', '?', '.', '!', '//', '==', '/', '!=', '&&', '||', '->', '=', '<', '>', '*', '-']
      + punctuations = ['(', ')', '[', ']', ';', '{', '}', ':', ',', '@']
      + tokens = {'root': [('#.*$', Comment.Single), ('/\\*', Comment.Multiline, 'comment'), ('\\s+', Text), ('({})'.format('|'.join((re.escape(entry) + '\\b' for entry in keywords))), Keyword), ('({})'.format('|'.join((re.escape(entry) + '\\b' for entry in builtins))), Name.Builtin), ('\\b(true|false|null)\\b', Name.Constant), ('-?(\\d+\\.\\d*|\\.\\d+)([eE][-+]?\\d+)?', Number.Float), ('-?[0-9]+', Number.Integer), ('[\\w.+-]*(\\/[\\w.+-]+)+', Literal), ('~(\\/[\\w.+-]+)+', Literal), ('\\<[\\w.+-]+(\\/[\\w.+-]+)*\\>', Literal), ('({})'.format('|'.join((re.escape(entry) for entry in operators))), Operator), ('\\b(or|and)\\b', Operator.Word), ('\\{', Punctuation, 'block'), ('({})'.format('|'.join((re.escape(entry) for entry in punctuations))), Punctuation), ('"', String.Double, 'doublequote'), ("''", String.Multiline, 'multiline'), ("[a-zA-Z][a-zA-Z0-9\\+\\-\\.]*\\:[\\w%/?:@&=+$,\\\\.!~*\\'-]+", Literal), ('[\\w-]+(?=\\s*=)', String.Symbol), ("[a-zA-Z_][\\w\\'-]*", Text), ('\\$\\{', String.Interpol, 'antiquote')], 'comment': [('[^/*]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'multiline': [("''(\\$|'|\\\\n|\\\\r|\\\\t|\\\\)", String.Escape), ("''", String.Multiline, '#pop'), ('\\$\\{', String.Interpol, 'antiquote'), ("[^'\\$]+", String.Multiline), ("\\$[^\\{']", String.Multiline), ("'[^']", String.Multiline), ("\\$(?=')", String.Multiline)], 'doublequote': [('\\\\(\\\\|"|\\$|n)', String.Escape), ('"', String.Double, '#pop'), ('\\$\\{', String.Interpol, 'antiquote'), ('[^"\\\\\\$]+', String.Double), ('\\$[^\\{"]', String.Double), ('\\$(?=")', String.Double), ('\\\\', String.Double)], 'antiquote': [('\\}', String.Interpol, '#pop'), ('\\$\\{', String.Interpol, '#push'), include('root')], 'block': [('\\}', Punctuation, '#pop'), include('root')]}
  --
      + analyse_text(text)
  }

  class NumbaIRLexer {
      + name = 'Numba_IR'
      + url = 'https://numba.readthedocs.io/en/stable/developer/architecture.html#stage-2-generate-the-numba-ir'
      + aliases = ['numba_ir', 'numbair']
      + filenames = ['*.numba_ir']
      + mimetypes = ['text/x-numba_ir', 'text/x-numbair']
      + version_added = '2.19'
      + identifier = '\\$[a-zA-Z0-9._]+'
      + fun_or_var = '([a-zA-Z_]+[a-zA-Z0-9]*)'
      + tokens = {'root': [('(label)(\\ [0-9]+)(:)$', bygroups(Keyword, Name.Label, Punctuation)), ('=', Operator), include('whitespace'), include('keyword'), (identifier, Name.Variable), (fun_or_var + '(\\()', bygroups(Name.Function, Punctuation)), (fun_or_var + '(\\=)', bygroups(Name.Attribute, Punctuation)), (fun_or_var, Name.Constant), ('[0-9]+', Number), ('<[^>\\n]*>', String), ("[=<>{}\\[\\]()*.,!\\':]|x\\b", Punctuation)], 'keyword': [(words(('del', 'jump', 'call', 'branch'), suffix=' '), Keyword)], 'whitespace': [('(\\n|\\s)+', Whitespace)]}
  }

  class ComponentPascalLexer {
      + name = 'Component Pascal'
      + aliases = ['componentpascal', 'cp']
      + filenames = ['*.cp', '*.cps']
      + mimetypes = ['text/x-component-pascal']
      + url = 'https://blackboxframework.org'
      + version_added = '2.1'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [include('whitespace'), include('comments'), include('punctuation'), include('numliterals'), include('strings'), include('operators'), include('builtins'), include('identifiers')], 'whitespace': [('\\n+', Text), ('\\s+', Text)], 'comments': [('\\(\\*([^$].*?)\\*\\)', Comment.Multiline)], 'punctuation': [('[()\\[\\]{},.:;|]', Punctuation)], 'numliterals': [('[0-9A-F]+X\\b', Number.Hex), ('[0-9A-F]+[HL]\\b', Number.Hex), ('[0-9]+\\.[0-9]+E[+-][0-9]+', Number.Float), ('[0-9]+\\.[0-9]+', Number.Float), ('[0-9]+', Number.Integer)], 'strings': [("'[^\\n']*'", String), ('"[^\\n"]*"', String)], 'operators': [('[+-]', Operator), ('[*/]', Operator), ('[=#<>]', Operator), ('\\^', Operator), ('&', Operator), ('~', Operator), (':=', Operator), ('\\.\\.', Operator), ('\\$', Operator)], 'identifiers': [('([a-zA-Z_$][\\w$]*)', Name)], 'builtins': [(words(('ANYPTR', 'ANYREC', 'BOOLEAN', 'BYTE', 'CHAR', 'INTEGER', 'LONGINT', 'REAL', 'SET', 'SHORTCHAR', 'SHORTINT', 'SHORTREAL'), suffix='\\b'), Keyword.Type), (words(('ABS', 'ABSTRACT', 'ARRAY', 'ASH', 'ASSERT', 'BEGIN', 'BITS', 'BY', 'CAP', 'CASE', 'CHR', 'CLOSE', 'CONST', 'DEC', 'DIV', 'DO', 'ELSE', 'ELSIF', 'EMPTY', 'END', 'ENTIER', 'EXCL', 'EXIT', 'EXTENSIBLE', 'FOR', 'HALT', 'IF', 'IMPORT', 'IN', 'INC', 'INCL', 'IS', 'LEN', 'LIMITED', 'LONG', 'LOOP', 'MAX', 'MIN', 'MOD', 'MODULE', 'NEW', 'ODD', 'OF', 'OR', 'ORD', 'OUT', 'POINTER', 'PROCEDURE', 'RECORD', 'REPEAT', 'RETURN', 'SHORT', 'SHORTCHAR', 'SHORTINT', 'SIZE', 'THEN', 'TYPE', 'TO', 'UNTIL', 'VAR', 'WHILE', 'WITH'), suffix='\\b'), Keyword.Reserved), ('(TRUE|FALSE|NIL|INF)\\b', Keyword.Constant)]}
  --
      + analyse_text(text)
  }

  class ObjectiveCLexer {
      + name = 'Objective-C'
      + url = 'https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html'
      + aliases = ['objective-c', 'objectivec', 'obj-c', 'objc']
      + filenames = ['*.m', '*.h']
      + mimetypes = ['text/x-objective-c']
      + version_added = ''
      + priority = 0.05
  }

  class ObjectiveCppLexer {
      + name = 'Objective-C++'
      + aliases = ['objective-c++', 'objectivec++', 'obj-c++', 'objc++']
      + filenames = ['*.mm', '*.hh']
      + mimetypes = ['text/x-objective-c++']
      + version_added = ''
      + priority = 0.05
  }

  class LogosLexer {
      + name = 'Logos'
      + aliases = ['logos']
      + filenames = ['*.x', '*.xi', '*.xm', '*.xmi']
      + mimetypes = ['text/x-logos']
      + version_added = '1.6'
      + priority = 0.25
      + tokens = {'statements': [('(%orig|%log)\\b', Keyword), ('(%c)\\b(\\()(\\s*)([a-zA-Z$_][\\w$]*)(\\s*)(\\))', bygroups(Keyword, Punctuation, Text, Name.Class, Text, Punctuation)), ('(%init)\\b(\\()', bygroups(Keyword, Punctuation), 'logos_init_directive'), ('(%init)(?=\\s*;)', bygroups(Keyword)), ('(%hook|%group)(\\s+)([a-zA-Z$_][\\w$]+)', bygroups(Keyword, Text, Name.Class), '#pop'), ('(%subclass)(\\s+)', bygroups(Keyword, Text), ('#pop', 'logos_classname')), inherit], 'logos_init_directive': [('\\s+', Text), (',', Punctuation, ('logos_init_directive', '#pop')), ('([a-zA-Z$_][\\w$]*)(\\s*)(=)(\\s*)([^);]*)', bygroups(Name.Class, Text, Punctuation, Text, Text)), ('([a-zA-Z$_][\\w$]*)', Name.Class), ('\\)', Punctuation, '#pop')], 'logos_classname': [('([a-zA-Z$_][\\w$]*)(\\s*:\\s*)([a-zA-Z$_][\\w$]*)?', bygroups(Name.Class, Text, Name.Class), '#pop'), ('([a-zA-Z$_][\\w$]*)', Name.Class, '#pop')], 'root': [('(%subclass)(\\s+)', bygroups(Keyword, Text), 'logos_classname'), ('(%hook|%group)(\\s+)([a-zA-Z$_][\\w$]+)', bygroups(Keyword, Text, Name.Class)), ('(%config)(\\s*\\(\\s*)(\\w+)(\\s*=)(.*?)(\\)\\s*)', bygroups(Keyword, Text, Name.Variable, Text, String, Text)), ('(%ctor)(\\s*)(\\{)', bygroups(Keyword, Text, Punctuation), 'function'), ('(%new)(\\s*)(\\()(.*?)(\\))', bygroups(Keyword, Text, Keyword, String, Keyword)), ('(\\s*)(%end)(\\s*)', bygroups(Text, Keyword, Text)), inherit]}
  --
      + analyse_text(text)
  }

  class SwiftLexer {
      + name = 'Swift'
      + url = 'https://www.swift.org/'
      + filenames = ['*.swift']
      + aliases = ['swift']
      + mimetypes = ['text/x-swift']
      + version_added = '2.0'
      + tokens = {'root': [('\\n', Text), ('\\s+', Whitespace), ('//', Comment.Single, 'comment-single'), ('/\\*', Comment.Multiline, 'comment-multi'), ('#(if|elseif|else|endif|available)\\b', Comment.Preproc, 'preproc'), include('keywords'), (words(('Array', 'AutoreleasingUnsafeMutablePointer', 'BidirectionalReverseView', 'Bit', 'Bool', 'CFunctionPointer', 'COpaquePointer', 'CVaListPointer', 'Character', 'ClosedInterval', 'CollectionOfOne', 'ContiguousArray', 'Dictionary', 'DictionaryGenerator', 'DictionaryIndex', 'Double', 'EmptyCollection', 'EmptyGenerator', 'EnumerateGenerator', 'EnumerateSequence', 'FilterCollectionView', 'FilterCollectionViewIndex', 'FilterGenerator', 'FilterSequenceView', 'Float', 'Float80', 'FloatingPointClassification', 'GeneratorOf', 'GeneratorOfOne', 'GeneratorSequence', 'HalfOpenInterval', 'HeapBuffer', 'HeapBufferStorage', 'ImplicitlyUnwrappedOptional', 'IndexingGenerator', 'Int', 'Int16', 'Int32', 'Int64', 'Int8', 'LazyBidirectionalCollection', 'LazyForwardCollection', 'LazyRandomAccessCollection', 'LazySequence', 'MapCollectionView', 'MapSequenceGenerator', 'MapSequenceView', 'MirrorDisposition', 'ObjectIdentifier', 'OnHeap', 'Optional', 'PermutationGenerator', 'QuickLookObject', 'RandomAccessReverseView', 'Range', 'RangeGenerator', 'RawByte', 'Repeat', 'ReverseBidirectionalIndex', 'ReverseRandomAccessIndex', 'SequenceOf', 'SinkOf', 'Slice', 'StaticString', 'StrideThrough', 'StrideThroughGenerator', 'StrideTo', 'StrideToGenerator', 'String', 'UInt', 'UInt16', 'UInt32', 'UInt64', 'UInt8', 'UTF16', 'UTF32', 'UTF8', 'UnicodeDecodingResult', 'UnicodeScalar', 'Unmanaged', 'UnsafeBufferPointer', 'UnsafeBufferPointerGenerator', 'UnsafeMutableBufferPointer', 'UnsafeMutablePointer', 'UnsafePointer', 'Zip2', 'ZipGenerator2', 'AbsoluteValuable', 'AnyObject', 'ArrayLiteralConvertible', 'BidirectionalIndexType', 'BitwiseOperationsType', 'BooleanLiteralConvertible', 'BooleanType', 'CVarArgType', 'CollectionType', 'Comparable', 'DebugPrintable', 'DictionaryLiteralConvertible', 'Equatable', 'ExtendedGraphemeClusterLiteralConvertible', 'ExtensibleCollectionType', 'FloatLiteralConvertible', 'FloatingPointType', 'ForwardIndexType', 'GeneratorType', 'Hashable', 'IntegerArithmeticType', 'IntegerLiteralConvertible', 'IntegerType', 'IntervalType', 'MirrorType', 'MutableCollectionType', 'MutableSliceable', 'NilLiteralConvertible', 'OutputStreamType', 'Printable', 'RandomAccessIndexType', 'RangeReplaceableCollectionType', 'RawOptionSetType', 'RawRepresentable', 'Reflectable', 'SequenceType', 'SignedIntegerType', 'SignedNumberType', 'SinkType', 'Sliceable', 'Streamable', 'Strideable', 'StringInterpolationConvertible', 'StringLiteralConvertible', 'UnicodeCodecType', 'UnicodeScalarLiteralConvertible', 'UnsignedIntegerType', '_ArrayBufferType', '_BidirectionalIndexType', '_CocoaStringType', '_CollectionType', '_Comparable', '_ExtensibleCollectionType', '_ForwardIndexType', '_Incrementable', '_IntegerArithmeticType', '_IntegerType', '_ObjectiveCBridgeable', '_RandomAccessIndexType', '_RawOptionSetType', '_SequenceType', '_Sequence_Type', '_SignedIntegerType', '_SignedNumberType', '_Sliceable', '_Strideable', '_SwiftNSArrayRequiredOverridesType', '_SwiftNSArrayType', '_SwiftNSCopyingType', '_SwiftNSDictionaryRequiredOverridesType', '_SwiftNSDictionaryType', '_SwiftNSEnumeratorType', '_SwiftNSFastEnumerationType', '_SwiftNSStringRequiredOverridesType', '_SwiftNSStringType', '_UnsignedIntegerType', 'C_ARGC', 'C_ARGV', 'Process', 'Any', 'AnyClass', 'BooleanLiteralType', 'CBool', 'CChar', 'CChar16', 'CChar32', 'CDouble', 'CFloat', 'CInt', 'CLong', 'CLongLong', 'CShort', 'CSignedChar', 'CUnsignedInt', 'CUnsignedLong', 'CUnsignedShort', 'CWideChar', 'ExtendedGraphemeClusterType', 'Float32', 'Float64', 'FloatLiteralType', 'IntMax', 'IntegerLiteralType', 'StringLiteralType', 'UIntMax', 'UWord', 'UnicodeScalarType', 'Void', 'Word', 'NSErrorPointer', 'NSObjectProtocol', 'Selector'), suffix='\\b'), Name.Builtin), (words(('abs', 'advance', 'alignof', 'alignofValue', 'assert', 'assertionFailure', 'contains', 'count', 'countElements', 'debugPrint', 'debugPrintln', 'distance', 'dropFirst', 'dropLast', 'dump', 'enumerate', 'equal', 'extend', 'fatalError', 'filter', 'find', 'first', 'getVaList', 'indices', 'insert', 'isEmpty', 'join', 'last', 'lazy', 'lexicographicalCompare', 'map', 'max', 'maxElement', 'min', 'minElement', 'numericCast', 'overlaps', 'partition', 'precondition', 'preconditionFailure', 'prefix', 'print', 'println', 'reduce', 'reflect', 'removeAll', 'removeAtIndex', 'removeLast', 'removeRange', 'reverse', 'sizeof', 'sizeofValue', 'sort', 'sorted', 'splice', 'split', 'startsWith', 'stride', 'strideof', 'strideofValue', 'suffix', 'swap', 'toDebugString', 'toString', 'transcode', 'underestimateCount', 'unsafeAddressOf', 'unsafeBitCast', 'unsafeDowncast', 'withExtendedLifetime', 'withUnsafeMutablePointer', 'withUnsafeMutablePointers', 'withUnsafePointer', 'withUnsafePointers', 'withVaList'), suffix='\\b'), Name.Builtin.Pseudo), ('\\$\\d+', Name.Variable), ('0b[01_]+', Number.Bin), ('0o[0-7_]+', Number.Oct), ('0x[0-9a-fA-F_]+', Number.Hex), ('[0-9][0-9_]*(\\.[0-9_]+[eE][+\\-]?[0-9_]+|\\.[0-9_]*|[eE][+\\-]?[0-9_]+)', Number.Float), ('[0-9][0-9_]*', Number.Integer), ('"""', String, 'string-multi'), ('"', String, 'string'), ('[(){}\\[\\].,:;=@#`?]|->|[<&?](?=\\w)|(?<=\\w)[>!?]', Punctuation), ('[/=\\-+!*%<>&|^?~]+', Operator), ('[a-zA-Z_]\\w*', Name)], 'keywords': [(words(('as', 'async', 'await', 'break', 'case', 'catch', 'continue', 'default', 'defer', 'do', 'else', 'fallthrough', 'for', 'guard', 'if', 'in', 'is', 'repeat', 'return', '#selector', 'switch', 'throw', 'try', 'where', 'while'), suffix='\\b'), Keyword), ('@availability\\([^)]+\\)', Keyword.Reserved), (words(('associativity', 'convenience', 'dynamic', 'didSet', 'final', 'get', 'indirect', 'infix', 'inout', 'lazy', 'left', 'mutating', 'none', 'nonmutating', 'optional', 'override', 'postfix', 'precedence', 'prefix', 'Protocol', 'required', 'rethrows', 'right', 'set', 'throws', 'Type', 'unowned', 'weak', 'willSet', '@availability', '@autoclosure', '@noreturn', '@NSApplicationMain', '@NSCopying', '@NSManaged', '@objc', '@UIApplicationMain', '@IBAction', '@IBDesignable', '@IBInspectable', '@IBOutlet'), suffix='\\b'), Keyword.Reserved), ('(as|dynamicType|false|is|nil|self|Self|super|true|__COLUMN__|__FILE__|__FUNCTION__|__LINE__|_|#(?:file|line|column|function))\\b', Keyword.Constant), ('import\\b', Keyword.Declaration, 'module'), ('(class|enum|extension|struct|protocol)(\\s+)([a-zA-Z_]\\w*)', bygroups(Keyword.Declaration, Whitespace, Name.Class)), ('(func)(\\s+)([a-zA-Z_]\\w*)', bygroups(Keyword.Declaration, Whitespace, Name.Function)), ('(var|let)(\\s+)([a-zA-Z_]\\w*)', bygroups(Keyword.Declaration, Whitespace, Name.Variable)), (words(('actor', 'associatedtype', 'class', 'deinit', 'enum', 'extension', 'func', 'import', 'init', 'internal', 'let', 'operator', 'private', 'protocol', 'public', 'static', 'struct', 'subscript', 'typealias', 'var'), suffix='\\b'), Keyword.Declaration)], 'comment': [(':param: [a-zA-Z_]\\w*|:returns?:|(FIXME|MARK|TODO):', Comment.Special)], 'comment-single': [('\\n', Whitespace, '#pop'), include('comment'), ('[^\\n]+', Comment.Single)], 'comment-multi': [include('comment'), ('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]+', Comment.Multiline)], 'module': [('\\n', Whitespace, '#pop'), ('[a-zA-Z_]\\w*', Name.Class), include('root')], 'preproc': [('\\n', Whitespace, '#pop'), include('keywords'), ('[A-Za-z]\\w*', Comment.Preproc), include('root')], 'string': [('"', String, '#pop'), include('string-common')], 'string-multi': [('"""', String, '#pop'), include('string-common')], 'string-common': [('\\\\\\(', String.Interpol, 'string-intp'), ('\\\\[\'"\\\\nrt]|\\\\x[0-9a-fA-F]{2}|\\\\[0-7]{1,3}|\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}', String.Escape), ('[^\\\\"]+', String), ('\\\\', String)], 'string-intp': [('\\(', String.Interpol, '#push'), ('\\)', String.Interpol, '#pop'), include('root')]}
  --
      + get_tokens_unprocessed(text)
  }

  class OocLexer {
      + name = 'Ooc'
      + url = 'https://ooc-lang.github.io/'
      + aliases = ['ooc']
      + filenames = ['*.ooc']
      + mimetypes = ['text/x-ooc']
      + version_added = '1.2'
      + tokens = {'root': [(words(('class', 'interface', 'implement', 'abstract', 'extends', 'from', 'this', 'super', 'new', 'const', 'final', 'static', 'import', 'use', 'extern', 'inline', 'proto', 'break', 'continue', 'fallthrough', 'operator', 'if', 'else', 'for', 'while', 'do', 'switch', 'case', 'as', 'in', 'version', 'return', 'true', 'false', 'null'), prefix='\\b', suffix='\\b'), Keyword), ('include\\b', Keyword, 'include'), ('(cover)([ \\t]+)(from)([ \\t]+)(\\w+[*@]?)', bygroups(Keyword, Text, Keyword, Text, Name.Class)), ('(func)((?:[ \\t]|\\\\\\n)+)(~[a-z_]\\w*)', bygroups(Keyword, Text, Name.Function)), ('\\bfunc\\b', Keyword), ('//.*', Comment), ('(?s)/\\*.*?\\*/', Comment.Multiline), ('(==?|\\+=?|-[=>]?|\\*=?|/=?|:=|!=?|%=?|\\?|>{1,3}=?|<{1,3}=?|\\.\\.|&&?|\\|\\|?|\\^=?)', Operator), ('(\\.)([ \\t]*)([a-z]\\w*)', bygroups(Operator, Text, Name.Function)), ('[A-Z][A-Z0-9_]+', Name.Constant), ('[A-Z]\\w*([@*]|\\[[ \\t]*\\])?', Name.Class), ('([a-z]\\w*(?:~[a-z]\\w*)?)((?:[ \\t]|\\\\\\n)*)(?=\\()', bygroups(Name.Function, Text)), ('[a-z]\\w*', Name.Variable), ('[:(){}\\[\\];,]', Punctuation), ('0x[0-9a-fA-F]+', Number.Hex), ('0c[0-9]+', Number.Oct), ('0b[01]+', Number.Bin), ('[0-9_]\\.[0-9_]*(?!\\.)', Number.Float), ('[0-9_]+', Number.Decimal), ('"(?:\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\"])*"', String.Double), ("'(?:\\\\.|\\\\[0-9]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'", String.Char), ('@', Punctuation), ('\\.', Punctuation), ('\\\\[ \\t\\n]', Text), ('[ \\t]+', Text)], 'include': [('[\\w/]+', Name), (',', Punctuation), ('[ \\t]', Text), ('[;\\n]', Text, '#pop')]}
  }

  class OpenScadLexer {
      + name = 'OpenSCAD'
      + url = 'https://openscad.org/'
      + aliases = ['openscad']
      + filenames = ['*.scad']
      + mimetypes = ['application/x-openscad']
      + version_added = '2.16'
      + tokens = {'root': [('[^\\S\\n]+', Whitespace), ('//', Comment.Single, 'comment-single'), ('/\\*', Comment.Multiline, 'comment-multi'), ('[{}\\[\\]\\(\\),;:]', Punctuation), ('[*!#%\\-+=?/]', Operator), ('<=|<|==|!=|>=|>|&&|\\|\\|', Operator), ('\\$(f[asn]|t|vp[rtd]|children)', Operator), ('(undef|PI)\\b', Keyword.Constant), ('(use|include)((?:\\s|\\\\\\\\s)+)', bygroups(Keyword.Namespace, Text), 'includes'), ('(module)(\\s*)([^\\s\\(]+)', bygroups(Keyword.Namespace, Whitespace, Name.Namespace)), ('(function)(\\s*)([^\\s\\(]+)', bygroups(Keyword.Declaration, Whitespace, Name.Function)), (words(('true', 'false'), prefix='\\b', suffix='\\b'), Literal), (words(('function', 'module', 'include', 'use', 'for', 'intersection_for', 'if', 'else', 'return'), prefix='\\b', suffix='\\b'), Keyword), (words(('circle', 'square', 'polygon', 'text', 'sphere', 'cube', 'cylinder', 'polyhedron', 'translate', 'rotate', 'scale', 'resize', 'mirror', 'multmatrix', 'color', 'offset', 'hull', 'minkowski', 'union', 'difference', 'intersection', 'abs', 'sign', 'sin', 'cos', 'tan', 'acos', 'asin', 'atan', 'atan2', 'floor', 'round', 'ceil', 'ln', 'log', 'pow', 'sqrt', 'exp', 'rands', 'min', 'max', 'concat', 'lookup', 'str', 'chr', 'search', 'version', 'version_num', 'norm', 'cross', 'parent_module', 'echo', 'import', 'import_dxf', 'dxf_linear_extrude', 'linear_extrude', 'rotate_extrude', 'surface', 'projection', 'render', 'dxf_cross', 'dxf_dim', 'let', 'assign', 'len'), prefix='\\b', suffix='\\b'), Name.Builtin), ('\\bchildren\\b', Name.Builtin.Pseudo), ('""".*?"""', String.Double), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ('-?\\d+(\\.\\d+)?(e[+-]?\\d+)?', Number), ('\\w+', Name)], 'includes': [('(<)([^>]*)(>)', bygroups(Punctuation, Comment.PreprocFile, Punctuation))], 'comment': [(':param: [a-zA-Z_]\\w*|:returns?:|(FIXME|MARK|TODO):', Comment.Special)], 'comment-single': [('\\n', Text, '#pop'), include('comment'), ('[^\\n]+', Comment.Single)], 'comment-multi': [include('comment'), ('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  }

  class ParaSailLexer {
      + name = 'ParaSail'
      + url = 'http://www.parasail-lang.org'
      + aliases = ['parasail']
      + filenames = ['*.psi', '*.psl']
      + mimetypes = ['text/x-parasail']
      + version_added = '2.1'
      + flags = re.MULTILINE
      + tokens = {'root': [('[^\\S\\n]+', Text), ('//.*?\\n', Comment.Single), ('\\b(and|or|xor)=', Operator.Word), ('\\b(and(\\s+then)?|or(\\s+else)?|xor|rem|mod|(is|not)\\s+null)\\b', Operator.Word), ('\\b(abs|abstract|all|block|class|concurrent|const|continue|each|end|exit|extends|exports|forward|func|global|implements|import|in|interface|is|lambda|locked|new|not|null|of|op|optional|private|queued|ref|return|reverse|separate|some|type|until|var|with|if|then|else|elsif|case|for|while|loop)\\b', Keyword.Reserved), ('(abstract\\s+)?(interface|class|op|func|type)', Keyword.Declaration), ('"[^"]*"', String), ('\\\\[\\\'ntrf"0]', String.Escape), ('#[a-zA-Z]\\w*', Literal), include('numbers'), ("'[^']'", String.Char), ('[a-zA-Z]\\w*', Name), ('(<==|==>|<=>|\\*\\*=|<\\|=|<<=|>>=|==|!=|=\\?|<=|>=|\\*\\*|<<|>>|=>|:=|\\+=|-=|\\*=|\\|=|\\||/=|\\+|-|\\*|/|\\.\\.|<\\.\\.|\\.\\.<|<\\.\\.<)', Operator), ('(<|>|\\[|\\]|\\(|\\)|\\||:|;|,|.|\\{|\\}|->)', Punctuation), ('\\n+', Text)], 'numbers': [('\\d[0-9_]*#[0-9a-fA-F][0-9a-fA-F_]*#', Number.Hex), ('0[xX][0-9a-fA-F][0-9a-fA-F_]*', Number.Hex), ('0[bB][01][01_]*', Number.Bin), ('\\d[0-9_]*\\.\\d[0-9_]*[eE][+-]\\d[0-9_]*', Number.Float), ('\\d[0-9_]*\\.\\d[0-9_]*', Number.Float), ('\\d[0-9_]*', Number.Integer)]}
  }

  class RagelLexer {
      + name = 'Ragel'
      + url = 'http://www.colm.net/open-source/ragel/'
      + aliases = ['ragel']
      + filenames = []
      + version_added = '1.1'
      + tokens = {'whitespace': [('\\s+', Whitespace)], 'comments': [('\\#.*$', Comment)], 'keywords': [('(access|action|alphtype)\\b', Keyword), ('(getkey|write|machine|include)\\b', Keyword), ('(any|ascii|extend|alpha|digit|alnum|lower|upper)\\b', Keyword), ('(xdigit|cntrl|graph|print|punct|space|zlen|empty)\\b', Keyword)], 'numbers': [('0x[0-9A-Fa-f]+', Number.Hex), ('[+-]?[0-9]+', Number.Integer)], 'literals': [('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('\\[(\\\\\\\\|\\\\[^\\\\]|[^\\\\\\]])*\\]', String), ('/(?!\\*)(\\\\\\\\|\\\\[^\\\\]|[^/\\\\])*/', String.Regex)], 'identifiers': [('[a-zA-Z_]\\w*', Name.Variable)], 'operators': [(',', Operator), ('\\||&|--?', Operator), ('\\.|<:|:>>?', Operator), (':', Operator), ('->', Operator), ('(>|\\$|%|<|@|<>)(/|eof\\b)', Operator), ('(>|\\$|%|<|@|<>)(!|err\\b)', Operator), ('(>|\\$|%|<|@|<>)(\\^|lerr\\b)', Operator), ('(>|\\$|%|<|@|<>)(~|to\\b)', Operator), ('(>|\\$|%|<|@|<>)(\\*|from\\b)', Operator), ('>|@|\\$|%', Operator), ('\\*|\\?|\\+|\\{[0-9]*,[0-9]*\\}', Operator), ('!|\\^', Operator), ('\\(|\\)', Operator)], 'root': [include('literals'), include('whitespace'), include('comments'), include('keywords'), include('numbers'), include('identifiers'), include('operators'), ('\\{', Punctuation, 'host'), ('=', Operator), (';', Punctuation)], 'host': [('(' + '|'.join(('[^{}\\\'"/#]+', '[^\\\\]\\\\[{}]', '"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', "'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", '//.*$\\n?', '/\\*(.|\\n)*?\\*/', '\\#.*$\\n?', '/(?!\\*)(\\\\\\\\|\\\\[^\\\\]|[^/\\\\])*/', '/')) + ')+', Other), ('\\{', Punctuation, '#push'), ('\\}', Punctuation, '#pop')]}
  }

  class RagelEmbeddedLexer {
      + name = 'Embedded Ragel'
      + aliases = ['ragel-em']
      + filenames = ['*.rl']
      + url = 'http://www.colm.net/open-source/ragel/'
      + version_added = '1.1'
      + tokens = {'root': [('(' + '|'.join(('[^%\\\'"/#]+', '%(?=[^%]|$)', '"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', "'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", '/\\*(.|\\n)*?\\*/', '//.*$\\n?', '\\#.*$\\n?', '/(?!\\*)(\\\\\\\\|\\\\[^\\\\]|[^/\\\\])*/', '/')) + ')+', Other), ('(%%)(?![{%])(.*)($|;)(\\n?)', bygroups(Punctuation, using(RagelLexer), Punctuation, Text)), ('(%%%%|%%)\\{', Punctuation, 'multi-line-fsm')], 'multi-line-fsm': [('(' + '|'.join(('(' + '|'.join(('[^}\\\'"\\[/#]', '\\}(?=[^%]|$)', '\\}%(?=[^%]|$)', '[^\\\\]\\\\[{}]', '(>|\\$|%|<|@|<>)/', '/(?!\\*)(\\\\\\\\|\\\\[^\\\\]|[^/\\\\])*/\\*', '/(?=[^/*]|$)')) + ')+', '"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', "'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", '\\[(\\\\\\\\|\\\\[^\\\\]|[^\\]\\\\])*\\]', '/\\*(.|\\n)*?\\*/', '//.*$\\n?', '\\#.*$\\n?')) + ')+', using(RagelLexer)), ('\\}%%', Punctuation, '#pop')]}
  --
      + analyse_text(text)
  }

  class RagelRubyLexer {
      + name = 'Ragel in Ruby Host'
      + aliases = ['ragel-ruby', 'ragel-rb']
      + filenames = ['*.rl']
      + url = 'http://www.colm.net/open-source/ragel/'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class RagelCLexer {
      + name = 'Ragel in C Host'
      + aliases = ['ragel-c']
      + filenames = ['*.rl']
      + url = 'http://www.colm.net/open-source/ragel/'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class RagelDLexer {
      + name = 'Ragel in D Host'
      + aliases = ['ragel-d']
      + filenames = ['*.rl']
      + url = 'http://www.colm.net/open-source/ragel/'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class RagelCppLexer {
      + name = 'Ragel in CPP Host'
      + aliases = ['ragel-cpp']
      + filenames = ['*.rl']
      + url = 'http://www.colm.net/open-source/ragel/'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class RagelObjectiveCLexer {
      + name = 'Ragel in Objective C Host'
      + aliases = ['ragel-objc']
      + filenames = ['*.rl']
      + url = 'http://www.colm.net/open-source/ragel/'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class RagelJavaLexer {
      + name = 'Ragel in Java Host'
      + aliases = ['ragel-java']
      + filenames = ['*.rl']
      + url = 'http://www.colm.net/open-source/ragel/'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class AntlrLexer {
      + name = 'ANTLR'
      + aliases = ['antlr']
      + filenames = []
      + url = 'https://www.antlr.org'
      + version_added = '1.1'
      + tokens = {'whitespace': [('\\s+', Whitespace)], 'comments': [('//.*$', Comment), ('/\\*(.|\\n)*?\\*/', Comment)], 'root': [include('whitespace'), include('comments'), ('(lexer|parser|tree)?(\\s*)(grammar\\b)(\\s*)(' + _id + ')(;)', bygroups(Keyword, Whitespace, Keyword, Whitespace, Name.Class, Punctuation)), ('options\\b', Keyword, 'options'), ('tokens\\b', Keyword, 'tokens'), ('(scope)(\\s*)(' + _id + ')(\\s*)(\\{)', bygroups(Keyword, Whitespace, Name.Variable, Whitespace, Punctuation), 'action'), ('(catch|finally)\\b', Keyword, 'exception'), ('(@' + _id + ')(\\s*)(::)?(\\s*)(' + _id + ')(\\s*)(\\{)', bygroups(Name.Label, Whitespace, Punctuation, Whitespace, Name.Label, Whitespace, Punctuation), 'action'), ('((?:protected|private|public|fragment)\\b)?(\\s*)(' + _id + ')(!)?', bygroups(Keyword, Whitespace, Name.Label, Punctuation), ('rule-alts', 'rule-prelims'))], 'exception': [('\\n', Whitespace, '#pop'), ('\\s', Whitespace), include('comments'), ('\\[', Punctuation, 'nested-arg-action'), ('\\{', Punctuation, 'action')], 'rule-prelims': [include('whitespace'), include('comments'), ('returns\\b', Keyword), ('\\[', Punctuation, 'nested-arg-action'), ('\\{', Punctuation, 'action'), ('(throws)(\\s+)(' + _id + ')', bygroups(Keyword, Whitespace, Name.Label)), ('(,)(\\s*)(' + _id + ')', bygroups(Punctuation, Whitespace, Name.Label)), ('options\\b', Keyword, 'options'), ('(scope)(\\s+)(\\{)', bygroups(Keyword, Whitespace, Punctuation), 'action'), ('(scope)(\\s+)(' + _id + ')(\\s*)(;)', bygroups(Keyword, Whitespace, Name.Label, Whitespace, Punctuation)), ('(@' + _id + ')(\\s*)(\\{)', bygroups(Name.Label, Whitespace, Punctuation), 'action'), (':', Punctuation, '#pop')], 'rule-alts': [include('whitespace'), include('comments'), ('options\\b', Keyword, 'options'), (':', Punctuation), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('<<([^>]|>[^>])>>', String), ('\\$?[A-Z_]\\w*', Name.Constant), ('\\$?[a-z_]\\w*', Name.Variable), ('(\\+|\\||->|=>|=|\\(|\\)|\\.\\.|\\.|\\?|\\*|\\^|!|\\#|~)', Operator), (',', Punctuation), ('\\[', Punctuation, 'nested-arg-action'), ('\\{', Punctuation, 'action'), (';', Punctuation, '#pop')], 'tokens': [include('whitespace'), include('comments'), ('\\{', Punctuation), ('(' + _TOKEN_REF + ')(\\s*)(=)?(\\s*)(' + _STRING_LITERAL + ')?(\\s*)(;)', bygroups(Name.Label, Whitespace, Punctuation, Whitespace, String, Whitespace, Punctuation)), ('\\}', Punctuation, '#pop')], 'options': [include('whitespace'), include('comments'), ('\\{', Punctuation), ('(' + _id + ')(\\s*)(=)(\\s*)(' + '|'.join((_id, _STRING_LITERAL, _INT, '\\*')) + ')(\\s*)(;)', bygroups(Name.Variable, Whitespace, Punctuation, Whitespace, Text, Whitespace, Punctuation)), ('\\}', Punctuation, '#pop')], 'action': [('(' + '|'.join(('[^${}\\\'"/\\\\]+', '"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', "'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", '//.*$\\n?', '/\\*(.|\\n)*?\\*/', '/(?!\\*)(\\\\\\\\|\\\\[^\\\\]|[^/\\\\])*/', '\\\\(?!%)', '/')) + ')+', Other), ('(\\\\)(%)', bygroups(Punctuation, Other)), ('(\\$[a-zA-Z]+)(\\.?)(text|value)?', bygroups(Name.Variable, Punctuation, Name.Property)), ('\\{', Punctuation, '#push'), ('\\}', Punctuation, '#pop')], 'nested-arg-action': [('(' + '|'.join(('[^$\\[\\]\\\'"/]+', '"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', "'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", '//.*$\\n?', '/\\*(.|\\n)*?\\*/', '/(?!\\*)(\\\\\\\\|\\\\[^\\\\]|[^/\\\\])*/', '/')) + ')+', Other), ('\\[', Punctuation, '#push'), ('\\]', Punctuation, '#pop'), ('(\\$[a-zA-Z]+)(\\.?)(text|value)?', bygroups(Name.Variable, Punctuation, Name.Property)), ('(\\\\\\\\|\\\\\\]|\\\\\\[|[^\\[\\]])+', Other)]}
  --
      + analyse_text(text)
  }

  class AntlrCppLexer {
      + name = 'ANTLR With CPP Target'
      + aliases = ['antlr-cpp']
      + filenames = ['*.G', '*.g']
      + url = 'https://www.antlr.org'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class AntlrObjectiveCLexer {
      + name = 'ANTLR With ObjectiveC Target'
      + aliases = ['antlr-objc']
      + filenames = ['*.G', '*.g']
      + url = 'https://www.antlr.org'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class AntlrCSharpLexer {
      + name = 'ANTLR With C# Target'
      + aliases = ['antlr-csharp', 'antlr-c#']
      + filenames = ['*.G', '*.g']
      + url = 'https://www.antlr.org'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class AntlrPythonLexer {
      + name = 'ANTLR With Python Target'
      + aliases = ['antlr-python']
      + filenames = ['*.G', '*.g']
      + url = 'https://www.antlr.org'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class AntlrJavaLexer {
      + name = 'ANTLR With Java Target'
      + aliases = ['antlr-java']
      + filenames = ['*.G', '*.g']
      + url = 'https://www.antlr.org'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class AntlrRubyLexer {
      + name = 'ANTLR With Ruby Target'
      + aliases = ['antlr-ruby', 'antlr-rb']
      + filenames = ['*.G', '*.g']
      + url = 'https://www.antlr.org'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class AntlrPerlLexer {
      + name = 'ANTLR With Perl Target'
      + aliases = ['antlr-perl']
      + filenames = ['*.G', '*.g']
      + url = 'https://www.antlr.org'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class AntlrActionScriptLexer {
      + name = 'ANTLR With ActionScript Target'
      + aliases = ['antlr-actionscript', 'antlr-as']
      + filenames = ['*.G', '*.g']
      + url = 'https://www.antlr.org'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class TreetopBaseLexer {
      + tokens = {'root': [include('space'), ('require[ \\t]+[^\\n\\r]+[\\n\\r]', Other), ('module\\b', Keyword.Namespace, 'module'), ('grammar\\b', Keyword, 'grammar')], 'module': [include('space'), include('end'), ('module\\b', Keyword, '#push'), ('grammar\\b', Keyword, 'grammar'), ('[A-Z]\\w*(?:::[A-Z]\\w*)*', Name.Namespace)], 'grammar': [include('space'), include('end'), ('rule\\b', Keyword, 'rule'), ('include\\b', Keyword, 'include'), ('[A-Z]\\w*', Name)], 'include': [include('space'), ('[A-Z]\\w*(?:::[A-Z]\\w*)*', Name.Class, '#pop')], 'rule': [include('space'), include('end'), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('([A-Za-z_]\\w*)(:)', bygroups(Name.Label, Punctuation)), ('[A-Za-z_]\\w*', Name), ('[()]', Punctuation), ('[?+*/&!~]', Operator), ('\\[(?:\\\\.|\\[:\\^?[a-z]+:\\]|[^\\\\\\]])+\\]', String.Regex), ('([0-9]*)(\\.\\.)([0-9]*)', bygroups(Number.Integer, Operator, Number.Integer)), ('(<)([^>]+)(>)', bygroups(Punctuation, Name.Class, Punctuation)), ('\\{', Punctuation, 'inline_module'), ('\\.', String.Regex)], 'inline_module': [('\\{', Other, 'ruby'), ('\\}', Punctuation, '#pop'), ('[^{}]+', Other)], 'ruby': [('\\{', Other, '#push'), ('\\}', Other, '#pop'), ('[^{}]+', Other)], 'space': [('[ \\t\\n\\r]+', Whitespace), ('#[^\\n]*', Comment.Single)], 'end': [('end\\b', Keyword, '#pop')]}
  }

  class TreetopLexer {
      + name = 'Treetop'
      + aliases = ['treetop']
      + filenames = ['*.treetop', '*.tt']
      + url = 'https://cjheath.github.io/treetop'
      + version_added = '1.6'
  --
      - __init__()
  }

  class EbnfLexer {
      + name = 'EBNF'
      + aliases = ['ebnf']
      + filenames = ['*.ebnf']
      + mimetypes = ['text/x-ebnf']
      + url = 'https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form'
      + version_added = '2.0'
      + tokens = {'root': [include('whitespace'), include('comment_start'), include('identifier'), ('=', Operator, 'production')], 'production': [include('whitespace'), include('comment_start'), include('identifier'), ('"[^"]*"', String.Double), ("'[^']*'", String.Single), ('(\\?[^?]*\\?)', Name.Entity), ('[\\[\\]{}(),|]', Punctuation), ('-', Operator), (';', Punctuation, '#pop'), ('\\.', Punctuation, '#pop')], 'whitespace': [('\\s+', Text)], 'comment_start': [('\\(\\*', Comment.Multiline, 'comment')], 'comment': [('[^*)]', Comment.Multiline), include('comment_start'), ('\\*\\)', Comment.Multiline, '#pop'), ('[*)]', Comment.Multiline)], 'identifier': [('([a-zA-Z][\\w \\-]*)', Keyword)]}
  }

  class PortugolLexer {
      + name = 'Portugol'
      + aliases = ['portugol']
      + filenames = ['*.alg', '*.portugol']
      + mimetypes = []
      + url = 'https://www.apoioinformatica.inf.br/produtos/visualg/linguagem'
      + version_added = ''
  --
      - __init__()
      + get_tokens_unprocessed(text)
  }

  class DelphiLexer {
      + name = 'Delphi'
      + aliases = ['delphi', 'pas', 'pascal', 'objectpascal']
      + filenames = ['*.pas', '*.dpr']
      + mimetypes = ['text/x-pascal']
      + url = 'https://www.embarcadero.com/products/delphi'
      + version_added = ''
      + TURBO_PASCAL_KEYWORDS = ('absolute', 'and', 'array', 'asm', 'begin', 'break', 'case', 'const', 'constructor', 'continue', 'destructor', 'div', 'do', 'downto', 'else', 'end', 'file', 'for', 'function', 'goto', 'if', 'implementation', 'in', 'inherited', 'inline', 'interface', 'label', 'mod', 'nil', 'not', 'object', 'of', 'on', 'operator', 'or', 'packed', 'procedure', 'program', 'record', 'reintroduce', 'repeat', 'self', 'set', 'shl', 'shr', 'string', 'then', 'to', 'type', 'unit', 'until', 'uses', 'var', 'while', 'with', 'xor')
      + DELPHI_KEYWORDS = ('as', 'class', 'except', 'exports', 'finalization', 'finally', 'initialization', 'is', 'library', 'on', 'property', 'raise', 'threadvar', 'try')
      + FREE_PASCAL_KEYWORDS = ('dispose', 'exit', 'false', 'new', 'true')
      + BLOCK_KEYWORDS = {'begin', 'class', 'const', 'constructor', 'destructor', 'end', 'finalization', 'function', 'implementation', 'initialization', 'label', 'library', 'operator', 'procedure', 'program', 'property', 'record', 'threadvar', 'type', 'unit', 'uses', 'var'}
      + FUNCTION_MODIFIERS = {'alias', 'cdecl', 'export', 'inline', 'interrupt', 'nostackframe', 'pascal', 'register', 'safecall', 'softfloat', 'stdcall', 'varargs', 'name', 'dynamic', 'near', 'virtual', 'external', 'override', 'assembler'}
      + DIRECTIVES = {'absolute', 'abstract', 'assembler', 'cppdecl', 'default', 'far', 'far16', 'forward', 'index', 'oldfpccall', 'private', 'protected', 'published', 'public'}
      + BUILTIN_TYPES = {'ansichar', 'ansistring', 'bool', 'boolean', 'byte', 'bytebool', 'cardinal', 'char', 'comp', 'currency', 'double', 'dword', 'extended', 'int64', 'integer', 'iunknown', 'longbool', 'longint', 'longword', 'pansichar', 'pansistring', 'pbool', 'pboolean', 'pbyte', 'pbytearray', 'pcardinal', 'pchar', 'pcomp', 'pcurrency', 'pdate', 'pdatetime', 'pdouble', 'pdword', 'pextended', 'phandle', 'pint64', 'pinteger', 'plongint', 'plongword', 'pointer', 'ppointer', 'pshortint', 'pshortstring', 'psingle', 'psmallint', 'pstring', 'pvariant', 'pwidechar', 'pwidestring', 'pword', 'pwordarray', 'pwordbool', 'real', 'real48', 'shortint', 'shortstring', 'single', 'smallint', 'string', 'tclass', 'tdate', 'tdatetime', 'textfile', 'thandle', 'tobject', 'ttime', 'variant', 'widechar', 'widestring', 'word', 'wordbool'}
      + BUILTIN_UNITS = {'System': ('abs', 'acquireexceptionobject', 'addr', 'ansitoutf8', 'append', 'arctan', 'assert', 'assigned', 'assignfile', 'beginthread', 'blockread', 'blockwrite', 'break', 'chdir', 'chr', 'close', 'closefile', 'comptocurrency', 'comptodouble', 'concat', 'continue', 'copy', 'cos', 'dec', 'delete', 'dispose', 'doubletocomp', 'endthread', 'enummodules', 'enumresourcemodules', 'eof', 'eoln', 'erase', 'exceptaddr', 'exceptobject', 'exclude', 'exit', 'exp', 'filepos', 'filesize', 'fillchar', 'finalize', 'findclasshinstance', 'findhinstance', 'findresourcehinstance', 'flush', 'frac', 'freemem', 'get8087cw', 'getdir', 'getlasterror', 'getmem', 'getmemorymanager', 'getmodulefilename', 'getvariantmanager', 'halt', 'hi', 'high', 'inc', 'include', 'initialize', 'insert', 'int', 'ioresult', 'ismemorymanagerset', 'isvariantmanagerset', 'length', 'ln', 'lo', 'low', 'mkdir', 'move', 'new', 'odd', 'olestrtostring', 'olestrtostrvar', 'ord', 'paramcount', 'paramstr', 'pi', 'pos', 'pred', 'ptr', 'pucs4chars', 'random', 'randomize', 'read', 'readln', 'reallocmem', 'releaseexceptionobject', 'rename', 'reset', 'rewrite', 'rmdir', 'round', 'runerror', 'seek', 'seekeof', 'seekeoln', 'set8087cw', 'setlength', 'setlinebreakstyle', 'setmemorymanager', 'setstring', 'settextbuf', 'setvariantmanager', 'sin', 'sizeof', 'slice', 'sqr', 'sqrt', 'str', 'stringofchar', 'stringtoolestr', 'stringtowidechar', 'succ', 'swap', 'trunc', 'truncate', 'typeinfo', 'ucs4stringtowidestring', 'unicodetoutf8', 'uniquestring', 'upcase', 'utf8decode', 'utf8encode', 'utf8toansi', 'utf8tounicode', 'val', 'vararrayredim', 'varclear', 'widecharlentostring', 'widecharlentostrvar', 'widechartostring', 'widechartostrvar', 'widestringtoucs4string', 'write', 'writeln'), 'SysUtils': ('abort', 'addexitproc', 'addterminateproc', 'adjustlinebreaks', 'allocmem', 'ansicomparefilename', 'ansicomparestr', 'ansicomparetext', 'ansidequotedstr', 'ansiextractquotedstr', 'ansilastchar', 'ansilowercase', 'ansilowercasefilename', 'ansipos', 'ansiquotedstr', 'ansisamestr', 'ansisametext', 'ansistrcomp', 'ansistricomp', 'ansistrlastchar', 'ansistrlcomp', 'ansistrlicomp', 'ansistrlower', 'ansistrpos', 'ansistrrscan', 'ansistrscan', 'ansistrupper', 'ansiuppercase', 'ansiuppercasefilename', 'appendstr', 'assignstr', 'beep', 'booltostr', 'bytetocharindex', 'bytetocharlen', 'bytetype', 'callterminateprocs', 'changefileext', 'charlength', 'chartobyteindex', 'chartobytelen', 'comparemem', 'comparestr', 'comparetext', 'createdir', 'createguid', 'currentyear', 'currtostr', 'currtostrf', 'date', 'datetimetofiledate', 'datetimetostr', 'datetimetostring', 'datetimetosystemtime', 'datetimetotimestamp', 'datetostr', 'dayofweek', 'decodedate', 'decodedatefully', 'decodetime', 'deletefile', 'directoryexists', 'diskfree', 'disksize', 'disposestr', 'encodedate', 'encodetime', 'exceptionerrormessage', 'excludetrailingbackslash', 'excludetrailingpathdelimiter', 'expandfilename', 'expandfilenamecase', 'expanduncfilename', 'extractfiledir', 'extractfiledrive', 'extractfileext', 'extractfilename', 'extractfilepath', 'extractrelativepath', 'extractshortpathname', 'fileage', 'fileclose', 'filecreate', 'filedatetodatetime', 'fileexists', 'filegetattr', 'filegetdate', 'fileisreadonly', 'fileopen', 'fileread', 'filesearch', 'fileseek', 'filesetattr', 'filesetdate', 'filesetreadonly', 'filewrite', 'finalizepackage', 'findclose', 'findcmdlineswitch', 'findfirst', 'findnext', 'floattocurr', 'floattodatetime', 'floattodecimal', 'floattostr', 'floattostrf', 'floattotext', 'floattotextfmt', 'fmtloadstr', 'fmtstr', 'forcedirectories', 'format', 'formatbuf', 'formatcurr', 'formatdatetime', 'formatfloat', 'freeandnil', 'getcurrentdir', 'getenvironmentvariable', 'getfileversion', 'getformatsettings', 'getlocaleformatsettings', 'getmodulename', 'getpackagedescription', 'getpackageinfo', 'gettime', 'guidtostring', 'incamonth', 'includetrailingbackslash', 'includetrailingpathdelimiter', 'incmonth', 'initializepackage', 'interlockeddecrement', 'interlockedexchange', 'interlockedexchangeadd', 'interlockedincrement', 'inttohex', 'inttostr', 'isdelimiter', 'isequalguid', 'isleapyear', 'ispathdelimiter', 'isvalidident', 'languages', 'lastdelimiter', 'loadpackage', 'loadstr', 'lowercase', 'msecstotimestamp', 'newstr', 'nextcharindex', 'now', 'outofmemoryerror', 'quotedstr', 'raiselastoserror', 'raiselastwin32error', 'removedir', 'renamefile', 'replacedate', 'replacetime', 'safeloadlibrary', 'samefilename', 'sametext', 'setcurrentdir', 'showexception', 'sleep', 'stralloc', 'strbufsize', 'strbytetype', 'strcat', 'strcharlength', 'strcomp', 'strcopy', 'strdispose', 'strecopy', 'strend', 'strfmt', 'stricomp', 'stringreplace', 'stringtoguid', 'strlcat', 'strlcomp', 'strlcopy', 'strlen', 'strlfmt', 'strlicomp', 'strlower', 'strmove', 'strnew', 'strnextchar', 'strpas', 'strpcopy', 'strplcopy', 'strpos', 'strrscan', 'strscan', 'strtobool', 'strtobooldef', 'strtocurr', 'strtocurrdef', 'strtodate', 'strtodatedef', 'strtodatetime', 'strtodatetimedef', 'strtofloat', 'strtofloatdef', 'strtoint', 'strtoint64', 'strtoint64def', 'strtointdef', 'strtotime', 'strtotimedef', 'strupper', 'supports', 'syserrormessage', 'systemtimetodatetime', 'texttofloat', 'time', 'timestamptodatetime', 'timestamptomsecs', 'timetostr', 'trim', 'trimleft', 'trimright', 'tryencodedate', 'tryencodetime', 'tryfloattocurr', 'tryfloattodatetime', 'trystrtobool', 'trystrtocurr', 'trystrtodate', 'trystrtodatetime', 'trystrtofloat', 'trystrtoint', 'trystrtoint64', 'trystrtotime', 'unloadpackage', 'uppercase', 'widecomparestr', 'widecomparetext', 'widefmtstr', 'wideformat', 'wideformatbuf', 'widelowercase', 'widesamestr', 'widesametext', 'wideuppercase', 'win32check', 'wraptext'), 'Classes': ('activateclassgroup', 'allocatehwnd', 'bintohex', 'checksynchronize', 'collectionsequal', 'countgenerations', 'deallocatehwnd', 'equalrect', 'extractstrings', 'findclass', 'findglobalcomponent', 'getclass', 'groupdescendantswith', 'hextobin', 'identtoint', 'initinheritedcomponent', 'inttoident', 'invalidpoint', 'isuniqueglobalcomponentname', 'linestart', 'objectbinarytotext', 'objectresourcetotext', 'objecttexttobinary', 'objecttexttoresource', 'pointsequal', 'readcomponentres', 'readcomponentresex', 'readcomponentresfile', 'rect', 'registerclass', 'registerclassalias', 'registerclasses', 'registercomponents', 'registerintegerconsts', 'registernoicon', 'registernonactivex', 'smallpoint', 'startclassgroup', 'teststreamformat', 'unregisterclass', 'unregisterclasses', 'unregisterintegerconsts', 'unregistermoduleclasses', 'writecomponentresfile'), 'Math': ('arccos', 'arccosh', 'arccot', 'arccoth', 'arccsc', 'arccsch', 'arcsec', 'arcsech', 'arcsin', 'arcsinh', 'arctan2', 'arctanh', 'ceil', 'comparevalue', 'cosecant', 'cosh', 'cot', 'cotan', 'coth', 'csc', 'csch', 'cycletodeg', 'cycletograd', 'cycletorad', 'degtocycle', 'degtograd', 'degtorad', 'divmod', 'doubledecliningbalance', 'ensurerange', 'floor', 'frexp', 'futurevalue', 'getexceptionmask', 'getprecisionmode', 'getroundmode', 'gradtocycle', 'gradtodeg', 'gradtorad', 'hypot', 'inrange', 'interestpayment', 'interestrate', 'internalrateofreturn', 'intpower', 'isinfinite', 'isnan', 'iszero', 'ldexp', 'lnxp1', 'log10', 'log2', 'logn', 'max', 'maxintvalue', 'maxvalue', 'mean', 'meanandstddev', 'min', 'minintvalue', 'minvalue', 'momentskewkurtosis', 'netpresentvalue', 'norm', 'numberofperiods', 'payment', 'periodpayment', 'poly', 'popnstddev', 'popnvariance', 'power', 'presentvalue', 'radtocycle', 'radtodeg', 'radtograd', 'randg', 'randomrange', 'roundto', 'samevalue', 'sec', 'secant', 'sech', 'setexceptionmask', 'setprecisionmode', 'setroundmode', 'sign', 'simpleroundto', 'sincos', 'sinh', 'slndepreciation', 'stddev', 'sum', 'sumint', 'sumofsquares', 'sumsandsquares', 'syddepreciation', 'tan', 'tanh', 'totalvariance', 'variance')}
      + ASM_REGISTERS = {'ah', 'al', 'ax', 'bh', 'bl', 'bp', 'bx', 'ch', 'cl', 'cr0', 'cr1', 'cr2', 'cr3', 'cr4', 'cs', 'cx', 'dh', 'di', 'dl', 'dr0', 'dr1', 'dr2', 'dr3', 'dr4', 'dr5', 'dr6', 'dr7', 'ds', 'dx', 'eax', 'ebp', 'ebx', 'ecx', 'edi', 'edx', 'es', 'esi', 'esp', 'fs', 'gs', 'mm0', 'mm1', 'mm2', 'mm3', 'mm4', 'mm5', 'mm6', 'mm7', 'si', 'sp', 'ss', 'st0', 'st1', 'st2', 'st3', 'st4', 'st5', 'st6', 'st7', 'xmm0', 'xmm1', 'xmm2', 'xmm3', 'xmm4', 'xmm5', 'xmm6', 'xmm7'}
      + ASM_INSTRUCTIONS = {'aaa', 'aad', 'aam', 'aas', 'adc', 'add', 'and', 'arpl', 'bound', 'bsf', 'bsr', 'bswap', 'bt', 'btc', 'btr', 'bts', 'call', 'cbw', 'cdq', 'clc', 'cld', 'cli', 'clts', 'cmc', 'cmova', 'cmovae', 'cmovb', 'cmovbe', 'cmovc', 'cmovcxz', 'cmove', 'cmovg', 'cmovge', 'cmovl', 'cmovle', 'cmovna', 'cmovnae', 'cmovnb', 'cmovnbe', 'cmovnc', 'cmovne', 'cmovng', 'cmovnge', 'cmovnl', 'cmovnle', 'cmovno', 'cmovnp', 'cmovns', 'cmovnz', 'cmovo', 'cmovp', 'cmovpe', 'cmovpo', 'cmovs', 'cmovz', 'cmp', 'cmpsb', 'cmpsd', 'cmpsw', 'cmpxchg', 'cmpxchg486', 'cmpxchg8b', 'cpuid', 'cwd', 'cwde', 'daa', 'das', 'dec', 'div', 'emms', 'enter', 'hlt', 'ibts', 'icebp', 'idiv', 'imul', 'in', 'inc', 'insb', 'insd', 'insw', 'int', 'int01', 'int03', 'int1', 'int3', 'into', 'invd', 'invlpg', 'iret', 'iretd', 'iretw', 'ja', 'jae', 'jb', 'jbe', 'jc', 'jcxz', 'jcxz', 'je', 'jecxz', 'jg', 'jge', 'jl', 'jle', 'jmp', 'jna', 'jnae', 'jnb', 'jnbe', 'jnc', 'jne', 'jng', 'jnge', 'jnl', 'jnle', 'jno', 'jnp', 'jns', 'jnz', 'jo', 'jp', 'jpe', 'jpo', 'js', 'jz', 'lahf', 'lar', 'lcall', 'lds', 'lea', 'leave', 'les', 'lfs', 'lgdt', 'lgs', 'lidt', 'ljmp', 'lldt', 'lmsw', 'loadall', 'loadall286', 'lock', 'lodsb', 'lodsd', 'lodsw', 'loop', 'loope', 'loopne', 'loopnz', 'loopz', 'lsl', 'lss', 'ltr', 'mov', 'movd', 'movq', 'movsb', 'movsd', 'movsw', 'movsx', 'movzx', 'mul', 'neg', 'nop', 'not', 'or', 'out', 'outsb', 'outsd', 'outsw', 'pop', 'popa', 'popad', 'popaw', 'popf', 'popfd', 'popfw', 'push', 'pusha', 'pushad', 'pushaw', 'pushf', 'pushfd', 'pushfw', 'rcl', 'rcr', 'rdmsr', 'rdpmc', 'rdshr', 'rdtsc', 'rep', 'repe', 'repne', 'repnz', 'repz', 'ret', 'retf', 'retn', 'rol', 'ror', 'rsdc', 'rsldt', 'rsm', 'sahf', 'sal', 'salc', 'sar', 'sbb', 'scasb', 'scasd', 'scasw', 'seta', 'setae', 'setb', 'setbe', 'setc', 'setcxz', 'sete', 'setg', 'setge', 'setl', 'setle', 'setna', 'setnae', 'setnb', 'setnbe', 'setnc', 'setne', 'setng', 'setnge', 'setnl', 'setnle', 'setno', 'setnp', 'setns', 'setnz', 'seto', 'setp', 'setpe', 'setpo', 'sets', 'setz', 'sgdt', 'shl', 'shld', 'shr', 'shrd', 'sidt', 'sldt', 'smi', 'smint', 'smintold', 'smsw', 'stc', 'std', 'sti', 'stosb', 'stosd', 'stosw', 'str', 'sub', 'svdc', 'svldt', 'svts', 'syscall', 'sysenter', 'sysexit', 'sysret', 'test', 'ud1', 'ud2', 'umov', 'verr', 'verw', 'wait', 'wbinvd', 'wrmsr', 'wrshr', 'xadd', 'xbts', 'xchg', 'xlat', 'xlatb', 'xor'}
      + PORTUGOL_KEYWORDS = ('aleatorio', 'algoritmo', 'arquivo', 'ate', 'caso', 'cronometro', 'debug', 'e', 'eco', 'enquanto', 'entao', 'escolha', 'escreva', 'escreval', 'faca', 'falso', 'fimalgoritmo', 'fimenquanto', 'fimescolha', 'fimfuncao', 'fimpara', 'fimprocedimento', 'fimrepita', 'fimse', 'funcao', 'inicio', 'int', 'interrompa', 'leia', 'limpatela', 'mod', 'nao', 'ou', 'outrocaso', 'para', 'passo', 'pausa', 'procedimento', 'repita', 'retorne', 'se', 'senao', 'timer', 'var', 'vetor', 'verdadeiro', 'xou', 'div', 'mod', 'abs', 'arccos', 'arcsen', 'arctan', 'cos', 'cotan', 'Exp', 'grauprad', 'int', 'log', 'logn', 'pi', 'quad', 'radpgrau', 'raizq', 'rand', 'randi', 'sen', 'Tan', 'asc', 'carac', 'caracpnum', 'compr', 'copia', 'maiusc', 'minusc', 'numpcarac', 'pos')
      + PORTUGOL_BUILTIN_TYPES = {'inteiro', 'real', 'caractere', 'logico'}
  --
      - __init__()
      + get_tokens_unprocessed(text)
  }

  class SourcePawnLexer {
      + name = 'SourcePawn'
      + aliases = ['sp']
      + filenames = ['*.sp']
      + mimetypes = ['text/x-sourcepawn']
      + url = 'https://github.com/alliedmodders/sourcepawn'
      + version_added = '1.6'
      + tokens = {'root': [('^#if\\s+0', Comment.Preproc, 'if0'), ('^#', Comment.Preproc, 'macro'), ('^' + _ws1 + '#if\\s+0', Comment.Preproc, 'if0'), ('^' + _ws1 + '#', Comment.Preproc, 'macro'), ('\\n', Text), ('\\s+', Text), ('\\\\\\n', Text), ('/(\\\\\\n)?/(\\n|(.|\\n)*?[^\\\\]\\n)', Comment.Single), ('/(\\\\\\n)?\\*(.|\\n)*?\\*(\\\\\\n)?/', Comment.Multiline), ('[{}]', Punctuation), ('L?"', String, 'string'), ("L?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'", String.Char), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[LlUu]*', Number.Float), ('(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float), ('0x[0-9a-fA-F]+[LlUu]*', Number.Hex), ('0[0-7]+[LlUu]*', Number.Oct), ('\\d+[LlUu]*', Number.Integer), ('[~!%^&*+=|?:<>/-]', Operator), ('[()\\[\\],.;]', Punctuation), ('(case|const|continue|native|default|else|enum|for|if|new|operator|public|return|sizeof|static|decl|struct|switch)\\b', Keyword), ('(bool|Float)\\b', Keyword.Type), ('(true|false)\\b', Keyword.Constant), ('[a-zA-Z_]\\w*', Name)], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('\\\\\\n', String), ('\\\\', String)], 'macro': [('[^/\\n]+', Comment.Preproc), ('/\\*(.|\\n)*?\\*/', Comment.Multiline), ('//.*?\\n', Comment.Single, '#pop'), ('/', Comment.Preproc), ('(?<=\\\\)\\n', Comment.Preproc), ('\\n', Comment.Preproc, '#pop')], 'if0': [('^\\s*#if.*?(?<!\\\\)\\n', Comment.Preproc, '#push'), ('^\\s*#endif.*?(?<!\\\\)\\n', Comment.Preproc, '#pop'), ('.*?\\n', Comment)]}
      + SM_TYPES = {'Action', 'bool', 'Float', 'Plugin', 'String', 'any', 'AdminFlag', 'OverrideType', 'OverrideRule', 'ImmunityType', 'GroupId', 'AdminId', 'AdmAccessMode', 'AdminCachePart', 'CookieAccess', 'CookieMenu', 'CookieMenuAction', 'NetFlow', 'ConVarBounds', 'QueryCookie', 'ReplySource', 'ConVarQueryResult', 'ConVarQueryFinished', 'Function', 'Action', 'Identity', 'PluginStatus', 'PluginInfo', 'DBResult', 'DBBindType', 'DBPriority', 'PropType', 'PropFieldType', 'MoveType', 'RenderMode', 'RenderFx', 'EventHookMode', 'EventHook', 'FileType', 'FileTimeMode', 'PathType', 'ParamType', 'ExecType', 'DialogType', 'Handle', 'KvDataTypes', 'NominateResult', 'MapChange', 'MenuStyle', 'MenuAction', 'MenuSource', 'RegexError', 'SDKCallType', 'SDKLibrary', 'SDKFuncConfSource', 'SDKType', 'SDKPassMethod', 'RayType', 'TraceEntityFilter', 'ListenOverride', 'SortOrder', 'SortType', 'SortFunc2D', 'APLRes', 'FeatureType', 'FeatureStatus', 'SMCResult', 'SMCError', 'TFClassType', 'TFTeam', 'TFCond', 'TFResourceType', 'Timer', 'TopMenuAction', 'TopMenuObjectType', 'TopMenuPosition', 'TopMenuObject', 'UserMsg'}
  --
      - __init__()
      + get_tokens_unprocessed(text)
  }

  class PawnLexer {
      + name = 'Pawn'
      + aliases = ['pawn']
      + filenames = ['*.p', '*.pwn', '*.inc']
      + mimetypes = ['text/x-pawn']
      + url = 'https://www.compuphase.com/pawn/pawn.htm'
      + version_added = '2.0'
      + tokens = {'root': [('^#if\\s+0', Comment.Preproc, 'if0'), ('^#', Comment.Preproc, 'macro'), ('^' + _ws1 + '#if\\s+0', Comment.Preproc, 'if0'), ('^' + _ws1 + '#', Comment.Preproc, 'macro'), ('\\n', Text), ('\\s+', Text), ('\\\\\\n', Text), ('/(\\\\\\n)?/(\\n|(.|\\n)*?[^\\\\]\\n)', Comment.Single), ('/(\\\\\\n)?\\*[\\w\\W]*?\\*(\\\\\\n)?/', Comment.Multiline), ('[{}]', Punctuation), ('L?"', String, 'string'), ("L?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'", String.Char), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[LlUu]*', Number.Float), ('(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float), ('0x[0-9a-fA-F]+[LlUu]*', Number.Hex), ('0[0-7]+[LlUu]*', Number.Oct), ('\\d+[LlUu]*', Number.Integer), ('[~!%^&*+=|?:<>/-]', Operator), ('[()\\[\\],.;]', Punctuation), ('(switch|case|default|const|new|static|char|continue|break|if|else|for|while|do|operator|enum|public|return|sizeof|tagof|state|goto)\\b', Keyword), ('(bool|Float)\\b', Keyword.Type), ('(true|false)\\b', Keyword.Constant), ('[a-zA-Z_]\\w*', Name)], 'string': [('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})', String.Escape), ('[^\\\\"\\n]+', String), ('\\\\\\n', String), ('\\\\', String)], 'macro': [('[^/\\n]+', Comment.Preproc), ('/\\*(.|\\n)*?\\*/', Comment.Multiline), ('//.*?\\n', Comment.Single, '#pop'), ('/', Comment.Preproc), ('(?<=\\\\)\\n', Comment.Preproc), ('\\n', Comment.Preproc, '#pop')], 'if0': [('^\\s*#if.*?(?<!\\\\)\\n', Comment.Preproc, '#push'), ('^\\s*#endif.*?(?<!\\\\)\\n', Comment.Preproc, '#pop'), ('.*?\\n', Comment)]}
  --
      + analyse_text(text)
  }

  class PddlLexer {
      + name = 'PDDL'
      + aliases = ['pddl']
      + filenames = ['*.pddl']
      + url = 'https://en.wikipedia.org/wiki/Planning_Domain_Definition_Language'
      + version_added = '2.19'
      + tokens = {'root': [('\\s+', Whitespace), (';.*$', Comment.Singleline), include('keywords'), include('builtins'), ('[()]', Punctuation), ('[=/*+><-]', Operator), ('[a-zA-Z][a-zA-Z0-9_-]*', Name), ('\\?[a-zA-Z][a-zA-Z0-9_-]*', Name.Variable), ('[0-9]+\\.[0-9]+', Number.Float), ('[0-9]+', Number.Integer)], 'keywords': [(words((':requirements', ':types', ':constants', ':predicates', ':functions', ':action', ':agent', ':parameters', ':precondition', ':effect', ':durative-action', ':duration', ':condition', ':derived', ':domain', ':objects', ':init', ':goal', ':metric', ':length', ':serial', ':parallel', ':strips', ':typing', ':negative-preconditions', ':disjunctive-preconditions', ':equality', ':existential-preconditions', ':universal-preconditions', ':conditional-effects', ':fluents', ':numeric-fluents', ':object-fluents', ':adl', ':durative-actions', ':continuous-effects', ':derived-predicates', ':time-intial-literals', ':preferences', ':constraints', ':action-costs', ':multi-agent', ':unfactored-privacy', ':factored-privacy', ':non-deterministic'), suffix='\\b'), Keyword)], 'builtins': [(words(('define', 'domain', 'object', 'either', 'and', 'forall', 'preference', 'imply', 'or', 'exists', 'not', 'when', 'assign', 'scale-up', 'scale-down', 'increase', 'decrease', 'at', 'over', 'start', 'end', 'all', 'problem', 'always', 'sometime', 'within', 'at-most-once', 'sometime-after', 'sometime-before', 'always-within', 'hold-during', 'hold-after', 'minimize', 'maximize', 'total-time', 'is-violated'), suffix='\\b'), Name.Builtin)]}
  }

  class PerlLexer {
      + name = 'Perl'
      + url = 'https://www.perl.org'
      + aliases = ['perl', 'pl']
      + filenames = ['*.pl', '*.pm', '*.t', '*.perl']
      + mimetypes = ['text/x-perl', 'application/x-perl']
      + version_added = ''
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'balanced-regex': [('/(\\\\\\\\|\\\\[^\\\\]|[^\\\\/])*/[egimosx]*', String.Regex, '#pop'), ('!(\\\\\\\\|\\\\[^\\\\]|[^\\\\!])*![egimosx]*', String.Regex, '#pop'), ('\\\\(\\\\\\\\|[^\\\\])*\\\\[egimosx]*', String.Regex, '#pop'), ('\\{(\\\\\\\\|\\\\[^\\\\]|[^\\\\}])*\\}[egimosx]*', String.Regex, '#pop'), ('<(\\\\\\\\|\\\\[^\\\\]|[^\\\\>])*>[egimosx]*', String.Regex, '#pop'), ('\\[(\\\\\\\\|\\\\[^\\\\]|[^\\\\\\]])*\\][egimosx]*', String.Regex, '#pop'), ('\\((\\\\\\\\|\\\\[^\\\\]|[^\\\\)])*\\)[egimosx]*', String.Regex, '#pop'), ('@(\\\\\\\\|\\\\[^\\\\]|[^\\\\@])*@[egimosx]*', String.Regex, '#pop'), ('%(\\\\\\\\|\\\\[^\\\\]|[^\\\\%])*%[egimosx]*', String.Regex, '#pop'), ('\\$(\\\\\\\\|\\\\[^\\\\]|[^\\\\$])*\\$[egimosx]*', String.Regex, '#pop')], 'root': [('\\A\\#!.+?$', Comment.Hashbang), ('\\#.*?$', Comment.Single), ('^=[a-zA-Z0-9]+\\s+.*?\\n=cut', Comment.Multiline), (words(('case', 'continue', 'do', 'else', 'elsif', 'for', 'foreach', 'if', 'last', 'my', 'next', 'our', 'redo', 'reset', 'then', 'unless', 'until', 'while', 'print', 'new', 'BEGIN', 'CHECK', 'INIT', 'END', 'return'), suffix='\\b'), Keyword), ('(format)(\\s+)(\\w+)(\\s*)(=)(\\s*\\n)', bygroups(Keyword, Whitespace, Name, Whitespace, Punctuation, Whitespace), 'format'), ('(eq|lt|gt|le|ge|ne|not|and|or|cmp)\\b', Operator.Word), ('s/(\\\\\\\\|\\\\[^\\\\]|[^\\\\/])*/(\\\\\\\\|\\\\[^\\\\]|[^\\\\/])*/[egimosx]*', String.Regex), ('s!(\\\\\\\\|\\\\!|[^!])*!(\\\\\\\\|\\\\!|[^!])*![egimosx]*', String.Regex), ('s\\\\(\\\\\\\\|[^\\\\])*\\\\(\\\\\\\\|[^\\\\])*\\\\[egimosx]*', String.Regex), ('s@(\\\\\\\\|\\\\[^\\\\]|[^\\\\@])*@(\\\\\\\\|\\\\[^\\\\]|[^\\\\@])*@[egimosx]*', String.Regex), ('s%(\\\\\\\\|\\\\[^\\\\]|[^\\\\%])*%(\\\\\\\\|\\\\[^\\\\]|[^\\\\%])*%[egimosx]*', String.Regex), ('s\\{(\\\\\\\\|\\\\[^\\\\]|[^\\\\}])*\\}\\s*', String.Regex, 'balanced-regex'), ('s<(\\\\\\\\|\\\\[^\\\\]|[^\\\\>])*>\\s*', String.Regex, 'balanced-regex'), ('s\\[(\\\\\\\\|\\\\[^\\\\]|[^\\\\\\]])*\\]\\s*', String.Regex, 'balanced-regex'), ('s\\((\\\\\\\\|\\\\[^\\\\]|[^\\\\)])*\\)\\s*', String.Regex, 'balanced-regex'), ('m?/(\\\\\\\\|\\\\[^\\\\]|[^\\\\/\\n])*/[gcimosx]*', String.Regex), ('m(?=[/!\\\\{<\\[(@%$])', String.Regex, 'balanced-regex'), ('((?<==~)|(?<=\\())\\s*/(\\\\\\\\|\\\\[^\\\\]|[^\\\\/])*/[gcimosx]*', String.Regex), ('\\s+', Whitespace), (words(('abs', 'accept', 'alarm', 'atan2', 'bind', 'binmode', 'bless', 'caller', 'chdir', 'chmod', 'chomp', 'chop', 'chown', 'chr', 'chroot', 'close', 'closedir', 'connect', 'continue', 'cos', 'crypt', 'dbmclose', 'dbmopen', 'defined', 'delete', 'die', 'dump', 'each', 'endgrent', 'endhostent', 'endnetent', 'endprotoent', 'endpwent', 'endservent', 'eof', 'eval', 'exec', 'exists', 'exit', 'exp', 'fcntl', 'fileno', 'flock', 'fork', 'format', 'formline', 'getc', 'getgrent', 'getgrgid', 'getgrnam', 'gethostbyaddr', 'gethostbyname', 'gethostent', 'getlogin', 'getnetbyaddr', 'getnetbyname', 'getnetent', 'getpeername', 'getpgrp', 'getppid', 'getpriority', 'getprotobyname', 'getprotobynumber', 'getprotoent', 'getpwent', 'getpwnam', 'getpwuid', 'getservbyname', 'getservbyport', 'getservent', 'getsockname', 'getsockopt', 'glob', 'gmtime', 'goto', 'grep', 'hex', 'import', 'index', 'int', 'ioctl', 'join', 'keys', 'kill', 'last', 'lc', 'lcfirst', 'length', 'link', 'listen', 'local', 'localtime', 'log', 'lstat', 'map', 'mkdir', 'msgctl', 'msgget', 'msgrcv', 'msgsnd', 'my', 'next', 'oct', 'open', 'opendir', 'ord', 'our', 'pack', 'pipe', 'pop', 'pos', 'printf', 'prototype', 'push', 'quotemeta', 'rand', 'read', 'readdir', 'readline', 'readlink', 'readpipe', 'recv', 'redo', 'ref', 'rename', 'reverse', 'rewinddir', 'rindex', 'rmdir', 'scalar', 'seek', 'seekdir', 'select', 'semctl', 'semget', 'semop', 'send', 'setgrent', 'sethostent', 'setnetent', 'setpgrp', 'setpriority', 'setprotoent', 'setpwent', 'setservent', 'setsockopt', 'shift', 'shmctl', 'shmget', 'shmread', 'shmwrite', 'shutdown', 'sin', 'sleep', 'socket', 'socketpair', 'sort', 'splice', 'split', 'sprintf', 'sqrt', 'srand', 'stat', 'study', 'substr', 'symlink', 'syscall', 'sysopen', 'sysread', 'sysseek', 'system', 'syswrite', 'tell', 'telldir', 'tie', 'tied', 'time', 'times', 'tr', 'truncate', 'uc', 'ucfirst', 'umask', 'undef', 'unlink', 'unpack', 'unshift', 'untie', 'utime', 'values', 'vec', 'wait', 'waitpid', 'wantarray', 'warn', 'write'), suffix='\\b'), Name.Builtin), ('((__(DATA|DIE|WARN)__)|(STD(IN|OUT|ERR)))\\b', Name.Builtin.Pseudo), ('(<<)([\\\'"]?)([a-zA-Z_]\\w*)(\\2;?\\n.*?\\n)(\\3)(\\n)', bygroups(String, String, String.Delimiter, String, String.Delimiter, Whitespace)), ('__END__', Comment.Preproc, 'end-part'), ('\\$\\^[ADEFHILMOPSTWX]', Name.Variable.Global), ('\\$[\\\\\\"\\[\\]\'&`+*.,;=%~?@$!<>(^|/-](?!\\w)', Name.Variable.Global), ('[$@%#]+', Name.Variable, 'varname'), ('0_?[0-7]+(_[0-7]+)*', Number.Oct), ('0x[0-9A-Fa-f]+(_[0-9A-Fa-f]+)*', Number.Hex), ('0b[01]+(_[01]+)*', Number.Bin), ('(?i)(\\d*(_\\d*)*\\.\\d+(_\\d*)*|\\d+(_\\d*)*\\.\\d+(_\\d*)*)(e[+-]?\\d+)?', Number.Float), ('(?i)\\d+(_\\d*)*e[+-]?\\d+(_\\d*)*', Number.Float), ('\\d+(_\\d+)*', Number.Integer), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('`(\\\\\\\\|\\\\[^\\\\]|[^`\\\\])*`', String.Backtick), ('<([^\\s>]+)>', String.Regex), ('(q|qq|qw|qr|qx)\\{', String.Other, 'cb-string'), ('(q|qq|qw|qr|qx)\\(', String.Other, 'rb-string'), ('(q|qq|qw|qr|qx)\\[', String.Other, 'sb-string'), ('(q|qq|qw|qr|qx)\\<', String.Other, 'lt-string'), ('(q|qq|qw|qr|qx)([\\W_])(.|\\n)*?\\2', String.Other), ('(package)(\\s+)([a-zA-Z_]\\w*(?:::[a-zA-Z_]\\w*)*)', bygroups(Keyword, Whitespace, Name.Namespace)), ('(use|require|no)(\\s+)([a-zA-Z_]\\w*(?:::[a-zA-Z_]\\w*)*)', bygroups(Keyword, Whitespace, Name.Namespace)), ('(sub)(\\s+)', bygroups(Keyword, Whitespace), 'funcname'), (words(('no', 'package', 'require', 'use'), suffix='\\b'), Keyword), ('(\\[\\]|\\*\\*|::|<<|>>|>=|<=>|<=|={3}|!=|=~|!~|&&?|\\|\\||\\.{1,3})', Operator), ('[-+/*%=<>&^|!\\\\~]=?', Operator), ('[()\\[\\]:;,<>/?{}]', Punctuation), ('(?=\\w)', Name, 'name')], 'format': [('\\.\\n', String.Interpol, '#pop'), ('[^\\n]*\\n', String.Interpol)], 'varname': [('\\s+', Whitespace), ('\\{', Punctuation, '#pop'), ('\\)|,', Punctuation, '#pop'), ('\\w+::', Name.Namespace), ('[\\w:]+', Name.Variable, '#pop')], 'name': [('[a-zA-Z_]\\w*(::[a-zA-Z_]\\w*)*(::)?(?=\\s*->)', Name.Namespace, '#pop'), ('[a-zA-Z_]\\w*(::[a-zA-Z_]\\w*)*::', Name.Namespace, '#pop'), ('[\\w:]+', Name, '#pop'), ('[A-Z_]+(?=\\W)', Name.Constant, '#pop'), ('(?=\\W)', Text, '#pop')], 'funcname': [('[a-zA-Z_]\\w*[!?]?', Name.Function), ('\\s+', Whitespace), ('(\\([$@%]*\\))(\\s*)', bygroups(Punctuation, Whitespace)), (';', Punctuation, '#pop'), ('.*?\\{', Punctuation, '#pop')], 'cb-string': [('\\\\[{}\\\\]', String.Other), ('\\\\', String.Other), ('\\{', String.Other, 'cb-string'), ('\\}', String.Other, '#pop'), ('[^{}\\\\]+', String.Other)], 'rb-string': [('\\\\[()\\\\]', String.Other), ('\\\\', String.Other), ('\\(', String.Other, 'rb-string'), ('\\)', String.Other, '#pop'), ('[^()]+', String.Other)], 'sb-string': [('\\\\[\\[\\]\\\\]', String.Other), ('\\\\', String.Other), ('\\[', String.Other, 'sb-string'), ('\\]', String.Other, '#pop'), ('[^\\[\\]]+', String.Other)], 'lt-string': [('\\\\[<>\\\\]', String.Other), ('\\\\', String.Other), ('\\<', String.Other, 'lt-string'), ('\\>', String.Other, '#pop'), ('[^<>]+', String.Other)], 'end-part': [('.+', Comment.Preproc, '#pop')]}
  --
      + analyse_text(text)
  }

  class Perl6Lexer {
      + name = 'Perl6'
      + url = 'https://www.raku.org'
      + aliases = ['perl6', 'pl6', 'raku']
      + filenames = ['*.pl', '*.pm', '*.nqp', '*.p6', '*.6pl', '*.p6l', '*.pl6', '*.6pm', '*.p6m', '*.pm6', '*.t', '*.raku', '*.rakumod', '*.rakutest', '*.rakudoc']
      + mimetypes = ['text/x-perl6', 'application/x-perl6']
      + version_added = '2.0'
      + flags = re.MULTILINE | re.DOTALL
      + PERL6_IDENTIFIER_RANGE = "['\\w:-]"
      + PERL6_KEYWORDS = ('BEGIN', 'CATCH', 'CHECK', 'CLOSE', 'CONTROL', 'DOC', 'END', 'ENTER', 'FIRST', 'INIT', 'KEEP', 'LAST', 'LEAVE', 'NEXT', 'POST', 'PRE', 'QUIT', 'UNDO', 'anon', 'augment', 'but', 'class', 'constant', 'default', 'does', 'else', 'elsif', 'enum', 'for', 'gather', 'given', 'grammar', 'has', 'if', 'import', 'is', 'let', 'loop', 'made', 'make', 'method', 'module', 'multi', 'my', 'need', 'orwith', 'our', 'proceed', 'proto', 'repeat', 'require', 'return', 'return-rw', 'returns', 'role', 'rule', 'state', 'sub', 'submethod', 'subset', 'succeed', 'supersede', 'token', 'try', 'unit', 'unless', 'until', 'use', 'when', 'while', 'with', 'without', 'export', 'native', 'repr', 'required', 'rw', 'symbol')
      + PERL6_BUILTINS = ('ACCEPTS', 'abs', 'abs2rel', 'absolute', 'accept', 'accessed', 'acos', 'acosec', 'acosech', 'acosh', 'acotan', 'acotanh', 'acquire', 'act', 'action', 'actions', 'add', 'add_attribute', 'add_enum_value', 'add_fallback', 'add_method', 'add_parent', 'add_private_method', 'add_role', 'add_trustee', 'adverb', 'after', 'all', 'allocate', 'allof', 'allowed', 'alternative-names', 'annotations', 'antipair', 'antipairs', 'any', 'anyof', 'app_lifetime', 'append', 'arch', 'archname', 'args', 'arity', 'Array', 'asec', 'asech', 'asin', 'asinh', 'ASSIGN-KEY', 'ASSIGN-POS', 'assuming', 'ast', 'at', 'atan', 'atan2', 'atanh', 'AT-KEY', 'atomic-assign', 'atomic-dec-fetch', 'atomic-fetch', 'atomic-fetch-add', 'atomic-fetch-dec', 'atomic-fetch-inc', 'atomic-fetch-sub', 'atomic-inc-fetch', 'AT-POS', 'attributes', 'auth', 'await', 'backtrace', 'Bag', 'BagHash', 'bail-out', 'base', 'basename', 'base-repeating', 'batch', 'BIND-KEY', 'BIND-POS', 'bind-stderr', 'bind-stdin', 'bind-stdout', 'bind-udp', 'bits', 'bless', 'block', 'Bool', 'bool-only', 'bounds', 'break', 'Bridge', 'broken', 'BUILD', 'build-date', 'bytes', 'cache', 'callframe', 'calling-package', 'CALL-ME', 'callsame', 'callwith', 'can', 'cancel', 'candidates', 'cando', 'can-ok', 'canonpath', 'caps', 'caption', 'Capture', 'cas', 'catdir', 'categorize', 'categorize-list', 'catfile', 'catpath', 'cause', 'ceiling', 'cglobal', 'changed', 'Channel', 'chars', 'chdir', 'child', 'child-name', 'child-typename', 'chmod', 'chomp', 'chop', 'chr', 'chrs', 'chunks', 'cis', 'classify', 'classify-list', 'cleanup', 'clone', 'close', 'closed', 'close-stdin', 'cmp-ok', 'code', 'codes', 'collate', 'column', 'comb', 'combinations', 'command', 'comment', 'compiler', 'Complex', 'compose', 'compose_type', 'composer', 'condition', 'config', 'configure_destroy', 'configure_type_checking', 'conj', 'connect', 'constraints', 'construct', 'contains', 'contents', 'copy', 'cos', 'cosec', 'cosech', 'cosh', 'cotan', 'cotanh', 'count', 'count-only', 'cpu-cores', 'cpu-usage', 'CREATE', 'create_type', 'cross', 'cue', 'curdir', 'curupdir', 'd', 'Date', 'DateTime', 'day', 'daycount', 'day-of-month', 'day-of-week', 'day-of-year', 'days-in-month', 'declaration', 'decode', 'decoder', 'deepmap', 'default', 'defined', 'DEFINITE', 'delayed', 'DELETE-KEY', 'DELETE-POS', 'denominator', 'desc', 'DESTROY', 'destroyers', 'devnull', 'diag', 'did-you-mean', 'die', 'dies-ok', 'dir', 'dirname', 'dir-sep', 'DISTROnames', 'do', 'does', 'does-ok', 'done', 'done-testing', 'duckmap', 'dynamic', 'e', 'eager', 'earlier', 'elems', 'emit', 'enclosing', 'encode', 'encoder', 'encoding', 'end', 'ends-with', 'enum_from_value', 'enum_value_list', 'enum_values', 'enums', 'eof', 'EVAL', 'eval-dies-ok', 'EVALFILE', 'eval-lives-ok', 'exception', 'excludes-max', 'excludes-min', 'EXISTS-KEY', 'EXISTS-POS', 'exit', 'exitcode', 'exp', 'expected', 'explicitly-manage', 'expmod', 'extension', 'f', 'fail', 'fails-like', 'fc', 'feature', 'file', 'filename', 'find_method', 'find_method_qualified', 'finish', 'first', 'flat', 'flatmap', 'flip', 'floor', 'flunk', 'flush', 'fmt', 'format', 'formatter', 'freeze', 'from', 'from-list', 'from-loop', 'from-posix', 'full', 'full-barrier', 'get', 'get_value', 'getc', 'gist', 'got', 'grab', 'grabpairs', 'grep', 'handle', 'handled', 'handles', 'hardware', 'has_accessor', 'Hash', 'head', 'headers', 'hh-mm-ss', 'hidden', 'hides', 'hour', 'how', 'hyper', 'id', 'illegal', 'im', 'in', 'indent', 'index', 'indices', 'indir', 'infinite', 'infix', 'infix:<+>', 'infix:<->', 'install_method_cache', 'Instant', 'instead', 'Int', 'int-bounds', 'interval', 'in-timezone', 'invalid-str', 'invert', 'invocant', 'IO', 'IO::Notification.watch-path', 'is_trusted', 'is_type', 'isa', 'is-absolute', 'isa-ok', 'is-approx', 'is-deeply', 'is-hidden', 'is-initial-thread', 'is-int', 'is-lazy', 'is-leap-year', 'isNaN', 'isnt', 'is-prime', 'is-relative', 'is-routine', 'is-setting', 'is-win', 'item', 'iterator', 'join', 'keep', 'kept', 'KERNELnames', 'key', 'keyof', 'keys', 'kill', 'kv', 'kxxv', 'l', 'lang', 'last', 'lastcall', 'later', 'lazy', 'lc', 'leading', 'level', 'like', 'line', 'lines', 'link', 'List', 'listen', 'live', 'lives-ok', 'local', 'lock', 'log', 'log10', 'lookup', 'lsb', 'made', 'MAIN', 'make', 'Map', 'match', 'max', 'maxpairs', 'merge', 'message', 'method', 'method_table', 'methods', 'migrate', 'min', 'minmax', 'minpairs', 'minute', 'misplaced', 'Mix', 'MixHash', 'mkdir', 'mode', 'modified', 'month', 'move', 'mro', 'msb', 'multi', 'multiness', 'my', 'name', 'named', 'named_names', 'narrow', 'nativecast', 'native-descriptor', 'nativesizeof', 'new', 'new_type', 'new-from-daycount', 'new-from-pairs', 'next', 'nextcallee', 'next-handle', 'nextsame', 'nextwith', 'NFC', 'NFD', 'NFKC', 'NFKD', 'nl-in', 'nl-out', 'nodemap', 'nok', 'none', 'norm', 'not', 'note', 'now', 'nude', 'Num', 'numerator', 'Numeric', 'of', 'offset', 'offset-in-hours', 'offset-in-minutes', 'ok', 'old', 'on-close', 'one', 'on-switch', 'open', 'opened', 'operation', 'optional', 'ord', 'ords', 'orig', 'os-error', 'osname', 'out-buffer', 'pack', 'package', 'package-kind', 'package-name', 'packages', 'pair', 'pairs', 'pairup', 'parameter', 'params', 'parent', 'parent-name', 'parents', 'parse', 'parse-base', 'parsefile', 'parse-names', 'parts', 'pass', 'path', 'path-sep', 'payload', 'peer-host', 'peer-port', 'periods', 'perl', 'permutations', 'phaser', 'pick', 'pickpairs', 'pid', 'placeholder', 'plan', 'plus', 'polar', 'poll', 'polymod', 'pop', 'pos', 'positional', 'posix', 'postfix', 'postmatch', 'precomp-ext', 'precomp-target', 'pred', 'prefix', 'prematch', 'prepend', 'print', 'printf', 'print-nl', 'print-to', 'private', 'private_method_table', 'proc', 'produce', 'Promise', 'prompt', 'protect', 'pull-one', 'push', 'push-all', 'push-at-least', 'push-exactly', 'push-until-lazy', 'put', 'qualifier-type', 'quit', 'r', 'race', 'radix', 'rand', 'range', 'Rat', 'raw', 're', 'read', 'readchars', 'readonly', 'ready', 'Real', 'reallocate', 'reals', 'reason', 'rebless', 'receive', 'recv', 'redispatcher', 'redo', 'reduce', 'rel2abs', 'relative', 'release', 'rename', 'repeated', 'replacement', 'report', 'reserved', 'resolve', 'restore', 'result', 'resume', 'rethrow', 'reverse', 'right', 'rindex', 'rmdir', 'role', 'roles_to_compose', 'rolish', 'roll', 'rootdir', 'roots', 'rotate', 'rotor', 'round', 'roundrobin', 'routine-type', 'run', 'rwx', 's', 'samecase', 'samemark', 'samewith', 'say', 'schedule-on', 'scheduler', 'scope', 'sec', 'sech', 'second', 'seek', 'self', 'send', 'Set', 'set_hidden', 'set_name', 'set_package', 'set_rw', 'set_value', 'SetHash', 'set-instruments', 'setup_finalization', 'shape', 'share', 'shell', 'shift', 'sibling', 'sigil', 'sign', 'signal', 'signals', 'signature', 'sin', 'sinh', 'sink', 'sink-all', 'skip', 'skip-at-least', 'skip-at-least-pull-one', 'skip-one', 'skip-rest', 'sleep', 'sleep-timer', 'sleep-until', 'Slip', 'slurp', 'slurp-rest', 'slurpy', 'snap', 'snapper', 'so', 'socket-host', 'socket-port', 'sort', 'source', 'source-package', 'spawn', 'SPEC', 'splice', 'split', 'splitdir', 'splitpath', 'sprintf', 'spurt', 'sqrt', 'squish', 'srand', 'stable', 'start', 'started', 'starts-with', 'status', 'stderr', 'stdout', 'Str', 'sub_signature', 'subbuf', 'subbuf-rw', 'subname', 'subparse', 'subst', 'subst-mutate', 'substr', 'substr-eq', 'substr-rw', 'subtest', 'succ', 'sum', 'Supply', 'symlink', 't', 'tail', 'take', 'take-rw', 'tan', 'tanh', 'tap', 'target', 'target-name', 'tc', 'tclc', 'tell', 'then', 'throttle', 'throw', 'throws-like', 'timezone', 'tmpdir', 'to', 'today', 'todo', 'toggle', 'to-posix', 'total', 'trailing', 'trans', 'tree', 'trim', 'trim-leading', 'trim-trailing', 'truncate', 'truncated-to', 'trusts', 'try_acquire', 'trying', 'twigil', 'type', 'type_captures', 'typename', 'uc', 'udp', 'uncaught_handler', 'unimatch', 'uniname', 'uninames', 'uniparse', 'uniprop', 'uniprops', 'unique', 'unival', 'univals', 'unlike', 'unlink', 'unlock', 'unpack', 'unpolar', 'unshift', 'unwrap', 'updir', 'USAGE', 'use-ok', 'utc', 'val', 'value', 'values', 'VAR', 'variable', 'verbose-config', 'version', 'VMnames', 'volume', 'vow', 'w', 'wait', 'warn', 'watch', 'watch-path', 'week', 'weekday-of-month', 'week-number', 'week-year', 'WHAT', 'when', 'WHERE', 'WHEREFORE', 'WHICH', 'WHO', 'whole-second', 'WHY', 'wordcase', 'words', 'workaround', 'wrap', 'write', 'write-to', 'x', 'yada', 'year', 'yield', 'yyyy-mm-dd', 'z', 'zip', 'zip-latest')
      + PERL6_BUILTIN_CLASSES = ('False', 'True', 'Any', 'Array', 'Associative', 'AST', 'atomicint', 'Attribute', 'Backtrace', 'Backtrace::Frame', 'Bag', 'Baggy', 'BagHash', 'Blob', 'Block', 'Bool', 'Buf', 'Callable', 'CallFrame', 'Cancellation', 'Capture', 'CArray', 'Channel', 'Code', 'compiler', 'Complex', 'ComplexStr', 'Cool', 'CurrentThreadScheduler', 'Cursor', 'Date', 'Dateish', 'DateTime', 'Distro', 'Duration', 'Encoding', 'Exception', 'Failure', 'FatRat', 'Grammar', 'Hash', 'HyperWhatever', 'Instant', 'Int', 'int16', 'int32', 'int64', 'int8', 'IntStr', 'IO', 'IO::ArgFiles', 'IO::CatHandle', 'IO::Handle', 'IO::Notification', 'IO::Path', 'IO::Path::Cygwin', 'IO::Path::QNX', 'IO::Path::Unix', 'IO::Path::Win32', 'IO::Pipe', 'IO::Socket', 'IO::Socket::Async', 'IO::Socket::INET', 'IO::Spec', 'IO::Spec::Cygwin', 'IO::Spec::QNX', 'IO::Spec::Unix', 'IO::Spec::Win32', 'IO::Special', 'Iterable', 'Iterator', 'Junction', 'Kernel', 'Label', 'List', 'Lock', 'Lock::Async', 'long', 'longlong', 'Macro', 'Map', 'Match', 'Metamodel::AttributeContainer', 'Metamodel::C3MRO', 'Metamodel::ClassHOW', 'Metamodel::EnumHOW', 'Metamodel::Finalization', 'Metamodel::MethodContainer', 'Metamodel::MROBasedMethodDispatch', 'Metamodel::MultipleInheritance', 'Metamodel::Naming', 'Metamodel::Primitives', 'Metamodel::PrivateMethodContainer', 'Metamodel::RoleContainer', 'Metamodel::Trusting', 'Method', 'Mix', 'MixHash', 'Mixy', 'Mu', 'NFC', 'NFD', 'NFKC', 'NFKD', 'Nil', 'Num', 'num32', 'num64', 'Numeric', 'NumStr', 'ObjAt', 'Order', 'Pair', 'Parameter', 'Perl', 'Pod::Block', 'Pod::Block::Code', 'Pod::Block::Comment', 'Pod::Block::Declarator', 'Pod::Block::Named', 'Pod::Block::Para', 'Pod::Block::Table', 'Pod::Heading', 'Pod::Item', 'Pointer', 'Positional', 'PositionalBindFailover', 'Proc', 'Proc::Async', 'Promise', 'Proxy', 'PseudoStash', 'QuantHash', 'Range', 'Rat', 'Rational', 'RatStr', 'Real', 'Regex', 'Routine', 'Scalar', 'Scheduler', 'Semaphore', 'Seq', 'Set', 'SetHash', 'Setty', 'Signature', 'size_t', 'Slip', 'Stash', 'Str', 'StrDistance', 'Stringy', 'Sub', 'Submethod', 'Supplier', 'Supplier::Preserving', 'Supply', 'Systemic', 'Tap', 'Telemetry', 'Telemetry::Instrument::Thread', 'Telemetry::Instrument::Usage', 'Telemetry::Period', 'Telemetry::Sampler', 'Thread', 'ThreadPoolScheduler', 'UInt', 'uint16', 'uint32', 'uint64', 'uint8', 'Uni', 'utf8', 'Variable', 'Version', 'VM', 'Whatever', 'WhateverCode', 'WrapHandle')
      + PERL6_OPERATORS = ('X', 'Z', 'after', 'also', 'and', 'andthen', 'before', 'cmp', 'div', 'eq', 'eqv', 'extra', 'ff', 'fff', 'ge', 'gt', 'le', 'leg', 'lt', 'm', 'mm', 'mod', 'ne', 'or', 'orelse', 'rx', 's', 'tr', 'x', 'xor', 'xx', '++', '--', '**', '!', '+', '-', '~', '?', '|', '||', '+^', '~^', '?^', '^', '*', '/', '%', '%%', '+&', '+<', '+>', '~&', '~<', '~>', '?&', 'gcd', 'lcm', '+', '-', '+|', '+^', '~|', '~^', '?|', '?^', '~', '&', '^', 'but', 'does', '<=>', '..', '..^', '^..', '^..^', '!=', '==', '<', '<=', '>', '>=', '~~', '===', '!eqv', '&&', '||', '^^', '//', 'min', 'max', '??', '!!', 'ff', 'fff', 'so', 'not', '<==', '==>', '<<==', '==>>', 'unicmp')
      + PERL6_BRACKETS = {'(': ')', '<': '>', '[': ']', '{': '}', '«': '»', '༺': '༻', '༼': '༽', '᚛': '᚜', '‘': '’', '‚': '’', '‛': '’', '“': '”', '„': '”', '‟': '”', '‹': '›', '⁅': '⁆', '⁽': '⁾', '₍': '₎', '∈': '∋', '∉': '∌', '∊': '∍', '∕': '⧵', '∼': '∽', '≃': '⋍', '≒': '≓', '≔': '≕', '≤': '≥', '≦': '≧', '≨': '≩', '≪': '≫', '≮': '≯', '≰': '≱', '≲': '≳', '≴': '≵', '≶': '≷', '≸': '≹', '≺': '≻', '≼': '≽', '≾': '≿', '⊀': '⊁', '⊂': '⊃', '⊄': '⊅', '⊆': '⊇', '⊈': '⊉', '⊊': '⊋', '⊏': '⊐', '⊑': '⊒', '⊘': '⦸', '⊢': '⊣', '⊦': '⫞', '⊨': '⫤', '⊩': '⫣', '⊫': '⫥', '⊰': '⊱', '⊲': '⊳', '⊴': '⊵', '⊶': '⊷', '⋉': '⋊', '⋋': '⋌', '⋐': '⋑', '⋖': '⋗', '⋘': '⋙', '⋚': '⋛', '⋜': '⋝', '⋞': '⋟', '⋠': '⋡', '⋢': '⋣', '⋤': '⋥', '⋦': '⋧', '⋨': '⋩', '⋪': '⋫', '⋬': '⋭', '⋰': '⋱', '⋲': '⋺', '⋳': '⋻', '⋴': '⋼', '⋶': '⋽', '⋷': '⋾', '⌈': '⌉', '⌊': '⌋', '〈': '〉', '⎴': '⎵', '❨': '❩', '❪': '❫', '❬': '❭', '❮': '❯', '❰': '❱', '❲': '❳', '❴': '❵', '⟃': '⟄', '⟅': '⟆', '⟕': '⟖', '⟝': '⟞', '⟢': '⟣', '⟤': '⟥', '⟦': '⟧', '⟨': '⟩', '⟪': '⟫', '⦃': '⦄', '⦅': '⦆', '⦇': '⦈', '⦉': '⦊', '⦋': '⦌', '⦍': '⦎', '⦏': '⦐', '⦑': '⦒', '⦓': '⦔', '⦕': '⦖', '⦗': '⦘', '⧀': '⧁', '⧄': '⧅', '⧏': '⧐', '⧑': '⧒', '⧔': '⧕', '⧘': '⧙', '⧚': '⧛', '⧸': '⧹', '⧼': '⧽', '⨫': '⨬', '⨭': '⨮', '⨴': '⨵', '⨼': '⨽', '⩤': '⩥', '⩹': '⩺', '⩽': '⩾', '⩿': '⪀', '⪁': '⪂', '⪃': '⪄', '⪋': '⪌', '⪑': '⪒', '⪓': '⪔', '⪕': '⪖', '⪗': '⪘', '⪙': '⪚', '⪛': '⪜', '⪡': '⪢', '⪦': '⪧', '⪨': '⪩', '⪪': '⪫', '⪬': '⪭', '⪯': '⪰', '⪳': '⪴', '⪻': '⪼', '⪽': '⪾', '⪿': '⫀', '⫁': '⫂', '⫃': '⫄', '⫅': '⫆', '⫍': '⫎', '⫏': '⫐', '⫑': '⫒', '⫓': '⫔', '⫕': '⫖', '⫬': '⫭', '⫷': '⫸', '⫹': '⫺', '⸂': '⸃', '⸄': '⸅', '⸉': '⸊', '⸌': '⸍', '⸜': '⸝', '⸠': '⸡', '〈': '〉', '《': '》', '「': '」', '『': '』', '【': '】', '〔': '〕', '〖': '〗', '〘': '〙', '〚': '〛', '〝': '〞', '﴾': '﴿', '︗': '︘', '︵': '︶', '︷': '︸', '︹': '︺', '︻': '︼', '︽': '︾', '︿': '﹀', '﹁': '﹂', '﹃': '﹄', '﹇': '﹈', '﹙': '﹚', '﹛': '﹜', '﹝': '﹞', '（': '）', '＜': '＞', '［': '］', '｛': '｝', '｟': '｠', '｢': '｣'}
      + tokens = {'common': [('#[`|=](?P<delimiter>(?P<first_char>[' + ''.join(PERL6_BRACKETS) + '])(?P=first_char)*)', brackets_callback(Comment.Multiline)), ('#[^\\n]*$', Comment.Single), ('^(\\s*)=begin\\s+(\\w+)\\b.*?^\\1=end\\s+\\2', Comment.Multiline), ('^(\\s*)=for.*?\\n\\s*?\\n', Comment.Multiline), ('^=.*?\\n\\s*?\\n', Comment.Multiline), ('(regex|token|rule)(\\s*' + PERL6_IDENTIFIER_RANGE + '+:sym)', bygroups(Keyword, Name), 'token-sym-brackets'), ('(regex|token|rule)(?!' + PERL6_IDENTIFIER_RANGE + ')(\\s*' + PERL6_IDENTIFIER_RANGE + '+)?', bygroups(Keyword, Name), 'pre-token'), ('(role)(\\s+)(q)(\\s*)', bygroups(Keyword, Whitespace, Name, Whitespace)), (_build_word_match(PERL6_KEYWORDS, PERL6_IDENTIFIER_RANGE), Keyword), (_build_word_match(PERL6_BUILTIN_CLASSES, PERL6_IDENTIFIER_RANGE, suffix='(?::[UD])?'), Name.Builtin), (_build_word_match(PERL6_BUILTINS, PERL6_IDENTIFIER_RANGE), Name.Builtin), ('[$@%&][.^:?=!~]?' + PERL6_IDENTIFIER_RANGE + '+(?:<<.*?>>|<.*?>|«.*?»)*', Name.Variable), ('\\$[!/](?:<<.*?>>|<.*?>|«.*?»)*', Name.Variable.Global), ('::\\?\\w+', Name.Variable.Global), ('[$@%&]\\*' + PERL6_IDENTIFIER_RANGE + '+(?:<<.*?>>|<.*?>|«.*?»)*', Name.Variable.Global), ('\\$(?:<.*?>)+', Name.Variable), ('(?:q|qq|Q)[a-zA-Z]?\\s*(?P<adverbs>:[\\w\\s:]+)?\\s*(?P<delimiter>(?P<first_char>[^0-9a-zA-Z:\\s])(?P=first_char)*)', brackets_callback(String)), ('0_?[0-7]+(_[0-7]+)*', Number.Oct), ('0x[0-9A-Fa-f]+(_[0-9A-Fa-f]+)*', Number.Hex), ('0b[01]+(_[01]+)*', Number.Bin), ('(?i)(\\d*(_\\d*)*\\.\\d+(_\\d*)*|\\d+(_\\d*)*\\.\\d+(_\\d*)*)(e[+-]?\\d+)?', Number.Float), ('(?i)\\d+(_\\d*)*e[+-]?\\d+(_\\d*)*', Number.Float), ('\\d+(_\\d+)*', Number.Integer), ('(?<=~~)\\s*/(?:\\\\\\\\|\\\\/|.)*?/', String.Regex), ('(?<=[=(,])\\s*/(?:\\\\\\\\|\\\\/|.)*?/', String.Regex), ('m\\w+(?=\\()', Name), ('(?:m|ms|rx)\\s*(?P<adverbs>:[\\w\\s:]+)?\\s*(?P<delimiter>(?P<first_char>[^\\w:\\s])(?P=first_char)*)', brackets_callback(String.Regex)), ('(?:s|ss|tr)\\s*(?::[\\w\\s:]+)?\\s*/(?:\\\\\\\\|\\\\/|.)*?/(?:\\\\\\\\|\\\\/|.)*?/', String.Regex), ('<[^\\s=].*?\\S>', String), (_build_word_match(PERL6_OPERATORS), Operator), ('\\w' + PERL6_IDENTIFIER_RANGE + '*', Name), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String)], 'root': [include('common'), ('\\{', opening_brace_callback), ('\\}', closing_brace_callback), ('.+?', Text)], 'pre-token': [include('common'), ('\\{', Text, ('#pop', 'token')), ('.+?', Text)], 'token-sym-brackets': [('(?P<delimiter>(?P<first_char>[' + ''.join(PERL6_BRACKETS) + '])(?P=first_char)*)', brackets_callback(Name), ('#pop', 'pre-token')), default(('#pop', 'pre-token'))], 'token': [('\\}', Text, '#pop'), ('(?<=:)(?:my|our|state|constant|temp|let).*?;', using(this)), ('<(?:[-!?+.]\\s*)?\\[.*?\\]>', String.Regex), ("(?<!\\\\)'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Regex), ('(?<!\\\\)"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Regex), ('#.*?$', Comment.Single), ('\\{', embedded_perl6_callback), ('.+?', String.Regex)]}
  --
      + brackets_callback(token_class)
      + opening_brace_callback(lexer, match, context)
      + closing_brace_callback(lexer, match, context)
      + embedded_perl6_callback(lexer, match, context)
      + analyse_text(text)
      - __init__()
  }

  class PhixLexer {
      + name = 'Phix'
      + url = 'http://phix.x10.mx'
      + aliases = ['phix']
      + filenames = ['*.exw']
      + mimetypes = ['text/x-phix']
      + version_added = '2.14'
      + flags = re.MULTILINE
      + preproc = ('ifdef', 'elsifdef', 'elsedef')
      + types = ('string', 'nullable_string', 'atom_string', 'atom', 'bool', 'boolean', 'cdCanvan', 'cdCanvas', 'complex', 'CURLcode', 'dictionary', 'int', 'integer', 'Ihandle', 'Ihandles', 'Ihandln', 'mpfr', 'mpq', 'mpz', 'mpz_or_string', 'number', 'rid_string', 'seq', 'sequence', 'timedate', 'object')
      + keywords = ('abstract', 'class', 'continue', 'export', 'extends', 'nullable', 'private', 'public', 'static', 'struct', 'trace', 'and', 'break', 'by', 'case', 'catch', 'const', 'constant', 'debug', 'default', 'do', 'else', 'elsif', 'end', 'enum', 'exit', 'fallthru', 'fallthrough', 'for', 'forward', 'function', 'global', 'if', 'in', 'include', 'js', 'javascript', 'javascript_semantics', 'let', 'not', 'or', 'procedure', 'profile', 'profile_time', 'return', 'safe_mode', 'switch', 'then', 'to', 'try', 'type', 'type_check', 'until', 'warning', 'while', 'with', 'without', 'xor')
      + routines = ('abort', 'abs', 'adjust_timedate', 'and_bits', 'and_bitsu', 'apply', 'append', 'arccos', 'arcsin', 'arctan', 'assert', 'atan2', 'atom_to_float32', 'atom_to_float64', 'bankers_rounding', 'beep', 'begins', 'binary_search', 'bits_to_int', 'bk_color', 'bytes_to_int', 'call_func', 'call_proc', 'cdCanvasActivate', 'cdCanvasArc', 'cdCanvasBegin', 'cdCanvasBox', 'cdCanvasChord', 'cdCanvasCircle', 'cdCanvasClear', 'cdCanvasEnd', 'cdCanvasFlush', 'cdCanvasFont', 'cdCanvasGetImageRGB', 'cdCanvasGetSize', 'cdCanvasGetTextAlignment', 'cdCanvasGetTextSize', 'cdCanvasLine', 'cdCanvasMark', 'cdCanvasMarkSize', 'cdCanvasMultiLineVectorText', 'cdCanvasPixel', 'cdCanvasRect', 'cdCanvasRoundedBox', 'cdCanvasRoundedRect', 'cdCanvasSector', 'cdCanvasSetAttribute', 'cdCanvasSetBackground', 'cdCanvasSetFillMode', 'cdCanvasSetForeground', 'cdCanvasSetInteriorStyle', 'cdCanvasSetLineStyle', 'cdCanvasSetLineWidth', 'cdCanvasSetTextAlignment', 'cdCanvasText', 'cdCanvasSetTextOrientation', 'cdCanvasGetTextOrientation', 'cdCanvasVectorText', 'cdCanvasVectorTextDirection', 'cdCanvasVectorTextSize', 'cdCanvasVertex', 'cdCreateCanvas', 'cdDecodeAlpha', 'cdDecodeColor', 'cdDecodeColorAlpha', 'cdEncodeAlpha', 'cdEncodeColor', 'cdEncodeColorAlpha', 'cdKillCanvas', 'cdVersion', 'cdVersionDate', 'ceil', 'change_timezone', 'choose', 'clear_screen', 'columnize', 'command_line', 'compare', 'complex_abs', 'complex_add', 'complex_arg', 'complex_conjugate', 'complex_cos', 'complex_cosh', 'complex_div', 'complex_exp', 'complex_imag', 'complex_inv', 'complex_log', 'complex_mul', 'complex_neg', 'complex_new', 'complex_norm', 'complex_power', 'complex_rho', 'complex_real', 'complex_round', 'complex_sin', 'complex_sinh', 'complex_sprint', 'complex_sqrt', 'complex_sub', 'complex_theta', 'concat', 'cos', 'crash', 'custom_sort', 'date', 'day_of_week', 'day_of_year', 'days_in_month', 'decode_base64', 'decode_flags', 'deep_copy', 'deld', 'deserialize', 'destroy_dict', 'destroy_queue', 'destroy_stack', 'dict_name', 'dict_size', 'elapsed', 'elapsed_short', 'encode_base64', 'equal', 'even', 'exp', 'extract', 'factorial', 'factors', 'file_size_k', 'find', 'find_all', 'find_any', 'find_replace', 'filter', 'flatten', 'float32_to_atom', 'float64_to_atom', 'floor', 'format_timedate', 'free_console', 'from_polar', 'gcd', 'get_file_base', 'get_file_extension', 'get_file_name', 'get_file_name_and_path', 'get_file_path', 'get_file_path_and_name', 'get_maxprime', 'get_prime', 'get_primes', 'get_primes_le', 'get_proper_dir', 'get_proper_path', 'get_rand', 'get_routine_info', 'get_test_abort', 'get_test_logfile', 'get_test_pause', 'get_test_verbosity', 'get_tzid', 'getd', 'getdd', 'getd_all_keys', 'getd_by_index', 'getd_index', 'getd_partial_key', 'glAttachShader', 'glBindBuffer', 'glBindTexture', 'glBufferData', 'glCanvasSpecialText', 'glClear', 'glClearColor', 'glColor', 'glCompileShader', 'glCreateBuffer', 'glCreateProgram', 'glCreateShader', 'glCreateTexture', 'glDeleteProgram', 'glDeleteShader', 'glDrawArrays', 'glEnable', 'glEnableVertexAttribArray', 'glFloat32Array', 'glInt32Array', 'glFlush', 'glGetAttribLocation', 'glGetError', 'glGetProgramInfoLog', 'glGetProgramParameter', 'glGetShaderInfoLog', 'glGetShaderParameter', 'glGetUniformLocation', 'glLinkProgram', 'glLoadIdentity', 'glMatrixMode', 'glOrtho', 'glRotatef', 'glShadeModel', 'glShaderSource', 'glSimpleA7texcoords', 'glTexImage2Dc', 'glTexParameteri', 'glTranslate', 'glUniform1f', 'glUniform1i', 'glUniformMatrix4fv', 'glUseProgram', 'glVertex', 'glVertexAttribPointer', 'glViewport', 'head', 'hsv_to_rgb', 'iff', 'iif', 'include_file', 'incl0de_file', 'insert', 'instance', 'int_to_bits', 'int_to_bytes', 'is_dict', 'is_integer', 's_leap_year', 'is_prime', 'is_prime2', 'islower', 'isupper', 'Icallback', 'iup_isdouble', 'iup_isprint', 'iup_XkeyBase', 'IupAppend', 'IupAlarm', 'IupBackgroundBox', 'IupButton', 'IupCalendar', 'IupCanvas', 'IupClipboard', 'IupClose', 'IupCloseOnEscape', 'IupControlsOpen', 'IupDatePick', 'IupDestroy', 'IupDialog', 'IupDrawArc', 'IupDrawBegin', 'IupDrawEnd', 'IupDrawGetSize', 'IupDrawGetTextSize', 'IupDrawLine', 'IupDrawRectangle', 'IupDrawText', 'IupExpander', 'IupFill', 'IupFlatLabel', 'IupFlatList', 'IupFlatTree', 'IupFlush', 'IupFrame', 'IupGetAttribute', 'IupGetAttributeId', 'IupGetAttributePtr', 'IupGetBrother', 'IupGetChild', 'IupGetChildCount', 'IupGetClassName', 'IupGetDialog', 'IupGetDialogChild', 'IupGetDouble', 'IupGetFocus', 'IupGetGlobal', 'IupGetGlobalInt', 'IupGetGlobalIntInt', 'IupGetInt', 'IupGetInt2', 'IupGetIntId', 'IupGetIntInt', 'IupGetParent', 'IupGLCanvas', 'IupGLCanvasOpen', 'IupGLMakeCurrent', 'IupGraph', 'IupHbox', 'IupHide', 'IupImage', 'IupImageRGBA', 'IupItem', 'iupKeyCodeToName', 'IupLabel', 'IupLink', 'IupList', 'IupMap', 'IupMenu', 'IupMenuItem', 'IupMessage', 'IupMessageDlg', 'IupMultiBox', 'IupMultiLine', 'IupNextField', 'IupNormaliser', 'IupOpen', 'IupPlayInput', 'IupPopup', 'IupPreviousField', 'IupProgressBar', 'IupRadio', 'IupRecordInput', 'IupRedraw', 'IupRefresh', 'IupRefreshChildren', 'IupSeparator', 'IupSetAttribute', 'IupSetAttributes', 'IupSetAttributeHandle', 'IupSetAttributeId', 'IupSetAttributePtr', 'IupSetCallback', 'IupSetCallbacks', 'IupSetDouble', 'IupSetFocus', 'IupSetGlobal', 'IupSetGlobalInt', 'IupSetGlobalFunction', 'IupSetHandle', 'IupSetInt', 'IupSetStrAttribute', 'IupSetStrGlobal', 'IupShow', 'IupShowXY', 'IupSplit', 'IupStoreAttribute', 'IupSubmenu', 'IupTable', 'IupTableClearSelected', 'IupTableClick_cb', 'IupTableGetSelected', 'IupTableResize_cb', 'IupTableSetData', 'IupTabs', 'IupText', 'IupTimer', 'IupToggle', 'IupTreeAddNodes', 'IupTreeView', 'IupUpdate', 'IupValuator', 'IupVbox', 'join', 'join_by', 'join_path', 'k_perm', 'largest', 'lcm', 'length', 'log', 'log10', 'log2', 'lower', 'm4_crossProduct', 'm4_inverse', 'm4_lookAt', 'm4_multiply', 'm4_normalize', 'm4_perspective', 'm4_subtractVectors', 'm4_xRotate', 'm4_yRotate', 'machine_bits', 'machine_word', 'match', 'match_all', 'match_replace', 'max', 'maxsq', 'min', 'minsq', 'mod', 'mpfr_add', 'mpfr_ceil', 'mpfr_cmp', 'mpfr_cmp_si', 'mpfr_const_pi', 'mpfr_div', 'mpfr_div_si', 'mpfr_div_z', 'mpfr_floor', 'mpfr_free', 'mpfr_get_d', 'mpfr_get_default_precision', 'mpfr_get_default_rounding_mode', 'mpfr_get_fixed', 'mpfr_get_precision', 'mpfr_get_si', 'mpfr_init', 'mpfr_inits', 'mpfr_init_set', 'mpfr_init_set_q', 'mpfr_init_set_z', 'mpfr_mul', 'mpfr_mul_si', 'mpfr_pow_si', 'mpfr_set', 'mpfr_set_d', 'mpfr_set_default_precision', 'mpfr_set_default_rounding_mode', 'mpfr_set_precision', 'mpfr_set_q', 'mpfr_set_si', 'mpfr_set_str', 'mpfr_set_z', 'mpfr_si_div', 'mpfr_si_sub', 'mpfr_sqrt', 'mpfr_sub', 'mpfr_sub_si', 'mpq_abs', 'mpq_add', 'mpq_add_si', 'mpq_canonicalize', 'mpq_cmp', 'mpq_cmp_si', 'mpq_div', 'mpq_div_2exp', 'mpq_free', 'mpq_get_den', 'mpq_get_num', 'mpq_get_str', 'mpq_init', 'mpq_init_set', 'mpq_init_set_si', 'mpq_init_set_str', 'mpq_init_set_z', 'mpq_inits', 'mpq_inv', 'mpq_mul', 'mpq_neg', 'mpq_set', 'mpq_set_si', 'mpq_set_str', 'mpq_set_z', 'mpq_sub', 'mpz_abs', 'mpz_add', 'mpz_addmul', 'mpz_addmul_ui', 'mpz_addmul_si', 'mpz_add_si', 'mpz_add_ui', 'mpz_and', 'mpz_bin_uiui', 'mpz_cdiv_q', 'mpz_cmp', 'mpz_cmp_si', 'mpz_divexact', 'mpz_divexact_ui', 'mpz_divisible_p', 'mpz_divisible_ui_p', 'mpz_even', 'mpz_fac_ui', 'mpz_factorstring', 'mpz_fdiv_q', 'mpz_fdiv_q_2exp', 'mpz_fdiv_q_ui', 'mpz_fdiv_qr', 'mpz_fdiv_r', 'mpz_fdiv_ui', 'mpz_fib_ui', 'mpz_fib2_ui', 'mpz_fits_atom', 'mpz_fits_integer', 'mpz_free', 'mpz_gcd', 'mpz_gcd_ui', 'mpz_get_atom', 'mpz_get_integer', 'mpz_get_short_str', 'mpz_get_str', 'mpz_init', 'mpz_init_set', 'mpz_inits', 'mpz_invert', 'mpz_lcm', 'mpz_lcm_ui', 'mpz_max', 'mpz_min', 'mpz_mod', 'mpz_mod_ui', 'mpz_mul', 'mpz_mul_2exp', 'mpz_mul_d', 'mpz_mul_si', 'mpz_neg', 'mpz_nthroot', 'mpz_odd', 'mpz_pollard_rho', 'mpz_pow_ui', 'mpz_powm', 'mpz_powm_ui', 'mpz_prime', 'mpz_prime_factors', 'mpz_prime_mr', 'mpz_rand', 'mpz_rand_ui', 'mpz_re_compose', 'mpz_remove', 'mpz_scan0', 'mpz_scan1', 'mpz_set', 'mpz_set_d', 'mpz_set_si', 'mpz_set_str', 'mpz_set_v', 'mpz_sign', 'mpz_sizeinbase', 'mpz_sqrt', 'mpz_sub', 'mpz_sub_si', 'mpz_sub_ui', 'mpz_si_sub', 'mpz_tdiv_q_2exp', 'mpz_tdiv_r_2exp', 'mpz_tstbit', 'mpz_ui_pow_ui', 'mpz_xor', 'named_dict', 'new_dict', 'new_queue', 'new_stack', 'not_bits', 'not_bitsu', 'odd', 'or_all', 'or_allu', 'or_bits', 'or_bitsu', 'ord', 'ordinal', 'ordinant', 'override_timezone', 'pad', 'pad_head', 'pad_tail', 'parse_date_string', 'papply', 'peep', 'peepn', 'peep_dict', 'permute', 'permutes', 'platform', 'pop', 'popn', 'pop_dict', 'power', 'pp', 'ppEx', 'ppExf', 'ppf', 'ppOpt', 'pq_add', 'pq_destroy', 'pq_empty', 'pq_new', 'pq_peek', 'pq_pop', 'pq_pop_data', 'pq_size', 'prepend', 'prime_factors', 'printf', 'product', 'proper', 'push', 'pushn', 'putd', 'puts', 'queue_empty', 'queue_size', 'rand', 'rand_range', 'reinstate', 'remainder', 'remove', 'remove_all', 'repeat', 'repeatch', 'replace', 'requires', 'reverse', 'rfind', 'rgb', 'rmatch', 'rmdr', 'rnd', 'round', 'routine_id', 'scanf', 'serialize', 'series', 'set_rand', 'set_test_abort', 'set_test_logfile', 'set_test_module', 'set_test_pause', 'set_test_verbosity', 'set_timedate_formats', 'set_timezone', 'setd', 'setd_default', 'shorten', 'sha256', 'shift_bits', 'shuffle', 'sign', 'sin', 'smallest', 'sort', 'sort_columns', 'speak', 'splice', 'split', 'split_any', 'split_by', 'sprint', 'sprintf', 'sq_abs', 'sq_add', 'sq_and', 'sq_and_bits', 'sq_arccos', 'sq_arcsin', 'sq_arctan', 'sq_atom', 'sq_ceil', 'sq_cmp', 'sq_cos', 'sq_div', 'sq_even', 'sq_eq', 'sq_floor', 'sq_floor_div', 'sq_ge', 'sq_gt', 'sq_int', 'sq_le', 'sq_log', 'sq_log10', 'sq_log2', 'sq_lt', 'sq_max', 'sq_min', 'sq_mod', 'sq_mul', 'sq_ne', 'sq_not', 'sq_not_bits', 'sq_odd', 'sq_or', 'sq_or_bits', 'sq_power', 'sq_rand', 'sq_remainder', 'sq_rmdr', 'sq_rnd', 'sq_round', 'sq_seq', 'sq_sign', 'sq_sin', 'sq_sqrt', 'sq_str', 'sq_sub', 'sq_tan', 'sq_trunc', 'sq_uminus', 'sq_xor', 'sq_xor_bits', 'sqrt', 'square_free', 'stack_empty', 'stack_size', 'substitute', 'substitute_all', 'sum', 'tail', 'tan', 'test_equal', 'test_fail', 'test_false', 'test_not_equal', 'test_pass', 'test_summary', 'test_true', 'text_color', 'throw', 'time', 'timedate_diff', 'timedelta', 'to_integer', 'to_number', 'to_rgb', 'to_string', 'traverse_dict', 'traverse_dict_partial_key', 'trim', 'trim_head', 'trim_tail', 'trunc', 'tagset', 'tagstart', 'typeof', 'unique', 'unix_dict', 'upper', 'utf8_to_utf32', 'utf32_to_utf8', 'version', 'vlookup', 'vslice', 'wglGetProcAddress', 'wildcard_file', 'wildcard_match', 'with_rho', 'with_theta', 'xml_new_doc', 'xml_new_element', 'xml_set_attribute', 'xml_sprint', 'xor_bits', 'xor_bitsu', 'accept', 'allocate', 'allocate_string', 'allow_break', 'ARM', 'atom_to_float80', 'c_func', 'c_proc', 'call_back', 'chdir', 'check_break', 'clearDib', 'close', 'closesocket', 'console', 'copy_file', 'create', 'create_directory', 'create_thread', 'curl_easy_cleanup', 'curl_easy_get_file', 'curl_easy_init', 'curl_easy_perform', 'curl_easy_perform_ex', 'curl_easy_setopt', 'curl_easy_strerror', 'curl_global_cleanup', 'curl_global_init', 'curl_slist_append', 'curl_slist_free_all', 'current_dir', 'cursor', 'define_c_func', 'define_c_proc', 'delete', 'delete_cs', 'delete_file', 'dir', 'DLL', 'drawDib', 'drawShadedPolygonToDib', 'ELF32', 'ELF64', 'enter_cs', 'eval', 'exit_thread', 'free', 'file_exists', 'final', 'float80_to_atom', 'format', 'get_bytes', 'get_file_date', 'get_file_size', 'get_file_type', 'get_interpreter', 'get_key', 'get_socket_error', 'get_text', 'get_thread_exitcode', 'get_thread_id', 'getc', 'getenv', 'gets', 'getsockaddr', 'glBegin', 'glCallList', 'glFrustum', 'glGenLists', 'glGetString', 'glLight', 'glMaterial', 'glNewList', 'glNormal', 'glPopMatrix', 'glPushMatrix', 'glRotate', 'glEnd', 'glEndList', 'glTexImage2D', 'goto', 'GUI', 'icons', 'ilASM', 'include_files', 'include_paths', 'init_cs', 'ip_to_string', 'IupConfig', 'IupConfigDialogClosed', 'IupConfigDialogShow', 'IupConfigGetVariableInt', 'IupConfigLoad', 'IupConfigSave', 'IupConfigSetVariableInt', 'IupExitLoop', 'IupFileDlg', 'IupFileList', 'IupGLSwapBuffers', 'IupHelp', 'IupLoopStep', 'IupMainLoop', 'IupNormalizer', 'IupPlot', 'IupPlotAdd', 'IupPlotBegin', 'IupPlotEnd', 'IupPlotInsert', 'IupSaveImage', 'IupTreeGetUserId', 'IupUser', 'IupVersion', 'IupVersionDate', 'IupVersionNumber', 'IupVersionShow', 'killDib', 'leave_cs', 'listen', 'manifest', 'mem_copy', 'mem_set', 'mpfr_gamma', 'mpfr_printf', 'mpfr_sprintf', 'mpz_export', 'mpz_import', 'namespace', 'new', 'newDib', 'open', 'open_dll', 'PE32', 'PE64', 'peek', 'peek_string', 'peek1s', 'peek1u', 'peek2s', 'peek2u', 'peek4s', 'peek4u', 'peek8s', 'peek8u', 'peekNS', 'peekns', 'peeknu', 'poke', 'poke2', 'poke4', 'poke8', 'pokeN', 'poke_string', 'poke_wstring', 'position', 'progress', 'prompt_number', 'prompt_string', 'read_file', 'read_lines', 'recv', 'resume_thread', 'seek', 'select', 'send', 'setHandler', 'shutdown', 'sleep', 'SO', 'sockaddr_in', 'socket', 'split_path', 'suspend_thread', 'system', 'system_exec', 'system_open', 'system_wait', 'task_clock_start', 'task_clock_stop', 'task_create', 'task_delay', 'task_list', 'task_schedule', 'task_self', 'task_status', 'task_suspend', 'task_yield', 'thread_safe_string', 'try_cs', 'utf8_to_utf16', 'utf16_to_utf8', 'utf16_to_utf32', 'utf32_to_utf16', 'video_config', 'WSACleanup', 'wait_thread', 'walk_dir', 'where', 'write_lines', 'wait_key')
      + constants = ('ANY_QUEUE', 'ASCENDING', 'BLACK', 'BLOCK_CURSOR', 'BLUE', 'BRIGHT_CYAN', 'BRIGHT_BLUE', 'BRIGHT_GREEN', 'BRIGHT_MAGENTA', 'BRIGHT_RED', 'BRIGHT_WHITE', 'BROWN', 'C_DWORD', 'C_INT', 'C_POINTER', 'C_USHORT', 'C_WORD', 'CD_AMBER', 'CD_BLACK', 'CD_BLUE', 'CD_BOLD', 'CD_BOLD_ITALIC', 'CD_BOX', 'CD_CENTER', 'CD_CIRCLE', 'CD_CLOSED_LINES', 'CD_CONTINUOUS', 'CD_CUSTOM', 'CD_CYAN', 'CD_DARK_BLUE', 'CD_DARK_CYAN', 'CD_DARK_GRAY', 'CD_DARK_GREY', 'CD_DARK_GREEN', 'CD_DARK_MAGENTA', 'CD_DARK_RED', 'CD_DARK_YELLOW', 'CD_DASH_DOT', 'CD_DASH_DOT_DOT', 'CD_DASHED', 'CD_DBUFFER', 'CD_DEG2RAD', 'CD_DIAMOND', 'CD_DOTTED', 'CD_EAST', 'CD_EVENODD', 'CD_FILL', 'CD_GL', 'CD_GRAY', 'CD_GREY', 'CD_GREEN', 'CD_HATCH', 'CD_HOLLOW', 'CD_HOLLOW_BOX', 'CD_HOLLOW_CIRCLE', 'CD_HOLLOW_DIAMOND', 'CD_INDIGO', 'CD_ITALIC', 'CD_IUP', 'CD_IUPDBUFFER', 'CD_LIGHT_BLUE', 'CD_LIGHT_GRAY', 'CD_LIGHT_GREY', 'CD_LIGHT_GREEN', 'CD_LIGHT_PARCHMENT', 'CD_MAGENTA', 'CD_NAVY', 'CD_NORTH', 'CD_NORTH_EAST', 'CD_NORTH_WEST', 'CD_OLIVE', 'CD_OPEN_LINES', 'CD_ORANGE', 'CD_PARCHMENT', 'CD_PATTERN', 'CD_PRINTER', 'CD_PURPLE', 'CD_PLAIN', 'CD_PLUS', 'CD_QUERY', 'CD_RAD2DEG', 'CD_RED', 'CD_SILVER', 'CD_SOLID', 'CD_SOUTH_EAST', 'CD_SOUTH_WEST', 'CD_STAR', 'CD_STIPPLE', 'CD_STRIKEOUT', 'CD_UNDERLINE', 'CD_WEST', 'CD_WHITE', 'CD_WINDING', 'CD_VIOLET', 'CD_X', 'CD_YELLOW', 'CURLE_OK', 'CURLOPT_MAIL_FROM', 'CURLOPT_MAIL_RCPT', 'CURLOPT_PASSWORD', 'CURLOPT_READDATA', 'CURLOPT_READFUNCTION', 'CURLOPT_SSL_VERIFYPEER', 'CURLOPT_SSL_VERIFYHOST', 'CURLOPT_UPLOAD', 'CURLOPT_URL', 'CURLOPT_USE_SSL', 'CURLOPT_USERNAME', 'CURLOPT_VERBOSE', 'CURLOPT_WRITEFUNCTION', 'CURLUSESSL_ALL', 'CYAN', 'D_NAME', 'D_ATTRIBUTES', 'D_SIZE', 'D_YEAR', 'D_MONTH', 'D_DAY', 'D_HOUR', 'D_MINUTE', 'D_SECOND', 'D_CREATION', 'D_LASTACCESS', 'D_MODIFICATION', 'DT_YEAR', 'DT_MONTH', 'DT_DAY', 'DT_HOUR', 'DT_MINUTE', 'DT_SECOND', 'DT_DOW', 'DT_MSEC', 'DT_DOY', 'DT_GMT', 'EULER', 'E_CODE', 'E_ADDR', 'E_LINE', 'E_RTN', 'E_NAME', 'E_FILE', 'E_PATH', 'E_USER', 'false', 'False', 'FALSE', 'FIFO_QUEUE', 'FILETYPE_DIRECTORY', 'FILETYPE_FILE', 'GET_EOF', 'GET_FAIL', 'GET_IGNORE', 'GET_SUCCESS', 'GL_AMBIENT_AND_DIFFUSE', 'GL_ARRAY_BUFFER', 'GL_CLAMP', 'GL_CLAMP_TO_BORDER', 'GL_CLAMP_TO_EDGE', 'GL_COLOR_BUFFER_BIT', 'GL_COMPILE', 'GL_COMPILE_STATUS', 'GL_CULL_FACE', 'GL_DEPTH_BUFFER_BIT', 'GL_DEPTH_TEST', 'GL_EXTENSIONS', 'GL_FLAT', 'GL_FLOAT', 'GL_FRAGMENT_SHADER', 'GL_FRONT', 'GL_LIGHT0', 'GL_LIGHTING', 'GL_LINEAR', 'GL_LINK_STATUS', 'GL_MODELVIEW', 'GL_NEAREST', 'GL_NO_ERROR', 'GL_NORMALIZE', 'GL_POSITION', 'GL_PROJECTION', 'GL_QUAD_STRIP', 'GL_QUADS', 'GL_RENDERER', 'GL_REPEAT', 'GL_RGB', 'GL_RGBA', 'GL_SMOOTH', 'GL_STATIC_DRAW', 'GL_TEXTURE_2D', 'GL_TEXTURE_MAG_FILTER', 'GL_TEXTURE_MIN_FILTER', 'GL_TEXTURE_WRAP_S', 'GL_TEXTURE_WRAP_T', 'GL_TRIANGLES', 'GL_UNSIGNED_BYTE', 'GL_VENDOR', 'GL_VERSION', 'GL_VERTEX_SHADER', 'GRAY', 'GREEN', 'GT_LF_STRIPPED', 'GT_WHOLE_FILE', 'INVLN10', 'IUP_CLOSE', 'IUP_CONTINUE', 'IUP_DEFAULT', 'IUP_BLACK', 'IUP_BLUE', 'IUP_BUTTON1', 'IUP_BUTTON3', 'IUP_CENTER', 'IUP_CYAN', 'IUP_DARK_BLUE', 'IUP_DARK_CYAN', 'IUP_DARK_GRAY', 'IUP_DARK_GREY', 'IUP_DARK_GREEN', 'IUP_DARK_MAGENTA', 'IUP_DARK_RED', 'IUP_GRAY', 'IUP_GREY', 'IUP_GREEN', 'IUP_IGNORE', 'IUP_INDIGO', 'IUP_MAGENTA', 'IUP_MASK_INT', 'IUP_MASK_UINT', 'IUP_MOUSEPOS', 'IUP_NAVY', 'IUP_OLIVE', 'IUP_RECTEXT', 'IUP_RED', 'IUP_LIGHT_BLUE', 'IUP_LIGHT_GRAY', 'IUP_LIGHT_GREY', 'IUP_LIGHT_GREEN', 'IUP_ORANGE', 'IUP_PARCHMENT', 'IUP_PURPLE', 'IUP_SILVER', 'IUP_TEAL', 'IUP_VIOLET', 'IUP_WHITE', 'IUP_YELLOW', 'K_BS', 'K_cA', 'K_cC', 'K_cD', 'K_cF5', 'K_cK', 'K_cM', 'K_cN', 'K_cO', 'K_cP', 'K_cR', 'K_cS', 'K_cT', 'K_cW', 'K_CR', 'K_DEL', 'K_DOWN', 'K_END', 'K_ESC', 'K_F1', 'K_F2', 'K_F3', 'K_F4', 'K_F5', 'K_F6', 'K_F7', 'K_F8', 'K_F9', 'K_F10', 'K_F11', 'K_F12', 'K_HOME', 'K_INS', 'K_LEFT', 'K_MIDDLE', 'K_PGDN', 'K_PGUP', 'K_RIGHT', 'K_SP', 'K_TAB', 'K_UP', 'K_h', 'K_i', 'K_j', 'K_p', 'K_r', 'K_s', 'JS', 'LIFO_QUEUE', 'LINUX', 'MAX_HEAP', 'MAGENTA', 'MIN_HEAP', 'Nan', 'NO_CURSOR', 'null', 'NULL', 'PI', 'pp_Ascii', 'pp_Brkt', 'pp_Date', 'pp_File', 'pp_FltFmt', 'pp_Indent', 'pp_IntCh', 'pp_IntFmt', 'pp_Maxlen', 'pp_Nest', 'pp_Pause', 'pp_Q22', 'pp_StrFmt', 'RED', 'SEEK_OK', 'SLASH', 'TEST_ABORT', 'TEST_CRASH', 'TEST_PAUSE', 'TEST_PAUSE_FAIL', 'TEST_QUIET', 'TEST_SHOW_ALL', 'TEST_SHOW_FAILED', 'TEST_SUMMARY', 'true', 'True', 'TRUE', 'VC_SCRNLINES', 'WHITE', 'WINDOWS', 'YELLOW')
      + tokens = {'root': [('\\s+', Whitespace), ('/\\*|--/\\*|#\\[', Comment.Multiline, 'comment'), ('(?://|--|#!).*$', Comment.Single), ('"([^"\\\\]|\\\\.)*"', String.Other), ("\\'[^\\']*\\'", String.Other), ('`[^`]*`', String.Other), (words(types, prefix='\\b', suffix='\\b'), Name.Function), (words(routines, prefix='\\b', suffix='\\b'), Name.Function), (words(preproc, prefix='\\b', suffix='\\b'), Keyword.Declaration), (words(keywords, prefix='\\b', suffix='\\b'), Keyword.Declaration), (words(constants, prefix='\\b', suffix='\\b'), Name.Constant), ('!=|==|<<|>>|:=|[-~+/*%=<>&^|\\.(){},?:\\[\\]$\\\\;#]', Operator), ('[\\w-]+', Text)], 'comment': [('[^*/#]+', Comment.Multiline), ('/\\*|#\\[', Comment.Multiline, '#push'), ('\\*/|#\\]', Comment.Multiline, '#pop'), ('[*/#]', Comment.Multiline)]}
  }

  class ZephirLexer {
      + name = 'Zephir'
      + url = 'http://zephir-lang.com/'
      + aliases = ['zephir']
      + filenames = ['*.zep']
      + version_added = '2.0'
      + zephir_keywords = ['fetch', 'echo', 'isset', 'empty']
      + zephir_type = ['bit', 'bits', 'string']
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'commentsandwhitespace': [('\\s+', Text), ('//.*?\\n', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline)], 'slashstartsregex': [include('commentsandwhitespace'), ('/(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gim]+\\b|\\B)', String.Regex, '#pop'), ('/', Operator, '#pop'), default('#pop')], 'badregex': [('\\n', Text, '#pop')], 'root': [('^(?=\\s|/)', Text, 'slashstartsregex'), include('commentsandwhitespace'), ('\\+\\+|--|~|&&|\\?|:|\\|\\||\\\\(?=\\n)|(<<|>>>?|==?|!=?|->|[-<>+*%&|^/])=?', Operator, 'slashstartsregex'), ('[{(\\[;,]', Punctuation, 'slashstartsregex'), ('[})\\].]', Punctuation), ('(for|in|while|do|break|return|continue|switch|case|default|if|else|loop|require|inline|throw|try|catch|finally|new|delete|typeof|instanceof|void|namespace|use|extends|this|fetch|isset|unset|echo|fetch|likely|unlikely|empty)\\b', Keyword, 'slashstartsregex'), ('(var|let|with|function)\\b', Keyword.Declaration, 'slashstartsregex'), ('(abstract|boolean|bool|char|class|const|double|enum|export|extends|final|native|goto|implements|import|int|string|interface|long|ulong|char|uchar|float|unsigned|private|protected|public|short|static|self|throws|reverse|transient|volatile|readonly)\\b', Keyword.Reserved), ('(true|false|null|undefined)\\b', Keyword.Constant), ('(Array|Boolean|Date|_REQUEST|_COOKIE|_SESSION|_GET|_POST|_SERVER|this|stdClass|range|count|iterator|window)\\b', Name.Builtin), ('[$a-zA-Z_][\\w\\\\]*', Name.Other), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single)]}
  }

  class PsyshConsoleLexer {
      + name = 'PsySH console session for PHP'
      + url = 'https://psysh.org/'
      + aliases = ['psysh']
      + version_added = '2.7'
  --
      - __init__()
      + get_tokens_unprocessed(text)
  }

  class PhpLexer {
      + name = 'PHP'
      + url = 'https://www.php.net/'
      + aliases = ['php', 'php3', 'php4', 'php5']
      + filenames = ['*.php', '*.php[345]', '*.inc']
      + mimetypes = ['text/x-php']
      + version_added = ''
      + flags = re.IGNORECASE | re.DOTALL | re.MULTILINE
      + tokens = {'root': [('<\\?(php)?', Comment.Preproc, 'php'), ('[^<]+', Other), ('<', Other)], 'php': [('\\?>', Comment.Preproc, '#pop'), ('(<<<)([\\\'"]?)(' + _ident_nons + ')(\\2\\n.*?\\n\\s*)(\\3)(;?)(\\n)', bygroups(String, String, String.Delimiter, String, String.Delimiter, Punctuation, Text)), ('\\s+', Text), ('#\\[', Punctuation, 'attribute'), ('#.*?\\n', Comment.Single), ('//.*?\\n', Comment.Single), ('/\\*\\*/', Comment.Multiline), ('/\\*\\*.*?\\*/', String.Doc), ('/\\*.*?\\*/', Comment.Multiline), ('(->|::)(\\s*)(' + _ident_nons + ')', bygroups(Operator, Text, Name.Attribute)), ('[~!%^&*+=|:.<>/@-]+', Operator), ('\\?', Operator), ('[\\[\\]{}();,]+', Punctuation), ('(new)(\\s+)(class)\\b', bygroups(Keyword, Text, Keyword)), ('(class)(\\s+)', bygroups(Keyword, Text), 'classname'), ('(function)(\\s*)(?=\\()', bygroups(Keyword, Text)), ('(function)(\\s+)(&?)(\\s*)', bygroups(Keyword, Text, Operator, Text), 'functionname'), ('(const)(\\s+)(' + _ident_inner + ')', bygroups(Keyword, Text, Name.Constant)), ('(and|E_PARSE|old_function|E_ERROR|or|as|E_WARNING|parent|eval|PHP_OS|break|exit|case|extends|PHP_VERSION|cfunction|FALSE|print|for|require|continue|foreach|require_once|declare|return|default|static|do|switch|die|stdClass|echo|else|TRUE|elseif|var|empty|if|xor|enddeclare|include|virtual|endfor|include_once|while|endforeach|global|endif|list|endswitch|new|endwhile|not|array|E_ALL|NULL|final|php_user_filter|interface|implements|public|private|protected|abstract|clone|try|catch|throw|this|use|namespace|trait|yield|finally|match)\\b', Keyword), ('(true|false|null)\\b', Keyword.Constant), include('magicconstants'), ('\\$\\{', Name.Variable, 'variablevariable'), ('\\$+' + _ident_inner, Name.Variable), (_ident_inner, Name.Other), ('(\\d+\\.\\d*|\\d*\\.\\d+)(e[+-]?[0-9]+)?', Number.Float), ('\\d+e[+-]?[0-9]+', Number.Float), ('0[0-7]+', Number.Oct), ('0x[a-f0-9]+', Number.Hex), ('\\d+', Number.Integer), ('0b[01]+', Number.Bin), ("'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'", String.Single), ('`([^`\\\\]*(?:\\\\.[^`\\\\]*)*)`', String.Backtick), ('"', String.Double, 'string')], 'variablevariable': [('\\}', Name.Variable, '#pop'), include('php')], 'magicfuncs': [(words(('__construct', '__destruct', '__call', '__callStatic', '__get', '__set', '__isset', '__unset', '__sleep', '__wakeup', '__toString', '__invoke', '__set_state', '__clone', '__debugInfo'), suffix='\\b'), Name.Function.Magic)], 'magicconstants': [(words(('__LINE__', '__FILE__', '__DIR__', '__FUNCTION__', '__CLASS__', '__TRAIT__', '__METHOD__', '__NAMESPACE__'), suffix='\\b'), Name.Constant)], 'classname': [(_ident_inner, Name.Class, '#pop')], 'functionname': [include('magicfuncs'), (_ident_inner, Name.Function, '#pop'), default('#pop')], 'string': [('"', String.Double, '#pop'), ('[^{$"\\\\]+', String.Double), ('\\\\([nrt"$\\\\]|[0-7]{1,3}|x[0-9a-f]{1,2})', String.Escape), ('\\$' + _ident_nons + '(\\[\\S+?\\]|->' + _ident_nons + ')?', String.Interpol), ('(\\{\\$\\{)(.*?)(\\}\\})', bygroups(String.Interpol, using(this, _startinline=True), String.Interpol)), ('(\\{)(\\$.*?)(\\})', bygroups(String.Interpol, using(this, _startinline=True), String.Interpol)), ('(\\$\\{)(\\S+)(\\})', bygroups(String.Interpol, Name.Variable, String.Interpol)), ('[${\\\\]', String.Double)], 'attribute': [('\\]', Punctuation, '#pop'), ('\\(', Punctuation, 'attributeparams'), (_ident_inner, Name.Decorator), include('php')], 'attributeparams': [('\\)', Punctuation, '#pop'), include('php')]}
  --
      - __init__()
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class PointlessLexer {
      + name = 'Pointless'
      + url = 'https://ptls.dev'
      + aliases = ['pointless']
      + filenames = ['*.ptls']
      + version_added = '2.7'
      + ops = words(['+', '-', '*', '/', '**', '%', '+=', '-=', '*=', '/=', '**=', '%=', '|>', '=', '==', '!=', '<', '>', '<=', '>=', '=>', '$', '++'])
      + keywords = words(['if', 'then', 'else', 'where', 'with', 'cond', 'case', 'and', 'or', 'not', 'in', 'as', 'for', 'requires', 'throw', 'try', 'catch', 'when', 'yield', 'upval'], suffix='\\b')
      + tokens = {'root': [('[ \\n\\r]+', Text), ('--.*$', Comment.Single), ('"""', String, 'multiString'), ('"', String, 'string'), ('[\\[\\](){}:;,.]', Punctuation), (ops, Operator), (keywords, Keyword), ('\\d+|\\d*\\.\\d+', Number), ('(true|false)\\b', Name.Builtin), ('[A-Z][a-zA-Z0-9]*\\b', String.Symbol), ('output\\b', Name.Variable.Magic), ('(export|import)\\b', Keyword.Namespace), ('[a-z][a-zA-Z0-9]*\\b', Name.Variable)], 'multiString': [('\\\\.', String.Escape), ('"""', String, '#pop'), ('"', String), ('[^\\\\"]+', String)], 'string': [('\\\\.', String.Escape), ('"', String, '#pop'), ('\\n', Error), ('[^\\\\"]+', String)]}
  }

  class PonyLexer {
      + name = 'Pony'
      + aliases = ['pony']
      + filenames = ['*.pony']
      + url = 'https://www.ponylang.io'
      + version_added = '2.4'
      + tokens = {'root': [('\\n', Text), ('[^\\S\\n]+', Text), ('//.*\\n', Comment.Single), ('/\\*', Comment.Multiline, 'nested_comment'), ('"""(?:.|\\n)*?"""', String.Doc), ('"', String, 'string'), ("\\'.*\\'", String.Char), ('=>|[]{}:().~;,|&!^?[]', Punctuation), (words(('addressof', 'and', 'as', 'consume', 'digestof', 'is', 'isnt', 'not', 'or'), suffix='\\b'), Operator.Word), ('!=|==|<<|>>|[-+/*%=<>]', Operator), (words(('box', 'break', 'compile_error', 'compile_intrinsic', 'continue', 'do', 'else', 'elseif', 'embed', 'end', 'error', 'for', 'if', 'ifdef', 'in', 'iso', 'lambda', 'let', 'match', 'object', 'recover', 'ref', 'repeat', 'return', 'tag', 'then', 'this', 'trn', 'try', 'until', 'use', 'var', 'val', 'where', 'while', 'with', '#any', '#read', '#send', '#share'), suffix='\\b'), Keyword), ('(actor|class|struct|primitive|interface|trait|type)((?:\\s)+)', bygroups(Keyword, Text), 'typename'), ('(new|fun|be)((?:\\s)+)', bygroups(Keyword, Text), 'methodname'), (words(('I8', 'U8', 'I16', 'U16', 'I32', 'U32', 'I64', 'U64', 'I128', 'U128', 'ILong', 'ULong', 'ISize', 'USize', 'F32', 'F64', 'Bool', 'Pointer', 'None', 'Any', 'Array', 'String', 'Iterator'), suffix='\\b'), Name.Builtin.Type), ('_?[A-Z]\\w*', Name.Type), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('\\d+', Number.Integer), ('(true|false)\\b', Name.Builtin), ('_\\d*', Name), ("_?[a-z][\\w\\']*", Name)], 'typename': [(_caps + '?((?:\\s)*)(_?[A-Z]\\w*)', bygroups(Keyword, Text, Name.Class), '#pop')], 'methodname': [(_caps + '?((?:\\s)*)(_?[a-z]\\w*)', bygroups(Keyword, Text, Name.Function), '#pop')], 'nested_comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'string': [('"', String, '#pop'), ('\\\\"', String), ('[^\\\\"]+', String)]}
  }

  class PraatLexer {
      + name = 'Praat'
      + url = 'http://www.praat.org'
      + aliases = ['praat']
      + filenames = ['*.praat', '*.proc', '*.psc']
      + version_added = '2.1'
      + keywords = ('if', 'then', 'else', 'elsif', 'elif', 'endif', 'fi', 'for', 'from', 'to', 'endfor', 'endproc', 'while', 'endwhile', 'repeat', 'until', 'select', 'plus', 'minus', 'demo', 'assert', 'stopwatch', 'nocheck', 'nowarn', 'noprogress', 'editor', 'endeditor', 'clearinfo')
      + functions_string = ('backslashTrigraphsToUnicode', 'chooseDirectory', 'chooseReadFile', 'chooseWriteFile', 'date', 'demoKey', 'do', 'environment', 'extractLine', 'extractWord', 'fixed', 'info', 'left', 'mid', 'percent', 'readFile', 'replace', 'replace_regex', 'right', 'selected', 'string', 'unicodeToBackslashTrigraphs')
      + functions_numeric = ('abs', 'appendFile', 'appendFileLine', 'appendInfo', 'appendInfoLine', 'arccos', 'arccosh', 'arcsin', 'arcsinh', 'arctan', 'arctan2', 'arctanh', 'barkToHertz', 'beginPause', 'beginSendPraat', 'besselI', 'besselK', 'beta', 'beta2', 'binomialP', 'binomialQ', 'boolean', 'ceiling', 'chiSquareP', 'chiSquareQ', 'choice', 'comment', 'cos', 'cosh', 'createDirectory', 'deleteFile', 'demoClicked', 'demoClickedIn', 'demoCommandKeyPressed', 'demoExtraControlKeyPressed', 'demoInput', 'demoKeyPressed', 'demoOptionKeyPressed', 'demoShiftKeyPressed', 'demoShow', 'demoWaitForInput', 'demoWindowTitle', 'demoX', 'demoY', 'differenceLimensToPhon', 'do', 'editor', 'endPause', 'endSendPraat', 'endsWith', 'erb', 'erbToHertz', 'erf', 'erfc', 'exitScript', 'exp', 'extractNumber', 'fileReadable', 'fisherP', 'fisherQ', 'floor', 'gaussP', 'gaussQ', 'hertzToBark', 'hertzToErb', 'hertzToMel', 'hertzToSemitones', 'imax', 'imin', 'incompleteBeta', 'incompleteGammaP', 'index', 'index_regex', 'integer', 'invBinomialP', 'invBinomialQ', 'invChiSquareQ', 'invFisherQ', 'invGaussQ', 'invSigmoid', 'invStudentQ', 'length', 'ln', 'lnBeta', 'lnGamma', 'log10', 'log2', 'max', 'melToHertz', 'min', 'minusObject', 'natural', 'number', 'numberOfColumns', 'numberOfRows', 'numberOfSelected', 'objectsAreIdentical', 'option', 'optionMenu', 'pauseScript', 'phonToDifferenceLimens', 'plusObject', 'positive', 'randomBinomial', 'randomGauss', 'randomInteger', 'randomPoisson', 'randomUniform', 'real', 'readFile', 'removeObject', 'rindex', 'rindex_regex', 'round', 'runScript', 'runSystem', 'runSystem_nocheck', 'selectObject', 'selected', 'semitonesToHertz', 'sentence', 'sentencetext', 'sigmoid', 'sin', 'sinc', 'sincpi', 'sinh', 'soundPressureToPhon', 'sqrt', 'startsWith', 'studentP', 'studentQ', 'tan', 'tanh', 'text', 'variableExists', 'word', 'writeFile', 'writeFileLine', 'writeInfo', 'writeInfoLine')
      + functions_array = ('linear', 'randomGauss', 'randomInteger', 'randomUniform', 'zero')
      + objects = ('Activation', 'AffineTransform', 'AmplitudeTier', 'Art', 'Artword', 'Autosegment', 'BarkFilter', 'BarkSpectrogram', 'CCA', 'Categories', 'Cepstrogram', 'Cepstrum', 'Cepstrumc', 'ChebyshevSeries', 'ClassificationTable', 'Cochleagram', 'Collection', 'ComplexSpectrogram', 'Configuration', 'Confusion', 'ContingencyTable', 'Corpus', 'Correlation', 'Covariance', 'CrossCorrelationTable', 'CrossCorrelationTables', 'DTW', 'DataModeler', 'Diagonalizer', 'Discriminant', 'Dissimilarity', 'Distance', 'Distributions', 'DurationTier', 'EEG', 'ERP', 'ERPTier', 'EditCostsTable', 'EditDistanceTable', 'Eigen', 'Excitation', 'Excitations', 'ExperimentMFC', 'FFNet', 'FeatureWeights', 'FileInMemory', 'FilesInMemory', 'Formant', 'FormantFilter', 'FormantGrid', 'FormantModeler', 'FormantPoint', 'FormantTier', 'GaussianMixture', 'HMM', 'HMM_Observation', 'HMM_ObservationSequence', 'HMM_State', 'HMM_StateSequence', 'Harmonicity', 'ISpline', 'Index', 'Intensity', 'IntensityTier', 'IntervalTier', 'KNN', 'KlattGrid', 'KlattTable', 'LFCC', 'LPC', 'Label', 'LegendreSeries', 'LinearRegression', 'LogisticRegression', 'LongSound', 'Ltas', 'MFCC', 'MSpline', 'ManPages', 'Manipulation', 'Matrix', 'MelFilter', 'MelSpectrogram', 'MixingMatrix', 'Movie', 'Network', 'Object', 'OTGrammar', 'OTHistory', 'OTMulti', 'PCA', 'PairDistribution', 'ParamCurve', 'Pattern', 'Permutation', 'Photo', 'Pitch', 'PitchModeler', 'PitchTier', 'PointProcess', 'Polygon', 'Polynomial', 'PowerCepstrogram', 'PowerCepstrum', 'Procrustes', 'RealPoint', 'RealTier', 'ResultsMFC', 'Roots', 'SPINET', 'SSCP', 'SVD', 'Salience', 'ScalarProduct', 'Similarity', 'SimpleString', 'SortedSetOfString', 'Sound', 'Speaker', 'Spectrogram', 'Spectrum', 'SpectrumTier', 'SpeechSynthesizer', 'SpellingChecker', 'Strings', 'StringsIndex', 'Table', 'TableOfReal', 'TextGrid', 'TextInterval', 'TextPoint', 'TextTier', 'Tier', 'Transition', 'VocalTract', 'VocalTractTier', 'Weight', 'WordList')
      + variables_numeric = ('macintosh', 'windows', 'unix', 'praatVersion', 'pi', 'e', 'undefined')
      + variables_string = ('praatVersion', 'tab', 'shellDirectory', 'homeDirectory', 'preferencesDirectory', 'newline', 'temporaryDirectory', 'defaultDirectory')
      + object_attributes = ('ncol', 'nrow', 'xmin', 'ymin', 'xmax', 'ymax', 'nx', 'ny', 'dx', 'dy')
      + tokens = {'root': [('(\\s+)(#.*?$)', bygroups(Whitespace, Comment.Single)), ('^#.*?$', Comment.Single), (';[^\\n]*', Comment.Single), ('\\s+', Whitespace), ('\\bprocedure\\b', Keyword, 'procedure_definition'), ('\\bcall\\b', Keyword, 'procedure_call'), ('@', Name.Function, 'procedure_call'), include('function_call'), (words(keywords, suffix='\\b'), Keyword), ('(\\bform\\b)(\\s+)([^\\n]+)', bygroups(Keyword, Whitespace, String), 'old_form'), ('(print(?:line|tab)?|echo|exit|asserterror|pause|send(?:praat|socket)|include|execute|system(?:_nocheck)?)(\\s+)', bygroups(Keyword, Whitespace), 'string_unquoted'), ('(goto|label)(\\s+)(\\w+)', bygroups(Keyword, Whitespace, Name.Label)), include('variable_name'), include('number'), ('"', String, 'string'), (words(objects, suffix='(?=\\s+\\S+\\n)'), Name.Class, 'string_unquoted'), ('\\b[A-Z]', Keyword, 'command'), ('(\\.{3}|[)(,])', Punctuation)], 'command': [('( ?[\\w()-]+ ?)', Keyword), include('string_interpolated'), ('\\.{3}', Keyword, ('#pop', 'old_arguments')), (':', Keyword, ('#pop', 'comma_list')), ('\\s', Whitespace, '#pop')], 'procedure_call': [('\\s+', Whitespace), ('([\\w.]+)(?:(:)|(?:(\\s*)(\\()))', bygroups(Name.Function, Punctuation, Text.Whitespace, Punctuation), '#pop'), ('([\\w.]+)', Name.Function, ('#pop', 'old_arguments'))], 'procedure_definition': [('\\s', Whitespace), ('([\\w.]+)(\\s*?[(:])', bygroups(Name.Function, Whitespace), '#pop'), ('([\\w.]+)([^\\n]*)', bygroups(Name.Function, Text), '#pop')], 'function_call': [(words(functions_string, suffix='\\$(?=\\s*[:(])'), Name.Function, 'function'), (words(functions_array, suffix='#(?=\\s*[:(])'), Name.Function, 'function'), (words(functions_numeric, suffix='(?=\\s*[:(])'), Name.Function, 'function')], 'function': [('\\s+', Whitespace), (':', Punctuation, ('#pop', 'comma_list')), ('\\s*\\(', Punctuation, ('#pop', 'comma_list'))], 'comma_list': [('(\\s*\\n\\s*)(\\.{3})', bygroups(Whitespace, Punctuation)), ('(\\s*)(?:([)\\]])|(\\n))', bygroups(Whitespace, Punctuation, Whitespace), '#pop'), ('\\s+', Whitespace), ('"', String, 'string'), ('\\b(if|then|else|fi|endif)\\b', Keyword), include('function_call'), include('variable_name'), include('operator'), include('number'), ('[()]', Text), (',', Punctuation)], 'old_arguments': [('\\n', Whitespace, '#pop'), include('variable_name'), include('operator'), include('number'), ('"', String, 'string'), ('[^\\n]', Text)], 'number': [('\\n', Whitespace, '#pop'), ('\\b\\d+(\\.\\d*)?([eE][-+]?\\d+)?%?', Number)], 'object_reference': [include('string_interpolated'), ('([a-z][a-zA-Z0-9_]*|\\d+)', Name.Builtin), (words(object_attributes, prefix='\\.'), Name.Builtin, '#pop'), ('\\$', Name.Builtin), ('\\[', Text, '#pop')], 'variable_name': [include('operator'), include('number'), (words(variables_string, suffix='\\$'), Name.Variable.Global), (words(variables_numeric, suffix='(?=[^a-zA-Z0-9_."\\\'$#\\[:(]|\\s|^|$)'), Name.Variable.Global), (words(objects, prefix='\\b', suffix='(_)'), bygroups(Name.Builtin, Name.Builtin), 'object_reference'), ('\\.?_?[a-z][\\w.]*(\\$|#)?', Text), ('[\\[\\]]', Punctuation, 'comma_list'), include('string_interpolated')], 'operator': [('([+\\/*<>=!-]=?|[&*|][&*|]?|\\^|<>)', Operator), ('(?<![\\w.])(and|or|not|div|mod)(?![\\w.])', Operator.Word)], 'string_interpolated': [('\\\'[_a-z][^\\[\\]\\\'":]*(\\[([\\d,]+|"[\\w,]+")\\])?(:[0-9]+)?\\\'', String.Interpol)], 'string_unquoted': [('(\\n\\s*)(\\.{3})', bygroups(Whitespace, Punctuation)), ('\\n', Whitespace, '#pop'), ('\\s', Whitespace), include('string_interpolated'), ("'", String), ("[^'\\n]+", String)], 'string': [('(\\n\\s*)(\\.{3})', bygroups(Whitespace, Punctuation)), ('"', String, '#pop'), include('string_interpolated'), ("'", String), ('[^\\\'"\\n]+', String)], 'old_form': [('(\\s+)(#.*?$)', bygroups(Whitespace, Comment.Single)), ('\\s+', Whitespace), ('(optionmenu|choice)([ \\t]+)(\\S+)(:)([ \\t]+)', bygroups(Keyword, Whitespace, Text, Punctuation, Whitespace), 'number'), ('(option|button)([ \\t]+)', bygroups(Keyword, Whitespace), 'string_unquoted'), ('(sentence|text)([ \\t]+)(\\S+)', bygroups(Keyword, Whitespace, String), 'string_unquoted'), ('(word)([ \\t]+)(\\S+)([ \\t]*)(\\S+)?(?:([ \\t]+)(.*))?', bygroups(Keyword, Whitespace, Text, Whitespace, Text, Whitespace, Text)), ('(boolean)(\\s+\\S+\\s*)(0|1|"?(?:yes|no)"?)', bygroups(Keyword, Whitespace, Name.Variable)), ('(real|natural|positive|integer)([ \\t]+\\S+[ \\t]*)([+-]?)(\\d+(?:\\.\\d*)?(?:[eE][-+]?\\d+)?%?)', bygroups(Keyword, Whitespace, Operator, Number)), ('(comment)(\\s+)', bygroups(Keyword, Whitespace), 'string_unquoted'), ('\\bendform\\b', Keyword, '#pop')]}
  }

  class ProcfileLexer {
      + name = 'Procfile'
      + url = 'https://devcenter.heroku.com/articles/procfile#procfile-format'
      + aliases = ['procfile']
      + filenames = ['Procfile']
      + version_added = '2.10'
      + tokens = {'root': [('^([a-z]+)(:)', bygroups(Name.Label, Punctuation)), ('\\s+', Text.Whitespace), ('"[^"]*"', String), ("'[^']*'", String), ('[0-9]+', Number.Integer), ('\\$[a-zA-Z_][\\w]*', Name.Variable), ('(\\w+)(=)(\\w+)', bygroups(Name.Variable, Punctuation, String)), ('([\\w\\-\\./]+)', Text)]}
  }

  class PrologLexer {
      + name = 'Prolog'
      + aliases = ['prolog']
      + filenames = ['*.ecl', '*.prolog', '*.pro', '*.pl']
      + mimetypes = ['text/x-prolog']
      + url = 'https://en.wikipedia.org/wiki/Prolog'
      + version_added = ''
      + tokens = {'root': [('/\\*', Comment.Multiline, 'nested-comment'), ('%.*', Comment.Single), ("0\\'.", String.Char), ('0b[01]+', Number.Bin), ('0o[0-7]+', Number.Oct), ('0x[0-9a-fA-F]+', Number.Hex), ("\\d\\d?\\'[a-zA-Z0-9]+", Number.Integer), ('(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number.Float), ('\\d+', Number.Integer), ('[\\[\\](){}|.,;!]', Punctuation), (':-|-->', Punctuation), ('"(?:\\\\x[0-9a-fA-F]+\\\\|\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}|\\\\[0-7]+\\\\|\\\\["\\\\abcefnrstv]|[^\\\\"])*"', String.Double), ("'(?:''|[^'])*'", String.Atom), ('is\\b', Operator), ('(<|>|=<|>=|==|=:=|=|/|//|\\*|\\+|-)(?=\\s|[a-zA-Z0-9\\[])', Operator), ('(mod|div|not)\\b', Operator), ('_', Keyword), ('([a-z]+)(:)', bygroups(Name.Namespace, Punctuation)), ('([a-z\\u00c0-\\u1fff\\u3040-\\ud7ff\\ue000-\\uffef][\\w$\\u00c0-\\u1fff\\u3040-\\ud7ff\\ue000-\\uffef]*)(\\s*)(:-|-->)', bygroups(Name.Function, Text, Operator)), ('([a-z\\u00c0-\\u1fff\\u3040-\\ud7ff\\ue000-\\uffef][\\w$\\u00c0-\\u1fff\\u3040-\\ud7ff\\ue000-\\uffef]*)(\\s*)(\\()', bygroups(Name.Function, Text, Punctuation)), ('[a-z\\u00c0-\\u1fff\\u3040-\\ud7ff\\ue000-\\uffef][\\w$\\u00c0-\\u1fff\\u3040-\\ud7ff\\ue000-\\uffef]*', String.Atom), ('[#&*+\\-./:<=>?@\\\\^~\\u00a1-\\u00bf\\u2010-\\u303f]+', String.Atom), ('[A-Z_]\\w*', Name.Variable), ('\\s+|[\\u2000-\\u200f\\ufff0-\\ufffe\\uffef]', Text)], 'nested-comment': [('\\*/', Comment.Multiline, '#pop'), ('/\\*', Comment.Multiline, '#push'), ('[^*/]+', Comment.Multiline), ('[*/]', Comment.Multiline)]}
  --
      + analyse_text(text)
  }

  class LogtalkLexer {
      + name = 'Logtalk'
      + url = 'http://logtalk.org/'
      + aliases = ['logtalk']
      + filenames = ['*.lgt', '*.logtalk']
      + mimetypes = ['text/x-logtalk']
      + version_added = '0.10'
      + tokens = {'root': [('^\\s*:-\\s', Punctuation, 'directive'), ('%.*?\\n', Comment), ('/\\*(.|\\n)*?\\*/', Comment), ('\\n', Text), ('\\s+', Text), ("0'[\\\\]?.", Number), ('0b[01]+', Number.Bin), ('0o[0-7]+', Number.Oct), ('0x[0-9a-fA-F]+', Number.Hex), ('\\d+\\.?\\d*((e|E)(\\+|-)?\\d+)?', Number), ('([A-Z_][a-zA-Z0-9_]*)', Name.Variable), ('(after|before)(?=[(])', Keyword), ('forward(?=[(])', Keyword), ('(context|parameter|this|se(lf|nder))(?=[(])', Keyword), ('(current_predicate|predicate_property)(?=[(])', Keyword), ('(expand_(goal|term)|(goal|term)_expansion|phrase)(?=[(])', Keyword), ('(abolish|c(reate|urrent))_(object|protocol|category)(?=[(])', Keyword), ('(object|protocol|category)_property(?=[(])', Keyword), ('co(mplements_object|nforms_to_protocol)(?=[(])', Keyword), ('extends_(object|protocol|category)(?=[(])', Keyword), ('imp(lements_protocol|orts_category)(?=[(])', Keyword), ('(instantiat|specializ)es_class(?=[(])', Keyword), ('(current_event|(abolish|define)_events)(?=[(])', Keyword), ('(create|current|set)_logtalk_flag(?=[(])', Keyword), ('logtalk_(compile|l(ibrary_path|oad|oad_context)|make(_target_action)?)(?=[(])', Keyword), ('\\blogtalk_make\\b', Keyword), ('(clause|retract(all)?)(?=[(])', Keyword), ('a(bolish|ssert(a|z))(?=[(])', Keyword), ('(ca(ll|tch)|throw)(?=[(])', Keyword), ('(fa(il|lse)|true|(instantiation|system)_error)\\b', Keyword), ('(uninstantiation|type|domain|existence|permission|representation|evaluation|resource|syntax)_error(?=[(])', Keyword), ('((bag|set)of|f(ind|or)all)(?=[(])', Keyword), ('threaded(_(ca(ll|ncel)|once|ignore|exit|peek|wait|notify))?(?=[(])', Keyword), ('threaded_engine(_(create|destroy|self|next|next_reified|yield|post|fetch))?(?=[(])', Keyword), ('(subsumes_term|unify_with_occurs_check)(?=[(])', Keyword), ('(functor|arg|copy_term|numbervars|term_variables)(?=[(])', Keyword), ('(div|rem|m(ax|in|od)|abs|sign)(?=[(])', Keyword), ('float(_(integer|fractional)_part)?(?=[(])', Keyword), ('(floor|t(an|runcate)|round|ceiling)(?=[(])', Keyword), ('(cos|a(cos|sin|tan|tan2)|exp|log|s(in|qrt)|xor)(?=[(])', Keyword), ('(var|atom(ic)?|integer|float|c(allable|ompound)|n(onvar|umber)|ground|acyclic_term)(?=[(])', Keyword), ('compare(?=[(])', Keyword), ('(curren|se)t_(in|out)put(?=[(])', Keyword), ('(open|close)(?=[(])', Keyword), ('flush_output(?=[(])', Keyword), ('(at_end_of_stream|flush_output)\\b', Keyword), ('(stream_property|at_end_of_stream|set_stream_position)(?=[(])', Keyword), ('(nl|(get|peek|put)_(byte|c(har|ode)))(?=[(])', Keyword), ('\\bnl\\b', Keyword), ('read(_term)?(?=[(])', Keyword), ('write(q|_(canonical|term))?(?=[(])', Keyword), ('(current_)?op(?=[(])', Keyword), ('(current_)?char_conversion(?=[(])', Keyword), ('atom_(length|c(hars|o(ncat|des)))(?=[(])', Keyword), ('(char_code|sub_atom)(?=[(])', Keyword), ('number_c(har|ode)s(?=[(])', Keyword), ('(se|curren)t_prolog_flag(?=[(])', Keyword), ('\\bhalt\\b', Keyword), ('halt(?=[(])', Keyword), ('(::|:|\\^\\^)', Operator), ('[{}]', Keyword), ('(ignore|once)(?=[(])', Keyword), ('\\brepeat\\b', Keyword), ('(key)?sort(?=[(])', Keyword), ('(>>|<<|/\\\\|\\\\\\\\|\\\\)', Operator), ('\\bas\\b', Operator), ('\\bis\\b', Keyword), ('(=:=|=\\\\=|<|=<|>=|>)', Operator), ('=\\.\\.', Operator), ('(=|\\\\=)', Operator), ('(==|\\\\==|@=<|@<|@>=|@>)', Operator), ('(//|[-+*/])', Operator), ('\\b(e|pi|div|mod|rem)\\b', Operator), ('\\b\\*\\*\\b', Operator), ('-->', Operator), ('([!;]|->)', Operator), ('\\\\+', Operator), ('[?@]', Operator), ('\\^', Operator), ('[()\\[\\],.|]', Text), ('[a-z][a-zA-Z0-9_]*', Text), ("'", String, 'quoted_atom'), ('"', String, 'double_quoted_term')], 'quoted_atom': [("''", String), ("'", String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|(x[a-fA-F0-9]+|[0-7]+)\\\\)', String.Escape), ("[^\\\\'\\n]+", String), ('\\\\', String)], 'double_quoted_term': [('""', String), ('"', String, '#pop'), ('\\\\([\\\\abfnrtv"\\\']|(x[a-fA-F0-9]+|[0-7]+)\\\\)', String.Escape), ('[^\\\\"\\n]+', String), ('\\\\', String)], 'directive': [('(el)?if(?=[(])', Keyword, 'root'), ('(e(lse|ndif))(?=[.])', Keyword, 'root'), ('(category|object|protocol)(?=[(])', Keyword, 'entityrelations'), ('(end_(category|object|protocol))(?=[.])', Keyword, 'root'), ('(public|protected|private)(?=[(])', Keyword, 'root'), ('e(n(coding|sure_loaded)|xport)(?=[(])', Keyword, 'root'), ('in(clude|itialization|fo)(?=[(])', Keyword, 'root'), ('(built_in|dynamic|synchronized|threaded)(?=[.])', Keyword, 'root'), ('(alias|d(ynamic|iscontiguous)|m(eta_(non_terminal|predicate)|ode|ultifile)|s(et_(logtalk|prolog)_flag|ynchronized))(?=[(])', Keyword, 'root'), ('op(?=[(])', Keyword, 'root'), ('(c(alls|oinductive)|module|reexport|use(s|_module))(?=[(])', Keyword, 'root'), ('[a-z][a-zA-Z0-9_]*(?=[(])', Text, 'root'), ('[a-z][a-zA-Z0-9_]*(?=[.])', Text, 'root')], 'entityrelations': [('(complements|extends|i(nstantiates|mp(lements|orts))|specializes)(?=[(])', Keyword), ("0'[\\\\]?.", Number), ('0b[01]+', Number.Bin), ('0o[0-7]+', Number.Oct), ('0x[0-9a-fA-F]+', Number.Hex), ('\\d+\\.?\\d*((e|E)(\\+|-)?\\d+)?', Number), ('([A-Z_][a-zA-Z0-9_]*)', Name.Variable), ('[a-z][a-zA-Z0-9_]*', Text), ("'", String, 'quoted_atom'), ('"', String, 'double_quoted_term'), ('([)]\\.)', Text, 'root'), ('(::)', Operator), ('[()\\[\\],.|]', Text), ('%.*?\\n', Comment), ('/\\*(.|\\n)*?\\*/', Comment), ('\\n', Text), ('\\s+', Text)]}
  --
      + analyse_text(text)
  }

  class PromQLLexer {
      + name = 'PromQL'
      + url = 'https://prometheus.io/docs/prometheus/latest/querying/basics/'
      + aliases = ['promql']
      + filenames = ['*.promql']
      + version_added = ''
      + base_keywords = (words(('bool', 'by', 'group_left', 'group_right', 'ignoring', 'offset', 'on', 'without'), suffix='\\b'), Keyword)
      + aggregator_keywords = (words(('sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile'), suffix='\\b'), Keyword)
      + function_keywords = (words(('abs', 'absent', 'absent_over_time', 'avg_over_time', 'ceil', 'changes', 'clamp_max', 'clamp_min', 'count_over_time', 'day_of_month', 'day_of_week', 'days_in_month', 'delta', 'deriv', 'exp', 'floor', 'histogram_quantile', 'holt_winters', 'hour', 'idelta', 'increase', 'irate', 'label_join', 'label_replace', 'ln', 'log10', 'log2', 'max_over_time', 'min_over_time', 'minute', 'month', 'predict_linear', 'quantile_over_time', 'rate', 'resets', 'round', 'scalar', 'sort', 'sort_desc', 'sqrt', 'stddev_over_time', 'stdvar_over_time', 'sum_over_time', 'time', 'timestamp', 'vector', 'year'), suffix='\\b'), Keyword.Reserved)
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), (',', Punctuation), base_keywords, aggregator_keywords, function_keywords, ('[1-9][0-9]*[smhdwy]', String), ('-?[0-9]+\\.[0-9]+', Number.Float), ('-?[0-9]+', Number.Integer), ('#.*?$', Comment.Single), ('(\\+|\\-|\\*|\\/|\\%|\\^)', Operator), ('==|!=|>=|<=|<|>', Operator), ('and|or|unless', Operator.Word), ('[_a-zA-Z][a-zA-Z0-9_]+', Name.Variable), ('(["\\\'])(.*?)(["\\\'])', bygroups(Punctuation, String, Punctuation)), ('\\(', Operator, 'function'), ('\\)', Operator), ('\\{', Punctuation, 'labels'), ('\\[', Punctuation, 'range')], 'labels': [('\\}', Punctuation, '#pop'), ('\\n', Whitespace), ('\\s+', Whitespace), (',', Punctuation), ('([_a-zA-Z][a-zA-Z0-9_]*?)(\\s*?)(=~|!=|=|!~)(\\s*?)("|\\\')(.*?)("|\\\')', bygroups(Name.Label, Whitespace, Operator, Whitespace, Punctuation, String, Punctuation))], 'range': [('\\]', Punctuation, '#pop'), ('[1-9][0-9]*[smhdwy]', String)], 'function': [('\\)', Operator, '#pop'), ('\\(', Operator, '#push'), default('#pop')]}
  }

  class PrqlLexer {
      + name = 'PRQL'
      + url = 'https://prql-lang.org/'
      + aliases = ['prql']
      + filenames = ['*.prql']
      + mimetypes = ['application/prql', 'application/x-prql']
      + version_added = '2.17'
      + builtinTypes = words(('bool', 'int', 'int8', 'int16', 'int32', 'int64', 'int128', 'float', 'text', 'set'), suffix='\\b')
      + tokens = {'root': [('#!.*', String.Doc), ('#.*', Comment.Single), ('\\s+', Whitespace), ('^(\\s*)(module)(\\s*)', bygroups(Whitespace, Keyword.Namespace, Whitespace), 'imports'), (builtinTypes, Keyword.Type), ('^prql ', Keyword.Reserved), ('let', Keyword.Declaration), include('keywords'), include('expr'), ('^[A-Za-z_][a-zA-Z0-9_]*', Keyword)], 'expr': [('(f)(""")', bygroups(String.Affix, String.Double), combined('fstringescape', 'tdqf')), ("(f)(''')", bygroups(String.Affix, String.Single), combined('fstringescape', 'tsqf')), ('(f)(")', bygroups(String.Affix, String.Double), combined('fstringescape', 'dqf')), ("(f)(')", bygroups(String.Affix, String.Single), combined('fstringescape', 'sqf')), ('(s)(""")', bygroups(String.Affix, String.Double), combined('stringescape', 'tdqf')), ("(s)(''')", bygroups(String.Affix, String.Single), combined('stringescape', 'tsqf')), ('(s)(")', bygroups(String.Affix, String.Double), combined('stringescape', 'dqf')), ("(s)(')", bygroups(String.Affix, String.Single), combined('stringescape', 'sqf')), ('(?i)(r)(""")', bygroups(String.Affix, String.Double), 'tdqs'), ("(?i)(r)(''')", bygroups(String.Affix, String.Single), 'tsqs'), ('(?i)(r)(")', bygroups(String.Affix, String.Double), 'dqs'), ("(?i)(r)(')", bygroups(String.Affix, String.Single), 'sqs'), ('"""', String.Double, combined('stringescape', 'tdqs')), ("'''", String.Single, combined('stringescape', 'tsqs')), ('"', String.Double, combined('stringescape', 'dqs')), ("'", String.Single, combined('stringescape', 'sqs')), ('@\\d{4}-\\d{2}-\\d{2}T\\d{2}(:\\d{2})?(:\\d{2})?(\\.\\d{1,6})?(Z|[+-]\\d{1,2}(:\\d{1,2})?)?', Literal.Date), ('@\\d{4}-\\d{2}-\\d{2}', Literal.Date), ('@\\d{2}(:\\d{2})?(:\\d{2})?(\\.\\d{1,6})?(Z|[+-]\\d{1,2}(:\\d{1,2})?)?', Literal.Date), ('[^\\S\\n]+', Text), include('numbers'), ('->|=>|==|!=|>=|<=|~=|&&|\\|\\||\\?\\?|\\/\\/', Operator), ('[-~+/*%=<>&^|.@]', Operator), ('[]{}:(),;[]', Punctuation), include('functions'), ('[A-Za-z_][a-zA-Z0-9_]*', Name.Variable)], 'numbers': [('(\\d(?:_?\\d)*\\.(?:\\d(?:_?\\d)*)?|(?:\\d(?:_?\\d)*)?\\.\\d(?:_?\\d)*)([eE][+-]?\\d(?:_?\\d)*)?', Number.Float), ('\\d(?:_?\\d)*[eE][+-]?\\d(?:_?\\d)*j?', Number.Float), ('0[oO](?:_?[0-7])+', Number.Oct), ('0[bB](?:_?[01])+', Number.Bin), ('0[xX](?:_?[a-fA-F0-9])+', Number.Hex), ('\\d(?:_?\\d)*', Number.Integer)], 'fstringescape': [include('stringescape')], 'bytesescape': [('\\\\([\\\\bfnrt"\\\']|\\n|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'stringescape': [('\\\\(N\\{.*?\\}|u\\{[a-fA-F0-9]{1,6}\\})', String.Escape), include('bytesescape')], 'fstrings-single': fstring_rules(String.Single), 'fstrings-double': fstring_rules(String.Double), 'strings-single': innerstring_rules(String.Single), 'strings-double': innerstring_rules(String.Double), 'dqf': [('"', String.Double, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('fstrings-double')], 'sqf': [("'", String.Single, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('fstrings-single')], 'dqs': [('"', String.Double, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('strings-double')], 'sqs': [("'", String.Single, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('strings-single')], 'tdqf': [('"""', String.Double, '#pop'), include('fstrings-double'), ('\\n', String.Double)], 'tsqf': [("'''", String.Single, '#pop'), include('fstrings-single'), ('\\n', String.Single)], 'tdqs': [('"""', String.Double, '#pop'), include('strings-double'), ('\\n', String.Double)], 'tsqs': [("'''", String.Single, '#pop'), include('strings-single'), ('\\n', String.Single)], 'expr-inside-fstring': [('[{([]', Punctuation, 'expr-inside-fstring-inner'), ('(=\\s*)?\\}', String.Interpol, '#pop'), ('(=\\s*)?:', String.Interpol, '#pop'), ('\\s+', Whitespace), include('expr')], 'expr-inside-fstring-inner': [('[{([]', Punctuation, 'expr-inside-fstring-inner'), ('[])}]', Punctuation, '#pop'), ('\\s+', Whitespace), include('expr')], 'keywords': [(words(('into', 'case', 'type', 'module', 'internal'), suffix='\\b'), Keyword), (words(('true', 'false', 'null'), suffix='\\b'), Keyword.Constant)], 'functions': [(words(('min', 'max', 'sum', 'average', 'stddev', 'every', 'any', 'concat_array', 'count', 'lag', 'lead', 'first', 'last', 'rank', 'rank_dense', 'row_number', 'round', 'as', 'in', 'tuple_every', 'tuple_map', 'tuple_zip', '_eq', '_is_null', 'from_text', 'lower', 'upper', 'read_parquet', 'read_csv'), suffix='\\b'), Name.Function)], 'comment': [('-(?!\\})', Comment.Multiline), ('\\{-', Comment.Multiline, 'comment'), ('[^-}]', Comment.Multiline), ('-\\}', Comment.Multiline, '#pop')], 'imports': [('\\w+(\\.\\w+)*', Name.Class, '#pop')]}
  --
      + innerstring_rules(ttype)
      + fstring_rules(ttype)
  }

  class PtxLexer {
      + name = 'PTX'
      + url = 'https://docs.nvidia.com/cuda/parallel-thread-execution/'
      + filenames = ['*.ptx']
      + aliases = ['ptx']
      + mimetypes = ['text/x-ptx']
      + version_added = '2.16'
      + string = '"[^"]*?"'
      + followsym = '[a-zA-Z0-9_$]'
      + identifier = '([-a-zA-Z$._][\\w\\-$.]*|' + string + ')'
      + block_label = '(' + identifier + '|(\\d+))'
      + tokens = {'root': [include('whitespace'), (block_label + '\\s*:', Name.Label), include('keyword'), ('%' + identifier, Name.Variable), ('%\\d+', Name.Variable.Anonymous), ('c?' + string, String), (identifier, Name.Variable), (';', Punctuation), ('[*+-/]', Operator), ('0[xX][a-fA-F0-9]+', Number), ('-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?', Number), ('[=<>{}\\[\\]()*.,!]|x\\b', Punctuation)], 'whitespace': [('(\\n|\\s+)+', Whitespace), ('//.*?\\n', Comment)], 'keyword': [(words(('abs', 'discard', 'min', 'shf', 'vadd', 'activemask', 'div', 'mma', 'shfl', 'vadd2', 'add', 'dp2a', 'mov', 'shl', 'vadd4', 'addc', 'dp4a', 'movmatrix', 'shr', 'vavrg2', 'alloca', 'elect', 'mul', 'sin', 'vavrg4', 'and', 'ex2', 'mul24', 'slct', 'vmad', 'applypriority', 'exit', 'multimem', 'sqrt', 'vmax', 'atom', 'fence', 'nanosleep', 'st', 'vmax2', 'bar', 'fma', 'neg', 'stackrestore', 'vmax4', 'barrier', 'fns', 'not', 'stacksave', 'vmin', 'bfe', 'getctarank', 'or', 'stmatrix', 'vmin2', 'bfi', 'griddepcontrol', 'pmevent', 'sub', 'vmin4', 'bfind', 'isspacep', 'popc', 'subc', 'vote', 'bmsk', 'istypep', 'prefetch', 'suld', 'vset', 'bra', 'ld', 'prefetchu', 'suq', 'vset2', 'brev', 'ldmatrix', 'prmt', 'sured', 'vset4', 'brkpt', 'ldu', 'rcp', 'sust', 'vshl', 'brx', 'lg2', 'red', 'szext', 'vshr', 'call', 'lop3', 'redux', 'tanh', 'vsub', 'clz', 'mad', 'rem', 'testp', 'vsub2', 'cnot', 'mad24', 'ret', 'tex', 'vsub4', 'copysign', 'madc', 'rsqrt', 'tld4', 'wgmma', 'cos', 'mapa', 'sad', 'trap', 'wmma', 'cp', 'match', 'selp', 'txq', 'xor', 'createpolicy', 'max', 'set', 'vabsdiff', 'cvt', 'mbarrier', 'setmaxnreg', 'vabsdiff2', 'cvta', 'membar', 'setp', 'vabsdiff4')), Keyword), (words(('reg', '.sreg', '.const', '.global', '.local', '.param', '.shared', '.tex', '.wide', '.loc')), Keyword.Pseudo), (words(('.address_size', '.explicitcluster', '.maxnreg', '.section', '.alias', '.extern', '.maxntid', '.shared', '.align', '.file', '.minnctapersm', '.sreg', '.branchtargets', '.func', '.noreturn', '.target', '.callprototype', '.global', '.param', '.tex', '.calltargets', '.loc', '.pragma', '.version', '.common', '.local', '.reg', '.visible', '.const', '.maxclusterrank', '.reqnctapercluster', '.weak', '.entry', '.maxnctapersm', '.reqntid')), Keyword.Reserved), (words(('.s8', '.s16', '.s32', '.s64', '.u8', '.u16', '.u32', '.u64', '.f16', '.f16x2', '.f32', '.f64', '.b8', '.b16', '.b32', '.b64', '.pred')), Keyword.Type)]}
  }

  class PythonLexer {
      + name = 'Python'
      + url = 'https://www.python.org'
      + aliases = ['python', 'py', 'sage', 'python3', 'py3', 'bazel', 'starlark', 'pyi']
      + filenames = ['*.py', '*.pyw', '*.pyi', '*.jy', '*.sage', '*.sc', 'SConstruct', 'SConscript', '*.bzl', 'BUCK', 'BUILD', 'BUILD.bazel', 'WORKSPACE', '*.tac']
      + mimetypes = ['text/x-python', 'application/x-python', 'text/x-python3', 'application/x-python3']
      + version_added = '0.10'
      + uni_name = f'[{uni.xid_start}][{uni.xid_continue}]*'
      + tokens = {'root': [('\\n', Whitespace), ('^(\\s*)([rRuUbB]{,2})("""(?:.|\\n)*?""")', bygroups(Whitespace, String.Affix, String.Doc)), ("^(\\s*)([rRuUbB]{,2})('''(?:.|\\n)*?''')", bygroups(Whitespace, String.Affix, String.Doc)), ('\\A#!.+$', Comment.Hashbang), ('#.*$', Comment.Single), ('\\\\\\n', Text), ('\\\\', Text), include('keywords'), include('soft-keywords'), ('(def)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Whitespace), 'funcname'), ('(class)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Whitespace), 'classname'), ('(from)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Whitespace), 'fromimport'), ('(import)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Whitespace), 'import'), include('expr')], 'expr': [('(?i)(rf|fr)(""")', bygroups(String.Affix, String.Double), combined('rfstringescape', 'tdqf')), ("(?i)(rf|fr)(''')", bygroups(String.Affix, String.Single), combined('rfstringescape', 'tsqf')), ('(?i)(rf|fr)(")', bygroups(String.Affix, String.Double), combined('rfstringescape', 'dqf')), ("(?i)(rf|fr)(')", bygroups(String.Affix, String.Single), combined('rfstringescape', 'sqf')), ('([fF])(""")', bygroups(String.Affix, String.Double), combined('fstringescape', 'tdqf')), ("([fF])(''')", bygroups(String.Affix, String.Single), combined('fstringescape', 'tsqf')), ('([fF])(")', bygroups(String.Affix, String.Double), combined('fstringescape', 'dqf')), ("([fF])(')", bygroups(String.Affix, String.Single), combined('fstringescape', 'sqf')), ('(?i)(rb|br|r)(""")', bygroups(String.Affix, String.Double), 'tdqs'), ("(?i)(rb|br|r)(''')", bygroups(String.Affix, String.Single), 'tsqs'), ('(?i)(rb|br|r)(")', bygroups(String.Affix, String.Double), 'dqs'), ("(?i)(rb|br|r)(')", bygroups(String.Affix, String.Single), 'sqs'), ('([uU]?)(""")', bygroups(String.Affix, String.Double), combined('stringescape', 'tdqs')), ("([uU]?)(''')", bygroups(String.Affix, String.Single), combined('stringescape', 'tsqs')), ('([uU]?)(")', bygroups(String.Affix, String.Double), combined('stringescape', 'dqs')), ("([uU]?)(')", bygroups(String.Affix, String.Single), combined('stringescape', 'sqs')), ('([bB])(""")', bygroups(String.Affix, String.Double), combined('bytesescape', 'tdqs')), ("([bB])(''')", bygroups(String.Affix, String.Single), combined('bytesescape', 'tsqs')), ('([bB])(")', bygroups(String.Affix, String.Double), combined('bytesescape', 'dqs')), ("([bB])(')", bygroups(String.Affix, String.Single), combined('bytesescape', 'sqs')), ('[^\\S\\n]+', Text), include('numbers'), ('!=|==|<<|>>|:=|[-~+/*%=<>&^|.]', Operator), ('[]{}:(),;[]', Punctuation), ('(in|is|and|or|not)\\b', Operator.Word), include('expr-keywords'), include('builtins'), include('magicfuncs'), include('magicvars'), include('name')], 'expr-inside-fstring': [('[{([]', Punctuation, 'expr-inside-fstring-inner'), ('(=\\s*)?(\\![sraf])?\\}', String.Interpol, '#pop'), ('(=\\s*)?(\\![sraf])?:', String.Interpol, '#pop'), ('\\s+', Whitespace), include('expr')], 'expr-inside-fstring-inner': [('[{([]', Punctuation, 'expr-inside-fstring-inner'), ('[])}]', Punctuation, '#pop'), ('\\s+', Whitespace), include('expr')], 'expr-keywords': [(words(('async for', 'await', 'else', 'for', 'if', 'lambda', 'yield', 'yield from'), suffix='\\b'), Keyword), (words(('True', 'False', 'None'), suffix='\\b'), Keyword.Constant)], 'keywords': [(words(('assert', 'async', 'await', 'break', 'continue', 'del', 'elif', 'else', 'except', 'finally', 'for', 'global', 'if', 'lambda', 'pass', 'raise', 'nonlocal', 'return', 'try', 'while', 'yield', 'yield from', 'as', 'with'), suffix='\\b'), Keyword), (words(('True', 'False', 'None'), suffix='\\b'), Keyword.Constant)], 'soft-keywords': [('(^[ \\t]*)(match|case)\\b(?![ \\t]*(?:[:,;=^&|@~)\\]}]|(?:' + '|'.join((k for k in keyword.kwlist if k[0].islower())) + ')\\b))', bygroups(Text, Keyword), 'soft-keywords-inner')], 'soft-keywords-inner': [('(\\s+)([^\\n_]*)(_\\b)', bygroups(Whitespace, using(this), Keyword)), default('#pop')], 'builtins': [(words(('__import__', 'abs', 'aiter', 'all', 'any', 'bin', 'bool', 'bytearray', 'breakpoint', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip'), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin), ('(?<!\\.)(self|Ellipsis|NotImplemented|cls)\\b', Name.Builtin.Pseudo), (words(('ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'EnvironmentError', 'Exception', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'VMSError', 'Warning', 'WindowsError', 'ZeroDivisionError', 'BlockingIOError', 'ChildProcessError', 'ConnectionError', 'BrokenPipeError', 'ConnectionAbortedError', 'ConnectionRefusedError', 'ConnectionResetError', 'FileExistsError', 'FileNotFoundError', 'InterruptedError', 'IsADirectoryError', 'NotADirectoryError', 'PermissionError', 'ProcessLookupError', 'TimeoutError', 'StopAsyncIteration', 'ModuleNotFoundError', 'RecursionError', 'EncodingWarning'), prefix='(?<!\\.)', suffix='\\b'), Name.Exception)], 'magicfuncs': [(words(('__abs__', '__add__', '__aenter__', '__aexit__', '__aiter__', '__and__', '__anext__', '__await__', '__bool__', '__bytes__', '__call__', '__complex__', '__contains__', '__del__', '__delattr__', '__delete__', '__delitem__', '__dir__', '__divmod__', '__enter__', '__eq__', '__exit__', '__float__', '__floordiv__', '__format__', '__ge__', '__get__', '__getattr__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__iand__', '__ifloordiv__', '__ilshift__', '__imatmul__', '__imod__', '__imul__', '__index__', '__init__', '__instancecheck__', '__int__', '__invert__', '__ior__', '__ipow__', '__irshift__', '__isub__', '__iter__', '__itruediv__', '__ixor__', '__le__', '__len__', '__length_hint__', '__lshift__', '__lt__', '__matmul__', '__missing__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__next__', '__or__', '__pos__', '__pow__', '__prepare__', '__radd__', '__rand__', '__rdivmod__', '__repr__', '__reversed__', '__rfloordiv__', '__rlshift__', '__rmatmul__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__set__', '__setattr__', '__setitem__', '__str__', '__sub__', '__subclasscheck__', '__truediv__', '__xor__'), suffix='\\b'), Name.Function.Magic)], 'magicvars': [(words(('__annotations__', '__bases__', '__class__', '__closure__', '__code__', '__defaults__', '__dict__', '__doc__', '__file__', '__func__', '__globals__', '__kwdefaults__', '__module__', '__mro__', '__name__', '__objclass__', '__qualname__', '__self__', '__slots__', '__weakref__'), suffix='\\b'), Name.Variable.Magic)], 'numbers': [('(\\d(?:_?\\d)*\\.(?:\\d(?:_?\\d)*)?|(?:\\d(?:_?\\d)*)?\\.\\d(?:_?\\d)*)([eE][+-]?\\d(?:_?\\d)*)?', Number.Float), ('\\d(?:_?\\d)*[eE][+-]?\\d(?:_?\\d)*j?', Number.Float), ('0[oO](?:_?[0-7])+', Number.Oct), ('0[bB](?:_?[01])+', Number.Bin), ('0[xX](?:_?[a-fA-F0-9])+', Number.Hex), ('\\d(?:_?\\d)*', Number.Integer)], 'name': [('@' + uni_name, Name.Decorator), ('@', Operator), (uni_name, Name)], 'funcname': [include('magicfuncs'), (uni_name, Name.Function, '#pop'), default('#pop')], 'classname': [(uni_name, Name.Class, '#pop')], 'import': [('(\\s+)(as)(\\s+)', bygroups(Whitespace, Keyword, Whitespace)), ('\\.', Name.Namespace), (uni_name, Name.Namespace), ('(\\s*)(,)(\\s*)', bygroups(Whitespace, Operator, Whitespace)), default('#pop')], 'fromimport': [('(\\s+)(import)\\b', bygroups(Whitespace, Keyword.Namespace), '#pop'), ('\\.', Name.Namespace), ('None\\b', Keyword.Constant, '#pop'), (uni_name, Name.Namespace), default('#pop')], 'rfstringescape': [('\\{\\{', String.Escape), ('\\}\\}', String.Escape)], 'fstringescape': [include('rfstringescape'), include('stringescape')], 'bytesescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'stringescape': [('\\\\(N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})', String.Escape), include('bytesescape')], 'fstrings-single': fstring_rules(String.Single), 'fstrings-double': fstring_rules(String.Double), 'strings-single': innerstring_rules(String.Single), 'strings-double': innerstring_rules(String.Double), 'dqf': [('"', String.Double, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('fstrings-double')], 'sqf': [("'", String.Single, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('fstrings-single')], 'dqs': [('"', String.Double, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('strings-double')], 'sqs': [("'", String.Single, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('strings-single')], 'tdqf': [('"""', String.Double, '#pop'), include('fstrings-double'), ('\\n', String.Double)], 'tsqf': [("'''", String.Single, '#pop'), include('fstrings-single'), ('\\n', String.Single)], 'tdqs': [('"""', String.Double, '#pop'), include('strings-double'), ('\\n', String.Double)], 'tsqs': [("'''", String.Single, '#pop'), include('strings-single'), ('\\n', String.Single)]}
  --
      + innerstring_rules(ttype)
      + fstring_rules(ttype)
      + analyse_text(text)
  }

  class Python2Lexer {
      + name = 'Python 2.x'
      + url = 'https://www.python.org'
      + aliases = ['python2', 'py2']
      + filenames = []
      + mimetypes = ['text/x-python2', 'application/x-python2']
      + version_added = ''
      + tokens = {'root': [('\\n', Whitespace), ('^(\\s*)([rRuUbB]{,2})("""(?:.|\\n)*?""")', bygroups(Whitespace, String.Affix, String.Doc)), ("^(\\s*)([rRuUbB]{,2})('''(?:.|\\n)*?''')", bygroups(Whitespace, String.Affix, String.Doc)), ('[^\\S\\n]+', Text), ('\\A#!.+$', Comment.Hashbang), ('#.*$', Comment.Single), ('[]{}:(),;[]', Punctuation), ('\\\\\\n', Text), ('\\\\', Text), ('(in|is|and|or|not)\\b', Operator.Word), ('!=|==|<<|>>|[-~+/*%=<>&^|.]', Operator), include('keywords'), ('(def)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Whitespace), 'funcname'), ('(class)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Whitespace), 'classname'), ('(from)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Whitespace), 'fromimport'), ('(import)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Whitespace), 'import'), include('builtins'), include('magicfuncs'), include('magicvars'), include('backtick'), ('([rR]|[uUbB][rR]|[rR][uUbB])(""")', bygroups(String.Affix, String.Double), 'tdqs'), ("([rR]|[uUbB][rR]|[rR][uUbB])(''')", bygroups(String.Affix, String.Single), 'tsqs'), ('([rR]|[uUbB][rR]|[rR][uUbB])(")', bygroups(String.Affix, String.Double), 'dqs'), ("([rR]|[uUbB][rR]|[rR][uUbB])(')", bygroups(String.Affix, String.Single), 'sqs'), ('([uUbB]?)(""")', bygroups(String.Affix, String.Double), combined('stringescape', 'tdqs')), ("([uUbB]?)(''')", bygroups(String.Affix, String.Single), combined('stringescape', 'tsqs')), ('([uUbB]?)(")', bygroups(String.Affix, String.Double), combined('stringescape', 'dqs')), ("([uUbB]?)(')", bygroups(String.Affix, String.Single), combined('stringescape', 'sqs')), include('name'), include('numbers')], 'keywords': [(words(('assert', 'break', 'continue', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'global', 'if', 'lambda', 'pass', 'print', 'raise', 'return', 'try', 'while', 'yield', 'yield from', 'as', 'with'), suffix='\\b'), Keyword)], 'builtins': [(words(('__import__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'long', 'map', 'max', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'property', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip'), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin), ('(?<!\\.)(self|None|Ellipsis|NotImplemented|False|True|cls)\\b', Name.Builtin.Pseudo), (words(('ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'DeprecationWarning', 'EOFError', 'EnvironmentError', 'Exception', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'NotImplementedError', 'OSError', 'OverflowError', 'OverflowWarning', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'VMSError', 'Warning', 'WindowsError', 'ZeroDivisionError'), prefix='(?<!\\.)', suffix='\\b'), Name.Exception)], 'magicfuncs': [(words(('__abs__', '__add__', '__and__', '__call__', '__cmp__', '__coerce__', '__complex__', '__contains__', '__del__', '__delattr__', '__delete__', '__delitem__', '__delslice__', '__div__', '__divmod__', '__enter__', '__eq__', '__exit__', '__float__', '__floordiv__', '__ge__', '__get__', '__getattr__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__hex__', '__iadd__', '__iand__', '__idiv__', '__ifloordiv__', '__ilshift__', '__imod__', '__imul__', '__index__', '__init__', '__instancecheck__', '__int__', '__invert__', '__iop__', '__ior__', '__ipow__', '__irshift__', '__isub__', '__iter__', '__itruediv__', '__ixor__', '__le__', '__len__', '__long__', '__lshift__', '__lt__', '__missing__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__nonzero__', '__oct__', '__op__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rcmp__', '__rdiv__', '__rdivmod__', '__repr__', '__reversed__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__rop__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__set__', '__setattr__', '__setitem__', '__setslice__', '__str__', '__sub__', '__subclasscheck__', '__truediv__', '__unicode__', '__xor__'), suffix='\\b'), Name.Function.Magic)], 'magicvars': [(words(('__bases__', '__class__', '__closure__', '__code__', '__defaults__', '__dict__', '__doc__', '__file__', '__func__', '__globals__', '__metaclass__', '__module__', '__mro__', '__name__', '__self__', '__slots__', '__weakref__'), suffix='\\b'), Name.Variable.Magic)], 'numbers': [('(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?j?', Number.Float), ('\\d+[eE][+-]?[0-9]+j?', Number.Float), ('0[0-7]+j?', Number.Oct), ('0[bB][01]+', Number.Bin), ('0[xX][a-fA-F0-9]+', Number.Hex), ('\\d+L', Number.Integer.Long), ('\\d+j?', Number.Integer)], 'backtick': [('`.*?`', String.Backtick)], 'name': [('@[\\w.]+', Name.Decorator), ('[a-zA-Z_]\\w*', Name)], 'funcname': [include('magicfuncs'), ('[a-zA-Z_]\\w*', Name.Function, '#pop'), default('#pop')], 'classname': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'import': [('(?:[ \\t]|\\\\\\n)+', Text), ('as\\b', Keyword.Namespace), (',', Operator), ('[a-zA-Z_][\\w.]*', Name.Namespace), default('#pop')], 'fromimport': [('(?:[ \\t]|\\\\\\n)+', Text), ('import\\b', Keyword.Namespace, '#pop'), ('None\\b', Name.Builtin.Pseudo, '#pop'), ('[a-zA-Z_.][\\w.]*', Name.Namespace), default('#pop')], 'stringescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'strings-single': innerstring_rules(String.Single), 'strings-double': innerstring_rules(String.Double), 'dqs': [('"', String.Double, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('strings-double')], 'sqs': [("'", String.Single, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('strings-single')], 'tdqs': [('"""', String.Double, '#pop'), include('strings-double'), ('\\n', String.Double)], 'tsqs': [("'''", String.Single, '#pop'), include('strings-single'), ('\\n', String.Single)]}
  --
      + innerstring_rules(ttype)
      + analyse_text(text)
  }

  class PythonConsoleLexer {
      + name = 'Python console session'
      + aliases = ['pycon', 'python-console']
      + mimetypes = ['text/x-python-doctest']
      + url = 'https://python.org'
      + version_added = ''
  --
      - __init__()
  }

  class PythonTracebackLexer {
      + name = 'Python Traceback'
      + aliases = ['pytb', 'py3tb']
      + filenames = ['*.pytb', '*.py3tb']
      + mimetypes = ['text/x-python-traceback', 'text/x-python3-traceback']
      + url = 'https://python.org'
      + version_added = '1.0'
      + tokens = {'root': [('\\n', Whitespace), ('^(\\^C)?Traceback \\(most recent call last\\):\\n', Generic.Traceback, 'intb'), ('^During handling of the above exception, another exception occurred:\\n\\n', Generic.Traceback), ('^The above exception was the direct cause of the following exception:\\n\\n', Generic.Traceback), ('^(?=  File "[^"]+", line \\d+)', Generic.Traceback, 'intb'), ('^.*\\n', Other)], 'intb': [('^(  File )("[^"]+")(, line )(\\d+)(, in )(.+)(\\n)', bygroups(Text, Name.Builtin, Text, Number, Text, Name, Whitespace)), ('^(  File )("[^"]+")(, line )(\\d+)(\\n)', bygroups(Text, Name.Builtin, Text, Number, Whitespace)), ('^(    )(.+)(\\n)', bygroups(Whitespace, using(PythonLexer), Whitespace), 'markers'), ('^([ \\t]*)(\\.\\.\\.)(\\n)', bygroups(Whitespace, Comment, Whitespace)), ('^([^:]+)(: )(.+)(\\n)', bygroups(Generic.Error, Text, Name, Whitespace), '#pop'), ('^([a-zA-Z_][\\w.]*)(:?\\n)', bygroups(Generic.Error, Whitespace), '#pop'), default('#pop')], 'markers': [('^( {4,})([~^]+)(\\n)', bygroups(Whitespace, Punctuation.Marker, Whitespace), '#pop'), default('#pop')]}
  }

  class Python2TracebackLexer {
      + name = 'Python 2.x Traceback'
      + aliases = ['py2tb']
      + filenames = ['*.py2tb']
      + mimetypes = ['text/x-python2-traceback']
      + url = 'https://python.org'
      + version_added = '0.7'
      + tokens = {'root': [('^(\\^C)?(Traceback.*\\n)', bygroups(Text, Generic.Traceback), 'intb'), ('^(?=  File "[^"]+", line \\d+)', Generic.Traceback, 'intb'), ('^.*\\n', Other)], 'intb': [('^(  File )("[^"]+")(, line )(\\d+)(, in )(.+)(\\n)', bygroups(Text, Name.Builtin, Text, Number, Text, Name, Whitespace)), ('^(  File )("[^"]+")(, line )(\\d+)(\\n)', bygroups(Text, Name.Builtin, Text, Number, Whitespace)), ('^(    )(.+)(\\n)', bygroups(Text, using(Python2Lexer), Whitespace), 'marker'), ('^([ \\t]*)(\\.\\.\\.)(\\n)', bygroups(Text, Comment, Whitespace)), ('^([^:]+)(: )(.+)(\\n)', bygroups(Generic.Error, Text, Name, Whitespace), '#pop'), ('^([a-zA-Z_]\\w*)(:?\\n)', bygroups(Generic.Error, Whitespace), '#pop')], 'marker': [('( {4,})(\\^)', bygroups(Text, Punctuation.Marker), '#pop'), default('#pop')]}
  }

  class CythonLexer {
      + name = 'Cython'
      + url = 'https://cython.org'
      + aliases = ['cython', 'pyx', 'pyrex']
      + filenames = ['*.pyx', '*.pxd', '*.pxi']
      + mimetypes = ['text/x-cython', 'application/x-cython']
      + version_added = '1.1'
      + tokens = {'root': [('\\n', Whitespace), ('^(\\s*)("""(?:.|\\n)*?""")', bygroups(Whitespace, String.Doc)), ("^(\\s*)('''(?:.|\\n)*?''')", bygroups(Whitespace, String.Doc)), ('[^\\S\\n]+', Text), ('#.*$', Comment), ('[]{}:(),;[]', Punctuation), ('\\\\\\n', Whitespace), ('\\\\', Text), ('(in|is|and|or|not)\\b', Operator.Word), ('(<)([a-zA-Z0-9.?]+)(>)', bygroups(Punctuation, Keyword.Type, Punctuation)), ('!=|==|<<|>>|[-~+/*%=<>&^|.?]', Operator), ('(from)(\\d+)(<=)(\\s+)(<)(\\d+)(:)', bygroups(Keyword, Number.Integer, Operator, Whitespace, Operator, Name, Punctuation)), include('keywords'), ('(def|property)(\\s+)', bygroups(Keyword, Whitespace), 'funcname'), ('(cp?def)(\\s+)', bygroups(Keyword, Whitespace), 'cdef'), ('(cdef)(:)', bygroups(Keyword, Punctuation)), ('(class|struct)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), ('(from)(\\s+)', bygroups(Keyword, Whitespace), 'fromimport'), ('(c?import)(\\s+)', bygroups(Keyword, Whitespace), 'import'), include('builtins'), include('backtick'), ('(?:[rR]|[uU][rR]|[rR][uU])"""', String, 'tdqs'), ("(?:[rR]|[uU][rR]|[rR][uU])'''", String, 'tsqs'), ('(?:[rR]|[uU][rR]|[rR][uU])"', String, 'dqs'), ("(?:[rR]|[uU][rR]|[rR][uU])'", String, 'sqs'), ('[uU]?"""', String, combined('stringescape', 'tdqs')), ("[uU]?'''", String, combined('stringescape', 'tsqs')), ('[uU]?"', String, combined('stringescape', 'dqs')), ("[uU]?'", String, combined('stringescape', 'sqs')), include('name'), include('numbers')], 'keywords': [(words(('assert', 'async', 'await', 'break', 'by', 'continue', 'ctypedef', 'del', 'elif', 'else', 'except', 'except?', 'exec', 'finally', 'for', 'fused', 'gil', 'global', 'if', 'include', 'lambda', 'nogil', 'pass', 'print', 'raise', 'return', 'try', 'while', 'yield', 'as', 'with'), suffix='\\b'), Keyword), ('(DEF|IF|ELIF|ELSE)\\b', Comment.Preproc)], 'builtins': [(words(('__import__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bint', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'long', 'map', 'max', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'property', 'Py_ssize_t', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'unsigned', 'vars', 'xrange', 'zip'), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin), ('(?<!\\.)(self|None|Ellipsis|NotImplemented|False|True|NULL)\\b', Name.Builtin.Pseudo), (words(('ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'DeprecationWarning', 'EOFError', 'EnvironmentError', 'Exception', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'OverflowWarning', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError'), prefix='(?<!\\.)', suffix='\\b'), Name.Exception)], 'numbers': [('(\\d+\\.?\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number.Float), ('0\\d+', Number.Oct), ('0[xX][a-fA-F0-9]+', Number.Hex), ('\\d+L', Number.Integer.Long), ('\\d+', Number.Integer)], 'backtick': [('`.*?`', String.Backtick)], 'name': [('@\\w+', Name.Decorator), ('[a-zA-Z_]\\w*', Name)], 'funcname': [('[a-zA-Z_]\\w*', Name.Function, '#pop')], 'cdef': [('(public|readonly|extern|api|inline)\\b', Keyword.Reserved), ('(struct|enum|union|class)\\b', Keyword), ('([a-zA-Z_]\\w*)(\\s*)(?=[(:#=]|$)', bygroups(Name.Function, Whitespace), '#pop'), ('([a-zA-Z_]\\w*)(\\s*)(,)', bygroups(Name.Function, Whitespace, Punctuation)), ('from\\b', Keyword, '#pop'), ('as\\b', Keyword), (':', Punctuation, '#pop'), ('(?=["\\\'])', Text, '#pop'), ('[a-zA-Z_]\\w*', Keyword.Type), ('.', Text)], 'classname': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'import': [('(\\s+)(as)(\\s+)', bygroups(Whitespace, Keyword, Whitespace)), ('[a-zA-Z_][\\w.]*', Name.Namespace), ('(\\s*)(,)(\\s*)', bygroups(Whitespace, Operator, Whitespace)), default('#pop')], 'fromimport': [('(\\s+)(c?import)\\b', bygroups(Whitespace, Keyword), '#pop'), ('[a-zA-Z_.][\\w.]*', Name.Namespace), default('#pop')], 'stringescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'strings': [('%(\\([a-zA-Z0-9]+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[E-GXc-giorsux%]', String.Interpol), ('[^\\\\\\\'"%\\n]+', String), ('[\\\'"\\\\]', String), ('%', String)], 'nl': [('\\n', String)], 'dqs': [('"', String, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), include('strings')], 'sqs': [("'", String, '#pop'), ("\\\\\\\\|\\\\'|\\\\\\n", String.Escape), include('strings')], 'tdqs': [('"""', String, '#pop'), include('strings'), include('nl')], 'tsqs': [("'''", String, '#pop'), include('strings'), include('nl')]}
  }

  class DgLexer {
      + name = 'dg'
      + aliases = ['dg']
      + filenames = ['*.dg']
      + mimetypes = ['text/x-dg']
      + url = 'http://pyos.github.io/dg'
      + version_added = '1.6'
      + tokens = {'root': [('\\s+', Text), ('#.*?$', Comment.Single), ('(?i)0b[01]+', Number.Bin), ('(?i)0o[0-7]+', Number.Oct), ('(?i)0x[0-9a-f]+', Number.Hex), ('(?i)[+-]?[0-9]+\\.[0-9]+(e[+-]?[0-9]+)?j?', Number.Float), ('(?i)[+-]?[0-9]+e[+-]?\\d+j?', Number.Float), ('(?i)[+-]?[0-9]+j?', Number.Integer), ("(?i)(br|r?b?)'''", String, combined('stringescape', 'tsqs', 'string')), ('(?i)(br|r?b?)"""', String, combined('stringescape', 'tdqs', 'string')), ("(?i)(br|r?b?)'", String, combined('stringescape', 'sqs', 'string')), ('(?i)(br|r?b?)"', String, combined('stringescape', 'dqs', 'string')), ("`\\w+'*`", Operator), ('\\b(and|in|is|or|where)\\b', Operator.Word), ('[!$%&*+\\-./:<-@\\\\^|~;,]+', Operator), (words(('bool', 'bytearray', 'bytes', 'classmethod', 'complex', 'dict', "dict'", 'float', 'frozenset', 'int', 'list', "list'", 'memoryview', 'object', 'property', 'range', 'set', "set'", 'slice', 'staticmethod', 'str', 'super', 'tuple', "tuple'", 'type'), prefix='(?<!\\.)', suffix="(?![\\'\\w])"), Name.Builtin), (words(('__import__', 'abs', 'all', 'any', 'bin', 'bind', 'chr', 'cmp', 'compile', 'complex', 'delattr', 'dir', 'divmod', 'drop', 'dropwhile', 'enumerate', 'eval', 'exhaust', 'filter', 'flip', 'foldl1?', 'format', 'fst', 'getattr', 'globals', 'hasattr', 'hash', 'head', 'hex', 'id', 'init', 'input', 'isinstance', 'issubclass', 'iter', 'iterate', 'last', 'len', 'locals', 'map', 'max', 'min', 'next', 'oct', 'open', 'ord', 'pow', 'print', 'repr', 'reversed', 'round', 'setattr', 'scanl1?', 'snd', 'sorted', 'sum', 'tail', 'take', 'takewhile', 'vars', 'zip'), prefix='(?<!\\.)', suffix="(?![\\'\\w])"), Name.Builtin), ("(?<!\\.)(self|Ellipsis|NotImplemented|None|True|False)(?!['\\w])", Name.Builtin.Pseudo), ("(?<!\\.)[A-Z]\\w*(Error|Exception|Warning)'*(?!['\\w])", Name.Exception), ("(?<!\\.)(Exception|GeneratorExit|KeyboardInterrupt|StopIteration|SystemExit)(?!['\\w])", Name.Exception), ("(?<![\\w.])(except|finally|for|if|import|not|otherwise|raise|subclass|while|with|yield)(?!['\\w])", Keyword.Reserved), ("[A-Z_]+'*(?!['\\w])", Name), ("[A-Z]\\w+'*(?!['\\w])", Keyword.Type), ("\\w+'*", Name), ('[()]', Punctuation), ('.', Error)], 'stringescape': [('\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)], 'string': [('%(\\(\\w+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[E-GXc-giorsux%]', String.Interpol), ('[^\\\\\\\'"%\\n]+', String), ('[\\\'"\\\\]', String), ('%', String), ('\\n', String)], 'dqs': [('"', String, '#pop')], 'sqs': [("'", String, '#pop')], 'tdqs': [('"""', String, '#pop')], 'tsqs': [("'''", String, '#pop')]}
  }

  class NumPyLexer {
      + name = 'NumPy'
      + url = 'https://numpy.org/'
      + aliases = ['numpy']
      + version_added = '0.10'
      + mimetypes = []
      + filenames = []
      + EXTRA_KEYWORDS = {'abs', 'absolute', 'accumulate', 'add', 'alen', 'all', 'allclose', 'alltrue', 'alterdot', 'amax', 'amin', 'angle', 'any', 'append', 'apply_along_axis', 'apply_over_axes', 'arange', 'arccos', 'arccosh', 'arcsin', 'arcsinh', 'arctan', 'arctan2', 'arctanh', 'argmax', 'argmin', 'argsort', 'argwhere', 'around', 'array', 'array2string', 'array_equal', 'array_equiv', 'array_repr', 'array_split', 'array_str', 'arrayrange', 'asanyarray', 'asarray', 'asarray_chkfinite', 'ascontiguousarray', 'asfarray', 'asfortranarray', 'asmatrix', 'asscalar', 'astype', 'atleast_1d', 'atleast_2d', 'atleast_3d', 'average', 'bartlett', 'base_repr', 'beta', 'binary_repr', 'bincount', 'binomial', 'bitwise_and', 'bitwise_not', 'bitwise_or', 'bitwise_xor', 'blackman', 'bmat', 'broadcast', 'byte_bounds', 'bytes', 'byteswap', 'c_', 'can_cast', 'ceil', 'choose', 'clip', 'column_stack', 'common_type', 'compare_chararrays', 'compress', 'concatenate', 'conj', 'conjugate', 'convolve', 'copy', 'corrcoef', 'correlate', 'cos', 'cosh', 'cov', 'cross', 'cumprod', 'cumproduct', 'cumsum', 'delete', 'deprecate', 'diag', 'diagflat', 'diagonal', 'diff', 'digitize', 'disp', 'divide', 'dot', 'dsplit', 'dstack', 'dtype', 'dump', 'dumps', 'ediff1d', 'empty', 'empty_like', 'equal', 'exp', 'expand_dims', 'expm1', 'extract', 'eye', 'fabs', 'fastCopyAndTranspose', 'fft', 'fftfreq', 'fftshift', 'fill', 'finfo', 'fix', 'flat', 'flatnonzero', 'flatten', 'fliplr', 'flipud', 'floor', 'floor_divide', 'fmod', 'frexp', 'fromarrays', 'frombuffer', 'fromfile', 'fromfunction', 'fromiter', 'frompyfunc', 'fromstring', 'generic', 'get_array_wrap', 'get_include', 'get_numarray_include', 'get_numpy_include', 'get_printoptions', 'getbuffer', 'getbufsize', 'geterr', 'geterrcall', 'geterrobj', 'getfield', 'gradient', 'greater', 'greater_equal', 'gumbel', 'hamming', 'hanning', 'histogram', 'histogram2d', 'histogramdd', 'hsplit', 'hstack', 'hypot', 'i0', 'identity', 'ifft', 'imag', 'index_exp', 'indices', 'inf', 'info', 'inner', 'insert', 'int_asbuffer', 'interp', 'intersect1d', 'intersect1d_nu', 'inv', 'invert', 'iscomplex', 'iscomplexobj', 'isfinite', 'isfortran', 'isinf', 'isnan', 'isneginf', 'isposinf', 'isreal', 'isrealobj', 'isscalar', 'issctype', 'issubclass_', 'issubdtype', 'issubsctype', 'item', 'itemset', 'iterable', 'ix_', 'kaiser', 'kron', 'ldexp', 'left_shift', 'less', 'less_equal', 'lexsort', 'linspace', 'load', 'loads', 'loadtxt', 'log', 'log10', 'log1p', 'log2', 'logical_and', 'logical_not', 'logical_or', 'logical_xor', 'logspace', 'lstsq', 'mat', 'matrix', 'max', 'maximum', 'maximum_sctype', 'may_share_memory', 'mean', 'median', 'meshgrid', 'mgrid', 'min', 'minimum', 'mintypecode', 'mod', 'modf', 'msort', 'multiply', 'nan', 'nan_to_num', 'nanargmax', 'nanargmin', 'nanmax', 'nanmin', 'nansum', 'ndenumerate', 'ndim', 'ndindex', 'negative', 'newaxis', 'newbuffer', 'newbyteorder', 'nonzero', 'not_equal', 'obj2sctype', 'ogrid', 'ones', 'ones_like', 'outer', 'permutation', 'piecewise', 'pinv', 'pkgload', 'place', 'poisson', 'poly', 'poly1d', 'polyadd', 'polyder', 'polydiv', 'polyfit', 'polyint', 'polymul', 'polysub', 'polyval', 'power', 'prod', 'product', 'ptp', 'put', 'putmask', 'r_', 'randint', 'random_integers', 'random_sample', 'ranf', 'rank', 'ravel', 'real', 'real_if_close', 'recarray', 'reciprocal', 'reduce', 'remainder', 'repeat', 'require', 'reshape', 'resize', 'restoredot', 'right_shift', 'rint', 'roll', 'rollaxis', 'roots', 'rot90', 'round', 'round_', 'row_stack', 's_', 'sample', 'savetxt', 'sctype2char', 'searchsorted', 'seed', 'select', 'set_numeric_ops', 'set_printoptions', 'set_string_function', 'setbufsize', 'setdiff1d', 'seterr', 'seterrcall', 'seterrobj', 'setfield', 'setflags', 'setmember1d', 'setxor1d', 'shape', 'show_config', 'shuffle', 'sign', 'signbit', 'sin', 'sinc', 'sinh', 'size', 'slice', 'solve', 'sometrue', 'sort', 'sort_complex', 'source', 'split', 'sqrt', 'square', 'squeeze', 'standard_normal', 'std', 'subtract', 'sum', 'svd', 'swapaxes', 'take', 'tan', 'tanh', 'tensordot', 'test', 'tile', 'tofile', 'tolist', 'tostring', 'trace', 'transpose', 'trapz', 'tri', 'tril', 'trim_zeros', 'triu', 'true_divide', 'typeDict', 'typename', 'uniform', 'union1d', 'unique', 'unique1d', 'unravel_index', 'unwrap', 'vander', 'var', 'vdot', 'vectorize', 'view', 'vonmises', 'vsplit', 'vstack', 'weibull', 'where', 'who', 'zeros', 'zeros_like'}
  --
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class KLexer {
      + name = 'K'
      + aliases = ['k']
      + filenames = ['*.k']
      + url = 'https://code.kx.com'
      + version_added = '2.12'
      + tokens = {'whitespace': [('^#!.*', Comment.Hashbang), ('^/\\s*\\n', Comment.Multiline, 'comments'), ('(?<!\\S)/.*', Comment.Single), ('\\s+', Whitespace), ('\\"', String.Double, 'strings')], 'root': [include('whitespace'), include('keywords'), include('declarations')], 'keywords': [(words(('abs', 'acos', 'asin', 'atan', 'avg', 'bin', 'binr', 'by', 'cor', 'cos', 'cov', 'dev', 'delete', 'div', 'do', 'enlist', 'exec', 'exit', 'exp', 'from', 'getenv', 'hopen', 'if', 'in', 'insert', 'last', 'like', 'log', 'max', 'min', 'prd', 'select', 'setenv', 'sin', 'sqrt', 'ss', 'sum', 'tan', 'update', 'var', 'wavg', 'while', 'within', 'wsum', 'xexp'), suffix='\\b'), Operator.Word)], 'declarations': [('^\\\\ts?', Comment.Preproc), ('^(\\\\\\w\\s+[^/\\n]*?)(/.*)', bygroups(Comment.Preproc, Comment.Single)), ('^\\\\\\w.*', Comment.Preproc), ('^[a-zA-Z]\\)', Generic.Prompt), ("([.]?[a-zA-Z][\\w.]*)(\\s*)([-.~=!@#$%^&*_+|,<>?/\\\\:']?:)(\\s*)(\\{)", bygroups(Name.Function, Whitespace, Operator, Whitespace, Punctuation), 'functions'), ("([.]?[a-zA-Z][\\w.]*)(\\s*)([-.~=!@#$%^&*_+|,<>?/\\\\:']?:)", bygroups(Name.Variable, Whitespace, Operator)), ('\\{', Punctuation, 'functions'), ('\\(', Punctuation, 'parentheses'), ('\\[', Punctuation, 'brackets'), ("'`([a-zA-Z][\\w.]*)?", Name.Exception), ('`:([a-zA-Z/][\\w./]*)?', String.Symbol), ('`([a-zA-Z][\\w.]*)?', String.Symbol), include('numbers'), ('[a-zA-Z][\\w.]*', Name), ("[-=+*#$%@!~^&:.,<>'\\\\|/?_]", Operator), (';', Punctuation)], 'functions': [include('root'), ('\\}', Punctuation, '#pop')], 'parentheses': [include('root'), ('\\)', Punctuation, '#pop')], 'brackets': [include('root'), ('\\]', Punctuation, '#pop')], 'numbers': [('[01]+b', Number.Bin), ('0[nNwW][cefghijmndzuvtp]?', Number), ('(?:[0-9]{4}[.][0-9]{2}[.][0-9]{2}|[0-9]+)D(?:[0-9](?:[0-9](?::[0-9]{2}(?::[0-9]{2}(?:[.][0-9]*)?)?)?)?)?', Literal.Date), ('[0-9]{4}[.][0-9]{2}(?:m|[.][0-9]{2}(?:T(?:[0-9]{2}:[0-9]{2}(?::[0-9]{2}(?:[.][0-9]*)?)?)?)?)', Literal.Date), ('[0-9]{2}:[0-9]{2}(?::[0-9]{2}(?:[.][0-9]{1,3})?)?', Literal.Date), ('[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}', Number.Hex), ('0x[0-9a-fA-F]+', Number.Hex), ('([0-9]*[.]?[0-9]+|[0-9]+[.]?[0-9]*)[eE][+-]?[0-9]+[ef]?', Number.Float), ('([0-9]*[.][0-9]+|[0-9]+[.][0-9]*)[ef]?', Number.Float), ('[0-9]+[ef]', Number.Float), ('[0-9]+c', Number), ('[0-9]+[ihtuv]', Number.Integer), ('[0-9]+[jnp]?', Number.Integer.Long)], 'comments': [('[^\\\\]+', Comment.Multiline), ('^\\\\', Comment.Multiline, '#pop'), ('\\\\', Comment.Multiline)], 'strings': [('[^"\\\\]+', String.Double), ('\\\\.', String.Escape), ('"', String.Double, '#pop')]}
  }

  class QLexer {
      + name = 'Q'
      + aliases = ['q']
      + filenames = ['*.q']
      + version_added = '2.12'
      + tokens = {'root': [(words(('aj', 'aj0', 'ajf', 'ajf0', 'all', 'and', 'any', 'asc', 'asof', 'attr', 'avgs', 'ceiling', 'cols', 'count', 'cross', 'csv', 'cut', 'deltas', 'desc', 'differ', 'distinct', 'dsave', 'each', 'ej', 'ema', 'eval', 'except', 'fby', 'fills', 'first', 'fkeys', 'flip', 'floor', 'get', 'group', 'gtime', 'hclose', 'hcount', 'hdel', 'hsym', 'iasc', 'idesc', 'ij', 'ijf', 'inter', 'inv', 'key', 'keys', 'lj', 'ljf', 'load', 'lower', 'lsq', 'ltime', 'ltrim', 'mavg', 'maxs', 'mcount', 'md5', 'mdev', 'med', 'meta', 'mins', 'mmax', 'mmin', 'mmu', 'mod', 'msum', 'neg', 'next', 'not', 'null', 'or', 'over', 'parse', 'peach', 'pj', 'prds', 'prior', 'prev', 'rand', 'rank', 'ratios', 'raze', 'read0', 'read1', 'reciprocal', 'reval', 'reverse', 'rload', 'rotate', 'rsave', 'rtrim', 'save', 'scan', 'scov', 'sdev', 'set', 'show', 'signum', 'ssr', 'string', 'sublist', 'sums', 'sv', 'svar', 'system', 'tables', 'til', 'trim', 'txf', 'type', 'uj', 'ujf', 'ungroup', 'union', 'upper', 'upsert', 'value', 'view', 'views', 'vs', 'where', 'wj', 'wj1', 'ww', 'xasc', 'xbar', 'xcol', 'xcols', 'xdesc', 'xgroup', 'xkey', 'xlog', 'xprev', 'xrank'), suffix='\\b'), Name.Builtin), inherit]}
  }

  class QlikLexer {
      + name = 'Qlik'
      + aliases = ['qlik', 'qlikview', 'qliksense', 'qlikscript']
      + filenames = ['*.qvs', '*.qvw']
      + url = 'https://qlik.com'
      + version_added = '2.12'
      + flags = re.IGNORECASE
      + tokens = {'comment': [('\\*/', Comment.Multiline, '#pop'), ('[^*]+', Comment.Multiline)], 'numerics': [('\\b\\d+\\.\\d+(e\\d+)?[fd]?\\b', Number.Float), ('\\b\\d+\\b', Number.Integer)], 'interp': [('(\\$\\()(\\w+)(\\))', bygroups(String.Interpol, Name.Variable, String.Interpol))], 'string': [("'", String, '#pop'), include('interp'), ("[^'$]+", String), ('\\$', String)], 'assignment': [(';', Punctuation, '#pop'), include('root')], 'field_name_quote': [('"', String.Symbol, '#pop'), include('interp'), ('[^\\"$]+', String.Symbol), ('\\$', String.Symbol)], 'field_name_bracket': [('\\]', String.Symbol, '#pop'), include('interp'), ('[^\\]$]+', String.Symbol), ('\\$', String.Symbol)], 'function': [('\\)', Punctuation, '#pop'), include('root')], 'root': [('\\s+', Text.Whitespace), ('/\\*', Comment.Multiline, 'comment'), ('//.*\\n', Comment.Single), ('(let|set)(\\s+)', bygroups(Keyword.Declaration, Text.Whitespace), 'assignment'), (words(OPERATORS_LIST['words'], prefix='\\b', suffix='\\b'), Operator.Word), (words(STATEMENT_LIST, suffix='\\b'), Keyword), ('[a-z]\\w*:', Keyword.Declaration), (words(CONSTANT_LIST, suffix='\\b'), Keyword.Constant), (words(SCRIPT_FUNCTIONS, suffix='(?=\\s*\\()'), Name.Builtin, 'function'), include('interp'), ('"', String.Symbol, 'field_name_quote'), ('\\[', String.Symbol, 'field_name_bracket'), ("'", String, 'string'), include('numerics'), (words(OPERATORS_LIST['symbols']), Operator), ("'.+?'", String), ('\\b\\w+\\b', Text), ('[,;.()\\\\/]', Punctuation)]}
  }

  class QVToLexer {
      + name = 'QVTO'
      + aliases = ['qvto', 'qvt']
      + filenames = ['*.qvto']
      + url = 'https://www.omg.org/spec/QVT/1.1'
      + version_added = ''
      + tokens = {'root': [('\\n', Text), ('[^\\S\\n]+', Text), ('(--|//)(\\s*)(directive:)?(.*)$', bygroups(Comment, Comment, Comment.Preproc, Comment)), ('/[*](.|\\n)*?[*]/', Comment.Multiline), ('\\\\\\n', Text), ('(and|not|or|xor|##?)\\b', Operator.Word), ('(:{1,2}=|[-+]=)\\b', Operator.Word), ('(@|<<|>>)\\b', Keyword), ('!=|<>|==|=|!->|->|>=|<=|[.]{3}|[+/*%=<>&|.~]', Operator), ('[]{}:(),;[]', Punctuation), ('(true|false|unlimited|null)\\b', Keyword.Constant), ('(this|self|result)\\b', Name.Builtin.Pseudo), ('(var)\\b', Keyword.Declaration), ('(from|import)\\b', Keyword.Namespace, 'fromimport'), ('(metamodel|class|exception|primitive|enum|transformation|library)(\\s+)(\\w+)', bygroups(Keyword.Word, Text, Name.Class)), ('(exception)(\\s+)(\\w+)', bygroups(Keyword.Word, Text, Name.Exception)), ('(main)\\b', Name.Function), ('(mapping|helper|query)(\\s+)', bygroups(Keyword.Declaration, Text), 'operation'), ('(assert)(\\s+)\\b', bygroups(Keyword, Text), 'assert'), ('(Bag|Collection|Dict|OrderedSet|Sequence|Set|Tuple|List)\\b', Keyword.Type), include('keywords'), ('"', String, combined('stringescape', 'dqs')), ("'", String, combined('stringescape', 'sqs')), include('name'), include('numbers')], 'fromimport': [('(?:[ \\t]|\\\\\\n)+', Text), ('[a-zA-Z_][\\w.]*', Name.Namespace), default('#pop')], 'operation': [('::', Text), ('(.*::)([a-zA-Z_]\\w*)([ \\t]*)(\\()', bygroups(Text, Name.Function, Text, Punctuation), '#pop')], 'assert': [('(warning|error|fatal)\\b', Keyword, '#pop'), default('#pop')], 'keywords': [(words(('abstract', 'access', 'any', 'assert', 'blackbox', 'break', 'case', 'collect', 'collectNested', 'collectOne', 'collectselect', 'collectselectOne', 'composes', 'compute', 'configuration', 'constructor', 'continue', 'datatype', 'default', 'derived', 'disjuncts', 'do', 'elif', 'else', 'end', 'endif', 'except', 'exists', 'extends', 'forAll', 'forEach', 'forOne', 'from', 'if', 'implies', 'in', 'inherits', 'init', 'inout', 'intermediate', 'invresolve', 'invresolveIn', 'invresolveone', 'invresolveoneIn', 'isUnique', 'iterate', 'late', 'let', 'literal', 'log', 'map', 'merges', 'modeltype', 'new', 'object', 'one', 'ordered', 'out', 'package', 'population', 'property', 'raise', 'readonly', 'references', 'refines', 'reject', 'resolve', 'resolveIn', 'resolveone', 'resolveoneIn', 'return', 'select', 'selectOne', 'sortedBy', 'static', 'switch', 'tag', 'then', 'try', 'typedef', 'unlimited', 'uses', 'when', 'where', 'while', 'with', 'xcollect', 'xmap', 'xselect'), suffix='\\b'), Keyword)], 'strings': [('[^\\\\\\\'"\\n]+', String), ('[\\\'"\\\\]', String)], 'stringescape': [('\\\\([\\\\btnfr"\\\']|u[0-3][0-7]{2}|u[0-7]{1,2})', String.Escape)], 'dqs': [('"', String, '#pop'), ('\\\\\\\\|\\\\"', String.Escape), include('strings')], 'sqs': [("'", String, '#pop'), ("\\\\\\\\|\\\\'", String.Escape), include('strings')], 'name': [('[a-zA-Z_]\\w*', Name)], 'numbers': [('(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number.Float), ('\\d+[eE][+-]?[0-9]+', Number.Float), ('\\d+', Number.Integer)]}
  }

  class RConsoleLexer {
      + name = 'RConsole'
      + aliases = ['rconsole', 'rout']
      + filenames = ['*.Rout']
      + url = 'https://www.r-project.org'
      + version_added = ''
  --
      + get_tokens_unprocessed(text)
  }

  class SLexer {
      + name = 'S'
      + aliases = ['splus', 's', 'r']
      + filenames = ['*.S', '*.R', '.Rhistory', '.Rprofile', '.Renviron']
      + mimetypes = ['text/S-plus', 'text/S', 'text/x-r-source', 'text/x-r', 'text/x-R', 'text/x-r-history', 'text/x-r-profile']
      + url = 'https://www.r-project.org'
      + version_added = '0.10'
      + valid_name = '`[^`\\\\]*(?:\\\\.[^`\\\\]*)*`|(?:[a-zA-Z]|\\.[A-Za-z_.])[\\w.]*|\\.'
      + tokens = {'comments': [('#.*$', Comment.Single)], 'valid_name': [(valid_name, Name)], 'function_name': [(f'({valid_name})\\s*(?=\\()', Name.Function)], 'punctuation': [('\\[{1,2}|\\]{1,2}|\\(|\\)|;|,', Punctuation)], 'keywords': [('(if|else|for|while|repeat|in|next|break|return|switch|function)(?![\\w.])', Keyword.Reserved)], 'operators': [('<<?-|->>?|-|==|<=|>=|\\|>|<|>|&&?|!=|\\|\\|?|\\?', Operator), ('\\*|\\+|\\^|/|!|%[^%]*%|=|~|\\$|@|:{1,3}', Operator)], 'builtin_symbols': [('(NULL|NA(_(integer|real|complex|character)_)?|letters|LETTERS|Inf|TRUE|FALSE|NaN|pi|\\.\\.(\\.|[0-9]+))(?![\\w.])', Keyword.Constant), ('(T|F)\\b', Name.Builtin.Pseudo)], 'numbers': [('0[xX][a-fA-F0-9]+([pP][0-9]+)?[Li]?', Number.Hex), ('[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)([eE][+-]?[0-9]+)?[Li]?', Number)], 'statements': [include('comments'), ('\\s+', Whitespace), ("\\'", String, 'string_squote'), ('\\"', String, 'string_dquote'), include('builtin_symbols'), include('keywords'), include('function_name'), include('valid_name'), include('numbers'), include('punctuation'), include('operators')], 'root': [include('statements'), ('\\{|\\}', Punctuation), ('.', Text)], 'string_squote': [("([^\\'\\\\]|\\\\.)*\\'", String, '#pop')], 'string_dquote': [('([^"\\\\]|\\\\.)*"', String, '#pop')]}
  --
      + analyse_text(text)
  }

  class RdLexer {
      + name = 'Rd'
      + aliases = ['rd']
      + filenames = ['*.Rd']
      + mimetypes = ['text/x-r-doc']
      + url = 'http://cran.r-project.org/doc/manuals/R-exts.html'
      + version_added = '1.6'
      + tokens = {'root': [('\\\\[\\\\{}%]', String.Escape), ('%.*$', Comment), ('\\\\(?:cr|l?dots|R|tab)\\b', Keyword.Constant), ('\\\\[a-zA-Z]+\\b', Keyword), ('^\\s*#(?:ifn?def|endif).*\\b', Comment.Preproc), ('[{}]', Name.Builtin), ('[^\\\\%\\n{}]+', Text), ('.', Text)]}
  }

  class SparqlLexer {
      + name = 'SPARQL'
      + aliases = ['sparql']
      + filenames = ['*.rq', '*.sparql']
      + mimetypes = ['application/sparql-query']
      + url = 'https://www.w3.org/TR/sparql11-query'
      + version_added = '2.0'
      + PN_CHARS_BASE_GRP = 'a-zA-ZÀ-ÖØ-öø-˿Ͱ-ͽͿ-\u1fff\u200c-\u200d⁰-\u218fⰀ-\u2fef、-\ud7ff豈-﷏ﷰ-�'
      + PN_CHARS_U_GRP = PN_CHARS_BASE_GRP + '_'
      + PN_CHARS_GRP = PN_CHARS_U_GRP + '\\-' + '0-9' + '·' + '̀-ͯ' + '‿-⁀'
      + HEX_GRP = '0-9A-Fa-f'
      + PN_LOCAL_ESC_CHARS_GRP = ' _~.\\-!$&"()*+,;=/?#@%'
      + PN_CHARS_BASE = '[' + PN_CHARS_BASE_GRP + ']'
      + PN_CHARS_U = '[' + PN_CHARS_U_GRP + ']'
      + PN_CHARS = '[' + PN_CHARS_GRP + ']'
      + HEX = '[' + HEX_GRP + ']'
      + PN_LOCAL_ESC_CHARS = '[' + PN_LOCAL_ESC_CHARS_GRP + ']'
      + IRIREF = '<(?:[^<>"{}|^`\\\\\\x00-\\x20])*>'
      + BLANK_NODE_LABEL = '_:[0-9' + PN_CHARS_U_GRP + '](?:[' + PN_CHARS_GRP + '.]*' + PN_CHARS + ')?'
      + PN_PREFIX = PN_CHARS_BASE + '(?:[' + PN_CHARS_GRP + '.]*' + PN_CHARS + ')?'
      + VARNAME = '[0-9' + PN_CHARS_U_GRP + '][' + PN_CHARS_U_GRP + '0-9·̀-ͯ‿-⁀]*'
      + PERCENT = '%' + HEX + HEX
      + PN_LOCAL_ESC = '\\\\' + PN_LOCAL_ESC_CHARS
      + PLX = '(?:' + PERCENT + ')|(?:' + PN_LOCAL_ESC + ')'
      + PN_LOCAL = '(?:[' + PN_CHARS_U_GRP + ':0-9' + ']|' + PLX + ')' + '(?:(?:[' + PN_CHARS_GRP + '.:]|' + PLX + ')*(?:[' + PN_CHARS_GRP + ':]|' + PLX + '))?'
      + EXPONENT = '[eE][+-]?\\d+'
      + tokens = {'root': [('\\s+', Text), ('(?i)(select|construct|describe|ask|where|filter|group\\s+by|minus|distinct|reduced|from\\s+named|from|order\\s+by|desc|asc|limit|offset|values|bindings|load|into|clear|drop|create|add|move|copy|insert\\s+data|delete\\s+data|delete\\s+where|with|delete|insert|using\\s+named|using|graph|default|named|all|optional|service|silent|bind|undef|union|not\\s+in|in|as|having|to|prefix|base)\\b', Keyword), ('(a)\\b', Keyword), ('(' + IRIREF + ')', Name.Label), ('(' + BLANK_NODE_LABEL + ')', Name.Label), ('[?$]' + VARNAME, Name.Variable), ('(' + PN_PREFIX + ')?(\\:)(' + PN_LOCAL + ')?', bygroups(Name.Namespace, Punctuation, Name.Tag)), ('(?i)(str|lang|langmatches|datatype|bound|iri|uri|bnode|rand|abs|ceil|floor|round|concat|strlen|ucase|lcase|encode_for_uri|contains|strstarts|strends|strbefore|strafter|year|month|day|hours|minutes|seconds|timezone|tz|now|uuid|struuid|md5|sha1|sha256|sha384|sha512|coalesce|if|strlang|strdt|sameterm|isiri|isuri|isblank|isliteral|isnumeric|regex|substr|replace|exists|not\\s+exists|count|sum|min|max|avg|sample|group_concat|separator)\\b', Name.Function), ('(true|false)', Keyword.Constant), ('[+\\-]?(\\d+\\.\\d*' + EXPONENT + '|\\.?\\d+' + EXPONENT + ')', Number.Float), ('[+\\-]?(\\d+\\.\\d*|\\.\\d+)', Number.Float), ('[+\\-]?\\d+', Number.Integer), ('(\\|\\||&&|=|\\*|\\-|\\+|/|!=|<=|>=|!|<|>)', Operator), ('[(){}.;,:^\\[\\]]', Punctuation), ('#[^\\n]*', Comment), ('"""', String, 'triple-double-quoted-string'), ('"', String, 'single-double-quoted-string'), ("'''", String, 'triple-single-quoted-string'), ("'", String, 'single-single-quoted-string')], 'triple-double-quoted-string': [('"""', String, 'end-of-string'), ('[^\\\\]+', String), ('\\\\', String, 'string-escape')], 'single-double-quoted-string': [('"', String, 'end-of-string'), ('[^"\\\\\\n]+', String), ('\\\\', String, 'string-escape')], 'triple-single-quoted-string': [("'''", String, 'end-of-string'), ('[^\\\\]+', String), ('\\\\', String.Escape, 'string-escape')], 'single-single-quoted-string': [("'", String, 'end-of-string'), ("[^'\\\\\\n]+", String), ('\\\\', String, 'string-escape')], 'string-escape': [('u' + HEX + '{4}', String.Escape, '#pop'), ('U' + HEX + '{8}', String.Escape, '#pop'), ('.', String.Escape, '#pop')], 'end-of-string': [('(@)([a-zA-Z]+(?:-[a-zA-Z0-9]+)*)', bygroups(Operator, Name.Function), '#pop:2'), ('\\^\\^', Operator, '#pop:2'), default('#pop:2')]}
  }

  class TurtleLexer {
      + name = 'Turtle'
      + aliases = ['turtle']
      + filenames = ['*.ttl']
      + mimetypes = ['text/turtle', 'application/x-turtle']
      + url = 'https://www.w3.org/TR/turtle'
      + version_added = '2.1'
      + PN_CHARS_BASE_GRP = 'a-zA-ZÀ-ÖØ-öø-˿Ͱ-ͽͿ-\u1fff\u200c-\u200d⁰-\u218fⰀ-\u2fef、-\ud7ff豈-﷏ﷰ-�'
      + PN_CHARS_U_GRP = PN_CHARS_BASE_GRP + '_'
      + PN_CHARS_GRP = PN_CHARS_U_GRP + '\\-' + '0-9' + '·' + '̀-ͯ' + '‿-⁀'
      + PN_CHARS = '[' + PN_CHARS_GRP + ']'
      + PN_CHARS_BASE = '[' + PN_CHARS_BASE_GRP + ']'
      + PN_PREFIX = PN_CHARS_BASE + '(?:[' + PN_CHARS_GRP + '.]*' + PN_CHARS + ')?'
      + HEX_GRP = '0-9A-Fa-f'
      + HEX = '[' + HEX_GRP + ']'
      + PERCENT = '%' + HEX + HEX
      + PN_LOCAL_ESC_CHARS_GRP = ' _~.\\-!$&"()*+,;=/?#@%'
      + PN_LOCAL_ESC_CHARS = '[' + PN_LOCAL_ESC_CHARS_GRP + ']'
      + PN_LOCAL_ESC = '\\\\' + PN_LOCAL_ESC_CHARS
      + PLX = '(?:' + PERCENT + ')|(?:' + PN_LOCAL_ESC + ')'
      + PN_LOCAL = '(?:[' + PN_CHARS_U_GRP + ':0-9' + ']|' + PLX + ')' + '(?:(?:[' + PN_CHARS_GRP + '.:]|' + PLX + ')*(?:[' + PN_CHARS_GRP + ':]|' + PLX + '))?'
      + patterns = {'PNAME_NS': '((?:[a-zA-Z][\\w-]*)?\\:)', 'IRIREF': '(<[^<>"{}|^`\\\\\\x00-\\x20]*>)'}
      + tokens = {'root': [('\\s+', Text), ('(@base|BASE)(\\s+){IRIREF}(\\s*)(\\.?)'.format(**patterns), bygroups(Keyword, Whitespace, Name.Variable, Whitespace, Punctuation)), ('(@prefix|PREFIX)(\\s+){PNAME_NS}(\\s+){IRIREF}(\\s*)(\\.?)'.format(**patterns), bygroups(Keyword, Whitespace, Name.Namespace, Whitespace, Name.Variable, Whitespace, Punctuation)), ('(?<=\\s)a(?=\\s)', Keyword.Type), ('{IRIREF}'.format(**patterns), Name.Variable), ('(' + PN_PREFIX + ')?(\\:)(' + PN_LOCAL + ')?', bygroups(Name.Namespace, Punctuation, Name.Tag)), ('(_)(:)([' + PN_CHARS_U_GRP + '0-9]([' + PN_CHARS_GRP + '.]*' + PN_CHARS + ')?)', bygroups(Name.Namespace, Punctuation, Name.Tag)), ('#[^\\n]+', Comment), ('\\b(true|false)\\b', Literal), ('[+\\-]?\\d*\\.\\d+', Number.Float), ('[+\\-]?\\d*(:?\\.\\d+)?E[+\\-]?\\d+', Number.Float), ('[+\\-]?\\d+', Number.Integer), ('[\\[\\](){}.;,:^]', Punctuation), ('"""', String, 'triple-double-quoted-string'), ('"', String, 'single-double-quoted-string'), ("'''", String, 'triple-single-quoted-string'), ("'", String, 'single-single-quoted-string')], 'triple-double-quoted-string': [('"""', String, 'end-of-string'), ('[^\\\\]+(?=""")', String), ('\\\\', String, 'string-escape')], 'single-double-quoted-string': [('"', String, 'end-of-string'), ('[^"\\\\\\n]+', String), ('\\\\', String, 'string-escape')], 'triple-single-quoted-string': [("'''", String, 'end-of-string'), ("[^\\\\]+(?=''')", String), ('\\\\', String, 'string-escape')], 'single-single-quoted-string': [("'", String, 'end-of-string'), ("[^'\\\\\\n]+", String), ('\\\\', String, 'string-escape')], 'string-escape': [('.', String, '#pop')], 'end-of-string': [('(@)([a-zA-Z]+(?:-[a-zA-Z0-9]+)*)', bygroups(Operator, Generic.Emph), '#pop:2'), ('(\\^\\^){IRIREF}'.format(**patterns), bygroups(Operator, Generic.Emph), '#pop:2'), default('#pop:2')]}
  --
      + analyse_text(text)
  }

  class ShExCLexer {
      + name = 'ShExC'
      + aliases = ['shexc', 'shex']
      + filenames = ['*.shex']
      + mimetypes = ['text/shex']
      + url = 'https://shex.io/shex-semantics/#shexc'
      + version_added = ''
      + PN_CHARS_BASE_GRP = 'a-zA-ZÀ-ÖØ-öø-˿Ͱ-ͽͿ-\u1fff\u200c-\u200d⁰-\u218fⰀ-\u2fef、-\ud7ff豈-﷏ﷰ-�'
      + PN_CHARS_U_GRP = PN_CHARS_BASE_GRP + '_'
      + PN_CHARS_GRP = PN_CHARS_U_GRP + '\\-' + '0-9' + '·' + '̀-ͯ' + '‿-⁀'
      + HEX_GRP = '0-9A-Fa-f'
      + PN_LOCAL_ESC_CHARS_GRP = "_~.\\-!$&'()*+,;=/?#@%"
      + PN_CHARS_BASE = '[' + PN_CHARS_BASE_GRP + ']'
      + PN_CHARS_U = '[' + PN_CHARS_U_GRP + ']'
      + PN_CHARS = '[' + PN_CHARS_GRP + ']'
      + HEX = '[' + HEX_GRP + ']'
      + PN_LOCAL_ESC_CHARS = '[' + PN_LOCAL_ESC_CHARS_GRP + ']'
      + UCHAR_NO_BACKSLASH = '(?:u' + HEX + '{4}|U' + HEX + '{8})'
      + UCHAR = '\\\\' + UCHAR_NO_BACKSLASH
      + IRIREF = '<(?:[^\\x00-\\x20<>"{}|^`\\\\]|' + UCHAR + ')*>'
      + BLANK_NODE_LABEL = '_:[0-9' + PN_CHARS_U_GRP + '](?:[' + PN_CHARS_GRP + '.]*' + PN_CHARS + ')?'
      + PN_PREFIX = PN_CHARS_BASE + '(?:[' + PN_CHARS_GRP + '.]*' + PN_CHARS + ')?'
      + PERCENT = '%' + HEX + HEX
      + PN_LOCAL_ESC = '\\\\' + PN_LOCAL_ESC_CHARS
      + PLX = '(?:' + PERCENT + ')|(?:' + PN_LOCAL_ESC + ')'
      + PN_LOCAL = '(?:[' + PN_CHARS_U_GRP + ':0-9' + ']|' + PLX + ')' + '(?:(?:[' + PN_CHARS_GRP + '.:]|' + PLX + ')*(?:[' + PN_CHARS_GRP + ':]|' + PLX + '))?'
      + EXPONENT = '[eE][+-]?\\d+'
      + tokens = {'root': [('\\s+', Text), ('(?i)(base|prefix|start|external|literal|iri|bnode|nonliteral|length|minlength|maxlength|mininclusive|minexclusive|maxinclusive|maxexclusive|totaldigits|fractiondigits|closed|extra)\\b', Keyword), ('(a)\\b', Keyword), ('(' + IRIREF + ')', Name.Label), ('(' + BLANK_NODE_LABEL + ')', Name.Label), ('(' + PN_PREFIX + ')?(\\:)(' + PN_LOCAL + ')?', bygroups(Name.Namespace, Punctuation, Name.Tag)), ('(true|false)', Keyword.Constant), ('[+\\-]?(\\d+\\.\\d*' + EXPONENT + '|\\.?\\d+' + EXPONENT + ')', Number.Float), ('[+\\-]?(\\d+\\.\\d*|\\.\\d+)', Number.Float), ('[+\\-]?\\d+', Number.Integer), ('[@|$&=*+?^\\-~]', Operator), ('(?i)(and|or|not)\\b', Operator.Word), ('[(){}.;,:^\\[\\]]', Punctuation), ('#[^\\n]*', Comment), ('"""', String, 'triple-double-quoted-string'), ('"', String, 'single-double-quoted-string'), ("'''", String, 'triple-single-quoted-string'), ("'", String, 'single-single-quoted-string')], 'triple-double-quoted-string': [('"""', String, 'end-of-string'), ('[^\\\\]+', String), ('\\\\', String, 'string-escape')], 'single-double-quoted-string': [('"', String, 'end-of-string'), ('[^"\\\\\\n]+', String), ('\\\\', String, 'string-escape')], 'triple-single-quoted-string': [("'''", String, 'end-of-string'), ('[^\\\\]+', String), ('\\\\', String.Escape, 'string-escape')], 'single-single-quoted-string': [("'", String, 'end-of-string'), ("[^'\\\\\\n]+", String), ('\\\\', String, 'string-escape')], 'string-escape': [(UCHAR_NO_BACKSLASH, String.Escape, '#pop'), ('.', String.Escape, '#pop')], 'end-of-string': [('(@)([a-zA-Z]+(?:-[a-zA-Z0-9]+)*)', bygroups(Operator, Name.Function), '#pop:2'), ('\\^\\^', Operator, '#pop:2'), default('#pop:2')]}
  }

  class RebolLexer {
      + name = 'REBOL'
      + aliases = ['rebol']
      + filenames = ['*.r', '*.r3', '*.reb']
      + mimetypes = ['text/x-rebol']
      + url = 'http://www.rebol.com'
      + version_added = '1.1'
      + flags = re.IGNORECASE | re.MULTILINE
      + escape_re = '(?:\\^\\([0-9a-f]{1,4}\\)*)'
      + tokens = {'root': [('\\s+', Text), ('#"', String.Char, 'char'), ('#\\{[0-9a-f]*\\}', Number.Hex), ('2#\\{', Number.Hex, 'bin2'), ('64#\\{[0-9a-z+/=\\s]*\\}', Number.Hex), ('"', String, 'string'), ('\\{', String, 'string2'), (';#+.*\\n', Comment.Special), (';\\*+.*\\n', Comment.Preproc), (';.*\\n', Comment), ('%"', Name.Decorator, 'stringFile'), ('%[^(^{")\\s\\[\\]]+', Name.Decorator), ('[+-]?([a-z]{1,3})?\\$\\d+(\\.\\d+)?', Number.Float), ('[+-]?\\d+\\:\\d+(\\:\\d+)?(\\.\\d+)?', String.Other), ('\\d+[\\-/][0-9a-z]+[\\-/]\\d+(\\/\\d+\\:\\d+((\\:\\d+)?([.\\d+]?([+-]?\\d+:\\d+)?)?)?)?', String.Other), ('\\d+(\\.\\d+)+\\.\\d+', Keyword.Constant), ('\\d+X\\d+', Keyword.Constant), ("[+-]?\\d+(\\'\\d+)?([.,]\\d*)?E[+-]?\\d+", Number.Float), ("[+-]?\\d+(\\'\\d+)?[.,]\\d*", Number.Float), ("[+-]?\\d+(\\'\\d+)?", Number), ('[\\[\\]()]', Generic.Strong), ('[a-z]+[^(^{"\\s:)]*://[^(^{"\\s)]*', Name.Decorator), ('mailto:[^(^{"@\\s)]+@[^(^{"@\\s)]+', Name.Decorator), ('[^(^{"@\\s)]+@[^(^{"@\\s)]+', Name.Decorator), ('comment\\s"', Comment, 'commentString1'), ('comment\\s\\{', Comment, 'commentString2'), ('comment\\s\\[', Comment, 'commentBlock'), ('comment\\s[^(\\s{"\\[]+', Comment), ('/[^(^{")\\s/[\\]]*', Name.Attribute), ('([^(^{")\\s/[\\]]+)(?=[:({"\\s/\\[\\]])', word_callback), ('<[\\w:.-]*>', Name.Tag), ('<[^(<>\\s")]+', Name.Tag, 'tag'), ('([^(^{")\\s]+)', Text)], 'string': [('[^(^")]+', String), (escape_re, String.Escape), ('[(|)]+', String), ('\\^.', String.Escape), ('"', String, '#pop')], 'string2': [('[^(^{})]+', String), (escape_re, String.Escape), ('[(|)]+', String), ('\\^.', String.Escape), ('\\{', String, '#push'), ('\\}', String, '#pop')], 'stringFile': [('[^(^")]+', Name.Decorator), (escape_re, Name.Decorator), ('\\^.', Name.Decorator), ('"', Name.Decorator, '#pop')], 'char': [(escape_re + '"', String.Char, '#pop'), ('\\^."', String.Char, '#pop'), ('."', String.Char, '#pop')], 'tag': [(escape_re, Name.Tag), ('"', Name.Tag, 'tagString'), ('[^(<>\\r\\n")]+', Name.Tag), ('>', Name.Tag, '#pop')], 'tagString': [('[^(^")]+', Name.Tag), (escape_re, Name.Tag), ('[(|)]+', Name.Tag), ('\\^.', Name.Tag), ('"', Name.Tag, '#pop')], 'tuple': [('(\\d+\\.)+', Keyword.Constant), ('\\d+', Keyword.Constant, '#pop')], 'bin2': [('\\s+', Number.Hex), ('([01]\\s*){8}', Number.Hex), ('\\}', Number.Hex, '#pop')], 'commentString1': [('[^(^")]+', Comment), (escape_re, Comment), ('[(|)]+', Comment), ('\\^.', Comment), ('"', Comment, '#pop')], 'commentString2': [('[^(^{})]+', Comment), (escape_re, Comment), ('[(|)]+', Comment), ('\\^.', Comment), ('\\{', Comment, '#push'), ('\\}', Comment, '#pop')], 'commentBlock': [('\\[', Comment, '#push'), ('\\]', Comment, '#pop'), ('"', Comment, 'commentString1'), ('\\{', Comment, 'commentString2'), ('[^(\\[\\]"{)]+', Comment)]}
  --
      + word_callback(lexer, match)
      + analyse_text(text)
  }

  class RedLexer {
      + name = 'Red'
      + aliases = ['red', 'red/system']
      + filenames = ['*.red', '*.reds']
      + mimetypes = ['text/x-red', 'text/x-red-system']
      + url = 'https://www.red-lang.org'
      + version_added = '2.0'
      + flags = re.IGNORECASE | re.MULTILINE
      + escape_re = '(?:\\^\\([0-9a-f]{1,4}\\)*)'
      + tokens = {'root': [('\\s+', Text), ('#"', String.Char, 'char'), ('#\\{[0-9a-f\\s]*\\}', Number.Hex), ('2#\\{', Number.Hex, 'bin2'), ('64#\\{[0-9a-z+/=\\s]*\\}', Number.Hex), ('([0-9a-f]+)(h)((\\s)|(?=[\\[\\]{}"()]))', bygroups(Number.Hex, Name.Variable, Whitespace)), ('"', String, 'string'), ('\\{', String, 'string2'), (';#+.*\\n', Comment.Special), (';\\*+.*\\n', Comment.Preproc), (';.*\\n', Comment), ('%"', Name.Decorator, 'stringFile'), ('%[^(^{")\\s\\[\\]]+', Name.Decorator), ('[+-]?([a-z]{1,3})?\\$\\d+(\\.\\d+)?', Number.Float), ('[+-]?\\d+\\:\\d+(\\:\\d+)?(\\.\\d+)?', String.Other), ('\\d+[\\-/][0-9a-z]+[\\-/]\\d+(/\\d+:\\d+((:\\d+)?([\\.\\d+]?([+-]?\\d+:\\d+)?)?)?)?', String.Other), ('\\d+(\\.\\d+)+\\.\\d+', Keyword.Constant), ('\\d+X\\d+', Keyword.Constant), ("[+-]?\\d+(\\'\\d+)?([.,]\\d*)?E[+-]?\\d+", Number.Float), ("[+-]?\\d+(\\'\\d+)?[.,]\\d*", Number.Float), ("[+-]?\\d+(\\'\\d+)?", Number), ('[\\[\\]()]', Generic.Strong), ('[a-z]+[^(^{"\\s:)]*://[^(^{"\\s)]*', Name.Decorator), ('mailto:[^(^{"@\\s)]+@[^(^{"@\\s)]+', Name.Decorator), ('[^(^{"@\\s)]+@[^(^{"@\\s)]+', Name.Decorator), ('comment\\s"', Comment, 'commentString1'), ('comment\\s\\{', Comment, 'commentString2'), ('comment\\s\\[', Comment, 'commentBlock'), ('comment\\s[^(\\s{"\\[]+', Comment), ('/[^(^{^")\\s/[\\]]*', Name.Attribute), ('([^(^{^")\\s/[\\]]+)(?=[:({"\\s/\\[\\]])', word_callback), ('<[\\w:.-]*>', Name.Tag), ('<[^(<>\\s")]+', Name.Tag, 'tag'), ('([^(^{")\\s]+)', Text)], 'string': [('[^(^")]+', String), (escape_re, String.Escape), ('[(|)]+', String), ('\\^.', String.Escape), ('"', String, '#pop')], 'string2': [('[^(^{})]+', String), (escape_re, String.Escape), ('[(|)]+', String), ('\\^.', String.Escape), ('\\{', String, '#push'), ('\\}', String, '#pop')], 'stringFile': [('[^(^")]+', Name.Decorator), (escape_re, Name.Decorator), ('\\^.', Name.Decorator), ('"', Name.Decorator, '#pop')], 'char': [(escape_re + '"', String.Char, '#pop'), ('\\^."', String.Char, '#pop'), ('."', String.Char, '#pop')], 'tag': [(escape_re, Name.Tag), ('"', Name.Tag, 'tagString'), ('[^(<>\\r\\n")]+', Name.Tag), ('>', Name.Tag, '#pop')], 'tagString': [('[^(^")]+', Name.Tag), (escape_re, Name.Tag), ('[(|)]+', Name.Tag), ('\\^.', Name.Tag), ('"', Name.Tag, '#pop')], 'tuple': [('(\\d+\\.)+', Keyword.Constant), ('\\d+', Keyword.Constant, '#pop')], 'bin2': [('\\s+', Number.Hex), ('([01]\\s*){8}', Number.Hex), ('\\}', Number.Hex, '#pop')], 'commentString1': [('[^(^")]+', Comment), (escape_re, Comment), ('[(|)]+', Comment), ('\\^.', Comment), ('"', Comment, '#pop')], 'commentString2': [('[^(^{})]+', Comment), (escape_re, Comment), ('[(|)]+', Comment), ('\\^.', Comment), ('\\{', Comment, '#push'), ('\\}', Comment, '#pop')], 'commentBlock': [('\\[', Comment, '#push'), ('\\]', Comment, '#pop'), ('"', Comment, 'commentString1'), ('\\{', Comment, 'commentString2'), ('[^(\\[\\]"{)]+', Comment)]}
  --
      + word_callback(lexer, match)
  }

  class RegoLexer {
      + name = 'Rego'
      + url = 'https://www.openpolicyagent.org/docs/latest/policy-language/'
      + filenames = ['*.rego']
      + aliases = ['rego']
      + mimetypes = ['text/x-rego']
      + version_added = '2.19'
      + reserved_words = ('as', 'contains', 'data', 'default', 'else', 'every', 'false', 'if', 'in', 'import', 'package', 'not', 'null', 'some', 'true', 'with')
      + builtins = ('data', 'input')
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), ('#.*?$', Comment.Single), (words(reserved_words, suffix='\\b'), Keyword), (words(builtins, suffix='\\b'), Name.Builtin), ('[a-zA-Z_][a-zA-Z0-9_]*', Name), ('"(\\\\\\\\|\\\\"|[^"])*"', String.Double), ('`[^`]*`', String.Backtick), ('-?\\d+(\\.\\d+)?', Number), ('(==|!=|<=|>=|:=)', Operator), ('[=<>+\\-*/%&|]', Operator), ('[\\[\\]{}(),.:;]', Punctuation)]}
  }

  class ResourceLexer {
      + name = 'ResourceBundle'
      + aliases = ['resourcebundle', 'resource']
      + filenames = []
      + url = 'https://unicode-org.github.io/icu/userguide/locale/resources.html'
      + version_added = '2.0'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': [('//.*?$', Comment), ('"', String, 'string'), ('-?\\d+', Number.Integer), ('[,{}]', Operator), ('([^\\s{{:]+)(\\s*)({}?)'.format('|'.join(_types)), bygroups(Name, Text, Keyword)), ('\\s+', Text), (words(_types), Keyword)], 'string': [('(\\\\x[0-9a-f]{2}|\\\\u[0-9a-f]{4}|\\\\U00[0-9a-f]{6}|\\\\[0-7]{1,3}|\\\\c.|\\\\[abtnvfre\\\'"?\\\\]|\\\\\\{|[^"{\\\\])+', String), ('\\{', String.Escape, 'msgname'), ('"', String, '#pop')], 'msgname': [('([^{},]+)(\\s*)', bygroups(Name, String.Escape), ('#pop', 'message'))], 'message': [('\\{', String.Escape, 'msgname'), ('\\}', String.Escape, '#pop'), ('(,)(\\s*)([a-z]+)(\\s*\\})', bygroups(Operator, String.Escape, Keyword, String.Escape), '#pop'), ('(,)(\\s*)([a-z]+)(\\s*)(,)(\\s*)(offset)(\\s*)(:)(\\s*)(-?\\d+)(\\s*)', bygroups(Operator, String.Escape, Keyword, String.Escape, Operator, String.Escape, Operator.Word, String.Escape, Operator, String.Escape, Number.Integer, String.Escape), 'choice'), ('(,)(\\s*)([a-z]+)(\\s*)(,)(\\s*)', bygroups(Operator, String.Escape, Keyword, String.Escape, Operator, String.Escape), 'choice'), ('\\s+', String.Escape)], 'choice': [('(=|<|>|<=|>=|!=)(-?\\d+)(\\s*\\{)', bygroups(Operator, Number.Integer, String.Escape), 'message'), ('([a-z]+)(\\s*\\{)', bygroups(Keyword.Type, String.Escape), 'str'), ('\\}', String.Escape, ('#pop', '#pop')), ('\\s+', String.Escape)], 'str': [('\\}', String.Escape, '#pop'), ('\\{', String.Escape, 'msgname'), ('[^{}]+', String)]}
  --
      + analyse_text(text)
  }

  class RideLexer {
      + name = 'Ride'
      + aliases = ['ride']
      + filenames = ['*.ride']
      + mimetypes = ['text/x-ride']
      + url = 'https://docs.waves.tech/en/ride'
      + version_added = '2.6'
      + validName = "[a-zA-Z_][a-zA-Z0-9_\\']*"
      + builtinOps = ('||', '|', '>=', '>', '==', '!', '=', '<=', '<', '::', ':+', ':', '!=', '/', '.', '=>', '-', '+', '*', '&&', '%', '++')
      + globalVariablesName = ('NOALG', 'MD5', 'SHA1', 'SHA224', 'SHA256', 'SHA384', 'SHA512', 'SHA3224', 'SHA3256', 'SHA3384', 'SHA3512', 'nil', 'this', 'unit', 'height', 'lastBlock', 'Buy', 'Sell', 'CEILING', 'FLOOR', 'DOWN', 'HALFDOWN', 'HALFEVEN', 'HALFUP', 'UP')
      + typesName = ('Unit', 'Int', 'Boolean', 'ByteVector', 'String', 'Address', 'Alias', 'Transfer', 'AssetPair', 'DataEntry', 'Order', 'Transaction', 'GenesisTransaction', 'PaymentTransaction', 'ReissueTransaction', 'BurnTransaction', 'MassTransferTransaction', 'ExchangeTransaction', 'TransferTransaction', 'SetAssetScriptTransaction', 'InvokeScriptTransaction', 'IssueTransaction', 'LeaseTransaction', 'LeaseCancelTransaction', 'CreateAliasTransaction', 'SetScriptTransaction', 'SponsorFeeTransaction', 'DataTransaction', 'WriteSet', 'AttachedPayment', 'ScriptTransfer', 'TransferSet', 'ScriptResult', 'Invocation', 'Asset', 'BlockInfo', 'Issue', 'Reissue', 'Burn', 'NoAlg', 'Md5', 'Sha1', 'Sha224', 'Sha256', 'Sha384', 'Sha512', 'Sha3224', 'Sha3256', 'Sha3384', 'Sha3512', 'BinaryEntry', 'BooleanEntry', 'IntegerEntry', 'StringEntry', 'List', 'Ceiling', 'Down', 'Floor', 'HalfDown', 'HalfEven', 'HalfUp', 'Up')
      + functionsName = ('fraction', 'size', 'toBytes', 'take', 'drop', 'takeRight', 'dropRight', 'toString', 'isDefined', 'extract', 'throw', 'getElement', 'value', 'cons', 'toUtf8String', 'toInt', 'indexOf', 'lastIndexOf', 'split', 'parseInt', 'parseIntValue', 'keccak256', 'blake2b256', 'sha256', 'sigVerify', 'toBase58String', 'fromBase58String', 'toBase64String', 'fromBase64String', 'transactionById', 'transactionHeightById', 'getInteger', 'getBoolean', 'getBinary', 'getString', 'addressFromPublicKey', 'addressFromString', 'addressFromRecipient', 'assetBalance', 'wavesBalance', 'getIntegerValue', 'getBooleanValue', 'getBinaryValue', 'getStringValue', 'addressFromStringValue', 'assetInfo', 'rsaVerify', 'checkMerkleProof', 'median', 'valueOrElse', 'valueOrErrorMessage', 'contains', 'log', 'pow', 'toBase16String', 'fromBase16String', 'blockInfoByHeight', 'transferTransactionById')
      + reservedWords = words(('match', 'case', 'else', 'func', 'if', 'let', 'then', '@Callable', '@Verifier'), suffix='\\b')
      + tokens = {'root': [('#.*', Comment.Single), ('\\s+', Text), ('"', String, 'doublequote'), ("utf8\\'", String, 'utf8quote'), ("base(58|64|16)\\'", String, 'singlequote'), (reservedWords, Keyword.Reserved), ('\\{-#.*?#-\\}', Keyword.Reserved), ('FOLD<\\d+>', Keyword.Reserved), (words(typesName), Keyword.Type), (words(builtinOps, prefix='\\(', suffix='\\)'), Name.Function), (words(builtinOps), Name.Function), (words(globalVariablesName), Name.Function), (words(functionsName), Name.Function), include('numbers'), (validName, Name.Variable), ('[,()\\[\\]{}]', Punctuation)], 'doublequote': [('\\\\u[0-9a-fA-F]{4}', String.Escape), ('\\\\[nrfvb\\\\"]', String.Escape), ('[^"]', String), ('"', String, '#pop')], 'utf8quote': [('\\\\u[0-9a-fA-F]{4}', String.Escape), ("\\\\[nrfvb\\\\\\']", String.Escape), ("[^\\']", String), ("\\'", String, '#pop')], 'singlequote': [("[^\\']", String), ("\\'", String, '#pop')], 'numbers': [('_?\\d+', Number.Integer)]}
  }

  class RitaLexer {
      + name = 'Rita'
      + url = 'https://github.com/zaibacu/rita-dsl'
      + filenames = ['*.rita']
      + aliases = ['rita']
      + mimetypes = ['text/rita']
      + version_added = '2.11'
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), ('#(.*?)\\n', Comment.Single), ('@(.*?)\\n', Operator), ('"(\\w|\\d|\\s|(\\\\")|[\\\'_\\-./,\\?\\!])+?"', Literal), ('\\\'(\\w|\\d|\\s|(\\\\\\\')|["_\\-./,\\?\\!])+?\\\'', Literal), ('([A-Z_]+)', Keyword), ('([a-z0-9_]+)', Name), ('((->)|[!?+*|=])', Operator), ('[\\(\\),\\{\\}]', Punctuation)]}
  }

  class RNCCompactLexer {
      + name = 'Relax-NG Compact'
      + url = 'http://relaxng.org'
      + aliases = ['rng-compact', 'rnc']
      + filenames = ['*.rnc']
      + version_added = '2.2'
      + tokens = {'root': [('namespace\\b', Keyword.Namespace), ('(?:default|datatypes)\\b', Keyword.Declaration), ('##.*$', Comment.Preproc), ('#.*$', Comment.Single), ('"[^"]*"', String.Double), ('(?:element|attribute|mixed)\\b', Keyword.Declaration, 'variable'), ('(text\\b|xsd:[^ ]+)', Keyword.Type, 'maybe_xsdattributes'), ('[,?&*=|~]|>>', Operator), ('[(){}]', Punctuation), ('.', Text)], 'variable': [('[^{]+', Name.Variable), ('\\{', Punctuation, '#pop')], 'maybe_xsdattributes': [('\\{', Punctuation, 'xsdattributes'), ('\\}', Punctuation, '#pop'), ('.', Text)], 'xsdattributes': [('[^ =}]', Name.Attribute), ('=', Operator), ('"[^"]*"', String.Double), ('\\}', Punctuation, '#pop'), ('.', Text)]}
  }

  class RoboconfGraphLexer {
      + name = 'Roboconf Graph'
      + aliases = ['roboconf-graph']
      + filenames = ['*.graph']
      + url = 'https://roboconf.github.io/en/user-guide/graph-definition.html'
      + version_added = '2.1'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [('\\s+', Text), ('=', Operator), (words(('facet', 'import'), suffix='\\s*\\b', prefix='\\b'), Keyword), (words(('installer', 'extends', 'exports', 'imports', 'facets', 'children'), suffix='\\s*:?', prefix='\\b'), Name), ('#.*\\n', Comment), ('[^#]', Text), ('.*\\n', Text)]}
  }

  class RoboconfInstancesLexer {
      + name = 'Roboconf Instances'
      + aliases = ['roboconf-instances']
      + filenames = ['*.instances']
      + url = 'https://roboconf.github.io'
      + version_added = '2.1'
      + flags = re.IGNORECASE | re.MULTILINE
      + tokens = {'root': [('\\s+', Text), (words(('instance of', 'import'), suffix='\\s*\\b', prefix='\\b'), Keyword), (words(('name', 'count'), suffix='s*:?', prefix='\\b'), Name), ('\\s*[\\w.-]+\\s*:', Name), ('#.*\\n', Comment), ('[^#]', Text), ('.*\\n', Text)]}
  }

  class RobotFrameworkLexer {
      + name = 'RobotFramework'
      + url = 'http://robotframework.org'
      + aliases = ['robotframework']
      + filenames = ['*.robot', '*.resource']
      + mimetypes = ['text/x-robotframework']
      + version_added = '1.6'
  --
      - __init__()
      + get_tokens_unprocessed(text)
  }

  class VariableTokenizer {
      + tokenize(string, token)
  }

  class RowTokenizer {
      - __init__()
      + tokenize(row)
  }

  class RowSplitter {
      + split(row)
  }

  class Tokenizer {
      - __init__()
      + tokenize(value)
  }

  class Comment {
  }

  class Setting {
      - __init__(template_setter = None)
  }

  class ImportSetting {
  }

  class TestCaseSetting {
  }

  class KeywordSetting {
  }

  class Variable {
  }

  class KeywordCall {
      - __init__(support_assign = True)
  }

  class GherkinTokenizer {
      + tokenize(value, token)
  }

  class TemplatedKeywordCall {
  }

  class ForLoop {
      - __init__()
  }

  class UnknownTable {
  }

  class VariableTable {
  }

  class SettingTable {
      - __init__(template_setter, prev_tokenizer = None)
      + end_row()
  }

  class TestCaseTable {
      + set_test_template(template)
      + set_default_template(template)
  }

  class KeywordTable {
  }

  class VariableSplitter {
      - __init__(string, identifiers)
      + get_replaced_base(variables)
  }

  class RubyLexer {
      + name = 'Ruby'
      + url = 'http://www.ruby-lang.org'
      + aliases = ['ruby', 'rb', 'duby']
      + filenames = ['*.rb', '*.rbw', 'Rakefile', '*.rake', '*.gemspec', '*.rbx', '*.duby', 'Gemfile', 'Vagrantfile']
      + mimetypes = ['text/x-ruby', 'application/x-ruby']
      + version_added = ''
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'root': [('\\A#!.+?$', Comment.Hashbang), ('#.*?$', Comment.Single), ('=begin\\s.*?\\n=end.*?$', Comment.Multiline), (words(('BEGIN', 'END', 'alias', 'begin', 'break', 'case', 'defined?', 'do', 'else', 'elsif', 'end', 'ensure', 'for', 'if', 'in', 'next', 'redo', 'rescue', 'raise', 'retry', 'return', 'super', 'then', 'undef', 'unless', 'until', 'when', 'while', 'yield'), suffix='\\b'), Keyword), ('(module)(\\s+)([a-zA-Z_]\\w*(?:::[a-zA-Z_]\\w*)*)', bygroups(Keyword, Whitespace, Name.Namespace)), ('(def)(\\s+)', bygroups(Keyword, Whitespace), 'funcname'), ('def(?=[*%&^`~+-/\\[<>=])', Keyword, 'funcname'), ('(class)(\\s+)', bygroups(Keyword, Whitespace), 'classname'), (words(('initialize', 'new', 'loop', 'include', 'extend', 'raise', 'attr_reader', 'attr_writer', 'attr_accessor', 'attr', 'catch', 'throw', 'private', 'module_function', 'public', 'protected', 'true', 'false', 'nil'), suffix='\\b'), Keyword.Pseudo), ('(not|and|or)\\b', Operator.Word), (words(('autoload', 'block_given', 'const_defined', 'eql', 'equal', 'frozen', 'include', 'instance_of', 'is_a', 'iterator', 'kind_of', 'method_defined', 'nil', 'private_method_defined', 'protected_method_defined', 'public_method_defined', 'respond_to', 'tainted'), suffix='\\?'), Name.Builtin), ('(chomp|chop|exit|gsub|sub)!', Name.Builtin), (words(('Array', 'Float', 'Integer', 'String', '__id__', '__send__', 'abort', 'ancestors', 'at_exit', 'autoload', 'binding', 'callcc', 'caller', 'catch', 'chomp', 'chop', 'class_eval', 'class_variables', 'clone', 'const_defined?', 'const_get', 'const_missing', 'const_set', 'constants', 'display', 'dup', 'eval', 'exec', 'exit', 'extend', 'fail', 'fork', 'format', 'freeze', 'getc', 'gets', 'global_variables', 'gsub', 'hash', 'id', 'included_modules', 'inspect', 'instance_eval', 'instance_method', 'instance_methods', 'instance_variable_get', 'instance_variable_set', 'instance_variables', 'lambda', 'load', 'local_variables', 'loop', 'method', 'method_missing', 'methods', 'module_eval', 'name', 'object_id', 'open', 'p', 'print', 'printf', 'private_class_method', 'private_instance_methods', 'private_methods', 'proc', 'protected_instance_methods', 'protected_methods', 'public_class_method', 'public_instance_methods', 'public_methods', 'putc', 'puts', 'raise', 'rand', 'readline', 'readlines', 'require', 'scan', 'select', 'self', 'send', 'set_trace_func', 'singleton_methods', 'sleep', 'split', 'sprintf', 'srand', 'sub', 'syscall', 'system', 'taint', 'test', 'throw', 'to_a', 'to_s', 'trace_var', 'trap', 'untaint', 'untrace_var', 'warn'), prefix='(?<!\\.)', suffix='\\b'), Name.Builtin), ('__(FILE|LINE)__\\b', Name.Builtin.Pseudo), ('(?<!\\w)(<<[-~]?)(["`\\\']?)([a-zA-Z_]\\w*)(\\2)(.*?\\n)', heredoc_callback), ('(<<[-~]?)("|\\\')()(\\2)(.*?\\n)', heredoc_callback), ('__END__', Comment.Preproc, 'end-part'), ('(?:^|(?<=[=<>~!:])|(?<=(?:\\s|;)when\\s)|(?<=(?:\\s|;)or\\s)|(?<=(?:\\s|;)and\\s)|(?<=\\.index\\s)|(?<=\\.scan\\s)|(?<=\\.sub\\s)|(?<=\\.sub!\\s)|(?<=\\.gsub\\s)|(?<=\\.gsub!\\s)|(?<=\\.match\\s)|(?<=(?:\\s|;)if\\s)|(?<=(?:\\s|;)elsif\\s)|(?<=^when\\s)|(?<=^index\\s)|(?<=^scan\\s)|(?<=^sub\\s)|(?<=^gsub\\s)|(?<=^sub!\\s)|(?<=^gsub!\\s)|(?<=^match\\s)|(?<=^if\\s)|(?<=^elsif\\s))(\\s*)(/)', bygroups(Text, String.Regex), 'multiline-regex'), ('(?<=\\(|,|\\[)/', String.Regex, 'multiline-regex'), ('(\\s+)(/)(?![\\s=])', bygroups(Whitespace, String.Regex), 'multiline-regex'), ('(0_?[0-7]+(?:_[0-7]+)*)(\\s*)([/?])?', bygroups(Number.Oct, Whitespace, Operator)), ('(0x[0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*)(\\s*)([/?])?', bygroups(Number.Hex, Whitespace, Operator)), ('(0b[01]+(?:_[01]+)*)(\\s*)([/?])?', bygroups(Number.Bin, Whitespace, Operator)), ('([\\d]+(?:_\\d+)*)(\\s*)([/?])?', bygroups(Number.Integer, Whitespace, Operator)), ('@@[a-zA-Z_]\\w*', Name.Variable.Class), ('@[a-zA-Z_]\\w*', Name.Variable.Instance), ('\\$\\w+', Name.Variable.Global), ('\\$[!@&`\\\'+~=/\\\\,;.<>_*$?:"^-]', Name.Variable.Global), ('\\$-[0adFiIlpvw]', Name.Variable.Global), ('::', Operator), include('strings'), ('\\?(\\\\[MC]-)*(\\\\([\\\\abefnrstv#"\\\']|x[a-fA-F0-9]{1,2}|[0-7]{1,3})|\\S)(?!\\w)', String.Char), ('[A-Z]\\w+', Name.Constant), (words(RUBY_OPERATORS, prefix='(\\.|::)'), bygroups(Operator, Name.Operator)), ('(\\.|::)([a-zA-Z_]\\w*[!?]?|[*%&^`~+\\-/\\[<>=])', bygroups(Operator, Name)), ('[a-zA-Z_]\\w*[!?]?', Name), ('(\\[|\\]|\\*\\*|<<?|>>?|>=|<=|<=>|=~|={3}|!~|&&?|\\|\\||\\.{1,3})', Operator), ('[-+/*%=<>&!^|~]=?', Operator), ('[(){};,/?:\\\\]', Punctuation), ('\\s+', Whitespace)], 'funcname': [('\\(', Punctuation, 'defexpr'), ('(?:([a-zA-Z_]\\w*)(\\.))?([a-zA-Z\\u0080-\\uffff][a-zA-Z0-9_\\u0080-\\uffff]*[!?=]?|!=|!~|=~|\\*\\*?|[-+!~]@?|[/%&|^]|<=>|<[<=]?|>[>=]?|===?|\\[\\]=?|`)', bygroups(Name.Class, Operator, Name.Function), '#pop'), default('#pop')], 'classname': [('\\(', Punctuation, 'defexpr'), ('<<', Operator, '#pop'), ('[A-Z_]\\w*', Name.Class, '#pop'), default('#pop')], 'defexpr': [('(\\))(\\.|::)?', bygroups(Punctuation, Operator), '#pop'), ('\\(', Operator, '#push'), include('root')], 'in-intp': [('\\{', String.Interpol, '#push'), ('\\}', String.Interpol, '#pop'), include('root')], 'string-intp': [('#\\{', String.Interpol, 'in-intp'), ('#@@?[a-zA-Z_]\\w*', String.Interpol), ('#\\$[a-zA-Z_]\\w*', String.Interpol)], 'string-intp-escaped': [include('string-intp'), ('\\\\([\\\\abefnrstv#"\\\']|x[a-fA-F0-9]{1,2}|[0-7]{1,3})', String.Escape)], 'interpolated-regex': [include('string-intp'), ('[\\\\#]', String.Regex), ('[^\\\\#]+', String.Regex)], 'interpolated-string': [include('string-intp'), ('[\\\\#]', String.Other), ('[^\\\\#]+', String.Other)], 'multiline-regex': [include('string-intp'), ('\\\\\\\\', String.Regex), ('\\\\/', String.Regex), ('[\\\\#]', String.Regex), ('[^\\\\/#]+', String.Regex), ('/[mixounse]*', String.Regex, '#pop')], 'end-part': [('.+', Comment.Preproc, '#pop')]}
  --
      + heredoc_callback(match, ctx)
      + gen_rubystrings_rules()
      + analyse_text(text)
  }

  class RubyConsoleLexer {
      + name = 'Ruby irb session'
      + aliases = ['rbcon', 'irb']
      + mimetypes = ['text/x-ruby-shellsession']
      + url = 'https://www.ruby-lang.org'
      + version_added = ''
  --
      + get_tokens_unprocessed(text)
  }

  class FancyLexer {
      + name = 'Fancy'
      + url = 'https://github.com/bakkdoor/fancy'
      + filenames = ['*.fy', '*.fancypack']
      + aliases = ['fancy', 'fy']
      + mimetypes = ['text/x-fancysrc']
      + version_added = '1.5'
      + tokens = {'balanced-regex': [('/(\\\\\\\\|\\\\[^\\\\]|[^/\\\\])*/[egimosx]*', String.Regex, '#pop'), ('!(\\\\\\\\|\\\\[^\\\\]|[^!\\\\])*![egimosx]*', String.Regex, '#pop'), ('\\\\(\\\\\\\\|[^\\\\])*\\\\[egimosx]*', String.Regex, '#pop'), ('\\{(\\\\\\\\|\\\\[^\\\\]|[^}\\\\])*\\}[egimosx]*', String.Regex, '#pop'), ('<(\\\\\\\\|\\\\[^\\\\]|[^>\\\\])*>[egimosx]*', String.Regex, '#pop'), ('\\[(\\\\\\\\|\\\\[^\\\\]|[^\\]\\\\])*\\][egimosx]*', String.Regex, '#pop'), ('\\((\\\\\\\\|\\\\[^\\\\]|[^)\\\\])*\\)[egimosx]*', String.Regex, '#pop'), ('@(\\\\\\\\|\\\\[^\\\\]|[^@\\\\])*@[egimosx]*', String.Regex, '#pop'), ('%(\\\\\\\\|\\\\[^\\\\]|[^%\\\\])*%[egimosx]*', String.Regex, '#pop'), ('\\$(\\\\\\\\|\\\\[^\\\\]|[^$\\\\])*\\$[egimosx]*', String.Regex, '#pop')], 'root': [('\\s+', Whitespace), ('s\\{(\\\\\\\\|\\\\[^\\\\]|[^}\\\\])*\\}\\s*', String.Regex, 'balanced-regex'), ('s<(\\\\\\\\|\\\\[^\\\\]|[^>\\\\])*>\\s*', String.Regex, 'balanced-regex'), ('s\\[(\\\\\\\\|\\\\[^\\\\]|[^\\]\\\\])*\\]\\s*', String.Regex, 'balanced-regex'), ('s\\((\\\\\\\\|\\\\[^\\\\]|[^)\\\\])*\\)\\s*', String.Regex, 'balanced-regex'), ('m?/(\\\\\\\\|\\\\[^\\\\]|[^///\\n])*/[gcimosx]*', String.Regex), ('m(?=[/!\\\\{<\\[(@%$])', String.Regex, 'balanced-regex'), ('#(.*?)\\n', Comment.Single), ("\\'([^\\'\\s\\[\\](){}]+|\\[\\])", String.Symbol), ('"""(\\\\\\\\|\\\\[^\\\\]|[^\\\\])*?"""', String), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('(def|class|try|catch|finally|retry|return|return_local|match|case|->|=>)\\b', Keyword), ('(self|super|nil|false|true)\\b', Name.Constant), ('[(){};,/?|:\\\\]', Punctuation), (words(('Object', 'Array', 'Hash', 'Directory', 'File', 'Class', 'String', 'Number', 'Enumerable', 'FancyEnumerable', 'Block', 'TrueClass', 'NilClass', 'FalseClass', 'Tuple', 'Symbol', 'Stack', 'Set', 'FancySpec', 'Method', 'Package', 'Range'), suffix='\\b'), Name.Builtin), ('[a-zA-Z](\\w|[-+?!=*/^><%])*:', Name.Function), ('[-+*/~,<>=&!?%^\\[\\].$]+', Operator), ('[A-Z]\\w*', Name.Constant), ('@[a-zA-Z_]\\w*', Name.Variable.Instance), ('@@[a-zA-Z_]\\w*', Name.Variable.Class), ('@@?', Operator), ('[a-zA-Z_]\\w*', Name), ('(0[oO]?[0-7]+(?:_[0-7]+)*)(\\s*)([/?])?', bygroups(Number.Oct, Whitespace, Operator)), ('(0[xX][0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*)(\\s*)([/?])?', bygroups(Number.Hex, Whitespace, Operator)), ('(0[bB][01]+(?:_[01]+)*)(\\s*)([/?])?', bygroups(Number.Bin, Whitespace, Operator)), ('([\\d]+(?:_\\d+)*)(\\s*)([/?])?', bygroups(Number.Integer, Whitespace, Operator)), ('\\d+([eE][+-]?[0-9]+)|\\d+\\.\\d+([eE][+-]?[0-9]+)?', Number.Float), ('\\d+', Number.Integer)]}
  }

  class RustLexer {
      + name = 'Rust'
      + url = 'https://www.rust-lang.org/'
      + filenames = ['*.rs', '*.rs.in']
      + aliases = ['rust', 'rs']
      + mimetypes = ['text/rust', 'text/x-rust']
      + version_added = '1.6'
      + keyword_types = (words(('u8', 'u16', 'u32', 'u64', 'u128', 'i8', 'i16', 'i32', 'i64', 'i128', 'usize', 'isize', 'f32', 'f64', 'char', 'str', 'bool'), suffix='\\b'), Keyword.Type)
      + builtin_funcs_types = (words(('Copy', 'Send', 'Sized', 'Sync', 'Unpin', 'Drop', 'Fn', 'FnMut', 'FnOnce', 'drop', 'Box', 'ToOwned', 'Clone', 'PartialEq', 'PartialOrd', 'Eq', 'Ord', 'AsRef', 'AsMut', 'Into', 'From', 'Default', 'Iterator', 'Extend', 'IntoIterator', 'DoubleEndedIterator', 'ExactSizeIterator', 'Option', 'Some', 'None', 'Result', 'Ok', 'Err', 'String', 'ToString', 'Vec'), suffix='\\b'), Name.Builtin)
      + builtin_macros = (words(('asm', 'assert', 'assert_eq', 'assert_ne', 'cfg', 'column', 'compile_error', 'concat', 'concat_idents', 'dbg', 'debug_assert', 'debug_assert_eq', 'debug_assert_ne', 'env', 'eprint', 'eprintln', 'file', 'format', 'format_args', 'format_args_nl', 'global_asm', 'include', 'include_bytes', 'include_str', 'is_aarch64_feature_detected', 'is_arm_feature_detected', 'is_mips64_feature_detected', 'is_mips_feature_detected', 'is_powerpc64_feature_detected', 'is_powerpc_feature_detected', 'is_x86_feature_detected', 'line', 'llvm_asm', 'log_syntax', 'macro_rules', 'matches', 'module_path', 'option_env', 'panic', 'print', 'println', 'stringify', 'thread_local', 'todo', 'trace_macros', 'unimplemented', 'unreachable', 'vec', 'write', 'writeln'), suffix='!'), Name.Function.Magic)
      + tokens = {'root': [('#![^[\\r\\n].*$', Comment.Preproc), default('base')], 'base': [('\\n', Whitespace), ('\\s+', Whitespace), ('//!.*?\\n', String.Doc), ('///(\\n|[^/].*?\\n)', String.Doc), ('//(.*?)\\n', Comment.Single), ('/\\*\\*(\\n|[^/*])', String.Doc, 'doccomment'), ('/\\*!', String.Doc, 'doccomment'), ('/\\*', Comment.Multiline, 'comment'), ('\\$([a-zA-Z_]\\w*|\\(,?|\\),?|,?)', Comment.Preproc), (words(('as', 'async', 'await', 'box', 'const', 'crate', 'dyn', 'else', 'extern', 'for', 'if', 'impl', 'in', 'loop', 'match', 'move', 'mut', 'pub', 'ref', 'return', 'static', 'super', 'trait', 'unsafe', 'use', 'where', 'while'), suffix='\\b'), Keyword), (words(('abstract', 'become', 'do', 'final', 'macro', 'override', 'priv', 'typeof', 'try', 'unsized', 'virtual', 'yield'), suffix='\\b'), Keyword.Reserved), ('(true|false)\\b', Keyword.Constant), ('self\\b', Name.Builtin.Pseudo), ('mod\\b', Keyword, 'modname'), ('let\\b', Keyword.Declaration), ('fn\\b', Keyword, 'funcname'), ('(struct|enum|type|union)\\b', Keyword, 'typename'), ('(default)(\\s+)(type|fn)\\b', bygroups(Keyword, Whitespace, Keyword)), keyword_types, ('[sS]elf\\b', Name.Builtin.Pseudo), builtin_funcs_types, builtin_macros, ('::\\b', Punctuation), ('(?::|->)', Punctuation, 'typename'), ("(break|continue)(\\b\\s*)(\\'[A-Za-z_]\\w*)?", bygroups(Keyword, Text.Whitespace, Name.Label)), ('\'(\\\\[\'"\\\\nrt]|\\\\x[0-7][0-9a-fA-F]|\\\\0|\\\\u\\{[0-9a-fA-F]{1,6}\\}|.)\'', String.Char), ('b\'(\\\\[\'"\\\\nrt]|\\\\x[0-9a-fA-F]{2}|\\\\0|\\\\u\\{[0-9a-fA-F]{1,6}\\}|.)\'', String.Char), ('0b[01_]+', Number.Bin, 'number_lit'), ('0o[0-7_]+', Number.Oct, 'number_lit'), ('0[xX][0-9a-fA-F_]+', Number.Hex, 'number_lit'), ('[0-9][0-9_]*(\\.[0-9_]+[eE][+\\-]?[0-9_]+|\\.[0-9_]*(?!\\.)|[eE][+\\-]?[0-9_]+)', Number.Float, 'number_lit'), ('[0-9][0-9_]*', Number.Integer, 'number_lit'), ('b"', String, 'bytestring'), ('"', String, 'string'), ('(?s)b?r(#*)".*?"\\1', String), ("'", Operator, 'lifetime'), ('\\.\\.=?', Operator), ('[{}()\\[\\],.;]', Punctuation), ('[+\\-*/%&|<>^!~@=:?]', Operator), ('[a-zA-Z_]\\w*', Name), ('r#[a-zA-Z_]\\w*', Name), ('#!?\\[', Comment.Preproc, 'attribute['), ('#', Punctuation)], 'comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'doccomment': [('[^*/]+', String.Doc), ('/\\*', String.Doc, '#push'), ('\\*/', String.Doc, '#pop'), ('[*/]', String.Doc)], 'modname': [('\\s+', Whitespace), ('[a-zA-Z_]\\w*', Name.Namespace, '#pop'), default('#pop')], 'funcname': [('\\s+', Whitespace), ('[a-zA-Z_]\\w*', Name.Function, '#pop'), default('#pop')], 'typename': [('\\s+', Whitespace), ('&', Keyword.Pseudo), ("'", Operator, 'lifetime'), builtin_funcs_types, keyword_types, ('[a-zA-Z_]\\w*', Name.Class, '#pop'), default('#pop')], 'lifetime': [('(static|_)', Name.Builtin), ('[a-zA-Z_]+\\w*', Name.Attribute), default('#pop')], 'number_lit': [('[ui](8|16|32|64|size)', Keyword, '#pop'), ('f(32|64)', Keyword, '#pop'), default('#pop')], 'string': [('"', String, '#pop'), ('\\\\[\'"\\\\nrt]|\\\\x[0-7][0-9a-fA-F]|\\\\0|\\\\u\\{[0-9a-fA-F]{1,6}\\}', String.Escape), ('[^\\\\"]+', String), ('\\\\', String)], 'bytestring': [('\\\\x[89a-fA-F][0-9a-fA-F]', String.Escape), include('string')], 'attribute_common': [('"', String, 'string'), ('\\[', Comment.Preproc, 'attribute[')], 'attribute[': [include('attribute_common'), ('\\]', Comment.Preproc, '#pop'), ('[^"\\]\\[]+', Comment.Preproc)]}
  }

  class SASLexer {
      + name = 'SAS'
      + aliases = ['sas']
      + filenames = ['*.SAS', '*.sas']
      + mimetypes = ['text/x-sas', 'text/sas', 'application/x-sas']
      + url = 'https://en.wikipedia.org/wiki/SAS_(software)'
      + version_added = '2.2'
      + flags = re.IGNORECASE | re.MULTILINE
      + builtins_macros = ('bquote', 'nrbquote', 'cmpres', 'qcmpres', 'compstor', 'datatyp', 'display', 'do', 'else', 'end', 'eval', 'global', 'goto', 'if', 'index', 'input', 'keydef', 'label', 'left', 'length', 'let', 'local', 'lowcase', 'macro', 'mend', 'nrquote', 'nrstr', 'put', 'qleft', 'qlowcase', 'qscan', 'qsubstr', 'qsysfunc', 'qtrim', 'quote', 'qupcase', 'scan', 'str', 'substr', 'superq', 'syscall', 'sysevalf', 'sysexec', 'sysfunc', 'sysget', 'syslput', 'sysprod', 'sysrc', 'sysrput', 'then', 'to', 'trim', 'unquote', 'until', 'upcase', 'verify', 'while', 'window')
      + builtins_conditionals = ('do', 'if', 'then', 'else', 'end', 'until', 'while')
      + builtins_statements = ('abort', 'array', 'attrib', 'by', 'call', 'cards', 'cards4', 'catname', 'continue', 'datalines', 'datalines4', 'delete', 'delim', 'delimiter', 'display', 'dm', 'drop', 'endsas', 'error', 'file', 'filename', 'footnote', 'format', 'goto', 'in', 'infile', 'informat', 'input', 'keep', 'label', 'leave', 'length', 'libname', 'link', 'list', 'lostcard', 'merge', 'missing', 'modify', 'options', 'output', 'out', 'page', 'put', 'redirect', 'remove', 'rename', 'replace', 'retain', 'return', 'select', 'set', 'skip', 'startsas', 'stop', 'title', 'update', 'waitsas', 'where', 'window', 'x', 'systask')
      + builtins_sql = ('add', 'and', 'alter', 'as', 'cascade', 'check', 'create', 'delete', 'describe', 'distinct', 'drop', 'foreign', 'from', 'group', 'having', 'index', 'insert', 'into', 'in', 'key', 'like', 'message', 'modify', 'msgtype', 'not', 'null', 'on', 'or', 'order', 'primary', 'references', 'reset', 'restrict', 'select', 'set', 'table', 'unique', 'update', 'validate', 'view', 'where')
      + builtins_functions = ('abs', 'addr', 'airy', 'arcos', 'arsin', 'atan', 'attrc', 'attrn', 'band', 'betainv', 'blshift', 'bnot', 'bor', 'brshift', 'bxor', 'byte', 'cdf', 'ceil', 'cexist', 'cinv', 'close', 'cnonct', 'collate', 'compbl', 'compound', 'compress', 'cos', 'cosh', 'css', 'curobs', 'cv', 'daccdb', 'daccdbsl', 'daccsl', 'daccsyd', 'dacctab', 'dairy', 'date', 'datejul', 'datepart', 'datetime', 'day', 'dclose', 'depdb', 'depdbsl', 'depsl', 'depsyd', 'deptab', 'dequote', 'dhms', 'dif', 'digamma', 'dim', 'dinfo', 'dnum', 'dopen', 'doptname', 'doptnum', 'dread', 'dropnote', 'dsname', 'erf', 'erfc', 'exist', 'exp', 'fappend', 'fclose', 'fcol', 'fdelete', 'fetch', 'fetchobs', 'fexist', 'fget', 'fileexist', 'filename', 'fileref', 'finfo', 'finv', 'fipname', 'fipnamel', 'fipstate', 'floor', 'fnonct', 'fnote', 'fopen', 'foptname', 'foptnum', 'fpoint', 'fpos', 'fput', 'fread', 'frewind', 'frlen', 'fsep', 'fuzz', 'fwrite', 'gaminv', 'gamma', 'getoption', 'getvarc', 'getvarn', 'hbound', 'hms', 'hosthelp', 'hour', 'ibessel', 'index', 'indexc', 'indexw', 'input', 'inputc', 'inputn', 'int', 'intck', 'intnx', 'intrr', 'irr', 'jbessel', 'juldate', 'kurtosis', 'lag', 'lbound', 'left', 'length', 'lgamma', 'libname', 'libref', 'log', 'log10', 'log2', 'logpdf', 'logpmf', 'logsdf', 'lowcase', 'max', 'mdy', 'mean', 'min', 'minute', 'mod', 'month', 'mopen', 'mort', 'n', 'netpv', 'nmiss', 'normal', 'note', 'npv', 'open', 'ordinal', 'pathname', 'pdf', 'peek', 'peekc', 'pmf', 'point', 'poisson', 'poke', 'probbeta', 'probbnml', 'probchi', 'probf', 'probgam', 'probhypr', 'probit', 'probnegb', 'probnorm', 'probt', 'put', 'putc', 'putn', 'qtr', 'quote', 'ranbin', 'rancau', 'ranexp', 'rangam', 'range', 'rank', 'rannor', 'ranpoi', 'rantbl', 'rantri', 'ranuni', 'repeat', 'resolve', 'reverse', 'rewind', 'right', 'round', 'saving', 'scan', 'sdf', 'second', 'sign', 'sin', 'sinh', 'skewness', 'soundex', 'spedis', 'sqrt', 'std', 'stderr', 'stfips', 'stname', 'stnamel', 'substr', 'sum', 'symget', 'sysget', 'sysmsg', 'sysprod', 'sysrc', 'system', 'tan', 'tanh', 'time', 'timepart', 'tinv', 'tnonct', 'today', 'translate', 'tranwrd', 'trigamma', 'trim', 'trimn', 'trunc', 'uniform', 'upcase', 'uss', 'var', 'varfmt', 'varinfmt', 'varlabel', 'varlen', 'varname', 'varnum', 'varray', 'varrayx', 'vartype', 'verify', 'vformat', 'vformatd', 'vformatdx', 'vformatn', 'vformatnx', 'vformatw', 'vformatwx', 'vformatx', 'vinarray', 'vinarrayx', 'vinformat', 'vinformatd', 'vinformatdx', 'vinformatn', 'vinformatnx', 'vinformatw', 'vinformatwx', 'vinformatx', 'vlabel', 'vlabelx', 'vlength', 'vlengthx', 'vname', 'vnamex', 'vtype', 'vtypex', 'weekday', 'year', 'yyq', 'zipfips', 'zipname', 'zipnamel', 'zipstate')
      + tokens = {'root': [include('comments'), include('proc-data'), include('cards-datalines'), include('logs'), include('general'), ('.', Text)], 'comments': [('^\\s*\\*.*?;', Comment), ('/\\*.*?\\*/', Comment), ('^\\s*\\*(.|\\n)*?;', Comment.Multiline), ('/[*](.|\\n)*?[*]/', Comment.Multiline)], 'proc-data': [('(^|;)\\s*(proc \\w+|data|run|quit)[\\s;]', Keyword.Reserved)], 'cards-datalines': [('^\\s*(datalines|cards)\\s*;\\s*$', Keyword, 'data')], 'data': [('(.|\\n)*^\\s*;\\s*$', Other, '#pop')], 'logs': [('\\n?^\\s*%?put ', Keyword, 'log-messages')], 'log-messages': [('NOTE(:|-).*', Generic, '#pop'), ('WARNING(:|-).*', Generic.Emph, '#pop'), ('ERROR(:|-).*', Generic.Error, '#pop'), include('general')], 'general': [include('keywords'), include('vars-strings'), include('special'), include('numbers')], 'keywords': [(words(builtins_statements, prefix='\\b', suffix='\\b'), Keyword), (words(builtins_sql, prefix='\\b', suffix='\\b'), Keyword), (words(builtins_conditionals, prefix='\\b', suffix='\\b'), Keyword), (words(builtins_macros, prefix='%', suffix='\\b'), Name.Builtin), (words(builtins_functions, prefix='\\b', suffix='\\('), Name.Builtin)], 'vars-strings': [('&[a-z_]\\w{0,31}\\.?', Name.Variable), ('%[a-z_]\\w{0,31}', Name.Function), ("\\'", String, 'string_squote'), ('"', String, 'string_dquote')], 'string_squote': [("'", String, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), ("[^$\\'\\\\]+", String), ("[$\\'\\\\]", String)], 'string_dquote': [('"', String, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\n', String.Escape), ('&', Name.Variable, 'validvar'), ('[^$&"\\\\]+', String), ('[$"\\\\]', String)], 'validvar': [('[a-z_]\\w{0,31}\\.?', Name.Variable, '#pop')], 'numbers': [('\\b[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)(E[+-]?[0-9]+)?i?\\b', Number)], 'special': [('(null|missing|_all_|_automatic_|_character_|_n_|_infile_|_name_|_null_|_numeric_|_user_|_webout_)', Keyword.Constant)]}
  }

  class SaviLexer {
      + name = 'Savi'
      + url = 'https://github.com/savi-lang/savi'
      + aliases = ['savi']
      + filenames = ['*.savi']
      + version_added = ''
      + tokens = {'root': [('//.*?$', Comment.Single), ('::.*?$', Comment.Single), ("(\\')(\\w+)(?=[^\\'])", bygroups(Operator, Name)), ('\\w?"', String.Double, 'string.double'), ("'", String.Char, 'string.char'), ('(_?[A-Z]\\w*)', Name.Class), ('(\\.)(\\s*)(_?[A-Z]\\w*)', bygroups(Punctuation, Whitespace, Name.Class)), ('^([ \\t]*)(:\\w+)', bygroups(Whitespace, Name.Tag), 'decl'), ('((\\w+|\\+|\\-|\\*)\\!)', Generic.Deleted), ('\\b\\d([\\d_]*(\\.[\\d_]+)?)\\b', Number), ('\\b0x([0-9a-fA-F_]+)\\b', Number.Hex), ('\\b0b([01_]+)\\b', Number.Bin), ('\\w+(?=\\()', Name.Function), ('(\\.)(\\s*)(\\w+)', bygroups(Punctuation, Whitespace, Name.Function)), ('(@)(\\w+)', bygroups(Punctuation, Name.Function)), ('\\(', Punctuation, 'root'), ('\\)', Punctuation, '#pop'), ('\\{', Punctuation, 'root'), ('\\}', Punctuation, '#pop'), ('\\[', Punctuation, 'root'), ('(\\])(\\!)', bygroups(Punctuation, Generic.Deleted), '#pop'), ('\\]', Punctuation, '#pop'), ('[,;:\\.@]', Punctuation), ('(\\|\\>)', Operator), ('(\\&\\&|\\|\\||\\?\\?|\\&\\?|\\|\\?|\\.\\?)', Operator), ('(\\<\\=\\>|\\=\\~|\\=\\=|\\<\\=|\\>\\=|\\<|\\>)', Operator), ('(\\+|\\-|\\/|\\*|\\%)', Operator), ('(\\=)', Operator), ('(\\!|\\<\\<|\\<|\\&|\\|)', Operator), ('\\b\\w+\\b', Name), ('[ \\t\\r]+\\n*|\\n+', Whitespace)], 'decl': [('\\b[a-z_]\\w*\\b(?!\\!)', Keyword.Declaration), (':', Punctuation, '#pop'), ('\\n', Whitespace, '#pop'), include('root')], 'string.double': [('\\\\\\(', String.Interpol, 'string.interpolation'), ('\\\\u[0-9a-fA-F]{4}', String.Escape), ('\\\\x[0-9a-fA-F]{2}', String.Escape), ("\\\\[bfnrt\\\\\\']", String.Escape), ('\\\\"', String.Escape), ('"', String.Double, '#pop'), ('[^\\\\"]+', String.Double), ('.', Error)], 'string.char': [('\\\\u[0-9a-fA-F]{4}', String.Escape), ('\\\\x[0-9a-fA-F]{2}', String.Escape), ("\\\\[bfnrt\\\\\\']", String.Escape), ("\\\\'", String.Escape), ("'", String.Char, '#pop'), ("[^\\\\']+", String.Char), ('.', Error)], 'string.interpolation': [('\\)', String.Interpol, '#pop'), include('root')]}
  }

  class ScdocLexer {
      + name = 'scdoc'
      + url = 'https://git.sr.ht/~sircmpwn/scdoc'
      + aliases = ['scdoc', 'scd']
      + filenames = ['*.scd', '*.scdoc']
      + version_added = '2.5'
      + flags = re.MULTILINE
      + tokens = {'root': [('^(;.+\\n)', bygroups(Comment)), ('^(#)([^#].+\\n)', bygroups(Generic.Heading, Text)), ('^(#{2})(.+\\n)', bygroups(Generic.Subheading, Text)), ('^(\\s*)([*-])(\\s)(.+\\n)', bygroups(Text, Keyword, Text, using(this, state='inline'))), ('^(\\s*)(\\.+\\.)( .+\\n)', bygroups(Text, Keyword, using(this, state='inline'))), ('^(\\s*>\\s)(.+\\n)', bygroups(Keyword, Generic.Emph)), ('^(```\\n)([\\w\\W]*?)(^```$)', bygroups(String, Text, String)), include('inline')], 'inline': [('\\\\.', Text), ('(\\s)(_[^_]+_)(\\W|\\n)', bygroups(Text, Generic.Emph, Text)), ('(\\s)(\\*[^*]+\\*)(\\W|\\n)', bygroups(Text, Generic.Strong, Text)), ('`[^`]+`', String.Backtick), ('[^\\\\\\s]+', Text), ('.', Text)]}
  --
      + analyse_text(text)
  }

  class LuaLexer {
      + name = 'Lua'
      + url = 'https://www.lua.org/'
      + aliases = ['lua']
      + filenames = ['*.lua', '*.wlua']
      + mimetypes = ['text/x-lua', 'application/x-lua']
      + version_added = ''
      + tokens = {'root': [('#!.*', Comment.Preproc), default('base')], 'ws': [(_comment_multiline, Comment.Multiline), (_comment_single, Comment.Single), (_space, Whitespace)], 'base': [include('ws'), ('(?i)0x[\\da-f]*(\\.[\\da-f]*)?(p[+-]?\\d+)?', Number.Hex), ('(?i)(\\d*\\.\\d+|\\d+\\.\\d*)(e[+-]?\\d+)?', Number.Float), ('(?i)\\d+e[+-]?\\d+', Number.Float), ('\\d+', Number.Integer), ('(?s)\\[(=*)\\[.*?\\]\\1\\]', String), ('::', Punctuation, 'label'), ('\\.{3}', Punctuation), ('[=<>|~&+\\-*/%#^]+|\\.\\.', Operator), ('[\\[\\]{}().,:;]+', Punctuation), ('(and|or|not)\\b', Operator.Word), ('(break|do|else|elseif|end|for|if|in|repeat|return|then|until|while)\\b', Keyword.Reserved), ('goto\\b', Keyword.Reserved, 'goto'), ('(local)\\b', Keyword.Declaration), ('(true|false|nil)\\b', Keyword.Constant), ('(function)\\b', Keyword.Reserved, 'funcname'), (words(all_lua_builtins(), suffix='\\b'), Name.Builtin), (f'[A-Za-z_]\\w*(?={_s}*[.:])', Name.Variable, 'varname'), (f'[A-Za-z_]\\w*(?={_s}*\\()', Name.Function), ('[A-Za-z_]\\w*', Name.Variable), ("'", String.Single, combined('stringescape', 'sqs')), ('"', String.Double, combined('stringescape', 'dqs'))], 'varname': [include('ws'), ('\\.\\.', Operator, '#pop'), ('[.:]', Punctuation), (f'{_name}(?={_s}*[.:])', Name.Property), (f'{_name}(?={_s}*\\()', Name.Function, '#pop'), (_name, Name.Property, '#pop')], 'funcname': [include('ws'), ('[.:]', Punctuation), (f'{_name}(?={_s}*[.:])', Name.Class), (_name, Name.Function, '#pop'), ('\\(', Punctuation, '#pop')], 'goto': [include('ws'), (_name, Name.Label, '#pop')], 'label': [include('ws'), ('::', Punctuation, '#pop'), (_name, Name.Label)], 'stringescape': [('\\\\([abfnrtv\\\\"\\\']|[\\r\\n]{1,2}|z\\s*|x[0-9a-fA-F]{2}|\\d{1,3}|u\\{[0-9a-fA-F]+\\})', String.Escape)], 'sqs': [("'", String.Single, '#pop'), ("[^\\\\']+", String.Single)], 'dqs': [('"', String.Double, '#pop'), ('[^\\\\"]+', String.Double)]}
  --
      - __init__()
      + get_tokens_unprocessed(text)
  }

  class LuauLexer {
      + name = 'Luau'
      + url = 'https://luau-lang.org/'
      + aliases = ['luau']
      + filenames = ['*.luau']
      + version_added = '2.18'
      + tokens = {'root': [('#!.*', Comment.Hashbang, 'base'), default('base')], 'ws': [(_comment_multiline, Comment.Multiline), (_comment_single, Comment.Single), ('\\s+', Whitespace)], 'base': [include('ws'), *_luau_make_expression_special(False), ('\\.\\.\\.', Punctuation), (f'type\\b(?={_s}+[a-zA-Z_])', Keyword.Reserved, 'type_declaration'), (f'export\\b(?={_s}+[a-zA-Z_])', Keyword.Reserved), ('(?:\\.\\.|//|[+\\-*\\/%^<>=])=?', Operator, 'expression'), ('~=', Operator, 'expression'), (words(('and', 'or', 'not'), suffix='\\b'), Operator.Word, 'expression'), (words(('elseif', 'for', 'if', 'in', 'repeat', 'return', 'until', 'while'), suffix='\\b'), Keyword.Reserved, 'expression'), ('local\\b', Keyword.Declaration, 'expression'), ('function\\b', Keyword.Reserved, ('expression', 'func_name')), ('[\\])};]+', Punctuation), include('expression_static'), *_luau_make_expression(False, _s), ('[\\[.,]', Punctuation, 'expression')], 'expression_static': [(words(('break', 'continue', 'do', 'else', 'elseif', 'end', 'for', 'if', 'in', 'repeat', 'return', 'then', 'until', 'while'), suffix='\\b'), Keyword.Reserved)], 'expression': [include('ws'), ('if\\b', Keyword.Reserved, ('ternary', 'expression')), ('local\\b', Keyword.Declaration), *_luau_make_expression_special(True), ('\\.\\.\\.', Punctuation, '#pop'), ('function\\b', Keyword.Reserved, 'func_name'), include('expression_static'), *_luau_make_expression(True, _s), default('#pop')], 'ternary': [include('ws'), ('else\\b', Keyword.Reserved, '#pop'), (words(('then', 'elseif'), suffix='\\b'), Operator.Reserved, 'expression'), default('#pop')], 'closing_brace_pop': [('\\}', Punctuation, '#pop')], 'closing_parenthesis_pop': [('\\)', Punctuation, '#pop')], 'closing_gt_pop': [('>', Punctuation, '#pop')], 'closing_parenthesis_base': [include('closing_parenthesis_pop'), include('base')], 'closing_parenthesis_type': [include('closing_parenthesis_pop'), include('type')], 'closing_brace_base': [include('closing_brace_pop'), include('base')], 'closing_brace_type': [include('closing_brace_pop'), include('type')], 'closing_gt_type': [include('closing_gt_pop'), include('type')], 'string_escape': [('\\\\z\\s*', String.Escape), ('\\\\(?:[abfnrtvz\\\\"\\\'`\\{\\n])|[\\r\\n]{1,2}|x[\\da-fA-F]{2}|\\d{1,3}|u\\{\\}[\\da-fA-F]*\\}', String.Escape)], 'string_single': [include('string_escape'), ("'", String.Single, '#pop'), ("[^\\\\']+", String.Single)], 'string_double': [include('string_escape'), ('"', String.Double, '#pop'), ('[^\\\\"]+', String.Double)], 'string_interpolated': [include('string_escape'), ('\\{', Punctuation, ('closing_brace_base', 'expression')), ('`', String.Backtick, '#pop'), ('[^\\\\`\\{]+', String.Backtick)], 'func_name': [include('ws'), ('[.:]', Punctuation), (f'[a-zA-Z_]\\w*(?={_s}*[.:])', Name.Class), ('[a-zA-Z_]\\w*', Name.Function), ('<', Punctuation, 'closing_gt_type'), ('\\(', Punctuation, '#pop')], 'type': [include('ws'), ('\\(', Punctuation, 'closing_parenthesis_type'), ('\\{', Punctuation, 'closing_brace_type'), ('<', Punctuation, 'closing_gt_type'), ("'", String.Single, 'string_single'), ('"', String.Double, 'string_double'), ('[|&\\.,\\[\\]:=]+', Punctuation), ('->', Punctuation), ('typeof\\(', Name.Builtin, ('closing_parenthesis_base', 'expression')), ('[a-zA-Z_]\\w*', Name.Class)], 'type_start': [include('ws'), ('\\(', Punctuation, ('#pop', 'closing_parenthesis_type')), ('\\{', Punctuation, ('#pop', 'closing_brace_type')), ('<', Punctuation, ('#pop', 'closing_gt_type')), ("'", String.Single, ('#pop', 'string_single')), ('"', String.Double, ('#pop', 'string_double')), ('typeof\\(', Name.Builtin, ('#pop', 'closing_parenthesis_base', 'expression')), ('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'type_end': [include('ws'), ('[|&\\.]', Punctuation, 'type_start'), ('->', Punctuation, 'type_start'), ('<', Punctuation, 'closing_gt_type'), default('#pop')], 'type_declaration': [include('ws'), ('[a-zA-Z_]\\w*', Name.Class), ('<', Punctuation, 'closing_gt_type'), ('=', Punctuation, ('#pop', 'type_end', 'type_start'))]}
  --
      - __init__()
      + get_tokens_unprocessed(text)
  }

  class MoonScriptLexer {
      + name = 'MoonScript'
      + url = 'http://moonscript.org'
      + aliases = ['moonscript', 'moon']
      + filenames = ['*.moon']
      + mimetypes = ['text/x-moonscript', 'application/x-moonscript']
      + version_added = '1.5'
      + tokens = {'root': [('#!(.*?)$', Comment.Preproc), default('base')], 'base': [('--.*$', Comment.Single), ('(?i)(\\d*\\.\\d+|\\d+\\.\\d*)(e[+-]?\\d+)?', Number.Float), ('(?i)\\d+e[+-]?\\d+', Number.Float), ('(?i)0x[0-9a-f]*', Number.Hex), ('\\d+', Number.Integer), ('\\n', Whitespace), ('[^\\S\\n]+', Text), ('(?s)\\[(=*)\\[.*?\\]\\1\\]', String), ('(->|=>)', Name.Function), (':[a-zA-Z_]\\w*', Name.Variable), ('(==|!=|~=|<=|>=|\\.\\.\\.|\\.\\.|[=+\\-*/%^<>#!.\\\\:])', Operator), ('[;,]', Punctuation), ('[\\[\\]{}()]', Keyword.Type), ('[a-zA-Z_]\\w*:', Name.Variable), (words(('class', 'extends', 'if', 'then', 'super', 'do', 'with', 'import', 'export', 'while', 'elseif', 'return', 'for', 'in', 'from', 'when', 'using', 'else', 'and', 'or', 'not', 'switch', 'break'), suffix='\\b'), Keyword), ('(true|false|nil)\\b', Keyword.Constant), ('(and|or|not)\\b', Operator.Word), ('(self)\\b', Name.Builtin.Pseudo), ('@@?([a-zA-Z_]\\w*)?', Name.Variable.Class), ('[A-Z]\\w*', Name.Class), (words(all_lua_builtins(), suffix='\\b'), Name.Builtin), ('[A-Za-z_]\\w*', Name), ("'", String.Single, combined('stringescape', 'sqs')), ('"', String.Double, combined('stringescape', 'dqs'))], 'stringescape': [('\\\\([abfnrtv\\\\"\']|\\d{1,3})', String.Escape)], 'sqs': [("'", String.Single, '#pop'), ("[^']+", String)], 'dqs': [('"', String.Double, '#pop'), ('[^"]+', String)]}
  --
      + get_tokens_unprocessed(text)
  }

  class ChaiscriptLexer {
      + name = 'ChaiScript'
      + url = 'http://chaiscript.com/'
      + aliases = ['chaiscript', 'chai']
      + filenames = ['*.chai']
      + mimetypes = ['text/x-chaiscript', 'application/x-chaiscript']
      + version_added = '2.0'
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'commentsandwhitespace': [('\\s+', Text), ('//.*?\\n', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline), ('^\\#.*?\\n', Comment.Single)], 'slashstartsregex': [include('commentsandwhitespace'), ('/(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gim]+\\b|\\B)', String.Regex, '#pop'), ('(?=/)', Text, ('#pop', 'badregex')), default('#pop')], 'badregex': [('\\n', Text, '#pop')], 'root': [include('commentsandwhitespace'), ('\\n', Text), ('[^\\S\\n]+', Text), ('\\+\\+|--|~|&&|\\?|:|\\|\\||\\\\(?=\\n)|\\.\\.(<<|>>>?|==?|!=?|[-<>+*%&|^/])=?', Operator, 'slashstartsregex'), ('[{(\\[;,]', Punctuation, 'slashstartsregex'), ('[})\\].]', Punctuation), ('[=+\\-*/]', Operator), ('(for|in|while|do|break|return|continue|if|else|throw|try|catch)\\b', Keyword, 'slashstartsregex'), ('(var)\\b', Keyword.Declaration, 'slashstartsregex'), ('(attr|def|fun)\\b', Keyword.Reserved), ('(true|false)\\b', Keyword.Constant), ('(eval|throw)\\b', Name.Builtin), ('`\\S+`', Name.Builtin), ('[$a-zA-Z_]\\w*', Name.Other), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ('"', String.Double, 'dqstring'), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single)], 'dqstring': [('\\$\\{[^"}]+?\\}', String.Interpol), ('\\$', String.Double), ('\\\\\\\\', String.Double), ('\\\\"', String.Double), ('[^\\\\"$]+', String.Double), ('"', String.Double, '#pop')]}
  }

  class LSLLexer {
      + name = 'LSL'
      + aliases = ['lsl']
      + filenames = ['*.lsl']
      + mimetypes = ['text/x-lsl']
      + url = 'https://wiki.secondlife.com/wiki/Linden_Scripting_Language'
      + version_added = '2.0'
      + flags = re.MULTILINE
      + lsl_keywords = '\\b(?:do|else|for|if|jump|return|while)\\b'
      + lsl_types = '\\b(?:float|integer|key|list|quaternion|rotation|string|vector)\\b'
      + lsl_states = '\\b(?:(?:state)\\s+\\w+|default)\\b'
      + lsl_events = '\\b(?:state_(?:entry|exit)|touch(?:_(?:start|end))?|(?:land_)?collision(?:_(?:start|end))?|timer|listen|(?:no_)?sensor|control|(?:not_)?at_(?:rot_)?target|money|email|run_time_permissions|changed|attach|dataserver|moving_(?:start|end)|link_message|(?:on|object)_rez|remote_data|http_re(?:sponse|quest)|path_update|transaction_result)\\b'
      + lsl_functions_builtin = '\\b(?:ll(?:ReturnObjectsBy(?:ID|Owner)|Json(?:2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(?:Mag|Norm|Dist)|Rot(?:Between|2(?:Euler|Fwd|Left|Up))|(?:Euler|Axes)2Rot|Whisper|(?:Region|Owner)?Say|Shout|Listen(?:Control|Remove)?|Sensor(?:Repeat|Remove)?|Detected(?:Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|(?:[GS]et)(?:AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(?:Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(?:Scale|Offset|Rotate)Texture|(?:Rot)?Target(?:Remove)?|(?:Stop)?MoveToTarget|Apply(?:Rotational)?Impulse|Set(?:KeyframedMotion|ContentType|RegionPos|(?:Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(?:Queueing|Radius)|Vehicle(?:Type|(?:Float|Vector|Rotation)Param)|(?:Touch|Sit)?Text|Camera(?:Eye|At)Offset|PrimitiveParams|ClickAction|Link(?:Alpha|Color|PrimitiveParams(?:Fast)?|Texture(?:Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get(?:(?:Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(?:PrimitiveParams|Number(?:OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(?:Details|PermMask|PrimCount)|Parcel(?:MaxPrims|Details|Prim(?:Count|Owners))|Attached|(?:SPMax|Free|Used)Memory|Region(?:Name|TimeDilation|FPS|Corner|AgentCount)|Root(?:Position|Rotation)|UnixTime|(?:Parcel|Region)Flags|(?:Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(?:Prims|NotecardLines|Sides)|Animation(?:List)?|(?:Camera|Local)(?:Pos|Rot)|Vel|Accel|Omega|Time(?:stamp|OfDay)|(?:Object|CenterOf)?Mass|MassMKS|Energy|Owner|(?:Owner)?Key|SunDirection|Texture(?:Offset|Scale|Rot)|Inventory(?:Number|Name|Key|Type|Creator|PermMask)|Permissions(?:Key)?|StartParameter|List(?:Length|EntryType)|Date|Agent(?:Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(?:Name|State))|(?:Get|Reset|GetAndReset)Time|PlaySound(?:Slave)?|LoopSound(?:Master|Slave)?|(?:Trigger|Stop|Preload)Sound|(?:(?:Get|Delete)Sub|Insert)String|To(?:Upper|Lower)|Give(?:InventoryList|Money)|RezObject|(?:Stop)?LookAt|Sleep|CollisionFilter|(?:Take|Release)Controls|DetachFromAvatar|AttachToAvatar(?:Temp)?|InstantMessage|(?:GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(?:Length|Trim)|(?:Start|Stop)Animation|TargetOmega|RequestPermissions|(?:Create|Break)Link|BreakAllLinks|(?:Give|Remove)Inventory|Water|PassTouches|Request(?:Agent|Inventory)Data|TeleportAgent(?:Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(?:Axis|Angle)|A(?:cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(?:CSV|Integer|Json|Float|String|Key|Vector|Rot|List(?:Strided)?)|DeleteSubList|List(?:Statistics|Sort|Randomize|(?:Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(?:CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(?:Slope|Normal|Contour)|GroundRepel|(?:Set|Remove)VehicleFlags|(?:AvatarOn)?(?:Link)?SitTarget|Script(?:Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(?:Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(?:Integer|String)ToBase64|XorBase64|Log(?:10)?|Base64To(?:String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(?:Load|Release|(?:E|Une)scape)URL|ParcelMedia(?:CommandList|Query)|ModPow|MapDestination|(?:RemoveFrom|AddTo|Reset)Land(?:Pass|Ban)List|(?:Set|Clear)CameraParams|HTTP(?:Request|Response)|TextBox|DetectedTouch(?:UV|Face|Pos|(?:N|Bin)ormal|ST)|(?:MD5|SHA1|DumpList2)String|Request(?:Secure)?URL|Clear(?:Prim|Link)Media|(?:Link)?ParticleSystem|(?:Get|Request)(?:Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(?:Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b'
      + lsl_constants_float = '\\b(?:DEG_TO_RAD|PI(?:_BY_TWO)?|RAD_TO_DEG|SQRT2|TWO_PI)\\b'
      + lsl_constants_integer = '\\b(?:JSON_APPEND|STATUS_(?:PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(?:_OBJECT)?|(?:DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(?:FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(?:_(?:BY_(?:LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(?:PARCEL(?:_OWNER)?|REGION)))?|CAMERA_(?:PITCH|DISTANCE|BEHINDNESS_(?:ANGLE|LAG)|(?:FOCUS|POSITION)(?:_(?:THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(?:ROOT|SET|ALL_(?:OTHERS|CHILDREN)|THIS)|ACTIVE|PASSIVE|SCRIPTED|CONTROL_(?:FWD|BACK|(?:ROT_)?(?:LEFT|RIGHT)|UP|DOWN|(?:ML_)?LBUTTON)|PERMISSION_(?:RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(?:CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(?:TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(?:INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(?:_START)?|TELEPORT|MEDIA)|OBJECT_(?:(?:PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_ON_REZ|NAME|DESC|POS|PRIM_EQUIVALENCE|RETURN_(?:PARCEL(?:_OWNER)?|REGION)|ROO?T|VELOCITY|OWNER|GROUP|CREATOR|ATTACHED_POINT|RENDER_WEIGHT|PATHFINDING_TYPE|(?:RUNNING|TOTAL)_SCRIPT_COUNT|SCRIPT_(?:MEMORY|TIME))|TYPE_(?:INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(?:DEBUG|PUBLIC)_CHANNEL|ATTACH_(?:AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](?:SHOULDER|HAND|FOOT|EAR|EYE|[UL](?:ARM|LEG)|HIP)|(?:LEFT|RIGHT)_PEC|HUD_(?:CENTER_[12]|TOP_(?:RIGHT|CENTER|LEFT)|BOTTOM(?:_(?:RIGHT|LEFT))?))|LAND_(?:LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(?:ONLINE|NAME|BORN|SIM_(?:POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(?:ON_FILE|USED)|REMOTE_DATA_(?:CHANNEL|REQUEST|REPLY)|PSYS_(?:PART_(?:BF_(?:ZERO|ONE(?:_MINUS_(?:DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(?:START|END)_(?:COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(?:RIBBON|WIND|INTERP_(?:COLOR|SCALE)|BOUNCE|FOLLOW_(?:SRC|VELOCITY)|TARGET_(?:POS|LINEAR)|EMISSIVE)_MASK)|SRC_(?:MAX_AGE|PATTERN|ANGLE_(?:BEGIN|END)|BURST_(?:RATE|PART_COUNT|RADIUS|SPEED_(?:MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(?:DROP|EXPLODE|ANGLE(?:_CONE(?:_EMPTY)?)?)))|VEHICLE_(?:REFERENCE_FRAME|TYPE_(?:NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(?:LINEAR|ANGULAR)_(?:FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(?:HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(?:LINEAR|ANGULAR)_(?:DEFLECTION_(?:EFFICIENCY|TIMESCALE)|MOTOR_(?:DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(?:EFFICIENCY|TIMESCALE)|BANKING_(?:EFFICIENCY|MIX|TIMESCALE)|FLAG_(?:NO_DEFLECTION_UP|LIMIT_(?:ROLL_ONLY|MOTOR_UP)|HOVER_(?:(?:WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(?:STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(?:TYPE(?:_(?:BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(?:DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(?:_(?:STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(?:NONE|LOW|MEDIUM|HIGH)|BUMP_(?:NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(?:DEFAULT|PLANAR)|SCULPT_(?:TYPE_(?:SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(?:MIRROR|INVERT))|PHYSICS(?:_(?:SHAPE_(?:CONVEX|NONE|PRIM|TYPE)))?|(?:POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(?:ALT_IMAGE_ENABLE|CONTROLS|(?:CURRENT|HOME)_URL|AUTO_(?:LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(?:WIDTH|HEIGHT)_PIXELS|WHITELIST(?:_ENABLE)?|PERMS_(?:INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(?:STANDARD|MINI)|PERM_(?:NONE|OWNER|GROUP|ANYONE)|MAX_(?:URL_LENGTH|WHITELIST_(?:SIZE|COUNT)|(?:WIDTH|HEIGHT)_PIXELS)))|MASK_(?:BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(?:TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(?:MEDIA_COMMAND_(?:STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(?:ALLOW_(?:FLY|(?:GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(?:GROUP_)?OBJECTS)|USE_(?:ACCESS_(?:GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(?:GROUP|ALL)_OBJECT_ENTRY)|COUNT_(?:TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(?:NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(?:MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(?:_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(?:HIDE|DEFAULT)|REGION_FLAG_(?:ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(?:COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(?:METHOD|MIMETYPE|BODY_(?:MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|STRING_(?:TRIM(?:_(?:HEAD|TAIL))?)|CLICK_ACTION_(?:NONE|TOUCH|SIT|BUY|PAY|OPEN(?:_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(?:NONE|SCRIPT_MEMORY)|RC_(?:DATA_FLAGS|DETECT_PHANTOM|GET_(?:LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(?:TYPES|AGENTS|(?:NON)?PHYSICAL|LAND))|RCERR_(?:CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(?:ALLOWED_(?:AGENT|GROUP)_(?:ADD|REMOVE)|BANNED_AGENT_(?:ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(?:COMMAND|CMD_(?:PLAY|STOP|PAUSE|SET_MODE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(?:GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(?:CMD_(?:(?:SMOOTH_)?STOP|JUMP)|DESIRED_(?:TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(?:_(?:[A-D]|NONE))?|MAX_(?:DECEL|TURN_RADIUS|(?:ACCEL|SPEED)))|PURSUIT_(?:OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(?:CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(?:EVADE_(?:HIDDEN|SPOTTED)|FAILURE_(?:DYNAMIC_PATHFINDING_DISABLED|INVALID_(?:GOAL|START)|NO_(?:NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(?:PARCEL_)?UNREACHABLE)|(?:GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(?:_(?:FAST|NONE|SLOW))?|CONTENT_TYPE_(?:ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(?:RADIUS|STATIC)|(?:PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(?:AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b'
      + lsl_constants_integer_boolean = '\\b(?:FALSE|TRUE)\\b'
      + lsl_constants_rotation = '\\b(?:ZERO_ROTATION)\\b'
      + lsl_constants_string = '\\b(?:EOF|JSON_(?:ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(?:BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(?:GRANTED|DENIED))\\b'
      + lsl_constants_vector = '\\b(?:TOUCH_INVALID_(?:TEXCOORD|VECTOR)|ZERO_VECTOR)\\b'
      + lsl_invalid_broken = '\\b(?:LAND_(?:LARGE|MEDIUM|SMALL)_BRUSH)\\b'
      + lsl_invalid_deprecated = '\\b(?:ATTACH_[LR]PEC|DATA_RATING|OBJECT_ATTACHMENT_(?:GEOMETRY_BYTES|SURFACE_AREA)|PRIM_(?:CAST_SHADOWS|MATERIAL_LIGHT|TYPE_LEGACY)|PSYS_SRC_(?:INNER|OUTER)ANGLE|VEHICLE_FLAG_NO_FLY_UP|ll(?:Cloud|Make(?:Explosion|Fountain|Smoke|Fire)|RemoteDataSetRegion|Sound(?:Preload)?|XorBase64Strings(?:Correct)?))\\b'
      + lsl_invalid_illegal = '\\b(?:event)\\b'
      + lsl_invalid_unimplemented = '\\b(?:CHARACTER_(?:MAX_ANGULAR_(?:ACCEL|SPEED)|TURN_SPEED_MULTIPLIER)|PERMISSION_(?:CHANGE_(?:JOINTS|PERMISSIONS)|RELEASE_OWNERSHIP|REMAP_CONTROLS)|PRIM_PHYSICS_MATERIAL|PSYS_SRC_OBJ_REL_MASK|ll(?:CollisionSprite|(?:Stop)?PointAt|(?:(?:Refresh|Set)Prim)URL|(?:Take|Release)Camera|RemoteLoadScript))\\b'
      + lsl_reserved_godmode = '\\b(?:ll(?:GodLikeRezObject|Set(?:Inventory|Object)PermMask))\\b'
      + lsl_reserved_log = '\\b(?:print)\\b'
      + lsl_operators = '\\+\\+|\\-\\-|<<|>>|&&?|\\|\\|?|\\^|~|[!%<>=*+\\-/]=?'
      + tokens = {'root': [('//.*?\\n', Comment.Single), ('/\\*', Comment.Multiline, 'comment'), ('"', String.Double, 'string'), (lsl_keywords, Keyword), (lsl_types, Keyword.Type), (lsl_states, Name.Class), (lsl_events, Name.Builtin), (lsl_functions_builtin, Name.Function), (lsl_constants_float, Keyword.Constant), (lsl_constants_integer, Keyword.Constant), (lsl_constants_integer_boolean, Keyword.Constant), (lsl_constants_rotation, Keyword.Constant), (lsl_constants_string, Keyword.Constant), (lsl_constants_vector, Keyword.Constant), (lsl_invalid_broken, Error), (lsl_invalid_deprecated, Error), (lsl_invalid_illegal, Error), (lsl_invalid_unimplemented, Error), (lsl_reserved_godmode, Keyword.Reserved), (lsl_reserved_log, Keyword.Reserved), ('\\b([a-zA-Z_]\\w*)\\b', Name.Variable), ('(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d*', Number.Float), ('(\\d+\\.\\d*|\\.\\d+)', Number.Float), ('0[xX][0-9a-fA-F]+', Number.Hex), ('\\d+', Number.Integer), (lsl_operators, Operator), (':=?', Error), ('[,;{}()\\[\\]]', Punctuation), ('\\n+', Whitespace), ('\\s+', Whitespace)], 'comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'string': [('\\\\([nt"\\\\])', String.Escape), ('"', String.Double, '#pop'), ('\\\\.', Error), ('[^"\\\\]+', String.Double)]}
  }

  class AppleScriptLexer {
      + name = 'AppleScript'
      + url = 'https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html'
      + aliases = ['applescript']
      + filenames = ['*.applescript']
      + version_added = '1.0'
      + flags = re.MULTILINE | re.DOTALL
      + Identifiers = '[a-zA-Z]\\w*'
      + Literals = ('AppleScript', 'current application', 'false', 'linefeed', 'missing value', 'pi', 'quote', 'result', 'return', 'space', 'tab', 'text item delimiters', 'true', 'version')
      + Classes = ('alias ', 'application ', 'boolean ', 'class ', 'constant ', 'date ', 'file ', 'integer ', 'list ', 'number ', 'POSIX file ', 'real ', 'record ', 'reference ', 'RGB color ', 'script ', 'text ', 'unit types', '(?:Unicode )?text', 'string')
      + BuiltIn = ('attachment', 'attribute run', 'character', 'day', 'month', 'paragraph', 'word', 'year')
      + HandlerParams = ('about', 'above', 'against', 'apart from', 'around', 'aside from', 'at', 'below', 'beneath', 'beside', 'between', 'for', 'given', 'instead of', 'on', 'onto', 'out of', 'over', 'since')
      + Commands = ('ASCII (character|number)', 'activate', 'beep', 'choose URL', 'choose application', 'choose color', 'choose file( name)?', 'choose folder', 'choose from list', 'choose remote application', 'clipboard info', 'close( access)?', 'copy', 'count', 'current date', 'delay', 'delete', 'display (alert|dialog)', 'do shell script', 'duplicate', 'exists', 'get eof', 'get volume settings', 'info for', 'launch', 'list (disks|folder)', 'load script', 'log', 'make', 'mount volume', 'new', 'offset', 'open( (for access|location))?', 'path to', 'print', 'quit', 'random number', 'read', 'round', 'run( script)?', 'say', 'scripting components', 'set (eof|the clipboard to|volume)', 'store script', 'summarize', 'system attribute', 'system info', 'the clipboard', 'time to GMT', 'write', 'quoted form')
      + References = ('(in )?back of', '(in )?front of', '[0-9]+(st|nd|rd|th)', 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth', 'after', 'back', 'before', 'behind', 'every', 'front', 'index', 'last', 'middle', 'some', 'that', 'through', 'thru', 'where', 'whose')
      + Operators = ('and', 'or', 'is equal', 'equals', '(is )?equal to', 'is not', "isn't", "isn't equal( to)?", 'is not equal( to)?', "doesn't equal", 'does not equal', '(is )?greater than', 'comes after', 'is not less than or equal( to)?', "isn't less than or equal( to)?", '(is )?less than', 'comes before', 'is not greater than or equal( to)?', "isn't greater than or equal( to)?", '(is  )?greater than or equal( to)?', 'is not less than', "isn't less than", 'does not come before', "doesn't come before", '(is )?less than or equal( to)?', 'is not greater than', "isn't greater than", 'does not come after', "doesn't come after", 'starts? with', 'begins? with', 'ends? with', 'contains?', 'does not contain', "doesn't contain", 'is in', 'is contained by', 'is not in', 'is not contained by', "isn't contained by", 'div', 'mod', 'not', '(a  )?(ref( to)?|reference to)', 'is', 'does')
      + Control = ('considering', 'else', 'error', 'exit', 'from', 'if', 'ignoring', 'in', 'repeat', 'tell', 'then', 'times', 'to', 'try', 'until', 'using terms from', 'while', 'whith', 'with timeout( of)?', 'with transaction', 'by', 'continue', 'end', 'its?', 'me', 'my', 'return', 'of', 'as')
      + Declarations = ('global', 'local', 'prop(erty)?', 'set', 'get')
      + Reserved = ('but', 'put', 'returning', 'the')
      + StudioClasses = ('action cell', 'alert reply', 'application', 'box', 'browser( cell)?', 'bundle', 'button( cell)?', 'cell', 'clip view', 'color well', 'color-panel', 'combo box( item)?', 'control', 'data( (cell|column|item|row|source))?', 'default entry', 'dialog reply', 'document', 'drag info', 'drawer', 'event', 'font(-panel)?', 'formatter', 'image( (cell|view))?', 'matrix', 'menu( item)?', 'item', 'movie( view)?', 'open-panel', 'outline view', 'panel', 'pasteboard', 'plugin', 'popup button', 'progress indicator', 'responder', 'save-panel', 'scroll view', 'secure text field( cell)?', 'slider', 'sound', 'split view', 'stepper', 'tab view( item)?', 'table( (column|header cell|header view|view))', 'text( (field( cell)?|view))?', 'toolbar( item)?', 'user-defaults', 'view', 'window')
      + StudioEvents = ('accept outline drop', 'accept table drop', 'action', 'activated', 'alert ended', 'awake from nib', 'became key', 'became main', 'begin editing', 'bounds changed', 'cell value', 'cell value changed', 'change cell value', 'change item value', 'changed', 'child of item', 'choose menu item', 'clicked', 'clicked toolbar item', 'closed', 'column clicked', 'column moved', 'column resized', 'conclude drop', 'data representation', 'deminiaturized', 'dialog ended', 'document nib name', 'double clicked', 'drag( (entered|exited|updated))?', 'drop', 'end editing', 'exposed', 'idle', 'item expandable', 'item value', 'item value changed', 'items changed', 'keyboard down', 'keyboard up', 'launched', 'load data representation', 'miniaturized', 'mouse down', 'mouse dragged', 'mouse entered', 'mouse exited', 'mouse moved', 'mouse up', 'moved', 'number of browser rows', 'number of items', 'number of rows', 'open untitled', 'opened', 'panel ended', 'parameters updated', 'plugin loaded', 'prepare drop', 'prepare outline drag', 'prepare outline drop', 'prepare table drag', 'prepare table drop', 'read from file', 'resigned active', 'resigned key', 'resigned main', 'resized( sub views)?', 'right mouse down', 'right mouse dragged', 'right mouse up', 'rows changed', 'scroll wheel', 'selected tab view item', 'selection changed', 'selection changing', 'should begin editing', 'should close', 'should collapse item', 'should end editing', 'should expand item', 'should open( untitled)?', 'should quit( after last window closed)?', 'should select column', 'should select item', 'should select row', 'should select tab view item', 'should selection change', 'should zoom', 'shown', 'update menu item', 'update parameters', 'update toolbar item', 'was hidden', 'was miniaturized', 'will become active', 'will close', 'will dismiss', 'will display browser cell', 'will display cell', 'will display item cell', 'will display outline cell', 'will finish launching', 'will hide', 'will miniaturize', 'will move', 'will open', 'will pop up', 'will quit', 'will resign active', 'will resize( sub views)?', 'will select tab view item', 'will show', 'will zoom', 'write to file', 'zoomed')
      + StudioCommands = ('animate', 'append', 'call method', 'center', 'close drawer', 'close panel', 'display', 'display alert', 'display dialog', 'display panel', 'go', 'hide', 'highlight', 'increment', 'item for', 'load image', 'load movie', 'load nib', 'load panel', 'load sound', 'localized string', 'lock focus', 'log', 'open drawer', 'path for', 'pause', 'perform action', 'play', 'register', 'resume', 'scroll', 'select( all)?', 'show', 'size to fit', 'start', 'step back', 'step forward', 'stop', 'synchronize', 'unlock focus', 'update')
      + StudioProperties = ('accepts arrow key', 'action method', 'active', 'alignment', 'allowed identifiers', 'allows branch selection', 'allows column reordering', 'allows column resizing', 'allows column selection', 'allows customization', 'allows editing text attributes', 'allows empty selection', 'allows mixed state', 'allows multiple selection', 'allows reordering', 'allows undo', 'alpha( value)?', 'alternate image', 'alternate increment value', 'alternate title', 'animation delay', 'associated file name', 'associated object', 'auto completes', 'auto display', 'auto enables items', 'auto repeat', 'auto resizes( outline column)?', 'auto save expanded items', 'auto save name', 'auto save table columns', 'auto saves configuration', 'auto scroll', 'auto sizes all columns to fit', 'auto sizes cells', 'background color', 'bezel state', 'bezel style', 'bezeled', 'border rect', 'border type', 'bordered', 'bounds( rotation)?', 'box type', 'button returned', 'button type', 'can choose directories', 'can choose files', 'can draw', 'can hide', 'cell( (background color|size|type))?', 'characters', 'class', 'click count', 'clicked( data)? column', 'clicked data item', 'clicked( data)? row', 'closeable', 'collating', 'color( (mode|panel))', 'command key down', 'configuration', 'content(s| (size|view( margins)?))?', 'context', 'continuous', 'control key down', 'control size', 'control tint', 'control view', 'controller visible', 'coordinate system', 'copies( on scroll)?', 'corner view', 'current cell', 'current column', 'current( field)?  editor', 'current( menu)? item', 'current row', 'current tab view item', 'data source', 'default identifiers', 'delta (x|y|z)', 'destination window', 'directory', 'display mode', 'displayed cell', 'document( (edited|rect|view))?', 'double value', 'dragged column', 'dragged distance', 'dragged items', 'draws( cell)? background', 'draws grid', 'dynamically scrolls', 'echos bullets', 'edge', 'editable', 'edited( data)? column', 'edited data item', 'edited( data)? row', 'enabled', 'enclosing scroll view', 'ending page', 'error handling', 'event number', 'event type', 'excluded from windows menu', 'executable path', 'expanded', 'fax number', 'field editor', 'file kind', 'file name', 'file type', 'first responder', 'first visible column', 'flipped', 'floating', 'font( panel)?', 'formatter', 'frameworks path', 'frontmost', 'gave up', 'grid color', 'has data items', 'has horizontal ruler', 'has horizontal scroller', 'has parent data item', 'has resize indicator', 'has shadow', 'has sub menu', 'has vertical ruler', 'has vertical scroller', 'header cell', 'header view', 'hidden', 'hides when deactivated', 'highlights by', 'horizontal line scroll', 'horizontal page scroll', 'horizontal ruler view', 'horizontally resizable', 'icon image', 'id', 'identifier', 'ignores multiple clicks', 'image( (alignment|dims when disabled|frame style|scaling))?', 'imports graphics', 'increment value', 'indentation per level', 'indeterminate', 'index', 'integer value', 'intercell spacing', 'item height', 'key( (code|equivalent( modifier)?|window))?', 'knob thickness', 'label', 'last( visible)? column', 'leading offset', 'leaf', 'level', 'line scroll', 'loaded', 'localized sort', 'location', 'loop mode', 'main( (bunde|menu|window))?', 'marker follows cell', 'matrix mode', 'maximum( content)? size', 'maximum visible columns', 'menu( form representation)?', 'miniaturizable', 'miniaturized', 'minimized image', 'minimized title', 'minimum column width', 'minimum( content)? size', 'modal', 'modified', 'mouse down state', 'movie( (controller|file|rect))?', 'muted', 'name', 'needs display', 'next state', 'next text', 'number of tick marks', 'only tick mark values', 'opaque', 'open panel', 'option key down', 'outline table column', 'page scroll', 'pages across', 'pages down', 'palette label', 'pane splitter', 'parent data item', 'parent window', 'pasteboard', 'path( (names|separator))?', 'playing', 'plays every frame', 'plays selection only', 'position', 'preferred edge', 'preferred type', 'pressure', 'previous text', 'prompt', 'properties', 'prototype cell', 'pulls down', 'rate', 'released when closed', 'repeated', 'requested print time', 'required file type', 'resizable', 'resized column', 'resource path', 'returns records', 'reuses columns', 'rich text', 'roll over', 'row height', 'rulers visible', 'save panel', 'scripts path', 'scrollable', 'selectable( identifiers)?', 'selected cell', 'selected( data)? columns?', 'selected data items?', 'selected( data)? rows?', 'selected item identifier', 'selection by rect', 'send action on arrow key', 'sends action when done editing', 'separates columns', 'separator item', 'sequence number', 'services menu', 'shared frameworks path', 'shared support path', 'sheet', 'shift key down', 'shows alpha', 'shows state by', 'size( mode)?', 'smart insert delete enabled', 'sort case sensitivity', 'sort column', 'sort order', 'sort type', 'sorted( data rows)?', 'sound', 'source( mask)?', 'spell checking enabled', 'starting page', 'state', 'string value', 'sub menu', 'super menu', 'super view', 'tab key traverses cells', 'tab state', 'tab type', 'tab view', 'table view', 'tag', 'target( printer)?', 'text color', 'text container insert', 'text container origin', 'text returned', 'tick mark position', 'time stamp', 'title(d| (cell|font|height|position|rect))?', 'tool tip', 'toolbar', 'trailing offset', 'transparent', 'treat packages as directories', 'truncated labels', 'types', 'unmodified characters', 'update views', 'use sort indicator', 'user defaults', 'uses data source', 'uses ruler', 'uses threaded animation', 'uses title from previous column', 'value wraps', 'version', 'vertical( (line scroll|page scroll|ruler view))?', 'vertically resizable', 'view', 'visible( document rect)?', 'volume', 'width', 'window', 'windows menu', 'wraps', 'zoomable', 'zoomed')
      + tokens = {'root': [('\\s+', Text), ('¬\\n', String.Escape), ("'s\\s+", Text), ('(--|#).*?$', Comment), ('\\(\\*', Comment.Multiline, 'comment'), ('[(){}!,.:]', Punctuation), ('(«)([^»]+)(»)', bygroups(Text, Name.Builtin, Text)), ('\\b((?:considering|ignoring)\\s*)(application responses|case|diacriticals|hyphens|numeric strings|punctuation|white space)', bygroups(Keyword, Name.Builtin)), ('(-|\\*|\\+|&|≠|>=?|<=?|=|≥|≤|/|÷|\\^)', Operator), ('\\b({})\\b'.format('|'.join(Operators)), Operator.Word), ('^(\\s*(?:on|end)\\s+)({})'.format('|'.join(StudioEvents[::-1])), bygroups(Keyword, Name.Function)), ('^(\\s*)(in|on|script|to)(\\s+)', bygroups(Text, Keyword, Text)), ('\\b(as )({})\\b'.format('|'.join(Classes)), bygroups(Keyword, Name.Class)), ('\\b({})\\b'.format('|'.join(Literals)), Name.Constant), ('\\b({})\\b'.format('|'.join(Commands)), Name.Builtin), ('\\b({})\\b'.format('|'.join(Control)), Keyword), ('\\b({})\\b'.format('|'.join(Declarations)), Keyword), ('\\b({})\\b'.format('|'.join(Reserved)), Name.Builtin), ('\\b({})s?\\b'.format('|'.join(BuiltIn)), Name.Builtin), ('\\b({})\\b'.format('|'.join(HandlerParams)), Name.Builtin), ('\\b({})\\b'.format('|'.join(StudioProperties)), Name.Attribute), ('\\b({})s?\\b'.format('|'.join(StudioClasses)), Name.Builtin), ('\\b({})\\b'.format('|'.join(StudioCommands)), Name.Builtin), ('\\b({})\\b'.format('|'.join(References)), Name.Builtin), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), (f'\\b({Identifiers})\\b', Name.Variable), ('[-+]?(\\d+\\.\\d*|\\d*\\.\\d+)(E[-+][0-9]+)?', Number.Float), ('[-+]?\\d+', Number.Integer)], 'comment': [('\\(\\*', Comment.Multiline, '#push'), ('\\*\\)', Comment.Multiline, '#pop'), ('[^*(]+', Comment.Multiline), ('[*(]', Comment.Multiline)]}
  }

  class RexxLexer {
      + name = 'Rexx'
      + url = 'http://www.rexxinfo.org/'
      + aliases = ['rexx', 'arexx']
      + filenames = ['*.rexx', '*.rex', '*.rx', '*.arexx']
      + mimetypes = ['text/x-rexx']
      + version_added = '2.0'
      + flags = re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('/\\*', Comment.Multiline, 'comment'), ('"', String, 'string_double'), ("'", String, 'string_single'), ('[0-9]+(\\.[0-9]+)?(e[+-]?[0-9])?', Number), ('([a-z_]\\w*)(\\s*)(:)(\\s*)(procedure)\\b', bygroups(Name.Function, Whitespace, Operator, Whitespace, Keyword.Declaration)), ('([a-z_]\\w*)(\\s*)(:)', bygroups(Name.Label, Whitespace, Operator)), include('function'), include('keyword'), include('operator'), ('[a-z_]\\w*', Text)], 'function': [(words(('abbrev', 'abs', 'address', 'arg', 'b2x', 'bitand', 'bitor', 'bitxor', 'c2d', 'c2x', 'center', 'charin', 'charout', 'chars', 'compare', 'condition', 'copies', 'd2c', 'd2x', 'datatype', 'date', 'delstr', 'delword', 'digits', 'errortext', 'form', 'format', 'fuzz', 'insert', 'lastpos', 'left', 'length', 'linein', 'lineout', 'lines', 'max', 'min', 'overlay', 'pos', 'queued', 'random', 'reverse', 'right', 'sign', 'sourceline', 'space', 'stream', 'strip', 'substr', 'subword', 'symbol', 'time', 'trace', 'translate', 'trunc', 'value', 'verify', 'word', 'wordindex', 'wordlength', 'wordpos', 'words', 'x2b', 'x2c', 'x2d', 'xrange'), suffix='(\\s*)(\\()'), bygroups(Name.Builtin, Whitespace, Operator))], 'keyword': [('(address|arg|by|call|do|drop|else|end|exit|for|forever|if|interpret|iterate|leave|nop|numeric|off|on|options|parse|pull|push|queue|return|say|select|signal|to|then|trace|until|while)\\b', Keyword.Reserved)], 'operator': [('(-|//|/|\\(|\\)|\\*\\*|\\*|\\\\<<|\\\\<|\\\\==|\\\\=|\\\\>>|\\\\>|\\\\|\\|\\||\\||&&|&|%|\\+|<<=|<<|<=|<>|<|==|=|><|>=|>>=|>>|>|¬<<|¬<|¬==|¬=|¬>>|¬>|¬|\\.|,)', Operator)], 'string_double': [('[^"\\n]+', String), ('""', String), ('"', String, '#pop'), ('\\n', Text, '#pop')], 'string_single': [("[^\\'\\n]+", String), ("\\'\\'", String), ("\\'", String, '#pop'), ('\\n', Text, '#pop')], 'comment': [('[^*]+', Comment.Multiline), ('\\*/', Comment.Multiline, '#pop'), ('\\*', Comment.Multiline)]}
      + PATTERNS_AND_WEIGHTS = ((_ADDRESS_COMMAND_PATTERN, 0.2), (_ADDRESS_PATTERN, 0.05), (_DO_WHILE_PATTERN, 0.1), (_ELSE_DO_PATTERN, 0.1), (_IF_THEN_DO_PATTERN, 0.1), (_PROCEDURE_PATTERN, 0.5), (_PARSE_ARG_PATTERN, 0.2))
  --
      + analyse_text(text)
  }

  class MOOCodeLexer {
      + name = 'MOOCode'
      + url = 'http://www.moo.mud.org/'
      + filenames = ['*.moo']
      + aliases = ['moocode', 'moo']
      + mimetypes = ['text/x-moocode']
      + version_added = '0.9'
      + tokens = {'root': [('(0|[1-9][0-9_]*)', Number.Integer), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ('(E_PERM|E_DIV)', Name.Exception), ('((#[-0-9]+)|(\\$\\w+))', Name.Entity), ('\\b(if|else|elseif|endif|for|endfor|fork|endfork|while|endwhile|break|continue|return|try|except|endtry|finally|in)\\b', Keyword), ('(random|length)', Name.Builtin), ('(player|caller|this|args)', Name.Variable.Instance), ('\\s+', Text), ('\\n', Text), ('([!;=,{}&|:.\\[\\]@()<>?]+)', Operator), ('(\\w+)(\\()', bygroups(Name.Function, Operator)), ('(\\w+)', Text)]}
  }

  class HybrisLexer {
      + name = 'Hybris'
      + aliases = ['hybris']
      + filenames = ['*.hyb']
      + mimetypes = ['text/x-hybris', 'application/x-hybris']
      + url = 'https://github.com/evilsocket/hybris'
      + version_added = '1.4'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('^(\\s*(?:function|method|operator\\s+)+?)([a-zA-Z_]\\w*)(\\s*)(\\()', bygroups(Keyword, Name.Function, Text, Operator)), ('[^\\S\\n]+', Text), ('//.*?\\n', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline), ('@[a-zA-Z_][\\w.]*', Name.Decorator), ('(break|case|catch|next|default|do|else|finally|for|foreach|of|unless|if|new|return|switch|me|throw|try|while)\\b', Keyword), ('(extends|private|protected|public|static|throws|function|method|operator)\\b', Keyword.Declaration), ('(true|false|null|__FILE__|__LINE__|__VERSION__|__LIB_PATH__|__INC_PATH__)\\b', Keyword.Constant), ('(class|struct)(\\s+)', bygroups(Keyword.Declaration, Text), 'class'), ('(import|include)(\\s+)', bygroups(Keyword.Namespace, Text), 'import'), (words(('gc_collect', 'gc_mm_items', 'gc_mm_usage', 'gc_collect_threshold', 'urlencode', 'urldecode', 'base64encode', 'base64decode', 'sha1', 'crc32', 'sha2', 'md5', 'md5_file', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'cosh', 'exp', 'fabs', 'floor', 'fmod', 'log', 'log10', 'pow', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'isint', 'isfloat', 'ischar', 'isstring', 'isarray', 'ismap', 'isalias', 'typeof', 'sizeof', 'toint', 'tostring', 'fromxml', 'toxml', 'binary', 'pack', 'load', 'eval', 'var_names', 'var_values', 'user_functions', 'dyn_functions', 'methods', 'call', 'call_method', 'mknod', 'mkfifo', 'mount', 'umount2', 'umount', 'ticks', 'usleep', 'sleep', 'time', 'strtime', 'strdate', 'dllopen', 'dlllink', 'dllcall', 'dllcall_argv', 'dllclose', 'env', 'exec', 'fork', 'getpid', 'wait', 'popen', 'pclose', 'exit', 'kill', 'pthread_create', 'pthread_create_argv', 'pthread_exit', 'pthread_join', 'pthread_kill', 'smtp_send', 'http_get', 'http_post', 'http_download', 'socket', 'bind', 'listen', 'accept', 'getsockname', 'getpeername', 'settimeout', 'connect', 'server', 'recv', 'send', 'close', 'print', 'println', 'printf', 'input', 'readline', 'serial_open', 'serial_fcntl', 'serial_get_attr', 'serial_get_ispeed', 'serial_get_ospeed', 'serial_set_attr', 'serial_set_ispeed', 'serial_set_ospeed', 'serial_write', 'serial_read', 'serial_close', 'xml_load', 'xml_parse', 'fopen', 'fseek', 'ftell', 'fsize', 'fread', 'fwrite', 'fgets', 'fclose', 'file', 'readdir', 'pcre_replace', 'size', 'pop', 'unmap', 'has', 'keys', 'values', 'length', 'find', 'substr', 'replace', 'split', 'trim', 'remove', 'contains', 'join'), suffix='\\b'), Name.Builtin), (words(('MethodReference', 'Runner', 'Dll', 'Thread', 'Pipe', 'Process', 'Runnable', 'CGI', 'ClientSocket', 'Socket', 'ServerSocket', 'File', 'Console', 'Directory', 'Exception'), suffix='\\b'), Keyword.Type), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ("'\\\\.'|'[^\\\\]'|'\\\\u[0-9a-f]{4}'", String.Char), ('(\\.)([a-zA-Z_]\\w*)', bygroups(Operator, Name.Attribute)), ('[a-zA-Z_]\\w*:', Name.Label), ('[a-zA-Z_$]\\w*', Name), ('[~^*!%&\\[\\](){}<>|+=:;,./?\\-@]+', Operator), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-f]+', Number.Hex), ('[0-9]+L?', Number.Integer), ('\\n', Text)], 'class': [('[a-zA-Z_]\\w*', Name.Class, '#pop')], 'import': [('[\\w.]+\\*?', Name.Namespace, '#pop')]}
  --
      + analyse_text(text)
  }

  class EasytrieveLexer {
      + name = 'Easytrieve'
      + aliases = ['easytrieve']
      + filenames = ['*.ezt', '*.mac']
      + mimetypes = ['text/x-easytrieve']
      + url = 'https://www.broadcom.com/products/mainframe/application-development/easytrieve-report-generator'
      + version_added = '2.1'
      + flags = 0
      + tokens = {'root': [('\\*.*\\n', Comment.Single), ('\\n+', Whitespace), ('&' + _NON_DELIMITER_OR_COMMENT_PATTERN + '+\\.', Name.Variable, 'after_macro_argument'), ('%' + _NON_DELIMITER_OR_COMMENT_PATTERN + '+', Name.Variable), ('(FILE|MACRO|REPORT)(\\s+)', bygroups(Keyword.Declaration, Whitespace), 'after_declaration'), ('(JOB|PARM)' + '(' + _DELIMITER_PATTERN + ')', bygroups(Keyword.Declaration, Operator)), (words(_KEYWORDS, suffix=_DELIMITER_PATTERN_CAPTURE), bygroups(Keyword.Reserved, Operator)), (_OPERATORS_PATTERN, Operator), ('(' + _NON_DELIMITER_OR_COMMENT_PATTERN + '+)(\\s*)(\\.?)(\\s*)(PROC)(\\s*\\n)', bygroups(Name.Function, Whitespace, Operator, Whitespace, Keyword.Declaration, Whitespace)), ('[0-9]+\\.[0-9]*', Number.Float), ('[0-9]+', Number.Integer), ("'(''|[^'])*'", String), ('\\s+', Whitespace), (_NON_DELIMITER_OR_COMMENT_PATTERN + '+', Name)], 'after_declaration': [(_NON_DELIMITER_OR_COMMENT_PATTERN + '+', Name.Function), default('#pop')], 'after_macro_argument': [('\\*.*\\n', Comment.Single, '#pop'), ('\\s+', Whitespace, '#pop'), (_OPERATORS_PATTERN, Operator, '#pop'), ("'(''|[^'])*'", String, '#pop'), (_NON_DELIMITER_OR_COMMENT_PATTERN + '+', Name)]}
  --
      + analyse_text(text)
  }

  class JclLexer {
      + name = 'JCL'
      + aliases = ['jcl']
      + filenames = ['*.jcl']
      + mimetypes = ['text/x-jcl']
      + url = 'https://en.wikipedia.org/wiki/Job_Control_Language'
      + version_added = '2.1'
      + flags = re.IGNORECASE
      + tokens = {'root': [('//\\*.*\\n', Comment.Single), ('//', Keyword.Pseudo, 'statement'), ('/\\*', Keyword.Pseudo, 'jes2_statement'), ('.*\\n', Other)], 'statement': [('\\s*\\n', Whitespace, '#pop'), ('([a-z]\\w*)(\\s+)(exec|job)(\\s*)', bygroups(Name.Label, Whitespace, Keyword.Reserved, Whitespace), 'option'), ('[a-z]\\w*', Name.Variable, 'statement_command'), ('\\s+', Whitespace, 'statement_command')], 'statement_command': [('\\s+(command|cntl|dd|endctl|endif|else|include|jcllib|output|pend|proc|set|then|xmit)\\s+', Keyword.Reserved, 'option'), include('option')], 'jes2_statement': [('\\s*\\n', Whitespace, '#pop'), ('\\$', Keyword, 'option'), ('\\b(jobparam|message|netacct|notify|output|priority|route|setup|signoff|xeq|xmit)\\b', Keyword, 'option')], 'option': [('\\*', Name.Builtin), ('[\\[\\](){}<>;,]', Punctuation), ('[-+*/=&%]', Operator), ('[a-z_]\\w*', Name), ('\\d+\\.\\d*', Number.Float), ('\\.\\d+', Number.Float), ('\\d+', Number.Integer), ("'", String, 'option_string'), ('[ \\t]+', Whitespace, 'option_comment'), ('\\.', Punctuation)], 'option_string': [('(\\n)(//)', bygroups(Text, Keyword.Pseudo)), ("''", String), ("[^']", String), ("'", String, '#pop')], 'option_comment': [('.+', Comment.Single)]}
  --
      + analyse_text(text)
  }

  class MiniScriptLexer {
      + name = 'MiniScript'
      + url = 'https://miniscript.org'
      + aliases = ['miniscript', 'ms']
      + filenames = ['*.ms']
      + mimetypes = ['text/x-minicript', 'application/x-miniscript']
      + version_added = '2.6'
      + tokens = {'root': [('#!(.*?)$', Comment.Preproc), default('base')], 'base': [('//.*$', Comment.Single), ('(?i)(\\d*\\.\\d+|\\d+\\.\\d*)(e[+-]?\\d+)?', Number), ('(?i)\\d+e[+-]?\\d+', Number), ('\\d+', Number), ('\\n', Text), ('[^\\S\\n]+', Text), ('"', String, 'string_double'), ('(==|!=|<=|>=|[=+\\-*/%^<>.:])', Operator), ('[;,\\[\\]{}()]', Punctuation), (words(('break', 'continue', 'else', 'end', 'for', 'function', 'if', 'in', 'isa', 'then', 'repeat', 'return', 'while'), suffix='\\b'), Keyword), (words(('abs', 'acos', 'asin', 'atan', 'ceil', 'char', 'cos', 'floor', 'log', 'round', 'rnd', 'pi', 'sign', 'sin', 'sqrt', 'str', 'tan', 'hasIndex', 'indexOf', 'len', 'val', 'code', 'remove', 'lower', 'upper', 'replace', 'split', 'indexes', 'values', 'join', 'sum', 'sort', 'shuffle', 'push', 'pop', 'pull', 'range', 'print', 'input', 'time', 'wait', 'locals', 'globals', 'outer', 'yield'), suffix='\\b'), Name.Builtin), ('(true|false|null)\\b', Keyword.Constant), ('(and|or|not|new)\\b', Operator.Word), ('(self|super|__isa)\\b', Name.Builtin.Pseudo), ('[a-zA-Z_]\\w*', Name.Variable)], 'string_double': [('[^"\\n]+', String), ('""', String), ('"', String, '#pop'), ('\\n', Text, '#pop')]}
  }

  class SmartGameFormatLexer {
      + name = 'SmartGameFormat'
      + url = 'https://www.red-bean.com/sgf/'
      + aliases = ['sgf']
      + filenames = ['*.sgf']
      + version_added = '2.4'
      + tokens = {'root': [('[():;]+', Punctuation), ('(A[BW]|AE|AN|AP|AR|AS|[BW]L|BM|[BW]R|[BW]S|[BW]T|CA|CH|CP|CR|DD|DM|DO|DT|EL|EV|EX|FF|FG|G[BW]|GC|GM|GN|HA|HO|ID|IP|IT|IY|KM|KO|LB|LN|LT|L|MA|MN|M|N|OB|OM|ON|OP|OT|OV|P[BW]|PC|PL|PM|RE|RG|RO|RU|SO|SC|SE|SI|SL|SO|SQ|ST|SU|SZ|T[BW]|TC|TE|TM|TR|UC|US|VW|V|[BW]|C)', Name.Builtin), ('(\\[)([0-9.]+)(\\])', bygroups(Punctuation, Literal.Number, Punctuation)), ('(\\[)([0-9]{4}-[0-9]{2}-[0-9]{2})(\\])', bygroups(Punctuation, Literal.Date, Punctuation)), ('(\\[)([a-z]{2})(\\])', bygroups(Punctuation, String, Punctuation)), ('(\\[)([a-z]{2})(:)([a-z]{2})(\\])', bygroups(Punctuation, String, Punctuation, String, Punctuation)), ('(\\[)([\\w\\s#()+,\\-.:?]+)(\\])', bygroups(Punctuation, String, Punctuation)), ('(\\[)(\\s.*)(\\])', bygroups(Punctuation, Whitespace, Punctuation)), ('\\s+', Whitespace)]}
  }

  class BashLexer {
      + name = 'Bash'
      + aliases = ['bash', 'sh', 'ksh', 'zsh', 'shell', 'openrc']
      + filenames = ['*.sh', '*.ksh', '*.bash', '*.ebuild', '*.eclass', '*.exheres-0', '*.exlib', '*.zsh', '.bashrc', 'bashrc', '.bash_*', 'bash_*', 'zshrc', '.zshrc', '.kshrc', 'kshrc', 'PKGBUILD']
      + mimetypes = ['application/x-sh', 'application/x-shellscript', 'text/x-shellscript']
      + url = 'https://en.wikipedia.org/wiki/Unix_shell'
      + version_added = '0.6'
      + tokens = {'root': [include('basic'), ('`', String.Backtick, 'backticks'), include('data'), include('interp')], 'interp': [('\\$\\(\\(', Keyword, 'math'), ('\\$\\(', Keyword, 'paren'), ('\\$\\{#?', String.Interpol, 'curly'), ('\\$[a-zA-Z_]\\w*', Name.Variable), ('\\$(?:\\d+|[#$?!_*@-])', Name.Variable), ('\\$', Text)], 'basic': [('\\b(if|fi|else|while|in|do|done|for|then|return|function|case|select|break|continue|until|esac|elif)(\\s*)\\b', bygroups(Keyword, Whitespace)), ('\\b(alias|bg|bind|builtin|caller|cd|command|compgen|complete|declare|dirs|disown|echo|enable|eval|exec|exit|export|false|fc|fg|getopts|hash|help|history|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|set|shift|shopt|source|suspend|test|time|times|trap|true|type|typeset|ulimit|umask|unalias|unset|wait)(?=[\\s)`])', Name.Builtin), ('\\A#!.+\\n', Comment.Hashbang), ('#.*\\n', Comment.Single), ('\\\\[\\w\\W]', String.Escape), ('(\\b\\w+)(\\s*)(\\+?=)', bygroups(Name.Variable, Whitespace, Operator)), ('[\\[\\]{}()=]', Operator), ('<<<', Operator), ("<<-?\\s*(\\'?)\\\\?(\\w+)[\\w\\W]+?\\2", String), ('&&|\\|\\|', Operator)], 'data': [('(?s)\\$?"(\\\\.|[^"\\\\$])*"', String.Double), ('"', String.Double, 'string'), ("(?s)\\$'(\\\\\\\\|\\\\[0-7]+|\\\\.|[^'\\\\])*'", String.Single), ("(?s)'.*?'", String.Single), (';', Punctuation), ('&', Punctuation), ('\\|', Punctuation), ('\\s+', Whitespace), ('\\d+\\b', Number), ('[^=\\s\\[\\]{}()$"\\\'`\\\\<&|;]+', Text), ('<', Text)], 'string': [('"', String.Double, '#pop'), ('(?s)(\\\\\\\\|\\\\[0-7]+|\\\\.|[^"\\\\$])+', String.Double), include('interp')], 'curly': [('\\}', String.Interpol, '#pop'), (':-', Keyword), ('\\w+', Name.Variable), ('[^}:"\\\'`$\\\\]+', Punctuation), (':', Punctuation), include('root')], 'paren': [('\\)', Keyword, '#pop'), include('root')], 'math': [('\\)\\)', Keyword, '#pop'), ('\\*\\*|\\|\\||<<|>>|[-+*/%^|&<>]', Operator), ('\\d+#[\\da-zA-Z]+', Number), ('\\d+#(?! )', Number), ('0[xX][\\da-fA-F]+', Number), ('\\d+', Number), ('[a-zA-Z_]\\w*', Name.Variable), include('root')], 'backticks': [('`', String.Backtick, '#pop'), include('root')]}
  --
      + analyse_text(text)
  }

  class SlurmBashLexer {
      + name = 'Slurm'
      + aliases = ['slurm', 'sbatch']
      + filenames = ['*.sl']
      + mimetypes = []
      + version_added = '2.4'
      + EXTRA_KEYWORDS = {'srun'}
  --
      + get_tokens_unprocessed(text)
  }

  class ShellSessionBaseLexer {
      + get_tokens_unprocessed(text)
  }

  class BashSessionLexer {
      + name = 'Bash Session'
      + aliases = ['console', 'shell-session']
      + filenames = ['*.sh-session', '*.shell-session']
      + mimetypes = ['application/x-shell-session', 'application/x-sh-session']
      + url = 'https://en.wikipedia.org/wiki/Unix_shell'
      + version_added = '1.1'
  }

  class BatchLexer {
      + name = 'Batchfile'
      + aliases = ['batch', 'bat', 'dosbatch', 'winbatch']
      + filenames = ['*.bat', '*.cmd']
      + mimetypes = ['application/x-dos-batch']
      + url = 'https://en.wikipedia.org/wiki/Batch_file'
      + version_added = '0.7'
      + flags = re.MULTILINE | re.IGNORECASE
      + tokens = {'root': _make_begin_state(False), 'follow': _make_follow_state(False), 'arithmetic': _make_arithmetic_state(False), 'call': _make_call_state(False), 'label': _make_label_state(False), 'redirect': _make_redirect_state(False), 'root/compound': _make_begin_state(True), 'follow/compound': _make_follow_state(True), 'arithmetic/compound': _make_arithmetic_state(True), 'call/compound': _make_call_state(True), 'label/compound': _make_label_state(True), 'redirect/compound': _make_redirect_state(True), 'variable-or-escape': [(_variable, Name.Variable), (f'%%|\\^[{_nl}]?(\\^!|[\\w\\W])', String.Escape)], 'string': [('"', String.Double, '#pop'), (_variable, Name.Variable), ('\\^!|%%', String.Escape), (f'[^"%^{_nl}]+|[%^]', String.Double), default('#pop')], 'sqstring': [include('variable-or-escape'), ('[^%]+|%', String.Single)], 'bqstring': [include('variable-or-escape'), ('[^%]+|%', String.Backtick)], 'text': [('"', String.Double, 'string'), include('variable-or-escape'), (f'[^"%^{_nlws}{_punct}\\d)]+|.', Text)], 'variable': [('"', String.Double, 'string'), include('variable-or-escape'), (f'[^"%^{_nl}]+|.', Name.Variable)], 'for': [(f'({_space})(in)({_space})(\\()', bygroups(using(this, state='text'), Keyword, using(this, state='text'), Punctuation), '#pop'), include('follow')], 'for2': [('\\)', Punctuation), (f'({_space})(do{_token_terminator})', bygroups(using(this, state='text'), Keyword), '#pop'), (f'[{_nl}]+', Text), include('follow')], 'for/f': [(f'(")((?:{_variable}|[^"])*?")([{_nlws}]*)(\\))', bygroups(String.Double, using(this, state='string'), Text, Punctuation)), ('"', String.Double, ('#pop', 'for2', 'string')), (f"('(?:%%|{_variable}|[\\w\\W])*?')([{_nlws}]*)(\\))", bygroups(using(this, state='sqstring'), Text, Punctuation)), (f'(`(?:%%|{_variable}|[\\w\\W])*?`)([{_nlws}]*)(\\))', bygroups(using(this, state='bqstring'), Text, Punctuation)), include('for2')], 'for/l': [('-?\\d+', Number.Integer), include('for2')], 'if': [(f'((?:cmdextversion|errorlevel){_token_terminator})({_space})(\\d+)', bygroups(Keyword, using(this, state='text'), Number.Integer), '#pop'), (f'(defined{_token_terminator})({_space})({_stoken})', bygroups(Keyword, using(this, state='text'), using(this, state='variable')), '#pop'), (f'(exist{_token_terminator})({_space}{_stoken})', bygroups(Keyword, using(this, state='text')), '#pop'), (f'({_number}{_space})({_opword})({_space}{_number})', bygroups(using(this, state='arithmetic'), Operator.Word, using(this, state='arithmetic')), '#pop'), (_stoken, using(this, state='text'), ('#pop', 'if2'))], 'if2': [(f'({_space}?)(==)({_space}?{_stoken})', bygroups(using(this, state='text'), Operator, using(this, state='text')), '#pop'), (f'({_space})({_opword})({_space}{_stoken})', bygroups(using(this, state='text'), Operator.Word, using(this, state='text')), '#pop')], '(?': [(_space, using(this, state='text')), ('\\(', Punctuation, ('#pop', 'else?', 'root/compound')), default('#pop')], 'else?': [(_space, using(this, state='text')), (f'else{_token_terminator}', Keyword, '#pop'), default('#pop')]}
  }

  class MSDOSSessionLexer {
      + name = 'MSDOS Session'
      + aliases = ['doscon']
      + filenames = []
      + mimetypes = []
      + url = 'https://en.wikipedia.org/wiki/MS-DOS'
      + version_added = '2.1'
  }

  class TcshLexer {
      + name = 'Tcsh'
      + aliases = ['tcsh', 'csh']
      + filenames = ['*.tcsh', '*.csh']
      + mimetypes = ['application/x-csh']
      + url = 'https://www.tcsh.org'
      + version_added = '0.10'
      + tokens = {'root': [include('basic'), ('\\$\\(', Keyword, 'paren'), ('\\$\\{#?', Keyword, 'curly'), ('`', String.Backtick, 'backticks'), include('data')], 'basic': [('\\b(if|endif|else|while|then|foreach|case|default|break|continue|goto|breaksw|end|switch|endsw)\\s*\\b', Keyword), ('\\b(alias|alloc|bg|bindkey|builtins|bye|caller|cd|chdir|complete|dirs|echo|echotc|eval|exec|exit|fg|filetest|getxvers|glob|getspath|hashstat|history|hup|inlib|jobs|kill|limit|log|login|logout|ls-F|migrate|newgrp|nice|nohup|notify|onintr|popd|printenv|pushd|rehash|repeat|rootnode|popd|pushd|set|shift|sched|setenv|setpath|settc|setty|setxvers|shift|source|stop|suspend|source|suspend|telltc|time|umask|unalias|uncomplete|unhash|universe|unlimit|unset|unsetenv|ver|wait|warp|watchlog|where|which)\\s*\\b', Name.Builtin), ('#.*', Comment), ('\\\\[\\w\\W]', String.Escape), ('(\\b\\w+)(\\s*)(=)', bygroups(Name.Variable, Text, Operator)), ('[\\[\\]{}()=]+', Operator), ("<<\\s*(\\'?)\\\\?(\\w+)[\\w\\W]+?\\2", String), (';', Punctuation)], 'data': [('(?s)"(\\\\\\\\|\\\\[0-7]+|\\\\.|[^"\\\\])*"', String.Double), ("(?s)'(\\\\\\\\|\\\\[0-7]+|\\\\.|[^'\\\\])*'", String.Single), ('\\s+', Text), ('[^=\\s\\[\\]{}()$"\\\'`\\\\;#]+', Text), ('\\d+(?= |\\Z)', Number), ('\\$#?(\\w+|.)', Name.Variable)], 'curly': [('\\}', Keyword, '#pop'), (':-', Keyword), ('\\w+', Name.Variable), ('[^}:"\\\'`$]+', Punctuation), (':', Punctuation), include('root')], 'paren': [('\\)', Keyword, '#pop'), include('root')], 'backticks': [('`', String.Backtick, '#pop'), include('root')]}
  }

  class TcshSessionLexer {
      + name = 'Tcsh Session'
      + aliases = ['tcshcon']
      + filenames = []
      + mimetypes = []
      + url = 'https://www.tcsh.org'
      + version_added = '2.1'
  }

  class PowerShellLexer {
      + name = 'PowerShell'
      + aliases = ['powershell', 'pwsh', 'posh', 'ps1', 'psm1']
      + filenames = ['*.ps1', '*.psm1']
      + mimetypes = ['text/x-powershell']
      + url = 'https://learn.microsoft.com/en-us/powershell'
      + version_added = '1.5'
      + flags = re.DOTALL | re.IGNORECASE | re.MULTILINE
      + keywords = 'while validateset validaterange validatepattern validatelength validatecount until trap switch return ref process param parameter in if global: local: function foreach for finally filter end elseif else dynamicparam do default continue cmdletbinding break begin alias \\? % #script #private #local #global mandatory parametersetname position valuefrompipeline valuefrompipelinebypropertyname valuefromremainingarguments helpmessage try catch throw'.split()
      + operators = 'and as band bnot bor bxor casesensitive ccontains ceq cge cgt cle clike clt cmatch cne cnotcontains cnotlike cnotmatch contains creplace eq exact f file ge gt icontains ieq ige igt ile ilike ilt imatch ine inotcontains inotlike inotmatch ireplace is isnot le like lt match ne not notcontains notlike notmatch or regex replace wildcard'.split()
      + verbs = 'write where watch wait use update unregister unpublish unprotect unlock uninstall undo unblock trace test tee take sync switch suspend submit stop step start split sort skip show set send select search scroll save revoke resume restore restart resolve resize reset request repair rename remove register redo receive read push publish protect pop ping out optimize open new move mount merge measure lock limit join invoke install initialize import hide group grant get format foreach find export expand exit enter enable edit dismount disconnect disable deny debug cxnew copy convertto convertfrom convert connect confirm compress complete compare close clear checkpoint block backup assert approve aggregate add'.split()
      + aliases_ = 'ac asnp cat cd cfs chdir clc clear clhy cli clp cls clv cnsn compare copy cp cpi cpp curl cvpa dbp del diff dir dnsn ebp echo epal epcsv epsn erase etsn exsn fc fhx fl foreach ft fw gal gbp gc gci gcm gcs gdr ghy gi gjb gl gm gmo gp gps gpv group gsn gsnp gsv gu gv gwmi h history icm iex ihy ii ipal ipcsv ipmo ipsn irm ise iwmi iwr kill lp ls man md measure mi mount move mp mv nal ndr ni nmo npssc nsn nv ogv oh popd ps pushd pwd r rbp rcjb rcsn rd rdr ren ri rjb rm rmdir rmo rni rnp rp rsn rsnp rujb rv rvpa rwmi sajb sal saps sasv sbp sc select set shcm si sl sleep sls sort sp spjb spps spsv start sujb sv swmi tee trcm type wget where wjb write'.split()
      + commenthelp = 'component description example externalhelp forwardhelpcategory forwardhelptargetname functionality inputs link notes outputs parameter remotehelprunspace role synopsis'.split()
      + tokens = {'root': [('\\(', Punctuation, 'child'), ('\\s+', Text), ('^(\\s*#[#\\s]*)(\\.(?:{}))([^\\n]*$)'.format('|'.join(commenthelp)), bygroups(Comment, String.Doc, Comment)), ('#[^\\n]*?$', Comment), ('(&lt;|<)#', Comment.Multiline, 'multline'), ('@"\\n', String.Heredoc, 'heredoc-double'), ("@'\\n.*?\\n'@", String.Heredoc), ('`[\\\'"$@-]', Punctuation), ('"', String.Double, 'string'), ("'([^']|'')*'", String.Single), ('(\\$|@@|@)((global|script|private|env):)?\\w+', Name.Variable), ('({})\\b'.format('|'.join(keywords)), Keyword), ('-({})\\b'.format('|'.join(operators)), Operator), ('({})-[a-z_]\\w*\\b'.format('|'.join(verbs)), Name.Builtin), ('({})\\s'.format('|'.join(aliases_)), Name.Builtin), ('\\[[a-z_\\[][\\w. `,\\[\\]]*\\]', Name.Constant), ('-[a-z_]\\w*', Name), ('\\w+', Name), ('[.,;:@{}\\[\\]$()=+*/\\\\&%!~?^`|<>-]', Punctuation)], 'child': [('\\)', Punctuation, '#pop'), include('root')], 'multline': [('[^#&.]+', Comment.Multiline), ('#(>|&gt;)', Comment.Multiline, '#pop'), ('\\.({})'.format('|'.join(commenthelp)), String.Doc), ('[#&.]', Comment.Multiline)], 'string': [('`[0abfnrtv\'\\"$`]', String.Escape), ('[^$`"]+', String.Double), ('\\$\\(', Punctuation, 'child'), ('""', String.Double), ('[`$]', String.Double), ('"', String.Double, '#pop')], 'heredoc-double': [('\\n"@', String.Heredoc, '#pop'), ('\\$\\(', Punctuation, 'child'), ('[^@\\n]+"]', String.Heredoc), ('.', String.Heredoc)]}
  }

  class PowerShellSessionLexer {
      + name = 'PowerShell Session'
      + aliases = ['pwsh-session', 'ps1con']
      + filenames = []
      + mimetypes = []
      + url = 'https://learn.microsoft.com/en-us/powershell'
      + version_added = '2.1'
  }

  class FishShellLexer {
      + name = 'Fish'
      + aliases = ['fish', 'fishshell']
      + filenames = ['*.fish', '*.load']
      + mimetypes = ['application/x-fish']
      + url = 'https://fishshell.com'
      + version_added = '2.1'
      + tokens = {'root': [include('basic'), include('data'), include('interp')], 'interp': [('\\$\\(\\(', Keyword, 'math'), ('\\(', Keyword, 'paren'), ('\\$#?(\\w+|.)', Name.Variable)], 'basic': [('\\b(begin|end|if|else|while|break|for|in|return|function|block|case|continue|switch|not|and|or|set|echo|exit|pwd|true|false|cd|count|test)(\\s*)\\b', bygroups(Keyword, Text)), ('\\b(alias|bg|bind|breakpoint|builtin|command|commandline|complete|contains|dirh|dirs|emit|eval|exec|fg|fish|fish_config|fish_indent|fish_pager|fish_prompt|fish_right_prompt|fish_update_completions|fishd|funced|funcsave|functions|help|history|isatty|jobs|math|mimedb|nextd|open|popd|prevd|psub|pushd|random|read|set_color|source|status|trap|type|ulimit|umask|vared|fc|getopts|hash|kill|printf|time|wait)\\s*\\b(?!\\.)', Name.Builtin), ('#.*\\n', Comment), ('\\\\[\\w\\W]', String.Escape), ('(\\b\\w+)(\\s*)(=)', bygroups(Name.Variable, Whitespace, Operator)), ('[\\[\\]()=]', Operator), ("<<-?\\s*(\\'?)\\\\?(\\w+)[\\w\\W]+?\\2", String)], 'data': [('(?s)\\$?"(\\\\\\\\|\\\\[0-7]+|\\\\.|[^"\\\\$])*"', String.Double), ('"', String.Double, 'string'), ("(?s)\\$'(\\\\\\\\|\\\\[0-7]+|\\\\.|[^'\\\\])*'", String.Single), ("(?s)'.*?'", String.Single), (';', Punctuation), ('&|\\||\\^|<|>', Operator), ('\\s+', Text), ('\\d+(?= |\\Z)', Number), ('[^=\\s\\[\\]{}()$"\\\'`\\\\<&|;]+', Text)], 'string': [('"', String.Double, '#pop'), ('(?s)(\\\\\\\\|\\\\[0-7]+|\\\\.|[^"\\\\$])+', String.Double), include('interp')], 'paren': [('\\)', Keyword, '#pop'), include('root')], 'math': [('\\)\\)', Keyword, '#pop'), ('[-+*/%^|&]|\\*\\*|\\|\\|', Operator), ('\\d+#\\d+', Number), ('\\d+#(?! )', Number), ('\\d+', Number), include('root')]}
  }

  class ExeclineLexer {
      + name = 'execline'
      + aliases = ['execline']
      + filenames = ['*.exec']
      + url = 'https://skarnet.org/software/execline'
      + version_added = '2.7'
      + tokens = {'root': [include('basic'), include('data'), include('interp')], 'interp': [('\\$\\{', String.Interpol, 'curly'), ('\\$[\\w@#]+', Name.Variable), ('\\$', Text)], 'basic': [('\\b(background|backtick|cd|define|dollarat|elgetopt|elgetpositionals|elglob|emptyenv|envfile|exec|execlineb|exit|export|fdblock|fdclose|fdmove|fdreserve|fdswap|forbacktickx|foreground|forstdin|forx|getcwd|getpid|heredoc|homeof|if|ifelse|ifte|ifthenelse|importas|loopwhilex|multidefine|multisubstitute|pipeline|piperw|posix-cd|redirfd|runblock|shift|trap|tryexec|umask|unexport|wait|withstdinas)\\b', Name.Builtin), ('\\A#!.+\\n', Comment.Hashbang), ('#.*\\n', Comment.Single), ('[{}]', Operator)], 'data': [('(?s)"(\\\\.|[^"\\\\$])*"', String.Double), ('"', String.Double, 'string'), ('\\s+', Text), ('[^\\s{}$"\\\\]+', Text)], 'string': [('"', String.Double, '#pop'), ('(?s)(\\\\\\\\|\\\\.|[^"\\\\$])+', String.Double), include('interp')], 'curly': [('\\}', String.Interpol, '#pop'), ('[\\w#@]+', Name.Variable), include('root')]}
  --
      + analyse_text(text)
  }

  class SieveLexer {
      + name = 'Sieve'
      + filenames = ['*.siv', '*.sieve']
      + aliases = ['sieve']
      + url = 'https://en.wikipedia.org/wiki/Sieve_(mail_filtering_language)'
      + version_added = '2.6'
      + tokens = {'root': [('\\s+', Text), ('[();,{}\\[\\]]', Punctuation), ('(?i)require', Keyword.Namespace), ('(?i)(:)(addresses|all|contains|content|create|copy|comparator|count|days|detail|domain|fcc|flags|from|handle|importance|is|localpart|length|lowerfirst|lower|matches|message|mime|options|over|percent|quotewildcard|raw|regex|specialuse|subject|text|under|upperfirst|upper|value)', bygroups(Name.Tag, Name.Tag)), ('(?i)(address|addflag|allof|anyof|body|discard|elsif|else|envelope|ereject|exists|false|fileinto|if|hasflag|header|keep|notify_method_capability|notify|not|redirect|reject|removeflag|setflag|size|spamtest|stop|string|true|vacation|virustest)', Name.Builtin), ('(?i)set', Keyword.Declaration), ('([0-9.]+)([kmgKMG])?', bygroups(Literal.Number, Literal.Number)), ('#.*$', Comment.Single), ('/\\*.*\\*/', Comment.Multiline), ('"[^"]*?"', String), ('text:', Name.Tag, 'text')], 'text': [('[^.].*?\\n', String), ('^\\.', Punctuation, '#pop')]}
  }

  class SlashLanguageLexer {
      + tokens = {'root': [('<%=', Comment.Preproc, move_state('slash')), ('<%!!', Comment.Preproc, move_state('slash')), ('<%#.*?%>', Comment.Multiline), ('<%', Comment.Preproc, move_state('slash')), ('.|\\n', Other)], 'string': [('\\\\', String.Escape, move_state('string_e')), ('\\"', String, move_state('slash')), ('#\\{', String.Interpol, 'slash'), ('.|\\n', String)], 'string_e': [('n', String.Escape, move_state('string')), ('t', String.Escape, move_state('string')), ('r', String.Escape, move_state('string')), ('e', String.Escape, move_state('string')), ('x[a-fA-F0-9]{2}', String.Escape, move_state('string')), ('.', String.Escape, move_state('string'))], 'regexp': [('}[a-z]*', String.Regex, move_state('slash')), ('\\\\(.|\\n)', String.Regex), ('{', String.Regex, 'regexp_r'), ('.|\\n', String.Regex)], 'regexp_r': [('}[a-z]*', String.Regex, '#pop'), ('\\\\(.|\\n)', String.Regex), ('{', String.Regex, 'regexp_r')], 'slash': [('%>', Comment.Preproc, move_state('root')), ('\\"', String, move_state('string')), ("'[a-zA-Z0-9_]+", String), ('%r{', String.Regex, move_state('regexp')), ('/\\*.*?\\*/', Comment.Multiline), ('(#|//).*?\\n', Comment.Single), ('-?[0-9]+e[+-]?[0-9]+', Number.Float), ('-?[0-9]+\\.[0-9]+(e[+-]?[0-9]+)?', Number.Float), ('-?[0-9]+', Number.Integer), ('nil' + _nkw, Name.Builtin), ('true' + _nkw, Name.Builtin), ('false' + _nkw, Name.Builtin), ('self' + _nkw, Name.Builtin), ("(class)(\\s+)([A-Z][a-zA-Z0-9_\\']*)", bygroups(Keyword, Whitespace, Name.Class)), ('class' + _nkw, Keyword), ('extends' + _nkw, Keyword), ("(def)(\\s+)(self)(\\s*)(\\.)(\\s*)([a-z_][a-zA-Z0-9_\\']*=?|<<|>>|==|<=>|<=|<|>=|>|\\+|-(self)?|~(self)?|\\*|/|%|^|&&|&|\\||\\[\\]=?)", bygroups(Keyword, Whitespace, Name.Builtin, Whitespace, Punctuation, Whitespace, Name.Function)), ("(def)(\\s+)([a-z_][a-zA-Z0-9_\\']*=?|<<|>>|==|<=>|<=|<|>=|>|\\+|-(self)?|~(self)?|\\*|/|%|^|&&|&|\\||\\[\\]=?)", bygroups(Keyword, Whitespace, Name.Function)), ('def' + _nkw, Keyword), ('if' + _nkw, Keyword), ('elsif' + _nkw, Keyword), ('else' + _nkw, Keyword), ('unless' + _nkw, Keyword), ('for' + _nkw, Keyword), ('in' + _nkw, Keyword), ('while' + _nkw, Keyword), ('until' + _nkw, Keyword), ('and' + _nkw, Keyword), ('or' + _nkw, Keyword), ('not' + _nkw, Keyword), ('lambda' + _nkw, Keyword), ('try' + _nkw, Keyword), ('catch' + _nkw, Keyword), ('return' + _nkw, Keyword), ('next' + _nkw, Keyword), ('last' + _nkw, Keyword), ('throw' + _nkw, Keyword), ('use' + _nkw, Keyword), ('switch' + _nkw, Keyword), ('\\\\', Keyword), ('λ', Keyword), ('__FILE__' + _nkw, Name.Builtin.Pseudo), ('__LINE__' + _nkw, Name.Builtin.Pseudo), ("[A-Z][a-zA-Z0-9_\\']*" + _nkw, Name.Constant), ("[a-z_][a-zA-Z0-9_\\']*" + _nkw, Name), ("@[a-z_][a-zA-Z0-9_\\']*" + _nkw, Name.Variable.Instance), ("@@[a-z_][a-zA-Z0-9_\\']*" + _nkw, Name.Variable.Class), ('\\(', Punctuation), ('\\)', Punctuation), ('\\[', Punctuation), ('\\]', Punctuation), ('\\{', Punctuation), ('\\}', right_angle_bracket), (';', Punctuation), (',', Punctuation), ('<<=', Operator), ('>>=', Operator), ('<<', Operator), ('>>', Operator), ('==', Operator), ('!=', Operator), ('=>', Operator), ('=', Operator), ('<=>', Operator), ('<=', Operator), ('>=', Operator), ('<', Operator), ('>', Operator), ('\\+\\+', Operator), ('\\+=', Operator), ('-=', Operator), ('\\*\\*=', Operator), ('\\*=', Operator), ('\\*\\*', Operator), ('\\*', Operator), ('/=', Operator), ('\\+', Operator), ('-', Operator), ('/', Operator), ('%=', Operator), ('%', Operator), ('^=', Operator), ('&&=', Operator), ('&=', Operator), ('&&', Operator), ('&', Operator), ('\\|\\|=', Operator), ('\\|=', Operator), ('\\|\\|', Operator), ('\\|', Operator), ('!', Operator), ('\\.\\.\\.', Operator), ('\\.\\.', Operator), ('\\.', Operator), ('::', Operator), (':', Operator), ('(\\s|\\n)+', Whitespace), ("[a-z_][a-zA-Z0-9_\\']*", Name.Variable)]}
  --
      + move_state(new_state)
      + right_angle_bracket(lexer, match, ctx)
  }

  class SlashLexer {
      + name = 'Slash'
      + aliases = ['slash']
      + filenames = ['*.sla']
      + url = 'https://github.com/arturadib/Slash-A'
      + version_added = '2.4'
  --
      - __init__()
  }

  class SmalltalkLexer {
      + name = 'Smalltalk'
      + url = 'http://www.smalltalk.org/'
      + filenames = ['*.st']
      + aliases = ['smalltalk', 'squeak', 'st']
      + mimetypes = ['text/x-smalltalk']
      + version_added = '0.10'
      + tokens = {'root': [('(<)(\\w+:)(.*?)(>)', bygroups(Text, Keyword, Text, Text)), include('squeak fileout'), include('whitespaces'), include('method definition'), ('(\\|)([\\w\\s]*)(\\|)', bygroups(Operator, Name.Variable, Operator)), include('objects'), ('\\^|\\:=|\\_', Operator), ('[\\]({}.;!]', Text)], 'method definition': [('([a-zA-Z]+\\w*:)(\\s*)(\\w+)', bygroups(Name.Function, Text, Name.Variable)), ('^(\\b[a-zA-Z]+\\w*\\b)(\\s*)$', bygroups(Name.Function, Text)), ('^([-+*/\\\\~<>=|&!?,@%]+)(\\s*)(\\w+)(\\s*)$', bygroups(Name.Function, Text, Name.Variable, Text))], 'blockvariables': [include('whitespaces'), ('(:)(\\s*)(\\w+)', bygroups(Operator, Text, Name.Variable)), ('\\|', Operator, '#pop'), default('#pop')], 'literals': [("'(''|[^'])*'", String, 'afterobject'), ('\\$.', String.Char, 'afterobject'), ('#\\(', String.Symbol, 'parenth'), ('\\)', Text, 'afterobject'), ('(\\d+r)?-?\\d+(\\.\\d+)?(e-?\\d+)?', Number, 'afterobject')], '_parenth_helper': [include('whitespaces'), ('(\\d+r)?-?\\d+(\\.\\d+)?(e-?\\d+)?', Number), ('[-+*/\\\\~<>=|&#!?,@%\\w:]+', String.Symbol), ("'(''|[^'])*'", String), ('\\$.', String.Char), ('#*\\(', String.Symbol, 'inner_parenth')], 'parenth': [('\\)', String.Symbol, ('root', 'afterobject')), include('_parenth_helper')], 'inner_parenth': [('\\)', String.Symbol, '#pop'), include('_parenth_helper')], 'whitespaces': [('\\s+', Text), ('"(""|[^"])*"', Comment)], 'objects': [('\\[', Text, 'blockvariables'), ('\\]', Text, 'afterobject'), ('\\b(self|super|true|false|nil|thisContext)\\b', Name.Builtin.Pseudo, 'afterobject'), ('\\b[A-Z]\\w*(?!:)\\b', Name.Class, 'afterobject'), ('\\b[a-z]\\w*(?!:)\\b', Name.Variable, 'afterobject'), ('#("(""|[^"])*"|[-+*/\\\\~<>=|&!?,@%]+|[\\w:]+)', String.Symbol, 'afterobject'), include('literals')], 'afterobject': [('! !$', Keyword, '#pop'), include('whitespaces'), ('\\b(ifTrue:|ifFalse:|whileTrue:|whileFalse:|timesRepeat:)', Name.Builtin, '#pop'), ('\\b(new\\b(?!:))', Name.Builtin), ('\\:=|\\_', Operator, '#pop'), ('\\b[a-zA-Z]+\\w*:', Name.Function, '#pop'), ('\\b[a-zA-Z]+\\w*', Name.Function), ('\\w+:?|[-+*/\\\\~<>=|&!?,@%]+', Name.Function, '#pop'), ('\\.', Punctuation, '#pop'), (';', Punctuation), ('[\\])}]', Text), ('[\\[({]', Text, '#pop')], 'squeak fileout': [('^"(""|[^"])*"!', Keyword), ("^'(''|[^'])*'!", Keyword), ('^(!)(\\w+)( commentStamp: )(.*?)( prior: .*?!\\n)(.*?)(!)', bygroups(Keyword, Name.Class, Keyword, String, Keyword, Text, Keyword)), ("^(!)(\\w+(?: class)?)( methodsFor: )('(?:''|[^'])*')(.*?!)", bygroups(Keyword, Name.Class, Keyword, String, Keyword)), ('^(\\w+)( subclass: )(#\\w+)(\\s+instanceVariableNames: )(.*?)(\\s+classVariableNames: )(.*?)(\\s+poolDictionaries: )(.*?)(\\s+category: )(.*?)(!)', bygroups(Name.Class, Keyword, String.Symbol, Keyword, String, Keyword, String, Keyword, String, Keyword, String, Keyword)), ('^(\\w+(?: class)?)(\\s+instanceVariableNames: )(.*?)(!)', bygroups(Name.Class, Keyword, String, Keyword)), ('(!\\n)(\\].*)(! !)$', bygroups(Keyword, Text, Keyword)), ('! !$', Keyword)]}
  }

  class NewspeakLexer {
      + name = 'Newspeak'
      + url = 'http://newspeaklanguage.org/'
      + filenames = ['*.ns2']
      + aliases = ['newspeak']
      + mimetypes = ['text/x-newspeak']
      + version_added = '1.1'
      + tokens = {'root': [('\\b(Newsqueak2)\\b', Keyword.Declaration), ("'[^']*'", String), ('\\b(class)(\\s+)(\\w+)(\\s*)', bygroups(Keyword.Declaration, Text, Name.Class, Text)), ('\\b(mixin|self|super|private|public|protected|nil|true|false)\\b', Keyword), ('(\\w+\\:)(\\s*)([a-zA-Z_]\\w+)', bygroups(Name.Function, Text, Name.Variable)), ('(\\w+)(\\s*)(=)', bygroups(Name.Attribute, Text, Operator)), ('<\\w+>', Comment.Special), include('expressionstat'), include('whitespace')], 'expressionstat': [('(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float), ('\\d+', Number.Integer), (':\\w+', Name.Variable), ('(\\w+)(::)', bygroups(Name.Variable, Operator)), ('\\w+:', Name.Function), ('\\w+', Name.Variable), ('\\(|\\)', Punctuation), ('\\[|\\]', Punctuation), ('\\{|\\}', Punctuation), ('(\\^|\\+|\\/|~|\\*|<|>|=|@|%|\\||&|\\?|!|,|-|:)', Operator), ('\\.|;', Punctuation), include('whitespace'), include('literals')], 'literals': [('\\$.', String), ("'[^']*'", String), ("#'[^']*'", String.Symbol), ('#\\w+:?', String.Symbol), ('#(\\+|\\/|~|\\*|<|>|=|@|%|\\||&|\\?|!|,|-)+', String.Symbol)], 'whitespace': [('\\s+', Text), ('"[^"]*"', Comment)]}
  }

  class SmithyLexer {
      + name = 'Smithy'
      + url = 'https://awslabs.github.io/smithy/'
      + filenames = ['*.smithy']
      + aliases = ['smithy']
      + version_added = '2.10'
      + unquoted = '[A-Za-z0-9_\\.#$-]+'
      + identifier = '[A-Za-z0-9_\\.#$-]+'
      + simple_shapes = ('use', 'byte', 'short', 'integer', 'long', 'float', 'document', 'double', 'bigInteger', 'bigDecimal', 'boolean', 'blob', 'string', 'timestamp')
      + aggregate_shapes = ('apply', 'list', 'map', 'set', 'structure', 'union', 'resource', 'operation', 'service', 'trait')
      + tokens = {'root': [('///.*$', Comment.Multiline), ('//.*$', Comment), ('@[0-9a-zA-Z\\.#-]*', Name.Decorator), ('(=)', Name.Decorator), ('^(\\$version)(:)(.+)', bygroups(Keyword.Declaration, Name.Decorator, Name.Class)), ('^(namespace)(\\s+' + identifier + ')\\b', bygroups(Keyword.Declaration, Name.Class)), (words(simple_shapes, prefix='^', suffix='(\\s+' + identifier + ')\\b'), bygroups(Keyword.Declaration, Name.Class)), (words(aggregate_shapes, prefix='^', suffix='(\\s+' + identifier + ')'), bygroups(Keyword.Declaration, Name.Class)), ('^(metadata)(\\s+)((?:\\S+)|(?:\\"[^"]+\\"))(\\s*)(=)', bygroups(Keyword.Declaration, Whitespace, Name.Class, Whitespace, Name.Decorator)), ('(true|false|null)', Keyword.Constant), ('(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)', Number), (identifier + ':', Name.Label), (identifier, Name.Variable.Class), ('\\[', Text, '#push'), ('\\]', Text, '#pop'), ('\\(', Text, '#push'), ('\\)', Text, '#pop'), ('\\{', Text, '#push'), ('\\}', Text, '#pop'), ('"{3}(\\\\\\\\|\\n|\\\\")*"{3}', String.Doc), ('"(\\\\\\\\|\\n|\\\\"|[^"])*"', String.Double), ("'(\\\\\\\\|\\n|\\\\'|[^'])*'", String.Single), ('[:,]+', Punctuation), ('\\s+', Whitespace)]}
  }

  class NuSMVLexer {
      + name = 'NuSMV'
      + aliases = ['nusmv']
      + filenames = ['*.smv']
      + mimetypes = []
      + url = 'https://nusmv.fbk.eu'
      + version_added = '2.2'
      + tokens = {'root': [('(?s)\\/\\-\\-.*?\\-\\-/', Comment), ('--.*\\n', Comment), (words(('MODULE', 'DEFINE', 'MDEFINE', 'CONSTANTS', 'VAR', 'IVAR', 'FROZENVAR', 'INIT', 'TRANS', 'INVAR', 'SPEC', 'CTLSPEC', 'LTLSPEC', 'PSLSPEC', 'COMPUTE', 'NAME', 'INVARSPEC', 'FAIRNESS', 'JUSTICE', 'COMPASSION', 'ISA', 'ASSIGN', 'CONSTRAINT', 'SIMPWFF', 'CTLWFF', 'LTLWFF', 'PSLWFF', 'COMPWFF', 'IN', 'MIN', 'MAX', 'MIRROR', 'PRED', 'PREDICATES'), suffix='(?![\\w$#-])'), Keyword.Declaration), ('process(?![\\w$#-])', Keyword), (words(('array', 'of', 'boolean', 'integer', 'real', 'word'), suffix='(?![\\w$#-])'), Keyword.Type), (words(('case', 'esac'), suffix='(?![\\w$#-])'), Keyword), (words(('word1', 'bool', 'signed', 'unsigned', 'extend', 'resize', 'sizeof', 'uwconst', 'swconst', 'init', 'self', 'count', 'abs', 'max', 'min'), suffix='(?![\\w$#-])'), Name.Builtin), (words(('EX', 'AX', 'EF', 'AF', 'EG', 'AG', 'E', 'F', 'O', 'G', 'H', 'X', 'Y', 'Z', 'A', 'U', 'S', 'V', 'T', 'BU', 'EBF', 'ABF', 'EBG', 'ABG', 'next', 'mod', 'union', 'in', 'xor', 'xnor'), suffix='(?![\\w$#-])'), Operator.Word), (words(('TRUE', 'FALSE'), suffix='(?![\\w$#-])'), Keyword.Constant), ('[a-zA-Z_][\\w$#-]*', Name.Variable), (':=', Operator), ('[-&|+*/<>!=]', Operator), ('\\-?\\d+\\b', Number.Integer), ('0[su][bB]\\d*_[01_]+', Number.Bin), ('0[su][oO]\\d*_[0-7_]+', Number.Oct), ('0[su][dD]\\d*_[\\d_]+', Number.Decimal), ('0[su][hH]\\d*_[\\da-fA-F_]+', Number.Hex), ('\\s+', Text.Whitespace), ('[()\\[\\]{};?:.,]', Punctuation)]}
  }

  class SnobolLexer {
      + name = 'Snobol'
      + aliases = ['snobol']
      + filenames = ['*.snobol']
      + mimetypes = ['text/x-snobol']
      + url = 'https://www.regressive.org/snobol4'
      + version_added = '1.5'
      + tokens = {'root': [('\\*.*\\n', Comment), ('[+.] ', Punctuation, 'statement'), ('-.*\\n', Comment), ('END\\s*\\n', Name.Label, 'heredoc'), ('[A-Za-z$][\\w$]*', Name.Label, 'statement'), ('\\s+', Text, 'statement')], 'statement': [('\\s*\\n', Text, '#pop'), ('\\s+', Text), ('(?<=[^\\w.])(LT|LE|EQ|NE|GE|GT|INTEGER|IDENT|DIFFER|LGT|SIZE|REPLACE|TRIM|DUPL|REMDR|DATE|TIME|EVAL|APPLY|OPSYN|LOAD|UNLOAD|LEN|SPAN|BREAK|ANY|NOTANY|TAB|RTAB|REM|POS|RPOS|FAIL|FENCE|ABORT|ARB|ARBNO|BAL|SUCCEED|INPUT|OUTPUT|TERMINAL)(?=[^\\w.])', Name.Builtin), ('[A-Za-z][\\w.]*', Name), ('\\*\\*|[?$.!%*/#+\\-@|&\\\\=]', Operator), ('"[^"]*"', String), ("'[^']*'", String), ('[0-9]+(?=[^.EeDd])', Number.Integer), ('[0-9]+(\\.[0-9]*)?([EDed][-+]?[0-9]+)?', Number.Float), (':', Punctuation, 'goto'), ('[()<>,;]', Punctuation)], 'goto': [('\\s*\\n', Text, '#pop:2'), ('\\s+', Text), ('F|S', Keyword), ('(\\()([A-Za-z][\\w.]*)(\\))', bygroups(Punctuation, Name.Label, Punctuation))], 'heredoc': [('.*\\n', String.Heredoc)]}
  }

  class SolidityLexer {
      + name = 'Solidity'
      + aliases = ['solidity']
      + filenames = ['*.sol']
      + mimetypes = []
      + url = 'https://soliditylang.org'
      + version_added = '2.5'
      + datatype = '\\b(address|bool|(?:(?:bytes|hash|int|string|uint)(?:8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?))\\b'
      + tokens = {'root': [include('whitespace'), include('comments'), ('\\bpragma\\s+solidity\\b', Keyword, 'pragma'), ('\\b(contract)(\\s+)([a-zA-Z_]\\w*)', bygroups(Keyword, Whitespace, Name.Entity)), (datatype + '(\\s+)((?:external|public|internal|private)\\s+)?' + '([a-zA-Z_]\\w*)', bygroups(Keyword.Type, Whitespace, Keyword, Name.Variable)), ('\\b(enum|event|function|struct)(\\s+)([a-zA-Z_]\\w*)', bygroups(Keyword.Type, Whitespace, Name.Variable)), ('\\b(msg|block|tx)\\.([A-Za-z_][a-zA-Z0-9_]*)\\b', Keyword), (words(('block', 'break', 'constant', 'constructor', 'continue', 'contract', 'do', 'else', 'external', 'false', 'for', 'function', 'if', 'import', 'inherited', 'internal', 'is', 'library', 'mapping', 'memory', 'modifier', 'msg', 'new', 'payable', 'private', 'public', 'require', 'return', 'returns', 'struct', 'suicide', 'throw', 'this', 'true', 'tx', 'var', 'while'), prefix='\\b', suffix='\\b'), Keyword.Type), (words(('keccak256',), prefix='\\b', suffix='\\b'), Name.Builtin), (datatype, Keyword.Type), include('constants'), ('[a-zA-Z_]\\w*', Text), ('[~!%^&*+=|?:<>/-]', Operator), ('[.;{}(),\\[\\]]', Punctuation)], 'comments': [('//(\\n|[\\w\\W]*?[^\\\\]\\n)', Comment.Single), ('/(\\\\\\n)?[*][\\w\\W]*?[*](\\\\\\n)?/', Comment.Multiline), ('/(\\\\\\n)?[*][\\w\\W]*', Comment.Multiline)], 'constants': [('("(\\\\"|.)*?")', String.Double), ("('(\\\\'|.)*?')", String.Single), ('\\b0[xX][0-9a-fA-F]+\\b', Number.Hex), ('\\b\\d+\\b', Number.Decimal)], 'pragma': [include('whitespace'), include('comments'), ('(\\^|>=|<)(\\s*)(\\d+\\.\\d+\\.\\d+)', bygroups(Operator, Whitespace, Keyword)), (';', Punctuation, '#pop')], 'whitespace': [('\\s+', Whitespace), ('\\n', Whitespace)]}
  }

  class SoongLexer {
      + name = 'Soong'
      + version_added = '2.18'
      + url = 'https://source.android.com/docs/setup/reference/androidbp'
      + aliases = ['androidbp', 'bp', 'soong']
      + filenames = ['Android.bp']
      + tokens = {'root': [('(\\w*)(\\s*)(\\+?=)(\\s*)', bygroups(Name.Variable, Whitespace, Operator, Whitespace), 'assign-rhs'), ('(\\w*)(\\s*)(\\{)', bygroups(Name.Function, Whitespace, Punctuation), 'in-rule'), include('comments'), ('\\s+', Whitespace)], 'assign-rhs': [include('expr'), ('\\n', Whitespace, '#pop')], 'in-list': [include('expr'), include('comments'), ('\\s+', Whitespace), (',', Punctuation), ('\\]', Punctuation, '#pop')], 'in-map': [('(\\w+)(:)(\\s*)', bygroups(Name, Punctuation, Whitespace)), include('expr'), include('comments'), ('\\s+', Whitespace), (',', Punctuation), ('\\}', Punctuation, '#pop')], 'in-rule': [include('in-map')], 'comments': [('//.*', Comment.Single), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline)], 'expr': [('(true|false)\\b', Name.Builtin), ('0x[0-9a-fA-F]+', Number.Hex), ('\\d+', Number.Integer), ('".*?"', String), ('\\{', Punctuation, 'in-map'), ('\\[', Punctuation, 'in-list'), ('\\w+', Name)]}
  }

  class SophiaLexer {
      + name = 'Sophia'
      + aliases = ['sophia']
      + filenames = ['*.aes']
      + mimetypes = []
      + url = 'https://docs.aeternity.com/aesophia'
      + version_added = '2.11'
      + keywords = ('contract', 'include', 'let', 'switch', 'type', 'record', 'datatype', 'if', 'elif', 'else', 'function', 'stateful', 'payable', 'public', 'entrypoint', 'private', 'indexed', 'namespace', 'interface', 'main', 'using', 'as', 'for', 'hiding')
      + builtins = ('state', 'put', 'abort', 'require')
      + word_operators = ('mod', 'band', 'bor', 'bxor', 'bnot')
      + primitive_types = ('int', 'address', 'bool', 'bits', 'bytes', 'string', 'list', 'option', 'char', 'unit', 'map', 'event', 'hash', 'signature', 'oracle', 'oracle_query')
      + tokens = {'escape-sequence': [('\\\\[\\\\"\\\'ntbr]', String.Escape), ('\\\\[0-9]{3}', String.Escape), ('\\\\x[0-9a-fA-F]{2}', String.Escape)], 'root': [('\\s+', Text.Whitespace), ('(true|false)\\b', Keyword.Constant), ("\\b([A-Z][\\w\\']*)(?=\\s*\\.)", Name.Class, 'dotted'), ("\\b([A-Z][\\w\\']*)", Name.Function), ('//.*?\\n', Comment.Single), ('\\/\\*(?!/)', Comment.Multiline, 'comment'), ('0[xX][\\da-fA-F][\\da-fA-F_]*', Number.Hex), ('#[\\da-fA-F][\\da-fA-F_]*', Name.Label), ('\\d[\\d_]*', Number.Integer), (words(keywords, suffix='\\b'), Keyword), (words(builtins, suffix='\\b'), Name.Builtin), (words(word_operators, prefix='\\b', suffix='\\b'), Operator.Word), (words(primitive_types, prefix='\\b', suffix='\\b'), Keyword.Type), ('[=!<>+\\\\*/:&|?~@^-]', Operator.Word), ('[.;:{}(),\\[\\]]', Punctuation), ("(ak_|ok_|oq_|ct_)[\\w']*", Name.Label), ("[^\\W\\d][\\w']*", Name), ('\'(?:(\\\\[\\\\\\"\'ntbr ])|(\\\\[0-9]{3})|(\\\\x[0-9a-fA-F]{2}))\'', String.Char), ("'.'", String.Char), ("'[a-z][\\w]*", Name.Variable), ('"', String.Double, 'string')], 'comment': [('[^/*]+', Comment.Multiline), ('\\/\\*', Comment.Multiline, '#push'), ('\\*\\/', Comment.Multiline, '#pop'), ('\\*', Comment.Multiline)], 'string': [('[^\\\\"]+', String.Double), include('escape-sequence'), ('\\\\\\n', String.Double), ('"', String.Double, '#pop')], 'dotted': [('\\s+', Text), ('\\.', Punctuation), ("[A-Z][\\w\\']*(?=\\s*\\.)", Name.Function), ("[A-Z][\\w\\']*", Name.Function, '#pop'), ("[a-z_][\\w\\']*", Name, '#pop'), default('#pop')]}
  }

  class TextLexer {
      + name = 'Text only'
      + aliases = ['text']
      + filenames = ['*.txt']
      + mimetypes = ['text/plain']
      + url = ''
      + version_added = ''
      + priority = 0.01
  --
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class OutputLexer {
      + name = 'Text output'
      + aliases = ['output']
      + url = ''
      + version_added = '2.10'
  --
      + get_tokens_unprocessed(text)
  }

  class RawTokenLexer {
      + name = 'Raw token data'
      + aliases = []
      + filenames = []
      + mimetypes = ['application/x-pygments-tokens']
      + url = 'https://pygments.org/docs/formatters/#RawTokenFormatter'
      + version_added = ''
  --
      - __init__()
      + get_tokens(text)
      + get_tokens_unprocessed(text)
  }

  class SpiceLexer {
      + name = 'Spice'
      + url = 'https://www.spicelang.com'
      + filenames = ['*.spice']
      + aliases = ['spice', 'spicelang']
      + mimetypes = ['text/x-spice']
      + version_added = '2.11'
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), ('\\\\\\n', Text), ('//(.*?)\\n', Comment.Single), ('/(\\\\\\n)?[*]{2}(.|\\n)*?[*](\\\\\\n)?/', String.Doc), ('/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline), ('(import|as)\\b', Keyword.Namespace), ('(f|p|type|struct|interface|enum|alias|operator)\\b', Keyword.Declaration), (words(('if', 'else', 'switch', 'case', 'default', 'for', 'foreach', 'do', 'while', 'break', 'continue', 'fallthrough', 'return', 'assert', 'unsafe', 'ext'), suffix='\\b'), Keyword), (words(('const', 'signed', 'unsigned', 'inline', 'public', 'heap', 'compose'), suffix='\\b'), Keyword.Pseudo), (words(('new', 'yield', 'stash', 'pick', 'sync', 'class'), suffix='\\b'), Keyword.Reserved), ('(true|false|nil)\\b', Keyword.Constant), (words(('double', 'int', 'short', 'long', 'byte', 'char', 'string', 'bool', 'dyn'), suffix='\\b'), Keyword.Type), (words(('printf', 'sizeof', 'alignof', 'len', 'panic'), suffix='\\b(\\()'), bygroups(Name.Builtin, Punctuation)), ('[-]?[0-9]*[.][0-9]+([eE][+-]?[0-9]+)?', Number.Double), ('0[bB][01]+[slu]?', Number.Bin), ('0[oO][0-7]+[slu]?', Number.Oct), ('0[xXhH][0-9a-fA-F]+[slu]?', Number.Hex), ('(0[dD])?[0-9]+[slu]?', Number.Integer), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ("\\'(\\\\\\\\|\\\\[^\\\\]|[^\\'\\\\])\\'", String.Char), ('<<=|>>=|<<|>>|<=|>=|\\+=|-=|\\*=|/=|\\%=|\\|=|&=|\\^=|&&|\\|\\||&|\\||\\+\\+|--|\\%|\\^|\\~|==|!=|->|::|[.]{3}|#!|#|[+\\-*/&]', Operator), ('[|<>=!()\\[\\]{}.,;:\\?]', Punctuation), ('[^\\W\\d]\\w*', Name.Other)]}
  }

  class PostgresBase {
      + get_tokens_unprocessed(text)
  }

  class PostgresLexer {
      + name = 'PostgreSQL SQL dialect'
      + aliases = ['postgresql', 'postgres']
      + mimetypes = ['text/x-postgresql']
      + url = 'https://www.postgresql.org'
      + version_added = '1.5'
      + flags = re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('--.*\\n?', Comment.Single), ('/\\*', Comment.Multiline, 'multiline-comments'), ('(' + '|'.join((s.replace(' ', '\\s+') for s in DATATYPES + PSEUDO_TYPES)) + ')\\b', Name.Builtin), (words(KEYWORDS, suffix='\\b'), Keyword), ('[+*/<>=~!@#%^&|`?-]+', Operator), ('::', Operator), ('\\$\\d+', Name.Variable), ('([0-9]*\\.[0-9]*|[0-9]+)(e[+-]?[0-9]+)?', Number.Float), ('[0-9]+', Number.Integer), ("((?:E|U&)?)(')", bygroups(String.Affix, String.Single), 'string'), ('((?:U&)?)(")', bygroups(String.Affix, String.Name), 'quoted-ident'), ('(?s)(\\$)([^$]*)(\\$)(.*?)(\\$)(\\2)(\\$)', language_callback), ('[a-z_]\\w*', Name), (':([\'"]?)[a-z]\\w*\\b\\1', Name.Variable), ('[;:()\\[\\]{},.]', Punctuation)], 'multiline-comments': [('/\\*', Comment.Multiline, 'multiline-comments'), ('\\*/', Comment.Multiline, '#pop'), ('[^/*]+', Comment.Multiline), ('[/*]', Comment.Multiline)], 'string': [("[^']+", String.Single), ("''", String.Single), ("'", String.Single, '#pop')], 'quoted-ident': [('[^"]+', String.Name), ('""', String.Name), ('"', String.Name, '#pop')]}
  }

  class PlPgsqlLexer {
      + name = 'PL/pgSQL'
      + aliases = ['plpgsql']
      + mimetypes = ['text/x-plpgsql']
      + url = 'https://www.postgresql.org/docs/current/plpgsql.html'
      + version_added = '1.5'
      + flags = re.IGNORECASE
      + tokens = {name: state[:] for name, state in PostgresLexer.tokens.items()}
  }

  class PsqlRegexLexer {
      + name = 'PostgreSQL console - regexp based lexer'
      + aliases = []
      + flags = re.IGNORECASE
      + tokens = {name: state[:] for name, state in PostgresLexer.tokens.items()}
  }

  class lookahead {
      + next = __next__
  --
      - __init__(x)
      + send(i)
  }

  class PostgresConsoleLexer {
      + name = 'PostgreSQL console (psql)'
      + aliases = ['psql', 'postgresql-console', 'postgres-console']
      + mimetypes = ['text/x-postgresql-psql']
      + url = 'https://www.postgresql.org'
      + version_added = '1.5'
  --
      + get_tokens_unprocessed(data)
  }

  class PostgresExplainLexer {
      + name = 'PostgreSQL EXPLAIN dialect'
      + aliases = ['postgres-explain']
      + filenames = ['*.explain']
      + mimetypes = ['text/x-postgresql-explain']
      + url = 'https://www.postgresql.org/docs/current/using-explain.html'
      + version_added = '2.15'
      + tokens = {'root': [('(:|\\(|\\)|ms|kB|->|\\.\\.|\\,|\\/)', Punctuation), ('(\\s+)', Whitespace), ('(cost)(=?)', bygroups(Name.Class, Punctuation), 'instrumentation'), ('(actual)( )(=?)', bygroups(Name.Class, Whitespace, Punctuation), 'instrumentation'), (words(('actual', 'Memory Usage', 'Disk Usage', 'Memory', 'Buckets', 'Batches', 'originally', 'row', 'rows', 'Hits', 'Misses', 'Evictions', 'Overflows', 'Planned Partitions'), suffix='\\b'), Comment.Single), ('(hit|read|dirtied|written|write|time|calls)(=)', bygroups(Comment.Single, Operator)), ('(shared|temp|local)', Keyword.Pseudo), ('(Sort Method)(: )', bygroups(Comment.Preproc, Punctuation), 'sort'), ('(Sort Key|Group Key|Presorted Key|Hash Key)(:)( )', bygroups(Comment.Preproc, Punctuation, Whitespace), 'object_name'), ('(Cache Key|Cache Mode)(:)( )', bygroups(Comment, Punctuation, Whitespace), 'object_name'), (words(('Join Filter', 'Subplans Removed', 'Filter', 'Merge Cond', 'Hash Cond', 'Index Cond', 'Recheck Cond', 'Heap Blocks', 'TID Cond', 'Run Condition', 'Order By', 'Function Call', 'Table Function Call', 'Inner Unique', 'Params Evaluated', 'Single Copy', 'Sampling', 'One-Time Filter', 'Output', 'Relations', 'Remote SQL'), suffix='\\b'), Comment.Preproc, 'predicate'), ('Conflict ', Comment.Preproc, 'conflict'), ('(InitPlan|SubPlan)( )(\\d+)( )', bygroups(Keyword, Whitespace, Number.Integer, Whitespace), 'init_plan'), (words(('Sort Method', 'Join Filter', 'Planning time', 'Planning Time', 'Execution time', 'Execution Time', 'Workers Planned', 'Workers Launched', 'Buffers', 'Planning', 'Worker', 'Query Identifier', 'Time', 'Full-sort Groups', 'Pre-sorted Groups'), suffix='\\b'), Comment.Preproc), (words(('Rows Removed by Join Filter', 'Rows Removed by Filter', 'Rows Removed by Index Recheck', 'Heap Fetches', 'never executed'), suffix='\\b'), Name.Exception), ('(I/O Timings)(:)( )', bygroups(Name.Exception, Punctuation, Whitespace)), (words(EXPLAIN_KEYWORDS, suffix='\\b'), Keyword), ('((Right|Left|Full|Semi|Anti) Join)', Keyword.Type), ('(Parallel |Async |Finalize |Partial )', Comment.Preproc), ('Backward', Comment.Preproc), ('(Intersect|Except|Hash)', Comment.Preproc), ('(CTE)( )(\\w*)?', bygroups(Comment, Whitespace, Name.Variable)), ('(on|using)', Punctuation, 'object_name'), ("'(''|[^'])*'", String.Single), ('-?\\d+\\.\\d+', Number.Float), ('(-?\\d+)', Number.Integer), ('(true|false)', Name.Constant), ('\\s*QUERY PLAN\\s*\\n\\s*-+', Comment.Single), ('(Settings)(:)( )', bygroups(Comment.Preproc, Punctuation, Whitespace), 'setting'), ('(JIT|Functions|Options|Timing)(:)', bygroups(Comment.Preproc, Punctuation)), ('(Inlining|Optimization|Expressions|Deforming|Generation|Emission|Total)', Keyword.Pseudo), ('(Trigger)( )(\\S*)(:)( )', bygroups(Comment.Preproc, Whitespace, Name.Variable, Punctuation, Whitespace))], 'expression': [('\\(', Punctuation, '#push'), ('\\)', Punctuation, '#pop'), ('(never executed)', Name.Exception), ('[^)(]+', Comment)], 'object_name': [('(\\(cost)(=?)', bygroups(Name.Class, Punctuation), 'instrumentation'), ('(\\(actual)( )(=?)', bygroups(Name.Class, Whitespace, Punctuation), 'instrumentation'), ('\\(', Punctuation, 'expression'), ('(on)', Punctuation), ('\\w+(\\.\\w+)*( USING \\S+| \\w+ USING \\S+)', Name.Variable), ('\\"?\\w+\\"?(?:\\.\\"?\\w+\\"?)?', Name.Variable), ("\\'\\S*\\'", Name.Variable), (',\\n', Punctuation, 'object_name'), (',', Punctuation, 'object_name'), ('"\\*SELECT\\*( \\d+)?"(.\\w+)?', Name.Variable), ('"\\*VALUES\\*(_\\d+)?"(.\\w+)?', Name.Variable), ('"ANY_subquery"', Name.Variable), ('\\$\\d+', Name.Variable), ('::\\w+', Name.Variable), (' +', Whitespace), ('"', Punctuation), ('\\[\\.\\.\\.\\]', Punctuation), ('\\)', Punctuation, '#pop')], 'predicate': [('(\\()([^\\n]*)(\\))', bygroups(Punctuation, Name.Variable, Punctuation), '#pop'), ('[^\\n]*', Name.Variable, '#pop')], 'instrumentation': [('=|\\.\\.', Punctuation), (' +', Whitespace), ('(rows|width|time|loops)', Name.Class), ('\\d+\\.\\d+', Number.Float), ('(\\d+)', Number.Integer), ('\\)', Punctuation, '#pop')], 'conflict': [('(Resolution: )(\\w+)', bygroups(Comment.Preproc, Name.Variable)), ('(Arbiter \\w+:)', Comment.Preproc, 'object_name'), ('(Filter: )', Comment.Preproc, 'predicate')], 'setting': [("([a-z_]*?)(\\s*)(=)(\\s*)(\\'.*?\\')", bygroups(Name.Attribute, Whitespace, Operator, Whitespace, String)), ('\\, ', Punctuation)], 'init_plan': [('\\(', Punctuation), ('returns \\$\\d+(,\\$\\d+)?', Name.Variable), ('\\)', Punctuation, '#pop')], 'sort': [(':|kB', Punctuation), ('(quicksort|top-N|heapsort|Average|Memory|Peak)', Comment.Prepoc), ('(external|merge|Disk|sort)', Name.Exception), ('(\\d+)', Number.Integer), (' +', Whitespace)]}
  }

  class SqlLexer {
      + name = 'SQL'
      + aliases = ['sql']
      + filenames = ['*.sql']
      + mimetypes = ['text/x-sql']
      + url = 'https://en.wikipedia.org/wiki/SQL'
      + version_added = ''
      + flags = re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('--.*\\n?', Comment.Single), ('/\\*', Comment.Multiline, 'multiline-comments'), (words(('ABORT', 'ABS', 'ABSOLUTE', 'ACCESS', 'ADA', 'ADD', 'ADMIN', 'AFTER', 'AGGREGATE', 'ALIAS', 'ALL', 'ALLOCATE', 'ALTER', 'ANALYSE', 'ANALYZE', 'AND', 'ANY', 'ARE', 'AS', 'ASC', 'ASENSITIVE', 'ASSERTION', 'ASSIGNMENT', 'ASYMMETRIC', 'AT', 'ATOMIC', 'AUTHORIZATION', 'AVG', 'BACKWARD', 'BEFORE', 'BEGIN', 'BETWEEN', 'BITVAR', 'BIT_LENGTH', 'BOTH', 'BREADTH', 'BY', 'C', 'CACHE', 'CALL', 'CALLED', 'CARDINALITY', 'CASCADE', 'CASCADED', 'CASE', 'CAST', 'CATALOG', 'CATALOG_NAME', 'CHAIN', 'CHARACTERISTICS', 'CHARACTER_LENGTH', 'CHARACTER_SET_CATALOG', 'CHARACTER_SET_NAME', 'CHARACTER_SET_SCHEMA', 'CHAR_LENGTH', 'CHECK', 'CHECKED', 'CHECKPOINT', 'CLASS', 'CLASS_ORIGIN', 'CLOB', 'CLOSE', 'CLUSTER', 'COALESCE', 'COBOL', 'COLLATE', 'COLLATION', 'COLLATION_CATALOG', 'COLLATION_NAME', 'COLLATION_SCHEMA', 'COLUMN', 'COLUMN_NAME', 'COMMAND_FUNCTION', 'COMMAND_FUNCTION_CODE', 'COMMENT', 'COMMIT', 'COMMITTED', 'COMPLETION', 'CONDITION_NUMBER', 'CONNECT', 'CONNECTION', 'CONNECTION_NAME', 'CONSTRAINT', 'CONSTRAINTS', 'CONSTRAINT_CATALOG', 'CONSTRAINT_NAME', 'CONSTRAINT_SCHEMA', 'CONSTRUCTOR', 'CONTAINS', 'CONTINUE', 'CONVERSION', 'CONVERT', 'COPY', 'CORRESPONDING', 'COUNT', 'CREATE', 'CREATEDB', 'CREATEUSER', 'CROSS', 'CUBE', 'CURRENT', 'CURRENT_DATE', 'CURRENT_PATH', 'CURRENT_ROLE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'CURRENT_USER', 'CURSOR', 'CURSOR_NAME', 'CYCLE', 'DATA', 'DATABASE', 'DATETIME_INTERVAL_CODE', 'DATETIME_INTERVAL_PRECISION', 'DAY', 'DEALLOCATE', 'DECLARE', 'DEFAULT', 'DEFAULTS', 'DEFERRABLE', 'DEFERRED', 'DEFINED', 'DEFINER', 'DELETE', 'DELIMITER', 'DELIMITERS', 'DEREF', 'DESC', 'DESCRIBE', 'DESCRIPTOR', 'DESTROY', 'DESTRUCTOR', 'DETERMINISTIC', 'DIAGNOSTICS', 'DICTIONARY', 'DISCONNECT', 'DISPATCH', 'DISTINCT', 'DO', 'DOMAIN', 'DROP', 'DYNAMIC', 'DYNAMIC_FUNCTION', 'DYNAMIC_FUNCTION_CODE', 'EACH', 'ELSE', 'ELSIF', 'ENCODING', 'ENCRYPTED', 'END', 'END-EXEC', 'EQUALS', 'ESCAPE', 'EVERY', 'EXCEPTION', 'EXCEPT', 'EXCLUDING', 'EXCLUSIVE', 'EXEC', 'EXECUTE', 'EXISTING', 'EXISTS', 'EXPLAIN', 'EXTERNAL', 'EXTRACT', 'FALSE', 'FETCH', 'FINAL', 'FIRST', 'FOR', 'FORCE', 'FOREIGN', 'FORTRAN', 'FORWARD', 'FOUND', 'FREE', 'FREEZE', 'FROM', 'FULL', 'FUNCTION', 'G', 'GENERAL', 'GENERATED', 'GET', 'GLOBAL', 'GO', 'GOTO', 'GRANT', 'GRANTED', 'GROUP', 'GROUPING', 'HANDLER', 'HAVING', 'HIERARCHY', 'HOLD', 'HOST', 'IDENTITY', 'IF', 'IGNORE', 'ILIKE', 'IMMEDIATE', 'IMMEDIATELY', 'IMMUTABLE', 'IMPLEMENTATION', 'IMPLICIT', 'IN', 'INCLUDING', 'INCREMENT', 'INDEX', 'INDITCATOR', 'INFIX', 'INHERITS', 'INITIALIZE', 'INITIALLY', 'INNER', 'INOUT', 'INPUT', 'INSENSITIVE', 'INSERT', 'INSTANTIABLE', 'INSTEAD', 'INTERSECT', 'INTO', 'INVOKER', 'IS', 'ISNULL', 'ISOLATION', 'ITERATE', 'JOIN', 'KEY', 'KEY_MEMBER', 'KEY_TYPE', 'LANCOMPILER', 'LANGUAGE', 'LARGE', 'LAST', 'LATERAL', 'LEADING', 'LEFT', 'LENGTH', 'LESS', 'LEVEL', 'LIKE', 'LIMIT', 'LISTEN', 'LOAD', 'LOCAL', 'LOCALTIME', 'LOCALTIMESTAMP', 'LOCATION', 'LOCATOR', 'LOCK', 'LOWER', 'MAP', 'MATCH', 'MAX', 'MAXVALUE', 'MESSAGE_LENGTH', 'MESSAGE_OCTET_LENGTH', 'MESSAGE_TEXT', 'METHOD', 'MIN', 'MINUTE', 'MINVALUE', 'MOD', 'MODE', 'MODIFIES', 'MODIFY', 'MONTH', 'MORE', 'MOVE', 'MUMPS', 'NAMES', 'NATIONAL', 'NATURAL', 'NCHAR', 'NCLOB', 'NEW', 'NEXT', 'NO', 'NOCREATEDB', 'NOCREATEUSER', 'NONE', 'NOT', 'NOTHING', 'NOTIFY', 'NOTNULL', 'NULL', 'NULLABLE', 'NULLIF', 'OBJECT', 'OCTET_LENGTH', 'OF', 'OFF', 'OFFSET', 'OIDS', 'OLD', 'ON', 'ONLY', 'OPEN', 'OPERATION', 'OPERATOR', 'OPTION', 'OPTIONS', 'OR', 'ORDER', 'ORDINALITY', 'OUT', 'OUTER', 'OUTPUT', 'OVERLAPS', 'OVERLAY', 'OVERRIDING', 'OWNER', 'PAD', 'PARAMETER', 'PARAMETERS', 'PARAMETER_MODE', 'PARAMETER_NAME', 'PARAMETER_ORDINAL_POSITION', 'PARAMETER_SPECIFIC_CATALOG', 'PARAMETER_SPECIFIC_NAME', 'PARAMETER_SPECIFIC_SCHEMA', 'PARTIAL', 'PASCAL', 'PENDANT', 'PERIOD', 'PLACING', 'PLI', 'POSITION', 'POSTFIX', 'PRECEEDS', 'PRECISION', 'PREFIX', 'PREORDER', 'PREPARE', 'PRESERVE', 'PRIMARY', 'PRIOR', 'PRIVILEGES', 'PROCEDURAL', 'PROCEDURE', 'PUBLIC', 'READ', 'READS', 'RECHECK', 'RECURSIVE', 'REF', 'REFERENCES', 'REFERENCING', 'REINDEX', 'RELATIVE', 'RENAME', 'REPEATABLE', 'REPLACE', 'RESET', 'RESTART', 'RESTRICT', 'RESULT', 'RETURN', 'RETURNED_LENGTH', 'RETURNED_OCTET_LENGTH', 'RETURNED_SQLSTATE', 'RETURNS', 'REVOKE', 'RIGHT', 'ROLE', 'ROLLBACK', 'ROLLUP', 'ROUTINE', 'ROUTINE_CATALOG', 'ROUTINE_NAME', 'ROUTINE_SCHEMA', 'ROW', 'ROWS', 'ROW_COUNT', 'RULE', 'SAVE_POINT', 'SCALE', 'SCHEMA', 'SCHEMA_NAME', 'SCOPE', 'SCROLL', 'SEARCH', 'SECOND', 'SECURITY', 'SELECT', 'SELF', 'SENSITIVE', 'SERIALIZABLE', 'SERVER_NAME', 'SESSION', 'SESSION_USER', 'SET', 'SETOF', 'SETS', 'SHARE', 'SHOW', 'SIMILAR', 'SIMPLE', 'SIZE', 'SOME', 'SOURCE', 'SPACE', 'SPECIFIC', 'SPECIFICTYPE', 'SPECIFIC_NAME', 'SQL', 'SQLCODE', 'SQLERROR', 'SQLEXCEPTION', 'SQLSTATE', 'SQLWARNINIG', 'STABLE', 'START', 'STATE', 'STATEMENT', 'STATIC', 'STATISTICS', 'STDIN', 'STDOUT', 'STORAGE', 'STRICT', 'STRUCTURE', 'STYPE', 'SUBCLASS_ORIGIN', 'SUBLIST', 'SUBSTRING', 'SUCCEEDS', 'SUM', 'SYMMETRIC', 'SYSID', 'SYSTEM', 'SYSTEM_USER', 'TABLE', 'TABLE_NAME', ' TEMP', 'TEMPLATE', 'TEMPORARY', 'TERMINATE', 'THAN', 'THEN', 'TIME', 'TIMESTAMP', 'TIMEZONE_HOUR', 'TIMEZONE_MINUTE', 'TO', 'TOAST', 'TRAILING', 'TRANSACTION', 'TRANSACTIONS_COMMITTED', 'TRANSACTIONS_ROLLED_BACK', 'TRANSACTION_ACTIVE', 'TRANSFORM', 'TRANSFORMS', 'TRANSLATE', 'TRANSLATION', 'TREAT', 'TRIGGER', 'TRIGGER_CATALOG', 'TRIGGER_NAME', 'TRIGGER_SCHEMA', 'TRIM', 'TRUE', 'TRUNCATE', 'TRUSTED', 'TYPE', 'UNCOMMITTED', 'UNDER', 'UNENCRYPTED', 'UNION', 'UNIQUE', 'UNKNOWN', 'UNLISTEN', 'UNNAMED', 'UNNEST', 'UNTIL', 'UPDATE', 'UPPER', 'USAGE', 'USER', 'USER_DEFINED_TYPE_CATALOG', 'USER_DEFINED_TYPE_NAME', 'USER_DEFINED_TYPE_SCHEMA', 'USING', 'VACUUM', 'VALID', 'VALIDATOR', 'VALUES', 'VARIABLE', 'VERBOSE', 'VERSION', 'VERSIONS', 'VERSIONING', 'VIEW', 'VOLATILE', 'WHEN', 'WHENEVER', 'WHERE', 'WITH', 'WITHOUT', 'WORK', 'WRITE', 'YEAR', 'ZONE'), suffix='\\b'), Keyword), (words(('ARRAY', 'BIGINT', 'BINARY', 'BIT', 'BLOB', 'BOOLEAN', 'CHAR', 'CHARACTER', 'DATE', 'DEC', 'DECIMAL', 'FLOAT', 'INT', 'INTEGER', 'INTERVAL', 'NUMBER', 'NUMERIC', 'REAL', 'SERIAL', 'SMALLINT', 'VARCHAR', 'VARYING', 'INT8', 'SERIAL8', 'TEXT'), suffix='\\b'), Name.Builtin), ('[+*/<>=~!@#%^&|`?-]', Operator), ('[0-9]+', Number.Integer), ("'(''|[^'])*'", String.Single), ('"(""|[^"])*"', String.Symbol), ('[a-z_][\\w$]*', Name), ('[;:()\\[\\],.]', Punctuation)], 'multiline-comments': [('/\\*', Comment.Multiline, 'multiline-comments'), ('\\*/', Comment.Multiline, '#pop'), ('[^/*]+', Comment.Multiline), ('[/*]', Comment.Multiline)]}
  --
      + analyse_text(text)
  }

  class TransactSqlLexer {
      + name = 'Transact-SQL'
      + aliases = ['tsql', 't-sql']
      + filenames = ['*.sql']
      + mimetypes = ['text/x-tsql']
      + url = 'https://www.tsql.info'
      + version_added = ''
      + flags = re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('--.*[$|\\n]?', Comment.Single), ('/\\*', Comment.Multiline, 'multiline-comments'), (words(_tsql_builtins.OPERATORS), Operator), (words(_tsql_builtins.OPERATOR_WORDS, suffix='\\b'), Operator.Word), (words(_tsql_builtins.TYPES, suffix='\\b'), Name.Class), (words(_tsql_builtins.FUNCTIONS, suffix='\\b'), Name.Function), ('(goto)(\\s+)(\\w+\\b)', bygroups(Keyword, Whitespace, Name.Label)), (words(_tsql_builtins.KEYWORDS, suffix='\\b'), Keyword), ('(\\[)([^]]+)(\\])', bygroups(Operator, Name, Operator)), ('0x[0-9a-f]+', Number.Hex), ('[0-9]+\\.[0-9]*(e[+-]?[0-9]+)?', Number.Float), ('\\.[0-9]+(e[+-]?[0-9]+)?', Number.Float), ('[0-9]+e[+-]?[0-9]+', Number.Float), ('[0-9]+', Number.Integer), ("'(''|[^'])*'", String.Single), ('"(""|[^"])*"', String.Symbol), ('[;(),.]', Punctuation), ('@@\\w+', Name.Builtin), ('@\\w+', Name.Variable), ('(\\w+)(:)', bygroups(Name.Label, Punctuation)), ('#?#?\\w+', Name), ('\\?', Name.Variable.Magic)], 'multiline-comments': [('/\\*', Comment.Multiline, 'multiline-comments'), ('\\*/', Comment.Multiline, '#pop'), ('[^/*]+', Comment.Multiline), ('[/*]', Comment.Multiline)]}
  --
      + analyse_text(text)
  }

  class MySqlLexer {
      + name = 'MySQL'
      + aliases = ['mysql']
      + mimetypes = ['text/x-mysql']
      + url = 'https://www.mysql.com'
      + version_added = ''
      + flags = re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('(?:#|--\\s+).*', Comment.Single), ('/\\*\\+', Comment.Special, 'optimizer-hints'), ('/\\*', Comment.Multiline, 'multiline-comment'), ("x'([0-9a-f]{2})+'", Number.Hex), ('0x[0-9a-f]+', Number.Hex), ("b'[01]+'", Number.Bin), ('0b[01]+', Number.Bin), ('[0-9]+\\.[0-9]*(e[+-]?[0-9]+)?', Number.Float), ('[0-9]*\\.[0-9]+(e[+-]?[0-9]+)?', Number.Float), ('[0-9]+e[+-]?[0-9]+', Number.Float), ('[0-9]+(?=[^0-9a-z$_\\u0080-\\uffff])', Number.Integer), ('\\{\\s*d\\s*(?P<quote>[\'\\"])\\s*\\d{2}(\\d{2})?.?\\d{2}.?\\d{2}\\s*(?P=quote)\\s*\\}', Literal.Date), ('\\{\\s*t\\s*(?P<quote>[\'\\"])\\s*(?:\\d+\\s+)?\\d{1,2}.?\\d{1,2}.?\\d{1,2}(\\.\\d*)?\\s*(?P=quote)\\s*\\}', Literal.Date), ('\\{\\s*ts\\s*(?P<quote>[\'\\"])\\s*\\d{2}(?:\\d{2})?.?\\d{2}.?\\d{2}\\s+\\d{1,2}.?\\d{1,2}.?\\d{1,2}(\\.\\d*)?\\s*(?P=quote)\\s*\\}', Literal.Date), ("'", String.Single, 'single-quoted-string'), ('"', String.Double, 'double-quoted-string'), ('@@(?:global\\.|persist\\.|persist_only\\.|session\\.)?[a-z_]+', Name.Variable), ('@[a-z0-9_$.]+', Name.Variable), ("@'", Name.Variable, 'single-quoted-variable'), ('@"', Name.Variable, 'double-quoted-variable'), ('@`', Name.Variable, 'backtick-quoted-variable'), ('\\?', Name.Variable), ('[!%&*+/:<=>^|~-]+', Operator), ('\\b(set)(?!\\s*\\()', Keyword), ('\\b(character)(\\s+)(set)\\b', bygroups(Keyword, Whitespace, Keyword)), (words(MYSQL_CONSTANTS, prefix='\\b', suffix='\\b'), Name.Constant), (words(MYSQL_DATATYPES, prefix='\\b', suffix='\\b'), Keyword.Type), (words(MYSQL_KEYWORDS, prefix='\\b', suffix='\\b'), Keyword), (words(MYSQL_FUNCTIONS, prefix='\\b', suffix='\\b(\\s*)(\\()'), bygroups(Name.Function, Whitespace, Punctuation)), ('[0-9a-z$_\x80-\uffff]+', Name), ('`', Name.Quoted, 'schema-object-name'), ('[(),.;]', Punctuation)], 'optimizer-hints': [('[^*a-z]+', Comment.Special), ('\\*/', Comment.Special, '#pop'), (words(MYSQL_OPTIMIZER_HINTS, suffix='\\b'), Comment.Preproc), ('[a-z]+', Comment.Special), ('\\*', Comment.Special)], 'multiline-comment': [('[^*]+', Comment.Multiline), ('\\*/', Comment.Multiline, '#pop'), ('\\*', Comment.Multiline)], 'single-quoted-string': [("[^'\\\\]+", String.Single), ("''", String.Escape), ('\\\\[0\'"bnrtZ\\\\%_]', String.Escape), ("'", String.Single, '#pop')], 'double-quoted-string': [('[^"\\\\]+', String.Double), ('""', String.Escape), ('\\\\[0\'"bnrtZ\\\\%_]', String.Escape), ('"', String.Double, '#pop')], 'single-quoted-variable': [("[^']+", Name.Variable), ("''", Name.Variable), ("'", Name.Variable, '#pop')], 'double-quoted-variable': [('[^"]+', Name.Variable), ('""', Name.Variable), ('"', Name.Variable, '#pop')], 'backtick-quoted-variable': [('[^`]+', Name.Variable), ('``', Name.Variable), ('`', Name.Variable, '#pop')], 'schema-object-name': [('[^`]+', Name.Quoted), ('``', Name.Quoted.Escape), ('`', Name.Quoted, '#pop')]}
  --
      + analyse_text(text)
  }

  class GoogleSqlLexer {
      + name = 'GoogleSQL'
      + aliases = ['googlesql', 'zetasql']
      + filenames = ['*.googlesql', '*.googlesql.sql']
      + mimetypes = ['text/x-google-sql', 'text/x-google-sql-aux']
      + url = 'https://cloud.google.com/bigquery/googlesql'
      + version_added = '2.19'
      + flags = re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('(?:#|--\\s+).*', Comment.Single), ('/\\*', Comment.Multiline, 'multiline-comment'), ("x'([0-9a-f]{2})+'", Number.Hex), ('0x[0-9a-f]+', Number.Hex), ("b'[01]+'", Number.Bin), ('0b[01]+', Number.Bin), ('[0-9]+\\.[0-9]*(e[+-]?[0-9]+)?', Number.Float), ('[0-9]*\\.[0-9]+(e[+-]?[0-9]+)?', Number.Float), ('[0-9]+e[+-]?[0-9]+', Number.Float), ('[0-9]+(?=[^0-9a-z$_\\u0080-\\uffff])', Number.Integer), ('\\{\\s*d\\s*(?P<quote>[\'\\"])\\s*\\d{2}(\\d{2})?.?\\d{2}.?\\d{2}\\s*(?P=quote)\\s*\\}', Literal.Date), ('\\{\\s*t\\s*(?P<quote>[\'\\"])\\s*(?:\\d+\\s+)?\\d{1,2}.?\\d{1,2}.?\\d{1,2}(\\.\\d*)?\\s*(?P=quote)\\s*\\}', Literal.Date), ('\\{\\s*ts\\s*(?P<quote>[\'\\"])\\s*\\d{2}(?:\\d{2})?.?\\d{2}.?\\d{2}\\s+\\d{1,2}.?\\d{1,2}.?\\d{1,2}(\\.\\d*)?\\s*(?P=quote)\\s*\\}', Literal.Date), ("'", String.Single, 'single-quoted-string'), ('"', String.Double, 'double-quoted-string'), ('@@(?:global\\.|persist\\.|persist_only\\.|session\\.)?[a-z_]+', Name.Variable), ('@[a-z0-9_$.]+', Name.Variable), ("@'", Name.Variable, 'single-quoted-variable'), ('@"', Name.Variable, 'double-quoted-variable'), ('@`', Name.Variable, 'backtick-quoted-variable'), ('\\?', Name.Variable), ('\\b(set)(?!\\s*\\()', Keyword), ('\\b(character)(\\s+)(set)\\b', bygroups(Keyword, Whitespace, Keyword)), (words(_googlesql_builtins.constants, prefix='\\b', suffix='\\b'), Name.Constant), (words(_googlesql_builtins.types, prefix='\\b', suffix='\\b'), Keyword.Type), (words(_googlesql_builtins.keywords, prefix='\\b', suffix='\\b'), Keyword), (words(_googlesql_builtins.functionnames, prefix='\\b', suffix='\\b(\\s*)(\\()'), bygroups(Name.Function, Whitespace, Punctuation)), (words(_googlesql_builtins.operators, prefix='\\b', suffix='\\b'), Operator), ('[0-9a-z$_\x80-\uffff]+', Name), ('`', Name.Quoted, 'schema-object-name'), ('[(),.;]', Punctuation)], 'multiline-comment': [('[^*]+', Comment.Multiline), ('\\*/', Comment.Multiline, '#pop'), ('\\*', Comment.Multiline)], 'single-quoted-string': [("[^'\\\\]+", String.Single), ("''", String.Escape), ('\\\\[0\'"bnrtZ\\\\%_]', String.Escape), ("'", String.Single, '#pop')], 'double-quoted-string': [('[^"\\\\]+', String.Double), ('""', String.Escape), ('\\\\[0\'"bnrtZ\\\\%_]', String.Escape), ('"', String.Double, '#pop')], 'single-quoted-variable': [("[^']+", Name.Variable), ("''", Name.Variable), ("'", Name.Variable, '#pop')], 'double-quoted-variable': [('[^"]+', Name.Variable), ('""', Name.Variable), ('"', Name.Variable, '#pop')], 'backtick-quoted-variable': [('[^`]+', Name.Variable), ('``', Name.Variable), ('`', Name.Variable, '#pop')], 'schema-object-name': [('[^`]+', Name.Quoted), ('``', Name.Quoted.Escape), ('`', Name.Quoted, '#pop')]}
  --
      + analyse_text(text)
  }

  class SqliteConsoleLexer {
      + name = 'sqlite3con'
      + aliases = ['sqlite3']
      + filenames = ['*.sqlite3-console']
      + mimetypes = ['text/x-sqlite3-console']
      + url = 'https://www.sqlite.org'
      + version_added = '0.11'
  --
      + get_tokens_unprocessed(data)
  }

  class RqlLexer {
      + name = 'RQL'
      + url = 'http://www.logilab.org/project/rql'
      + aliases = ['rql']
      + filenames = ['*.rql']
      + mimetypes = ['text/x-rql']
      + version_added = '2.0'
      + flags = re.IGNORECASE
      + tokens = {'root': [('\\s+', Whitespace), ('(DELETE|SET|INSERT|UNION|DISTINCT|WITH|WHERE|BEING|OR|AND|NOT|GROUPBY|HAVING|ORDERBY|ASC|DESC|LIMIT|OFFSET|TODAY|NOW|TRUE|FALSE|NULL|EXISTS)\\b', Keyword), ('[+*/<>=%-]', Operator), ('(Any|is|instance_of|CWEType|CWRelation)\\b', Name.Builtin), ('[0-9]+', Number.Integer), ('[A-Z_]\\w*\\??', Name), ("'(''|[^'])*'", String.Single), ('"(""|[^"])*"', String.Single), ('[;:()\\[\\],.]', Punctuation)]}
  }

  class SrcinfoLexer {
      + name = 'Srcinfo'
      + aliases = ['srcinfo']
      + filenames = ['.SRCINFO']
      + url = 'https://wiki.archlinux.org/title/.SRCINFO'
      + version_added = '2.11'
      + tokens = {'root': [('\\s+', Whitespace), ('#.*', Comment.Single), (words(keywords), Keyword, 'assignment'), (words(architecture_dependent_keywords, suffix='_\\w+'), Keyword, 'assignment'), ('\\w+', Name.Variable, 'assignment')], 'assignment': [(' +', Whitespace), ('=', Operator, 'value')], 'value': [(' +', Whitespace), ('.*', Text, '#pop:2')]}
  }

  class StataLexer {
      + name = 'Stata'
      + url = 'http://www.stata.com/'
      + version_added = '2.2'
      + aliases = ['stata', 'do']
      + filenames = ['*.do', '*.ado']
      + mimetypes = ['text/x-stata', 'text/stata', 'application/x-stata']
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [include('comments'), include('strings'), include('macros'), include('numbers'), include('keywords'), include('operators'), include('format'), ('.', Text)], 'comments': [('(^//|(?<=\\s)//)(?!/)', Comment.Single, 'comments-double-slash'), ('^\\s*\\*', Comment.Single, 'comments-star'), ('/\\*', Comment.Multiline, 'comments-block'), ('(^///|(?<=\\s)///)', Comment.Special, 'comments-triple-slash')], 'comments-block': [('/\\*', Comment.Multiline, '#push'), ('\\*/\\*', Comment.Multiline), ('(\\*/\\s+\\*(?!/)[^\\n]*)|(\\*/)', Comment.Multiline, '#pop'), ('.', Comment.Multiline)], 'comments-star': [('///.*?\\n', Comment.Single, ('#pop', 'comments-triple-slash')), ('(^//|(?<=\\s)//)(?!/)', Comment.Single, ('#pop', 'comments-double-slash')), ('/\\*', Comment.Multiline, 'comments-block'), ('.(?=\\n)', Comment.Single, '#pop'), ('.', Comment.Single)], 'comments-triple-slash': [('\\n', Comment.Special, '#pop'), ('//.*?(?=\\n)', Comment.Single, '#pop'), ('.', Comment.Special)], 'comments-double-slash': [('\\n', Text, '#pop'), ('.', Comment.Single)], 'strings': [('`"', String, 'string-compound'), ('(?<!`)"', String, 'string-regular')], 'string-compound': [('`"', String, '#push'), ('"\\\'', String, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\$|\\\\`|\\\\\\n', String.Escape), include('macros'), ('.', String)], 'string-regular': [('(")(?!\\\')|(?=\\n)', String, '#pop'), ('\\\\\\\\|\\\\"|\\\\\\$|\\\\`|\\\\\\n', String.Escape), include('macros'), ('.', String)], 'macros': [('\\$(\\{|(?=[$`]))', Name.Variable.Global, 'macro-global-nested'), ('\\$', Name.Variable.Global, 'macro-global-name'), ('`', Name.Variable, 'macro-local')], 'macro-local': [('`', Name.Variable, '#push'), ("'", Name.Variable, '#pop'), ('\\$(\\{|(?=[$`]))', Name.Variable.Global, 'macro-global-nested'), ('\\$', Name.Variable.Global, 'macro-global-name'), ('.', Name.Variable)], 'macro-global-nested': [('\\$(\\{|(?=[$`]))', Name.Variable.Global, '#push'), ('\\}', Name.Variable.Global, '#pop'), ('\\$', Name.Variable.Global, 'macro-global-name'), ('`', Name.Variable, 'macro-local'), ('\\w', Name.Variable.Global), default('#pop')], 'macro-global-name': [('\\$(\\{|(?=[$`]))', Name.Variable.Global, 'macro-global-nested', '#pop'), ('\\$', Name.Variable.Global, 'macro-global-name', '#pop'), ('`', Name.Variable, 'macro-local', '#pop'), ('\\w{1,32}', Name.Variable.Global, '#pop')], 'keywords': [(words(builtins_functions, prefix='\\b', suffix='(?=\\()'), Name.Function), (words(builtins_base, prefix='(^\\s*|\\s)', suffix='\\b'), Keyword)], 'operators': [('-|==|<=|>=|<|>|&|!=', Operator), ('\\*|\\+|\\^|/|!|~|==|~=', Operator)], 'numbers': [('\\b[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)([eE][+-]?[0-9]+)?[i]?\\b', Number)], 'format': [('%-?\\d{1,2}(\\.\\d{1,2})?[gfe]c?', Name.Other), ('%(21x|16H|16L|8H|8L)', Name.Other), ('%-?(tc|tC|td|tw|tm|tq|th|ty|tg)\\S{0,32}', Name.Other), ('%[-~]?\\d{1,4}s', Name.Other)]}
  }

  class SuperColliderLexer {
      + name = 'SuperCollider'
      + url = 'http://supercollider.github.io/'
      + aliases = ['supercollider', 'sc']
      + filenames = ['*.sc', '*.scd']
      + mimetypes = ['application/supercollider', 'text/supercollider']
      + version_added = '2.1'
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'commentsandwhitespace': [('\\s+', Text), ('<!--', Comment), ('//.*?\\n', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline)], 'slashstartsregex': [include('commentsandwhitespace'), ('/(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gim]+\\b|\\B)', String.Regex, '#pop'), ('(?=/)', Text, ('#pop', 'badregex')), default('#pop')], 'badregex': [('\\n', Text, '#pop')], 'root': [('^(?=\\s|/|<!--)', Text, 'slashstartsregex'), include('commentsandwhitespace'), ('\\+\\+|--|~|&&|\\?|:|\\|\\||\\\\(?=\\n)|(<<|>>>?|==?|!=?|[-<>+*%&|^/])=?', Operator, 'slashstartsregex'), ('[{(\\[;,]', Punctuation, 'slashstartsregex'), ('[})\\].]', Punctuation), (words(('for', 'in', 'while', 'do', 'break', 'return', 'continue', 'switch', 'case', 'default', 'if', 'else', 'throw', 'try', 'catch', 'finally', 'new', 'delete', 'typeof', 'instanceof', 'void'), suffix='\\b'), Keyword, 'slashstartsregex'), (words(('var', 'let', 'with', 'function', 'arg'), suffix='\\b'), Keyword.Declaration, 'slashstartsregex'), (words(('(abstract', 'boolean', 'byte', 'char', 'class', 'const', 'debugger', 'double', 'enum', 'export', 'extends', 'final', 'float', 'goto', 'implements', 'import', 'int', 'interface', 'long', 'native', 'package', 'private', 'protected', 'public', 'short', 'static', 'super', 'synchronized', 'throws', 'transient', 'volatile'), suffix='\\b'), Keyword.Reserved), (words(('true', 'false', 'nil', 'inf'), suffix='\\b'), Keyword.Constant), (words(('Array', 'Boolean', 'Date', 'Error', 'Function', 'Number', 'Object', 'Packages', 'RegExp', 'String', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'super', 'thisFunctionDef', 'thisFunction', 'thisMethod', 'thisProcess', 'thisThread', 'this'), suffix='\\b'), Name.Builtin), ('[$a-zA-Z_]\\w*', Name.Other), ('\\\\?[$a-zA-Z_]\\w*', String.Symbol), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single)]}
  --
      + analyse_text(text)
  }

  class TableGenLexer {
      + name = 'TableGen'
      + url = 'https://llvm.org/docs/TableGen/ProgRef.html'
      + aliases = ['tablegen', 'td']
      + filenames = ['*.td']
      + version_added = '2.19'
      + tokens = {'root': [('\\s+', Whitespace), ('/\\*', Comment.Multiline, 'comment'), ('//.*?$', Comment.SingleLine), ('#(define|ifdef|ifndef|else|endif)', Comment.Preproc), ('0b[10]+', Number.Bin), ('0x[0-9a-fA-F]+', Number.Hex), (words(KEYWORDS, suffix='\\b'), Keyword), (words(KEYWORDS_CONST, suffix='\\b'), Keyword.Constant), (words(KEYWORDS_TYPE, suffix='\\b'), Keyword.Type), (words(BANG_OPERATORS, prefix='\\!', suffix='\\b'), Operator), ('![a-zA-Z]+', Error), ('[0-9]*[a-zA-Z_][a-zA-Z_0-9]*', Name), ('\\$[a-zA-Z_][a-zA-Z_0-9]*', Name.Variable), ('[-\\+]?[0-9]+', Number.Integer), ('"', String, 'dqs'), ('\\[\\{', Text, 'codeblock'), ('[-+\\[\\]{}()<>\\.,;:=?#]+', Punctuation)], 'comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'strings': [('\\\\[\\\\\\\'"tn]', String.Escape), ('[^\\\\"]+', String)], 'dqs': [('"', String, '#pop'), include('strings')], 'codeblock': [('\\}\\]', Text, '#pop'), ('([^}]+|\\}[^]])*', using(CppLexer))]}
  }

  class TactLexer {
      + name = 'Tact'
      + aliases = ['tact']
      + filenames = ['*.tact']
      + url = 'https://tact-lang.org'
      + version_added = '2.18'
      + tokens = {'root': [('\\s+', Whitespace), ('[.;(),\\[\\]{}]', Punctuation), ('\\?|!!', Operator), include('comments'), include('import-in'), include('struct-in'), include('contract-or-trait-in'), include('annotation-in'), include('fun-declaration-in'), include('const-declaration-in'), include('statements')], 'import-in': [('((?<=\\.\\.\\.)|(?<![.$]))\\b(import)\\b(\\s*)', bygroups(Punctuation, Keyword, Whitespace), 'import')], 'import': [(';', Punctuation, '#pop'), include('comments'), include('string-in'), ('\\s+', Whitespace)], 'struct-in': [('((?<=\\.\\.\\.)|(?<![.$]))\\b(struct|message)\\b', bygroups(Punctuation, Keyword), 'struct')], 'struct': [include('comments'), include('struct-header'), include('struct-body-in'), ('\\s+', Whitespace)], 'struct-header': [include('comments'), ('\\b\\w+', Name.Class), ('(\\()((?:\\b0[xX])[0-9a-fA-F][0-9a-fA-F_]*\\b)(\\))', bygroups(Punctuation, Number.Hex, Punctuation)), ('(\\()((?:\\b[0-9]+\\b))(\\))', bygroups(Punctuation, Number.Integer, Punctuation))], 'struct-body-in': [('\\{', Punctuation, 'struct-body')], 'struct-body': [('\\}', Punctuation, '#pop:2'), include('comments'), include('field-declaration-in')], 'contract-or-trait-in': [('((?<=\\.\\.\\.)|(?<![.$]))\\b(contract|trait)\\b', Keyword, 'contract-or-trait')], 'contract-or-trait': [include('comments'), ('with', Keyword), ('\\b\\w+', Name.Class), include('contract-or-trait-body-in'), ('\\s+', Whitespace), (',', Punctuation)], 'contract-or-trait-body-in': [('\\{', Punctuation, 'contract-or-trait-body')], 'contract-or-trait-body': [('\\}', Punctuation, '#pop:2'), include('comments'), include('init-declaration-in'), include('receive-declaration-in'), include('bounce-declaration-in'), include('fun-declaration-in'), include('const-declaration-in'), include('field-declaration-in'), ('\\s+', Whitespace)], 'field-declaration-in': [('\\b\\w+', Name.Property, 'field-declaration')], 'field-declaration': [(';', Punctuation, '#pop'), include('comments'), include('type-annotation-in'), include('variable-init-in')], 'const-declaration-in': [('(?=\\b(?:(?:get|native|extends|mutates|virtual|override|inline|abstract)\\s*)*const\\b)', Keyword, 'const-declaration')], 'const-declaration': [('(;)', Punctuation, '#pop'), ('const', Keyword), (words(('get', 'native', 'extends', 'mutates', 'virtual', 'override', 'inline', 'abstract'), suffix='\\b'), Keyword), ('\\b\\w+\\b', Name.Constant), include('comments'), include('type-annotation-in'), include('variable-init-in'), ('\\s+', Whitespace)], 'init-declaration-in': [('(init)', Keyword, 'init-declaration')], 'init-declaration': [('(?<=\\})', Punctuation, '#pop'), include('comments'), include('fun-arguments-in'), include('block-declaration-in'), ('\\s+', Whitespace)], 'receive-declaration-in': [('(receive|exernal)', Keyword, 'receive-declaration')], 'receive-declaration': [('(?<=\\})', Punctuation, '#pop'), include('comments'), include('fun-arguments-in'), include('block-declaration-in')], 'bounce-declaration-in': [('(bounced)', Keyword, 'bounce-declaration')], 'bounce-declaration': [('(?<=\\})', Punctuation, '#pop'), include('comments'), include('fun-arguments-in'), include('block-declaration-in')], 'fun-declaration-in': [('(?=\\b(?:(?:get|native|extends|mutates|virtual|override|inline|abstract)\\s*)*fun\\b)', Keyword, 'fun-declaration')], 'fun-declaration': [('(?<=\\}|\\;)', Punctuation, '#pop'), ('fun', Keyword), ('\\b(get|native|extends|mutates|virtual|override|inline|abstract)\\b', Keyword), ('\\b[\\w]+', Name.Function), include('fun-declaration-body'), ('[,;]', Punctuation)], 'fun-declaration-body': [include('comments'), include('fun-arguments-in'), include('type-annotation-in'), include('block-declaration-in'), ('\\s+', Whitespace)], 'fun-arguments-in': [('\\(', Punctuation, 'fun-arguments')], 'fun-arguments': [('\\)', Punctuation, '#pop'), include('comments'), include('string-in'), include('type-annotation-in'), ('(self)|(\\b[\\w]+\\b)', bygroups(Name.Variable.Instance, Name.Variable)), (',', Punctuation), ('\\s+', Whitespace)], 'block-declaration-in': [('\\{', Punctuation, 'block-declaration')], 'block-declaration': [('\\}', Punctuation, '#pop'), include('statements')], 'statements': [include('comments'), include('block-declaration-in'), include('expressions')], 'annotation-in': [('(@)(\\w+)(\\()', bygroups(Keyword.Pseudo, Keyword, Punctuation), 'annotation')], 'annotation': [('\\)', Punctuation, '#pop'), include('annotation-argument'), ('\\s+', Whitespace)], 'annotation-argument': [('\\w+', Name.Function.Magic)], 'expressions': [include('comments'), include('type-annotation-in'), include('keywords'), include('numeric'), include('string-in'), include('variable'), include('function-call'), include('struct-init-in')], 'struct-init-in': [('(\\b\\w+)(\\s*)(\\{)', bygroups(Name.Class, Whitespace, Punctuation), 'struct-init')], 'struct-init': [('(\\})', Punctuation, '#pop'), include('comments'), include('struct-property-in'), ('\\s+', Whitespace), (',', Punctuation)], 'struct-property-in': [('(\\b[\\w]+)(\\s*)(:)', bygroups(Name.Property, Whitespace, Punctuation), 'struct-property')], 'struct-property': [('(?=\\}|\\,)', Punctuation, '#pop'), include('comments'), include('expressions'), ('\\s+', Whitespace)], 'variable-init-in': [('(=)', Operator, 'variable-init')], 'variable-init': [('(?=\\}|\\{|\\,|\\;)', Punctuation, '#pop'), include('comments'), include('expressions'), ('\\s+', Whitespace)], 'type-annotation-in': [('(:)(\\s+)', bygroups(Punctuation, Whitespace), 'type-annotation')], 'type-annotation': [('(?=\\{|\\;|\\=|\\,|\\))', Punctuation, '#pop'), include('comments'), include('type-as-in'), include('type-generic-in'), ('\\?', Operator), ('\\b\\w+', Keyword.Type), ('\\s+', Whitespace)], 'type-generic-in': [('<', Punctuation, 'type-generic')], 'type-generic': [('>', Punctuation, '#pop'), include('comments'), include('type-as-in'), ('\\b\\w+', Keyword.Type), ('\\s+', Whitespace), (',', Punctuation)], 'type-as-in': [('\\b(as)(\\s+)', bygroups(Keyword, Whitespace), 'type-as')], 'type-as': [('(?=\\{|\\;|\\=|\\,|\\)|\\>)', Punctuation, '#pop'), include('comments'), ('\\b\\w+', Keyword.Type), ('\\s+', Whitespace)], 'keywords': [(words(('if', 'else', 'while', 'do', 'until', 'repeat', 'return', 'extends', 'mutates', 'virtual', 'override', 'inline', 'native', 'let', 'const', 'fun', 'self', 'is', 'initOf', 'map', 'bounced', 'get', 'as'), prefix='\\b', suffix='\\b'), Keyword), ('(<=>|>=|<=|!=|==|\\^>>|~>>|>>|<<|\\/%|\\^%|~%|\\^\\/|~\\/|\\+=|-=|\\*=|\\/=|~\\/=|\\^\\/=|%=|\\^%=|<<=|>>=|~>>=|\\^>>=|&=|\\|=|\\^=|\\^|=|~|\\/|%|-|\\*|\\+|>|<|&|\\||:|\\?)', Operator), (words(('true', 'false'), prefix='\\b', suffix='\\b'), Keyword.Constant)], 'string-in': [('"', String, 'string')], 'string': [('"', String, '#pop'), ('\\\\.', String.Escape), ('[^\\\\"]+', String.Double)], 'numeric': [('(?:\\b0[xX])[0-9a-fA-F][0-9a-fA-F_]*\\b', Number.Hex), ('(?:\\b[0-9]+\\b)', Number.Integer)], 'comments': [('//.*', Comment.Single), ('/\\*', Comment.Multiline, 'comments-multiline')], 'comments-multiline': [('\\*/', Comment.Multiline, '#pop'), ('[^*]+', Comment.Multiline), ('[*]', Comment.Multiline)], 'variable': [('\\b\\w+\\b(?!\\s*\\()(?!\\s*\\{)', Name.Variable)], 'function-call': [('\\b\\w+\\b(?=\\s*\\()(?!\\s*\\{)', Name.Function)]}
  }

  class TalLexer {
      + name = 'Tal'
      + aliases = ['tal', 'uxntal']
      + filenames = ['*.tal']
      + mimetypes = ['text/x-uxntal']
      + url = 'https://wiki.xxiivv.com/site/uxntal.html'
      + version_added = '2.12'
      + instructions = ['BRK', 'LIT', 'INC', 'POP', 'DUP', 'NIP', 'SWP', 'OVR', 'ROT', 'EQU', 'NEQ', 'GTH', 'LTH', 'JMP', 'JCN', 'JSR', 'STH', 'LDZ', 'STZ', 'LDR', 'STR', 'LDA', 'STA', 'DEI', 'DEO', 'ADD', 'SUB', 'MUL', 'DIV', 'AND', 'ORA', 'EOR', 'SFT']
      + tokens = {'comment': [('(?<!\\S)\\((?!\\S)', Comment.Multiline, '#push'), ('(?<!\\S)\\)(?!\\S)', Comment.Multiline, '#pop'), ('[^()]+', Comment.Multiline), ('[()]+', Comment.Multiline)], 'root': [('\\s+', Whitespace), ('(?<!\\S)\\((?!\\S)', Comment.Multiline, 'comment'), (words(instructions, prefix='(?<!\\S)', suffix='2?k?r?(?!\\S)'), Keyword.Reserved), ('[][{}](?!\\S)', Punctuation), ('#([0-9a-f]{2}){1,2}(?!\\S)', Number.Hex), ('"\\S+', String), ('([0-9a-f]{2}){1,2}(?!\\S)', Literal), ('[|$][0-9a-f]{1,4}(?!\\S)', Keyword.Declaration), ('%\\S+', Name.Decorator), ('@\\S+', Name.Function), ('&\\S+', Name.Label), ('/\\S+', Name.Tag), ('\\.\\S+', Name.Variable.Magic), (',\\S+', Name.Variable.Instance), (';\\S+', Name.Variable.Global), ('-\\S+', Literal), ('_\\S+', Literal), ('=\\S+', Literal), ('!\\S+', Name.Function), ('\\?\\S+', Name.Function), ('~\\S+', Keyword.Namespace), ('\\S+', Name.Function)]}
  --
      + analyse_text(text)
  }

  class TclLexer {
      + keyword_cmds_re = words(('after', 'apply', 'array', 'break', 'catch', 'continue', 'elseif', 'else', 'error', 'eval', 'expr', 'for', 'foreach', 'global', 'if', 'namespace', 'proc', 'rename', 'return', 'set', 'switch', 'then', 'trace', 'unset', 'update', 'uplevel', 'upvar', 'variable', 'vwait', 'while'), prefix='\\b', suffix='\\b')
      + builtin_cmds_re = words(('append', 'bgerror', 'binary', 'cd', 'chan', 'clock', 'close', 'concat', 'dde', 'dict', 'encoding', 'eof', 'exec', 'exit', 'fblocked', 'fconfigure', 'fcopy', 'file', 'fileevent', 'flush', 'format', 'gets', 'glob', 'history', 'http', 'incr', 'info', 'interp', 'join', 'lappend', 'lassign', 'lindex', 'linsert', 'list', 'llength', 'load', 'loadTk', 'lrange', 'lrepeat', 'lreplace', 'lreverse', 'lsearch', 'lset', 'lsort', 'mathfunc', 'mathop', 'memory', 'msgcat', 'open', 'package', 'pid', 'pkg::create', 'pkg_mkIndex', 'platform', 'platform::shell', 'puts', 'pwd', 're_syntax', 'read', 'refchan', 'regexp', 'registry', 'regsub', 'scan', 'seek', 'socket', 'source', 'split', 'string', 'subst', 'tell', 'time', 'tm', 'unknown', 'unload'), prefix='\\b', suffix='\\b')
      + name = 'Tcl'
      + url = 'https://www.tcl.tk/about/language.html'
      + aliases = ['tcl']
      + filenames = ['*.tcl', '*.rvt']
      + mimetypes = ['text/x-tcl', 'text/x-script.tcl', 'application/x-tcl']
      + version_added = '0.10'
      + tokens = {'root': [include('command'), include('basic'), include('data'), ('\\}', Keyword)], 'command': _gen_command_rules(keyword_cmds_re, builtin_cmds_re), 'command-in-brace': _gen_command_rules(keyword_cmds_re, builtin_cmds_re, '-in-brace'), 'command-in-bracket': _gen_command_rules(keyword_cmds_re, builtin_cmds_re, '-in-bracket'), 'command-in-paren': _gen_command_rules(keyword_cmds_re, builtin_cmds_re, '-in-paren'), 'basic': [('\\(', Keyword, 'paren'), ('\\[', Keyword, 'bracket'), ('\\{', Keyword, 'brace'), ('"', String.Double, 'string'), ('(eq|ne|in|ni)\\b', Operator.Word), ('!=|==|<<|>>|<=|>=|&&|\\|\\||\\*\\*|[-+~!*/%<>&^|?:]', Operator)], 'data': [('\\s+', Whitespace), ('0x[a-fA-F0-9]+', Number.Hex), ('0[0-7]+', Number.Oct), ('\\d+\\.\\d+', Number.Float), ('\\d+', Number.Integer), ('\\$[\\w.:-]+', Name.Variable), ('\\$\\{[\\w.:-]+\\}', Name.Variable), ('[\\w.,@:-]+', Text)], 'params': [(';', Keyword, '#pop'), ('\\n', Text, '#pop'), ('(else|elseif|then)\\b', Keyword), include('basic'), include('data')], 'params-in-brace': [('\\}', Keyword, ('#pop', '#pop')), include('params')], 'params-in-paren': [('\\)', Keyword, ('#pop', '#pop')), include('params')], 'params-in-bracket': [('\\]', Keyword, ('#pop', '#pop')), include('params')], 'string': [('\\[', String.Double, 'string-square'), ('(?s)(\\\\\\\\|\\\\[0-7]+|\\\\.|[^"\\\\])', String.Double), ('"', String.Double, '#pop')], 'string-square': [('\\[', String.Double, 'string-square'), ('(?s)(\\\\\\\\|\\\\[0-7]+|\\\\.|\\\\\\n|[^\\]\\\\])', String.Double), ('\\]', String.Double, '#pop')], 'brace': [('\\}', Keyword, '#pop'), include('command-in-brace'), include('basic'), include('data')], 'paren': [('\\)', Keyword, '#pop'), include('command-in-paren'), include('basic'), include('data')], 'bracket': [('\\]', Keyword, '#pop'), include('command-in-bracket'), include('basic'), include('data')], 'comment': [('.*[^\\\\]\\n', Comment, '#pop'), ('.*\\\\\\n', Comment)]}
  --
      + analyse_text(text)
  }

  class TealLexer {
      + name = 'teal'
      + url = 'https://developer.algorand.org/docs/reference/teal/specification/'
      + aliases = ['teal']
      + filenames = ['*.teal']
      + version_added = '2.9'
      + keywords = words({'Sender', 'Fee', 'FirstValid', 'FirstValidTime', 'LastValid', 'Note', 'Lease', 'Receiver', 'Amount', 'CloseRemainderTo', 'VotePK', 'SelectionPK', 'VoteFirst', 'VoteLast', 'VoteKeyDilution', 'Type', 'TypeEnum', 'XferAsset', 'AssetAmount', 'AssetSender', 'AssetReceiver', 'AssetCloseTo', 'GroupIndex', 'TxID', 'ApplicationID', 'OnCompletion', 'ApplicationArgs', 'NumAppArgs', 'Accounts', 'NumAccounts', 'ApprovalProgram', 'ClearStateProgram', 'RekeyTo', 'ConfigAsset', 'ConfigAssetTotal', 'ConfigAssetDecimals', 'ConfigAssetDefaultFrozen', 'ConfigAssetUnitName', 'ConfigAssetName', 'ConfigAssetURL', 'ConfigAssetMetadataHash', 'ConfigAssetManager', 'ConfigAssetReserve', 'ConfigAssetFreeze', 'ConfigAssetClawback', 'FreezeAsset', 'FreezeAssetAccount', 'FreezeAssetFrozen', 'NoOp', 'OptIn', 'CloseOut', 'ClearState', 'UpdateApplication', 'DeleteApplication', 'MinTxnFee', 'MinBalance', 'MaxTxnLife', 'ZeroAddress', 'GroupSize', 'LogicSigVersion', 'Round', 'LatestTimestamp', 'CurrentApplicationID', 'AssetBalance', 'AssetFrozen', 'AssetTotal', 'AssetDecimals', 'AssetDefaultFrozen', 'AssetUnitName', 'AssetName', 'AssetURL', 'AssetMetadataHash', 'AssetManager', 'AssetReserve', 'AssetFreeze', 'AssetClawback'}, suffix='\\b')
      + identifier = '[^ \\t\\n]+(?=\\/\\/)|[^ \\t\\n]+'
      + newline = '\\r?\\n'
      + tokens = {'root': [include('whitespace'), ('^#pragma .*' + newline, Comment.Directive), ('(' + identifier + ':' + ')' + '([ \t].*)', bygroups(Name.Label, Comment.Single)), (identifier, Name.Function, 'function-args')], 'function-args': [include('whitespace'), ('"', String, 'string'), ('(b(?:ase)?(?:32|64) ?)(\\(?[a-zA-Z0-9+/=]+\\)?)', bygroups(String.Affix, String.Other)), ('[A-Z2-7]{58}', Number), ('0x[\\da-fA-F]+', Number.Hex), ('\\d+', Number.Integer), (keywords, Keyword), (identifier, Name.Attributes), (newline, Text, '#pop')], 'string': [('\\\\(?:["nrt\\\\]|x\\d\\d)', String.Escape), ('[^\\\\\\"\\n]+', String), ('"', String, '#pop')], 'whitespace': [('[ \\t]+', Whitespace), ('//[^\\n]+', Comment.Single)]}
  }

  class ErbLexer {
      + name = 'ERB'
      + url = 'https://github.com/ruby/erb'
      + aliases = ['erb']
      + mimetypes = ['application/x-ruby-templating']
      + version_added = ''
  --
      - __init__()
      + get_tokens_unprocessed(text)
      + analyse_text(text)
  }

  class SmartyLexer {
      + name = 'Smarty'
      + url = 'https://www.smarty.net/'
      + aliases = ['smarty']
      + filenames = ['*.tpl']
      + mimetypes = ['application/x-smarty']
      + version_added = ''
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('[^{]+', Other), ('(\\{)(\\*.*?\\*)(\\})', bygroups(Comment.Preproc, Comment, Comment.Preproc)), ('(\\{php\\})(.*?)(\\{/php\\})', bygroups(Comment.Preproc, using(PhpLexer, startinline=True), Comment.Preproc)), ('(\\{)(/?[a-zA-Z_]\\w*)(\\s*)', bygroups(Comment.Preproc, Name.Function, Text), 'smarty'), ('\\{', Comment.Preproc, 'smarty')], 'smarty': [('\\s+', Text), ('\\{', Comment.Preproc, '#push'), ('\\}', Comment.Preproc, '#pop'), ('#[a-zA-Z_]\\w*#', Name.Variable), ('\\$[a-zA-Z_]\\w*(\\.\\w+)*', Name.Variable), ('[~!%^&*()+=|\\[\\]:;,.<>/?@-]', Operator), ('(true|false|null)\\b', Keyword.Constant), ('[0-9](\\.[0-9]*)?(eE[+-][0-9])?[flFLdD]?|0[xX][0-9a-fA-F]+[Ll]?', Number), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('[a-zA-Z_]\\w*', Name.Attribute)]}
  --
      + analyse_text(text)
  }

  class VelocityLexer {
      + name = 'Velocity'
      + url = 'https://velocity.apache.org/'
      + aliases = ['velocity']
      + filenames = ['*.vm', '*.fhtml']
      + version_added = ''
      + flags = re.MULTILINE | re.DOTALL
      + identifier = '[a-zA-Z_]\\w*'
      + tokens = {'root': [('[^{#$]+', Other), ('(#)(\\*.*?\\*)(#)', bygroups(Comment.Preproc, Comment, Comment.Preproc)), ('(##)(.*?$)', bygroups(Comment.Preproc, Comment)), ('(#\\{?)(' + identifier + ')(\\}?)(\\s?\\()', bygroups(Comment.Preproc, Name.Function, Comment.Preproc, Punctuation), 'directiveparams'), ('(#\\{?)(' + identifier + ')(\\}|\\b)', bygroups(Comment.Preproc, Name.Function, Comment.Preproc)), ('\\$!?\\{?', Punctuation, 'variable')], 'variable': [(identifier, Name.Variable), ('\\(', Punctuation, 'funcparams'), ('(\\.)(' + identifier + ')', bygroups(Punctuation, Name.Variable), '#push'), ('\\}', Punctuation, '#pop'), default('#pop')], 'directiveparams': [('(&&|\\|\\||==?|!=?|[-<>+*%&|^/])|\\b(eq|ne|gt|lt|ge|le|not|in)\\b', Operator), ('\\[', Operator, 'rangeoperator'), ('\\b' + identifier + '\\b', Name.Function), include('funcparams')], 'rangeoperator': [('\\.\\.', Operator), include('funcparams'), ('\\]', Operator, '#pop')], 'funcparams': [('\\$!?\\{?', Punctuation, 'variable'), ('\\s+', Text), ('[,:]', Punctuation), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('0[xX][0-9a-fA-F]+[Ll]?', Number), ('\\b[0-9]+\\b', Number), ('(true|false|null)\\b', Keyword.Constant), ('\\(', Punctuation, '#push'), ('\\)', Punctuation, '#pop'), ('\\{', Punctuation, '#push'), ('\\}', Punctuation, '#pop'), ('\\[', Punctuation, '#push'), ('\\]', Punctuation, '#pop')]}
  --
      + analyse_text(text)
  }

  class VelocityHtmlLexer {
      + name = 'HTML+Velocity'
      + aliases = ['html+velocity']
      + version_added = ''
      + alias_filenames = ['*.html', '*.fhtml']
      + mimetypes = ['text/html+velocity']
      + url = 'https://velocity.apache.org/'
  --
      - __init__()
  }

  class VelocityXmlLexer {
      + name = 'XML+Velocity'
      + aliases = ['xml+velocity']
      + version_added = ''
      + alias_filenames = ['*.xml', '*.vm']
      + mimetypes = ['application/xml+velocity']
      + url = 'https://velocity.apache.org/'
  --
      - __init__()
      + analyse_text(text)
  }

  class DjangoLexer {
      + name = 'Django/Jinja'
      + aliases = ['django', 'jinja']
      + mimetypes = ['application/x-django-templating', 'application/x-jinja']
      + url = 'https://www.djangoproject.com/documentation/templates'
      + version_added = ''
      + flags = re.M | re.S
      + tokens = {'root': [('[^{]+', Other), ('\\{\\{', Comment.Preproc, 'var'), ('\\{#.*?#\\}', Comment), ('(\\{%)(-?\\s*)(comment)(\\s*-?)(%\\})(.*?)(\\{%)(-?\\s*)(endcomment)(\\s*-?)(%\\})', bygroups(Comment.Preproc, Text, Keyword, Text, Comment.Preproc, Comment, Comment.Preproc, Text, Keyword, Text, Comment.Preproc)), ('(\\{%)(-?\\s*)(raw)(\\s*-?)(%\\})(.*?)(\\{%)(-?\\s*)(endraw)(\\s*-?)(%\\})', bygroups(Comment.Preproc, Text, Keyword, Text, Comment.Preproc, Text, Comment.Preproc, Text, Keyword, Text, Comment.Preproc)), ('(\\{%)(-?\\s*)(filter)(\\s+)([a-zA-Z_]\\w*)', bygroups(Comment.Preproc, Text, Keyword, Text, Name.Function), 'block'), ('(\\{%)(-?\\s*)([a-zA-Z_]\\w*)', bygroups(Comment.Preproc, Text, Keyword), 'block'), ('\\{', Other)], 'varnames': [('(\\|)(\\s*)([a-zA-Z_]\\w*)', bygroups(Operator, Text, Name.Function)), ('(is)(\\s+)(not)?(\\s+)?([a-zA-Z_]\\w*)', bygroups(Keyword, Text, Keyword, Text, Name.Function)), ('(_|true|false|none|True|False|None)\\b', Keyword.Pseudo), ('(in|as|reversed|recursive|not|and|or|is|if|else|import|with(?:(?:out)?\\s*context)?|scoped|ignore\\s+missing)\\b', Keyword), ('(loop|block|super|forloop)\\b', Name.Builtin), ('[a-zA-Z_][\\w-]*', Name.Variable), ('\\.\\w+', Name.Variable), (':?"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), (":?'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('([{}()\\[\\]+\\-*/%,:~]|[><=]=?|!=)', Operator), ('[0-9](\\.[0-9]*)?(eE[+-][0-9])?[flFLdD]?|0[xX][0-9a-fA-F]+[Ll]?', Number)], 'var': [('\\s+', Text), ('(-?)(\\}\\})', bygroups(Text, Comment.Preproc), '#pop'), include('varnames')], 'block': [('\\s+', Text), ('(-?)(%\\})', bygroups(Text, Comment.Preproc), '#pop'), include('varnames'), ('.', Punctuation)]}
  --
      + analyse_text(text)
  }

  class MyghtyLexer {
      + name = 'Myghty'
      + url = 'http://www.myghty.org/'
      + aliases = ['myghty']
      + filenames = ['*.myt', 'autodelegate']
      + mimetypes = ['application/x-myghty']
      + version_added = '0.6'
      + tokens = {'root': [('\\s+', Text), ('(?s)(<%(?:def|method))(\\s*)(.*?)(>)(.*?)(</%\\2\\s*>)', bygroups(Name.Tag, Text, Name.Function, Name.Tag, using(this), Name.Tag)), ('(?s)(<%\\w+)(.*?)(>)(.*?)(</%\\2\\s*>)', bygroups(Name.Tag, Name.Function, Name.Tag, using(PythonLexer), Name.Tag)), ('(<&[^|])(.*?)(,.*?)?(&>)', bygroups(Name.Tag, Name.Function, using(PythonLexer), Name.Tag)), ('(?s)(<&\\|)(.*?)(,.*?)?(&>)', bygroups(Name.Tag, Name.Function, using(PythonLexer), Name.Tag)), ('</&>', Name.Tag), ('(?s)(<%!?)(.*?)(%>)', bygroups(Name.Tag, using(PythonLexer), Name.Tag)), ('(?<=^)#[^\\n]*(\\n|\\Z)', Comment), ('(?<=^)(%)([^\\n]*)(\\n|\\Z)', bygroups(Name.Tag, using(PythonLexer), Other)), ("(?sx)\n                 (.+?)               # anything, followed by:\n                 (?:\n                  (?<=\\n)(?=[%#]) |  # an eval or comment line\n                  (?=</?[%&]) |      # a substitution or block or\n                                     # call start or end\n                                     # - don't consume\n                  (\\\\\\n) |           # an escaped newline\n                  \\Z                 # end of string\n                 )", bygroups(Other, Operator))]}
  }

  class MyghtyHtmlLexer {
      + name = 'HTML+Myghty'
      + aliases = ['html+myghty']
      + mimetypes = ['text/html+myghty']
      + url = 'http://www.myghty.org/'
      + version_added = '0.6'
  --
      - __init__()
  }

  class MyghtyXmlLexer {
      + name = 'XML+Myghty'
      + aliases = ['xml+myghty']
      + mimetypes = ['application/xml+myghty']
      + url = 'http://www.myghty.org/'
      + version_added = '0.6'
  --
      - __init__()
  }

  class MyghtyJavascriptLexer {
      + name = 'JavaScript+Myghty'
      + aliases = ['javascript+myghty', 'js+myghty']
      + mimetypes = ['application/x-javascript+myghty', 'text/x-javascript+myghty', 'text/javascript+mygthy']
      + url = 'http://www.myghty.org/'
      + version_added = '0.6'
  --
      - __init__()
  }

  class MyghtyCssLexer {
      + name = 'CSS+Myghty'
      + aliases = ['css+myghty']
      + mimetypes = ['text/css+myghty']
      + url = 'http://www.myghty.org/'
      + version_added = '0.6'
  --
      - __init__()
  }

  class MasonLexer {
      + name = 'Mason'
      + url = 'http://www.masonhq.com/'
      + aliases = ['mason']
      + filenames = ['*.m', '*.mhtml', '*.mc', '*.mi', 'autohandler', 'dhandler']
      + mimetypes = ['application/x-mason']
      + version_added = '1.4'
      + tokens = {'root': [('\\s+', Whitespace), ('(?s)(<%doc>)(.*?)(</%doc>)', bygroups(Name.Tag, Comment.Multiline, Name.Tag)), ('(?s)(<%(?:def|method))(\\s*)(.*?)(>)(.*?)(</%\\2\\s*>)', bygroups(Name.Tag, Whitespace, Name.Function, Name.Tag, using(this), Name.Tag)), ('(?s)(<%(\\w+)(.*?)(>))(.*?)(</%\\2\\s*>)', bygroups(Name.Tag, None, None, None, using(PerlLexer), Name.Tag)), ('(?s)(<&[^|])(.*?)(,.*?)?(&>)', bygroups(Name.Tag, Name.Function, using(PerlLexer), Name.Tag)), ('(?s)(<&\\|)(.*?)(,.*?)?(&>)', bygroups(Name.Tag, Name.Function, using(PerlLexer), Name.Tag)), ('</&>', Name.Tag), ('(?s)(<%!?)(.*?)(%>)', bygroups(Name.Tag, using(PerlLexer), Name.Tag)), ('(?<=^)#[^\\n]*(\\n|\\Z)', Comment), ('(?<=^)(%)([^\\n]*)(\\n|\\Z)', bygroups(Name.Tag, using(PerlLexer), Other)), ("(?sx)\n                 (.+?)               # anything, followed by:\n                 (?:\n                  (?<=\\n)(?=[%#]) |  # an eval or comment line\n                  (?=</?[%&]) |      # a substitution or block or\n                                     # call start or end\n                                     # - don't consume\n                  (\\\\\\n) |           # an escaped newline\n                  \\Z                 # end of string\n                 )", bygroups(using(HtmlLexer), Operator))]}
  --
      + analyse_text(text)
  }

  class MakoLexer {
      + name = 'Mako'
      + url = 'http://www.makotemplates.org/'
      + aliases = ['mako']
      + filenames = ['*.mao']
      + mimetypes = ['application/x-mako']
      + version_added = '0.7'
      + tokens = {'root': [('(\\s*)(%)(\\s*end(?:\\w+))(\\n|\\Z)', bygroups(Text.Whitespace, Comment.Preproc, Keyword, Other)), ('(\\s*)(%)([^\\n]*)(\\n|\\Z)', bygroups(Text.Whitespace, Comment.Preproc, using(PythonLexer), Other)), ('(\\s*)(##[^\\n]*)(\\n|\\Z)', bygroups(Text.Whitespace, Comment.Single, Text.Whitespace)), ('(?s)<%doc>.*?</%doc>', Comment.Multiline), ('(<%)([\\w.:]+)', bygroups(Comment.Preproc, Name.Builtin), 'tag'), ('(</%)([\\w.:]+)(>)', bygroups(Comment.Preproc, Name.Builtin, Comment.Preproc)), ('<%(?=([\\w.:]+))', Comment.Preproc, 'ondeftags'), ('(?s)(<%(?:!?))(.*?)(%>)', bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc)), ('(\\$\\{)(.*?)(\\})', bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc)), ("(?sx)\n                (.+?)                # anything, followed by:\n                (?:\n                 (?<=\\n)(?=%|\\#\\#) | # an eval or comment line\n                 (?=\\#\\*) |          # multiline comment\n                 (?=</?%) |          # a python block\n                                     # call start or end\n                 (?=\\$\\{) |          # a substitution\n                 (?<=\\n)(?=\\s*%) |\n                                     # - don't consume\n                 (\\\\\\n) |            # an escaped newline\n                 \\Z                  # end of string\n                )\n            ", bygroups(Other, Operator)), ('\\s+', Text)], 'ondeftags': [('<%', Comment.Preproc), ('(?<=<%)(include|inherit|namespace|page)', Name.Builtin), include('tag')], 'tag': [('((?:\\w+)\\s*=)(\\s*)(".*?")', bygroups(Name.Attribute, Text, String)), ('/?\\s*>', Comment.Preproc, '#pop'), ('\\s+', Text)], 'attr': [('".*?"', String, '#pop'), ("'.*?'", String, '#pop'), ('[^\\s>]+', String, '#pop')]}
  }

  class MakoHtmlLexer {
      + name = 'HTML+Mako'
      + aliases = ['html+mako']
      + mimetypes = ['text/html+mako']
      + url = 'http://www.makotemplates.org/'
      + version_added = '0.7'
  --
      - __init__()
  }

  class MakoXmlLexer {
      + name = 'XML+Mako'
      + aliases = ['xml+mako']
      + mimetypes = ['application/xml+mako']
      + url = 'http://www.makotemplates.org/'
      + version_added = '0.7'
  --
      - __init__()
  }

  class MakoJavascriptLexer {
      + name = 'JavaScript+Mako'
      + aliases = ['javascript+mako', 'js+mako']
      + mimetypes = ['application/x-javascript+mako', 'text/x-javascript+mako', 'text/javascript+mako']
      + url = 'http://www.makotemplates.org/'
      + version_added = '0.7'
  --
      - __init__()
  }

  class MakoCssLexer {
      + name = 'CSS+Mako'
      + aliases = ['css+mako']
      + mimetypes = ['text/css+mako']
      + url = 'http://www.makotemplates.org/'
      + version_added = '0.7'
  --
      - __init__()
  }

  class CheetahPythonLexer {
      + get_tokens_unprocessed(text)
  }

  class CheetahLexer {
      + name = 'Cheetah'
      + url = 'http://www.cheetahtemplate.org/'
      + aliases = ['cheetah', 'spitfire']
      + filenames = ['*.tmpl', '*.spt']
      + mimetypes = ['application/x-cheetah', 'application/x-spitfire']
      + version_added = ''
      + tokens = {'root': [('(##[^\\n]*)$', bygroups(Comment)), ('#[*](.|\\n)*?[*]#', Comment), ('#end[^#\\n]*(?:#|$)', Comment.Preproc), ('#slurp$', Comment.Preproc), ('(#[a-zA-Z]+)([^#\\n]*)(#|$)', bygroups(Comment.Preproc, using(CheetahPythonLexer), Comment.Preproc)), ('(\\$)([a-zA-Z_][\\w.]*\\w)', bygroups(Comment.Preproc, using(CheetahPythonLexer))), ('(?s)(\\$\\{!?)(.*?)(\\})', bygroups(Comment.Preproc, using(CheetahPythonLexer), Comment.Preproc)), ('(?sx)\n                (.+?)               # anything, followed by:\n                (?:\n                 (?=\\#[#a-zA-Z]*) | # an eval comment\n                 (?=\\$[a-zA-Z_{]) | # a substitution\n                 \\Z                 # end of string\n                )\n            ', Other), ('\\s+', Text)]}
  }

  class CheetahHtmlLexer {
      + name = 'HTML+Cheetah'
      + aliases = ['html+cheetah', 'html+spitfire', 'htmlcheetah']
      + mimetypes = ['text/html+cheetah', 'text/html+spitfire']
      + url = 'http://www.cheetahtemplate.org/'
      + version_added = ''
  --
      - __init__()
  }

  class CheetahXmlLexer {
      + name = 'XML+Cheetah'
      + aliases = ['xml+cheetah', 'xml+spitfire']
      + mimetypes = ['application/xml+cheetah', 'application/xml+spitfire']
      + url = 'http://www.cheetahtemplate.org/'
      + version_added = ''
  --
      - __init__()
  }

  class CheetahJavascriptLexer {
      + name = 'JavaScript+Cheetah'
      + aliases = ['javascript+cheetah', 'js+cheetah', 'javascript+spitfire', 'js+spitfire']
      + mimetypes = ['application/x-javascript+cheetah', 'text/x-javascript+cheetah', 'text/javascript+cheetah', 'application/x-javascript+spitfire', 'text/x-javascript+spitfire', 'text/javascript+spitfire']
      + url = 'http://www.cheetahtemplate.org/'
      + version_added = ''
  --
      - __init__()
  }

  class GenshiTextLexer {
      + name = 'Genshi Text'
      + url = 'https://genshi.edgewall.org/'
      + aliases = ['genshitext']
      + mimetypes = ['application/x-genshi-text', 'text/x-genshi']
      + version_added = ''
      + tokens = {'root': [('[^#$\\s]+', Other), ('^(\\s*)(##.*)$', bygroups(Text, Comment)), ('^(\\s*)(#)', bygroups(Text, Comment.Preproc), 'directive'), include('variable'), ('[#$\\s]', Other)], 'directive': [('\\n', Text, '#pop'), ('(?:def|for|if)\\s+.*', using(PythonLexer), '#pop'), ('(choose|when|with)([^\\S\\n]+)(.*)', bygroups(Keyword, Text, using(PythonLexer)), '#pop'), ('(choose|otherwise)\\b', Keyword, '#pop'), ('(end\\w*)([^\\S\\n]*)(.*)', bygroups(Keyword, Text, Comment), '#pop')], 'variable': [('(?<!\\$)(\\$\\{)(.+?)(\\})', bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc)), ('(?<!\\$)(\\$)([a-zA-Z_][\\w.]*)', Name.Variable)]}
  }

  class GenshiMarkupLexer {
      + flags = re.DOTALL
      + tokens = {'root': [('[^<$]+', Other), ('(<\\?python)(.*?)(\\?>)', bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc)), ('<\\s*(script|style)\\s*.*?>.*?<\\s*/\\1\\s*>', Other), ('<\\s*py:[a-zA-Z0-9]+', Name.Tag, 'pytag'), ('<\\s*[a-zA-Z0-9:.]+', Name.Tag, 'tag'), include('variable'), ('[<$]', Other)], 'pytag': [('\\s+', Text), ('[\\w:-]+\\s*=', Name.Attribute, 'pyattr'), ('/?\\s*>', Name.Tag, '#pop')], 'pyattr': [('(")(.*?)(")', bygroups(String, using(PythonLexer), String), '#pop'), ("(')(.*?)(')", bygroups(String, using(PythonLexer), String), '#pop'), ('[^\\s>]+', String, '#pop')], 'tag': [('\\s+', Text), ('py:[\\w-]+\\s*=', Name.Attribute, 'pyattr'), ('[\\w:-]+\\s*=', Name.Attribute, 'attr'), ('/?\\s*>', Name.Tag, '#pop')], 'attr': [('"', String, 'attr-dstring'), ("'", String, 'attr-sstring'), ('[^\\s>]*', String, '#pop')], 'attr-dstring': [('"', String, '#pop'), include('strings'), ("'", String)], 'attr-sstring': [("'", String, '#pop'), include('strings'), ("'", String)], 'strings': [('[^"\'$]+', String), include('variable')], 'variable': [('(?<!\\$)(\\$\\{)(.+?)(\\})', bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc)), ('(?<!\\$)(\\$)([a-zA-Z_][\\w\\.]*)', Name.Variable)]}
  }

  class HtmlGenshiLexer {
      + name = 'HTML+Genshi'
      + aliases = ['html+genshi', 'html+kid']
      + version_added = ''
      + alias_filenames = ['*.html', '*.htm', '*.xhtml']
      + mimetypes = ['text/html+genshi']
      + url = 'https://genshi.edgewall.org/'
  --
      - __init__()
      + analyse_text(text)
  }

  class GenshiLexer {
      + name = 'Genshi'
      + aliases = ['genshi', 'kid', 'xml+genshi', 'xml+kid']
      + filenames = ['*.kid']
      + version_added = ''
      + alias_filenames = ['*.xml']
      + mimetypes = ['application/x-genshi', 'application/x-kid']
      + url = 'https://genshi.edgewall.org/'
  --
      - __init__()
      + analyse_text(text)
  }

  class JavascriptGenshiLexer {
      + name = 'JavaScript+Genshi Text'
      + aliases = ['js+genshitext', 'js+genshi', 'javascript+genshitext', 'javascript+genshi']
      + version_added = ''
      + alias_filenames = ['*.js']
      + mimetypes = ['application/x-javascript+genshi', 'text/x-javascript+genshi', 'text/javascript+genshi']
      + url = 'https://genshi.edgewall.org'
  --
      - __init__()
      + analyse_text(text)
  }

  class CssGenshiLexer {
      + name = 'CSS+Genshi Text'
      + aliases = ['css+genshitext', 'css+genshi']
      + version_added = ''
      + alias_filenames = ['*.css']
      + mimetypes = ['text/css+genshi']
      + url = 'https://genshi.edgewall.org'
  --
      - __init__()
      + analyse_text(text)
  }

  class RhtmlLexer {
      + name = 'RHTML'
      + aliases = ['rhtml', 'html+erb', 'html+ruby']
      + filenames = ['*.rhtml']
      + version_added = ''
      + alias_filenames = ['*.html', '*.htm', '*.xhtml']
      + mimetypes = ['text/html+ruby']
      + url = 'https://github.com/ruby/erb'
  --
      - __init__()
      + analyse_text(text)
  }

  class XmlErbLexer {
      + name = 'XML+Ruby'
      + aliases = ['xml+ruby', 'xml+erb']
      + version_added = ''
      + alias_filenames = ['*.xml']
      + mimetypes = ['application/xml+ruby']
      + url = 'https://github.com/ruby/erb'
  --
      - __init__()
      + analyse_text(text)
  }

  class CssErbLexer {
      + name = 'CSS+Ruby'
      + aliases = ['css+ruby', 'css+erb']
      + version_added = ''
      + alias_filenames = ['*.css']
      + mimetypes = ['text/css+ruby']
      + url = 'https://github.com/ruby/erb'
  --
      - __init__()
      + analyse_text(text)
  }

  class JavascriptErbLexer {
      + name = 'JavaScript+Ruby'
      + aliases = ['javascript+ruby', 'js+ruby', 'javascript+erb', 'js+erb']
      + version_added = ''
      + alias_filenames = ['*.js']
      + mimetypes = ['application/x-javascript+ruby', 'text/x-javascript+ruby', 'text/javascript+ruby']
      + url = 'https://github.com/ruby/erb'
  --
      - __init__()
      + analyse_text(text)
  }

  class HtmlPhpLexer {
      + name = 'HTML+PHP'
      + aliases = ['html+php']
      + filenames = ['*.phtml']
      + version_added = ''
      + alias_filenames = ['*.php', '*.html', '*.htm', '*.xhtml', '*.php[345]']
      + mimetypes = ['application/x-php', 'application/x-httpd-php', 'application/x-httpd-php3', 'application/x-httpd-php4', 'application/x-httpd-php5']
      + url = 'https://www.php.net'
  --
      - __init__()
      + analyse_text(text)
  }

  class XmlPhpLexer {
      + name = 'XML+PHP'
      + aliases = ['xml+php']
      + version_added = ''
      + alias_filenames = ['*.xml', '*.php', '*.php[345]']
      + mimetypes = ['application/xml+php']
      + url = 'https://www.php.net'
  --
      - __init__()
      + analyse_text(text)
  }

  class CssPhpLexer {
      + name = 'CSS+PHP'
      + aliases = ['css+php']
      + version_added = ''
      + alias_filenames = ['*.css']
      + mimetypes = ['text/css+php']
      + url = 'https://www.php.net'
  --
      - __init__()
      + analyse_text(text)
  }

  class JavascriptPhpLexer {
      + name = 'JavaScript+PHP'
      + aliases = ['javascript+php', 'js+php']
      + version_added = ''
      + alias_filenames = ['*.js']
      + mimetypes = ['application/x-javascript+php', 'text/x-javascript+php', 'text/javascript+php']
      + url = 'https://www.php.net'
  --
      - __init__()
      + analyse_text(text)
  }

  class HtmlSmartyLexer {
      + name = 'HTML+Smarty'
      + aliases = ['html+smarty']
      + version_added = ''
      + alias_filenames = ['*.html', '*.htm', '*.xhtml', '*.tpl']
      + mimetypes = ['text/html+smarty']
      + url = 'https://www.smarty.net/'
  --
      - __init__()
      + analyse_text(text)
  }

  class XmlSmartyLexer {
      + name = 'XML+Smarty'
      + aliases = ['xml+smarty']
      + version_added = ''
      + alias_filenames = ['*.xml', '*.tpl']
      + mimetypes = ['application/xml+smarty']
      + url = 'https://www.smarty.net/'
  --
      - __init__()
      + analyse_text(text)
  }

  class CssSmartyLexer {
      + name = 'CSS+Smarty'
      + aliases = ['css+smarty']
      + version_added = ''
      + alias_filenames = ['*.css', '*.tpl']
      + mimetypes = ['text/css+smarty']
      + url = 'https://www.smarty.net/'
  --
      - __init__()
      + analyse_text(text)
  }

  class JavascriptSmartyLexer {
      + name = 'JavaScript+Smarty'
      + aliases = ['javascript+smarty', 'js+smarty']
      + version_added = ''
      + alias_filenames = ['*.js', '*.tpl']
      + mimetypes = ['application/x-javascript+smarty', 'text/x-javascript+smarty', 'text/javascript+smarty']
      + url = 'https://www.smarty.net/'
  --
      - __init__()
      + analyse_text(text)
  }

  class HtmlDjangoLexer {
      + name = 'HTML+Django/Jinja'
      + aliases = ['html+django', 'html+jinja', 'htmldjango']
      + filenames = ['*.html.j2', '*.htm.j2', '*.xhtml.j2', '*.html.jinja2', '*.htm.jinja2', '*.xhtml.jinja2']
      + version_added = ''
      + alias_filenames = ['*.html', '*.htm', '*.xhtml']
      + mimetypes = ['text/html+django', 'text/html+jinja']
      + url = 'https://www.djangoproject.com/documentation/templates'
  --
      - __init__()
      + analyse_text(text)
  }

  class XmlDjangoLexer {
      + name = 'XML+Django/Jinja'
      + aliases = ['xml+django', 'xml+jinja']
      + filenames = ['*.xml.j2', '*.xml.jinja2']
      + version_added = ''
      + alias_filenames = ['*.xml']
      + mimetypes = ['application/xml+django', 'application/xml+jinja']
      + url = 'https://www.djangoproject.com/documentation/templates'
  --
      - __init__()
      + analyse_text(text)
  }

  class CssDjangoLexer {
      + name = 'CSS+Django/Jinja'
      + aliases = ['css+django', 'css+jinja']
      + filenames = ['*.css.j2', '*.css.jinja2']
      + version_added = ''
      + alias_filenames = ['*.css']
      + mimetypes = ['text/css+django', 'text/css+jinja']
      + url = 'https://www.djangoproject.com/documentation/templates'
  --
      - __init__()
      + analyse_text(text)
  }

  class JavascriptDjangoLexer {
      + name = 'JavaScript+Django/Jinja'
      + aliases = ['javascript+django', 'js+django', 'javascript+jinja', 'js+jinja']
      + filenames = ['*.js.j2', '*.js.jinja2']
      + version_added = ''
      + alias_filenames = ['*.js']
      + mimetypes = ['application/x-javascript+django', 'application/x-javascript+jinja', 'text/x-javascript+django', 'text/x-javascript+jinja', 'text/javascript+django', 'text/javascript+jinja']
      + url = 'https://www.djangoproject.com/documentation/templates'
  --
      - __init__()
      + analyse_text(text)
  }

  class JspRootLexer {
      + tokens = {'root': [('<%\\S?', Keyword, 'sec'), ('</?jsp:(forward|getProperty|include|plugin|setProperty|useBean).*?>', Keyword), ('[^<]+', Other), ('<', Other)], 'sec': [('%>', Keyword, '#pop'), ('[\\w\\W]+?(?=%>|\\Z)', using(JavaLexer))]}
  }

  class JspLexer {
      + name = 'Java Server Page'
      + aliases = ['jsp']
      + filenames = ['*.jsp']
      + mimetypes = ['application/x-jsp']
      + url = 'https://projects.eclipse.org/projects/ee4j.jsp'
      + version_added = '0.7'
  --
      - __init__()
      + analyse_text(text)
  }

  class EvoqueLexer {
      + name = 'Evoque'
      + aliases = ['evoque']
      + filenames = ['*.evoque']
      + mimetypes = ['application/x-evoque']
      + url = 'https://gizmojo.org/templating'
      + version_added = '1.1'
      + flags = re.DOTALL
      + tokens = {'root': [('[^#$]+', Other), ('#\\[', Comment.Multiline, 'comment'), ('\\$\\$', Other), ('\\$\\w+:[^$\\n]*\\$', Comment.Multiline), ('(\\$)(begin|end)(\\{(%)?)(.*?)((?(4)%)\\})', bygroups(Punctuation, Name.Builtin, Punctuation, None, String, Punctuation)), ('(\\$)(evoque|overlay)(\\{(%)?)(\\s*[#\\w\\-"\\\'.]+)?(.*?)((?(4)%)\\})', bygroups(Punctuation, Name.Builtin, Punctuation, None, String, using(PythonLexer), Punctuation)), ('(\\$)(\\w+)(\\{(%)?)(.*?)((?(4)%)\\})', bygroups(Punctuation, Name.Builtin, Punctuation, None, using(PythonLexer), Punctuation)), ('(\\$)(else|rof|fi)', bygroups(Punctuation, Name.Builtin)), ('(\\$\\{(%)?)(.*?)((!)(.*?))?((?(2)%)\\})', bygroups(Punctuation, None, using(PythonLexer), Name.Builtin, None, None, Punctuation)), ('#', Other)], 'comment': [('[^\\]#]', Comment.Multiline), ('#\\[', Comment.Multiline, '#push'), ('\\]#', Comment.Multiline, '#pop'), ('[\\]#]', Comment.Multiline)]}
  --
      + analyse_text(text)
  }

  class EvoqueHtmlLexer {
      + name = 'HTML+Evoque'
      + aliases = ['html+evoque']
      + alias_filenames = ['*.html']
      + mimetypes = ['text/html+evoque']
      + url = 'https://gizmojo.org/templating'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class EvoqueXmlLexer {
      + name = 'XML+Evoque'
      + aliases = ['xml+evoque']
      + alias_filenames = ['*.xml']
      + mimetypes = ['application/xml+evoque']
      + url = 'https://gizmojo.org/templating'
      + version_added = '1.1'
  --
      - __init__()
      + analyse_text(text)
  }

  class ColdfusionLexer {
      + name = 'cfstatement'
      + aliases = ['cfs']
      + filenames = []
      + mimetypes = []
      + url = 'https://www.adobe.com/products/coldfusion-family.html'
      + version_added = ''
      + flags = re.IGNORECASE
      + tokens = {'root': [('//.*?\\n', Comment.Single), ('/\\*(?:.|\\n)*?\\*/', Comment.Multiline), ('\\+\\+|--', Operator), ('[-+*/^&=!]', Operator), ('<=|>=|<|>|==', Operator), ('mod\\b', Operator), ('(eq|lt|gt|lte|gte|not|is|and|or)\\b', Operator), ('\\|\\||&&', Operator), ('\\?', Operator), ('"', String.Double, 'string'), ("'.*?'", String.Single), ('\\d+', Number), ('(if|else|len|var|xml|default|break|switch|component|property|function|do|try|catch|in|continue|for|return|while|required|any|array|binary|boolean|component|date|guid|numeric|query|string|struct|uuid|case)\\b', Keyword), ('(true|false|null)\\b', Keyword.Constant), ('(application|session|client|cookie|super|this|variables|arguments)\\b', Name.Constant), ('([a-z_$][\\w.]*)(\\s*)(\\()', bygroups(Name.Function, Text, Punctuation)), ('[a-z_$][\\w.]*', Name.Variable), ('[()\\[\\]{};:,.\\\\]', Punctuation), ('\\s+', Text)], 'string': [('""', String.Double), ('#.+?#', String.Interp), ('[^"#]+', String.Double), ('#', String.Double), ('"', String.Double, '#pop')]}
  }

  class ColdfusionMarkupLexer {
      + name = 'Coldfusion'
      + aliases = ['cf']
      + filenames = []
      + mimetypes = []
      + url = 'https://www.adobe.com/products/coldfusion-family.html'
      + tokens = {'root': [('[^<]+', Other), include('tags'), ('<[^<>]*', Other)], 'tags': [('<!---', Comment.Multiline, 'cfcomment'), ('(?s)<!--.*?-->', Comment), ('<cfoutput.*?>', Name.Builtin, 'cfoutput'), ('(?s)(<cfscript.*?>)(.+?)(</cfscript.*?>)', bygroups(Name.Builtin, using(ColdfusionLexer), Name.Builtin)), ('(?s)(</?cf(?:component|include|if|else|elseif|loop|return|dbinfo|dump|abort|location|invoke|throw|file|savecontent|mailpart|mail|header|content|zip|image|lock|argument|try|catch|break|directory|http|set|function|param)\\b)(.*?)((?<!\\\\)>)', bygroups(Name.Builtin, using(ColdfusionLexer), Name.Builtin))], 'cfoutput': [('[^#<]+', Other), ('(#)(.*?)(#)', bygroups(Punctuation, using(ColdfusionLexer), Punctuation)), ('</cfoutput.*?>', Name.Builtin, '#pop'), include('tags'), ('(?s)<[^<>]*', Other), ('#', Other)], 'cfcomment': [('<!---', Comment.Multiline, '#push'), ('--->', Comment.Multiline, '#pop'), ('([^<-]|<(?!!---)|-(?!-->))+', Comment.Multiline)]}
  }

  class ColdfusionHtmlLexer {
      + name = 'Coldfusion HTML'
      + aliases = ['cfm']
      + filenames = ['*.cfm', '*.cfml']
      + mimetypes = ['application/x-coldfusion']
      + url = 'https://www.adobe.com/products/coldfusion-family.html'
      + version_added = ''
  --
      - __init__()
  }

  class ColdfusionCFCLexer {
      + name = 'Coldfusion CFC'
      + aliases = ['cfc']
      + filenames = ['*.cfc']
      + mimetypes = []
      + url = 'https://www.adobe.com/products/coldfusion-family.html'
      + version_added = '2.0'
  --
      - __init__()
  }

  class SspLexer {
      + name = 'Scalate Server Page'
      + aliases = ['ssp']
      + filenames = ['*.ssp']
      + mimetypes = ['application/x-ssp']
      + url = 'https://scalate.github.io/scalate/'
      + version_added = '1.4'
  --
      - __init__()
      + analyse_text(text)
  }

  class TeaTemplateRootLexer {
      + tokens = {'root': [('<%\\S?', Keyword, 'sec'), ('[^<]+', Other), ('<', Other)], 'sec': [('%>', Keyword, '#pop'), ('[\\w\\W]+?(?=%>|\\Z)', using(TeaLangLexer))]}
  }

  class TeaTemplateLexer {
      + name = 'Tea'
      + aliases = ['tea']
      + filenames = ['*.tea']
      + mimetypes = ['text/x-tea']
      + url = 'https://github.com/teatrove/teatrove'
      + version_added = '1.5'
  --
      - __init__()
      + analyse_text(text)
  }

  class LassoHtmlLexer {
      + name = 'HTML+Lasso'
      + aliases = ['html+lasso']
      + version_added = '1.6'
      + alias_filenames = ['*.html', '*.htm', '*.xhtml', '*.lasso', '*.lasso[89]', '*.incl', '*.inc', '*.las']
      + mimetypes = ['text/html+lasso', 'application/x-httpd-lasso', 'application/x-httpd-lasso[89]']
      + url = 'https://www.lassosoft.com'
  --
      - __init__()
      + analyse_text(text)
  }

  class LassoXmlLexer {
      + name = 'XML+Lasso'
      + aliases = ['xml+lasso']
      + version_added = '1.6'
      + alias_filenames = ['*.xml', '*.lasso', '*.lasso[89]', '*.incl', '*.inc', '*.las']
      + mimetypes = ['application/xml+lasso']
      + url = 'https://www.lassosoft.com'
  --
      - __init__()
      + analyse_text(text)
  }

  class LassoCssLexer {
      + name = 'CSS+Lasso'
      + aliases = ['css+lasso']
      + version_added = '1.6'
      + alias_filenames = ['*.css']
      + mimetypes = ['text/css+lasso']
      + url = 'https://www.lassosoft.com'
  --
      - __init__()
      + analyse_text(text)
  }

  class LassoJavascriptLexer {
      + name = 'JavaScript+Lasso'
      + aliases = ['javascript+lasso', 'js+lasso']
      + version_added = '1.6'
      + alias_filenames = ['*.js']
      + mimetypes = ['application/x-javascript+lasso', 'text/x-javascript+lasso', 'text/javascript+lasso']
      + url = 'https://www.lassosoft.com'
  --
      - __init__()
      + analyse_text(text)
  }

  class HandlebarsLexer {
      + name = 'Handlebars'
      + url = 'https://handlebarsjs.com/'
      + aliases = ['handlebars']
      + version_added = '2.0'
      + tokens = {'root': [('[^{]+', Other), ('\\{\\{!.*\\}\\}', Comment), ('(\\{\\{\\{)(\\s*)', bygroups(Comment.Special, Text), 'tag'), ('(\\{\\{)([#~/]+)([^\\s}]*)', bygroups(Comment.Preproc, Number.Attribute, Number.Attribute), 'tag'), ('(\\{\\{)(\\s*)', bygroups(Comment.Preproc, Text), 'tag')], 'tag': [('\\s+', Text), ('\\}\\}\\}', Comment.Special, '#pop'), ('(~?)(\\}\\})', bygroups(Number, Comment.Preproc), '#pop'), ('([^\\s}]+)(=)', bygroups(Name.Attribute, Operator)), ('(>)(\\s*)(@partial-block)', bygroups(Keyword, Text, Keyword)), ('(#?>)(\\s*)([\\w-]+)', bygroups(Keyword, Text, Name.Variable)), ('(>)(\\s*)(\\()', bygroups(Keyword, Text, Punctuation), 'dynamic-partial'), include('generic')], 'dynamic-partial': [('\\s+', Text), ('\\)', Punctuation, '#pop'), ('(lookup)(\\s+)(\\.|this)(\\s+)', bygroups(Keyword, Text, Name.Variable, Text)), ('(lookup)(\\s+)(\\S+)', bygroups(Keyword, Text, using(this, state='variable'))), ('[\\w-]+', Name.Function), include('generic')], 'variable': [('[()/@a-zA-Z][\\w-]*', Name.Variable), ('\\.[\\w-]+', Name.Variable), ('(this\\/|\\.\\/|(\\.\\.\\/)+)[\\w-]+', Name.Variable)], 'generic': [include('variable'), (':?"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), (":?'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('[0-9](\\.[0-9]*)?(eE[+-][0-9])?[flFLdD]?|0[xX][0-9a-fA-F]+[Ll]?', Number)]}
  }

  class HandlebarsHtmlLexer {
      + name = 'HTML+Handlebars'
      + aliases = ['html+handlebars']
      + filenames = ['*.handlebars', '*.hbs']
      + mimetypes = ['text/html+handlebars', 'text/x-handlebars-template']
      + url = 'https://handlebarsjs.com/'
      + version_added = '2.0'
  --
      - __init__()
  }

  class YamlJinjaLexer {
      + name = 'YAML+Jinja'
      + aliases = ['yaml+jinja', 'salt', 'sls']
      + filenames = ['*.sls', '*.yaml.j2', '*.yml.j2', '*.yaml.jinja2', '*.yml.jinja2']
      + mimetypes = ['text/x-yaml+jinja', 'text/x-sls']
      + url = 'https://jinja.palletsprojects.com'
      + version_added = '2.0'
  --
      - __init__()
  }

  class LiquidLexer {
      + name = 'liquid'
      + url = 'https://www.rubydoc.info/github/Shopify/liquid'
      + aliases = ['liquid']
      + filenames = ['*.liquid']
      + version_added = '2.0'
      + tokens = {'root': [('[^{]+', Text), ('(\\{%)(\\s*)', bygroups(Punctuation, Whitespace), 'tag-or-block'), ('(\\{\\{)(\\s*)([^\\s}]+)', bygroups(Punctuation, Whitespace, using(this, state='generic')), 'output'), ('\\{', Text)], 'tag-or-block': [('(if|unless|elsif|case)(?=\\s+)', Keyword.Reserved, 'condition'), ('(when)(\\s+)', bygroups(Keyword.Reserved, Whitespace), combined('end-of-block', 'whitespace', 'generic')), ('(else)(\\s*)(%\\})', bygroups(Keyword.Reserved, Whitespace, Punctuation), '#pop'), ('(capture)(\\s+)([^\\s%]+)(\\s*)(%\\})', bygroups(Name.Tag, Whitespace, using(this, state='variable'), Whitespace, Punctuation), '#pop'), ('(comment)(\\s*)(%\\})', bygroups(Name.Tag, Whitespace, Punctuation), 'comment'), ('(raw)(\\s*)(%\\})', bygroups(Name.Tag, Whitespace, Punctuation), 'raw'), ('(end(case|unless|if))(\\s*)(%\\})', bygroups(Keyword.Reserved, None, Whitespace, Punctuation), '#pop'), ('(end([^\\s%]+))(\\s*)(%\\})', bygroups(Name.Tag, None, Whitespace, Punctuation), '#pop'), ('(cycle)(\\s+)(?:([^\\s:]*)(:))?(\\s*)', bygroups(Name.Tag, Whitespace, using(this, state='generic'), Punctuation, Whitespace), 'variable-tag-markup'), ('([^\\s%]+)(\\s*)', bygroups(Name.Tag, Whitespace), 'tag-markup')], 'output': [include('whitespace'), ('\\}\\}', Punctuation, '#pop'), ('\\|', Punctuation, 'filters')], 'filters': [include('whitespace'), ('\\}\\}', Punctuation, ('#pop', '#pop')), ('([^\\s|:]+)(:?)(\\s*)', bygroups(Name.Function, Punctuation, Whitespace), 'filter-markup')], 'filter-markup': [('\\|', Punctuation, '#pop'), include('end-of-tag'), include('default-param-markup')], 'condition': [include('end-of-block'), include('whitespace'), ('([^\\s=!><]+)(\\s*)([=!><]=?)(\\s*)(\\S+)(\\s*)(%\\})', bygroups(using(this, state='generic'), Whitespace, Operator, Whitespace, using(this, state='generic'), Whitespace, Punctuation)), ('\\b!', Operator), ('\\bnot\\b', Operator.Word), ('([\\w.\\\'"]+)(\\s+)(contains)(\\s+)([\\w.\\\'"]+)', bygroups(using(this, state='generic'), Whitespace, Operator.Word, Whitespace, using(this, state='generic'))), include('generic'), include('whitespace')], 'generic-value': [include('generic'), include('end-at-whitespace')], 'operator': [('(\\s*)((=|!|>|<)=?)(\\s*)', bygroups(Whitespace, Operator, None, Whitespace), '#pop'), ('(\\s*)(\\bcontains\\b)(\\s*)', bygroups(Whitespace, Operator.Word, Whitespace), '#pop')], 'end-of-tag': [('\\}\\}', Punctuation, '#pop')], 'end-of-block': [('%\\}', Punctuation, ('#pop', '#pop'))], 'end-at-whitespace': [('\\s+', Whitespace, '#pop')], 'param-markup': [include('whitespace'), ('([^\\s=:]+)(\\s*)(=|:)', bygroups(Name.Attribute, Whitespace, Operator)), ('(\\{\\{)(\\s*)([^\\s}])(\\s*)(\\}\\})', bygroups(Punctuation, Whitespace, using(this, state='variable'), Whitespace, Punctuation)), include('string'), include('number'), include('keyword'), (',', Punctuation)], 'default-param-markup': [include('param-markup'), ('.', Text)], 'variable-param-markup': [include('param-markup'), include('variable'), ('.', Text)], 'tag-markup': [('%\\}', Punctuation, ('#pop', '#pop')), include('default-param-markup')], 'variable-tag-markup': [('%\\}', Punctuation, ('#pop', '#pop')), include('variable-param-markup')], 'keyword': [('\\b(false|true)\\b', Keyword.Constant)], 'variable': [('[a-zA-Z_]\\w*', Name.Variable), ('(?<=\\w)\\.(?=\\w)', Punctuation)], 'string': [("'[^']*'", String.Single), ('"[^"]*"', String.Double)], 'number': [('\\d+\\.\\d+', Number.Float), ('\\d+', Number.Integer)], 'generic': [include('keyword'), include('string'), include('number'), include('variable')], 'whitespace': [('[ \\t]+', Whitespace)], 'comment': [('(\\{%)(\\s*)(endcomment)(\\s*)(%\\})', bygroups(Punctuation, Whitespace, Name.Tag, Whitespace, Punctuation), ('#pop', '#pop')), ('.', Comment)], 'raw': [('[^{]+', Text), ('(\\{%)(\\s*)(endraw)(\\s*)(%\\})', bygroups(Punctuation, Whitespace, Name.Tag, Whitespace, Punctuation), '#pop'), ('\\{', Text)]}
  }

  class TwigLexer {
      + name = 'Twig'
      + aliases = ['twig']
      + mimetypes = ['application/x-twig']
      + url = 'https://twig.symfony.com'
      + version_added = '2.0'
      + flags = re.M | re.S
      + tokens = {'root': [('[^{]+', Other), ('\\{\\{', Comment.Preproc, 'var'), ('\\{\\#.*?\\#\\}', Comment), ('(\\{%)(-?\\s*)(raw)(\\s*-?)(%\\})(.*?)(\\{%)(-?\\s*)(endraw)(\\s*-?)(%\\})', bygroups(Comment.Preproc, Text, Keyword, Text, Comment.Preproc, Other, Comment.Preproc, Text, Keyword, Text, Comment.Preproc)), ('(\\{%)(-?\\s*)(verbatim)(\\s*-?)(%\\})(.*?)(\\{%)(-?\\s*)(endverbatim)(\\s*-?)(%\\})', bygroups(Comment.Preproc, Text, Keyword, Text, Comment.Preproc, Other, Comment.Preproc, Text, Keyword, Text, Comment.Preproc)), (f'(\\{{%)(-?\\s*)(filter)(\\s+)({_ident_inner})', bygroups(Comment.Preproc, Text, Keyword, Text, Name.Function), 'tag'), ('(\\{%)(-?\\s*)([a-zA-Z_]\\w*)', bygroups(Comment.Preproc, Text, Keyword), 'tag'), ('\\{', Other)], 'varnames': [(f'(\\|)(\\s*)({_ident_inner})', bygroups(Operator, Text, Name.Function)), (f'(is)(\\s+)(not)?(\\s*)({_ident_inner})', bygroups(Keyword, Text, Keyword, Text, Name.Function)), ('(?i)(true|false|none|null)\\b', Keyword.Pseudo), ('(in|not|and|b-and|or|b-or|b-xor|isif|elseif|else|importconstant|defined|divisibleby|empty|even|iterable|odd|sameasmatches|starts\\s+with|ends\\s+with)\\b', Keyword), ('(loop|block|parent)\\b', Name.Builtin), (_ident_inner, Name.Variable), ('\\.' + _ident_inner, Name.Variable), ('\\.[0-9]+', Number), (':?"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), (":?'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('([{}()\\[\\]+\\-*/,:~%]|\\.\\.|\\?|:|\\*\\*|\\/\\/|!=|[><=]=?)', Operator), ('[0-9](\\.[0-9]*)?(eE[+-][0-9])?[flFLdD]?|0[xX][0-9a-fA-F]+[Ll]?', Number)], 'var': [('\\s+', Text), ('(-?)(\\}\\})', bygroups(Text, Comment.Preproc), '#pop'), include('varnames')], 'tag': [('\\s+', Text), ('(-?)(%\\})', bygroups(Text, Comment.Preproc), '#pop'), include('varnames'), ('.', Punctuation)]}
  }

  class TwigHtmlLexer {
      + name = 'HTML+Twig'
      + aliases = ['html+twig']
      + filenames = ['*.twig']
      + mimetypes = ['text/html+twig']
      + url = 'https://twig.symfony.com'
      + version_added = '2.0'
  --
      - __init__()
  }

  class Angular2Lexer {
      + name = 'Angular2'
      + url = 'https://angular.io/guide/template-syntax'
      + aliases = ['ng2']
      + version_added = '2.1'
      + tokens = {'root': [('[^{([*#]+', Other), ('(\\{\\{)(\\s*)', bygroups(Comment.Preproc, Text), 'ngExpression'), ('([([]+)([\\w:.-]+)([\\])]+)(\\s*)(=)(\\s*)', bygroups(Punctuation, Name.Attribute, Punctuation, Text, Operator, Text), 'attr'), ('([([]+)([\\w:.-]+)([\\])]+)(\\s*)', bygroups(Punctuation, Name.Attribute, Punctuation, Text)), ('([*#])([\\w:.-]+)(\\s*)(=)(\\s*)', bygroups(Punctuation, Name.Attribute, Text, Operator, Text), 'attr'), ('([*#])([\\w:.-]+)(\\s*)', bygroups(Punctuation, Name.Attribute, Text))], 'ngExpression': [('\\s+(\\|\\s+)?', Text), ('\\}\\}', Comment.Preproc, '#pop'), (':?(true|false)', String.Boolean), (':?"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), (":?'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single), ('[0-9](\\.[0-9]*)?(eE[+-][0-9])?[flFLdD]?|0[xX][0-9a-fA-F]+[Ll]?', Number), ('[a-zA-Z][\\w-]*(\\(.*\\))?', Name.Variable), ('\\.[\\w-]+(\\(.*\\))?', Name.Variable), ('(\\?)(\\s*)([^}\\s]+)(\\s*)(:)(\\s*)([^}\\s]+)(\\s*)', bygroups(Operator, Text, String, Text, Operator, Text, String, Text))], 'attr': [('".*?"', String, '#pop'), ("'.*?'", String, '#pop'), ('[^\\s>]+', String, '#pop')]}
  }

  class Angular2HtmlLexer {
      + name = 'HTML + Angular2'
      + aliases = ['html+ng2']
      + filenames = ['*.ng2']
      + url = 'https://angular.io/guide/template-syntax'
      + version_added = '2.0'
  --
      - __init__()
  }

  class SqlJinjaLexer {
      + name = 'SQL+Jinja'
      + aliases = ['sql+jinja']
      + filenames = ['*.sql', '*.sql.j2', '*.sql.jinja2']
      + url = 'https://jinja.palletsprojects.com'
      + version_added = '2.13'
  --
      - __init__()
      + analyse_text(text)
  }

  class TeraTermLexer {
      + name = 'Tera Term macro'
      + url = 'https://ttssh2.osdn.jp/'
      + aliases = ['teratermmacro', 'teraterm', 'ttl']
      + filenames = ['*.ttl']
      + mimetypes = ['text/x-teratermmacro']
      + version_added = '2.4'
      + tokens = {'root': [include('comments'), include('labels'), include('commands'), include('builtin-variables'), include('user-variables'), include('operators'), include('numeric-literals'), include('string-literals'), include('all-whitespace'), ('\\S', Text)], 'comments': [(';[^\\r\\n]*', Comment.Single), ('/\\*', Comment.Multiline, 'in-comment')], 'in-comment': [('\\*/', Comment.Multiline, '#pop'), ('[^*/]+', Comment.Multiline), ('[*/]', Comment.Multiline)], 'labels': [('(?i)^(\\s*)(:[a-z0-9_]+)', bygroups(Text.Whitespace, Name.Label))], 'commands': [('(?i)\\b(basename|beep|bplusrecv|bplussend|break|bringupbox|callmenu|changedir|checksum16|checksum16file|checksum32|checksum32file|checksum8|checksum8file|clearscreen|clipb2var|closesbox|closett|code2str|connect|continue|crc16|crc16file|crc32|crc32file|cygconnect|delpassword|dirname|dirnamebox|disconnect|dispstr|do|else|elseif|enablekeyb|end|endif|enduntil|endwhile|exec|execcmnd|exit|expandenv|fileclose|fileconcat|filecopy|filecreate|filedelete|filelock|filemarkptr|filenamebox|fileopen|fileread|filereadln|filerename|filesearch|fileseek|fileseekback|filestat|filestrseek|filestrseek2|filetruncate|fileunlock|filewrite|filewriteln|findclose|findfirst|findnext|flushrecv|foldercreate|folderdelete|foldersearch|for|getdate|getdir|getenv|getfileattr|gethostname|getipv4addr|getipv6addr|getmodemstatus|getpassword|getspecialfolder|gettime|gettitle|getttdir|getver|if|ifdefined|include|inputbox|int2str|intdim|ispassword|kmtfinish|kmtget|kmtrecv|kmtsend|listbox|loadkeymap|logautoclosemode|logclose|loginfo|logopen|logpause|logrotate|logstart|logwrite|loop|makepath|messagebox|mpause|next|passwordbox|pause|quickvanrecv|quickvansend|random|recvln|regexoption|restoresetup|return|rotateleft|rotateright|scprecv|scpsend|send|sendbreak|sendbroadcast|sendfile|sendkcode|sendln|sendlnbroadcast|sendlnmulticast|sendmulticast|setbaud|setdate|setdebug|setdir|setdlgpos|setdtr|setecho|setenv|setexitcode|setfileattr|setflowctrl|setmulticastname|setpassword|setrts|setspeed|setsync|settime|settitle|show|showtt|sprintf|sprintf2|statusbox|str2code|str2int|strcompare|strconcat|strcopy|strdim|strinsert|strjoin|strlen|strmatch|strremove|strreplace|strscan|strspecial|strsplit|strtrim|testlink|then|tolower|toupper|unlink|until|uptime|var2clipb|wait|wait4all|waitevent|waitln|waitn|waitrecv|waitregex|while|xmodemrecv|xmodemsend|yesnobox|ymodemrecv|ymodemsend|zmodemrecv|zmodemsend)\\b', Keyword), ('(?i)(call|goto)([ \\t]+)([a-z0-9_]+)', bygroups(Keyword, Text.Whitespace, Name.Label))], 'builtin-variables': [('(?i)(groupmatchstr1|groupmatchstr2|groupmatchstr3|groupmatchstr4|groupmatchstr5|groupmatchstr6|groupmatchstr7|groupmatchstr8|groupmatchstr9|inputstr|matchstr|mtimeout|param1|param2|param3|param4|param5|param6|param7|param8|param9|paramcnt|params|result|timeout)\\b', Name.Builtin)], 'user-variables': [('(?i)[a-z_][a-z0-9_]*', Name.Variable)], 'numeric-literals': [('(-?)([0-9]+)', bygroups(Operator, Number.Integer)), ('(?i)\\$[0-9a-f]+', Number.Hex)], 'string-literals': [('(?i)#(?:[0-9]+|\\$[0-9a-f]+)', String.Char), ("'[^'\\n]*'", String.Single), ('"[^"\\n]*"', String.Double), ("('[^']*)(\\n)", bygroups(Error, Text.Whitespace)), ('("[^"]*)(\\n)', bygroups(Error, Text.Whitespace))], 'operators': [('and|not|or|xor', Operator.Word), ('[!%&*+<=>^~\\|\\/-]+', Operator), ('[()]', String.Symbol)], 'all-whitespace': [('\\s+', Text.Whitespace)]}
  --
      + analyse_text(text)
  }

  class GherkinLexer {
      + name = 'Gherkin'
      + aliases = ['gherkin', 'cucumber']
      + filenames = ['*.feature']
      + mimetypes = ['text/x-gherkin']
      + url = 'https://cucumber.io/docs/gherkin'
      + version_added = '1.2'
      + feature_keywords = '^(기능|機能|功能|フィーチャ|خاصية|תכונה|Функціонал|Функционалност|Функционал|Фича|Особина|Могућност|Özellik|Właściwość|Tính năng|Trajto|Savybė|Požiadavka|Požadavek|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Fīča|Funzionalità|Funktionalität|Funkcionalnost|Funkcionalitāte|Funcționalitate|Functionaliteit|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Feature|Egenskap|Egenskab|Crikey|Característica|Arwedd)(:)(.*)$'
      + feature_element_keywords = "^(\\s*)(시나리오 개요|시나리오|배경|背景|場景大綱|場景|场景大纲|场景|劇本大綱|劇本|剧本大纲|剧本|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|シナリオ|سيناريو مخطط|سيناريو|الخلفية|תרחיש|תבנית תרחיש|רקע|Тарих|Сценарій|Сценарио|Сценарий структураси|Сценарий|Структура сценарію|Структура сценарија|Структура сценария|Скица|Рамка на сценарий|Пример|Предыстория|Предистория|Позадина|Передумова|Основа|Концепт|Контекст|Założenia|Wharrimean is|Tình huống|The thing of it is|Tausta|Taust|Tapausaihio|Tapaus|Szenariogrundriss|Szenario|Szablon scenariusza|Stsenaarium|Struktura scenarija|Skica|Skenario konsep|Skenario|Situācija|Senaryo taslağı|Senaryo|Scénář|Scénario|Schema dello scenario|Scenārijs pēc parauga|Scenārijs|Scenár|Scenaro|Scenariusz|Scenariul de şablon|Scenariul de sablon|Scenariu|Scenario Outline|Scenario Amlinellol|Scenario|Scenarijus|Scenarijaus šablonas|Scenarij|Scenarie|Rerefons|Raamstsenaarium|Primer|Pozadí|Pozadina|Pozadie|Plan du scénario|Plan du Scénario|Osnova scénáře|Osnova|Náčrt Scénáře|Náčrt Scenáru|Mate|MISHUN SRSLY|MISHUN|Kịch bản|Konturo de la scenaro|Kontext|Konteksts|Kontekstas|Kontekst|Koncept|Khung tình huống|Khung kịch bản|Háttér|Grundlage|Geçmiş|Forgatókönyv vázlat|Forgatókönyv|Fono|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l'escenari|Escenario|Escenari|Dis is what went down|Dasar|Contexto|Contexte|Contesto|Condiţii|Conditii|Cenário|Cenario|Cefndir|Bối cảnh|Blokes|Bakgrunn|Bakgrund|Baggrund|Background|B4|Antecedents|Antecedentes|All y'all|Achtergrond|Abstrakt Scenario|Abstract Scenario)(:)(.*)$"
      + examples_keywords = '^(\\s*)(예|例子|例|サンプル|امثلة|דוגמאות|Сценарији|Примери|Приклади|Мисоллар|Значения|Örnekler|Voorbeelden|Variantai|Tapaukset|Scenarios|Scenariji|Scenarijai|Příklady|Példák|Príklady|Przykłady|Primjeri|Primeri|Piemēri|Pavyzdžiai|Paraugs|Juhtumid|Exemplos|Exemples|Exemplele|Exempel|Examples|Esempi|Enghreifftiau|Ekzemploj|Eksempler|Ejemplos|EXAMPLZ|Dữ liệu|Contoh|Cobber|Beispiele)(:)(.*)$'
      + step_keywords = "^(\\s*)(하지만|조건|먼저|만일|만약|단|그리고|그러면|那麼|那么|而且|當|当|前提|假設|假设|假如|假定|但是|但し|並且|并且|同時|同时|もし|ならば|ただし|しかし|かつ|و |متى |لكن |عندما |ثم |بفرض |اذاً |כאשר |וגם |בהינתן |אזי |אז |אבל |Якщо |Унда |То |Припустимо, що |Припустимо |Онда |Но |Нехай |Лекин |Когато |Када |Кад |К тому же |И |Задато |Задати |Задате |Если |Допустим |Дадено |Ва |Бирок |Аммо |Али |Але |Агар |А |І |Și |És |Zatati |Zakładając |Zadato |Zadate |Zadano |Zadani |Zadan |Youse know when youse got |Youse know like when |Yna |Ya know how |Ya gotta |Y |Wun |Wtedy |When y'all |When |Wenn |WEN |Và |Ve |Und |Un |Thì |Then y'all |Then |Tapi |Tak |Tada |Tad |Så |Stel |Soit |Siis |Si |Sed |Se |Quando |Quand |Quan |Pryd |Pokud |Pokiaľ |Però |Pero |Pak |Oraz |Onda |Ond |Oletetaan |Og |Och |O zaman |Når |När |Niin |Nhưng |N |Mutta |Men |Mas |Maka |Majd |Mais |Maar |Ma |Lorsque |Lorsqu'|Kun |Kuid |Kui |Khi |Keď |Ketika |Když |Kaj |Kai |Kada |Kad |Jeżeli |Ja |Ir |I CAN HAZ |I |Ha |Givun |Givet |Given y'all |Given |Gitt |Gegeven |Gegeben sei |Fakat |Eğer ki |Etant donné |Et |Então |Entonces |Entao |En |Eeldades |E |Duota |Dun |Donitaĵo |Donat |Donada |Do |Diyelim ki |Dengan |Den youse gotta |De |Dato |Dar |Dann |Dan |Dado |Dacă |Daca |DEN |Când |Cuando |Cho |Cept |Cand |Cal |But y'all |But |Buh |Biết |Bet |BUT |Atès |Atunci |Atesa |Anrhegedig a |Angenommen |And y'all |And |An |Ama |Als |Alors |Allora |Ali |Aleshores |Ale |Akkor |Aber |AN |A také |A |\\* )"
      + tokens = {'comments': [('^\\s*#.*$', Comment)], 'feature_elements': [(step_keywords, Keyword, 'step_content_stack'), include('comments'), ('(\\s|.)', Name.Function)], 'feature_elements_on_stack': [(step_keywords, Keyword, '#pop:2'), include('comments'), ('(\\s|.)', Name.Function)], 'examples_table': [('\\s+\\|', Keyword, 'examples_table_header'), include('comments'), ('(\\s|.)', Name.Function)], 'examples_table_header': [('\\s+\\|\\s*$', Keyword, '#pop:2'), include('comments'), ('\\\\\\|', Name.Variable), ('\\s*\\|', Keyword), ('[^|]', Name.Variable)], 'scenario_sections_on_stack': [(feature_element_keywords, bygroups(Name.Function, Keyword, Keyword, Name.Function), 'feature_elements_on_stack')], 'narrative': [include('scenario_sections_on_stack'), include('comments'), ('(\\s|.)', Name.Function)], 'table_vars': [('(<[^>]+>)', Name.Variable)], 'numbers': [('(\\d+\\.?\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', String)], 'string': [include('table_vars'), ('(\\s|.)', String)], 'py_string': [('"""', Keyword, '#pop'), include('string')], 'step_content_root': [('$', Keyword, '#pop'), include('step_content')], 'step_content_stack': [('$', Keyword, '#pop:2'), include('step_content')], 'step_content': [('"', Name.Function, 'double_string'), include('table_vars'), include('numbers'), include('comments'), ('(\\s|.)', Name.Function)], 'table_content': [('\\s+\\|\\s*$', Keyword, '#pop'), include('comments'), ('\\\\\\|', String), ('\\s*\\|', Keyword), include('string')], 'double_string': [('"', Name.Function, '#pop'), include('string')], 'root': [('\\n', Name.Function), include('comments'), ('"""', Keyword, 'py_string'), ('\\s+\\|', Keyword, 'table_content'), ('"', Name.Function, 'double_string'), include('table_vars'), include('numbers'), ('(\\s*)(@[^@\\r\\n\\t ]+)', bygroups(Name.Function, Name.Tag)), (step_keywords, bygroups(Name.Function, Keyword), 'step_content_root'), (feature_keywords, bygroups(Keyword, Keyword, Name.Function), 'narrative'), (feature_element_keywords, bygroups(Name.Function, Keyword, Keyword, Name.Function), 'feature_elements'), (examples_keywords, bygroups(Name.Function, Keyword, Keyword, Name.Function), 'examples_table'), ('(\\s|.)', Name.Function)]}
  --
      + analyse_text(text)
  }

  class TAPLexer {
      + name = 'TAP'
      + url = 'https://testanything.org/'
      + aliases = ['tap']
      + filenames = ['*.tap']
      + version_added = '2.1'
      + tokens = {'root': [('^TAP version \\d+\\n', Name.Namespace), ('^1\\.\\.\\d+', Keyword.Declaration, 'plan'), ('^(not ok)([^\\S\\n]*)(\\d*)', bygroups(Generic.Error, Text, Number.Integer), 'test'), ('^(ok)([^\\S\\n]*)(\\d*)', bygroups(Keyword.Reserved, Text, Number.Integer), 'test'), ('^#.*\\n', Comment), ('^Bail out!.*\\n', Generic.Error), ('^.*\\n', Text)], 'plan': [('[^\\S\\n]+', Text), ('#', Comment, 'directive'), ('\\n', Comment, '#pop'), ('.*\\n', Generic.Error, '#pop')], 'test': [('[^\\S\\n]+', Text), ('#', Comment, 'directive'), ('\\S+', Text), ('\\n', Text, '#pop')], 'directive': [('[^\\S\\n]+', Comment), ('(?i)\\bTODO\\b', Comment.Preproc), ('(?i)\\bSKIP\\S*', Comment.Preproc), ('\\S+', Comment), ('\\n', Comment, '#pop:2')]}
  }

  class AwkLexer {
      + name = 'Awk'
      + aliases = ['awk', 'gawk', 'mawk', 'nawk']
      + filenames = ['*.awk']
      + mimetypes = ['application/x-awk']
      + url = 'https://en.wikipedia.org/wiki/AWK'
      + version_added = '1.5'
      + tokens = {'commentsandwhitespace': [('\\s+', Text), ('#.*$', Comment.Single)], 'slashstartsregex': [include('commentsandwhitespace'), ('/(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/\\B', String.Regex, '#pop'), ('(?=/)', Text, ('#pop', 'badregex')), default('#pop')], 'badregex': [('\\n', Text, '#pop')], 'root': [('^(?=\\s|/)', Text, 'slashstartsregex'), include('commentsandwhitespace'), ('\\+\\+|--|\\|\\||&&|in\\b|\\$|!?~|\\?|:|(\\*\\*|[-<>+*%\\^/!=|])=?', Operator, 'slashstartsregex'), ('[{(\\[;,]', Punctuation, 'slashstartsregex'), ('[})\\].]', Punctuation), ('(break|continue|do|while|exit|for|if|else|return)\\b', Keyword, 'slashstartsregex'), ('function\\b', Keyword.Declaration, 'slashstartsregex'), ('(atan2|cos|exp|int|log|rand|sin|sqrt|srand|gensub|gsub|index|length|match|split|sprintf|sub|substr|tolower|toupper|close|fflush|getline|next|nextfile|print|printf|strftime|systime|delete|system)\\b', Keyword.Reserved), ('(ARGC|ARGIND|ARGV|BEGIN|CONVFMT|ENVIRON|END|ERRNO|FIELDWIDTHS|FILENAME|FNR|FS|IGNORECASE|NF|NR|OFMT|OFS|ORFS|RLENGTH|RS|RSTART|RT|SUBSEP)\\b', Name.Builtin), ('[$a-zA-Z_]\\w*', Name.Other), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single)]}
  }

  class SedLexer {
      + name = 'Sed'
      + aliases = ['sed', 'gsed', 'ssed']
      + filenames = ['*.sed', '*.[gs]sed']
      + mimetypes = ['text/x-sed']
      + url = 'https://en.wikipedia.org/wiki/Sed'
      + version_added = ''
      + flags = re.MULTILINE
      + tokens = {'root': [('\\s+', Whitespace), ('#.*$', Comment.Single), ('[0-9]+', Number.Integer), ('\\$', Operator), ('[{};,!]', Punctuation), ('[dDFgGhHlnNpPqQxz=]', Keyword), ('([berRtTvwW:])([^;\\n]*)', bygroups(Keyword, String.Single)), ('([aci])((?:.*?\\\\\\n)*(?:.*?[^\\\\]$))', bygroups(Keyword, String.Double)), ('([qQ])([0-9]*)', bygroups(Keyword, Number.Integer)), ('(/)' + _inside_delims + '(/)', bygroups(Punctuation, String.Regex, Punctuation)), ('(\\\\(.))' + _inside_delims + '(\\2)', bygroups(Punctuation, None, String.Regex, Punctuation)), ('(y)(.)' + _inside_delims + '(\\2)' + _inside_delims + '(\\2)', bygroups(Keyword, Punctuation, String.Single, Punctuation, String.Single, Punctuation)), ('(s)(.)' + _inside_delims + '(\\2)' + _inside_delims + '(\\2)((?:[gpeIiMm]|[0-9])*)', bygroups(Keyword, Punctuation, String.Regex, Punctuation, String.Single, Punctuation, Keyword))]}
  }

  class VimLexer {
      + name = 'VimL'
      + aliases = ['vim']
      + filenames = ['*.vim', '.vimrc', '.exrc', '.gvimrc', '_vimrc', '_exrc', '_gvimrc', 'vimrc', 'gvimrc']
      + mimetypes = ['text/x-vim']
      + url = 'https://www.vim.org'
      + version_added = '0.8'
      + flags = re.MULTILINE
      + tokens = {'root': [('^([ \\t:]*)(' + _python + ')([ \\t]*)(<<)([ \\t]*)(.*)((?:\\n|.)*)(\\6)', bygroups(using(this), Keyword, Text, Operator, Text, Text, using(PythonLexer), Text)), ('^([ \\t:]*)(' + _python + ')([ \\t])(.*)', bygroups(using(this), Keyword, Text, using(PythonLexer))), ('^\\s*".*', Comment), ('[ \\t]+', Text), ('/[^/\\\\\\n]*(?:\\\\[\\s\\S][^/\\\\\\n]*)*/', String.Regex), ('"[^"\\\\\\n]*(?:\\\\[\\s\\S][^"\\\\\\n]*)*"', String.Double), ("'[^\\n']*(?:''[^\\n']*)*'", String.Single), ('(?<=\\s)"[^\\-:.%#=*].*', Comment), ('-?\\d+', Number), ('#[0-9a-f]{6}', Number.Hex), ('^:', Punctuation), ('[()<>+=!|,~-]', Punctuation), ('\\b(let|if|else|endif|elseif|fun|function|endfunction)\\b', Keyword), ('\\b(NONE|bold|italic|underline|dark|light)\\b', Name.Builtin), ('\\b\\w+\\b', Name.Other), ('.', Text)]}
  --
      - __init__()
      + is_in(w, mapping)
      + get_tokens_unprocessed(text)
  }

  class IrcLogsLexer {
      + name = 'IRC logs'
      + aliases = ['irc']
      + filenames = ['*.weechatlog']
      + mimetypes = ['text/x-irclog']
      + url = 'https://en.wikipedia.org/wiki/Internet_Relay_Chat'
      + version_added = ''
      + flags = re.VERBOSE | re.MULTILINE
      + timestamp = '\n        (\n          # irssi / xchat and others\n          (?: \\[|\\()?                  # Opening bracket or paren for the timestamp\n            (?:                        # Timestamp\n                (?: (?:\\d{1,4} [-/])*  # Date as - or /-separated groups of digits\n                    (?:\\d{1,4})\n                 [T ])?                # Date/time separator: T or space\n                (?: \\d?\\d [:.])*       # Time as :/.-separated groups of 1 or 2 digits\n                    (?: \\d?\\d)\n            )\n          (?: \\]|\\))?\\s+               # Closing bracket or paren for the timestamp\n        |\n          # weechat\n          \\d{4}\\s\\w{3}\\s\\d{2}\\s        # Date\n          \\d{2}:\\d{2}:\\d{2}\\s+         # Time + Whitespace\n        |\n          # xchat\n          \\w{3}\\s\\d{2}\\s               # Date\n          \\d{2}:\\d{2}:\\d{2}\\s+         # Time + Whitespace\n        )?\n    '
      + tokens = {'root': [('^\\*\\*\\*\\*(.*)\\*\\*\\*\\*$', Comment), ('^' + timestamp + '(\\s*<[^>]*>\\s*)$', bygroups(Comment.Preproc, Name.Tag)), ('^' + timestamp + '\n                (\\s*<.*?>\\s*)          # Nick ', bygroups(Comment.Preproc, Name.Tag), 'msg'), ('^' + timestamp + '\n                (\\s*[*]\\s+)            # Star\n                (\\S+\\s+.*?\\n)          # Nick + rest of message ', bygroups(Comment.Preproc, Keyword, Generic.Inserted)), ('^' + timestamp + '\n                (\\s*(?:\\*{3}|<?-[!@=P]?->?)\\s*)  # Star(s) or symbols\n                (\\S+\\s+)                     # Nick + Space\n                (.*?\\n)                         # Rest of message ', bygroups(Comment.Preproc, Keyword, String, Comment)), ('^.*?\\n', Text)], 'msg': [('\\S+:(?!//)', Name.Attribute), ('.*\\n', Text, '#pop')]}
  }

  class GettextLexer {
      + name = 'Gettext Catalog'
      + aliases = ['pot', 'po']
      + filenames = ['*.pot', '*.po']
      + mimetypes = ['application/x-gettext', 'text/x-gettext', 'text/gettext']
      + url = 'https://www.gnu.org/software/gettext'
      + version_added = '0.9'
      + tokens = {'root': [('^#,\\s.*?$', Keyword.Type), ('^#:\\s.*?$', Keyword.Declaration), ('^(#|#\\.\\s|#\\|\\s|#~\\s|#\\s).*$', Comment.Single), ('^(")([A-Za-z-]+:)(.*")$', bygroups(String, Name.Property, String)), ('^".*"$', String), ('^(msgid|msgid_plural|msgstr|msgctxt)(\\s+)(".*")$', bygroups(Name.Variable, Text, String)), ('^(msgstr\\[)(\\d)(\\])(\\s+)(".*")$', bygroups(Name.Variable, Number.Integer, Name.Variable, Text, String))]}
  }

  class HttpLexer {
      + name = 'HTTP'
      + aliases = ['http']
      + url = 'https://httpwg.org/specs'
      + version_added = '1.5'
      + flags = re.DOTALL
      + tokens = {'root': [('([a-zA-Z][-_a-zA-Z]+)( +)([^ ]+)( +)(HTTP)(/)(1\\.[01]|2(?:\\.0)?|3)(\\r?\\n|\\Z)', bygroups(Name.Function, Text, Name.Namespace, Text, Keyword.Reserved, Operator, Number, Text), 'headers'), ('(HTTP)(/)(1\\.[01]|2(?:\\.0)?|3)( +)(\\d{3})(?:( +)([^\\r\\n]*))?(\\r?\\n|\\Z)', bygroups(Keyword.Reserved, Operator, Number, Text, Number, Text, Name.Exception, Text), 'headers')], 'headers': [('([^\\s:]+)( *)(:)( *)([^\\r\\n]*)(\\r?\\n|\\Z)', header_callback), ('([\\t ]+)([^\\r\\n]+)(\\r?\\n|\\Z)', continuous_header_callback), ('\\r?\\n', Text, 'content')], 'content': [('.+', content_callback)]}
  --
      + get_tokens_unprocessed(text, stack = ('root',))
      + header_callback(match)
      + continuous_header_callback(match)
      + content_callback(match)
      + analyse_text(text)
  }

  class TodotxtLexer {
      + name = 'Todotxt'
      + url = 'http://todotxt.com/'
      + aliases = ['todotxt']
      + version_added = '2.0'
      + filenames = ['todo.txt', '*.todotxt']
      + mimetypes = ['text/x-todo']
      + CompleteTaskText = Operator
      + IncompleteTaskText = Text
      + Priority = Generic.Heading
      + Date = Generic.Subheading
      + Project = Generic.Error
      + Context = String
      + date_regex = '\\d{4,}-\\d{2}-\\d{2}'
      + priority_regex = '\\([A-Z]\\)'
      + project_regex = '\\+\\S+'
      + context_regex = '@\\S+'
      + complete_one_date_regex = '(x )(' + date_regex + ')'
      + complete_two_date_regex = complete_one_date_regex + '( )(' + date_regex + ')'
      + priority_date_regex = '(' + priority_regex + ')( )(' + date_regex + ')'
      + tokens = {'root': [(complete_two_date_regex, bygroups(CompleteTaskText, Date, CompleteTaskText, Date), 'complete'), (complete_one_date_regex, bygroups(CompleteTaskText, Date), 'complete'), (priority_date_regex, bygroups(Priority, IncompleteTaskText, Date), 'incomplete'), (priority_regex, Priority, 'incomplete'), (date_regex, Date, 'incomplete'), (context_regex, Context, 'incomplete'), (project_regex, Project, 'incomplete'), ('\\S+', IncompleteTaskText, 'incomplete')], 'complete': [('\\s*\\n', CompleteTaskText, '#pop'), (context_regex, Context), (project_regex, Project), ('\\S+', CompleteTaskText), ('\\s+', CompleteTaskText)], 'incomplete': [('\\s*\\n', IncompleteTaskText, '#pop'), (context_regex, Context), (project_regex, Project), ('\\S+', IncompleteTaskText), ('\\s+', IncompleteTaskText)]}
  }

  class NotmuchLexer {
      + name = 'Notmuch'
      + url = 'https://notmuchmail.org/'
      + aliases = ['notmuch']
      + version_added = '2.5'
      + tokens = {'root': [('\\fmessage\\{\\s*', Keyword, ('message', 'message-attr'))], 'message-attr': [('(\\s*id:\\s*)(\\S+)', bygroups(Name.Attribute, String)), ('(\\s*(?:depth|match|excluded):\\s*)(\\d+)', bygroups(Name.Attribute, Number.Integer)), ('(\\s*filename:\\s*)(.+\\n)', bygroups(Name.Attribute, String)), default('#pop')], 'message': [('\\fmessage\\}\\n', Keyword, '#pop'), ('\\fheader\\{\\n', Keyword, 'header'), ('\\fbody\\{\\n', Keyword, 'body')], 'header': [('\\fheader\\}\\n', Keyword, '#pop'), ('((?:Subject|From|To|Cc|Date):\\s*)(.*\\n)', bygroups(Name.Attribute, String)), ('(.*)(\\s*\\(.*\\))(\\s*\\(.*\\)\\n)', bygroups(Generic.Strong, Literal, Name.Tag))], 'body': [('\\fpart\\{\\n', Keyword, 'part'), ('\\f(part|attachment)\\{\\s*', Keyword, ('part', 'part-attr')), ('\\fbody\\}\\n', Keyword, '#pop')], 'part-attr': [('(ID:\\s*)(\\d+)', bygroups(Name.Attribute, Number.Integer)), ('(,\\s*)((?:Filename|Content-id):\\s*)([^,]+)', bygroups(Punctuation, Name.Attribute, String)), ('(,\\s*)(Content-type:\\s*)(.+\\n)', bygroups(Punctuation, Name.Attribute, String)), default('#pop')], 'part': [('\\f(?:part|attachment)\\}\\n', Keyword, '#pop'), ('\\f(?:part|attachment)\\{\\s*', Keyword, ('#push', 'part-attr')), ('^Non-text part: .*\\n', Comment), ('(?s)(.*?(?=\\f(?:part|attachment)\\}\\n))', _highlight_code)]}
  --
      + analyse_text(text)
      - __init__()
  }

  class KernelLogLexer {
      + name = 'Kernel log'
      + aliases = ['kmsg', 'dmesg']
      + filenames = ['*.kmsg', '*.dmesg']
      + url = 'https://fr.wikipedia.org/wiki/Dmesg'
      + version_added = '2.6'
      + tokens = {'root': [('^[^:]+:debug : (?=\\[)', Text, 'debug'), ('^[^:]+:info  : (?=\\[)', Text, 'info'), ('^[^:]+:warn  : (?=\\[)', Text, 'warn'), ('^[^:]+:notice: (?=\\[)', Text, 'warn'), ('^[^:]+:err   : (?=\\[)', Text, 'error'), ('^[^:]+:crit  : (?=\\[)', Text, 'error'), ('^(?=\\[)', Text, 'unknown')], 'unknown': [('^(?=.+(warning|notice|audit|deprecated))', Text, 'warn'), ('^(?=.+(error|critical|fail|Bug))', Text, 'error'), default('info')], 'base': [('\\[[0-9. ]+\\] ', Number), ('(?<=\\] ).+?:', Keyword), ('\\n', Text, '#pop')], 'debug': [include('base'), ('.+\\n', Comment, '#pop')], 'info': [include('base'), ('.+\\n', Text, '#pop')], 'warn': [include('base'), ('.+\\n', Generic.Strong, '#pop')], 'error': [include('base'), ('.+\\n', Generic.Error, '#pop')]}
  }

  class CoqLexer {
      + name = 'Coq'
      + url = 'http://coq.inria.fr/'
      + aliases = ['coq']
      + filenames = ['*.v']
      + mimetypes = ['text/x-coq']
      + version_added = '1.5'
      + flags = 0
      + keywords1 = ('Section', 'Module', 'End', 'Require', 'Import', 'Export', 'Include', 'Variable', 'Variables', 'Parameter', 'Parameters', 'Axiom', 'Axioms', 'Hypothesis', 'Hypotheses', 'Notation', 'Local', 'Tactic', 'Reserved', 'Scope', 'Open', 'Close', 'Bind', 'Declare', 'Delimit', 'Definition', 'Example', 'Let', 'Ltac', 'Ltac2', 'Fixpoint', 'CoFixpoint', 'Morphism', 'Relation', 'Implicit', 'Arguments', 'Types', 'Contextual', 'Strict', 'Prenex', 'Implicits', 'Inductive', 'CoInductive', 'Record', 'Structure', 'Variant', 'Canonical', 'Coercion', 'Theorem', 'Lemma', 'Fact', 'Remark', 'Corollary', 'Proposition', 'Property', 'Goal', 'Proof', 'Restart', 'Save', 'Qed', 'Defined', 'Abort', 'Admitted', 'Hint', 'Resolve', 'Rewrite', 'View', 'Search', 'Compute', 'Eval', 'Show', 'Print', 'Printing', 'All', 'Graph', 'Projections', 'inside', 'outside', 'Check', 'Global', 'Instance', 'Class', 'Existing', 'Universe', 'Polymorphic', 'Monomorphic', 'Context', 'Scheme', 'From', 'Undo', 'Fail', 'Function', 'Program', 'Elpi', 'Extract', 'Opaque', 'Transparent', 'Unshelve', 'Next Obligation')
      + keywords2 = ('forall', 'exists', 'exists2', 'fun', 'fix', 'cofix', 'struct', 'match', 'end', 'in', 'return', 'let', 'if', 'is', 'then', 'else', 'for', 'of', 'nosimpl', 'with', 'as')
      + keywords3 = ('Type', 'Prop', 'SProp', 'Set')
      + keywords4 = ('pose', 'set', 'move', 'case', 'elim', 'apply', 'clear', 'hnf', 'intro', 'intros', 'generalize', 'rename', 'pattern', 'after', 'destruct', 'induction', 'using', 'refine', 'inversion', 'injection', 'rewrite', 'congr', 'unlock', 'compute', 'ring', 'field', 'replace', 'fold', 'unfold', 'change', 'cutrewrite', 'simpl', 'have', 'suff', 'wlog', 'suffices', 'without', 'loss', 'nat_norm', 'assert', 'cut', 'trivial', 'revert', 'bool_congr', 'nat_congr', 'symmetry', 'transitivity', 'auto', 'split', 'left', 'right', 'autorewrite', 'tauto', 'setoid_rewrite', 'intuition', 'eauto', 'eapply', 'econstructor', 'etransitivity', 'constructor', 'erewrite', 'red', 'cbv', 'lazy', 'vm_compute', 'native_compute', 'subst')
      + keywords5 = ('by', 'now', 'done', 'exact', 'reflexivity', 'tauto', 'romega', 'omega', 'lia', 'nia', 'lra', 'nra', 'psatz', 'assumption', 'solve', 'contradiction', 'discriminate', 'congruence', 'admit')
      + keywords6 = ('do', 'last', 'first', 'try', 'idtac', 'repeat')
      + keyopts = ('!=', '#', '&', '&&', '\\(', '\\)', '\\*', '\\+', ',', '-', '-\\.', '->', '\\.', '\\.\\.', ':', '::', ':=', ':>', ';', ';;', '<', '<-', '<->', '=', '>', '>]', '>\\}', '\\?', '\\?\\?', '\\[', '\\[<', '\\[>', '\\[\\|', ']', '_', '`', '\\{', '\\{<', 'lp:\\{\\{', '\\|', '\\|]', '\\}', '~', '=>', '/\\\\', '\\\\/', '\\{\\|', '\\|\\}', 'λ', '¬', '∧', '∨', '∀', '∃', '→', '↔', '≠', '≤', '≥')
      + operators = '[!$%&*+\\./:<=>?@^|~-]'
      + prefix_syms = '[!?~]'
      + infix_syms = '[=<>@^|&+\\*/$%-]'
      + tokens = {'root': [('\\s+', Text), ('false|true|\\(\\)|\\[\\]', Name.Builtin.Pseudo), ('\\(\\*', Comment, 'comment'), ("\\b(?:[^\\W\\d][\\w\\']*\\.)+[^\\W\\d][\\w\\']*\\b", Name), ('\\bEquations\\b\\??', Keyword.Namespace), ('\\b(Elpi)(\\s+)(Program|Query|Accumulate|Command|Typecheck|Db|Export|Tactic)?\\b', bygroups(Keyword.Namespace, Text, Keyword.Namespace)), ('\\bUnset\\b|\\bSet(?=[ \\t]+[A-Z][a-z][^\\n]*?\\.)', Keyword.Namespace, 'set-options'), ('\\b(?:String|Number)\\s+Notation', Keyword.Namespace, 'sn-notation'), (words(keywords1, prefix='\\b', suffix='\\b'), Keyword.Namespace), (words(keywords2, prefix='\\b', suffix='\\b'), Keyword), (words(keywords3, prefix='\\b', suffix='\\b'), Keyword.Type), (words(keywords4, prefix='\\b', suffix='\\b'), Keyword), (words(keywords5, prefix='\\b', suffix='\\b'), Keyword.Pseudo), (words(keywords6, prefix='\\b', suffix='\\b'), Keyword.Reserved), ("\\b([A-Z][\\w\\']*)", Name), ('({})'.format('|'.join(keyopts[::-1])), Operator), (f'({infix_syms}|{prefix_syms})?{operators}', Operator), ("[^\\W\\d][\\w']*", Name), ('\\d[\\d_]*', Number.Integer), ('0[xX][\\da-fA-F][\\da-fA-F_]*', Number.Hex), ('0[oO][0-7][0-7_]*', Number.Oct), ('0[bB][01][01_]*', Number.Bin), ('-?\\d[\\d_]*(.[\\d_]*)?([eE][+\\-]?\\d[\\d_]*)', Number.Float), ('\'(?:(\\\\[\\\\\\"\'ntbr ])|(\\\\[0-9]{3})|(\\\\x[0-9a-fA-F]{2}))\'', String.Char), ("'.'", String.Char), ("'", Keyword), ('"', String.Double, 'string'), ("[~?][a-z][\\w\\']*:", Name), ('\\S', Name.Builtin.Pseudo)], 'set-options': [('\\s+', Text), ('[A-Z]\\w*', Keyword.Namespace), ('"', String.Double, 'string'), ('\\d+', Number.Integer), ('\\.', Punctuation, '#pop')], 'sn-notation': [('\\s+', Text), ('\\b(?:via|mapping|abstract|warning|after)\\b', Keyword), ('=>|[()\\[\\]:,]', Operator), ("\\b[^\\W\\d][\\w\\']*(?:\\.[^\\W\\d][\\w\\']*)*\\b", Name), ('\\d[\\d_]*', Number.Integer), ('0[xX][\\da-fA-F][\\da-fA-F_]*', Number.Hex), ('\\(\\*', Comment, 'comment'), ('\\.', Punctuation, '#pop')], 'comment': [('([^(*)]+|\\*+(?!\\)))+', Comment), ('\\(\\*', Comment, '#push'), ('\\*\\)', Comment, '#pop'), ('[(*)]', Comment)], 'string': [('[^"]+', String.Double), ('""', String.Double), ('"', String.Double, '#pop')], 'dotted': [('\\s+', Text), ('\\.', Punctuation), ("[A-Z][\\w\\']*(?=\\s*\\.)", Name.Namespace), ("[A-Z][\\w\\']*", Name.Class, '#pop'), ("[a-z][a-z0-9_\\']*", Name, '#pop'), default('#pop')]}
  --
      + analyse_text(text)
  }

  class IsabelleLexer {
      + name = 'Isabelle'
      + url = 'https://isabelle.in.tum.de/'
      + aliases = ['isabelle']
      + filenames = ['*.thy']
      + mimetypes = ['text/x-isabelle']
      + version_added = '2.0'
      + keyword_minor = ('and', 'assumes', 'attach', 'avoids', 'binder', 'checking', 'class_instance', 'class_relation', 'code_module', 'congs', 'constant', 'constrains', 'datatypes', 'defines', 'file', 'fixes', 'for', 'functions', 'hints', 'identifier', 'if', 'imports', 'in', 'includes', 'infix', 'infixl', 'infixr', 'is', 'keywords', 'lazy', 'module_name', 'monos', 'morphisms', 'no_discs_sels', 'notes', 'obtains', 'open', 'output', 'overloaded', 'parametric', 'permissive', 'pervasive', 'rep_compat', 'shows', 'structure', 'type_class', 'type_constructor', 'unchecked', 'unsafe', 'where')
      + keyword_diag = ('ML_command', 'ML_val', 'class_deps', 'code_deps', 'code_thms', 'display_drafts', 'find_consts', 'find_theorems', 'find_unused_assms', 'full_prf', 'help', 'locale_deps', 'nitpick', 'pr', 'prf', 'print_abbrevs', 'print_antiquotations', 'print_attributes', 'print_binds', 'print_bnfs', 'print_bundles', 'print_case_translations', 'print_cases', 'print_claset', 'print_classes', 'print_codeproc', 'print_codesetup', 'print_coercions', 'print_commands', 'print_context', 'print_defn_rules', 'print_dependencies', 'print_facts', 'print_induct_rules', 'print_inductives', 'print_interps', 'print_locale', 'print_locales', 'print_methods', 'print_options', 'print_orders', 'print_quot_maps', 'print_quotconsts', 'print_quotients', 'print_quotientsQ3', 'print_quotmapsQ3', 'print_rules', 'print_simpset', 'print_state', 'print_statement', 'print_syntax', 'print_theorems', 'print_theory', 'print_trans_rules', 'prop', 'pwd', 'quickcheck', 'refute', 'sledgehammer', 'smt_status', 'solve_direct', 'spark_status', 'term', 'thm', 'thm_deps', 'thy_deps', 'try', 'try0', 'typ', 'unused_thms', 'value', 'values', 'welcome', 'print_ML_antiquotations', 'print_term_bindings', 'values_prolog')
      + keyword_thy = ('theory', 'begin', 'end')
      + keyword_section = ('header', 'chapter')
      + keyword_subsection = ('section', 'subsection', 'subsubsection', 'sect', 'subsect', 'subsubsect')
      + keyword_theory_decl = ('ML', 'ML_file', 'abbreviation', 'adhoc_overloading', 'arities', 'atom_decl', 'attribute_setup', 'axiomatization', 'bundle', 'case_of_simps', 'class', 'classes', 'classrel', 'codatatype', 'code_abort', 'code_class', 'code_const', 'code_datatype', 'code_identifier', 'code_include', 'code_instance', 'code_modulename', 'code_monad', 'code_printing', 'code_reflect', 'code_reserved', 'code_type', 'coinductive', 'coinductive_set', 'consts', 'context', 'datatype', 'datatype_new', 'datatype_new_compat', 'declaration', 'declare', 'default_sort', 'defer_recdef', 'definition', 'defs', 'domain', 'domain_isomorphism', 'domaindef', 'equivariance', 'export_code', 'extract', 'extract_type', 'fixrec', 'fun', 'fun_cases', 'hide_class', 'hide_const', 'hide_fact', 'hide_type', 'import_const_map', 'import_file', 'import_tptp', 'import_type_map', 'inductive', 'inductive_set', 'instantiation', 'judgment', 'lemmas', 'lifting_forget', 'lifting_update', 'local_setup', 'locale', 'method_setup', 'nitpick_params', 'no_adhoc_overloading', 'no_notation', 'no_syntax', 'no_translations', 'no_type_notation', 'nominal_datatype', 'nonterminal', 'notation', 'notepad', 'oracle', 'overloading', 'parse_ast_translation', 'parse_translation', 'partial_function', 'primcorec', 'primrec', 'primrec_new', 'print_ast_translation', 'print_translation', 'quickcheck_generator', 'quickcheck_params', 'realizability', 'realizers', 'recdef', 'record', 'refute_params', 'setup', 'setup_lifting', 'simproc_setup', 'simps_of_case', 'sledgehammer_params', 'spark_end', 'spark_open', 'spark_open_siv', 'spark_open_vcg', 'spark_proof_functions', 'spark_types', 'statespace', 'syntax', 'syntax_declaration', 'text', 'text_raw', 'theorems', 'translations', 'type_notation', 'type_synonym', 'typed_print_translation', 'typedecl', 'hoarestate', 'install_C_file', 'install_C_types', 'wpc_setup', 'c_defs', 'c_types', 'memsafe', 'SML_export', 'SML_file', 'SML_import', 'approximate', 'bnf_axiomatization', 'cartouche', 'datatype_compat', 'free_constructors', 'functor', 'nominal_function', 'nominal_termination', 'permanent_interpretation', 'binds', 'defining', 'smt2_status', 'term_cartouche', 'boogie_file', 'text_cartouche')
      + keyword_theory_script = ('inductive_cases', 'inductive_simps')
      + keyword_theory_goal = ('ax_specification', 'bnf', 'code_pred', 'corollary', 'cpodef', 'crunch', 'crunch_ignore', 'enriched_type', 'function', 'instance', 'interpretation', 'lemma', 'lift_definition', 'nominal_inductive', 'nominal_inductive2', 'nominal_primrec', 'pcpodef', 'primcorecursive', 'quotient_definition', 'quotient_type', 'recdef_tc', 'rep_datatype', 'schematic_corollary', 'schematic_lemma', 'schematic_theorem', 'spark_vc', 'specification', 'subclass', 'sublocale', 'termination', 'theorem', 'typedef', 'wrap_free_constructors')
      + keyword_qed = ('by', 'done', 'qed')
      + keyword_abandon_proof = ('sorry', 'oops')
      + keyword_proof_goal = ('have', 'hence', 'interpret')
      + keyword_proof_block = ('next', 'proof')
      + keyword_proof_chain = ('finally', 'from', 'then', 'ultimately', 'with')
      + keyword_proof_decl = ('ML_prf', 'also', 'include', 'including', 'let', 'moreover', 'note', 'txt', 'txt_raw', 'unfolding', 'using', 'write')
      + keyword_proof_asm = ('assume', 'case', 'def', 'fix', 'presume')
      + keyword_proof_asm_goal = ('guess', 'obtain', 'show', 'thus')
      + keyword_proof_script = ('apply', 'apply_end', 'apply_trace', 'back', 'defer', 'prefer')
      + operators = ('::', ':', '(', ')', '[', ']', '_', '=', ',', '|', '+', '-', '!', '?')
      + proof_operators = ('{', '}', '.', '..')
      + tokens = {'root': [('\\s+', Whitespace), ('\\(\\*', Comment, 'comment'), ('\\\\<open>', String.Symbol, 'cartouche'), ('\\{\\*|‹', String, 'cartouche'), (words(operators), Operator), (words(proof_operators), Operator.Word), (words(keyword_minor, prefix='\\b', suffix='\\b'), Keyword.Pseudo), (words(keyword_diag, prefix='\\b', suffix='\\b'), Keyword.Type), (words(keyword_thy, prefix='\\b', suffix='\\b'), Keyword), (words(keyword_theory_decl, prefix='\\b', suffix='\\b'), Keyword), (words(keyword_section, prefix='\\b', suffix='\\b'), Generic.Heading), (words(keyword_subsection, prefix='\\b', suffix='\\b'), Generic.Subheading), (words(keyword_theory_goal, prefix='\\b', suffix='\\b'), Keyword.Namespace), (words(keyword_theory_script, prefix='\\b', suffix='\\b'), Keyword.Namespace), (words(keyword_abandon_proof, prefix='\\b', suffix='\\b'), Generic.Error), (words(keyword_qed, prefix='\\b', suffix='\\b'), Keyword), (words(keyword_proof_goal, prefix='\\b', suffix='\\b'), Keyword), (words(keyword_proof_block, prefix='\\b', suffix='\\b'), Keyword), (words(keyword_proof_decl, prefix='\\b', suffix='\\b'), Keyword), (words(keyword_proof_chain, prefix='\\b', suffix='\\b'), Keyword), (words(keyword_proof_asm, prefix='\\b', suffix='\\b'), Keyword), (words(keyword_proof_asm_goal, prefix='\\b', suffix='\\b'), Keyword), (words(keyword_proof_script, prefix='\\b', suffix='\\b'), Keyword.Pseudo), ('\\\\<(\\w|\\^)*>', Text.Symbol), ("'[^\\W\\d][.\\w']*", Name.Type), ('0[xX][\\da-fA-F][\\da-fA-F_]*', Number.Hex), ('0[oO][0-7][0-7_]*', Number.Oct), ('0[bB][01][01_]*', Number.Bin), ('"', String, 'string'), ('`', String.Other, 'fact'), ('[^\\s:|\\[\\]\\-()=,+!?{}._][^\\s:|\\[\\]\\-()=,+!?{}]*', Name)], 'comment': [('[^(*)]+', Comment), ('\\(\\*', Comment, '#push'), ('\\*\\)', Comment, '#pop'), ('[(*)]', Comment)], 'cartouche': [('[^{*}\\\\‹›]+', String), ('\\\\<open>', String.Symbol, '#push'), ('\\{\\*|‹', String, '#push'), ('\\\\<close>', String.Symbol, '#pop'), ('\\*\\}|›', String, '#pop'), ('\\\\<(\\w|\\^)*>', String.Symbol), ('[{*}\\\\]', String)], 'string': [('[^"\\\\]+', String), ('\\\\<(\\w|\\^)*>', String.Symbol), ('\\\\"', String), ('\\\\', String), ('"', String, '#pop')], 'fact': [('[^`\\\\]+', String.Other), ('\\\\<(\\w|\\^)*>', String.Symbol), ('\\\\`', String.Other), ('\\\\', String.Other), ('`', String.Other, '#pop')]}
  }

  class ThingsDBLexer {
      + name = 'ThingsDB'
      + aliases = ['ti', 'thingsdb']
      + filenames = ['*.ti']
      + url = 'https://www.thingsdb.net'
      + version_added = '2.9'
      + tokens = {'root': [include('expression')], 'expression': [include('comments'), include('whitespace'), ('[-+]?0b[01]+', Number.Bin), ('[-+]?0o[0-8]+', Number.Oct), ('([-+]?0x[0-9a-fA-F]+)', Number.Hex), ('[-+]?[0-9]+', Number.Integer), ('[-+]?((inf|nan)([^0-9A-Za-z_]|$)|[0-9]*\\.[0-9]+(e[+-][0-9]+)?)', Number.Float), ('(?:"(?:[^"]*)")+', String.Double), ("(?:'(?:[^']*)')+", String.Single), ('(?:`(?:[^`]*)`)+', String.Backtick), ('(true|false|nil)\\b', Keyword.Constant), ('(FULL|USER|GRANT|CHANGE|JOIN|RUN|QUERY|DEBUG|INFO|WARNING|ERROR|CRITICAL|NO_IDS|INT_MIN|INT_MAX)\\b', Name.Constant), ('(/[^/\\\\]*(?:\\\\.[^/\\\\]*)*/i?)', String.Regex), include('names'), ('[(){}\\[\\],;]', Punctuation), ('[+\\-*/%&|<>^!~@=:?]', Operator)], 'names': [('(\\.)(first|last|then|else|load|at|again_in|again_at|err|cancel|closure|set_closure|args|set_args|owner|set_owner|equals|copy|dup|assign|week|weekday|yday|zone|len|call|doc|emit|extract|choice|code|format|msg|each|every|extend|extend_unique|filter|find|flat|find_index|has|index_of|count|sum|is_unique|unique|join|map|map_id|map_wrap|map_type|vmap|move|pop|push|fill|remove|replace|restrict|restriction|shift|sort|splice|to|add|one|clear|contains|ends_with|name|lower|replace|reverse|starts_with|split|test|trim|trim_left|trim_right|upper|del|ren|to_type|to_thing|get|id|keys|reduce|set|some|value|values|wrap|unshift|unwrap|search)(\\()', bygroups(Name.Function, Name.Function, Punctuation), 'arguments'), ('(alt_raise|assert|base64_encode|base64_decode|bool|bytes|closure|datetime|deep|future|is_future|del_enum|del_type|room|is_room|task|tasks|is_task|is_email|is_url|is_tel|is_time_zone|timeit|enum|enum_info|enum_map|enums_info|err|regex|is_regex|change_id|float|has_enum|has_type|int|is_array|is_ascii|is_float|is_bool|is_bytes|is_closure|is_datetime|is_enum|is_err|is_mpdata|is_inf|is_int|is_list|is_nan|is_nil|is_raw|is_set|is_str|is_thing|is_timeval|is_tuple|is_utf8|json_dump|json_load|list|log|import|export|root|mod_enum|mod_type|new|new_type|now|raise|rand|range|randint|randstr|refs|rename_enum|set|set_enum|set_type|str|thing|timeval|try|type|type_assert|type_count|type_info|types_info|nse|wse|backup_info|backups_info|backups_ok|counters|del_backup|has_backup|new_backup|node_info|nodes_info|reset_counters|restart_module|set_log_level|shutdown|has_module|del_module|module_info|modules_info|new_module|deploy_module|rename_module|refresh_module|set_module_conf|set_module_scope|collections_info|del_collection|del_expired|del_node|del_token|del_user|grant|has_collection|has_node|has_token|has_user|new_collection|new_node|new_token|new_user|rename_collection|rename_user|restore|revoke|set_password|set_time_zone|set_default_deep|time_zones_info|user_info|users_info|del_procedure|has_procedure|new_procedure|mod_procedure|procedure_doc|procedure_info|procedures_info|rename_procedure|run|assert_err|auth_err|bad_data_err|cancelled_err|rename_type|forbidden_err|lookup_err|max_quota_err|node_err|num_arguments_err|operation_err|overflow_err|syntax_err|collection_info|type_err|value_err|zero_div_err)(\\()', bygroups(Name.Function, Punctuation), 'arguments'), ('(\\.[A-Za-z_][0-9A-Za-z_]*)(\\s*)(=)', bygroups(Name.Attribute, Text, Operator)), ('\\.[A-Za-z_][0-9A-Za-z_]*', Name.Attribute), ('([A-Za-z_][0-9A-Za-z_]*)(\\s*)(=)', bygroups(Name.Variable, Text, Operator)), ('[A-Za-z_][0-9A-Za-z_]*', Name.Variable)], 'whitespace': [('\\n', Whitespace), ('\\s+', Whitespace)], 'comments': [('//(.*?)\\n', Comment.Single), ('/\\*', Comment.Multiline, 'comment')], 'comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'arguments': [include('expression'), (',', Punctuation), ('\\(', Punctuation, '#push'), ('\\)', Punctuation, '#pop')]}
  }

  class TlbLexer {
      + name = 'Tl-b'
      + aliases = ['tlb']
      + filenames = ['*.tlb']
      + url = 'https://docs.ton.org/#/overviews/TL-B'
      + version_added = ''
      + tokens = {'root': [('\\s+', Whitespace), include('comments'), ('[0-9]+', Number), (words(('+', '-', '*', '=', '?', '~', '.', '^', '==', '<', '>', '<=', '>=', '!=')), Operator), (words(('##', '#<', '#<=')), Name.Tag), ('#[0-9a-f]*_?', Name.Tag), ('\\$[01]*_?', Name.Tag), ('[a-zA-Z_][0-9a-zA-Z_]*', Name), ('[;():\\[\\]{}]', Punctuation)], 'comments': [('//.*', Comment.Singleline), ('/\\*', Comment.Multiline, 'comment')], 'comment': [('[^/*]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  }

  class TlsLexer {
      + name = 'TLS Presentation Language'
      + url = 'https://www.rfc-editor.org/rfc/rfc8446#section-3'
      + filenames = []
      + aliases = ['tls']
      + mimetypes = []
      + version_added = '2.16'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('\\s+', Whitespace), ('/[*].*?[*]/', Comment.Multiline), (words(('struct', 'enum', 'select', 'case'), suffix='\\b'), Keyword), (words(('uint8', 'uint16', 'uint24', 'uint32', 'uint64', 'opaque'), suffix='\\b'), Keyword.Type), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ('"(\\\\.|[^"\\\\])*"', String), ('[.]{2}', Operator), ('[+\\-*/&^]', Operator), ('[|<>=!()\\[\\]{}.,;:\\?]', Punctuation), ('[^\\W\\d]\\w*', Name.Other)]}
  }

  class TNTLexer {
      + name = 'Typographic Number Theory'
      + url = 'https://github.com/Kenny2github/language-tnt'
      + aliases = ['tnt']
      + filenames = ['*.tnt']
      + version_added = '2.7'
      + cur = []
      + LOGIC = set('⊃→]&∧^|∨Vv')
      + OPERATORS = set('+.⋅*')
      + VARIABLES = set('abcde')
      + PRIMES = set("'′")
      + NEGATORS = set('~!')
      + QUANTIFIERS = set('AE∀∃')
      + NUMBERS = set('0123456789')
      + WHITESPACE = set('\t \x0b\n')
      + RULES = re.compile('(?xi)\n        joining | separation | double-tilde | fantasy\\ rule\n        | carry[- ]over(?:\\ of)?(?:\\ line)?\\ ([0-9]+) | detachment\n        | contrapositive | De\\ Morgan | switcheroo\n        | specification | generalization | interchange\n        | existence | symmetry | transitivity\n        | add\\ S | drop\\ S | induction\n        | axiom\\ ([1-5]) | premise | push | pop\n    ')
      + LINENOS = re.compile('(?:[0-9]+)(?:(?:, ?|,? and )(?:[0-9]+))*')
      + COMMENT = re.compile('\\[[^\\n\\]]+\\]')
  --
      - __init__()
      + whitespace(start, text, required = False)
      + variable(start, text)
      + term(start, text)
      + formula(start, text)
      + rule(start, text)
      + lineno(start, text)
      + error_till_line_end(start, text)
      + get_tokens_unprocessed(text)
  }

  class RtsLexer {
      + name = 'TrafficScript'
      + aliases = ['trafficscript', 'rts']
      + filenames = ['*.rts']
      + url = 'https://riverbed.com'
      + version_added = '2.1'
      + tokens = {'root': [("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String), ('"', String, 'escapable-string'), ('(0x[0-9a-fA-F]+|\\d+)', Number), ('\\d+\\.\\d+', Number.Float), ('\\$[a-zA-Z](\\w|_)*', Name.Variable), ('(if|else|for(each)?|in|while|do|break|sub|return|import)', Keyword), ('[a-zA-Z][\\w.]*', Name.Function), ('[-+*/%=,;(){}<>^.!~|&\\[\\]\\?\\:]', Operator), ('(>=|<=|==|!=|&&|\\|\\||\\+=|.=|-=|\\*=|/=|%=|<<=|>>=|&=|\\|=|\\^=|>>|<<|\\+\\+|--|=>)', Operator), ('[ \\t\\r]+', Text), ('#[^\\n]*', Comment)], 'escapable-string': [('\\\\[tsn]', String.Escape), ('[^"]', String), ('"', String, '#pop')]}
  }

  class TypoScriptCssDataLexer {
      + name = 'TypoScriptCssData'
      + aliases = ['typoscriptcssdata']
      + url = 'http://docs.typo3.org/typo3cms/TyposcriptReference/'
      + version_added = '2.2'
      + tokens = {'root': [('(.*)(###\\w+###)(.*)', bygroups(String, Name.Constant, String)), ('(\\{)(\\$)((?:[\\w\\-]+\\.)*)([\\w\\-]+)(\\})', bygroups(String.Symbol, Operator, Name.Constant, Name.Constant, String.Symbol)), ('(.*)(\\{)([\\w\\-]+)(\\s*:\\s*)([\\w\\-]+)(\\})(.*)', bygroups(String, String.Symbol, Name.Constant, Operator, Name.Constant, String.Symbol, String)), ('\\s+', Text), ('/\\*(?:(?!\\*/).)*\\*/', Comment), ('(?<!(#|\\\'|"))(?:#(?!(?:[a-fA-F0-9]{6}|[a-fA-F0-9]{3}))[^\\n#]+|//[^\\n]*)', Comment), ('[<>,:=.*%+|]', String), ('[\\w"\\-!/&;(){}]+', String)]}
  }

  class TypoScriptHtmlDataLexer {
      + name = 'TypoScriptHtmlData'
      + aliases = ['typoscripthtmldata']
      + url = 'http://docs.typo3.org/typo3cms/TyposcriptReference/'
      + version_added = '2.2'
      + tokens = {'root': [('(INCLUDE_TYPOSCRIPT)', Name.Class), ('(EXT|FILE|LLL):[^}\\n"]*', String), ('(.*)(###\\w+###)(.*)', bygroups(String, Name.Constant, String)), ('(\\{)(\\$)((?:[\\w\\-]+\\.)*)([\\w\\-]+)(\\})', bygroups(String.Symbol, Operator, Name.Constant, Name.Constant, String.Symbol)), ('(.*)(\\{)([\\w\\-]+)(\\s*:\\s*)([\\w\\-]+)(\\})(.*)', bygroups(String, String.Symbol, Name.Constant, Operator, Name.Constant, String.Symbol, String)), ('\\s+', Text), ('[<>,:=.*%+|]', String), ('[\\w"\\-!/&;(){}#]+', String)]}
  }

  class TypoScriptLexer {
      + name = 'TypoScript'
      + url = 'http://docs.typo3.org/typo3cms/TyposcriptReference/'
      + aliases = ['typoscript']
      + filenames = ['*.typoscript']
      + mimetypes = ['text/x-typoscript']
      + version_added = '2.2'
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'root': [include('comment'), include('constant'), include('html'), include('label'), include('whitespace'), include('keywords'), include('punctuation'), include('operator'), include('structure'), include('literal'), include('other')], 'keywords': [('(?i)(\\[)(browser|compatVersion|dayofmonth|dayofweek|dayofyear|device|ELSE|END|GLOBAL|globalString|globalVar|hostname|hour|IP|language|loginUser|loginuser|minute|month|page|PIDinRootline|PIDupinRootline|system|treeLevel|useragent|userFunc|usergroup|version)([^\\]]*)(\\])', bygroups(String.Symbol, Name.Constant, Text, String.Symbol)), ('(?=[\\w\\-])(HTMLparser|HTMLparser_tags|addParams|cache|encapsLines|filelink|if|imageLinkWrap|imgResource|makelinks|numRows|numberFormat|parseFunc|replacement|round|select|split|stdWrap|strPad|tableStyle|tags|textStyle|typolink)(?![\\w\\-])', Name.Function), ('(?:(=?\\s*<?\\s+|^\\s*))(cObj|field|config|content|constants|FEData|file|frameset|includeLibs|lib|page|plugin|register|resources|sitemap|sitetitle|styles|temp|tt_[^:.\\s]*|types|xmlnews|INCLUDE_TYPOSCRIPT|_CSS_DEFAULT_STYLE|_DEFAULT_PI_VARS|_LOCAL_LANG)(?![\\w\\-])', bygroups(Operator, Name.Builtin)), ('(?=[\\w\\-])(CASE|CLEARGIF|COA|COA_INT|COBJ_ARRAY|COLUMNS|CONTENT|CTABLE|EDITPANEL|FILE|FILES|FLUIDTEMPLATE|FORM|HMENU|HRULER|HTML|IMAGE|IMGTEXT|IMG_RESOURCE|LOAD_REGISTER|MEDIA|MULTIMEDIA|OTABLE|PAGE|QTOBJECT|RECORDS|RESTORE_REGISTER|SEARCHRESULT|SVG|SWFOBJECT|TEMPLATE|TEXT|USER|USER_INT)(?![\\w\\-])', Name.Class), ('(?=[\\w\\-])(ACTIFSUBRO|ACTIFSUB|ACTRO|ACT|CURIFSUBRO|CURIFSUB|CURRO|CUR|IFSUBRO|IFSUB|NO|SPC|USERDEF1RO|USERDEF1|USERDEF2RO|USERDEF2|USRRO|USR)', Name.Class), ('(?=[\\w\\-])(GMENU_FOLDOUT|GMENU_LAYERS|GMENU|IMGMENUITEM|IMGMENU|JSMENUITEM|JSMENU|TMENUITEM|TMENU_LAYERS|TMENU)', Name.Class), ('(?=[\\w\\-])(PHP_SCRIPT(_EXT|_INT)?)', Name.Class), ('(?=[\\w\\-])(userFunc)(?![\\w\\-])', Name.Function)], 'whitespace': [('\\s+', Text)], 'html': [('<\\S[^\\n>]*>', using(TypoScriptHtmlDataLexer)), ('&[^;\\n]*;', String), ('(?s)(_CSS_DEFAULT_STYLE)(\\s*)(\\()(.*(?=\\n\\)))', bygroups(Name.Class, Text, String.Symbol, using(TypoScriptCssDataLexer)))], 'literal': [('0x[0-9A-Fa-f]+t?', Number.Hex), ('[0-9]+', Number.Integer), ('(###\\w+###)', Name.Constant)], 'label': [('(EXT|FILE|LLL):[^}\\n"]*', String), ('(?![^\\w\\-])([\\w\\-]+(?:/[\\w\\-]+)+/?)(\\S*\\n)', bygroups(String, String))], 'punctuation': [('[,.]', Punctuation)], 'operator': [('[<>,:=.*%+|]', Operator)], 'structure': [('[{}()\\[\\]\\\\]', String.Symbol)], 'constant': [('(\\{)(\\$)((?:[\\w\\-]+\\.)*)([\\w\\-]+)(\\})', bygroups(String.Symbol, Operator, Name.Constant, Name.Constant, String.Symbol)), ('(\\{)([\\w\\-]+)(\\s*:\\s*)([\\w\\-]+)(\\})', bygroups(String.Symbol, Name.Constant, Operator, Name.Constant, String.Symbol)), ('(#[a-fA-F0-9]{6}\\b|#[a-fA-F0-9]{3}\\b)', String.Char)], 'comment': [('(?<!(#|\\\'|"))(?:#(?!(?:[a-fA-F0-9]{6}|[a-fA-F0-9]{3}))[^\\n#]+|//[^\\n]*)', Comment), ('/\\*(?:(?!\\*/).)*\\*/', Comment), ('(\\s*#\\s*\\n)', Comment)], 'other': [('[\\w"\\-!/&;]+', Text)]}
  }

  class TypstLexer {
      + name = 'Typst'
      + aliases = ['typst']
      + filenames = ['*.typ']
      + mimetypes = ['text/x-typst']
      + url = 'https://typst.app'
      + version_added = '2.18'
      + MATH_SHORTHANDS = ('[|', '|]', '||', '*', ':=', '::=', '...', "'", '-', '=:', '!=', '>>', '>=', '>>>', '<<', '<=', '<<<', '->', '|->', '=>', '|=>', '==>', '-->', '~~>', '~>', '>->', '->>', '<-', '<==', '<--', '<~~', '<~', '<-<', '<<-', '<->', '<=>', '<==>', '<-->', '>', '<', '~', ':', '|')
      + tokens = {'root': [include('markup')], 'into_code': [(words(('#let', '#set', '#show'), suffix='\\b'), Keyword.Declaration, 'inline_code'), (words(('#import', '#include'), suffix='\\b'), Keyword.Namespace, 'inline_code'), (words(('#if', '#for', '#while', '#export'), suffix='\\b'), Keyword.Reserved, 'inline_code'), ('#\\{', Punctuation, 'code'), ('#\\(', Punctuation, 'code'), ('(#[a-zA-Z_][a-zA-Z0-9_-]*)(\\[)', bygroups(Name.Function, Punctuation), 'markup'), ('(#[a-zA-Z_][a-zA-Z0-9_-]*)(\\()', bygroups(Name.Function, Punctuation), 'code'), (words(('#true', '#false', '#none', '#auto'), suffix='\\b'), Keyword.Constant), ('#[a-zA-Z_][a-zA-Z0-9_]*', Name.Variable), ('#0x[0-9a-fA-F]+', Number.Hex), ('#0b[01]+', Number.Bin), ('#0o[0-7]+', Number.Oct), ('#[0-9]+[\\.e][0-9]+', Number.Float), ('#[0-9]+', Number.Integer)], 'markup': [include('comment'), ('^\\s*=+.*$', Generic.Heading), ('[*][^*]*[*]', Generic.Strong), ('_[^_]*_', Generic.Emph), ('\\$', Punctuation, 'math'), ('`[^`]*`', String.Backtick), ('^(\\s*)(-)(\\s+)', bygroups(Whitespace, Punctuation, Whitespace)), ('^(\\s*)(\\+)(\\s+)', bygroups(Whitespace, Punctuation, Whitespace)), ('^(\\s*)([0-9]+\\.)', bygroups(Whitespace, Punctuation)), ('^(\\s*)(/)(\\s+)([^:]+)(:)', bygroups(Whitespace, Punctuation, Whitespace, Name.Variable, Punctuation)), ('<[a-zA-Z_][a-zA-Z0-9_-]*>', Name.Label), ('@[a-zA-Z_][a-zA-Z0-9_-]*', Name.Label), ('\\\\#', Text), include('into_code'), ('```(?:.|\\n)*?```', String.Backtick), ("https?://[0-9a-zA-Z~/%#&=\\',;.+?]*", Generic.Emph), (words(('---', '\\', '~', '--', '...'), suffix='\\B'), Punctuation), ('\\\\\\[', Punctuation), ('\\\\\\]', Punctuation), ('\\[', Punctuation, '#push'), ('\\]', Punctuation, '#pop'), ('[ \\t]+\\n?|\\n', Whitespace), ('((?![*_$`<@\\\\#\\] ]|https?://).)+', Text)], 'math': [include('comment'), (words(('\\_', '\\^', '\\&')), Text), (words(('_', '^', '&', ';')), Punctuation), (words(('+', '/', '=') + MATH_SHORTHANDS), Operator), ('\\\\', Punctuation), ('\\\\\\$', Punctuation), ('\\$', Punctuation, '#pop'), include('into_code'), ('([a-zA-Z][a-zA-Z0-9-]*)(\\s*)(\\()', bygroups(Name.Function, Whitespace, Punctuation)), ('([a-zA-Z][a-zA-Z0-9-]*)(:)', bygroups(Name.Variable, Punctuation)), ('([a-zA-Z][a-zA-Z0-9-]*)', Name.Variable), ('[0-9]+(\\.[0-9]+)?', Number), ('\\.{1,3}|\\(|\\)|,|\\{|\\}', Punctuation), ('"[^"]*"', String.Double), ('[ \\t\\n]+', Whitespace)], 'comment': [('//.*$', Comment.Single), ('/[*](.|\\n)*?[*]/', Comment.Multiline)], 'code': [include('comment'), ('\\[', Punctuation, 'markup'), ('\\(|\\{', Punctuation, 'code'), ('\\)|\\}', Punctuation, '#pop'), ('"[^"]*"', String.Double), (',|\\.{1,2}', Punctuation), ('=', Operator), (words(('and', 'or', 'not'), suffix='\\b'), Operator.Word), ('=>|<=|==|!=|>|<|-=|\\+=|\\*=|/=|\\+|-|\\\\|\\*', Operator), ('([a-zA-Z_][a-zA-Z0-9_-]*)(:)', bygroups(Name.Variable, Punctuation)), ('([a-zA-Z_][a-zA-Z0-9_-]*)(\\()', bygroups(Name.Function, Punctuation), 'code'), (words(('as', 'break', 'export', 'continue', 'else', 'for', 'if', 'in', 'return', 'while'), suffix='\\b'), Keyword.Reserved), (words(('import', 'include'), suffix='\\b'), Keyword.Namespace), (words(('auto', 'none', 'true', 'false'), suffix='\\b'), Keyword.Constant), ('([0-9.]+)(mm|pt|cm|in|em|fr|%)', bygroups(Number, Keyword.Reserved)), ('0x[0-9a-fA-F]+', Number.Hex), ('0b[01]+', Number.Bin), ('0o[0-7]+', Number.Oct), ('[0-9]+[\\.e][0-9]+', Number.Float), ('[0-9]+', Number.Integer), (words(('let', 'set', 'show'), suffix='\\b'), Keyword.Declaration), ('([a-zA-Z_][a-zA-Z0-9_-]*)', Name.Variable), ('[ \\t\\n]+', Whitespace), (':', Punctuation)], 'inline_code': [(';\\b', Punctuation, '#pop'), ('\\n', Whitespace, '#pop'), include('code')]}
  --
      - __init__()
      + get_tokens_unprocessed(text)
  }

  class UL4Lexer {
      + flags = re.MULTILINE | re.DOTALL
      + name = 'UL4'
      + aliases = ['ul4']
      + filenames = ['*.ul4']
      + url = 'https://python.livinglogic.de/UL4.html'
      + version_added = '2.12'
      + tokens = {'root': [('(<\\?)(\\s*)(ul4)(\\s*)(\\?>)', bygroups(Comment.Preproc, Text.Whitespace, Keyword, Text.Whitespace, Comment.Preproc)), ('(<\\?)(\\s*)(ul4)(\\s*)([a-zA-Z_][a-zA-Z_0-9]*)?', bygroups(Comment.Preproc, Text.Whitespace, Keyword, Text.Whitespace, Name.Function), 'ul4'), ('<\\?\\s*note\\s*\\?>', Comment, 'note'), ('<\\?\\s*note\\s.*?\\?>', Comment), ('<\\?\\s*doc\\s*\\?>', String.Doc, 'doc'), ('<\\?\\s*doc\\s.*?\\?>', String.Doc), ('<\\?\\s*ignore\\s*\\?>', Comment, 'ignore'), ('(<\\?)(\\s*)(def)(\\s*)([a-zA-Z_][a-zA-Z_0-9]*)?', bygroups(Comment.Preproc, Text.Whitespace, Keyword, Text.Whitespace, Name.Function), 'ul4'), ('(<\\?)(\\s*)(printx|print|for|if|elif|else|while|code|renderblocks?|render)\\b', bygroups(Comment.Preproc, Text.Whitespace, Keyword), 'ul4'), ('(<\\?)(\\s*)(end)\\b', bygroups(Comment.Preproc, Text.Whitespace, Keyword), 'end'), ('(<\\?)(\\s*)(whitespace)\\b', bygroups(Comment.Preproc, Text.Whitespace, Keyword), 'whitespace'), ('[^<]+', Other), ('<', Other)], 'ignore': [('<\\?\\s*ignore\\s*\\?>', Comment, '#push'), ('<\\?\\s*end\\s+ignore\\s*\\?>', Comment, '#pop'), ('[^<]+', Comment), ('.', Comment)], 'note': [('<\\?\\s*note\\s*\\?>', Comment, '#push'), ('<\\?\\s*end\\s+note\\s*\\?>', Comment, '#pop'), ('[^<]+', Comment), ('.', Comment)], 'doc': [('<\\?\\s*doc\\s*\\?>', String.Doc, '#push'), ('<\\?\\s*end\\s+doc\\s*\\?>', String.Doc, '#pop'), ('[^<]+', String.Doc), ('.', String.Doc)], 'ul4': [('\\?>', Comment.Preproc, '#pop'), ("'''", String, 'string13'), ('"""', String, 'string23'), ("'", String, 'string1'), ('"', String, 'string2'), ('\\d+\\.\\d*([eE][+-]?\\d+)?', Number.Float), ('\\.\\d+([eE][+-]?\\d+)?', Number.Float), ('\\d+[eE][+-]?\\d+', Number.Float), ('0[bB][01]+', Number.Bin), ('0[oO][0-7]+', Number.Oct), ('0[xX][0-9a-fA-F]+', Number.Hex), ('@\\(\\d\\d\\d\\d-\\d\\d-\\d\\d(T(\\d\\d:\\d\\d(:\\d\\d(\\.\\d{6})?)?)?)?\\)', Literal.Date), ('#[0-9a-fA-F]{8}', Literal.Color), ('#[0-9a-fA-F]{6}', Literal.Color), ('#[0-9a-fA-F]{3,4}', Literal.Color), ('\\d+', Number.Integer), ('//|==|!=|>=|<=|<<|>>|\\+=|-=|\\*=|/=|//=|<<=|>>=|&=|\\|=|^=|=|[\\[\\]{},:*/().~%&|<>^+-]', Operator), (words(('for', 'in', 'if', 'else', 'not', 'is', 'and', 'or'), suffix='\\b'), Keyword), (words(('None', 'False', 'True'), suffix='\\b'), Keyword.Constant), ('[a-zA-Z_][a-zA-Z0-9_]*', Name), ('\\s+', Text.Whitespace)], 'end': [('\\?>', Comment.Preproc, '#pop'), (words(('for', 'if', 'def', 'while', 'renderblock', 'renderblocks'), suffix='\\b'), Keyword), ('\\s+', Text)], 'whitespace': [('\\?>', Comment.Preproc, '#pop'), (words(('keep', 'strip', 'smart'), suffix='\\b'), Comment.Preproc), ('\\s+', Text.Whitespace)], 'stringescapes': [('\\\\[\\\\\'"abtnfr]', String.Escape), ('\\\\x[0-9a-fA-F]{2}', String.Escape), ('\\\\u[0-9a-fA-F]{4}', String.Escape), ('\\\\U[0-9a-fA-F]{8}', String.Escape)], 'string13': [("'''", String, '#pop'), include('stringescapes'), ("[^\\\\']+", String), ('.', String)], 'string23': [('"""', String, '#pop'), include('stringescapes'), ('[^\\\\"]+', String), ('.', String)], 'string1': [("'", String, '#pop'), include('stringescapes'), ("[^\\\\']+", String), ('.', String)], 'string2': [('"', String, '#pop'), include('stringescapes'), ('[^\\\\"]+', String), ('.', String)]}
  }

  class HTMLUL4Lexer {
      + name = 'HTML+UL4'
      + aliases = ['html+ul4']
      + filenames = ['*.htmlul4']
      + url = 'https://python.livinglogic.de/UL4.html'
      + version_added = ''
  --
      - __init__()
  }

  class XMLUL4Lexer {
      + name = 'XML+UL4'
      + aliases = ['xml+ul4']
      + filenames = ['*.xmlul4']
      + url = 'https://python.livinglogic.de/UL4.html'
      + version_added = ''
  --
      - __init__()
  }

  class CSSUL4Lexer {
      + name = 'CSS+UL4'
      + aliases = ['css+ul4']
      + filenames = ['*.cssul4']
      + url = 'https://python.livinglogic.de/UL4.html'
      + version_added = ''
  --
      - __init__()
  }

  class JavascriptUL4Lexer {
      + name = 'Javascript+UL4'
      + aliases = ['js+ul4']
      + filenames = ['*.jsul4']
      + url = 'https://python.livinglogic.de/UL4.html'
      + version_added = ''
  --
      - __init__()
  }

  class PythonUL4Lexer {
      + name = 'Python+UL4'
      + aliases = ['py+ul4']
      + filenames = ['*.pyul4']
      + url = 'https://python.livinglogic.de/UL4.html'
      + version_added = ''
  --
      - __init__()
  }

  class UniconLexer {
      + name = 'Unicon'
      + aliases = ['unicon']
      + filenames = ['*.icn']
      + mimetypes = ['text/unicon']
      + url = 'https://www.unicon.org'
      + version_added = '2.4'
      + flags = re.MULTILINE
      + tokens = {'root': [('[^\\S\\n]+', Text), ('#.*?\\n', Comment.Single), ('[^\\S\\n]+', Text), ('class|method|procedure', Keyword.Declaration, 'subprogram'), ('(record)(\\s+)(\\w+)', bygroups(Keyword.Declaration, Text, Keyword.Type), 'type_def'), ('(#line|\\$C|\\$Cend|\\$define|\\$else|\\$endif|\\$error|\\$ifdef|\\$ifndef|\\$include|\\$line|\\$undef)\\b', Keyword.PreProc), ('(&null|&fail)\\b', Keyword.Constant), ('&allocated|&ascii|&clock|&collections|&column|&col|&control|&cset|&current|&dateline|&date|&digits|&dump|&errno|&errornumber|&errortext|&errorvalue|&error|&errout|&eventcode|&eventvalue|&eventsource|&e|&features|&file|&host|&input|&interval|&lcase|&letters|&level|&line|&ldrag|&lpress|&lrelease|&main|&mdrag|&meta|&mpress|&mrelease|&now|&output|&phi|&pick|&pi|&pos|&progname|&random|&rdrag|&regions|&resize|&row|&rpress|&rrelease|&shift|&source|&storage|&subject|&time|&trace|&ucase|&version|&window|&x|&y', Keyword.Reserved), ('(by|of|not|to)\\b', Keyword.Reserved), ('(global|local|static|abstract)\\b', Keyword.Reserved), ('package|link|import', Keyword.Declaration), (words(('break', 'case', 'create', 'critical', 'default', 'end', 'all', 'do', 'else', 'every', 'fail', 'if', 'import', 'initial', 'initially', 'invocable', 'next', 'repeat', 'return', 'suspend', 'then', 'thread', 'until', 'while'), prefix='\\b', suffix='\\b'), Keyword.Reserved), (words(('Abort', 'abs', 'acos', 'Active', 'Alert', 'any', 'Any', 'Arb', 'Arbno', 'args', 'array', 'asin', 'atan', 'atanh', 'Attrib', 'Bal', 'bal', 'Bg', 'Break', 'Breakx', 'callout', 'center', 'char', 'chdir', 'chmod', 'chown', 'chroot', 'classname', 'Clip', 'Clone', 'close', 'cofail', 'collect', 'Color', 'ColorValue', 'condvar', 'constructor', 'copy', 'CopyArea', 'cos', 'Couple', 'crypt', 'cset', 'ctime', 'dbcolumns', 'dbdriver', 'dbkeys', 'dblimits', 'dbproduct', 'dbtables', 'delay', 'delete', 'detab', 'display', 'DrawArc', 'DrawCircle', 'DrawCube', 'DrawCurve', 'DrawCylinder', 'DrawDisk', 'DrawImage', 'DrawLine', 'DrawPoint', 'DrawPolygon', 'DrawRectangle', 'DrawSegment', 'DrawSphere', 'DrawString', 'DrawTorus', 'dtor', 'entab', 'EraseArea', 'errorclear', 'Event', 'eventmask', 'EvGet', 'EvSend', 'exec', 'exit', 'exp', 'Eye', 'Fail', 'fcntl', 'fdup', 'Fence', 'fetch', 'Fg', 'fieldnames', 'filepair', 'FillArc', 'FillCircle', 'FillPolygon', 'FillRectangle', 'find', 'flock', 'flush', 'Font', 'fork', 'FreeColor', 'FreeSpace', 'function', 'get', 'getch', 'getche', 'getegid', 'getenv', 'geteuid', 'getgid', 'getgr', 'gethost', 'getpgrp', 'getpid', 'getppid', 'getpw', 'getrusage', 'getserv', 'GetSpace', 'gettimeofday', 'getuid', 'globalnames', 'GotoRC', 'GotoXY', 'gtime', 'hardlink', 'iand', 'icom', 'IdentityMatrix', 'image', 'InPort', 'insert', 'Int86', 'integer', 'ioctl', 'ior', 'ishift', 'istate', 'ixor', 'kbhit', 'key', 'keyword', 'kill', 'left', 'Len', 'list', 'load', 'loadfunc', 'localnames', 'lock', 'log', 'Lower', 'lstat', 'many', 'map', 'match', 'MatrixMode', 'max', 'member', 'membernames', 'methodnames', 'methods', 'min', 'mkdir', 'move', 'MultMatrix', 'mutex', 'name', 'NewColor', 'Normals', 'NotAny', 'numeric', 'open', 'opencl', 'oprec', 'ord', 'OutPort', 'PaletteChars', 'PaletteColor', 'PaletteKey', 'paramnames', 'parent', 'Pattern', 'Peek', 'Pending', 'pipe', 'Pixel', 'PlayAudio', 'Poke', 'pop', 'PopMatrix', 'Pos', 'pos', 'proc', 'pull', 'push', 'PushMatrix', 'PushRotate', 'PushScale', 'PushTranslate', 'put', 'QueryPointer', 'Raise', 'read', 'ReadImage', 'readlink', 'reads', 'ready', 'real', 'receive', 'Refresh', 'Rem', 'remove', 'rename', 'repl', 'reverse', 'right', 'rmdir', 'Rotate', 'Rpos', 'Rtab', 'rtod', 'runerr', 'save', 'Scale', 'seek', 'select', 'send', 'seq', 'serial', 'set', 'setenv', 'setgid', 'setgrent', 'sethostent', 'setpgrp', 'setpwent', 'setservent', 'setuid', 'signal', 'sin', 'sort', 'sortf', 'Span', 'spawn', 'sql', 'sqrt', 'stat', 'staticnames', 'stop', 'StopAudio', 'string', 'structure', 'Succeed', 'Swi', 'symlink', 'sys_errstr', 'system', 'syswrite', 'Tab', 'tab', 'table', 'tan', 'Texcoord', 'Texture', 'TextWidth', 'Translate', 'trap', 'trim', 'truncate', 'trylock', 'type', 'umask', 'Uncouple', 'unlock', 'upto', 'utime', 'variable', 'VAttrib', 'wait', 'WAttrib', 'WDefault', 'WFlush', 'where', 'WinAssociate', 'WinButton', 'WinColorDialog', 'WindowContents', 'WinEditRegion', 'WinFontDialog', 'WinMenuBar', 'WinOpenDialog', 'WinPlayMedia', 'WinSaveDialog', 'WinScrollBar', 'WinSelectDialog', 'write', 'WriteImage', 'writes', 'WSection', 'WSync'), prefix='\\b', suffix='\\b'), Name.Function), include('numbers'), ('<@|<<@|>@|>>@|\\.>|->|===|~===|\\*\\*|\\+\\+|--|\\.|~==|~=|<=|>=|==|=|<<=|<<|>>=|>>|:=:|:=|->|<->|\\+:=|\\|', Operator), ('"(?:[^\\\\"]|\\\\.)*"', String), ("'(?:[^\\\\']|\\\\.)*'", String.Character), ('[*<>+=/&!?@~\\\\-]', Operator), ('\\^', Operator), ('(\\w+)(\\s*|[(,])', bygroups(Name, using(this))), ('[\\[\\]]', Punctuation), ("<>|=>|[()|:;,.'`{}%&?]", Punctuation), ('\\n+', Text)], 'numbers': [('\\b([+-]?([2-9]|[12][0-9]|3[0-6])[rR][0-9a-zA-Z]+)\\b', Number.Hex), ('[+-]?[0-9]*\\.([0-9]*)([Ee][+-]?[0-9]*)?', Number.Float), ('\\b([+-]?[0-9]+[KMGTPkmgtp]?)\\b', Number.Integer)], 'subprogram': [('\\(', Punctuation, ('#pop', 'formal_part')), (';', Punctuation, '#pop'), ('"[^"]+"|\\w+', Name.Function), include('root')], 'type_def': [('\\(', Punctuation, 'formal_part')], 'formal_part': [('\\)', Punctuation, '#pop'), ('\\w+', Name.Variable), (',', Punctuation), ('(:string|:integer|:real)\\b', Keyword.Reserved), include('root')]}
  }

  class IconLexer {
      + name = 'Icon'
      + aliases = ['icon']
      + filenames = ['*.icon', '*.ICON']
      + mimetypes = []
      + url = 'https://www2.cs.arizona.edu/icon'
      + version_added = '1.6'
      + flags = re.MULTILINE
      + tokens = {'root': [('[^\\S\\n]+', Text), ('#.*?\\n', Comment.Single), ('[^\\S\\n]+', Text), ('class|method|procedure', Keyword.Declaration, 'subprogram'), ('(record)(\\s+)(\\w+)', bygroups(Keyword.Declaration, Text, Keyword.Type), 'type_def'), ('(#line|\\$C|\\$Cend|\\$define|\\$else|\\$endif|\\$error|\\$ifdef|\\$ifndef|\\$include|\\$line|\\$undef)\\b', Keyword.PreProc), ('(&null|&fail)\\b', Keyword.Constant), ('&allocated|&ascii|&clock|&collections|&column|&col|&control|&cset|&current|&dateline|&date|&digits|&dump|&errno|&errornumber|&errortext|&errorvalue|&error|&errout|&eventcode|&eventvalue|&eventsource|&e|&features|&file|&host|&input|&interval|&lcase|&letters|&level|&line|&ldrag|&lpress|&lrelease|&main|&mdrag|&meta|&mpress|&mrelease|&now|&output|&phi|&pick|&pi|&pos|&progname|&random|&rdrag|&regions|&resize|&row|&rpress|&rrelease|&shift|&source|&storage|&subject|&time|&trace|&ucase|&version|&window|&x|&y', Keyword.Reserved), ('(by|of|not|to)\\b', Keyword.Reserved), ('(global|local|static)\\b', Keyword.Reserved), ('link', Keyword.Declaration), (words(('break', 'case', 'create', 'default', 'end', 'all', 'do', 'else', 'every', 'fail', 'if', 'initial', 'invocable', 'next', 'repeat', 'return', 'suspend', 'then', 'until', 'while'), prefix='\\b', suffix='\\b'), Keyword.Reserved), (words(('abs', 'acos', 'Active', 'Alert', 'any', 'args', 'array', 'asin', 'atan', 'atanh', 'Attrib', 'bal', 'Bg', 'callout', 'center', 'char', 'chdir', 'chmod', 'chown', 'chroot', 'Clip', 'Clone', 'close', 'cofail', 'collect', 'Color', 'ColorValue', 'condvar', 'copy', 'CopyArea', 'cos', 'Couple', 'crypt', 'cset', 'ctime', 'delay', 'delete', 'detab', 'display', 'DrawArc', 'DrawCircle', 'DrawCube', 'DrawCurve', 'DrawCylinder', 'DrawDisk', 'DrawImage', 'DrawLine', 'DrawPoint', 'DrawPolygon', 'DrawRectangle', 'DrawSegment', 'DrawSphere', 'DrawString', 'DrawTorus', 'dtor', 'entab', 'EraseArea', 'errorclear', 'Event', 'eventmask', 'EvGet', 'EvSend', 'exec', 'exit', 'exp', 'Eye', 'fcntl', 'fdup', 'fetch', 'Fg', 'fieldnames', 'FillArc', 'FillCircle', 'FillPolygon', 'FillRectangle', 'find', 'flock', 'flush', 'Font', 'FreeColor', 'FreeSpace', 'function', 'get', 'getch', 'getche', 'getenv', 'GetSpace', 'gettimeofday', 'getuid', 'globalnames', 'GotoRC', 'GotoXY', 'gtime', 'hardlink', 'iand', 'icom', 'IdentityMatrix', 'image', 'InPort', 'insert', 'Int86', 'integer', 'ioctl', 'ior', 'ishift', 'istate', 'ixor', 'kbhit', 'key', 'keyword', 'kill', 'left', 'Len', 'list', 'load', 'loadfunc', 'localnames', 'lock', 'log', 'Lower', 'lstat', 'many', 'map', 'match', 'MatrixMode', 'max', 'member', 'membernames', 'methodnames', 'methods', 'min', 'mkdir', 'move', 'MultMatrix', 'mutex', 'name', 'NewColor', 'Normals', 'numeric', 'open', 'opencl', 'oprec', 'ord', 'OutPort', 'PaletteChars', 'PaletteColor', 'PaletteKey', 'paramnames', 'parent', 'Pattern', 'Peek', 'Pending', 'pipe', 'Pixel', 'Poke', 'pop', 'PopMatrix', 'Pos', 'pos', 'proc', 'pull', 'push', 'PushMatrix', 'PushRotate', 'PushScale', 'PushTranslate', 'put', 'QueryPointer', 'Raise', 'read', 'ReadImage', 'readlink', 'reads', 'ready', 'real', 'receive', 'Refresh', 'Rem', 'remove', 'rename', 'repl', 'reverse', 'right', 'rmdir', 'Rotate', 'Rpos', 'rtod', 'runerr', 'save', 'Scale', 'seek', 'select', 'send', 'seq', 'serial', 'set', 'setenv', 'setuid', 'signal', 'sin', 'sort', 'sortf', 'spawn', 'sql', 'sqrt', 'stat', 'staticnames', 'stop', 'string', 'structure', 'Swi', 'symlink', 'sys_errstr', 'system', 'syswrite', 'tab', 'table', 'tan', 'Texcoord', 'Texture', 'TextWidth', 'Translate', 'trap', 'trim', 'truncate', 'trylock', 'type', 'umask', 'Uncouple', 'unlock', 'upto', 'utime', 'variable', 'wait', 'WAttrib', 'WDefault', 'WFlush', 'where', 'WinAssociate', 'WinButton', 'WinColorDialog', 'WindowContents', 'WinEditRegion', 'WinFontDialog', 'WinMenuBar', 'WinOpenDialog', 'WinPlayMedia', 'WinSaveDialog', 'WinScrollBar', 'WinSelectDialog', 'write', 'WriteImage', 'writes', 'WSection', 'WSync'), prefix='\\b', suffix='\\b'), Name.Function), include('numbers'), ('===|~===|\\*\\*|\\+\\+|--|\\.|==|~==|<=|>=|=|~=|<<=|<<|>>=|>>|:=:|:=|<->|<-|\\+:=|\\|\\||\\|', Operator), ('"(?:[^\\\\"]|\\\\.)*"', String), ("'(?:[^\\\\']|\\\\.)*'", String.Character), ('[*<>+=/&!?@~\\\\-]', Operator), ('(\\w+)(\\s*|[(,])', bygroups(Name, using(this))), ('[\\[\\]]', Punctuation), ("<>|=>|[()|:;,.'`{}%\\^&?]", Punctuation), ('\\n+', Text)], 'numbers': [('\\b([+-]?([2-9]|[12][0-9]|3[0-6])[rR][0-9a-zA-Z]+)\\b', Number.Hex), ('[+-]?[0-9]*\\.([0-9]*)([Ee][+-]?[0-9]*)?', Number.Float), ('\\b([+-]?[0-9]+[KMGTPkmgtp]?)\\b', Number.Integer)], 'subprogram': [('\\(', Punctuation, ('#pop', 'formal_part')), (';', Punctuation, '#pop'), ('"[^"]+"|\\w+', Name.Function), include('root')], 'type_def': [('\\(', Punctuation, 'formal_part')], 'formal_part': [('\\)', Punctuation, '#pop'), ('\\w+', Name.Variable), (',', Punctuation), ('(:string|:integer|:real)\\b', Keyword.Reserved), include('root')]}
  }

  class UcodeLexer {
      + name = 'ucode'
      + aliases = ['ucode']
      + filenames = ['*.u', '*.u1', '*.u2']
      + mimetypes = []
      + url = 'http://www.unicon.org'
      + version_added = '2.4'
      + flags = re.MULTILINE
      + tokens = {'root': [('(#.*\\n)', Comment), (words(('con', 'declend', 'end', 'global', 'impl', 'invocable', 'lab', 'link', 'local', 'record', 'uid', 'unions', 'version'), prefix='\\b', suffix='\\b'), Name.Function), (words(('colm', 'filen', 'line', 'synt'), prefix='\\b', suffix='\\b'), Comment), (words(('asgn', 'bang', 'bscan', 'cat', 'ccase', 'chfail', 'coact', 'cofail', 'compl', 'coret', 'create', 'cset', 'diff', 'div', 'dup', 'efail', 'einit', 'end', 'eqv', 'eret', 'error', 'escan', 'esusp', 'field', 'goto', 'init', 'int', 'inter', 'invoke', 'keywd', 'lconcat', 'lexeq', 'lexge', 'lexgt', 'lexle', 'lexlt', 'lexne', 'limit', 'llist', 'lsusp', 'mark', 'mark0', 'minus', 'mod', 'mult', 'neg', 'neqv', 'nonnull', 'noop', 'null', 'number', 'numeq', 'numge', 'numgt', 'numle', 'numlt', 'numne', 'pfail', 'plus', 'pnull', 'pop', 'power', 'pret', 'proc', 'psusp', 'push1', 'pushn1', 'random', 'rasgn', 'rcv', 'rcvbk', 'real', 'refresh', 'rswap', 'sdup', 'sect', 'size', 'snd', 'sndbk', 'str', 'subsc', 'swap', 'tabmat', 'tally', 'toby', 'trace', 'unmark', 'value', 'var'), prefix='\\b', suffix='\\b'), Keyword.Declaration), (words(('any', 'case', 'endcase', 'endevery', 'endif', 'endifelse', 'endrepeat', 'endsuspend', 'enduntil', 'endwhile', 'every', 'if', 'ifelse', 'repeat', 'suspend', 'until', 'while'), prefix='\\b', suffix='\\b'), Name.Constant), ('\\d+(\\s*|\\.$|$)', Number.Integer), ('[+-]?\\d*\\.\\d+(E[-+]?\\d+)?', Number.Float), ('[+-]?\\d+\\.\\d*(E[-+]?\\d+)?', Number.Float), ("(<>|=>|[()|:;,.'`]|[{}]|[%^]|[&?])", Punctuation), ('\\s+\\b', Text), ('[\\w-]+', Text)]}
  --
      + analyse_text(text)
  }

  class UrbiscriptLexer {
      + name = 'UrbiScript'
      + aliases = ['urbiscript']
      + filenames = ['*.u']
      + mimetypes = ['application/x-urbiscript']
      + url = 'https://github.com/urbiforge/urbi'
      + version_added = '1.5'
      + flags = re.DOTALL
      + tokens = {'root': [('\\s+', Text), ('//.*?\\n', Comment), ('/\\*', Comment.Multiline, 'comment'), ('(every|for|loop|while)(?:;|&|\\||,)', Keyword), (words(('assert', 'at', 'break', 'case', 'catch', 'closure', 'compl', 'continue', 'default', 'else', 'enum', 'every', 'external', 'finally', 'for', 'freezeif', 'if', 'new', 'onleave', 'return', 'stopif', 'switch', 'this', 'throw', 'timeout', 'try', 'waituntil', 'whenever', 'while'), suffix='\\b'), Keyword), (words(('asm', 'auto', 'bool', 'char', 'const_cast', 'delete', 'double', 'dynamic_cast', 'explicit', 'export', 'extern', 'float', 'friend', 'goto', 'inline', 'int', 'long', 'mutable', 'namespace', 'register', 'reinterpret_cast', 'short', 'signed', 'sizeof', 'static_cast', 'struct', 'template', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'virtual', 'volatile', 'wchar_t'), suffix='\\b'), Keyword.Reserved), ('(emit|foreach|internal|loopn|static)\\b', Keyword), ('(private|protected|public)\\b', Keyword), ('(var|do|const|function|class)\\b', Keyword.Declaration), ('(true|false|nil|void)\\b', Keyword.Constant), (words(('Barrier', 'Binary', 'Boolean', 'CallMessage', 'Channel', 'Code', 'Comparable', 'Container', 'Control', 'Date', 'Dictionary', 'Directory', 'Duration', 'Enumeration', 'Event', 'Exception', 'Executable', 'File', 'Finalizable', 'Float', 'FormatInfo', 'Formatter', 'Global', 'Group', 'Hash', 'InputStream', 'IoService', 'Job', 'Kernel', 'Lazy', 'List', 'Loadable', 'Lobby', 'Location', 'Logger', 'Math', 'Mutex', 'nil', 'Object', 'Orderable', 'OutputStream', 'Pair', 'Path', 'Pattern', 'Position', 'Primitive', 'Process', 'Profile', 'PseudoLazy', 'PubSub', 'RangeIterable', 'Regexp', 'Semaphore', 'Server', 'Singleton', 'Socket', 'StackFrame', 'Stream', 'String', 'System', 'Tag', 'Timeout', 'Traceable', 'TrajectoryGenerator', 'Triplet', 'Tuple', 'UObject', 'UValue', 'UVar'), suffix='\\b'), Name.Builtin), ('(?:this)\\b', Name.Builtin.Pseudo), ('(?:[-=+*%/<>~^:]+|\\.&?|\\|\\||&&)', Operator), ('(?:and_eq|and|bitand|bitor|in|not|not_eq|or_eq|or|xor_eq|xor)\\b', Operator.Word), ('[{}\\[\\]()]+', Punctuation), ('(?:;|\\||,|&|\\?|!)+', Punctuation), ('[$a-zA-Z_]\\w*', Name.Other), ('0x[0-9a-fA-F]+', Number.Hex), ('(?:[0-9]+(?:(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?)?((?:rad|deg|grad)|(?:ms|s|min|h|d))?)\\b', Number.Float), ('"', String.Double, 'string.double'), ("'", String.Single, 'string.single')], 'string.double': [('((?:\\\\\\\\|\\\\"|[^"])*?)(\\\\B\\((\\d+)\\)\\()', blob_callback), ('(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*?"', String.Double, '#pop')], 'string.single': [("((?:\\\\\\\\|\\\\'|[^'])*?)(\\\\B\\((\\d+)\\)\\()", blob_callback), ("(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*?'", String.Single, '#pop')], 'comment': [('[^*/]', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  --
      + blob_callback(lexer, match, ctx)
      + analyse_text(text)
  }

  class UsdLexer {
      + name = 'USD'
      + url = 'https://graphics.pixar.com/usd/release/index.html'
      + aliases = ['usd', 'usda']
      + filenames = ['*.usd', '*.usda']
      + version_added = '2.6'
      + tokens = {'root': [(f'(custom){_WHITESPACE}(uniform)(\\s+){_TYPE}(\\s+){_BASE_ATTRIBUTE}(\\s*)(=)', bygroups(Keyword.Token, Whitespace, Keyword.Token, Whitespace, Keyword.Type, Whitespace, Name.Attribute, Text, Name.Keyword.Tokens, Whitespace, Operator)), (f'(custom){_WHITESPACE}{_TYPE}(\\s+){_BASE_ATTRIBUTE}(\\s*)(=)', bygroups(Keyword.Token, Whitespace, Keyword.Type, Whitespace, Name.Attribute, Text, Name.Keyword.Tokens, Whitespace, Operator)), (f'(uniform){_WHITESPACE}{_TYPE}(\\s+){_BASE_ATTRIBUTE}(\\s*)(=)', bygroups(Keyword.Token, Whitespace, Keyword.Type, Whitespace, Name.Attribute, Text, Name.Keyword.Tokens, Whitespace, Operator)), (f'{_TYPE}{_WHITESPACE}{_BASE_ATTRIBUTE}(\\s*)(=)', bygroups(Keyword.Type, Whitespace, Name.Attribute, Text, Name.Keyword.Tokens, Whitespace, Operator))] + _keywords(KEYWORDS, Keyword.Tokens) + _keywords(SPECIAL_NAMES, Name.Builtins) + _keywords(COMMON_ATTRIBUTES, Name.Attribute) + [('\\b\\w+:[\\w:]+\\b', Name.Attribute)] + _keywords(OPERATORS, Operator) + [(type_ + '\\[\\]', Keyword.Type) for type_ in TYPES] + _keywords(TYPES, Keyword.Type) + [('[(){}\\[\\]]', Punctuation), ('#.*?$', Comment.Single), (',', Punctuation), (';', Punctuation), ('=', Operator), ('[-]*([0-9]*[.])?[0-9]+(?:e[+-]*\\d+)?', Number), ("'''(?:.|\\n)*?'''", String), ('"""(?:.|\\n)*?"""', String), ("'.*?'", String), ('".*?"', String), ('<(\\.\\./)*([\\w/]+|[\\w/]+\\.\\w+[\\w:]*)>', Name.Namespace), ('@.*?@', String.Interpol), ('\\(.*"[.\\\\n]*".*\\)', String.Doc), ('\\A#usda .+$', Comment.Hashbang), ('\\s+', Whitespace), ('\\w+', Text), ('[_:.]+', Punctuation)]}
  }

  class VCLLexer {
      + name = 'VCL'
      + aliases = ['vcl']
      + filenames = ['*.vcl']
      + mimetypes = ['text/x-vclsrc']
      + url = 'https://www.varnish-software.com/developers/tutorials/varnish-configuration-language-vcl'
      + version_added = '2.2'
      + tokens = {'probe': [include('whitespace'), include('comments'), ('(\\.\\w+)(\\s*=\\s*)([^;]*)(;)', bygroups(Name.Attribute, Operator, using(this), Punctuation)), ('\\}', Punctuation, '#pop')], 'acl': [include('whitespace'), include('comments'), ('[!/]+', Operator), (';', Punctuation), ('\\d+', Number), ('\\}', Punctuation, '#pop')], 'backend': [include('whitespace'), ('(\\.probe)(\\s*=\\s*)(\\w+)(;)', bygroups(Name.Attribute, Operator, Name.Variable.Global, Punctuation)), ('(\\.probe)(\\s*=\\s*)(\\{)', bygroups(Name.Attribute, Operator, Punctuation), 'probe'), ('(\\.\\w+\\b)(\\s*=\\s*)([^;\\s]*)(\\s*;)', bygroups(Name.Attribute, Operator, using(this), Punctuation)), ('\\{', Punctuation, '#push'), ('\\}', Punctuation, '#pop')], 'statements': [('(\\d\\.)?\\d+[sdwhmy]', Literal.Date), ('(\\d\\.)?\\d+ms', Literal.Date), ('(vcl_pass|vcl_hash|vcl_hit|vcl_init|vcl_backend_fetch|vcl_pipe|vcl_backend_response|vcl_synth|vcl_deliver|vcl_backend_error|vcl_fini|vcl_recv|vcl_purge|vcl_miss)\\b', Name.Function), ('(pipe|retry|hash|synth|deliver|purge|abandon|lookup|pass|fail|ok|miss|fetch|restart)\\b', Name.Constant), ('(beresp|obj|resp|req|req_top|bereq)\\.http\\.[a-zA-Z_-]+\\b', Name.Variable), (words(('obj.status', 'req.hash_always_miss', 'beresp.backend', 'req.esi_level', 'req.can_gzip', 'beresp.ttl', 'obj.uncacheable', 'req.ttl', 'obj.hits', 'client.identity', 'req.hash_ignore_busy', 'obj.reason', 'req.xid', 'req_top.proto', 'beresp.age', 'obj.proto', 'obj.age', 'local.ip', 'beresp.uncacheable', 'req.method', 'beresp.backend.ip', 'now', 'obj.grace', 'req.restarts', 'beresp.keep', 'req.proto', 'resp.proto', 'bereq.xid', 'bereq.between_bytes_timeout', 'req.esi', 'bereq.first_byte_timeout', 'bereq.method', 'bereq.connect_timeout', 'beresp.do_gzip', 'resp.status', 'beresp.do_gunzip', 'beresp.storage_hint', 'resp.is_streaming', 'beresp.do_stream', 'req_top.method', 'bereq.backend', 'beresp.backend.name', 'beresp.status', 'req.url', 'obj.keep', 'obj.ttl', 'beresp.reason', 'bereq.retries', 'resp.reason', 'bereq.url', 'beresp.do_esi', 'beresp.proto', 'client.ip', 'bereq.proto', 'server.hostname', 'remote.ip', 'req.backend_hint', 'server.identity', 'req_top.url', 'beresp.grace', 'beresp.was_304', 'server.ip', 'bereq.uncacheable'), suffix='\\b'), Name.Variable), ('[!%&+*\\-,/<.}{>=|~]+', Operator), ('[();]', Punctuation), ('[,]+', Punctuation), (words(('hash_data', 'regsub', 'regsuball', 'if', 'else', 'elsif', 'elif', 'synth', 'synthetic', 'ban', 'return', 'set', 'unset', 'import', 'include', 'new', 'rollback', 'call'), suffix='\\b'), Keyword), ('storage\\.\\w+\\.\\w+\\b', Name.Variable), (words(('true', 'false')), Name.Builtin), ('\\d+\\b', Number), ('(backend)(\\s+\\w+)(\\s*\\{)', bygroups(Keyword, Name.Variable.Global, Punctuation), 'backend'), ('(probe\\s)(\\s*\\w+\\s)(\\{)', bygroups(Keyword, Name.Variable.Global, Punctuation), 'probe'), ('(acl\\s)(\\s*\\w+\\s)(\\{)', bygroups(Keyword, Name.Variable.Global, Punctuation), 'acl'), ('(vcl )(4.0)(;)$', bygroups(Keyword.Reserved, Name.Constant, Punctuation)), ('(sub\\s+)([a-zA-Z]\\w*)(\\s*\\{)', bygroups(Keyword, Name.Function, Punctuation)), ('([a-zA-Z_]\\w*)(\\.)([a-zA-Z_]\\w*)(\\s*\\(.*\\))', bygroups(Name.Function, Punctuation, Name.Function, using(this))), ('[a-zA-Z_]\\w*', Name)], 'comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'comments': [('#.*$', Comment), ('/\\*', Comment.Multiline, 'comment'), ('//.*$', Comment)], 'string': [('"', String, '#pop'), ('[^"\\n]+', String)], 'multistring': [('[^"}]', String), ('"\\}', String, '#pop'), ('["}]', String)], 'whitespace': [('L?"', String, 'string'), ('\\{"', String, 'multistring'), ('\\n', Whitespace), ('\\s+', Whitespace), ('\\\\\\n', Text)], 'root': [include('whitespace'), include('comments'), include('statements'), ('\\s+', Whitespace)]}
  --
      + analyse_text(text)
  }

  class VCLSnippetLexer {
      + name = 'VCLSnippets'
      + aliases = ['vclsnippets', 'vclsnippet']
      + mimetypes = ['text/x-vclsnippet']
      + filenames = []
      + url = 'https://www.varnish-software.com/developers/tutorials/varnish-configuration-language-vcl'
      + version_added = '2.2'
      + tokens = {'snippetspre': [('\\.\\.\\.+', Comment), ('(bereq|req|req_top|resp|beresp|obj|client|server|local|remote|storage)($|\\.\\*)', Name.Variable)], 'snippetspost': [('(backend)\\b', Keyword.Reserved)], 'root': [include('snippetspre'), inherit, include('snippetspost')]}
  --
      + analyse_text(text)
  }

  class BoogieLexer {
      + name = 'Boogie'
      + url = 'https://boogie-docs.readthedocs.io/en/latest/'
      + aliases = ['boogie']
      + filenames = ['*.bpl']
      + version_added = '2.1'
      + tokens = {'root': [('\\n', Text), ('\\s+', Text), ('\\\\\\n', Text), ('//[/!](.*?)\\n', Comment.Doc), ('//(.*?)\\n', Comment.Single), ('/\\*', Comment.Multiline, 'comment'), (words(('axiom', 'break', 'call', 'ensures', 'else', 'exists', 'function', 'forall', 'if', 'invariant', 'modifies', 'procedure', 'requires', 'then', 'var', 'while'), suffix='\\b'), Keyword), (words(('const',), suffix='\\b'), Keyword.Reserved), (words(('bool', 'int', 'ref'), suffix='\\b'), Keyword.Type), include('numbers'), ('(>=|<=|:=|!=|==>|&&|\\|\\||[+/\\-=>*<\\[\\]])', Operator), ('\\{.*?\\}', Generic.Emph), ('([{}():;,.])', Punctuation), ('[a-zA-Z_]\\w*', Name)], 'comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'numbers': [('[0-9]+', Number.Integer)]}
  }

  class SilverLexer {
      + name = 'Silver'
      + aliases = ['silver']
      + filenames = ['*.sil', '*.vpr']
      + url = 'https://github.com/viperproject/silver'
      + version_added = '2.2'
      + tokens = {'root': [('\\n', Text), ('\\s+', Text), ('\\\\\\n', Text), ('//[/!](.*?)\\n', Comment.Doc), ('//(.*?)\\n', Comment.Single), ('/\\*', Comment.Multiline, 'comment'), (words(('result', 'true', 'false', 'null', 'method', 'function', 'predicate', 'program', 'domain', 'axiom', 'var', 'returns', 'field', 'define', 'fold', 'unfold', 'inhale', 'exhale', 'new', 'assert', 'assume', 'goto', 'while', 'if', 'elseif', 'else', 'fresh', 'constraining', 'Seq', 'Set', 'Multiset', 'union', 'intersection', 'setminus', 'subset', 'unfolding', 'in', 'old', 'forall', 'exists', 'acc', 'wildcard', 'write', 'none', 'epsilon', 'perm', 'unique', 'apply', 'package', 'folding', 'label', 'forperm'), suffix='\\b'), Keyword), (words(('requires', 'ensures', 'invariant'), suffix='\\b'), Name.Decorator), (words(('Int', 'Perm', 'Bool', 'Ref', 'Rational'), suffix='\\b'), Keyword.Type), include('numbers'), ('[!%&*+=|?:<>/\\-\\[\\]]', Operator), ('\\{.*?\\}', Generic.Emph), ('([{}():;,.])', Punctuation), ('[\\w$]\\w*', Name)], 'comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)], 'numbers': [('[0-9]+', Number.Integer)]}
  }

  class VerifpalLexer {
      + name = 'Verifpal'
      + aliases = ['verifpal']
      + filenames = ['*.vp']
      + mimetypes = ['text/x-verifpal']
      + url = 'https://verifpal.com'
      + version_added = '2.16'
      + tokens = {'root': [('//.*$', Comment.Single), ('(principal)( +)(\\w+)( *)(\\[)(.*)$', bygroups(Name.Builtin, Whitespace, String, Whitespace, Punctuation, Whitespace)), ('(attacker)( *)(\\[)( *)(passive|active)( *)(\\])( *)$', bygroups(Name.Builtin, Whitespace, Punctuation, Whitespace, String, Whitespace, Punctuation, Whitespace)), ('(knows)( +)(private|public)( +)', bygroups(Name.Builtin, Whitespace, Keyword.Constant, Whitespace), 'shared'), ('(queries)( +)(\\[)', bygroups(Name.Builtin, Whitespace, Punctuation), 'queries'), ('(\\w+)( +)(->|→)( *)(\\w+)( *)(\\:)', bygroups(String, Whitespace, Punctuation, Whitespace, String, Whitespace, Punctuation), 'shared'), (words(('generates', 'leaks'), suffix='\\b'), Name.Builtin, 'shared'), (words(('phase', 'precondition'), suffix='\\b'), Name.Builtin), ('[\\[\\(\\)\\]\\?:=→^,]', Punctuation), ('->', Punctuation), (words(('password',), suffix='\\b'), Keyword.Constant), (words(('AEAD_DEC', 'AEAD_ENC', 'ASSERT', 'BLIND', 'CONCAT', 'DEC', 'ENC', 'G', 'HASH', 'HKDF', 'MAC', 'PKE_DEC', 'PKE_ENC', 'PW_HASH', 'RINGSIGN', 'RINGSIGNVERIF', 'SHAMIR_JOIN', 'SHAMIR_SPLIT', 'SIGN', 'SIGNVERIF', 'SPLIT', 'UNBLIND', '_', 'nil'), suffix='\\b'), Name.Function), ('\\s+', Whitespace), ('\\w+', Name.Variable)], 'shared': [('[\\^\\[\\],]', Punctuation), (' +', Whitespace), ('\\w+', Name.Variable), default('#pop')], 'queries': [('\\s+', Name.Variable), (words(('confidentiality?', 'authentication?', 'freshness?', 'unlinkability?', 'equivalence?'), suffix='( )'), bygroups(Keyword.Pseudo, Whitespace), 'shared'), default('#pop')]}
  }

  class VisualPrologBaseLexer {
      + minorendkw = ('try', 'foreach', 'if')
      + minorkwexp = ('and', 'catch', 'do', 'else', 'elseif', 'erroneous', 'externally', 'failure', 'finally', 'foreach', 'if', 'or', 'orelse', 'otherwise', 'then', 'try', 'div', 'mod', 'rem', 'quot')
      + dockw = ('short', 'detail', 'end', 'withdomain')
      + tokens = {'root': [('\\s+', Whitespace), (words(minorendkw, prefix='\\bend\\s+', suffix='\\b'), Keyword.Minor), ('end', Keyword), (words(minorkwexp, suffix='\\b'), Keyword.Minor), ('0[xo][\\da-fA-F_]+', Number), ('((\\d[\\d_]*)?\\.)?\\d[\\d_]*([eE][\\-+]?\\d+)?', Number), ('_\\w*', Name.Variable.Anonymous), ('[A-Z]\\w*', Name.Variable), ('@\\w+', Name.Variable), ('[a-z]\\w*', Name), ('/\\*', Comment, 'comment'), ('\\%', Comment, 'commentline'), ('"', String.Symbol, 'string'), ("\\'", String.Symbol, 'stringsingle'), ('@"', String.Symbol, 'atstring'), ('[\\-+*^/!?<>=~:]+', Operator), ('[$,.[\\]|(){}\\\\]+', Punctuation), ('.', Text)], 'commentdoc': [(words(dockw, prefix='@', suffix='\\b'), Comment.Preproc), ('@', Comment)], 'commentline': [include('commentdoc'), ('[^@\\n]+', Comment), ('$', Comment, '#pop')], 'comment': [include('commentdoc'), ('[^@*/]+', Comment), ('/\\*', Comment, '#push'), ('\\*/', Comment, '#pop'), ('[*/]', Comment)], 'stringescape': [('\\\\u[0-9a-fA-F]{4}', String.Escape), ('\\\\[\\\'"ntr\\\\]', String.Escape)], 'stringsingle': [include('stringescape'), ("\\'", String.Symbol, '#pop'), ("[^\\'\\\\\\n]+", String), ('\\n', String.Escape.Error, '#pop')], 'string': [include('stringescape'), ('"', String.Symbol, '#pop'), ('[^"\\\\\\n]+', String), ('\\n', String.Escape.Error, '#pop')], 'atstring': [('""', String.Escape), ('"', String.Symbol, '#pop'), ('[^"]+', String)]}
  }

  class VisualPrologLexer {
      + name = 'Visual Prolog'
      + url = 'https://www.visual-prolog.com/'
      + aliases = ['visualprolog']
      + filenames = ['*.pro', '*.cl', '*.i', '*.pack', '*.ph']
      + version_added = '2.17'
      + majorkw = ('goal', 'namespace', 'interface', 'class', 'implement', 'where', 'open', 'inherits', 'supports', 'resolve', 'delegate', 'monitor', 'constants', 'domains', 'predicates', 'constructors', 'properties', 'clauses', 'facts')
      + minorkw = ('align', 'anyflow', 'as', 'bitsize', 'determ', 'digits', 'erroneous', 'externally', 'failure', 'from', 'guard', 'multi', 'nondeterm', 'or', 'orelse', 'otherwise', 'procedure', 'resolve', 'single', 'suspending')
      + directivekw = ('bininclude', 'else', 'elseif', 'endif', 'error', 'export', 'externally', 'from', 'grammargenerate', 'grammarinclude', 'if', 'include', 'message', 'options', 'orrequires', 'requires', 'stringinclude', 'then')
      + tokens = {'root': [(words(minorkw, suffix='\\b'), Keyword.Minor), (words(majorkw, suffix='\\b'), Keyword), (words(directivekw, prefix='#', suffix='\\b'), Keyword.Directive), inherit]}
  --
      + analyse_text(text)
  }

  class VisualPrologGrammarLexer {
      + name = 'Visual Prolog Grammar'
      + url = 'https://www.visual-prolog.com/'
      + aliases = ['visualprologgrammar']
      + filenames = ['*.vipgrm']
      + version_added = '2.17'
      + majorkw = ('open', 'namespace', 'grammar', 'nonterminals', 'startsymbols', 'terminals', 'rules', 'precedence')
      + directivekw = ('bininclude', 'stringinclude')
      + tokens = {'root': [(words(majorkw, suffix='\\b'), Keyword), (words(directivekw, prefix='#', suffix='\\b'), Keyword.Directive), inherit]}
  --
      + analyse_text(text)
  }

  class VyperLexer {
      + name = 'Vyper'
      + aliases = ['vyper']
      + filenames = ['*.vy']
      + url = 'https://vyper.readthedocs.io'
      + version_added = '2.17'
      + tokens = {'root': [('\\s+', Whitespace), ('(\\\\)(\\n|\\r\\n|\\r)', bygroups(Text, Whitespace)), ('#.*$', Comment.Single), ('\\"\\"\\"', Comment.Multiline, 'multiline-comment'), ("'", String.Single, 'single-string'), ('"', String.Double, 'double-string'), ('(def)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)', bygroups(Keyword, Whitespace, Name.Function)), ('(event|struct|interface|log)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)', bygroups(Keyword, Whitespace, Name.Class)), ('(from)(\\s+)(vyper\\.\\w+)(\\s+)(import)(\\s+)(\\w+)', bygroups(Keyword, Whitespace, Name.Namespace, Whitespace, Keyword, Whitespace, Name.Class)), ('\\b0x[0-9a-fA-F]+\\b', Number.Hex), ('\\b(\\d{1,3}(?:_\\d{3})*|\\d+)\\b', Number.Integer), ('\\b\\d+\\.\\d*\\b', Number.Float), (words(('def', 'event', 'pass', 'return', 'for', 'while', 'if', 'elif', 'else', 'assert', 'raise', 'import', 'in', 'struct', 'implements', 'interface', 'from', 'indexed', 'log', 'extcall', 'staticcall'), prefix='\\b', suffix='\\b'), Keyword), (words(('public', 'private', 'view', 'pure', 'constant', 'immutable', 'nonpayable'), prefix='\\b', suffix='\\b'), Keyword.Declaration), (words(('bitwise_and', 'bitwise_not', 'bitwise_or', 'bitwise_xor', 'shift', 'create_minimal_proxy_to', 'create_copy_of', 'create_from_blueprint', 'ecadd', 'ecmul', 'ecrecover', 'keccak256', 'sha256', 'concat', 'convert', 'uint2str', 'extract32', 'slice', 'abs', 'ceil', 'floor', 'max', 'max_value', 'min', 'min_value', 'pow_mod256', 'sqrt', 'isqrt', 'uint256_addmod', 'uint256_mulmod', 'unsafe_add', 'unsafe_sub', 'unsafe_mul', 'unsafe_div', 'as_wei_value', 'blockhash', 'empty', 'len', 'method_id', '_abi_encode', '_abi_decode', 'print', 'range'), prefix='\\b', suffix='\\b'), Name.Builtin), (words(('msg.sender', 'msg.value', 'block.timestamp', 'block.number', 'msg.gas'), prefix='\\b', suffix='\\b'), Name.Builtin.Pseudo), (words(('uint', 'uint8', 'uint16', 'uint32', 'uint64', 'uint128', 'uint256', 'int', 'int8', 'int16', 'int32', 'int64', 'int128', 'int256', 'bool', 'decimal', 'bytes', 'bytes1', 'bytes2', 'bytes3', 'bytes4', 'bytes5', 'bytes6', 'bytes7', 'bytes8', 'bytes9', 'bytes10', 'bytes11', 'bytes12', 'bytes13', 'bytes14', 'bytes15', 'bytes16', 'bytes17', 'bytes18', 'bytes19', 'bytes20', 'bytes21', 'bytes22', 'bytes23', 'bytes24', 'bytes25', 'bytes26', 'bytes27', 'bytes28', 'bytes29', 'bytes30', 'bytes31', 'bytes32', 'string', 'String', 'address', 'enum', 'struct'), prefix='\\b', suffix='\\b'), Keyword.Type), ('\\b(indexed)\\b(\\s*)(\\()(\\s*)(\\w+)(\\s*)(\\))', bygroups(Keyword, Whitespace, Punctuation, Whitespace, Keyword.Type, Punctuation)), ('(\\+|\\-|\\*|\\/|<=?|>=?|==|!=|=|\\||&|%)', Operator), ('[.,:;()\\[\\]{}]', Punctuation), ('@[\\w.]+', Name.Decorator), ('__\\w+__', Name.Magic), ('EMPTY_BYTES32', Name.Constant), ('\\bERC20\\b', Name.Class), ('\\bself\\b', Name.Attribute), ('Bytes\\[\\d+\\]', Keyword.Type), ('\\b[a-zA-Z_]\\w*\\b:', Name.Variable), ('\\b[a-zA-Z_]\\w*\\b', Name)], 'multiline-comment': [('\\"\\"\\"', Comment.Multiline, '#pop'), ('[^"]+', Comment.Multiline), ('\\"', Comment.Multiline)], 'single-string': [("[^\\\\']+", String.Single), ("'", String.Single, '#pop'), ('\\\\.', String.Escape)], 'double-string': [('[^\\\\"]+', String.Double), ('"', String.Double, '#pop'), ('\\\\.', String.Escape)]}
  }

  class WatLexer {
      + name = 'WebAssembly'
      + url = 'https://webassembly.org/'
      + aliases = ['wast', 'wat']
      + filenames = ['*.wat', '*.wast']
      + version_added = '2.9'
      + tokens = {'root': [(words(keywords, suffix='(?=[^a-z_\\.])'), Keyword), (words(builtins), Name.Builtin, 'arguments'), (words(['i32', 'i64', 'f32', 'f64']), Keyword.Type), ("\\$[A-Za-z0-9!#$%&\\'*+./:<=>?@\\\\^_`|~-]+", Name.Variable), (';;.*?$', Comment.Single), ('\\(;', Comment.Multiline, 'nesting_comment'), ('[+-]?0x[\\dA-Fa-f](_?[\\dA-Fa-f])*(.([\\dA-Fa-f](_?[\\dA-Fa-f])*)?)?([pP][+-]?[\\dA-Fa-f](_?[\\dA-Fa-f])*)?', Number.Float), ('[+-]?\\d.\\d(_?\\d)*[eE][+-]?\\d(_?\\d)*', Number.Float), ('[+-]?\\d.\\d(_?\\d)*', Number.Float), ('[+-]?\\d.[eE][+-]?\\d(_?\\d)*', Number.Float), ('[+-]?(inf|nan:0x[\\dA-Fa-f](_?[\\dA-Fa-f])*|nan)', Number.Float), ('[+-]?0x[\\dA-Fa-f](_?[\\dA-Fa-f])*', Number.Hex), ('[+-]?\\d(_?\\d)*', Number.Integer), ('[\\(\\)]', Punctuation), ('"', String.Double, 'string'), ('\\s+', Text)], 'nesting_comment': [('\\(;', Comment.Multiline, '#push'), (';\\)', Comment.Multiline, '#pop'), ('[^;(]+', Comment.Multiline), ('[;(]', Comment.Multiline)], 'string': [('\\\\[\\dA-Fa-f][\\dA-Fa-f]', String.Escape), ('\\\\t', String.Escape), ('\\\\n', String.Escape), ('\\\\r', String.Escape), ('\\\\"', String.Escape), ("\\\\'", String.Escape), ('\\\\u\\{[\\dA-Fa-f](_?[\\dA-Fa-f])*\\}', String.Escape), ('\\\\\\\\', String.Escape), ('"', String.Double, '#pop'), ('[^"\\\\]+', String.Double)], 'arguments': [('\\s+', Text), ('(offset)(=)(0x[\\dA-Fa-f](_?[\\dA-Fa-f])*)', bygroups(Keyword, Operator, Number.Hex)), ('(offset)(=)(\\d(_?\\d)*)', bygroups(Keyword, Operator, Number.Integer)), ('(align)(=)(0x[\\dA-Fa-f](_?[\\dA-Fa-f])*)', bygroups(Keyword, Operator, Number.Hex)), ('(align)(=)(\\d(_?\\d)*)', bygroups(Keyword, Operator, Number.Integer)), default('#pop')]}
  }

  class WebIDLLexer {
      + name = 'Web IDL'
      + url = 'https://www.w3.org/wiki/Web_IDL'
      + aliases = ['webidl']
      + filenames = ['*.webidl']
      + version_added = '2.6'
      + tokens = {'common': [('\\s+', Text), ('(?s)/\\*.*?\\*/', Comment.Multiline), ('//.*', Comment.Single), ('^#.*', Comment.Preproc)], 'root': [include('common'), ('\\[', Punctuation, 'extended_attributes'), ('partial' + _keyword_suffix, Keyword), ('typedef' + _keyword_suffix, Keyword, ('typedef', 'type')), ('interface' + _keyword_suffix, Keyword, 'interface_rest'), ('enum' + _keyword_suffix, Keyword, 'enum_rest'), ('callback' + _keyword_suffix, Keyword, 'callback_rest'), ('dictionary' + _keyword_suffix, Keyword, 'dictionary_rest'), ('namespace' + _keyword_suffix, Keyword, 'namespace_rest'), (_identifier, Name.Class, 'implements_rest')], 'extended_attributes': [include('common'), (',', Punctuation), (_identifier, Name.Decorator), ('=', Punctuation, 'extended_attribute_rest'), ('\\(', Punctuation, 'argument_list'), ('\\]', Punctuation, '#pop')], 'extended_attribute_rest': [include('common'), (_identifier, Name, 'extended_attribute_named_rest'), (_string, String), ('\\(', Punctuation, 'identifier_list'), default('#pop')], 'extended_attribute_named_rest': [include('common'), ('\\(', Punctuation, 'argument_list'), default('#pop')], 'argument_list': [include('common'), ('\\)', Punctuation, '#pop'), default('argument')], 'argument': [include('common'), ('optional' + _keyword_suffix, Keyword), ('\\[', Punctuation, 'extended_attributes'), (',', Punctuation, '#pop'), ('\\)', Punctuation, '#pop:2'), default(('argument_rest', 'type'))], 'argument_rest': [include('common'), (_identifier, Name.Variable), ('\\.\\.\\.', Punctuation), ('=', Punctuation, 'default_value'), default('#pop')], 'identifier_list': [include('common'), (_identifier, Name.Class), (',', Punctuation), ('\\)', Punctuation, '#pop')], 'type': [include('common'), ('(?:' + '|'.join(_builtin_types) + ')' + _keyword_suffix, Keyword.Type, 'type_null'), (words(('sequence', 'Promise', 'FrozenArray'), suffix=_keyword_suffix), Keyword.Type, 'type_identifier'), (_identifier, Name.Class, 'type_identifier'), ('\\(', Punctuation, 'union_type')], 'union_type': [include('common'), ('or' + _keyword_suffix, Keyword), ('\\)', Punctuation, ('#pop', 'type_null')), default('type')], 'type_identifier': [('<', Punctuation, 'type_list'), default(('#pop', 'type_null'))], 'type_null': [('\\?', Punctuation), default('#pop:2')], 'default_value': [include('common'), include('const_value'), (_string, String, '#pop'), ('\\[\\s*\\]', Punctuation, '#pop')], 'const_value': [include('common'), (words(('true', 'false', '-Infinity', 'Infinity', 'NaN', 'null'), suffix=_keyword_suffix), Keyword.Constant, '#pop'), ('-?(?:(?:[0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)(?:[Ee][+-]?[0-9]+)?' + '|[0-9]+[Ee][+-]?[0-9]+)', Number.Float, '#pop'), ('-?[1-9][0-9]*', Number.Integer, '#pop'), ('-?0[Xx][0-9A-Fa-f]+', Number.Hex, '#pop'), ('-?0[0-7]*', Number.Oct, '#pop')], 'typedef': [include('common'), (_identifier, Name.Class), (';', Punctuation, '#pop')], 'namespace_rest': [include('common'), (_identifier, Name.Namespace), ('\\{', Punctuation, 'namespace_body'), (';', Punctuation, '#pop')], 'namespace_body': [include('common'), ('\\[', Punctuation, 'extended_attributes'), ('readonly' + _keyword_suffix, Keyword), ('attribute' + _keyword_suffix, Keyword, ('attribute_rest', 'type')), ('const' + _keyword_suffix, Keyword, ('const_rest', 'type')), ('\\}', Punctuation, '#pop'), default(('operation_rest', 'type'))], 'interface_rest': [include('common'), (_identifier, Name.Class), (':', Punctuation), ('\\{', Punctuation, 'interface_body'), (';', Punctuation, '#pop')], 'interface_body': [(words(('iterable', 'maplike', 'setlike'), suffix=_keyword_suffix), Keyword, 'iterable_maplike_setlike_rest'), (words(('setter', 'getter', 'creator', 'deleter', 'legacycaller', 'inherit', 'static', 'stringifier', 'jsonifier'), suffix=_keyword_suffix), Keyword), ('serializer' + _keyword_suffix, Keyword, 'serializer_rest'), (';', Punctuation), include('namespace_body')], 'attribute_rest': [include('common'), (_identifier, Name.Variable), (';', Punctuation, '#pop')], 'const_rest': [include('common'), (_identifier, Name.Constant), ('=', Punctuation, 'const_value'), (';', Punctuation, '#pop')], 'operation_rest': [include('common'), (';', Punctuation, '#pop'), default('operation')], 'operation': [include('common'), (_identifier, Name.Function), ('\\(', Punctuation, 'argument_list'), (';', Punctuation, '#pop:2')], 'iterable_maplike_setlike_rest': [include('common'), ('<', Punctuation, 'type_list'), (';', Punctuation, '#pop')], 'type_list': [include('common'), (',', Punctuation), ('>', Punctuation, '#pop'), default('type')], 'serializer_rest': [include('common'), ('=', Punctuation, 'serialization_pattern'), (';', Punctuation, '#pop'), default('operation')], 'serialization_pattern': [include('common'), (_identifier, Name.Variable, '#pop'), ('\\{', Punctuation, 'serialization_pattern_map'), ('\\[', Punctuation, 'serialization_pattern_list')], 'serialization_pattern_map': [include('common'), (words(('getter', 'inherit', 'attribute'), suffix=_keyword_suffix), Keyword), (',', Punctuation), (_identifier, Name.Variable), ('\\}', Punctuation, '#pop:2')], 'serialization_pattern_list': [include('common'), (words(('getter', 'attribute'), suffix=_keyword_suffix), Keyword), (',', Punctuation), (_identifier, Name.Variable), (']', Punctuation, '#pop:2')], 'enum_rest': [include('common'), (_identifier, Name.Class), ('\\{', Punctuation, 'enum_body'), (';', Punctuation, '#pop')], 'enum_body': [include('common'), (_string, String), (',', Punctuation), ('\\}', Punctuation, '#pop')], 'callback_rest': [include('common'), ('interface' + _keyword_suffix, Keyword, ('#pop', 'interface_rest')), (_identifier, Name.Class), ('=', Punctuation, ('operation', 'type')), (';', Punctuation, '#pop')], 'dictionary_rest': [include('common'), (_identifier, Name.Class), (':', Punctuation), ('\\{', Punctuation, 'dictionary_body'), (';', Punctuation, '#pop')], 'dictionary_body': [include('common'), ('\\[', Punctuation, 'extended_attributes'), ('required' + _keyword_suffix, Keyword), ('\\}', Punctuation, '#pop'), default(('dictionary_item', 'type'))], 'dictionary_item': [include('common'), (_identifier, Name.Variable), ('=', Punctuation, 'default_value'), (';', Punctuation, '#pop')], 'implements_rest': [include('common'), ('implements' + _keyword_suffix, Keyword), (_identifier, Name.Class), (';', Punctuation, '#pop')]}
  }

  class DuelLexer {
      + name = 'Duel'
      + url = 'http://duelengine.org/'
      + aliases = ['duel', 'jbst', 'jsonml+bst']
      + filenames = ['*.duel', '*.jbst']
      + mimetypes = ['text/x-duel', 'text/x-jbst']
      + version_added = '1.4'
      + flags = re.DOTALL
      + tokens = {'root': [('(<%[@=#!:]?)(.*?)(%>)', bygroups(Name.Tag, using(JavascriptLexer), Name.Tag)), ('(<%\\$)(.*?)(:)(.*?)(%>)', bygroups(Name.Tag, Name.Function, Punctuation, String, Name.Tag)), ('(<%--)(.*?)(--%>)', bygroups(Name.Tag, Comment.Multiline, Name.Tag)), ('(<script.*?>)(.*?)(</script>)', bygroups(using(HtmlLexer), using(JavascriptLexer), using(HtmlLexer))), ('(.+?)(?=<)', using(HtmlLexer)), ('.+', using(HtmlLexer))]}
  }

  class XQueryLexer {
      + name = 'XQuery'
      + url = 'https://www.w3.org/XML/Query/'
      + aliases = ['xquery', 'xqy', 'xq', 'xql', 'xqm']
      + filenames = ['*.xqy', '*.xquery', '*.xq', '*.xql', '*.xqm']
      + mimetypes = ['text/xquery', 'application/xquery']
      + version_added = '1.4'
      + xquery_parse_state = []
      + ncnamestartchar = '(?:[A-Z]|_|[a-z])'
      + ncnamechar = '(?:' + ncnamestartchar + '|-|\\.|[0-9])'
      + ncname = f'(?:{ncnamestartchar}+{ncnamechar}*)'
      + pitarget_namestartchar = '(?:[A-KN-WYZ]|_|:|[a-kn-wyz])'
      + pitarget_namechar = '(?:' + pitarget_namestartchar + '|-|\\.|[0-9])'
      + pitarget = f'{pitarget_namestartchar}+{pitarget_namechar}*'
      + prefixedname = f'{ncname}:{ncname}'
      + unprefixedname = ncname
      + qname = f'(?:{prefixedname}|{unprefixedname})'
      + entityref = '(?:&(?:lt|gt|amp|quot|apos|nbsp);)'
      + charref = '(?:&#[0-9]+;|&#x[0-9a-fA-F]+;)'
      + stringdouble = '(?:"(?:' + entityref + '|' + charref + '|""|[^&"])*")'
      + stringsingle = "(?:'(?:" + entityref + '|' + charref + "|''|[^&'])*')"
      + elementcontentchar = '[A-Za-z]|\\s|\\d|[!"#$%()*+,\\-./:;=?@\\[\\\\\\]^_\\\'`|~]'
      + quotattrcontentchar = "[A-Za-z]|\\s|\\d|[!#$%()*+,\\-./:;=?@\\[\\\\\\]^_\\'`|~]"
      + aposattrcontentchar = '[A-Za-z]|\\s|\\d|[!"#$%()*+,\\-./:;=?@\\[\\\\\\]^_`|~]'
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'comment': [('[^:()]+', Comment), ('\\(:', Comment, '#push'), (':\\)', Comment, '#pop'), ('[:()]', Comment)], 'whitespace': [('\\s+', Whitespace)], 'operator': [include('whitespace'), ('(\\})', popstate_callback), ('\\(:', Comment, 'comment'), ('(\\{)', pushstate_root_callback), ('then|else|external|at|div|except', Keyword, 'root'), ('order by', Keyword, 'root'), ('group by', Keyword, 'root'), ('is|mod|order\\s+by|stable\\s+order\\s+by', Keyword, 'root'), ('and|or', Operator.Word, 'root'), ('(eq|ge|gt|le|lt|ne|idiv|intersect|in)(?=\\b)', Operator.Word, 'root'), ('return|satisfies|to|union|where|count|preserve\\s+strip', Keyword, 'root'), ('(>=|>>|>|<=|<<|<|-|\\*|!=|\\+|\\|\\||\\||:=|=|!)', operator_root_callback), ('(::|:|;|\\[|//|/|,)', punctuation_root_callback), ('(castable|cast)(\\s+)(as)\\b', bygroups(Keyword, Whitespace, Keyword), 'singletype'), ('(instance)(\\s+)(of)\\b', bygroups(Keyword, Whitespace, Keyword), 'itemtype'), ('(treat)(\\s+)(as)\\b', bygroups(Keyword, Whitespace, Keyword), 'itemtype'), ('(case)(\\s+)(' + stringdouble + ')', bygroups(Keyword, Whitespace, String.Double), 'itemtype'), ('(case)(\\s+)(' + stringsingle + ')', bygroups(Keyword, Whitespace, String.Single), 'itemtype'), ('(case|as)\\b', Keyword, 'itemtype'), ('(\\))(\\s*)(as)', bygroups(Punctuation, Whitespace, Keyword), 'itemtype'), ('\\$', Name.Variable, 'varname'), ('(for|let|previous|next)(\\s+)(\\$)', bygroups(Keyword, Whitespace, Name.Variable), 'varname'), ('(for)(\\s+)(tumbling|sliding)(\\s+)(window)(\\s+)(\\$)', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword, Whitespace, Name.Variable), 'varname'), ('\\)|\\?|\\]', Punctuation), ('(empty)(\\s+)(greatest|least)', bygroups(Keyword, Whitespace, Keyword)), ('ascending|descending|default', Keyword, '#push'), ('(allowing)(\\s+)(empty)', bygroups(Keyword, Whitespace, Keyword)), ('external', Keyword), ('(start|when|end)', Keyword, 'root'), ('(only)(\\s+)(end)', bygroups(Keyword, Whitespace, Keyword), 'root'), ('collation', Keyword, 'uritooperator'), ('(into|following|preceding|with)', Keyword, 'root'), ('\\.', Operator), (stringdouble, String.Double), (stringsingle, String.Single), ('(catch)(\\s*)', bygroups(Keyword, Whitespace), 'root')], 'uritooperator': [(stringdouble, String.Double, '#pop'), (stringsingle, String.Single, '#pop')], 'namespacedecl': [include('whitespace'), ('\\(:', Comment, 'comment'), ('(at)(\\s+)(' + stringdouble + ')', bygroups(Keyword, Whitespace, String.Double)), ('(at)(\\s+)(' + stringsingle + ')', bygroups(Keyword, Whitespace, String.Single)), (stringdouble, String.Double), (stringsingle, String.Single), (',', Punctuation), ('=', Operator), (';', Punctuation, 'root'), (ncname, Name.Namespace)], 'namespacekeyword': [include('whitespace'), ('\\(:', Comment, 'comment'), (stringdouble, String.Double, 'namespacedecl'), (stringsingle, String.Single, 'namespacedecl'), ('inherit|no-inherit', Keyword, 'root'), ('namespace', Keyword, 'namespacedecl'), ('(default)(\\s+)(element)', bygroups(Keyword, Text, Keyword)), ('preserve|no-preserve', Keyword), (',', Punctuation)], 'annotationname': [('\\(:', Comment, 'comment'), (qname, Name.Decorator), ('(\\()(' + stringdouble + ')', bygroups(Punctuation, String.Double)), ('(\\()(' + stringsingle + ')', bygroups(Punctuation, String.Single)), ('(\\,)(\\s+)(' + stringdouble + ')', bygroups(Punctuation, Text, String.Double)), ('(\\,)(\\s+)(' + stringsingle + ')', bygroups(Punctuation, Text, String.Single)), ('\\)', Punctuation), ('(\\s+)(\\%)', bygroups(Text, Name.Decorator), 'annotationname'), ('(\\s+)(variable)(\\s+)(\\$)', bygroups(Text, Keyword.Declaration, Text, Name.Variable), 'varname'), ('(\\s+)(function)(\\s+)', bygroups(Text, Keyword.Declaration, Text), 'root')], 'varname': [('\\(:', Comment, 'comment'), ('(' + qname + ')(\\()?', bygroups(Name, Punctuation), 'operator')], 'singletype': [include('whitespace'), ('\\(:', Comment, 'comment'), (ncname + '(:\\*)', Name.Variable, 'operator'), (qname, Name.Variable, 'operator')], 'itemtype': [include('whitespace'), ('\\(:', Comment, 'comment'), ('\\$', Name.Variable, 'varname'), ('(void)(\\s*)(\\()(\\s*)(\\))', bygroups(Keyword, Text, Punctuation, Text, Punctuation), 'operator'), ('(element|attribute|schema-element|schema-attribute|comment|text|node|binary|document-node|empty-sequence)(\\s*)(\\()', pushstate_occurrenceindicator_kindtest_callback), ('(processing-instruction)(\\s*)(\\()', bygroups(Keyword, Text, Punctuation), ('occurrenceindicator', 'kindtestforpi')), ('(item)(\\s*)(\\()(\\s*)(\\))(?=[*+?])', bygroups(Keyword, Text, Punctuation, Text, Punctuation), 'occurrenceindicator'), ('(\\(\\#)(\\s*)', bygroups(Punctuation, Text), 'pragma'), (';', Punctuation, '#pop'), ('then|else', Keyword, '#pop'), ('(at)(\\s+)(' + stringdouble + ')', bygroups(Keyword, Text, String.Double), 'namespacedecl'), ('(at)(\\s+)(' + stringsingle + ')', bygroups(Keyword, Text, String.Single), 'namespacedecl'), ('except|intersect|in|is|return|satisfies|to|union|where|count', Keyword, 'root'), ('and|div|eq|ge|gt|le|lt|ne|idiv|mod|or', Operator.Word, 'root'), (':=|=|,|>=|>>|>|\\[|\\(|<=|<<|<|-|!=|\\|\\||\\|', Operator, 'root'), ('external|at', Keyword, 'root'), ('(stable)(\\s+)(order)(\\s+)(by)', bygroups(Keyword, Text, Keyword, Text, Keyword), 'root'), ('(castable|cast)(\\s+)(as)', bygroups(Keyword, Text, Keyword), 'singletype'), ('(treat)(\\s+)(as)', bygroups(Keyword, Text, Keyword)), ('(instance)(\\s+)(of)', bygroups(Keyword, Text, Keyword)), ('(case)(\\s+)(' + stringdouble + ')', bygroups(Keyword, Text, String.Double), 'itemtype'), ('(case)(\\s+)(' + stringsingle + ')', bygroups(Keyword, Text, String.Single), 'itemtype'), ('case|as', Keyword, 'itemtype'), ('(\\))(\\s*)(as)', bygroups(Operator, Text, Keyword), 'itemtype'), (ncname + ':\\*', Keyword.Type, 'operator'), ('(function|map|array)(\\()', bygroups(Keyword.Type, Punctuation)), (qname, Keyword.Type, 'occurrenceindicator')], 'kindtest': [('\\(:', Comment, 'comment'), ('\\{', Punctuation, 'root'), ('(\\))([*+?]?)', popstate_kindtest_callback), ('\\*', Name, 'closekindtest'), (qname, Name, 'closekindtest'), ('(element|schema-element)(\\s*)(\\()', pushstate_kindtest_callback)], 'kindtestforpi': [('\\(:', Comment, 'comment'), ('\\)', Punctuation, '#pop'), (ncname, Name.Variable), (stringdouble, String.Double), (stringsingle, String.Single)], 'closekindtest': [('\\(:', Comment, 'comment'), ('(\\))', popstate_callback), (',', Punctuation), ('(\\{)', pushstate_operator_root_callback), ('\\?', Punctuation)], 'xml_comment': [('(-->)', popstate_xmlcomment_callback), ('[^-]{1,2}', Literal), ('\\t|\\r|\\n|[\\u0020-\\uD7FF]|[\\uE000-\\uFFFD]|[\\U00010000-\\U0010FFFF]', Literal)], 'processing_instruction': [('\\s+', Text, 'processing_instruction_content'), ('\\?>', String.Doc, '#pop'), (pitarget, Name)], 'processing_instruction_content': [('\\?>', String.Doc, '#pop'), ('\\t|\\r|\\n|[\\u0020-\\uD7FF]|[\\uE000-\\uFFFD]|[\\U00010000-\\U0010FFFF]', Literal)], 'cdata_section': [(']]>', String.Doc, '#pop'), ('\\t|\\r|\\n|[\\u0020-\\uD7FF]|[\\uE000-\\uFFFD]|[\\U00010000-\\U0010FFFF]', Literal)], 'start_tag': [include('whitespace'), ('(/>)', popstate_tag_callback), ('>', Name.Tag, 'element_content'), ('"', Punctuation, 'quot_attribute_content'), ("'", Punctuation, 'apos_attribute_content'), ('=', Operator), (qname, Name.Tag)], 'quot_attribute_content': [('"', Punctuation, 'start_tag'), ('(\\{)', pushstate_root_callback), ('""', Name.Attribute), (quotattrcontentchar, Name.Attribute), (entityref, Name.Attribute), (charref, Name.Attribute), ('\\{\\{|\\}\\}', Name.Attribute)], 'apos_attribute_content': [("'", Punctuation, 'start_tag'), ('\\{', Punctuation, 'root'), ("''", Name.Attribute), (aposattrcontentchar, Name.Attribute), (entityref, Name.Attribute), (charref, Name.Attribute), ('\\{\\{|\\}\\}', Name.Attribute)], 'element_content': [('</', Name.Tag, 'end_tag'), ('(\\{)', pushstate_root_callback), ('(<!--)', pushstate_element_content_xmlcomment_callback), ('(<\\?)', pushstate_element_content_processing_instruction_callback), ('(<!\\[CDATA\\[)', pushstate_element_content_cdata_section_callback), ('(<)', pushstate_element_content_starttag_callback), (elementcontentchar, Literal), (entityref, Literal), (charref, Literal), ('\\{\\{|\\}\\}', Literal)], 'end_tag': [include('whitespace'), ('(>)', popstate_tag_callback), (qname, Name.Tag)], 'xmlspace_decl': [include('whitespace'), ('\\(:', Comment, 'comment'), ('preserve|strip', Keyword, '#pop')], 'declareordering': [('\\(:', Comment, 'comment'), include('whitespace'), ('ordered|unordered', Keyword, '#pop')], 'xqueryversion': [include('whitespace'), ('\\(:', Comment, 'comment'), (stringdouble, String.Double), (stringsingle, String.Single), ('encoding', Keyword), (';', Punctuation, '#pop')], 'pragma': [(qname, Name.Variable, 'pragmacontents')], 'pragmacontents': [('#\\)', Punctuation, 'operator'), ('\\t|\\r|\\n|[\\u0020-\\uD7FF]|[\\uE000-\\uFFFD]|[\\U00010000-\\U0010FFFF]', Literal), ('(\\s+)', Whitespace)], 'occurrenceindicator': [include('whitespace'), ('\\(:', Comment, 'comment'), ('\\*|\\?|\\+', Operator, 'operator'), (':=', Operator, 'root'), default('operator')], 'option': [include('whitespace'), (qname, Name.Variable, '#pop')], 'qname_braren': [include('whitespace'), ('(\\{)', pushstate_operator_root_callback), ('(\\()', Punctuation, 'root')], 'element_qname': [(qname, Name.Variable, 'root')], 'attribute_qname': [(qname, Name.Variable, 'root')], 'root': [include('whitespace'), ('\\(:', Comment, 'comment'), ('\\d+(\\.\\d*)?[eE][+-]?\\d+', Number.Float, 'operator'), ('(\\.\\d+)[eE][+-]?\\d+', Number.Float, 'operator'), ('(\\.\\d+|\\d+\\.\\d*)', Number.Float, 'operator'), ('(\\d+)', Number.Integer, 'operator'), ('(\\.\\.|\\.|\\))', Punctuation, 'operator'), ('(declare)(\\s+)(construction)', bygroups(Keyword.Declaration, Text, Keyword.Declaration), 'operator'), ('(declare)(\\s+)(default)(\\s+)(order)', bygroups(Keyword.Declaration, Text, Keyword.Declaration, Text, Keyword.Declaration), 'operator'), ('(declare)(\\s+)(context)(\\s+)(item)', bygroups(Keyword.Declaration, Text, Keyword.Declaration, Text, Keyword.Declaration), 'operator'), (ncname + ':\\*', Name, 'operator'), ('\\*:' + ncname, Name.Tag, 'operator'), ('\\*', Name.Tag, 'operator'), (stringdouble, String.Double, 'operator'), (stringsingle, String.Single, 'operator'), ('(\\}|\\])', popstate_callback), ('(declare)(\\s+)(default)(\\s+)(collation)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration, Whitespace, Keyword.Declaration)), ('(module|declare)(\\s+)(namespace)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration), 'namespacedecl'), ('(declare)(\\s+)(base-uri)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration), 'namespacedecl'), ('(declare)(\\s+)(default)(\\s+)(element|function)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration, Whitespace, Keyword.Declaration), 'namespacekeyword'), ('(import)(\\s+)(schema|module)', bygroups(Keyword.Pseudo, Whitespace, Keyword.Pseudo), 'namespacekeyword'), ('(declare)(\\s+)(copy-namespaces)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration), 'namespacekeyword'), ('(for|let|some|every)(\\s+)(\\$)', bygroups(Keyword, Whitespace, Name.Variable), 'varname'), ('(for)(\\s+)(tumbling|sliding)(\\s+)(window)(\\s+)(\\$)', bygroups(Keyword, Whitespace, Keyword, Whitespace, Keyword, Whitespace, Name.Variable), 'varname'), ('\\$', Name.Variable, 'varname'), ('(declare)(\\s+)(variable)(\\s+)(\\$)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration, Whitespace, Name.Variable), 'varname'), ('(declare)(\\s+)(\\%)', bygroups(Keyword.Declaration, Whitespace, Name.Decorator), 'annotationname'), ('(\\))(\\s+)(as)', bygroups(Operator, Whitespace, Keyword), 'itemtype'), ('(element|attribute|schema-element|schema-attribute|comment|text|node|document-node|empty-sequence)(\\s+)(\\()', pushstate_operator_kindtest_callback), ('(processing-instruction)(\\s+)(\\()', pushstate_operator_kindtestforpi_callback), ('(<!--)', pushstate_operator_xmlcomment_callback), ('(<\\?)', pushstate_operator_processing_instruction_callback), ('(<!\\[CDATA\\[)', pushstate_operator_cdata_section_callback), ('(<)', pushstate_operator_starttag_callback), ('(declare)(\\s+)(boundary-space)', bygroups(Keyword.Declaration, Text, Keyword.Declaration), 'xmlspace_decl'), ('(validate)(\\s+)(lax|strict)', pushstate_operator_root_validate_withmode), ('(validate)(\\s*)(\\{)', pushstate_operator_root_validate), ('(typeswitch)(\\s*)(\\()', bygroups(Keyword, Whitespace, Punctuation)), ('(switch)(\\s*)(\\()', bygroups(Keyword, Whitespace, Punctuation)), ('(element|attribute|namespace)(\\s*)(\\{)', pushstate_operator_root_construct_callback), ('(document|text|processing-instruction|comment)(\\s*)(\\{)', pushstate_operator_root_construct_callback), ('(attribute)(\\s+)(?=' + qname + ')', bygroups(Keyword, Whitespace), 'attribute_qname'), ('(element)(\\s+)(?=' + qname + ')', bygroups(Keyword, Whitespace), 'element_qname'), ('(processing-instruction|namespace)(\\s+)(' + ncname + ')(\\s*)(\\{)', bygroups(Keyword, Whitespace, Name.Variable, Whitespace, Punctuation), 'operator'), ('(declare|define)(\\s+)(function)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration)), ('(\\{|\\[)', pushstate_operator_root_callback), ('(unordered|ordered)(\\s*)(\\{)', pushstate_operator_order_callback), ('(map|array)(\\s*)(\\{)', pushstate_operator_map_callback), ('(declare)(\\s+)(ordering)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration), 'declareordering'), ('(xquery)(\\s+)(version)', bygroups(Keyword.Pseudo, Whitespace, Keyword.Pseudo), 'xqueryversion'), ('(\\(#)(\\s*)', bygroups(Punctuation, Whitespace), 'pragma'), ('return', Keyword), ('(declare)(\\s+)(option)', bygroups(Keyword.Declaration, Whitespace, Keyword.Declaration), 'option'), ('(at)(\\s+)(' + stringdouble + ')', String.Double, 'namespacedecl'), ('(at)(\\s+)(' + stringsingle + ')', String.Single, 'namespacedecl'), ('(ancestor-or-self|ancestor|attribute|child|descendant-or-self)(::)', bygroups(Keyword, Punctuation)), ('(descendant|following-sibling|following|parent|preceding-sibling|preceding|self)(::)', bygroups(Keyword, Punctuation)), ('(if)(\\s*)(\\()', bygroups(Keyword, Whitespace, Punctuation)), ('then|else', Keyword), ('(update)(\\s*)(insert|delete|replace|value|rename)', bygroups(Keyword, Whitespace, Keyword)), ('(into|following|preceding|with)', Keyword), ('(try)(\\s*)', bygroups(Keyword, Whitespace), 'root'), ('(catch)(\\s*)(\\()(\\$)', bygroups(Keyword, Whitespace, Punctuation, Name.Variable), 'varname'), ('(@' + qname + ')', Name.Attribute, 'operator'), ('(@' + ncname + ')', Name.Attribute, 'operator'), ('@\\*:' + ncname, Name.Attribute, 'operator'), ('@\\*', Name.Attribute, 'operator'), ('(@)', Name.Attribute, 'operator'), ('//|/|\\+|-|;|,|\\(|\\)', Punctuation), (qname + '(?=\\s*\\{)', Name.Tag, 'qname_braren'), (qname + '(?=\\s*\\([^:])', Name.Function, 'qname_braren'), ('(' + qname + ')(#)([0-9]+)', bygroups(Name.Function, Keyword.Type, Number.Integer)), (qname, Name.Tag, 'operator')]}
  --
      + punctuation_root_callback(lexer, match, ctx)
      + operator_root_callback(lexer, match, ctx)
      + popstate_tag_callback(lexer, match, ctx)
      + popstate_xmlcomment_callback(lexer, match, ctx)
      + popstate_kindtest_callback(lexer, match, ctx)
      + popstate_callback(lexer, match, ctx)
      + pushstate_element_content_starttag_callback(lexer, match, ctx)
      + pushstate_cdata_section_callback(lexer, match, ctx)
      + pushstate_starttag_callback(lexer, match, ctx)
      + pushstate_operator_order_callback(lexer, match, ctx)
      + pushstate_operator_map_callback(lexer, match, ctx)
      + pushstate_operator_root_validate(lexer, match, ctx)
      + pushstate_operator_root_validate_withmode(lexer, match, ctx)
      + pushstate_operator_processing_instruction_callback(lexer, match, ctx)
      + pushstate_element_content_processing_instruction_callback(lexer, match, ctx)
      + pushstate_element_content_cdata_section_callback(lexer, match, ctx)
      + pushstate_operator_cdata_section_callback(lexer, match, ctx)
      + pushstate_element_content_xmlcomment_callback(lexer, match, ctx)
      + pushstate_operator_xmlcomment_callback(lexer, match, ctx)
      + pushstate_kindtest_callback(lexer, match, ctx)
      + pushstate_operator_kindtestforpi_callback(lexer, match, ctx)
      + pushstate_operator_kindtest_callback(lexer, match, ctx)
      + pushstate_occurrenceindicator_kindtest_callback(lexer, match, ctx)
      + pushstate_operator_starttag_callback(lexer, match, ctx)
      + pushstate_operator_root_callback(lexer, match, ctx)
      + pushstate_operator_root_construct_callback(lexer, match, ctx)
      + pushstate_root_callback(lexer, match, ctx)
      + pushstate_operator_attribute_callback(lexer, match, ctx)
  }

  class QmlLexer {
      + name = 'QML'
      + url = 'https://doc.qt.io/qt-6/qmlapplications.html'
      + aliases = ['qml', 'qbs']
      + filenames = ['*.qml', '*.qbs']
      + mimetypes = ['application/x-qml', 'application/x-qt.qbs+qml']
      + version_added = '1.6'
      + flags = re.DOTALL | re.MULTILINE
      + tokens = {'commentsandwhitespace': [('\\s+', Text), ('<!--', Comment), ('//.*?\\n', Comment.Single), ('/\\*.*?\\*/', Comment.Multiline)], 'slashstartsregex': [include('commentsandwhitespace'), ('/(\\\\.|[^[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gim]+\\b|\\B)', String.Regex, '#pop'), ('(?=/)', Text, ('#pop', 'badregex')), default('#pop')], 'badregex': [('\\n', Text, '#pop')], 'root': [('^(?=\\s|/|<!--)', Text, 'slashstartsregex'), include('commentsandwhitespace'), ('\\+\\+|--|~|&&|\\?|:|\\|\\||\\\\(?=\\n)|(<<|>>>?|==?|!=?|[-<>+*%&|^/])=?', Operator, 'slashstartsregex'), ('[{(\\[;,]', Punctuation, 'slashstartsregex'), ('[})\\].]', Punctuation), ('\\bid\\s*:\\s*[A-Za-z][\\w.]*', Keyword.Declaration, 'slashstartsregex'), ('\\b[A-Za-z][\\w.]*\\s*:', Keyword, 'slashstartsregex'), ('(for|in|while|do|break|return|continue|switch|case|default|if|else|throw|try|catch|finally|new|delete|typeof|instanceof|void|this)\\b', Keyword, 'slashstartsregex'), ('(var|let|with|function)\\b', Keyword.Declaration, 'slashstartsregex'), ('(abstract|boolean|byte|char|class|const|debugger|double|enum|export|extends|final|float|goto|implements|import|int|interface|long|native|package|private|protected|public|short|static|super|synchronized|throws|transient|volatile)\\b', Keyword.Reserved), ('(true|false|null|NaN|Infinity|undefined)\\b', Keyword.Constant), ('(Array|Boolean|Date|Error|Function|Math|netscape|Number|Object|Packages|RegExp|String|sun|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|Error|eval|isFinite|isNaN|parseFloat|parseInt|document|this|window)\\b', Name.Builtin), ('[$a-zA-Z_]\\w*', Name.Other), ('[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String.Double), ("'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", String.Single)]}
  }

  class CirruLexer {
      + name = 'Cirru'
      + url = 'http://cirru.org/'
      + aliases = ['cirru']
      + filenames = ['*.cirru']
      + mimetypes = ['text/x-cirru']
      + version_added = '2.0'
      + flags = re.MULTILINE
      + tokens = {'string': [('[^"\\\\\\n]+', String), ('\\\\', String.Escape, 'escape'), ('"', String, '#pop')], 'escape': [('.', String.Escape, '#pop')], 'function': [('\\,', Operator, '#pop'), ('[^\\s"()]+', Name.Function, '#pop'), ('\\)', Operator, '#pop'), ('(?=\\n)', Text, '#pop'), ('\\(', Operator, '#push'), ('"', String, ('#pop', 'string')), ('[ ]+', Text.Whitespace)], 'line': [('(?<!\\w)\\$(?!\\w)', Operator, 'function'), ('\\(', Operator, 'function'), ('\\)', Operator), ('\\n', Text, '#pop'), ('"', String, 'string'), ('[ ]+', Text.Whitespace), ('[+-]?[\\d.]+\\b', Number), ('[^\\s"()]+', Name.Variable)], 'root': [('^\\n+', Text.Whitespace), default(('line', 'function'))]}
  }

  class SlimLexer {
      + name = 'Slim'
      + aliases = ['slim']
      + filenames = ['*.slim']
      + mimetypes = ['text/x-slim']
      + url = 'https://slim-template.github.io'
      + version_added = '2.0'
      + flags = re.IGNORECASE
      + tokens = {'root': [('[ \\t]*\\n', Text), ('[ \\t]*', _indentation)], 'css': [('\\.[\\w:-]+', Name.Class, 'tag'), ('\\#[\\w:-]+', Name.Function, 'tag')], 'eval-or-plain': [('([ \\t]*==?)(.*\\n)', bygroups(Punctuation, using(RubyLexer)), 'root'), ('[ \\t]+[\\w:-]+(?==)', Name.Attribute, 'html-attributes'), default('plain')], 'content': [include('css'), ('[\\w:-]+:[ \\t]*\\n', Text, 'plain'), ('(-)(.*\\n)', bygroups(Punctuation, using(RubyLexer)), '#pop'), ('\\|' + _dot + '*\\n', _starts_block(Text, 'plain'), '#pop'), ('/' + _dot + '*\\n', _starts_block(Comment.Preproc, 'slim-comment-block'), '#pop'), ('[\\w:-]+', Name.Tag, 'tag'), include('eval-or-plain')], 'tag': [include('css'), ('[<>]{1,2}(?=[ \\t=])', Punctuation), ('[ \\t]+\\n', Punctuation, '#pop:2'), include('eval-or-plain')], 'plain': [('([^#\\n]|#[^{\\n]|(\\\\\\\\)*\\\\#\\{)+', Text), ('(#\\{)(.*?)(\\})', bygroups(String.Interpol, using(RubyLexer), String.Interpol)), ('\\n', Text, 'root')], 'html-attributes': [('=', Punctuation), ('"[^"]+"', using(RubyLexer), 'tag'), ("\\'[^\\']+\\'", using(RubyLexer), 'tag'), ('\\w+', Text, 'tag')], 'slim-comment-block': [(_dot + '+', Comment.Preproc), ('\\n', Text, 'root')]}
  }

  class WgslLexer {
      + name = 'WebGPU Shading Language'
      + url = 'https://www.w3.org/TR/WGSL/'
      + aliases = ['wgsl']
      + filenames = ['*.wgsl']
      + mimetypes = ['text/wgsl']
      + version_added = '2.15'
      + keyword_decl = (words('var let const override'.split(), suffix='\\b'), Keyword.Declaration)
      + keywords = (words('\n                alias\n                break\n                case\n                const_assert\n                continue\n                continuing\n                default\n                diagnostic\n                discard\n                else\n                enable\n                false\n                fn\n                for\n                if\n                loop\n                requires\n                return\n                struct\n                switch\n                true\n                while\n                '.split(), suffix='\\b'), Keyword)
      + keyword_reserved = (words('\n                NULL\n                Self\n                abstract\n                active\n                alignas\n                alignof\n                as\n                asm\n                asm_fragment\n                async\n                attribute\n                auto\n                await\n                become\n                binding_array\n                cast\n                catch\n                class\n                co_await\n                co_return\n                co_yield\n                coherent\n                column_major\n                common\n                compile\n                compile_fragment\n                concept\n                const_cast\n                consteval\n                constexpr\n                constinit\n                crate\n                debugger\n                decltype\n                delete\n                demote\n                demote_to_helper\n                do\n                dynamic_cast\n                enum\n                explicit\n                export\n                extends\n                extern\n                external\n                fallthrough\n                filter\n                final\n                finally\n                friend\n                from\n                fxgroup\n                get\n                goto\n                groupshared\n                highp\n                impl\n                implements\n                import\n                inline\n                instanceof\n                interface\n                layout\n                lowp\n                macro\n                macro_rules\n                match\n                mediump\n                meta\n                mod\n                module\n                move\n                mut\n                mutable\n                namespace\n                new\n                nil\n                noexcept\n                noinline\n                nointerpolation\n                noperspective\n                null\n                nullptr\n                of\n                operator\n                package\n                packoffset\n                partition\n                pass\n                patch\n                pixelfragment\n                precise\n                precision\n                premerge\n                priv\n                protected\n                pub\n                public\n                readonly\n                ref\n                regardless\n                register\n                reinterpret_cast\n                require\n                resource\n                restrict\n                self\n                set\n                shared\n                sizeof\n                smooth\n                snorm\n                static\n                static_assert\n                static_cast\n                std\n                subroutine\n                super\n                target\n                template\n                this\n                thread_local\n                throw\n                trait\n                try\n                type\n                typedef\n                typeid\n                typename\n                typeof\n                union\n                unless\n                unorm\n                unsafe\n                unsized\n                use\n                using\n                varying\n                virtual\n                volatile\n                wgsl\n                where\n                with\n                writeonly\n                yield\n                '.split(), suffix='\\b'), Keyword.Reserved)
      + predeclared_enums = (words('\n          read write read_write\n          function private workgroup uniform storage\n          perspective linear flat\n          center centroid sample\n          vertex_index instance_index position front_facing frag_depth\n              local_invocation_id local_invocation_index\n              global_invocation_id workgroup_id num_workgroups\n              sample_index sample_mask\n          rgba8unorm\n          rgba8snorm\n          rgba8uint\n          rgba8sint\n          rgba16uint\n          rgba16sint\n          rgba16float\n          r32uint\n          r32sint\n          r32float\n          rg32uint\n          rg32sint\n          rg32float\n          rgba32uint\n          rgba32sint\n          rgba32float\n          bgra8unorm\n          '.split(), suffix='\\b'), Name.Builtin)
      + predeclared_types = (words('\n          bool\n          f16\n          f32\n          i32\n          sampler sampler_comparison\n          texture_depth_2d\n          texture_depth_2d_array\n          texture_depth_cube\n          texture_depth_cube_array\n          texture_depth_multisampled_2d\n          texture_external\n          texture_external\n          u32\n          '.split(), suffix='\\b'), Name.Builtin)
      + predeclared_type_generators = (words('\n          array\n          atomic\n          mat2x2\n          mat2x3\n          mat2x4\n          mat3x2\n          mat3x3\n          mat3x4\n          mat4x2\n          mat4x3\n          mat4x4\n          ptr\n          texture_1d\n          texture_2d\n          texture_2d_array\n          texture_3d\n          texture_cube\n          texture_cube_array\n          texture_multisampled_2d\n          texture_storage_1d\n          texture_storage_2d\n          texture_storage_2d_array\n          texture_storage_3d\n          vec2\n          vec3\n          vec4\n          '.split(), suffix='\\b'), Name.Builtin)
      + predeclared_type_alias_vectors = (words('\n          vec2i vec3i vec4i\n          vec2u vec3u vec4u\n          vec2f vec3f vec4f\n          vec2h vec3h vec4h\n          '.split(), suffix='\\b'), Name.Builtin)
      + predeclared_type_alias_matrices = (words('\n          mat2x2f mat2x3f mat2x4f\n          mat3x2f mat3x3f mat3x4f\n          mat4x2f mat4x3f mat4x4f\n          mat2x2h mat2x3h mat2x4h\n          mat3x2h mat3x3h mat3x4h\n          mat4x2h mat4x3h mat4x4h\n          '.split(), suffix='\\b'), Name.Builtin)
      + tokens = {'blankspace': [('[\\u0020\\u0009\\u000a\\u000b\\u000c\\u000d\\u0085\\u200e\\u200f\\u2028\\u2029]+', Whitespace)], 'comments': [(f'//{NotLineEndRE}*{CR}{LF}', Comment.Single), (f'//{NotLineEndRE}*{LineEndRE}', Comment.Single), ('/\\*', Comment.Multiline, 'block_comment')], 'attribute': [include('blankspace'), include('comments'), (ident_pattern_token, Name.Decorator, '#pop'), default('#pop')], 'root': [include('blankspace'), include('comments'), ('@', Name.Decorator, 'attribute'), ('(true|false)\\b', Keyword.Constant), keyword_decl, keywords, keyword_reserved, predeclared_enums, predeclared_types, predeclared_type_generators, predeclared_type_alias_vectors, predeclared_type_alias_matrices, ('0[fh]', Number.Float), ('[1-9][0-9]*[fh]', Number.Float), ('[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?', Number.Float), ('[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?', Number.Float), ('[0-9]+[eE][+-]?[0-9]+[fh]?', Number.Float), ('0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?', Number.Float), ('0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?', Number.Float), ('0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?', Number.Float), ('0[xX][0-9a-fA-F]+[iu]?', Number.Hex), ('[1-9][0-9]*[iu]?', Number.Integer), ('0[iu]?', Number.Integer), ('[{}()\\[\\],\\.;:]', Punctuation), ('->', Punctuation), ('[+\\-*/%&|<>^!~=]', Operator), (ident_pattern_token, Name)], 'block_comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  }

  class WhileyLexer {
      + name = 'Whiley'
      + url = 'http://whiley.org/'
      + filenames = ['*.whiley']
      + aliases = ['whiley']
      + mimetypes = ['text/x-whiley']
      + version_added = '2.2'
      + tokens = {'root': [('\\s+', Text), ('//.*', Comment.Single), ('/\\*\\*/', Comment.Multiline), ('(?s)/\\*\\*.*?\\*/', String.Doc), ('(?s)/\\*.*?\\*/', Comment.Multiline), (words(('if', 'else', 'while', 'for', 'do', 'return', 'switch', 'case', 'default', 'break', 'continue', 'requires', 'ensures', 'where', 'assert', 'assume', 'all', 'no', 'some', 'in', 'is', 'new', 'throw', 'try', 'catch', 'debug', 'skip', 'fail', 'finite', 'total'), suffix='\\b'), Keyword.Reserved), (words(('function', 'method', 'public', 'private', 'protected', 'export', 'native'), suffix='\\b'), Keyword.Declaration), ('(constant|type)(\\s+)([a-zA-Z_]\\w*)(\\s+)(is)\\b', bygroups(Keyword.Declaration, Text, Name, Text, Keyword.Reserved)), ('(true|false|null)\\b', Keyword.Constant), ('(bool|byte|int|real|any|void)\\b', Keyword.Type), ('(import)(\\s+)(\\*)([^\\S\\n]+)(from)\\b', bygroups(Keyword.Namespace, Text, Punctuation, Text, Keyword.Namespace)), ('(import)(\\s+)([a-zA-Z_]\\w*)([^\\S\\n]+)(from)\\b', bygroups(Keyword.Namespace, Text, Name, Text, Keyword.Namespace)), ('(package|import)\\b', Keyword.Namespace), (words(('i8', 'i16', 'i32', 'i64', 'u8', 'u16', 'u32', 'u64', 'uint', 'nat', 'toString'), suffix='\\b'), Name.Builtin), ('[01]+b', Number.Bin), ('[0-9]+\\.[0-9]+', Number.Float), ('[0-9]+\\.(?!\\.)', Number.Float), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ("'[^\\\\]'", String.Char), ('(\')(\\\\[\'"\\\\btnfr])(\')', bygroups(String.Char, String.Escape, String.Char)), ('"', String, 'string'), ('[{}()\\[\\],.;]', Punctuation), ('[+\\-*/%&|<>^!~@=:?\\u2200\\u2203\\u2205\\u2282\\u2286\\u2283\\u2287\\u222A\\u2229\\u2264\\u2265\\u2208\\u2227\\u2228]', Operator), ('[a-zA-Z_]\\w*', Name)], 'string': [('"', String, '#pop'), ('\\\\[btnfr]', String.Escape), ('\\\\u[0-9a-fA-F]{4}', String.Escape), ('\\\\.', String), ('[^\\\\"]+', String)]}
  }

  class WoWTocLexer {
      + name = 'World of Warcraft TOC'
      + aliases = ['wowtoc']
      + filenames = ['*.toc']
      + url = 'https://wowpedia.fandom.com/wiki/TOC_format'
      + version_added = '2.14'
      + tokens = {'root': [_create_tag_line_token('((?:[nN][oO][tT][eE][sS]|[tT][iI][tT][lL][eE])-(?:ptBR|zhCN|enCN|frFR|deDE|itIT|esMX|ptPT|koKR|ruRU|esES|zhTW|enTW|enGB|enUS))', Name.Builtin), _create_tag_line_token('(Interface|Title|Notes|RequiredDeps|Dep[^: ]*|OptionalDeps|LoadOnDemand|LoadWith|LoadManagers|SavedVariablesPerCharacter|SavedVariables|DefaultState|Secure|Author|Version)', Name.Builtin, ignore_case=True), _create_tag_line_token('(X-[^: ]*)', Name.Variable, ignore_case=True), _create_tag_line_token('([^: ]*)', Name.Other), ('^#.*$', Comment), ('^.+$', Name)]}
  --
      + analyse_text(text)
  }

  class WrenLexer {
      + name = 'Wren'
      + url = 'https://wren.io'
      + aliases = ['wren']
      + filenames = ['*.wren']
      + version_added = '2.14'
      + flags = re.MULTILINE | re.DOTALL
      + tokens = {'root': [('\\s+', Whitespace), ('[,\\\\\\[\\]{}]', Punctuation), ('\\(', Punctuation, 'root'), ('\\)', Punctuation, '#pop'), (words(('as', 'break', 'class', 'construct', 'continue', 'else', 'for', 'foreign', 'if', 'import', 'return', 'static', 'super', 'this', 'var', 'while'), prefix='(?<!\\.)', suffix='\\b'), Keyword), (words(('true', 'false', 'null'), prefix='(?<!\\.)', suffix='\\b'), Keyword.Constant), (words(('in', 'is'), prefix='(?<!\\.)', suffix='\\b'), Operator.Word), ('/\\*', Comment.Multiline, 'comment'), ('//.*?$', Comment.Single), ('#.*?(\\(.*?\\))?$', Comment.Special), ('[!%&*+\\-./:<=>?\\\\^|~]+', Operator), ('[a-z][a-zA-Z_0-9]*', Name), ('[A-Z][a-zA-Z_0-9]*', Name.Class), ('__[a-zA-Z_0-9]*', Name.Variable.Class), ('_[a-zA-Z_0-9]*', Name.Variable.Instance), ('0x[0-9a-fA-F]+', Number.Hex), ('\\d+(\\.\\d+)?([eE][-+]?\\d+)?', Number.Float), ('""".*?"""', String), ('"', String, 'string')], 'comment': [('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('([^*/]|\\*(?!/)|/(?!\\*))+', Comment.Multiline)], 'string': [('"', String, '#pop'), ('\\\\[\\\\%"0abefnrtv]', String.Escape), ('\\\\x[a-fA-F0-9]{2}', String.Escape), ('\\\\u[a-fA-F0-9]{4}', String.Escape), ('\\\\U[a-fA-F0-9]{8}', String.Escape), ('%\\(', String.Interpol, 'interpolation'), ('[^\\\\"%]+', String)], 'interpolation': [('\\)', String.Interpol, '#pop'), include('root')]}
  }

  class X10Lexer {
      + name = 'X10'
      + url = 'http://x10-lang.org/'
      + aliases = ['x10', 'xten']
      + filenames = ['*.x10']
      + mimetypes = ['text/x-x10']
      + version_added = '2.2'
      + keywords = ('as', 'assert', 'async', 'at', 'athome', 'ateach', 'atomic', 'break', 'case', 'catch', 'class', 'clocked', 'continue', 'def', 'default', 'do', 'else', 'final', 'finally', 'finish', 'for', 'goto', 'haszero', 'here', 'if', 'import', 'in', 'instanceof', 'interface', 'isref', 'new', 'offer', 'operator', 'package', 'return', 'struct', 'switch', 'throw', 'try', 'type', 'val', 'var', 'when', 'while')
      + types = 'void'
      + values = ('false', 'null', 'self', 'super', 'this', 'true')
      + modifiers = ('abstract', 'extends', 'implements', 'native', 'offers', 'private', 'property', 'protected', 'public', 'static', 'throws', 'transient')
      + tokens = {'root': [('[^\\S\\n]+', Text), ('//.*?\\n', Comment.Single), ('/\\*(.|\\n)*?\\*/', Comment.Multiline), ('\\b({})\\b'.format('|'.join(keywords)), Keyword), ('\\b({})\\b'.format('|'.join(types)), Keyword.Type), ('\\b({})\\b'.format('|'.join(values)), Keyword.Constant), ('\\b({})\\b'.format('|'.join(modifiers)), Keyword.Declaration), ('"(\\\\\\\\|\\\\[^\\\\]|[^"\\\\])*"', String), ("'\\\\.'|'[^\\\\]'|'\\\\u[0-9a-fA-F]{4}'", String.Char), ('.', Text)]}
  }

  class XorgLexer {
      + name = 'Xorg'
      + url = 'https://www.x.org/wiki/'
      + aliases = ['xorg.conf']
      + filenames = ['xorg.conf']
      + mimetypes = []
      + version_added = ''
      + tokens = {'root': [('\\s+', Text), ('#.*$', Comment), ('((?:Sub)?Section)(\\s+)("\\w+")', bygroups(String.Escape, Text, String.Escape)), ('(End(?:Sub)?Section)', String.Escape), ('(\\w+)(\\s+)([^\\n#]+)', bygroups(Name.Builtin, Text, Name.Constant))]}
  }

  class YangLexer {
      + name = 'YANG'
      + url = 'https://tools.ietf.org/html/rfc7950/'
      + aliases = ['yang']
      + filenames = ['*.yang']
      + mimetypes = ['application/yang']
      + version_added = '2.7'
      + TOP_STMTS_KEYWORDS = ('module', 'submodule')
      + MODULE_HEADER_STMT_KEYWORDS = ('belongs-to', 'namespace', 'prefix', 'yang-version')
      + META_STMT_KEYWORDS = ('contact', 'description', 'organization', 'reference', 'revision')
      + LINKAGE_STMTS_KEYWORDS = ('import', 'include', 'revision-date')
      + BODY_STMT_KEYWORDS = ('action', 'argument', 'augment', 'deviation', 'extension', 'feature', 'grouping', 'identity', 'if-feature', 'input', 'notification', 'output', 'rpc', 'typedef')
      + DATA_DEF_STMT_KEYWORDS = ('anydata', 'anyxml', 'case', 'choice', 'config', 'container', 'deviate', 'leaf', 'leaf-list', 'list', 'must', 'presence', 'refine', 'uses', 'when')
      + TYPE_STMT_KEYWORDS = ('base', 'bit', 'default', 'enum', 'error-app-tag', 'error-message', 'fraction-digits', 'length', 'max-elements', 'min-elements', 'modifier', 'ordered-by', 'path', 'pattern', 'position', 'range', 'require-instance', 'status', 'type', 'units', 'value', 'yin-element')
      + LIST_STMT_KEYWORDS = ('key', 'mandatory', 'unique')
      + CONSTANTS_KEYWORDS = ('add', 'current', 'delete', 'deprecated', 'false', 'invert-match', 'max', 'min', 'not-supported', 'obsolete', 'replace', 'true', 'unbounded', 'user')
      + TYPES = ('binary', 'bits', 'boolean', 'decimal64', 'empty', 'enumeration', 'identityref', 'instance-identifier', 'int16', 'int32', 'int64', 'int8', 'leafref', 'string', 'uint16', 'uint32', 'uint64', 'uint8', 'union')
      + suffix_re_pattern = '(?=[^\\w\\-:])'
      + tokens = {'comments': [('[^*/]', Comment), ('/\\*', Comment, '#push'), ('\\*/', Comment, '#pop'), ('[*/]', Comment)], 'root': [('\\s+', Text.Whitespace), ('[{};]+', Token.Punctuation), ('(?<![\\-\\w])(and|or|not|\\+|\\.)(?![\\-\\w])', Token.Operator), ('"(?:\\\\"|[^"])*?"', String.Double), ("'(?:\\\\'|[^'])*?'", String.Single), ('/\\*', Comment, 'comments'), ('//.*?$', Comment), ('(?:^|(?<=[\\s{};]))([\\w.-]+)(:)([\\w.-]+)(?=[\\s{};])', bygroups(Name.Namespace, Token.Punctuation, Name.Variable)), ('([0-9]{4}\\-[0-9]{2}\\-[0-9]{2})(?=[\\s{};])', Name.Label), ('([0-9]+\\.[0-9]+)(?=[\\s{};])', Number.Float), ('([0-9]+)(?=[\\s{};])', Number.Integer), (words(TOP_STMTS_KEYWORDS, suffix=suffix_re_pattern), Token.Keyword), (words(MODULE_HEADER_STMT_KEYWORDS, suffix=suffix_re_pattern), Token.Keyword), (words(META_STMT_KEYWORDS, suffix=suffix_re_pattern), Token.Keyword), (words(LINKAGE_STMTS_KEYWORDS, suffix=suffix_re_pattern), Token.Keyword), (words(BODY_STMT_KEYWORDS, suffix=suffix_re_pattern), Token.Keyword), (words(DATA_DEF_STMT_KEYWORDS, suffix=suffix_re_pattern), Token.Keyword), (words(TYPE_STMT_KEYWORDS, suffix=suffix_re_pattern), Token.Keyword), (words(LIST_STMT_KEYWORDS, suffix=suffix_re_pattern), Token.Keyword), (words(TYPES, suffix=suffix_re_pattern), Name.Class), (words(CONSTANTS_KEYWORDS, suffix=suffix_re_pattern), Name.Class), ('[^;{}\\s\\\'"]+', Name.Variable)]}
  }

  class YaraLexer {
      + name = 'YARA'
      + url = 'https://virustotal.github.io/yara/'
      + aliases = ['yara', 'yar']
      + filenames = ['*.yar']
      + mimetypes = ['text/x-yara']
      + version_added = '2.16'
      + tokens = {'root': [('\\s+', Whitespace), ('//.*?$', Comment.Single), ('\\#.*?$', Comment.Single), ('/\\*', Comment.Multiline, 'comment'), (words(('rule', 'private', 'global', 'import', 'include'), prefix='\\b', suffix='\\b'), Keyword.Declaration), (words(('strings', 'condition', 'meta'), prefix='\\b', suffix='\\b'), Keyword), (words(('ascii', 'at', 'base64', 'base64wide', 'condition', 'contains', 'endswith', 'entrypoint', 'filesize', 'for', 'fullword', 'icontains', 'iendswith', 'iequals', 'in', 'include', 'int16', 'int16be', 'int32', 'int32be', 'int8', 'int8be', 'istartswith', 'matches', 'meta', 'nocase', 'none', 'of', 'startswith', 'strings', 'them', 'uint16', 'uint16be', 'uint32', 'uint32be', 'uint8', 'uint8be', 'wide', 'xor', 'defined'), prefix='\\b', suffix='\\b'), Name.Builtin), ('(true|false)\\b', Keyword.Constant), ('(and|or|not|any|all)\\b', Operator.Word), ('(\\$\\w+)', Name.Variable), ('"[^"]*"', String.Double), ("\\'[^\\']*\\'", String.Single), ('\\{.*?\\}$', Number.Hex), ('(/.*?/)', String.Regex), ('[a-z_]\\w*', Name), ('[$(){}[\\].?+*|]', Punctuation), ('[:=,;]', Punctuation), ('.', Text)], 'comment': [('[^*/]+', Comment.Multiline), ('/\\*', Comment.Multiline, '#push'), ('\\*/', Comment.Multiline, '#pop'), ('[*/]', Comment.Multiline)]}
  }

  class ZigLexer {
      + name = 'Zig'
      + url = 'http://www.ziglang.org'
      + aliases = ['zig']
      + filenames = ['*.zig']
      + mimetypes = ['text/zig']
      + version_added = ''
      + type_keywords = (words(('bool', 'f16', 'f32', 'f64', 'f128', 'void', 'noreturn', 'type', 'anyerror', 'promise', 'i0', 'u0', 'isize', 'usize', 'comptime_int', 'comptime_float', 'c_short', 'c_ushort', 'c_int', 'c_uint', 'c_long', 'c_ulong', 'c_longlong', 'c_ulonglong', 'c_longdouble', 'c_voidi8', 'u8', 'i16', 'u16', 'i32', 'u32', 'i64', 'u64', 'i128', 'u128'), suffix='\\b'), Keyword.Type)
      + storage_keywords = (words(('const', 'var', 'extern', 'packed', 'export', 'pub', 'noalias', 'inline', 'comptime', 'nakedcc', 'stdcallcc', 'volatile', 'allowzero', 'align', 'linksection', 'threadlocal'), suffix='\\b'), Keyword.Reserved)
      + structure_keywords = (words(('struct', 'enum', 'union', 'error'), suffix='\\b'), Keyword)
      + statement_keywords = (words(('break', 'return', 'continue', 'asm', 'defer', 'errdefer', 'unreachable', 'try', 'catch', 'async', 'await', 'suspend', 'resume', 'cancel'), suffix='\\b'), Keyword)
      + conditional_keywords = (words(('if', 'else', 'switch', 'and', 'or', 'orelse'), suffix='\\b'), Keyword)
      + repeat_keywords = (words(('while', 'for'), suffix='\\b'), Keyword)
      + other_keywords = (words(('fn', 'usingnamespace', 'test'), suffix='\\b'), Keyword)
      + constant_keywords = (words(('true', 'false', 'null', 'undefined'), suffix='\\b'), Keyword.Constant)
      + tokens = {'root': [('\\n', Whitespace), ('\\s+', Whitespace), ('//.*?\\n', Comment.Single), statement_keywords, storage_keywords, structure_keywords, repeat_keywords, type_keywords, constant_keywords, conditional_keywords, other_keywords, ('0x[0-9a-fA-F]+\\.[0-9a-fA-F]+([pP][\\-+]?[0-9a-fA-F]+)?', Number.Float), ('0x[0-9a-fA-F]+\\.?[pP][\\-+]?[0-9a-fA-F]+', Number.Float), ('[0-9]+\\.[0-9]+([eE][-+]?[0-9]+)?', Number.Float), ('[0-9]+\\.?[eE][-+]?[0-9]+', Number.Float), ('0b[01]+', Number.Bin), ('0o[0-7]+', Number.Oct), ('0x[0-9a-fA-F]+', Number.Hex), ('[0-9]+', Number.Integer), ('@[a-zA-Z_]\\w*', Name.Builtin), ('[a-zA-Z_]\\w*', Name), ("\\'\\\\\\'\\'", String.Escape), ('\\\'\\\\(x[a-fA-F0-9]{2}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{6}|[nr\\\\t\\\'"])\\\'', String.Escape), ("\\'[^\\\\\\']\\'", String), ('\\\\\\\\[^\\n]*', String.Heredoc), ('c\\\\\\\\[^\\n]*', String.Heredoc), ('c?"', String, 'string'), ('[+%=><|^!?/\\-*&~:]', Operator), ('[{}()\\[\\],.;]', Punctuation)], 'string': [('\\\\(x[a-fA-F0-9]{2}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{6}|[nr\\\\t\\\'"])', String.Escape), ('[^\\\\"\\n]+', String), ('"', String, '#pop')]}
  }

  class Opener {
      + version = 'Mozilla/5.0 (Pygments Sourcemod Builtins Update)'
  }

}

package styles {
  class AbapStyle {
      + name = 'abap'
      + styles = {Comment: 'italic #888', Comment.Special: '#888', Keyword: '#00f', Operator.Word: '#00f', Name: '#000', Number: '#3af', String: '#5a2', Error: '#F00'}
  }

  class AlgolStyle {
      + name = 'algol'
      + background_color = '#ffffff'
      + styles = {Comment: 'italic #888', Comment.Preproc: 'bold noitalic #888', Comment.Special: 'bold noitalic #888', Keyword: 'underline bold', Keyword.Declaration: 'italic', Name.Builtin: 'bold italic', Name.Builtin.Pseudo: 'bold italic', Name.Namespace: 'bold italic #666', Name.Class: 'bold italic #666', Name.Function: 'bold italic #666', Name.Variable: 'bold italic #666', Name.Constant: 'bold italic #666', Operator.Word: 'bold', String: 'italic #666', Error: 'border:#FF0000'}
  }

  class Algol_NuStyle {
      + name = 'algol_nu'
      + background_color = '#ffffff'
      + styles = {Comment: 'italic #888', Comment.Preproc: 'bold noitalic #888', Comment.Special: 'bold noitalic #888', Keyword: 'bold', Keyword.Declaration: 'italic', Name.Builtin: 'bold italic', Name.Builtin.Pseudo: 'bold italic', Name.Namespace: 'bold italic #666', Name.Class: 'bold italic #666', Name.Function: 'bold italic #666', Name.Variable: 'bold italic #666', Name.Constant: 'bold italic #666', Operator.Word: 'bold', String: 'italic #666', Error: 'border:#FF0000'}
  }

  class ArduinoStyle {
      + name = 'arduino'
      + background_color = '#ffffff'
      + styles = {Whitespace: '', Error: '#a61717', Comment: '#95a5a6', Comment.Multiline: '', Comment.Preproc: '#728E00', Comment.Single: '', Comment.Special: '', Keyword: '#728E00', Keyword.Constant: '#00979D', Keyword.Declaration: '', Keyword.Namespace: '', Keyword.Pseudo: '#00979D', Keyword.Reserved: '#00979D', Keyword.Type: '#00979D', Operator: '#728E00', Operator.Word: '', Name: '#434f54', Name.Attribute: '', Name.Builtin: '#728E00', Name.Builtin.Pseudo: '', Name.Class: '', Name.Constant: '', Name.Decorator: '', Name.Entity: '', Name.Exception: '', Name.Function: '#D35400', Name.Property: '', Name.Label: '', Name.Namespace: '', Name.Other: '#728E00', Name.Tag: '', Name.Variable: '', Name.Variable.Class: '', Name.Variable.Global: '', Name.Variable.Instance: '', Number: '#8A7B52', Number.Float: '', Number.Hex: '', Number.Integer: '', Number.Integer.Long: '', Number.Oct: '', String: '#7F8C8D', String.Backtick: '', String.Char: '', String.Doc: '', String.Double: '', String.Escape: '', String.Heredoc: '', String.Interpol: '', String.Other: '', String.Regex: '', String.Single: '', String.Symbol: '', Generic: '', Generic.Deleted: '', Generic.Emph: '', Generic.Error: '', Generic.Heading: '', Generic.Inserted: '', Generic.Output: '', Generic.Prompt: '', Generic.Strong: '', Generic.Subheading: '', Generic.Traceback: ''}
  }

  class AutumnStyle {
      + name = 'autumn'
      + styles = {Whitespace: '#bbbbbb', Comment: 'italic #aaaaaa', Comment.Preproc: 'noitalic #4c8317', Comment.Special: 'italic #0000aa', Keyword: '#0000aa', Keyword.Type: '#00aaaa', Operator.Word: '#0000aa', Name.Builtin: '#00aaaa', Name.Function: '#00aa00', Name.Class: 'underline #00aa00', Name.Namespace: 'underline #00aaaa', Name.Variable: '#aa0000', Name.Constant: '#aa0000', Name.Entity: 'bold #800', Name.Attribute: '#1e90ff', Name.Tag: 'bold #1e90ff', Name.Decorator: '#888888', String: '#aa5500', String.Symbol: '#0000aa', String.Regex: '#009999', Number: '#009999', Generic.Heading: 'bold #000080', Generic.Subheading: 'bold #800080', Generic.Deleted: '#aa0000', Generic.Inserted: '#00aa00', Generic.Error: '#aa0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: '#555555', Generic.Output: '#888888', Generic.Traceback: '#aa0000', Error: '#F00 bg:#FAA'}
  }

  class BorlandStyle {
      + name = 'borland'
      + styles = {Whitespace: '#bbbbbb', Comment: 'italic #008800', Comment.Preproc: 'noitalic #008080', Comment.Special: 'noitalic bold', String: '#0000FF', String.Char: '#800080', Number: '#0000FF', Keyword: 'bold #000080', Operator.Word: 'bold', Name.Tag: 'bold #000080', Name.Attribute: '#FF0000', Generic.Heading: '#999999', Generic.Subheading: '#aaaaaa', Generic.Deleted: 'bg:#ffdddd #000000', Generic.Inserted: 'bg:#ddffdd #000000', Generic.Error: '#aa0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: '#555555', Generic.Output: '#888888', Generic.Traceback: '#aa0000', Error: 'bg:#e3d2d2 #a61717'}
  }

  class BlackWhiteStyle {
      + name = 'bw'
      + background_color = '#ffffff'
      + styles = {Comment: 'italic', Comment.Preproc: 'noitalic', Keyword: 'bold', Keyword.Pseudo: 'nobold', Keyword.Type: 'nobold', Operator.Word: 'bold', Name.Class: 'bold', Name.Namespace: 'bold', Name.Exception: 'bold', Name.Entity: 'bold', Name.Tag: 'bold', String: 'italic', String.Interpol: 'bold', String.Escape: 'bold', Generic.Heading: 'bold', Generic.Subheading: 'bold', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold', Error: 'border:#FF0000'}
  }

  class CoffeeStyle {
      + name = 'coffee'
      + background_color = '#262220'
      + highlight_color = '#ddd0c0'
      + line_number_color = '#4e4e4e'
      + line_number_special_color = '#8f9494'
      + styles = {Comment: '#70757A', Comment.Hashbang: '#8f9f9f', Comment.Preproc: '#fdd0c0', Comment.PreprocFile: '#c9b98f', Comment.Special: '#af5f5f', Error: '#af5f5f', Generic.Deleted: '#bb6868', Generic.Emph: 'italic', Generic.Error: '#af5f5f', Generic.Inserted: '#849155', Generic.Output: '#ddd0c0', Generic.Strong: 'bold', Generic.Traceback: '#af5f5f', Keyword: '#919191', Keyword.Constant: '#875f5f', Keyword.Declaration: '#875f5f', Keyword.Namespace: '#875f5f', Keyword.Reserved: '#b46276', Keyword.Type: '#af875f', Literal: '#af875f', Name: '#ddd0c0', Name.Attribute: '#ddd0c0', Name.Builtin: '#ddd0c0', Name.Builtin.Pseudo: '#87afaf', Name.Class: '#875f5f', Name.Constant: '#af8787', Name.Decorator: '#fdd0c0', Name.Entity: '#ddd0c0', Name.Exception: '#877575', Name.Function: '#fdd0c0', Name.Function.Magic: '#fdd0c0', Name.Other: '#ddd0c0', Name.Property: '#dfaf87', Name.Tag: '#87afaf', Name.Variable: '#ddd0c0', Number: '#87afaf', Operator: '#878787', Operator.Word: '#878787', Punctuation: '#ddd0c0', String: '#c9b98f', String.Affix: '#dfaf87', String.Doc: '#878787', String.Escape: '#af5f5f', String.Interpol: '#af5f5f', String.Other: '#fdd0c0', String.Regex: '#af5f5f', String.Symbol: '#af5f5f', Token: '#ddd0c0'}
  }

  class ColorfulStyle {
      + name = 'colorful'
      + styles = {Whitespace: '#bbbbbb', Comment: '#888', Comment.Preproc: '#579', Comment.Special: 'bold #cc0000', Keyword: 'bold #080', Keyword.Pseudo: '#038', Keyword.Type: '#339', Operator: '#333', Operator.Word: 'bold #000', Name.Builtin: '#007020', Name.Function: 'bold #06B', Name.Class: 'bold #B06', Name.Namespace: 'bold #0e84b5', Name.Exception: 'bold #F00', Name.Variable: '#963', Name.Variable.Instance: '#33B', Name.Variable.Class: '#369', Name.Variable.Global: 'bold #d70', Name.Constant: 'bold #036', Name.Label: 'bold #970', Name.Entity: 'bold #800', Name.Attribute: '#00C', Name.Tag: '#070', Name.Decorator: 'bold #555', String: 'bg:#fff0f0', String.Char: '#04D bg:', String.Doc: '#D42 bg:', String.Interpol: 'bg:#eee', String.Escape: 'bold #666', String.Regex: 'bg:#fff0ff #000', String.Symbol: '#A60 bg:', String.Other: '#D20', Number: 'bold #60E', Number.Integer: 'bold #00D', Number.Float: 'bold #60E', Number.Hex: 'bold #058', Number.Oct: 'bold #40E', Generic.Heading: 'bold #000080', Generic.Subheading: 'bold #800080', Generic.Deleted: '#A00000', Generic.Inserted: '#00A000', Generic.Error: '#FF0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold #c65d09', Generic.Output: '#888', Generic.Traceback: '#04D', Error: '#F00 bg:#FAA'}
  }

  class DefaultStyle {
      + name = 'default'
      + background_color = '#f8f8f8'
      + styles = {Whitespace: '#bbbbbb', Comment: 'italic #3D7B7B', Comment.Preproc: 'noitalic #9C6500', Keyword: 'bold #008000', Keyword.Pseudo: 'nobold', Keyword.Type: 'nobold #B00040', Operator: '#666666', Operator.Word: 'bold #AA22FF', Name.Builtin: '#008000', Name.Function: '#0000FF', Name.Class: 'bold #0000FF', Name.Namespace: 'bold #0000FF', Name.Exception: 'bold #CB3F38', Name.Variable: '#19177C', Name.Constant: '#880000', Name.Label: '#767600', Name.Entity: 'bold #717171', Name.Attribute: '#687822', Name.Tag: 'bold #008000', Name.Decorator: '#AA22FF', String: '#BA2121', String.Doc: 'italic', String.Interpol: 'bold #A45A77', String.Escape: 'bold #AA5D1F', String.Regex: '#A45A77', String.Symbol: '#19177C', String.Other: '#008000', Number: '#666666', Generic.Heading: 'bold #000080', Generic.Subheading: 'bold #800080', Generic.Deleted: '#A00000', Generic.Inserted: '#008400', Generic.Error: '#E40000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold #000080', Generic.Output: '#717171', Generic.Traceback: '#04D', Error: 'border:#FF0000'}
  }

  class DraculaStyle {
      + name = 'dracula'
      + background_color = background
      + highlight_color = selection
      + line_number_color = yellow
      + line_number_background_color = selection
      + line_number_special_color = green
      + line_number_special_background_color = comment
      + styles = {Whitespace: foreground, Comment: comment, Comment.Preproc: pink, Generic: foreground, Generic.Deleted: deletion, Generic.Emph: 'underline', Generic.Heading: 'bold', Generic.Inserted: 'bold', Generic.Output: selection, Generic.EmphStrong: 'underline', Generic.Subheading: 'bold', Error: foreground, Keyword: pink, Keyword.Constant: pink, Keyword.Declaration: cyan + ' italic', Keyword.Type: cyan, Literal: foreground, Name: foreground, Name.Attribute: green, Name.Builtin: cyan + ' italic', Name.Builtin.Pseudo: foreground, Name.Class: green, Name.Function: green, Name.Label: cyan + ' italic', Name.Tag: pink, Name.Variable: cyan + ' italic', Number: orange, Operator: pink, Other: foreground, Punctuation: foreground, String: purple, Text: foreground}
  }

  class EmacsStyle {
      + name = 'emacs'
      + background_color = '#f8f8f8'
      + styles = {Whitespace: '#bbbbbb', Comment: 'italic #008800', Comment.Preproc: 'noitalic', Comment.Special: 'noitalic bold', Keyword: 'bold #AA22FF', Keyword.Pseudo: 'nobold', Keyword.Type: 'bold #00BB00', Operator: '#666666', Operator.Word: 'bold #AA22FF', Name.Builtin: '#AA22FF', Name.Function: '#00A000', Name.Class: '#0000FF', Name.Namespace: 'bold #0000FF', Name.Exception: 'bold #D2413A', Name.Variable: '#B8860B', Name.Constant: '#880000', Name.Label: '#A0A000', Name.Entity: 'bold #999999', Name.Attribute: '#BB4444', Name.Tag: 'bold #008000', Name.Decorator: '#AA22FF', String: '#BB4444', String.Doc: 'italic', String.Interpol: 'bold #BB6688', String.Escape: 'bold #BB6622', String.Regex: '#BB6688', String.Symbol: '#B8860B', String.Other: '#008000', Number: '#666666', Generic.Heading: 'bold #000080', Generic.Subheading: 'bold #800080', Generic.Deleted: '#A00000', Generic.Inserted: '#00A000', Generic.Error: '#FF0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold #000080', Generic.Output: '#888', Generic.Traceback: '#04D', Error: 'border:#FF0000'}
  }

  class FriendlyStyle {
      + name = 'friendly'
      + background_color = '#f0f0f0'
      + line_number_color = '#666666'
      + styles = {Whitespace: '#bbbbbb', Comment: 'italic #60a0b0', Comment.Preproc: 'noitalic #007020', Comment.Special: 'noitalic bg:#fff0f0', Keyword: 'bold #007020', Keyword.Pseudo: 'nobold', Keyword.Type: 'nobold #902000', Operator: '#666666', Operator.Word: 'bold #007020', Name.Builtin: '#007020', Name.Function: '#06287e', Name.Class: 'bold #0e84b5', Name.Namespace: 'bold #0e84b5', Name.Exception: '#007020', Name.Variable: '#bb60d5', Name.Constant: '#60add5', Name.Label: 'bold #002070', Name.Entity: 'bold #d55537', Name.Attribute: '#4070a0', Name.Tag: 'bold #062873', Name.Decorator: 'bold #555555', String: '#4070a0', String.Doc: 'italic', String.Interpol: 'italic #70a0d0', String.Escape: 'bold #4070a0', String.Regex: '#235388', String.Symbol: '#517918', String.Other: '#c65d09', Number: '#40a070', Generic.Heading: 'bold #000080', Generic.Subheading: 'bold #800080', Generic.Deleted: '#A00000', Generic.Inserted: '#00A000', Generic.Error: '#FF0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold #c65d09', Generic.Output: '#888', Generic.Traceback: '#04D', Error: 'border:#FF0000'}
  }

  class FriendlyGrayscaleStyle {
      + name = 'friendly_grayscale'
      + background_color = '#f0f0f0'
      + styles = {Whitespace: '#bbbbbb', Comment: 'italic #959595', Comment.Preproc: 'noitalic #575757', Comment.Special: 'noitalic bg:#F4F4F4', Keyword: 'bold #575757', Keyword.Pseudo: 'nobold', Keyword.Type: 'nobold #4F4F4F', Operator: '#666666', Operator.Word: 'bold #575757', Name.Builtin: '#575757', Name.Function: '#3F3F3F', Name.Class: 'bold #7E7E7E', Name.Namespace: 'bold #7E7E7E', Name.Exception: '#575757', Name.Variable: '#9A9A9A', Name.Constant: '#A5A5A5', Name.Label: 'bold #363636', Name.Entity: 'bold #848484', Name.Attribute: '#707070', Name.Tag: 'bold #3B3B3B', Name.Decorator: 'bold #555555', String: '#717171', String.Doc: 'italic', String.Interpol: 'italic #9F9F9F', String.Escape: 'bold #717171', String.Regex: '#575757', String.Symbol: '#676767', String.Other: '#7E7E7E', Number: '#888888', Generic.Heading: 'bold #373737', Generic.Subheading: 'bold #5A5A5A', Generic.Deleted: '#545454', Generic.Inserted: '#7D7D7D', Generic.Error: '#898989', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold #7E7E7E', Generic.Output: '#888888', Generic.Traceback: '#6D6D6D', Error: 'border:#898989'}
  }

  class FruityStyle {
      + name = 'fruity'
      + background_color = '#111111'
      + highlight_color = '#333333'
      + styles = {Whitespace: '#888888', Token: '#ffffff', Generic.Output: '#444444 bg:#222222', Keyword: '#fb660a bold', Keyword.Pseudo: 'nobold', Number: '#0086f7 bold', Name.Tag: '#fb660a bold', Name.Variable: '#fb660a', Comment: '#008800 bg:#0f140f italic', Name.Attribute: '#ff0086 bold', String: '#0086d2', Name.Function: '#ff0086 bold', Generic.Heading: '#ffffff bold', Keyword.Type: '#cdcaa9 bold', Generic.Subheading: '#ffffff bold', Name.Constant: '#0086d2', Comment.Preproc: '#ff0007 bold'}
  }

  class GhDarkStyle {
      + name = 'github-dark'
      + background_color = BG_DEFAULT
      + highlight_color = GRAY_4
      + line_number_special_color = FG_DEFAULT
      + line_number_special_background_color = FG_SUBTLE
      + line_number_color = GRAY_4
      + line_number_background_color = BG_DEFAULT
      + styles = {Token: FG_DEFAULT, Error: DANGER_FG, Keyword: RED_3, Keyword.Constant: BLUE_2, Keyword.Pseudo: BLUE_2, Name: FG_DEFAULT, Name.Class: 'bold ' + ORANGE_3, Name.Constant: 'bold ' + BLUE_2, Name.Decorator: 'bold ' + PURPLE_2, Name.Entity: ORANGE_2, Name.Exception: 'bold ' + ORANGE_3, Name.Function: 'bold ' + PURPLE_2, Name.Label: 'bold ' + BLUE_2, Name.Namespace: RED_3, Name.Property: BLUE_2, Name.Tag: GREEN_1, Name.Variable: BLUE_2, Literal: BLUE_1, Literal.Date: BLUE_2, String: BLUE_1, String.Affix: BLUE_2, String.Delimiter: BLUE_2, String.Escape: BLUE_2, String.Heredoc: BLUE_2, String.Regex: BLUE_2, Number: BLUE_1, Comment: 'italic ' + GRAY_3, Comment.Preproc: 'bold ' + GRAY_3, Comment.Special: 'bold italic ' + GRAY_3, Operator: 'bold ' + RED_3, Generic: FG_DEFAULT, Generic.Deleted: f'bg:{RED_9} {RED_2}', Generic.Emph: 'italic', Generic.Error: RED_2, Generic.Heading: 'bold ' + BLUE_2, Generic.Inserted: f'bg:{GREEN_7} {GREEN_2}', Generic.Output: GRAY_3, Generic.Prompt: GRAY_3, Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Subheading: BLUE_2, Generic.Traceback: RED_3, Generic.Underline: 'underline', Text.Whitespace: FG_SUBTLE}
  }

  class GruvboxDarkStyle {
      + name = 'gruvbox-dark'
      + background_color = '#282828'
      + highlight_color = '#ebdbb2'
      + styles = {Token: '#dddddd', Comment: 'italic #928374', Comment.PreProc: '#8ec07c', Comment.Special: 'bold italic #ebdbb2', Keyword: '#fb4934', Operator.Word: '#fb4934', String: '#b8bb26', String.Escape: '#fe8019', Number: '#d3869b', Name.Builtin: '#fe8019', Name.Variable: '#83a598', Name.Constant: '#d3869b', Name.Class: '#8ec07c', Name.Function: '#8ec07c', Name.Namespace: '#8ec07c', Name.Exception: '#fb4934', Name.Tag: '#8ec07c', Name.Attribute: '#fabd2f', Name.Decorator: '#fb4934', Generic.Heading: 'bold #ebdbb2', Generic.Subheading: 'underline #ebdbb2', Generic.Deleted: 'bg:#fb4934 #282828', Generic.Inserted: 'bg:#b8bb26 #282828', Generic.Error: '#fb4934', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: '#a89984', Generic.Output: '#f2e5bc', Generic.Traceback: '#fb4934', Error: 'bg:#fb4934 #282828'}
  }

  class GruvboxLightStyle {
      + name = 'gruvbox-light'
      + background_color = '#fbf1c7'
      + highlight_color = '#3c3836'
      + styles = {Comment: 'italic #928374', Comment.PreProc: '#427b58', Comment.Special: 'bold italic #3c3836', Keyword: '#9d0006', Operator.Word: '#9d0006', String: '#79740e', String.Escape: '#af3a03', Number: '#8f3f71', Name.Builtin: '#af3a03', Name.Variable: '#076678', Name.Constant: '#8f3f71', Name.Class: '#427b58', Name.Function: '#427b58', Name.Namespace: '#427b58', Name.Exception: '#9d0006', Name.Tag: '#427b58', Name.Attribute: '#b57614', Name.Decorator: '#9d0006', Generic.Heading: 'bold #3c3836', Generic.Subheading: 'underline #3c3836', Generic.Deleted: 'bg:#9d0006 #fbf1c7', Generic.Inserted: 'bg:#79740e #fbf1c7', Generic.Error: '#9d0006', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.Prompt: '#7c6f64', Generic.Output: '#32302f', Generic.Traceback: '#9d0006', Error: 'bg:#9d0006 #fbf1c7'}
  }

  class IgorStyle {
      + name = 'igor'
      + styles = {Comment: 'italic #FF0000', Keyword: '#0000FF', Name.Function: '#C34E00', Name.Decorator: '#CC00A3', Name.Class: '#007575', String: '#009C00'}
  }

  class InkPotStyle {
      + name = 'inkpot'
      + background_color = '#1e1e27'
      + styles = {Text: '#cfbfad', Other: '#cfbfad', Whitespace: '#434357', Comment: '#cd8b00', Comment.Preproc: '#409090', Comment.PreprocFile: 'bg:#404040 #ffcd8b', Comment.Special: '#808bed', Keyword: '#808bed', Keyword.Pseudo: 'nobold', Keyword.Type: '#ff8bff', Operator: '#666666', Punctuation: '#cfbfad', Name: '#cfbfad', Name.Attribute: '#cfbfad', Name.Builtin.Pseudo: '#ffff00', Name.Builtin: '#808bed', Name.Class: '#ff8bff', Name.Constant: '#409090', Name.Decorator: '#409090', Name.Exception: '#ff0000', Name.Function: '#c080d0', Name.Label: '#808bed', Name.Namespace: '#ff0000', Name.Variable: '#cfbfad', String: 'bg:#404040 #ffcd8b', String.Doc: '#808bed', Number: '#f0ad6d', Generic.Heading: 'bold #000080', Generic.Subheading: 'bold #800080', Generic.Deleted: '#A00000', Generic.Inserted: '#00A000', Generic.Error: '#FF0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold #000080', Generic.Output: '#888', Generic.Traceback: '#04D', Error: 'bg:#6e2e2e #ffffff'}
  }

  class LightbulbStyle {
      + name = 'lightbulb'
      + background_color = COLORS['bg']
      + highlight_color = COLORS['gray_3']
      + line_number_color = COLORS['gray_2']
      + line_number_special_color = COLORS['gray_2']
      + styles = {Comment: COLORS['gray_1'], Comment.Hashbang: 'italic ' + COLORS['red_1'], Comment.Preproc: 'bold ' + COLORS['orange_1'], Comment.Special: 'italic ' + COLORS['gray_1'], Error: COLORS['red_1'], Generic.Deleted: f'bg:{COLORS['red_2']} #f88f7f', Generic.Emph: 'italic', Generic.Error: '#f88f7f', Generic.Inserted: f'bg:{COLORS['green_2']} #6ad4af', Generic.Output: COLORS['gray_1'], Generic.Strong: 'bold', Generic.Traceback: COLORS['red_1'], Keyword: COLORS['orange_1'], Keyword.Constant: COLORS['orange_1'], Keyword.Declaration: COLORS['orange_1'], Keyword.Namespace: COLORS['orange_1'], Keyword.Reserved: COLORS['orange_1'], Keyword.Type: COLORS['blue_1'], Literal: COLORS['green_1'], Name: COLORS['white'], Name.Attribute: COLORS['yellow_1'], Name.Builtin: COLORS['yellow_1'], Name.Builtin.Pseudo: '#5CCFE6', Name.Class: COLORS['blue_1'], Name.Constant: COLORS['yellow_1'], Name.Decorator: 'bold italic ' + COLORS['gray_1'], Name.Entity: COLORS['cyan_1'], Name.Exception: COLORS['blue_1'], Name.Function: COLORS['yellow_1'], Name.Function.Magic: COLORS['yellow_1'], Name.Other: COLORS['white'], Name.Property: COLORS['yellow_1'], Name.Tag: '#5CCFE6', Name.Variable: COLORS['white'], Number: COLORS['magenta_1'], Operator: COLORS['orange_1'], Operator.Word: COLORS['orange_1'], Punctuation: COLORS['white'], String: COLORS['green_1'], String.Affix: COLORS['orange_2'], String.Doc: COLORS['gray_1'], String.Escape: COLORS['cyan_1'], String.Interpol: COLORS['cyan_1'], String.Other: COLORS['cyan_1'], String.Regex: COLORS['cyan_1'], String.Symbol: COLORS['magenta_1'], Token: COLORS['white']}
  }

  class LilyPondStyle {
      + name = 'lilypond'
      + web_style_gallery_exclude = True
      + styles = {Token.Text: '', Token.Keyword: 'bold', Token.Comment: 'italic #A3AAB2', Token.String: '#AB0909', Token.String.Escape: '#C46C6C', Token.String.Symbol: 'noinherit', Token.Pitch: '', Token.Number: '#976806', Token.ChordModifier: '#976806', Token.Name.Lvalue: '#08547A', Token.Name.BackslashReference: '#08547A', Token.Name.Builtin.MusicCommand: 'bold #08547A', Token.Name.Builtin.PaperVariable: 'bold #6C5A05', Token.Name.Builtin.HeaderVariable: 'bold #6C5A05', Token.Name.Builtin.MusicFunction: 'bold #08547A', Token.Name.Builtin.Clef: 'bold #08547A', Token.Name.Builtin.Scale: 'bold #08547A', Token.Name.Builtin.RepeatType: '#08547A', Token.Name.Builtin.Dynamic: '#68175A', Token.Name.Builtin.Articulation: '#68175A', Token.Name.Builtin.SchemeFunction: 'bold #A83401', Token.Name.Builtin.SchemeBuiltin: 'bold', Token.Name.Builtin.MarkupCommand: 'bold #831E71', Token.Name.Builtin.Context: 'bold #038B8B', Token.Name.Builtin.ContextProperty: '#038B8B', Token.Name.Builtin.Grob: 'bold #0C7441', Token.Name.Builtin.GrobProperty: '#0C7441', Token.Name.Builtin.Translator: 'bold #6200A4'}
  }

  class LovelaceStyle {
      + name = 'lovelace'
      + styles = {Whitespace: '#a89028', Comment: 'italic #888888', Comment.Hashbang: _CLS_CYAN, Comment.Multiline: '#888888', Comment.Preproc: 'noitalic ' + _LABEL_CYAN, Keyword: _KW_BLUE, Keyword.Constant: 'italic #444444', Keyword.Declaration: 'italic', Keyword.Type: 'italic', Operator: '#666666', Operator.Word: _OW_PURPLE, Punctuation: '#888888', Name.Attribute: _NAME_GREEN, Name.Builtin: _NAME_GREEN, Name.Builtin.Pseudo: 'italic', Name.Class: _CLS_CYAN, Name.Constant: _DOC_ORANGE, Name.Decorator: _CLS_CYAN, Name.Entity: _ESCAPE_LIME, Name.Exception: _EXCEPT_YELLOW, Name.Function: _FUN_BROWN, Name.Function.Magic: _DOC_ORANGE, Name.Label: _LABEL_CYAN, Name.Namespace: _LABEL_CYAN, Name.Tag: _KW_BLUE, Name.Variable: '#b04040', Name.Variable.Global: _EXCEPT_YELLOW, Name.Variable.Magic: _DOC_ORANGE, String: _STR_RED, String.Affix: '#444444', String.Char: _OW_PURPLE, String.Delimiter: _DOC_ORANGE, String.Doc: 'italic ' + _DOC_ORANGE, String.Escape: _ESCAPE_LIME, String.Interpol: 'underline', String.Other: _OW_PURPLE, String.Regex: _OW_PURPLE, Number: '#444444', Generic.Deleted: '#c02828', Generic.Emph: 'italic', Generic.Error: '#c02828', Generic.Heading: '#666666', Generic.Subheading: '#444444', Generic.Inserted: _NAME_GREEN, Generic.Output: '#666666', Generic.Prompt: '#444444', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Traceback: _KW_BLUE, Error: 'bg:' + _OW_PURPLE}
  }

  class ManniStyle {
      + name = 'manni'
      + background_color = '#f0f3f3'
      + styles = {Whitespace: '#bbbbbb', Comment: 'italic #0099FF', Comment.Preproc: 'noitalic #009999', Comment.Special: 'bold', Keyword: 'bold #006699', Keyword.Pseudo: 'nobold', Keyword.Type: '#007788', Operator: '#555555', Operator.Word: 'bold #000000', Name.Builtin: '#336666', Name.Function: '#CC00FF', Name.Class: 'bold #00AA88', Name.Namespace: 'bold #00CCFF', Name.Exception: 'bold #CC0000', Name.Variable: '#003333', Name.Constant: '#336600', Name.Label: '#9999FF', Name.Entity: 'bold #999999', Name.Attribute: '#330099', Name.Tag: 'bold #330099', Name.Decorator: '#9999FF', String: '#CC3300', String.Doc: 'italic', String.Interpol: '#AA0000', String.Escape: 'bold #CC3300', String.Regex: '#33AAAA', String.Symbol: '#FFCC33', String.Other: '#CC3300', Number: '#FF6600', Generic.Heading: 'bold #003300', Generic.Subheading: 'bold #003300', Generic.Deleted: 'border:#CC0000 bg:#FFCCCC', Generic.Inserted: 'border:#00CC00 bg:#CCFFCC', Generic.Error: '#FF0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold #000099', Generic.Output: '#AAAAAA', Generic.Traceback: '#99CC66', Error: 'bg:#FFAAAA #AA0000'}
  }

  class MaterialStyle {
      + name = 'material'
      + dark_teal = '#263238'
      + white = '#FFFFFF'
      + black = '#000000'
      + red = '#FF5370'
      + orange = '#F78C6C'
      + yellow = '#FFCB6B'
      + green = '#C3E88D'
      + cyan = '#89DDFF'
      + blue = '#82AAFF'
      + paleblue = '#B2CCD6'
      + purple = '#C792EA'
      + brown = '#C17E70'
      + pink = '#F07178'
      + violet = '#BB80B3'
      + foreground = '#EEFFFF'
      + faded = '#546E7A'
      + background_color = dark_teal
      + highlight_color = '#2C3B41'
      + line_number_color = '#37474F'
      + line_number_background_color = dark_teal
      + line_number_special_color = '#607A86'
      + line_number_special_background_color = dark_teal
      + styles = {Text: foreground, Escape: cyan, Error: red, Keyword: violet, Keyword.Constant: cyan, Keyword.Declaration: violet, Keyword.Namespace: 'italic ' + cyan, Keyword.Pseudo: cyan, Keyword.Type: violet, Name: foreground, Name.Attribute: violet, Name.Builtin: blue, Name.Builtin.Pseudo: cyan, Name.Class: yellow, Name.Constant: foreground, Name.Decorator: blue, Name.Entity: cyan, Name.Exception: yellow, Name.Function: blue, Name.Function.Magic: blue, Name.Label: blue, Name.Property: yellow, Name.Namespace: yellow, Name.Other: foreground, Name.Tag: red, Name.Variable: cyan, Name.Variable.Class: cyan, Name.Variable.Global: cyan, Name.Variable.Instance: cyan, Name.Variable.Magic: blue, Literal: green, Literal.Date: green, String: green, String.Affix: violet, String.Backtick: green, String.Char: green, String.Delimiter: foreground, String.Doc: 'italic ' + faded, String.Double: green, String.Escape: foreground, String.Heredoc: green, String.Interpol: cyan, String.Other: green, String.Regex: cyan, String.Single: green, String.Symbol: cyan, Number: orange, Operator: cyan, Operator.Word: 'italic ' + cyan, Punctuation: cyan, Comment: 'italic ' + faded, Generic: foreground, Generic.Deleted: red, Generic.Emph: cyan, Generic.Error: red, Generic.Heading: green, Generic.Inserted: green, Generic.Output: faded, Generic.Prompt: yellow, Generic.Strong: red, Generic.EmphStrong: yellow, Generic.Subheading: cyan, Generic.Traceback: red}
  }

  class MonokaiStyle {
      + name = 'monokai'
      + background_color = '#272822'
      + highlight_color = '#49483e'
      + styles = {Token: '#f8f8f2', Whitespace: '', Error: '#ed007e bg:#1e0010', Other: '', Comment: '#959077', Comment.Multiline: '', Comment.Preproc: '', Comment.Single: '', Comment.Special: '', Keyword: '#66d9ef', Keyword.Constant: '', Keyword.Declaration: '', Keyword.Namespace: '#ff4689', Keyword.Pseudo: '', Keyword.Reserved: '', Keyword.Type: '', Operator: '#ff4689', Operator.Word: '', Punctuation: '#f8f8f2', Name: '#f8f8f2', Name.Attribute: '#a6e22e', Name.Builtin: '', Name.Builtin.Pseudo: '', Name.Class: '#a6e22e', Name.Constant: '#66d9ef', Name.Decorator: '#a6e22e', Name.Entity: '', Name.Exception: '#a6e22e', Name.Function: '#a6e22e', Name.Property: '', Name.Label: '', Name.Namespace: '', Name.Other: '#a6e22e', Name.Tag: '#ff4689', Name.Variable: '', Name.Variable.Class: '', Name.Variable.Global: '', Name.Variable.Instance: '', Number: '#ae81ff', Number.Float: '', Number.Hex: '', Number.Integer: '', Number.Integer.Long: '', Number.Oct: '', Literal: '#ae81ff', Literal.Date: '#e6db74', String: '#e6db74', String.Backtick: '', String.Char: '', String.Doc: '', String.Double: '', String.Escape: '#ae81ff', String.Heredoc: '', String.Interpol: '', String.Other: '', String.Regex: '', String.Single: '', String.Symbol: '', Generic: '', Generic.Deleted: '#ff4689', Generic.Emph: 'italic', Generic.Error: '', Generic.Heading: '', Generic.Inserted: '#a6e22e', Generic.Output: '#66d9ef', Generic.Prompt: 'bold #ff4689', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Subheading: '#959077', Generic.Traceback: ''}
  }

  class MurphyStyle {
      + name = 'murphy'
      + styles = {Whitespace: '#bbbbbb', Comment: '#666 italic', Comment.Preproc: '#579 noitalic', Comment.Special: '#c00 bold', Keyword: 'bold #289', Keyword.Pseudo: '#08f', Keyword.Type: '#66f', Operator: '#333', Operator.Word: 'bold #000', Name.Builtin: '#072', Name.Function: 'bold #5ed', Name.Class: 'bold #e9e', Name.Namespace: 'bold #0e84b5', Name.Exception: 'bold #F00', Name.Variable: '#036', Name.Variable.Instance: '#aaf', Name.Variable.Class: '#ccf', Name.Variable.Global: '#f84', Name.Constant: 'bold #5ed', Name.Label: 'bold #970', Name.Entity: '#800', Name.Attribute: '#007', Name.Tag: '#070', Name.Decorator: 'bold #555', String: 'bg:#e0e0ff', String.Char: '#88F bg:', String.Doc: '#D42 bg:', String.Interpol: 'bg:#eee', String.Escape: 'bold #666', String.Regex: 'bg:#e0e0ff #000', String.Symbol: '#fc8 bg:', String.Other: '#f88', Number: 'bold #60E', Number.Integer: 'bold #66f', Number.Float: 'bold #60E', Number.Hex: 'bold #058', Number.Oct: 'bold #40E', Generic.Heading: 'bold #000080', Generic.Subheading: 'bold #800080', Generic.Deleted: '#A00000', Generic.Inserted: '#00A000', Generic.Error: '#FF0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold #c65d09', Generic.Output: '#888', Generic.Traceback: '#04D', Error: '#F00 bg:#FAA'}
  }

  class NativeStyle {
      + name = 'native'
      + background_color = '#202020'
      + highlight_color = '#404040'
      + line_number_color = '#aaaaaa'
      + styles = {Token: '#d0d0d0', Whitespace: '#666666', Comment: 'italic #ababab', Comment.Preproc: 'noitalic bold #ff3a3a', Comment.Special: 'noitalic bold #e50808 bg:#520000', Keyword: 'bold #6ebf26', Keyword.Pseudo: 'nobold', Operator.Word: 'bold #6ebf26', String: '#ed9d13', String.Other: '#ffa500', Number: '#51b2fd', Name.Builtin: '#2fbccd', Name.Variable: '#40ffff', Name.Constant: '#40ffff', Name.Class: 'underline #71adff', Name.Function: '#71adff', Name.Namespace: 'underline #71adff', Name.Exception: '#bbbbbb', Name.Tag: 'bold #6ebf26', Name.Attribute: '#bbbbbb', Name.Decorator: '#ffa500', Generic.Heading: 'bold #ffffff', Generic.Subheading: 'underline #ffffff', Generic.Deleted: '#ff3a3a', Generic.Inserted: '#589819', Generic.Error: '#ff3a3a', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: '#aaaaaa', Generic.Output: '#cccccc', Generic.Traceback: '#ff3a3a', Error: 'bg:#e3d2d2 #a61717'}
  }

  class NordStyle {
      + name = 'nord'
      + line_number_color = '#D8DEE9'
      + line_number_background_color = '#242933'
      + line_number_special_color = '#242933'
      + line_number_special_background_color = '#D8DEE9'
      + background_color = '#2E3440'
      + highlight_color = '#3B4252'
      + styles = {Token: '#d8dee9', Whitespace: '#d8dee9', Punctuation: '#eceff4', Comment: 'italic #616e87', Comment.Preproc: '#5e81ac', Keyword: 'bold #81a1c1', Keyword.Pseudo: 'nobold #81a1c1', Keyword.Type: 'nobold #81a1c1', Operator: 'bold #81a1c1', Operator.Word: 'bold #81a1c1', Name: '#d8dee9', Name.Builtin: '#81a1c1', Name.Function: '#88c0d0', Name.Class: '#8fbcbb', Name.Namespace: '#8fbcbb', Name.Exception: '#bf616a', Name.Variable: '#d8dee9', Name.Constant: '#8fbcbb', Name.Entity: '#d08770', Name.Attribute: '#8fbcbb', Name.Tag: '#81a1c1', Name.Decorator: '#d08770', String: '#a3be8c', String.Doc: '#616e87', String.Interpol: '#a3be8c', String.Escape: '#ebcb8b', String.Regex: '#ebcb8b', String.Symbol: '#a3be8c', String.Other: '#a3be8c', Number: '#b48ead', Generic.Heading: 'bold #88c0d0', Generic.Subheading: 'bold #88c0d0', Generic.Deleted: '#bf616a', Generic.Inserted: '#a3be8c', Generic.Error: '#bf616a', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold #616e88', Generic.Output: '#d8dee9', Generic.Traceback: '#bf616a', Error: '#bf616a', Text: '#d8dee9'}
  }

  class NordDarkerStyle {
      + name = 'nord-darker'
      + line_number_color = '#D8DEE9'
      + line_number_background_color = '#242933'
      + line_number_special_color = '#242933'
      + line_number_special_background_color = '#D8DEE9'
      + background_color = '#242933'
      + highlight_color = '#3B4252'
      + styles = {Token: '#d8dee9', Whitespace: '#d8dee9', Punctuation: '#eceff4', Comment: 'italic #616e87', Comment.Preproc: '#5e81ac', Keyword: 'bold #81a1c1', Keyword.Pseudo: 'nobold #81a1c1', Keyword.Type: 'nobold #81a1c1', Operator: 'bold #81a1c1', Operator.Word: 'bold #81a1c1', Name: '#d8dee9', Name.Builtin: '#81a1c1', Name.Function: '#88c0d0', Name.Class: '#8fbcbb', Name.Namespace: '#8fbcbb', Name.Exception: '#bf616a', Name.Variable: '#d8dee9', Name.Constant: '#8fbcbb', Name.Entity: '#d08770', Name.Attribute: '#8fbcbb', Name.Tag: '#81a1c1', Name.Decorator: '#d08770', String: '#a3be8c', String.Doc: '#616e87', String.Interpol: '#a3be8c', String.Escape: '#ebcb8b', String.Regex: '#ebcb8b', String.Symbol: '#a3be8c', String.Other: '#a3be8c', Number: '#b48ead', Generic.Heading: 'bold #88c0d0', Generic.Subheading: 'bold #88c0d0', Generic.Deleted: '#bf616a', Generic.Inserted: '#a3be8c', Generic.Error: '#bf616a', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.Prompt: 'bold #616e88', Generic.Output: '#d8dee9', Generic.Traceback: '#bf616a', Error: '#bf616a', Text: '#d8dee9'}
  }

  class OneDarkStyle {
      + name = 'one-dark'
      + background_color = '#282C34'
      + styles = {Token: '#ABB2BF', Punctuation: '#ABB2BF', Punctuation.Marker: '#ABB2BF', Keyword: '#C678DD', Keyword.Constant: '#E5C07B', Keyword.Declaration: '#C678DD', Keyword.Namespace: '#C678DD', Keyword.Reserved: '#C678DD', Keyword.Type: '#E5C07B', Name: '#E06C75', Name.Attribute: '#E06C75', Name.Builtin: '#E5C07B', Name.Class: '#E5C07B', Name.Function: 'bold #61AFEF', Name.Function.Magic: 'bold #56B6C2', Name.Other: '#E06C75', Name.Tag: '#E06C75', Name.Decorator: '#61AFEF', Name.Variable.Class: '', String: '#98C379', Number: '#D19A66', Operator: '#56B6C2', Comment: '#7F848E'}
  }

  class ParaisoDarkStyle {
      + name = 'paraiso-dark'
      + background_color = BACKGROUND
      + highlight_color = SELECTION
      + styles = {Text: FOREGROUND, Whitespace: '', Error: RED, Other: '', Comment: COMMENT, Comment.Multiline: '', Comment.Preproc: '', Comment.Single: '', Comment.Special: '', Keyword: PURPLE, Keyword.Constant: '', Keyword.Declaration: '', Keyword.Namespace: AQUA, Keyword.Pseudo: '', Keyword.Reserved: '', Keyword.Type: YELLOW, Operator: AQUA, Operator.Word: '', Punctuation: FOREGROUND, Name: FOREGROUND, Name.Attribute: BLUE, Name.Builtin: '', Name.Builtin.Pseudo: '', Name.Class: YELLOW, Name.Constant: RED, Name.Decorator: AQUA, Name.Entity: '', Name.Exception: RED, Name.Function: BLUE, Name.Property: '', Name.Label: '', Name.Namespace: YELLOW, Name.Other: BLUE, Name.Tag: AQUA, Name.Variable: RED, Name.Variable.Class: '', Name.Variable.Global: '', Name.Variable.Instance: '', Number: ORANGE, Number.Float: '', Number.Hex: '', Number.Integer: '', Number.Integer.Long: '', Number.Oct: '', Literal: ORANGE, Literal.Date: GREEN, String: GREEN, String.Backtick: '', String.Char: FOREGROUND, String.Doc: COMMENT, String.Double: '', String.Escape: ORANGE, String.Heredoc: '', String.Interpol: ORANGE, String.Other: '', String.Regex: '', String.Single: '', String.Symbol: '', Generic: '', Generic.Deleted: RED, Generic.Emph: 'italic', Generic.Error: '', Generic.Heading: 'bold ' + FOREGROUND, Generic.Inserted: GREEN, Generic.Output: '', Generic.Prompt: 'bold ' + COMMENT, Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Subheading: 'bold ' + AQUA, Generic.Traceback: ''}
  }

  class ParaisoLightStyle {
      + name = 'paraiso-light'
      + background_color = BACKGROUND
      + highlight_color = SELECTION
      + styles = {Text: FOREGROUND, Whitespace: '', Error: RED, Other: '', Comment: COMMENT, Comment.Multiline: '', Comment.Preproc: '', Comment.Single: '', Comment.Special: '', Keyword: PURPLE, Keyword.Constant: '', Keyword.Declaration: '', Keyword.Namespace: AQUA, Keyword.Pseudo: '', Keyword.Reserved: '', Keyword.Type: YELLOW, Operator: AQUA, Operator.Word: '', Punctuation: FOREGROUND, Name: FOREGROUND, Name.Attribute: BLUE, Name.Builtin: '', Name.Builtin.Pseudo: '', Name.Class: YELLOW, Name.Constant: RED, Name.Decorator: AQUA, Name.Entity: '', Name.Exception: RED, Name.Function: BLUE, Name.Property: '', Name.Label: '', Name.Namespace: YELLOW, Name.Other: BLUE, Name.Tag: AQUA, Name.Variable: RED, Name.Variable.Class: '', Name.Variable.Global: '', Name.Variable.Instance: '', Number: ORANGE, Number.Float: '', Number.Hex: '', Number.Integer: '', Number.Integer.Long: '', Number.Oct: '', Literal: ORANGE, Literal.Date: GREEN, String: GREEN, String.Backtick: '', String.Char: FOREGROUND, String.Doc: COMMENT, String.Double: '', String.Escape: ORANGE, String.Heredoc: '', String.Interpol: ORANGE, String.Other: '', String.Regex: '', String.Single: '', String.Symbol: '', Generic: '', Generic.Deleted: RED, Generic.Emph: 'italic', Generic.Error: '', Generic.Heading: 'bold ' + FOREGROUND, Generic.Inserted: GREEN, Generic.Output: '', Generic.Prompt: 'bold ' + COMMENT, Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Subheading: 'bold ' + AQUA, Generic.Traceback: ''}
  }

  class PastieStyle {
      + name = 'pastie'
      + styles = {Whitespace: '#bbbbbb', Comment: '#888888', Comment.Preproc: 'bold #cc0000', Comment.Special: 'bg:#fff0f0 bold #cc0000', String: 'bg:#fff0f0 #dd2200', String.Regex: 'bg:#fff0ff #008800', String.Other: 'bg:#f0fff0 #22bb22', String.Symbol: '#aa6600', String.Interpol: '#3333bb', String.Escape: '#0044dd', Operator.Word: '#008800', Keyword: 'bold #008800', Keyword.Pseudo: 'nobold', Keyword.Type: '#888888', Name.Class: 'bold #bb0066', Name.Exception: 'bold #bb0066', Name.Function: 'bold #0066bb', Name.Property: 'bold #336699', Name.Namespace: 'bold #bb0066', Name.Builtin: '#003388', Name.Variable: '#336699', Name.Variable.Class: '#336699', Name.Variable.Instance: '#3333bb', Name.Variable.Global: '#dd7700', Name.Constant: 'bold #003366', Name.Tag: 'bold #bb0066', Name.Attribute: '#336699', Name.Decorator: '#555555', Name.Label: 'italic #336699', Number: 'bold #0000DD', Generic.Heading: '#333', Generic.Subheading: '#666', Generic.Deleted: 'bg:#ffdddd #000000', Generic.Inserted: 'bg:#ddffdd #000000', Generic.Error: '#aa0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: '#555555', Generic.Output: '#888888', Generic.Traceback: '#aa0000', Error: 'bg:#e3d2d2 #a61717'}
  }

  class PerldocStyle {
      + name = 'perldoc'
      + background_color = '#eeeedd'
      + styles = {Whitespace: '#bbbbbb', Comment: '#228B22', Comment.Preproc: '#1e889b', Comment.Special: '#8B008B bold', String: '#CD5555', String.Heredoc: '#1c7e71 italic', String.Regex: '#B452CD', String.Other: '#cb6c20', String.Regex: '#1c7e71', Number: '#B452CD', Operator.Word: '#8B008B', Keyword: '#8B008B bold', Keyword.Type: '#00688B', Name.Class: '#008b45 bold', Name.Exception: '#008b45 bold', Name.Function: '#008b45', Name.Namespace: '#008b45 underline', Name.Variable: '#00688B', Name.Constant: '#00688B', Name.Decorator: '#707a7c', Name.Tag: '#8B008B bold', Name.Attribute: '#658b00', Name.Builtin: '#658b00', Generic.Heading: 'bold #000080', Generic.Subheading: 'bold #800080', Generic.Deleted: '#aa0000', Generic.Inserted: '#00aa00', Generic.Error: '#aa0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: '#555555', Generic.Output: '#888888', Generic.Traceback: '#aa0000', Error: 'bg:#e3d2d2 #a61717'}
  }

  class RainbowDashStyle {
      + name = 'rainbow_dash'
      + background_color = WHITE
      + styles = {Comment: f'italic {BLUE_LIGHT}', Comment.Preproc: 'noitalic', Comment.Special: 'bold', Error: f'bg:{RED} {WHITE}', Generic.Deleted: f'border:{RED_DARK} bg:{RED_LIGHT}', Generic.Emph: 'italic', Generic.Error: RED_BRIGHT, Generic.Heading: f'bold {BLUE}', Generic.Inserted: f'border:{GREEN_NEON} bg:{GREEN_LIGHT}', Generic.Output: GREY, Generic.Prompt: f'bold {BLUE}', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Subheading: f'bold {BLUE}', Generic.Traceback: RED_DARK, Keyword: f'bold {BLUE}', Keyword.Pseudo: 'nobold', Keyword.Type: PURPLE, Name.Attribute: f'italic {BLUE}', Name.Builtin: f'bold {PURPLE}', Name.Class: 'underline', Name.Constant: TURQUOISE, Name.Decorator: f'bold {ORANGE}', Name.Entity: f'bold {PURPLE}', Name.Exception: f'bold {PURPLE}', Name.Function: f'bold {ORANGE}', Name.Tag: f'bold {BLUE}', Number: f'bold {PURPLE}', Operator: BLUE, Operator.Word: 'bold', String: GREEN, String.Doc: 'italic', String.Escape: f'bold {RED_DARK}', String.Other: TURQUOISE, String.Symbol: f'bold {RED_DARK}', Text: GREY_DARK, Whitespace: GREY_LIGHT}
  }

  class RrtStyle {
      + name = 'rrt'
      + background_color = '#000000'
      + highlight_color = '#0000ff'
      + styles = {Token: '#dddddd', Comment: '#00ff00', Name.Function: '#ffff00', Name.Variable: '#eedd82', Name.Constant: '#7fffd4', Keyword: '#ff0000', Operator.Word: '#ff0000', Comment.Preproc: '#e5e5e5', String: '#87ceeb', Keyword.Type: '#ee82ee', Number: '#ff00ff'}
  }

  class SasStyle {
      + name = 'sas'
      + styles = {Whitespace: '#bbbbbb', Comment: 'italic #008800', String: '#800080', Number: 'bold #2c8553', Other: 'bg:#ffffe0', Keyword: '#2c2cff', Keyword.Reserved: 'bold #353580', Keyword.Constant: 'bold', Name.Builtin: '#2c2cff', Name.Function: 'bold italic', Name.Variable: 'bold #2c2cff', Generic: '#2c2cff', Generic.Emph: '#008800', Generic.Error: '#d30202', Error: 'bg:#e3d2d2 #a61717'}
  }

  class SolarizedDarkStyle {
      + name = 'solarized-dark'
      + styles = make_style(DARK_COLORS)
      + background_color = DARK_COLORS['base03']
      + highlight_color = DARK_COLORS['base02']
      + line_number_color = DARK_COLORS['base01']
      + line_number_background_color = DARK_COLORS['base02']
  }

  class SolarizedLightStyle {
      + name = 'solarized-light'
      + styles = make_style(LIGHT_COLORS)
      + background_color = LIGHT_COLORS['base03']
      + highlight_color = LIGHT_COLORS['base02']
      + line_number_color = LIGHT_COLORS['base01']
      + line_number_background_color = LIGHT_COLORS['base02']
  }

  class StarofficeStyle {
      + name = 'staroffice'
      + styles = {Token: '#000080', Comment: '#696969', Error: '#800000', Literal: '#EE0000', Name: '#008000'}
  }

  class StataDarkStyle {
      + name = 'stata-dark'
      + background_color = '#232629'
      + highlight_color = '#49483e'
      + styles = {Token: '#cccccc', Whitespace: '#bbbbbb', Error: 'bg:#e3d2d2 #a61717', String: '#51cc99', Number: '#4FB8CC', Operator: '', Name.Function: '#6a6aff', Name.Other: '#e2828e', Keyword: 'bold #7686bb', Keyword.Constant: '', Comment: 'italic #777777', Name.Variable: 'bold #7AB4DB', Name.Variable.Global: 'bold #BE646C', Generic.Prompt: '#ffffff'}
  }

  class StataLightStyle {
      + name = 'stata-light'
      + styles = {Text: '#111111', Whitespace: '#bbbbbb', Error: 'bg:#e3d2d2 #a61717', String: '#7a2424', Number: '#2c2cff', Operator: '', Name.Function: '#2c2cff', Name.Other: '#be646c', Keyword: 'bold #353580', Keyword.Constant: '', Comment: 'italic #008800', Name.Variable: 'bold #35baba', Name.Variable.Global: 'bold #b5565e'}
  }

  class TangoStyle {
      + name = 'tango'
      + background_color = '#f8f8f8'
      + styles = {Whitespace: '#f8f8f8', Error: '#a40000 border:#ef2929', Other: '#000000', Comment: 'italic #8f5902', Comment.Multiline: 'italic #8f5902', Comment.Preproc: 'italic #8f5902', Comment.Single: 'italic #8f5902', Comment.Special: 'italic #8f5902', Keyword: 'bold #204a87', Keyword.Constant: 'bold #204a87', Keyword.Declaration: 'bold #204a87', Keyword.Namespace: 'bold #204a87', Keyword.Pseudo: 'bold #204a87', Keyword.Reserved: 'bold #204a87', Keyword.Type: 'bold #204a87', Operator: 'bold #ce5c00', Operator.Word: 'bold #204a87', Punctuation: 'bold #000000', Name: '#000000', Name.Attribute: '#c4a000', Name.Builtin: '#204a87', Name.Builtin.Pseudo: '#3465a4', Name.Class: '#000000', Name.Constant: '#000000', Name.Decorator: 'bold #5c35cc', Name.Entity: '#ce5c00', Name.Exception: 'bold #cc0000', Name.Function: '#000000', Name.Property: '#000000', Name.Label: '#f57900', Name.Namespace: '#000000', Name.Other: '#000000', Name.Tag: 'bold #204a87', Name.Variable: '#000000', Name.Variable.Class: '#000000', Name.Variable.Global: '#000000', Name.Variable.Instance: '#000000', Number: 'bold #0000cf', Number.Float: 'bold #0000cf', Number.Hex: 'bold #0000cf', Number.Integer: 'bold #0000cf', Number.Integer.Long: 'bold #0000cf', Number.Oct: 'bold #0000cf', Literal: '#000000', Literal.Date: '#000000', String: '#4e9a06', String.Backtick: '#4e9a06', String.Char: '#4e9a06', String.Doc: 'italic #8f5902', String.Double: '#4e9a06', String.Escape: '#4e9a06', String.Heredoc: '#4e9a06', String.Interpol: '#4e9a06', String.Other: '#4e9a06', String.Regex: '#4e9a06', String.Single: '#4e9a06', String.Symbol: '#4e9a06', Generic: '#000000', Generic.Deleted: '#a40000', Generic.Emph: 'italic #000000', Generic.Error: '#ef2929', Generic.Heading: 'bold #000080', Generic.Inserted: '#00A000', Generic.Output: 'italic #000000', Generic.Prompt: '#8f5902', Generic.Strong: 'bold #000000', Generic.EmphStrong: 'bold italic #000000', Generic.Subheading: 'bold #800080', Generic.Traceback: 'bold #a40000'}
  }

  class TracStyle {
      + name = 'trac'
      + styles = {Whitespace: '#bbbbbb', Comment: 'italic #999988', Comment.Preproc: 'bold noitalic #999999', Comment.Special: 'bold #999999', Operator: 'bold', String: '#bb8844', String.Regex: '#808000', Number: '#009999', Keyword: 'bold', Keyword.Type: '#445588', Name.Builtin: '#999999', Name.Function: 'bold #990000', Name.Class: 'bold #445588', Name.Exception: 'bold #990000', Name.Namespace: '#555555', Name.Variable: '#008080', Name.Constant: '#008080', Name.Tag: '#000080', Name.Attribute: '#008080', Name.Entity: '#800080', Generic.Heading: '#999999', Generic.Subheading: '#aaaaaa', Generic.Deleted: 'bg:#ffdddd #000000', Generic.Inserted: 'bg:#ddffdd #000000', Generic.Error: '#aa0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: '#555555', Generic.Output: '#888888', Generic.Traceback: '#aa0000', Error: 'bg:#e3d2d2 #a61717'}
  }

  class VimStyle {
      + name = 'vim'
      + background_color = '#000000'
      + highlight_color = '#222222'
      + styles = {Token: '#cccccc', Whitespace: '', Comment: '#000080', Comment.Preproc: '', Comment.Special: 'bold #cd0000', Keyword: '#cdcd00', Keyword.Declaration: '#00cd00', Keyword.Namespace: '#cd00cd', Keyword.Pseudo: '', Keyword.Type: '#00cd00', Operator: '#3399cc', Operator.Word: '#cdcd00', Name: '', Name.Class: '#00cdcd', Name.Builtin: '#cd00cd', Name.Exception: 'bold #666699', Name.Variable: '#00cdcd', String: '#cd0000', Number: '#cd00cd', Generic.Heading: 'bold #000080', Generic.Subheading: 'bold #800080', Generic.Deleted: '#cd0000', Generic.Inserted: '#00cd00', Generic.Error: '#FF0000', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold #000080', Generic.Output: '#888', Generic.Traceback: '#04D', Error: 'border:#FF0000'}
  }

  class VisualStudioStyle {
      + name = 'vs'
      + background_color = '#ffffff'
      + styles = {Comment: '#008000', Comment.Preproc: '#0000ff', Keyword: '#0000ff', Operator.Word: '#0000ff', Keyword.Type: '#2b91af', Name.Class: '#2b91af', String: '#a31515', Generic.Heading: 'bold', Generic.Subheading: 'bold', Generic.Emph: 'italic', Generic.Strong: 'bold', Generic.EmphStrong: 'bold italic', Generic.Prompt: 'bold', Error: 'border:#FF0000'}
  }

  class XcodeStyle {
      + name = 'xcode'
      + styles = {Comment: '#177500', Comment.Preproc: '#633820', String: '#C41A16', String.Char: '#2300CE', Operator: '#000000', Keyword: '#A90D91', Name: '#000000', Name.Attribute: '#836C28', Name.Class: '#3F6E75', Name.Function: '#000000', Name.Builtin: '#A90D91', Name.Builtin.Pseudo: '#5B269A', Name.Variable: '#000000', Name.Tag: '#000000', Name.Decorator: '#000000', Name.Label: '#000000', Literal: '#1C01CE', Number: '#1C01CE', Error: '#000000'}
  }

  class ZenburnStyle {
      + name = 'zenburn'
      + background_color = '#3f3f3f'
      + highlight_color = '#484848'
      + line_number_color = '#5d6262'
      + line_number_background_color = '#353535'
      + line_number_special_color = '#7a8080'
      + line_number_special_background_color = '#353535'
      + styles = {Token: '#dcdccc', Error: '#e37170 bold', Keyword: '#efdcbc', Keyword.Type: '#dfdfbf bold', Keyword.Constant: '#dca3a3', Keyword.Declaration: '#f0dfaf', Keyword.Namespace: '#f0dfaf', Name: '#dcdccc', Name.Tag: '#e89393 bold', Name.Entity: '#cfbfaf', Name.Constant: '#dca3a3', Name.Class: '#efef8f', Name.Function: '#efef8f', Name.Builtin: '#efef8f', Name.Builtin.Pseudo: '#dcdccc', Name.Attribute: '#efef8f', Name.Exception: '#c3bf9f bold', Literal: '#9fafaf', String: '#cc9393', String.Doc: '#7f9f7f', String.Interpol: '#dca3a3 bold', Number: '#8cd0d3', Number.Float: '#c0bed1', Operator: '#f0efd0', Punctuation: '#f0efd0', Comment: '#7f9f7f italic', Comment.Preproc: '#dfaf8f bold', Comment.PreprocFile: '#cc9393', Comment.Special: '#dfdfdf bold', Generic: '#ecbcbc bold', Generic.Emph: '#ffffff bold', Generic.Output: '#5b605e bold', Generic.Heading: '#efefef bold', Generic.Deleted: '#c3bf9f bg:#313c36', Generic.Inserted: '#709080 bg:#313c36 bold', Generic.Traceback: '#80d4aa bg:#2f2f2f bold', Generic.Subheading: '#efefef bold'}
  }

  class BaseStyle {
      + result_color: Color
      + decoration_size: int
  --
      - __init__()
      + empty_line(): Text
      + with_decoration(): ConsoleRenderable
      + decorate_class(klass: ConsoleRenderableClass): ConsoleRenderableClass
      + decorate_progress_log_line(line: str, index: int, max_lines: int = -1, total_lines: int = -1): str
      + decorate(console: Console, lines: Iterable[List[Segment]], animation_status: ANIMATION_STATUS = 'no_animation'): Generator[Segment, None, None]
  }

  class FancyStyle {
      - __init__()
      + decorate(console: Console, lines: Iterable[List[Segment]], animation_status: ANIMATION_STATUS = 'no_animation'): Generator[Segment, None, None]
      + empty_line(): Text
  }

  class MinimalStyle {
      - __init__()
      + decorate(console: Console, lines: Iterable[List[Segment]], animation_status: ANIMATION_STATUS = 'no_animation'): Generator[Segment, None, None]
      + empty_line(): Text
  }

  class TaggedStyle {
      - __init__()
      + decorate(console: Console, lines: Iterable[List[Segment]], animation_status: ANIMATION_STATUS = 'no_animation'): Generator[Segment, None, None]
      + decorate_with_animation(console: Console, lines: Iterable[List[Segment]], animation_status: ANIMATION_STATUS = 'no_animation'): Generator[Segment, None, None]
  }

}

package pyproject_hooks {
  class BackendUnavailable {
      - __init__(traceback)
  }

  class BackendInvalid {
      - __init__(backend_name, backend_path, message)
  }

  class HookMissing {
      - __init__(hook_name)
  }

  class UnsupportedOperation {
      - __init__(traceback)
  }

  class BuildBackendHookCaller {
      - __init__(source_dir, build_backend, backend_path = None, runner = None, python_executable = None)
      + subprocess_runner(runner)
      + get_requires_for_build_wheel(config_settings = None)
      + prepare_metadata_for_build_wheel(metadata_directory, config_settings = None, _allow_fallback = True)
      + build_wheel(wheel_directory, config_settings = None, metadata_directory = None)
      + get_requires_for_build_editable(config_settings = None)
      + prepare_metadata_for_build_editable(metadata_directory, config_settings = None, _allow_fallback = True)
      + build_editable(wheel_directory, config_settings = None, metadata_directory = None)
      + get_requires_for_build_sdist(config_settings = None)
      + build_sdist(sdist_directory, config_settings = None)
  }

}

package _in_process {
  class BackendUnavailable {
      - __init__(traceback)
  }

  class BackendInvalid {
      - __init__(message)
  }

  class HookMissing {
      - __init__(hook_name = None)
  }

  class GotUnsupportedOperation {
      - __init__(traceback)
  }

}

package requests {
  class BaseAdapter {
      - __init__()
      + send(request, stream = False, timeout = None, verify = True, cert = None, proxies = None)
      + close()
  }

  class HTTPAdapter {
      - __init__(pool_connections = DEFAULT_POOLSIZE, pool_maxsize = DEFAULT_POOLSIZE, max_retries = DEFAULT_RETRIES, pool_block = DEFAULT_POOLBLOCK)
      + init_poolmanager(connections, maxsize, block = DEFAULT_POOLBLOCK)
      + proxy_manager_for(proxy)
      + cert_verify(conn, url, verify, cert)
      + build_response(req, resp)
      + build_connection_pool_key_attributes(request, verify, cert = None)
      + get_connection_with_tls_context(request, verify, proxies = None, cert = None)
      + get_connection(url, proxies = None)
      + close()
      + request_url(request, proxies)
      + add_headers(request)
      + proxy_headers(proxy)
      + send(request, stream = False, timeout = None, verify = True, cert = None, proxies = None)
  }

  class AuthBase {
  }

  class HTTPBasicAuth {
      - __init__(username, password)
  }

  class HTTPProxyAuth {
  }

  class HTTPDigestAuth {
      - __init__(username, password)
      + init_per_thread_state()
      + build_digest_header(method, url)
      + handle_redirect(r)
      + handle_401(r)
  }

  class MockRequest {
      - __init__(request)
      + get_type()
      + get_host()
      + get_origin_req_host()
      + get_full_url()
      + is_unverifiable()
      + has_header(name)
      + get_header(name, default = None)
      + add_header(key, val)
      + add_unredirected_header(name, value)
      + get_new_headers()
      + unverifiable()
      + origin_req_host()
      + host()
  }

  class MockResponse {
      - __init__(headers)
      + info()
      + getheaders(name)
  }

  class CookieConflictError {
  }

  class RequestsCookieJar {
      + get(name, default = None, domain = None, path = None)
      + set(name, value)
      + iterkeys()
      + keys()
      + itervalues()
      + values()
      + iteritems()
      + items()
      + list_domains()
      + list_paths()
      + multiple_domains()
      + get_dict(domain = None, path = None)
      + set_cookie(cookie)
      + update(other)
      + copy()
      + get_policy()
  }

  class RequestException {
      - __init__()
  }

  class InvalidJSONError {
  }

  class JSONDecodeError {
      - __init__()
  }

  class HTTPError {
  }

  class ConnectionError {
  }

  class ProxyError {
  }

  class SSLError {
  }

  class Timeout {
  }

  class ConnectTimeout {
  }

  class ReadTimeout {
  }

  class URLRequired {
  }

  class TooManyRedirects {
  }

  class MissingSchema {
  }

  class InvalidSchema {
  }

  class InvalidURL {
  }

  class InvalidHeader {
  }

  class InvalidProxyURL {
  }

  class ChunkedEncodingError {
  }

  class ContentDecodingError {
  }

  class StreamConsumedError {
  }

  class RetryError {
  }

  class UnrewindableBodyError {
  }

  class RequestsWarning {
  }

  class FileModeWarning {
  }

  class RequestsDependencyWarning {
  }

  class RequestEncodingMixin {
      + path_url()
  }

  class RequestHooksMixin {
      + register_hook(event, hook)
      + deregister_hook(event, hook)
  }

  class Request {
      - __init__(method = None, url = None, headers = None, files = None, data = None, params = None, auth = None, cookies = None, hooks = None, json = None)
      + prepare()
  }

  class PreparedRequest {
      - __init__()
      + prepare(method = None, url = None, headers = None, files = None, data = None, params = None, auth = None, cookies = None, hooks = None, json = None)
      + copy()
      + prepare_method(method)
      + prepare_url(url, params)
      + prepare_headers(headers)
      + prepare_body(data, files, json = None)
      + prepare_content_length(body)
      + prepare_auth(auth, url = '')
      + prepare_cookies(cookies)
      + prepare_hooks(hooks)
  }

  class Response {
      - __init__()
      + ok()
      + is_redirect()
      + is_permanent_redirect()
      + next()
      + apparent_encoding()
      + iter_content(chunk_size = 1, decode_unicode = False)
      + iter_lines(chunk_size = ITER_CHUNK_SIZE, decode_unicode = False, delimiter = None)
      + content()
      + text()
      + json()
      + links()
      + raise_for_status()
      + close()
  }

  class SessionRedirectMixin {
      + get_redirect_target(resp)
      + should_strip_auth(old_url, new_url)
      + resolve_redirects(resp, req, stream = False, timeout = None, verify = True, cert = None, proxies = None, yield_requests = False)
      + rebuild_auth(prepared_request, response)
      + rebuild_proxies(prepared_request, proxies)
      + rebuild_method(prepared_request, response)
  }

  class Session {
      - __init__()
      + prepare_request(request)
      + request(method, url, params = None, data = None, headers = None, cookies = None, files = None, auth = None, timeout = None, allow_redirects = True, proxies = None, hooks = None, stream = None, verify = None, cert = None, json = None)
      + get(url)
      + options(url)
      + head(url)
      + post(url, data = None, json = None)
      + put(url, data = None)
      + patch(url, data = None)
      + delete(url)
      + send(request)
      + merge_environment_settings(url, proxies, stream, verify, cert)
      + get_adapter(url)
      + close()
      + mount(prefix, adapter)
  }

  class CaseInsensitiveDict {
      - __init__(data = None)
      + lower_items()
      + copy()
  }

  class LookupDict {
      - __init__(name = None)
      + get(key, default = None)
  }

  class BaseAdapter {
      - __init__()
      + send(request, stream = False, timeout = None, verify = True, cert = None, proxies = None)
      + close()
  }

  class HTTPAdapter {
      - __init__(pool_connections = DEFAULT_POOLSIZE, pool_maxsize = DEFAULT_POOLSIZE, max_retries = DEFAULT_RETRIES, pool_block = DEFAULT_POOLBLOCK)
      + init_poolmanager(connections, maxsize, block = DEFAULT_POOLBLOCK)
      + proxy_manager_for(proxy)
      + cert_verify(conn, url, verify, cert)
      + build_response(req, resp)
      + build_connection_pool_key_attributes(request, verify, cert = None)
      + get_connection_with_tls_context(request, verify, proxies = None, cert = None)
      + get_connection(url, proxies = None)
      + close()
      + request_url(request, proxies)
      + add_headers(request)
      + proxy_headers(proxy)
      + send(request, stream = False, timeout = None, verify = True, cert = None, proxies = None)
  }

  class AuthBase {
  }

  class HTTPBasicAuth {
      - __init__(username, password)
  }

  class HTTPProxyAuth {
  }

  class HTTPDigestAuth {
      - __init__(username, password)
      + init_per_thread_state()
      + build_digest_header(method, url)
      + handle_redirect(r)
      + handle_401(r)
  }

  class MockRequest {
      - __init__(request)
      + get_type()
      + get_host()
      + get_origin_req_host()
      + get_full_url()
      + is_unverifiable()
      + has_header(name)
      + get_header(name, default = None)
      + add_header(key, val)
      + add_unredirected_header(name, value)
      + get_new_headers()
      + unverifiable()
      + origin_req_host()
      + host()
  }

  class MockResponse {
      - __init__(headers)
      + info()
      + getheaders(name)
  }

  class CookieConflictError {
  }

  class RequestsCookieJar {
      + get(name, default = None, domain = None, path = None)
      + set(name, value)
      + iterkeys()
      + keys()
      + itervalues()
      + values()
      + iteritems()
      + items()
      + list_domains()
      + list_paths()
      + multiple_domains()
      + get_dict(domain = None, path = None)
      + set_cookie(cookie)
      + update(other)
      + copy()
      + get_policy()
  }

  class RequestException {
      - __init__()
  }

  class InvalidJSONError {
  }

  class JSONDecodeError {
      - __init__()
  }

  class HTTPError {
  }

  class ConnectionError {
  }

  class ProxyError {
  }

  class SSLError {
  }

  class Timeout {
  }

  class ConnectTimeout {
  }

  class ReadTimeout {
  }

  class URLRequired {
  }

  class TooManyRedirects {
  }

  class MissingSchema {
  }

  class InvalidSchema {
  }

  class InvalidURL {
  }

  class InvalidHeader {
  }

  class InvalidProxyURL {
  }

  class ChunkedEncodingError {
  }

  class ContentDecodingError {
  }

  class StreamConsumedError {
  }

  class RetryError {
  }

  class UnrewindableBodyError {
  }

  class RequestsWarning {
  }

  class FileModeWarning {
  }

  class RequestsDependencyWarning {
  }

  class RequestEncodingMixin {
      + path_url()
  }

  class RequestHooksMixin {
      + register_hook(event, hook)
      + deregister_hook(event, hook)
  }

  class Request {
      - __init__(method = None, url = None, headers = None, files = None, data = None, params = None, auth = None, cookies = None, hooks = None, json = None)
      + prepare()
  }

  class PreparedRequest {
      - __init__()
      + prepare(method = None, url = None, headers = None, files = None, data = None, params = None, auth = None, cookies = None, hooks = None, json = None)
      + copy()
      + prepare_method(method)
      + prepare_url(url, params)
      + prepare_headers(headers)
      + prepare_body(data, files, json = None)
      + prepare_content_length(body)
      + prepare_auth(auth, url = '')
      + prepare_cookies(cookies)
      + prepare_hooks(hooks)
  }

  class Response {
      - __init__()
      + ok()
      + is_redirect()
      + is_permanent_redirect()
      + next()
      + apparent_encoding()
      + iter_content(chunk_size = 1, decode_unicode = False)
      + iter_lines(chunk_size = ITER_CHUNK_SIZE, decode_unicode = False, delimiter = None)
      + content()
      + text()
      + json()
      + links()
      + raise_for_status()
      + close()
  }

  class SessionRedirectMixin {
      + get_redirect_target(resp)
      + should_strip_auth(old_url, new_url)
      + resolve_redirects(resp, req, stream = False, timeout = None, verify = True, cert = None, proxies = None, yield_requests = False)
      + rebuild_auth(prepared_request, response)
      + rebuild_proxies(prepared_request, proxies)
      + rebuild_method(prepared_request, response)
  }

  class Session {
      - __init__()
      + prepare_request(request)
      + request(method, url, params = None, data = None, headers = None, cookies = None, files = None, auth = None, timeout = None, allow_redirects = True, proxies = None, hooks = None, stream = None, verify = None, cert = None, json = None)
      + get(url)
      + options(url)
      + head(url)
      + post(url, data = None, json = None)
      + put(url, data = None)
      + patch(url, data = None)
      + delete(url)
      + send(request)
      + merge_environment_settings(url, proxies, stream, verify, cert)
      + get_adapter(url)
      + close()
      + mount(prefix, adapter)
  }

  class CaseInsensitiveDict {
      - __init__(data = None)
      + lower_items()
      + copy()
  }

  class LookupDict {
      - __init__(name = None)
      + get(key, default = None)
  }

}

package rich {
  class RichRenderable {
  }

  class Foo {
  }

  class Align {
      - __init__(renderable: 'RenderableType', align: AlignMethod = 'left', style: Optional[StyleType] = None)
      + {classmethod} left(cls, renderable: 'RenderableType', style: Optional[StyleType] = None): 'Align'
      + {classmethod} center(cls, renderable: 'RenderableType', style: Optional[StyleType] = None): 'Align'
      + {classmethod} right(cls, renderable: 'RenderableType', style: Optional[StyleType] = None): 'Align'
  }

  class VerticalCenter {
      - __init__(renderable: 'RenderableType', style: Optional[StyleType] = None)
  }

  class AnsiDecoder {
      - __init__()
      + decode(terminal_text: str): Iterable[Text]
      + decode_line(line: str): Text
  }

  class Bar {
      - __init__(size: float, begin: float, end: float)
  }

  class Box {
      - __init__(box: str)
      + substitute(options: 'ConsoleOptions', safe: bool = True): 'Box'
      + get_plain_headed_box(): 'Box'
      + get_top(widths: Iterable[int]): str
      + get_row(widths: Iterable[int], level: Literal['head', 'row', 'foot', 'mid'] = 'row', edge: bool = True): str
      + get_bottom(widths: Iterable[int]): str
  }

  class ColorSystem {
      + STANDARD = 1
      + EIGHT_BIT = 2
      + TRUECOLOR = 3
      + WINDOWS = 4
  }

  class ColorType {
      + DEFAULT = 0
      + STANDARD = 1
      + EIGHT_BIT = 2
      + TRUECOLOR = 3
      + WINDOWS = 4
  }

  class ColorParseError {
  }

  class Color {
      + name: str
      + type: ColorType
      + number: Optional[int] = None
      + triplet: Optional[ColorTriplet] = None
  --
      + system(): ColorSystem
      + is_system_defined(): bool
      + is_default(): bool
      + get_truecolor(theme: Optional['TerminalTheme'] = None, foreground: bool = True): ColorTriplet
      + {classmethod} from_ansi(cls, number: int): 'Color'
      + {classmethod} from_triplet(cls, triplet: 'ColorTriplet'): 'Color'
      + {classmethod} from_rgb(cls, red: float, green: float, blue: float): 'Color'
      + {classmethod} default(cls): 'Color'
      + {classmethod} parse(cls, color: str): 'Color'
      + get_ansi_codes(foreground: bool = True): Tuple[str, ...]
      + downgrade(system: ColorSystem): 'Color'
  }

  class ColorTriplet {
      + red: int
      + green: int
      + blue: int
  --
      + hex(): str
      + rgb(): str
      + normalized(): Tuple[float, float, float]
  }

  class Columns {
      - __init__(renderables: Optional[Iterable[RenderableType]] = None, padding: PaddingDimensions = (0, 1))
      + add_renderable(renderable: RenderableType)
  }

  class NoChange {
  }

  class ConsoleDimensions {
      + width: int
      + height: int
  }

  class ConsoleOptions <<dataclass>> {
      + size: ConsoleDimensions
      + legacy_windows: bool
      + min_width: int
      + max_width: int
      + is_terminal: bool
      + encoding: str
      + max_height: int
      + justify: Optional[JustifyMethod] = None
      + overflow: Optional[OverflowMethod] = None
      + no_wrap: Optional[bool] = False
      + highlight: Optional[bool] = None
      + markup: Optional[bool] = None
      + height: Optional[int] = None
  --
      + ascii_only(): bool
      + copy(): 'ConsoleOptions'
      + update(): 'ConsoleOptions'
      + update_width(width: int): 'ConsoleOptions'
      + update_height(height: int): 'ConsoleOptions'
      + reset_height(): 'ConsoleOptions'
      + update_dimensions(width: int, height: int): 'ConsoleOptions'
  }

  class RichCast {
  }

  class ConsoleRenderable {
  }

  class CaptureError {
  }

  class NewLine {
      - __init__(count: int = 1)
  }

  class ScreenUpdate {
      - __init__(lines: List[List[Segment]], x: int, y: int)
  }

  class Capture {
      - __init__(console: 'Console')
      + get(): str
  }

  class ThemeContext {
      - __init__(console: 'Console', theme: Theme, inherit: bool = True)
  }

  class PagerContext {
      - __init__(console: 'Console', pager: Optional[Pager] = None, styles: bool = False, links: bool = False)
  }

  class ScreenContext {
      - __init__(console: 'Console', hide_cursor: bool, style: StyleType = '')
      + update()
  }

  class Group {
      - __init__()
      + renderables(): List['RenderableType']
  }

  class ConsoleThreadLocals <<dataclass>> {
      + theme_stack: ThemeStack
      + buffer: List[Segment] = field(default_factory=list)
      + buffer_index: int = 0
  }

  class RenderHook {
      + process_renderables(renderables: List[ConsoleRenderable]): List[ConsoleRenderable]
  }

  class Console {
      - __init__()
      + file(): IO[str]
      + file(new_file: IO[str])
      + set_live(live: 'Live')
      + clear_live()
      + push_render_hook(hook: RenderHook)
      + pop_render_hook()
      + begin_capture()
      + end_capture(): str
      + push_theme(theme: Theme)
      + pop_theme()
      + use_theme(theme: Theme): ThemeContext
      + color_system(): Optional[str]
      + encoding(): str
      + is_terminal(): bool
      + is_dumb_terminal(): bool
      + options(): ConsoleOptions
      + size(): ConsoleDimensions
      + size(new_size: Tuple[int, int])
      + width(): int
      + width(width: int)
      + height(): int
      + height(height: int)
      + bell()
      + capture(): Capture
      + pager(pager: Optional[Pager] = None, styles: bool = False, links: bool = False): PagerContext
      + line(count: int = 1)
      + clear(home: bool = True)
      + status(status: RenderableType): 'Status'
      + show_cursor(show: bool = True): bool
      + set_alt_screen(enable: bool = True): bool
      + is_alt_screen(): bool
      + set_window_title(title: str): bool
      + screen(hide_cursor: bool = True, style: Optional[StyleType] = None): 'ScreenContext'
      + measure(renderable: RenderableType): Measurement
      + render(renderable: RenderableType, options: Optional[ConsoleOptions] = None): Iterable[Segment]
      + render_lines(renderable: RenderableType, options: Optional[ConsoleOptions] = None): List[List[Segment]]
      + render_str(text: str): 'Text'
      + get_style(name: Union[str, Style]): Style
      + rule(title: TextType = '')
      + control()
      + out()
      + print()
      + print_json(json: Optional[str] = None)
      + update_screen(renderable: RenderableType)
      + update_screen_lines(lines: List[List[Segment]], x: int = 0, y: int = 0)
      + print_exception()
      + log()
      + input(prompt: TextType = ''): str
      + export_text(): str
      + save_text(path: str)
      + export_html(): str
      + save_html(path: str)
      + export_svg(): str
      + save_svg(path: str)
  }

  class Constrain {
      - __init__(renderable: 'RenderableType', width: Optional[int] = 80)
  }

  class Renderables {
      - __init__(renderables: Optional[Iterable['RenderableType']] = None)
      + append(renderable: 'RenderableType')
  }

  class Lines {
      - __init__(lines: Iterable['Text'] = ())
      + append(line: 'Text')
      + extend(lines: Iterable['Text'])
      + pop(index: int = -1): 'Text'
      + justify(console: 'Console', width: int, justify: 'JustifyMethod' = 'left', overflow: 'OverflowMethod' = 'fold')
  }

  class Control {
      - __init__()
      + {classmethod} bell(cls): 'Control'
      + {classmethod} home(cls): 'Control'
      + {classmethod} move(cls, x: int = 0, y: int = 0): 'Control'
      + {classmethod} move_to_column(cls, x: int, y: int = 0): 'Control'
      + {classmethod} move_to(cls, x: int, y: int): 'Control'
      + {classmethod} clear(cls): 'Control'
      + {classmethod} show_cursor(cls, show: bool): 'Control'
      + {classmethod} alt_screen(cls, enable: bool): 'Control'
      + {classmethod} title(cls, title: str): 'Control'
  }

  class NoEmoji {
  }

  class Emoji {
      + VARIANTS = {'text': '︎', 'emoji': '️'}
  --
      - __init__(name: str, style: Union[str, Style] = 'none', variant: Optional[EmojiVariant] = None)
      + {classmethod} replace(cls, text: str): str
  }

  class ConsoleError {
  }

  class StyleError {
  }

  class StyleSyntaxError {
  }

  class MissingStyle {
  }

  class StyleStackError {
  }

  class NotRenderableError {
  }

  class MarkupError {
  }

  class LiveError {
  }

  class NoAltScreen {
  }

  class FileProxy {
      - __init__(console: 'Console', file: IO[str])
      + rich_proxied_file(): IO[str]
      + write(text: str): int
      + flush()
      + fileno(): int
  }

  class Highlighter {
      + highlight(text: Text)
  }

  class NullHighlighter {
      + highlight(text: Text)
  }

  class RegexHighlighter {
      + highlights: List[str] = []
      + base_style: str = ''
  --
      + highlight(text: Text)
  }

  class ReprHighlighter {
      + base_style = 'repr.'
      + highlights = ['(?P<tag_start><)(?P<tag_name>[-\\w.:|]*)(?P<tag_contents>[\\w\\W]*)(?P<tag_end>>)', '(?P<attrib_name>[\\w_]{1,50})=(?P<attrib_value>"?[\\w_]+"?)?', '(?P<brace>[][{}()])', _combine_regex('(?P<ipv4>[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})', '(?P<ipv6>([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})', '(?P<eui64>(?:[0-9A-Fa-f]{1,2}-){7}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{1,2}:){7}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{4}\\.){3}[0-9A-Fa-f]{4})', '(?P<eui48>(?:[0-9A-Fa-f]{1,2}-){5}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{1,2}:){5}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{4}\\.){2}[0-9A-Fa-f]{4})', '(?P<uuid>[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})', '(?P<call>[\\w.]*?)\\(', '\\b(?P<bool_true>True)\\b|\\b(?P<bool_false>False)\\b|\\b(?P<none>None)\\b', '(?P<ellipsis>\\.\\.\\.)', '(?P<number_complex>(?<!\\w)(?:\\-?[0-9]+\\.?[0-9]*(?:e[-+]?\\d+?)?)(?:[-+](?:[0-9]+\\.?[0-9]*(?:e[-+]?\\d+)?))?j)', '(?P<number>(?<!\\w)\\-?[0-9]+\\.?[0-9]*(e[-+]?\\d+?)?\\b|0x[0-9a-fA-F]*)', '(?P<path>\\B(/[-\\w._+]+)*\\/)(?P<filename>[-\\w._+]*)?', '(?<![\\\\\\w])(?P<str>b?\'\'\'.*?(?<!\\\\)\'\'\'|b?\'.*?(?<!\\\\)\'|b?\\"\\"\\".*?(?<!\\\\)\\"\\"\\"|b?\\".*?(?<!\\\\)\\")', '(?P<url>(file|https|http|ws|wss)://[-0-9a-zA-Z$_+!`(),.?/;:&=%#~]*)')]
  }

  class JSONHighlighter {
      + JSON_STR = '(?<![\\\\\\w])(?P<str>b?\\".*?(?<!\\\\)\\")'
      + JSON_WHITESPACE = {' ', '\n', '\r', '\t'}
      + base_style = 'json.'
      + highlights = [_combine_regex('(?P<brace>[\\{\\[\\(\\)\\]\\}])', '\\b(?P<bool_true>true)\\b|\\b(?P<bool_false>false)\\b|\\b(?P<null>null)\\b', '(?P<number>(?<!\\w)\\-?[0-9]+\\.?[0-9]*(e[\\-\\+]?\\d+?)?\\b|0x[0-9a-fA-F]*)', JSON_STR)]
  --
      + highlight(text: Text)
  }

  class ISO8601Highlighter {
      + base_style = 'iso8601.'
      + highlights = ['^(?P<year>[0-9]{4})-(?P<month>1[0-2]|0[1-9])$', '^(?P<date>(?P<year>[0-9]{4})(?P<month>1[0-2]|0[1-9])(?P<day>3[01]|0[1-9]|[12][0-9]))$', '^(?P<date>(?P<year>[0-9]{4})-?(?P<day>36[0-6]|3[0-5][0-9]|[12][0-9]{2}|0[1-9][0-9]|00[1-9]))$', '^(?P<date>(?P<year>[0-9]{4})-?W(?P<week>5[0-3]|[1-4][0-9]|0[1-9]))$', '^(?P<date>(?P<year>[0-9]{4})-?W(?P<week>5[0-3]|[1-4][0-9]|0[1-9])-?(?P<day>[1-7]))$', '^(?P<time>(?P<hour>2[0-3]|[01][0-9]):?(?P<minute>[0-5][0-9]))$', '^(?P<time>(?P<hour>2[0-3]|[01][0-9])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))$', '^(?P<timezone>(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?))$', '^(?P<time>(?P<hour>2[0-3]|[01][0-9])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$', '^(?P<date>(?P<year>[0-9]{4})(?P<hyphen>-)?(?P<month>1[0-2]|0[1-9])(?(hyphen)-)(?P<day>3[01]|0[1-9]|[12][0-9])) (?P<time>(?P<hour>2[0-3]|[01][0-9])(?(hyphen):)(?P<minute>[0-5][0-9])(?(hyphen):)(?P<second>[0-5][0-9]))$', '^(?P<date>(?P<year>-?(?:[1-9][0-9]*)?[0-9]{4})-(?P<month>1[0-2]|0[1-9])-(?P<day>3[01]|0[1-9]|[12][0-9]))(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$', '^(?P<time>(?P<hour>2[0-3]|[01][0-9]):(?P<minute>[0-5][0-9]):(?P<second>[0-5][0-9])(?P<frac>\\.[0-9]+)?)(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$', '^(?P<date>(?P<year>-?(?:[1-9][0-9]*)?[0-9]{4})-(?P<month>1[0-2]|0[1-9])-(?P<day>3[01]|0[1-9]|[12][0-9]))T(?P<time>(?P<hour>2[0-3]|[01][0-9]):(?P<minute>[0-5][0-9]):(?P<second>[0-5][0-9])(?P<ms>\\.[0-9]+)?)(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$']
  }

  class JSON {
      - __init__(json: str, indent: Union[None, int, str] = 2, highlight: bool = True, skip_keys: bool = False, ensure_ascii: bool = False, check_circular: bool = True, allow_nan: bool = True, default: Optional[Callable[[Any], Any]] = None, sort_keys: bool = False)
      + {classmethod} from_data(cls, data, indent: Union[None, int, str] = 2, highlight: bool = True, skip_keys: bool = False, ensure_ascii: bool = False, check_circular: bool = True, allow_nan: bool = True, default: Optional[Callable[[Any], Any]] = None, sort_keys: bool = False): 'JSON'
  }

  class JupyterRenderable {
      - __init__(html: str, text: str)
  }

  class JupyterMixin {
  }

  class LayoutRender {
      + region: Region
      + render: List[List[Segment]]
  }

  class LayoutError {
  }

  class NoSplitter {
  }

  class Splitter {
      + name: str = ''
  --
      + get_tree_icon(): str
      + divide(children: Sequence['Layout'], region: Region): Iterable[Tuple['Layout', Region]]
  }

  class RowSplitter {
      + name = 'row'
  --
      + get_tree_icon(): str
      + divide(children: Sequence['Layout'], region: Region): Iterable[Tuple['Layout', Region]]
  }

  class ColumnSplitter {
      + name = 'column'
  --
      + get_tree_icon(): str
      + divide(children: Sequence['Layout'], region: Region): Iterable[Tuple['Layout', Region]]
  }

  class Layout {
      + splitters = {'row': RowSplitter, 'column': ColumnSplitter}
  --
      - __init__(renderable: Optional[RenderableType] = None)
      + renderable(): RenderableType
      + children(): List['Layout']
      + map(): RenderMap
      + get(name: str): Optional['Layout']
      + tree(): 'Tree'
      + split()
      + add_split()
      + split_row()
      + split_column()
      + unsplit()
      + update(renderable: RenderableType)
      + refresh_screen(console: 'Console', layout_name: str)
      + render(console: Console, options: ConsoleOptions): RenderMap
  }

  class Live {
      - __init__(renderable: Optional[RenderableType] = None)
      + is_started(): bool
      + get_renderable(): RenderableType
      + start(refresh: bool = False)
      + stop()
      + renderable(): RenderableType
      + update(renderable: RenderableType)
      + refresh()
      + process_renderables(renderables: List[ConsoleRenderable]): List[ConsoleRenderable]
  }

  class LiveRender {
      - __init__(renderable: RenderableType, style: StyleType = '', vertical_overflow: VerticalOverflowMethod = 'ellipsis')
      + set_renderable(renderable: RenderableType)
      + position_cursor(): Control
      + restore_cursor(): Control
  }

  class RichHandler {
      + KEYWORDS: ClassVar[Optional[List[str]]] = ['GET', 'POST', 'HEAD', 'PUT', 'DELETE', 'OPTIONS', 'TRACE', 'PATCH']
      + HIGHLIGHTER_CLASS: ClassVar[Type[Highlighter]] = ReprHighlighter
  --
      - __init__(level: Union[int, str] = logging.NOTSET, console: Optional[Console] = None)
      + get_level_text(record: LogRecord): Text
      + emit(record: LogRecord)
      + render_message(record: LogRecord, message: str): 'ConsoleRenderable'
      + render(): 'ConsoleRenderable'
  }

  class Tag {
      + name: str
      + parameters: Optional[str]
  --
      + markup(): str
  }

  class Measurement {
      + minimum: int
      + maximum: int
  --
      + span(): int
      + normalize(): 'Measurement'
      + with_maximum(width: int): 'Measurement'
      + with_minimum(width: int): 'Measurement'
      + clamp(min_width: Optional[int] = None, max_width: Optional[int] = None): 'Measurement'
      + {classmethod} get(cls, console: 'Console', options: 'ConsoleOptions', renderable: 'RenderableType'): 'Measurement'
  }

  class Padding {
      - __init__(renderable: 'RenderableType', pad: 'PaddingDimensions' = (0, 0, 0, 0))
      + {classmethod} indent(cls, renderable: 'RenderableType', level: int): 'Padding'
      + {static} unpack(pad: 'PaddingDimensions'): Tuple[int, int, int, int]
  }

  class Pager {
      + show(content: str)
  }

  class SystemPager {
      + show(content: str)
  }

  class Palette {
      - __init__(colors: Sequence[Tuple[int, int, int]])
      + match(color: Tuple[int, int, int]): int
  }

  class ColorBox {
  }

  class Panel {
      - __init__(renderable: 'RenderableType', box: Box = ROUNDED)
      + {classmethod} fit(cls, renderable: 'RenderableType', box: Box = ROUNDED): 'Panel'
  }

  class RichFormatter {
      + pprint: bool = True
  }

  class Pretty {
      - __init__(_object, highlighter: Optional['HighlighterType'] = None)
  }

  class Node <<dataclass>> {
      + key_repr: str = ''
      + value_repr: str = ''
      + open_brace: str = ''
      + close_brace: str = ''
      + empty: str = ''
      + last: bool = False
      + is_tuple: bool = False
      + is_namedtuple: bool = False
      + children: Optional[List['Node']] = None
      + key_separator: str = ': '
      + separator: str = ', '
  --
      + iter_tokens(): Iterable[str]
      + check_length(start_length: int, max_length: int): bool
      + render(max_width: int = 80, indent_size: int = 4, expand_all: bool = False): str
  }

  class BrokenRepr {
  }

  class StockKeepingUnit {
      + name: str
      + description: str
      + price: float
      + category: str
      + reviews: List[str]
  }

  class Thing {
  }

  class ProgressColumn {
      + max_refresh: Optional[float] = None
  --
      - __init__(table_column: Optional[Column] = None)
      + get_table_column(): Column
      + render(task: 'Task'): RenderableType
  }

  class RenderableColumn {
      - __init__(renderable: RenderableType = '')
      + render(task: 'Task'): RenderableType
  }

  class SpinnerColumn {
      - __init__(spinner_name: str = 'dots', style: Optional[StyleType] = 'progress.spinner', speed: float = 1.0, finished_text: TextType = ' ', table_column: Optional[Column] = None)
      + set_spinner(spinner_name: str, spinner_style: Optional[StyleType] = 'progress.spinner', speed: float = 1.0)
      + render(task: 'Task'): RenderableType
  }

  class TextColumn {
      - __init__(text_format: str, style: StyleType = 'none', justify: JustifyMethod = 'left', markup: bool = True, highlighter: Optional[Highlighter] = None, table_column: Optional[Column] = None)
      + render(task: 'Task'): Text
  }

  class BarColumn {
      - __init__(bar_width: Optional[int] = 40, style: StyleType = 'bar.back', complete_style: StyleType = 'bar.complete', finished_style: StyleType = 'bar.finished', pulse_style: StyleType = 'bar.pulse', table_column: Optional[Column] = None)
      + render(task: 'Task'): ProgressBar
  }

  class TimeElapsedColumn {
      + render(task: 'Task'): Text
  }

  class TaskProgressColumn {
      - __init__(text_format: str = '[progress.percentage]{task.percentage:>3.0f}%', text_format_no_percentage: str = '', style: StyleType = 'none', justify: JustifyMethod = 'left', markup: bool = True, highlighter: Optional[Highlighter] = None, table_column: Optional[Column] = None, show_speed: bool = False)
      + {classmethod} render_speed(cls, speed: Optional[float]): Text
      + render(task: 'Task'): Text
  }

  class TimeRemainingColumn {
      + max_refresh = 0.5
  --
      - __init__(compact: bool = False, elapsed_when_finished: bool = False, table_column: Optional[Column] = None)
      + render(task: 'Task'): Text
  }

  class FileSizeColumn {
      + render(task: 'Task'): Text
  }

  class TotalFileSizeColumn {
      + render(task: 'Task'): Text
  }

  class MofNCompleteColumn {
      - __init__(separator: str = '/', table_column: Optional[Column] = None)
      + render(task: 'Task'): Text
  }

  class DownloadColumn {
      - __init__(binary_units: bool = False, table_column: Optional[Column] = None)
      + render(task: 'Task'): Text
  }

  class TransferSpeedColumn {
      + render(task: 'Task'): Text
  }

  class ProgressSample {
      + timestamp: float
      + completed: float
  }

  class Task <<dataclass>> {
      + id: TaskID
      + description: str
      + total: Optional[float]
      + completed: float
      + finished_time: Optional[float] = None
      + visible: bool = True
      + fields: Dict[str, Any] = field(default_factory=dict)
      + start_time: Optional[float] = field(default=None, init=False, repr=False)
      + stop_time: Optional[float] = field(default=None, init=False, repr=False)
      + finished_speed: Optional[float] = None
  --
      + get_time(): float
      + started(): bool
      + remaining(): Optional[float]
      + elapsed(): Optional[float]
      + finished(): bool
      + percentage(): float
      + speed(): Optional[float]
      + time_remaining(): Optional[float]
  }

  class Progress {
      - __init__()
      + {classmethod} get_default_columns(cls): Tuple[ProgressColumn, ...]
      + console(): Console
      + tasks(): List[Task]
      + task_ids(): List[TaskID]
      + finished(): bool
      + start()
      + stop()
      + track(sequence: Union[Iterable[ProgressType], Sequence[ProgressType]], total: Optional[float] = None, task_id: Optional[TaskID] = None, description: str = 'Working...', update_period: float = 0.1): Iterable[ProgressType]
      + wrap_file(file: BinaryIO, total: Optional[int] = None): BinaryIO
      + open(file: Union[str, 'PathLike[str]', bytes], mode: Literal['rb'], buffering: int = -1, encoding: Optional[str] = None, errors: Optional[str] = None, newline: Optional[str] = None): BinaryIO
      + open(file: Union[str, 'PathLike[str]', bytes], mode: Union[Literal['r'], Literal['rt']], buffering: int = -1, encoding: Optional[str] = None, errors: Optional[str] = None, newline: Optional[str] = None): TextIO
      + open(file: Union[str, 'PathLike[str]', bytes], mode: Union[Literal['rb'], Literal['rt'], Literal['r']] = 'r', buffering: int = -1, encoding: Optional[str] = None, errors: Optional[str] = None, newline: Optional[str] = None): Union[BinaryIO, TextIO]
      + start_task(task_id: TaskID)
      + stop_task(task_id: TaskID)
      + update(task_id: TaskID)
      + reset(task_id: TaskID)
      + advance(task_id: TaskID, advance: float = 1)
      + refresh()
      + get_renderable(): RenderableType
      + get_renderables(): Iterable[RenderableType]
      + make_tasks_table(tasks: Iterable[Task]): Table
      + add_task(description: str, start: bool = True, total: Optional[float] = 100.0, completed: int = 0, visible: bool = True): TaskID
      + remove_task(task_id: TaskID)
  }

  class ProgressBar {
      - __init__(total: Optional[float] = 100.0, completed: float = 0, width: Optional[int] = None, pulse: bool = False, style: StyleType = 'bar.back', complete_style: StyleType = 'bar.complete', finished_style: StyleType = 'bar.finished', pulse_style: StyleType = 'bar.pulse', animation_time: Optional[float] = None)
      + percentage_completed(): Optional[float]
      + update(completed: float, total: Optional[float] = None)
  }

  class PromptError {
  }

  class InvalidResponse {
      - __init__(message: TextType)
  }

  class PromptBase {
      + response_type: type = str
      + validate_error_message = '[prompt.invalid]Please enter a valid value'
      + illegal_choice_message = '[prompt.invalid.choice]Please select one of the available options'
      + prompt_suffix = ': '
      + choices: Optional[List[str]] = None
  --
      - __init__(prompt: TextType = '')
      + {classmethod} ask(cls, prompt: TextType = ''): Union[DefaultType, PromptType]
      + {classmethod} ask(cls, prompt: TextType = ''): PromptType
      + {classmethod} ask(cls, prompt: TextType = ''): Any
      + render_default(default: DefaultType): Text
      + make_prompt(default: DefaultType): Text
      + {classmethod} get_input(cls, console: Console, prompt: TextType, password: bool, stream: Optional[TextIO] = None): str
      + check_choice(value: str): bool
      + process_response(value: str): PromptType
      + on_validate_error(value: str, error: InvalidResponse)
      + pre_prompt()
  }

  class Prompt {
      + response_type = str
  }

  class IntPrompt {
      + response_type = int
      + validate_error_message = '[prompt.invalid]Please enter a valid integer number'
  }

  class FloatPrompt {
      + response_type = float
      + validate_error_message = '[prompt.invalid]Please enter a number'
  }

  class Confirm {
      + response_type = bool
      + validate_error_message = '[prompt.invalid]Please enter Y or N'
      + choices: List[str] = ['y', 'n']
  --
      + render_default(default: DefaultType): Text
      + process_response(value: str): bool
  }

  class Region {
      + x: int
      + y: int
      + width: int
      + height: int
  }

  class ReprError {
  }

  class Foo {
  }

  class Rule {
      - __init__(title: Union[str, Text] = '')
  }

  class Screen {
      + renderable: 'RenderableType'
  --
      - __init__()
  }

  class ControlType {
      + BELL = 1
      + CARRIAGE_RETURN = 2
      + HOME = 3
      + CLEAR = 4
      + SHOW_CURSOR = 5
      + HIDE_CURSOR = 6
      + ENABLE_ALT_SCREEN = 7
      + DISABLE_ALT_SCREEN = 8
      + CURSOR_UP = 9
      + CURSOR_DOWN = 10
      + CURSOR_FORWARD = 11
      + CURSOR_BACKWARD = 12
      + CURSOR_MOVE_TO_COLUMN = 13
      + CURSOR_MOVE_TO = 14
      + ERASE_IN_LINE = 15
      + SET_WINDOW_TITLE = 16
  }

  class Segment {
      + text: str
      + style: Optional[Style] = None
      + control: Optional[Sequence[ControlCode]] = None
  --
      + cell_length(): int
      + is_control(): bool
      + split_cells(cut: int): Tuple['Segment', 'Segment']
      + {classmethod} line(cls): 'Segment'
      + {classmethod} apply_style(cls, segments: Iterable['Segment'], style: Optional[Style] = None, post_style: Optional[Style] = None): Iterable['Segment']
      + {classmethod} filter_control(cls, segments: Iterable['Segment'], is_control: bool = False): Iterable['Segment']
      + {classmethod} split_lines(cls, segments: Iterable['Segment']): Iterable[List['Segment']]
      + {classmethod} split_and_crop_lines(cls, segments: Iterable['Segment'], length: int, style: Optional[Style] = None, pad: bool = True, include_new_lines: bool = True): Iterable[List['Segment']]
      + {classmethod} adjust_line_length(cls, line: List['Segment'], length: int, style: Optional[Style] = None, pad: bool = True): List['Segment']
      + {classmethod} get_line_length(cls, line: List['Segment']): int
      + {classmethod} get_shape(cls, lines: List[List['Segment']]): Tuple[int, int]
      + {classmethod} set_shape(cls, lines: List[List['Segment']], width: int, height: Optional[int] = None, style: Optional[Style] = None, new_lines: bool = False): List[List['Segment']]
      + {classmethod} align_top(cls: Type['Segment'], lines: List[List['Segment']], width: int, height: int, style: Style, new_lines: bool = False): List[List['Segment']]
      + {classmethod} align_bottom(cls: Type['Segment'], lines: List[List['Segment']], width: int, height: int, style: Style, new_lines: bool = False): List[List['Segment']]
      + {classmethod} align_middle(cls: Type['Segment'], lines: List[List['Segment']], width: int, height: int, style: Style, new_lines: bool = False): List[List['Segment']]
      + {classmethod} simplify(cls, segments: Iterable['Segment']): Iterable['Segment']
      + {classmethod} strip_links(cls, segments: Iterable['Segment']): Iterable['Segment']
      + {classmethod} strip_styles(cls, segments: Iterable['Segment']): Iterable['Segment']
      + {classmethod} remove_color(cls, segments: Iterable['Segment']): Iterable['Segment']
      + {classmethod} divide(cls, segments: Iterable['Segment'], cuts: Iterable[int]): Iterable[List['Segment']]
  }

  class Segments {
      - __init__(segments: Iterable[Segment], new_lines: bool = False)
  }

  class SegmentLines {
      - __init__(lines: Iterable[List[Segment]], new_lines: bool = False)
  }

  class Spinner {
      - __init__(name: str, text: 'RenderableType' = '')
      + render(time: float): 'RenderableType'
      + update()
  }

  class Status {
      - __init__(status: RenderableType)
      + renderable(): Spinner
      + console(): 'Console'
      + update(status: Optional[RenderableType] = None)
      + start()
      + stop()
  }

  class Style {
      + STYLE_ATTRIBUTES = {'dim': 'dim', 'd': 'dim', 'bold': 'bold', 'b': 'bold', 'italic': 'italic', 'i': 'italic', 'underline': 'underline', 'u': 'underline', 'blink': 'blink', 'blink2': 'blink2', 'reverse': 'reverse', 'r': 'reverse', 'conceal': 'conceal', 'c': 'conceal', 'strike': 'strike', 's': 'strike', 'underline2': 'underline2', 'uu': 'underline2', 'frame': 'frame', 'encircle': 'encircle', 'overline': 'overline', 'o': 'overline'}
      + bold = _Bit(0)
      + dim = _Bit(1)
      + italic = _Bit(2)
      + underline = _Bit(3)
      + blink = _Bit(4)
      + blink2 = _Bit(5)
      + reverse = _Bit(6)
      + conceal = _Bit(7)
      + strike = _Bit(8)
      + underline2 = _Bit(9)
      + frame = _Bit(10)
      + encircle = _Bit(11)
      + overline = _Bit(12)
  --
      - __init__()
      + {classmethod} null(cls): 'Style'
      + {classmethod} from_color(cls, color: Optional[Color] = None, bgcolor: Optional[Color] = None): 'Style'
      + {classmethod} from_meta(cls, meta: Optional[Dict[str, Any]]): 'Style'
      + {classmethod} on(cls, meta: Optional[Dict[str, Any]] = None): 'Style'
      + link_id(): str
      + {classmethod} normalize(cls, style: str): str
      + {classmethod} pick_first(cls): StyleType
      + color(): Optional[Color]
      + bgcolor(): Optional[Color]
      + link(): Optional[str]
      + transparent_background(): bool
      + background_style(): 'Style'
      + meta(): Dict[str, Any]
      + without_color(): 'Style'
      + {classmethod} parse(cls, style_definition: str): 'Style'
      + get_html_style(theme: Optional[TerminalTheme] = None): str
      + {classmethod} combine(cls, styles: Iterable['Style']): 'Style'
      + {classmethod} chain(cls): 'Style'
      + copy(): 'Style'
      + clear_meta_and_links(): 'Style'
      + update_link(link: Optional[str] = None): 'Style'
      + render(text: str = ''): str
      + test(text: Optional[str] = None)
  }

  class StyleStack {
      - __init__(default_style: 'Style')
      + current(): Style
      + push(style: Style)
      + pop(): Style
  }

  class Styled {
      - __init__(renderable: 'RenderableType', style: 'StyleType')
  }

  class SyntaxTheme {
      + get_style_for_token(token_type: TokenType): Style
      + get_background_style(): Style
  }

  class PygmentsSyntaxTheme {
      - __init__(theme: Union[str, Type[PygmentsStyle]])
      + get_style_for_token(token_type: TokenType): Style
      + get_background_style(): Style
  }

  class ANSISyntaxTheme {
      - __init__(style_map: Dict[TokenType, Style])
      + get_style_for_token(token_type: TokenType): Style
      + get_background_style(): Style
  }

  class Syntax {
      + {classmethod} get_theme(cls, name: Union[str, SyntaxTheme]): SyntaxTheme
      - __init__(code: str, lexer: Union[Lexer, str])
      + {classmethod} from_path(cls, path: str, encoding: str = 'utf-8', lexer: Optional[Union[Lexer, str]] = None, theme: Union[str, SyntaxTheme] = DEFAULT_THEME, dedent: bool = False, line_numbers: bool = False, line_range: Optional[Tuple[int, int]] = None, start_line: int = 1, highlight_lines: Optional[Set[int]] = None, code_width: Optional[int] = None, tab_size: int = 4, word_wrap: bool = False, background_color: Optional[str] = None, indent_guides: bool = False, padding: PaddingDimensions = 0): 'Syntax'
      + {classmethod} guess_lexer(cls, path: str, code: Optional[str] = None): str
      + lexer(): Optional[Lexer]
      + default_lexer(): Lexer
      + highlight(code: str, line_range: Optional[Tuple[Optional[int], Optional[int]]] = None): Text
      + stylize_range(style: StyleType, start: SyntaxPosition, end: SyntaxPosition)
  }

  class Column <<dataclass>> {
      + header: 'RenderableType' = ''
      + footer: 'RenderableType' = ''
      + header_style: StyleType = ''
      + footer_style: StyleType = ''
      + style: StyleType = ''
      + justify: 'JustifyMethod' = 'left'
      + vertical: 'VerticalAlignMethod' = 'top'
      + overflow: 'OverflowMethod' = 'ellipsis'
      + width: Optional[int] = None
      + min_width: Optional[int] = None
      + max_width: Optional[int] = None
      + ratio: Optional[int] = None
      + no_wrap: bool = False
  --
      + copy(): 'Column'
      + cells(): Iterable['RenderableType']
      + flexible(): bool
  }

  class Row <<dataclass>> {
      + style: Optional[StyleType] = None
      + end_section: bool = False
  }

  class Table {
      + columns: List[Column]
      + rows: List[Row]
  --
      - __init__()
      + {classmethod} grid(cls): 'Table'
      + expand(): bool
      + expand(expand: bool)
      + row_count(): int
      + get_row_style(console: 'Console', index: int): StyleType
      + padding(): Tuple[int, int, int, int]
      + padding(padding: PaddingDimensions): 'Table'
      + add_column(header: 'RenderableType' = '', footer: 'RenderableType' = '')
      + add_row()
      + add_section()
  }

  class TerminalTheme {
      - __init__(background: _ColorTuple, foreground: _ColorTuple, normal: List[_ColorTuple], bright: Optional[List[_ColorTuple]] = None)
  }

  class Span {
      + start: int
      + end: int
      + style: Union[str, Style]
  --
      + split(offset: int): Tuple['Span', Optional['Span']]
      + move(offset: int): 'Span'
      + right_crop(offset: int): 'Span'
      + extend(cells: int): 'Span'
  }

  class Text {
      - __init__(text: str = '', style: Union[str, Style] = '')
      + cell_len(): int
      + markup(): str
      + {classmethod} from_markup(cls, text: str): 'Text'
      + {classmethod} from_ansi(cls, text: str): 'Text'
      + {classmethod} styled(cls, text: str, style: StyleType = ''): 'Text'
      + {classmethod} assemble(cls): 'Text'
      + plain(): str
      + plain(new_text: str)
      + spans(): List[Span]
      + spans(spans: List[Span])
      + blank_copy(plain: str = ''): 'Text'
      + copy(): 'Text'
      + stylize(style: Union[str, Style], start: int = 0, end: Optional[int] = None)
      + stylize_before(style: Union[str, Style], start: int = 0, end: Optional[int] = None)
      + apply_meta(meta: Dict[str, Any], start: int = 0, end: Optional[int] = None)
      + on(meta: Optional[Dict[str, Any]] = None): 'Text'
      + remove_suffix(suffix: str)
      + get_style_at_offset(console: 'Console', offset: int): Style
      + extend_style(spaces: int)
      + highlight_regex(re_highlight: str, style: Optional[Union[GetStyleCallable, StyleType]] = None): int
      + highlight_words(words: Iterable[str], style: Union[str, Style]): int
      + rstrip()
      + rstrip_end(size: int)
      + set_length(new_length: int)
      + render(console: 'Console', end: str = ''): Iterable['Segment']
      + join(lines: Iterable['Text']): 'Text'
      + expand_tabs(tab_size: Optional[int] = None)
      + truncate(max_width: int)
      + pad(count: int, character: str = ' ')
      + pad_left(count: int, character: str = ' ')
      + pad_right(count: int, character: str = ' ')
      + align(align: AlignMethod, width: int, character: str = ' ')
      + append(text: Union['Text', str], style: Optional[Union[str, 'Style']] = None): 'Text'
      + append_text(text: 'Text'): 'Text'
      + append_tokens(tokens: Iterable[Tuple[str, Optional[StyleType]]]): 'Text'
      + copy_styles(text: 'Text')
      + split(separator: str = '\n'): Lines
      + divide(offsets: Iterable[int]): Lines
      + right_crop(amount: int = 1)
      + wrap(console: 'Console', width: int): Lines
      + fit(width: int): Lines
      + detect_indentation(): int
      + with_indent_guides(indent_size: Optional[int] = None): 'Text'
  }

  class Theme {
      + styles: Dict[str, Style]
  --
      - __init__(styles: Optional[Mapping[str, StyleType]] = None, inherit: bool = True)
      + config(): str
      + {classmethod} from_file(cls, config_file: IO[str], source: Optional[str] = None, inherit: bool = True): 'Theme'
      + {classmethod} read(cls, path: str, inherit: bool = True, encoding: Optional[str] = None): 'Theme'
  }

  class ThemeStackError {
  }

  class ThemeStack {
      - __init__(theme: Theme)
      + push_theme(theme: Theme, inherit: bool = True)
      + pop_theme()
  }

  class Frame <<dataclass>> {
      + filename: str
      + lineno: int
      + name: str
      + line: str = ''
      + locals: Optional[Dict[str, pretty.Node]] = None
  }

  class Stack <<dataclass>> {
      + exc_type: str
      + exc_value: str
      + syntax_error: Optional[_SyntaxError] = None
      + is_cause: bool = False
      + frames: List[Frame] = field(default_factory=list)
  }

  class Trace <<dataclass>> {
      + stacks: List[Stack]
  }

  class PathHighlighter {
      + highlights = ['(?P<dim>.*/)(?P<bold>.+)']
  }

  class Traceback {
      + LEXERS = {'': 'text', '.py': 'python', '.pxd': 'cython', '.pyx': 'cython', '.pxi': 'pyrex'}
  --
      - __init__(trace: Optional[Trace] = None)
      + {classmethod} from_exception(cls, exc_type: Type[Any], exc_value: BaseException, traceback: Optional[TracebackType]): 'Traceback'
      + {classmethod} extract(cls, exc_type: Type[BaseException], exc_value: BaseException, traceback: Optional[TracebackType]): Trace
  }

  class Tree {
      - __init__(label: RenderableType)
      + add(label: RenderableType): 'Tree'
  }

  class Inspect {
      - __init__(obj)
  }

  class LogRender {
      - __init__(show_time: bool = True, show_level: bool = False, show_path: bool = True, time_format: Union[str, FormatTimeCallable] = '[%x %X]', omit_repeated_times: bool = True, level_width: Optional[int] = 8)
  }

  class NullFile {
      + close()
      + isatty(): bool
      + read(__n: int = 1): str
      + readable(): bool
      + readline(__limit: int = 1): str
      + readlines(__hint: int = 1): List[str]
      + seek(__offset: int, __whence: int = 1): int
      + seekable(): bool
      + tell(): int
      + truncate(__size: Optional[int] = 1): int
      + writable(): bool
      + writelines(__lines: Iterable[str])
      + write(text: str): int
      + flush()
      + fileno(): int
  }

  class Edge {
      + size: Optional[int] = None
      + ratio: int = 1
      + minimum_size: int = 1
  }

  class E <<dataclass>> {
      + size: Optional[int] = None
      + ratio: int = 1
      + minimum_size: int = 1
  }

  class Stack {
      + top(): T
      + push(item: T)
  }

  class LegacyWindowsError {
  }

  class WindowsCoordinates {
      + row: int
      + col: int
  --
      + {classmethod} from_param(cls, value: 'WindowsCoordinates'): COORD
  }

  class CONSOLE_SCREEN_BUFFER_INFO {
  }

  class CONSOLE_CURSOR_INFO {
  }

  class LegacyWindowsTerm {
      + BRIGHT_BIT = 8
      + ANSI_TO_WINDOWS = [0, 4, 2, 6, 1, 5, 3, 7, 8, 12, 10, 14, 9, 13, 11, 15]
  --
      - __init__(file: 'IO[str]')
      + cursor_position(): WindowsCoordinates
      + screen_size(): WindowsCoordinates
      + write_text(text: str)
      + write_styled(text: str, style: Style)
      + move_cursor_to(new_position: WindowsCoordinates)
      + erase_line()
      + erase_end_of_line()
      + erase_start_of_line()
      + move_cursor_up()
      + move_cursor_down()
      + move_cursor_forward()
      + move_cursor_to_column(column: int)
      + move_cursor_backward()
      + hide_cursor()
      + show_cursor()
      + set_title(title: str)
  }

  class WindowsConsoleFeatures <<dataclass>> {
      + vt: bool = False
      + truecolor: bool = False
  }

  class ColorBox {
  }

  class RichRenderable {
  }

  class Foo {
  }

  class Align {
      - __init__(renderable: 'RenderableType', align: AlignMethod = 'left', style: Optional[StyleType] = None)
      + {classmethod} left(cls, renderable: 'RenderableType', style: Optional[StyleType] = None): 'Align'
      + {classmethod} center(cls, renderable: 'RenderableType', style: Optional[StyleType] = None): 'Align'
      + {classmethod} right(cls, renderable: 'RenderableType', style: Optional[StyleType] = None): 'Align'
  }

  class VerticalCenter {
      - __init__(renderable: 'RenderableType', style: Optional[StyleType] = None)
  }

  class AnsiDecoder {
      - __init__()
      + decode(terminal_text: str): Iterable[Text]
      + decode_line(line: str): Text
  }

  class Bar {
      - __init__(size: float, begin: float, end: float)
  }

  class Box {
      - __init__(box: str)
      + substitute(options: 'ConsoleOptions', safe: bool = True): 'Box'
      + get_plain_headed_box(): 'Box'
      + get_top(widths: Iterable[int]): str
      + get_row(widths: Iterable[int], level: Literal['head', 'row', 'foot', 'mid'] = 'row', edge: bool = True): str
      + get_bottom(widths: Iterable[int]): str
  }

  class ColorSystem {
      + STANDARD = 1
      + EIGHT_BIT = 2
      + TRUECOLOR = 3
      + WINDOWS = 4
  }

  class ColorType {
      + DEFAULT = 0
      + STANDARD = 1
      + EIGHT_BIT = 2
      + TRUECOLOR = 3
      + WINDOWS = 4
  }

  class ColorParseError {
  }

  class Color {
      + name: str
      + type: ColorType
      + number: Optional[int] = None
      + triplet: Optional[ColorTriplet] = None
  --
      + system(): ColorSystem
      + is_system_defined(): bool
      + is_default(): bool
      + get_truecolor(theme: Optional['TerminalTheme'] = None, foreground: bool = True): ColorTriplet
      + {classmethod} from_ansi(cls, number: int): 'Color'
      + {classmethod} from_triplet(cls, triplet: 'ColorTriplet'): 'Color'
      + {classmethod} from_rgb(cls, red: float, green: float, blue: float): 'Color'
      + {classmethod} default(cls): 'Color'
      + {classmethod} parse(cls, color: str): 'Color'
      + get_ansi_codes(foreground: bool = True): Tuple[str, ...]
      + downgrade(system: ColorSystem): 'Color'
  }

  class ColorTriplet {
      + red: int
      + green: int
      + blue: int
  --
      + hex(): str
      + rgb(): str
      + normalized(): Tuple[float, float, float]
  }

  class Columns {
      - __init__(renderables: Optional[Iterable[RenderableType]] = None, padding: PaddingDimensions = (0, 1))
      + add_renderable(renderable: RenderableType)
  }

  class NoChange {
  }

  class ConsoleDimensions {
      + width: int
      + height: int
  }

  class ConsoleOptions <<dataclass>> {
      + size: ConsoleDimensions
      + legacy_windows: bool
      + min_width: int
      + max_width: int
      + is_terminal: bool
      + encoding: str
      + max_height: int
      + justify: Optional[JustifyMethod] = None
      + overflow: Optional[OverflowMethod] = None
      + no_wrap: Optional[bool] = False
      + highlight: Optional[bool] = None
      + markup: Optional[bool] = None
      + height: Optional[int] = None
  --
      + ascii_only(): bool
      + copy(): 'ConsoleOptions'
      + update(): 'ConsoleOptions'
      + update_width(width: int): 'ConsoleOptions'
      + update_height(height: int): 'ConsoleOptions'
      + reset_height(): 'ConsoleOptions'
      + update_dimensions(width: int, height: int): 'ConsoleOptions'
  }

  class RichCast {
  }

  class ConsoleRenderable {
  }

  class CaptureError {
  }

  class NewLine {
      - __init__(count: int = 1)
  }

  class ScreenUpdate {
      - __init__(lines: List[List[Segment]], x: int, y: int)
  }

  class Capture {
      - __init__(console: 'Console')
      + get(): str
  }

  class ThemeContext {
      - __init__(console: 'Console', theme: Theme, inherit: bool = True)
  }

  class PagerContext {
      - __init__(console: 'Console', pager: Optional[Pager] = None, styles: bool = False, links: bool = False)
  }

  class ScreenContext {
      - __init__(console: 'Console', hide_cursor: bool, style: StyleType = '')
      + update()
  }

  class Group {
      - __init__()
      + renderables(): List['RenderableType']
  }

  class ConsoleThreadLocals <<dataclass>> {
      + theme_stack: ThemeStack
      + buffer: List[Segment] = field(default_factory=list)
      + buffer_index: int = 0
  }

  class RenderHook {
      + process_renderables(renderables: List[ConsoleRenderable]): List[ConsoleRenderable]
  }

  class Console {
      - __init__()
      + file(): IO[str]
      + file(new_file: IO[str])
      + set_live(live: 'Live')
      + clear_live()
      + push_render_hook(hook: RenderHook)
      + pop_render_hook()
      + begin_capture()
      + end_capture(): str
      + push_theme(theme: Theme)
      + pop_theme()
      + use_theme(theme: Theme): ThemeContext
      + color_system(): Optional[str]
      + encoding(): str
      + is_terminal(): bool
      + is_dumb_terminal(): bool
      + options(): ConsoleOptions
      + size(): ConsoleDimensions
      + size(new_size: Tuple[int, int])
      + width(): int
      + width(width: int)
      + height(): int
      + height(height: int)
      + bell()
      + capture(): Capture
      + pager(pager: Optional[Pager] = None, styles: bool = False, links: bool = False): PagerContext
      + line(count: int = 1)
      + clear(home: bool = True)
      + status(status: RenderableType): 'Status'
      + show_cursor(show: bool = True): bool
      + set_alt_screen(enable: bool = True): bool
      + is_alt_screen(): bool
      + set_window_title(title: str): bool
      + screen(hide_cursor: bool = True, style: Optional[StyleType] = None): 'ScreenContext'
      + measure(renderable: RenderableType): Measurement
      + render(renderable: RenderableType, options: Optional[ConsoleOptions] = None): Iterable[Segment]
      + render_lines(renderable: RenderableType, options: Optional[ConsoleOptions] = None): List[List[Segment]]
      + render_str(text: str): 'Text'
      + get_style(name: Union[str, Style]): Style
      + rule(title: TextType = '')
      + control()
      + out()
      + print()
      + print_json(json: Optional[str] = None)
      + update_screen(renderable: RenderableType)
      + update_screen_lines(lines: List[List[Segment]], x: int = 0, y: int = 0)
      + print_exception()
      + log()
      + on_broken_pipe()
      + input(prompt: TextType = ''): str
      + export_text(): str
      + save_text(path: str)
      + export_html(): str
      + save_html(path: str)
      + export_svg(): str
      + save_svg(path: str)
  }

  class Constrain {
      - __init__(renderable: 'RenderableType', width: Optional[int] = 80)
  }

  class Renderables {
      - __init__(renderables: Optional[Iterable['RenderableType']] = None)
      + append(renderable: 'RenderableType')
  }

  class Lines {
      - __init__(lines: Iterable['Text'] = ())
      + append(line: 'Text')
      + extend(lines: Iterable['Text'])
      + pop(index: int = -1): 'Text'
      + justify(console: 'Console', width: int, justify: 'JustifyMethod' = 'left', overflow: 'OverflowMethod' = 'fold')
  }

  class Control {
      - __init__()
      + {classmethod} bell(cls): 'Control'
      + {classmethod} home(cls): 'Control'
      + {classmethod} move(cls, x: int = 0, y: int = 0): 'Control'
      + {classmethod} move_to_column(cls, x: int, y: int = 0): 'Control'
      + {classmethod} move_to(cls, x: int, y: int): 'Control'
      + {classmethod} clear(cls): 'Control'
      + {classmethod} show_cursor(cls, show: bool): 'Control'
      + {classmethod} alt_screen(cls, enable: bool): 'Control'
      + {classmethod} title(cls, title: str): 'Control'
  }

  class NoEmoji {
  }

  class Emoji {
      + VARIANTS = {'text': '︎', 'emoji': '️'}
  --
      - __init__(name: str, style: Union[str, Style] = 'none', variant: Optional[EmojiVariant] = None)
      + {classmethod} replace(cls, text: str): str
  }

  class ConsoleError {
  }

  class StyleError {
  }

  class StyleSyntaxError {
  }

  class MissingStyle {
  }

  class StyleStackError {
  }

  class NotRenderableError {
  }

  class MarkupError {
  }

  class LiveError {
  }

  class NoAltScreen {
  }

  class FileProxy {
      - __init__(console: 'Console', file: IO[str])
      + rich_proxied_file(): IO[str]
      + write(text: str): int
      + flush()
      + fileno(): int
  }

  class Highlighter {
      + highlight(text: Text)
  }

  class NullHighlighter {
      + highlight(text: Text)
  }

  class RegexHighlighter {
      + highlights: List[str] = []
      + base_style: str = ''
  --
      + highlight(text: Text)
  }

  class ReprHighlighter {
      + base_style = 'repr.'
      + highlights = ['(?P<tag_start><)(?P<tag_name>[-\\w.:|]*)(?P<tag_contents>[\\w\\W]*)(?P<tag_end>>)', '(?P<attrib_name>[\\w_]{1,50})=(?P<attrib_value>"?[\\w_]+"?)?', '(?P<brace>[][{}()])', _combine_regex('(?P<ipv4>[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})', '(?P<ipv6>([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})', '(?P<eui64>(?:[0-9A-Fa-f]{1,2}-){7}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{1,2}:){7}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{4}\\.){3}[0-9A-Fa-f]{4})', '(?P<eui48>(?:[0-9A-Fa-f]{1,2}-){5}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{1,2}:){5}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{4}\\.){2}[0-9A-Fa-f]{4})', '(?P<uuid>[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})', '(?P<call>[\\w.]*?)\\(', '\\b(?P<bool_true>True)\\b|\\b(?P<bool_false>False)\\b|\\b(?P<none>None)\\b', '(?P<ellipsis>\\.\\.\\.)', '(?P<number_complex>(?<!\\w)(?:\\-?[0-9]+\\.?[0-9]*(?:e[-+]?\\d+?)?)(?:[-+](?:[0-9]+\\.?[0-9]*(?:e[-+]?\\d+)?))?j)', '(?P<number>(?<!\\w)\\-?[0-9]+\\.?[0-9]*(e[-+]?\\d+?)?\\b|0x[0-9a-fA-F]*)', '(?P<path>\\B(/[-\\w._+]+)*\\/)(?P<filename>[-\\w._+]*)?', '(?<![\\\\\\w])(?P<str>b?\'\'\'.*?(?<!\\\\)\'\'\'|b?\'.*?(?<!\\\\)\'|b?\\"\\"\\".*?(?<!\\\\)\\"\\"\\"|b?\\".*?(?<!\\\\)\\")', '(?P<url>(file|https|http|ws|wss)://[-0-9a-zA-Z$_+!`(),.?/;:&=%#~@]*)')]
  }

  class JSONHighlighter {
      + JSON_STR = '(?<![\\\\\\w])(?P<str>b?\\".*?(?<!\\\\)\\")'
      + JSON_WHITESPACE = {' ', '\n', '\r', '\t'}
      + base_style = 'json.'
      + highlights = [_combine_regex('(?P<brace>[\\{\\[\\(\\)\\]\\}])', '\\b(?P<bool_true>true)\\b|\\b(?P<bool_false>false)\\b|\\b(?P<null>null)\\b', '(?P<number>(?<!\\w)\\-?[0-9]+\\.?[0-9]*(e[\\-\\+]?\\d+?)?\\b|0x[0-9a-fA-F]*)', JSON_STR)]
  --
      + highlight(text: Text)
  }

  class ISO8601Highlighter {
      + base_style = 'iso8601.'
      + highlights = ['^(?P<year>[0-9]{4})-(?P<month>1[0-2]|0[1-9])$', '^(?P<date>(?P<year>[0-9]{4})(?P<month>1[0-2]|0[1-9])(?P<day>3[01]|0[1-9]|[12][0-9]))$', '^(?P<date>(?P<year>[0-9]{4})-?(?P<day>36[0-6]|3[0-5][0-9]|[12][0-9]{2}|0[1-9][0-9]|00[1-9]))$', '^(?P<date>(?P<year>[0-9]{4})-?W(?P<week>5[0-3]|[1-4][0-9]|0[1-9]))$', '^(?P<date>(?P<year>[0-9]{4})-?W(?P<week>5[0-3]|[1-4][0-9]|0[1-9])-?(?P<day>[1-7]))$', '^(?P<time>(?P<hour>2[0-3]|[01][0-9]):?(?P<minute>[0-5][0-9]))$', '^(?P<time>(?P<hour>2[0-3]|[01][0-9])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))$', '^(?P<timezone>(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?))$', '^(?P<time>(?P<hour>2[0-3]|[01][0-9])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$', '^(?P<date>(?P<year>[0-9]{4})(?P<hyphen>-)?(?P<month>1[0-2]|0[1-9])(?(hyphen)-)(?P<day>3[01]|0[1-9]|[12][0-9])) (?P<time>(?P<hour>2[0-3]|[01][0-9])(?(hyphen):)(?P<minute>[0-5][0-9])(?(hyphen):)(?P<second>[0-5][0-9]))$', '^(?P<date>(?P<year>-?(?:[1-9][0-9]*)?[0-9]{4})-(?P<month>1[0-2]|0[1-9])-(?P<day>3[01]|0[1-9]|[12][0-9]))(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$', '^(?P<time>(?P<hour>2[0-3]|[01][0-9]):(?P<minute>[0-5][0-9]):(?P<second>[0-5][0-9])(?P<frac>\\.[0-9]+)?)(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$', '^(?P<date>(?P<year>-?(?:[1-9][0-9]*)?[0-9]{4})-(?P<month>1[0-2]|0[1-9])-(?P<day>3[01]|0[1-9]|[12][0-9]))T(?P<time>(?P<hour>2[0-3]|[01][0-9]):(?P<minute>[0-5][0-9]):(?P<second>[0-5][0-9])(?P<ms>\\.[0-9]+)?)(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$']
  }

  class JSON {
      - __init__(json: str, indent: Union[None, int, str] = 2, highlight: bool = True, skip_keys: bool = False, ensure_ascii: bool = False, check_circular: bool = True, allow_nan: bool = True, default: Optional[Callable[[Any], Any]] = None, sort_keys: bool = False)
      + {classmethod} from_data(cls, data, indent: Union[None, int, str] = 2, highlight: bool = True, skip_keys: bool = False, ensure_ascii: bool = False, check_circular: bool = True, allow_nan: bool = True, default: Optional[Callable[[Any], Any]] = None, sort_keys: bool = False): 'JSON'
  }

  class JupyterRenderable {
      - __init__(html: str, text: str)
  }

  class JupyterMixin {
  }

  class LayoutRender {
      + region: Region
      + render: List[List[Segment]]
  }

  class LayoutError {
  }

  class NoSplitter {
  }

  class Splitter {
      + name: str = ''
  --
      + get_tree_icon(): str
      + divide(children: Sequence['Layout'], region: Region): Iterable[Tuple['Layout', Region]]
  }

  class RowSplitter {
      + name = 'row'
  --
      + get_tree_icon(): str
      + divide(children: Sequence['Layout'], region: Region): Iterable[Tuple['Layout', Region]]
  }

  class ColumnSplitter {
      + name = 'column'
  --
      + get_tree_icon(): str
      + divide(children: Sequence['Layout'], region: Region): Iterable[Tuple['Layout', Region]]
  }

  class Layout {
      + splitters = {'row': RowSplitter, 'column': ColumnSplitter}
  --
      - __init__(renderable: Optional[RenderableType] = None)
      + renderable(): RenderableType
      + children(): List['Layout']
      + map(): RenderMap
      + get(name: str): Optional['Layout']
      + tree(): 'Tree'
      + split()
      + add_split()
      + split_row()
      + split_column()
      + unsplit()
      + update(renderable: RenderableType)
      + refresh_screen(console: 'Console', layout_name: str)
      + render(console: Console, options: ConsoleOptions): RenderMap
  }

  class Live {
      - __init__(renderable: Optional[RenderableType] = None)
      + is_started(): bool
      + get_renderable(): RenderableType
      + start(refresh: bool = False)
      + stop()
      + renderable(): RenderableType
      + update(renderable: RenderableType)
      + refresh()
      + process_renderables(renderables: List[ConsoleRenderable]): List[ConsoleRenderable]
  }

  class LiveRender {
      - __init__(renderable: RenderableType, style: StyleType = '', vertical_overflow: VerticalOverflowMethod = 'ellipsis')
      + set_renderable(renderable: RenderableType)
      + position_cursor(): Control
      + restore_cursor(): Control
  }

  class RichHandler {
      + KEYWORDS: ClassVar[Optional[List[str]]] = ['GET', 'POST', 'HEAD', 'PUT', 'DELETE', 'OPTIONS', 'TRACE', 'PATCH']
      + HIGHLIGHTER_CLASS: ClassVar[Type[Highlighter]] = ReprHighlighter
  --
      - __init__(level: Union[int, str] = logging.NOTSET, console: Optional[Console] = None)
      + get_level_text(record: LogRecord): Text
      + emit(record: LogRecord)
      + render_message(record: LogRecord, message: str): 'ConsoleRenderable'
      + render(): 'ConsoleRenderable'
  }

  class MarkdownElement {
      + new_line: ClassVar[bool] = True
  --
      + {classmethod} create(cls, markdown: Markdown, token: Token): MarkdownElement
      + on_enter(context: MarkdownContext)
      + on_text(context: MarkdownContext, text: TextType)
      + on_leave(context: MarkdownContext)
      + on_child_close(context: MarkdownContext, child: MarkdownElement): bool
  }

  class UnknownElement {
  }

  class TextElement {
      + style_name = 'none'
  --
      + on_enter(context: MarkdownContext)
      + on_text(context: MarkdownContext, text: TextType)
      + on_leave(context: MarkdownContext)
  }

  class Paragraph {
      + style_name = 'markdown.paragraph'
      + justify: JustifyMethod
  --
      + {classmethod} create(cls, markdown: Markdown, token: Token): Paragraph
      - __init__(justify: JustifyMethod)
  }

  class Heading {
      + {classmethod} create(cls, markdown: Markdown, token: Token): Heading
      + on_enter(context: MarkdownContext)
      - __init__(tag: str)
  }

  class CodeBlock {
      + style_name = 'markdown.code_block'
  --
      + {classmethod} create(cls, markdown: Markdown, token: Token): CodeBlock
      - __init__(lexer_name: str, theme: str)
  }

  class BlockQuote {
      + style_name = 'markdown.block_quote'
  --
      - __init__()
      + on_child_close(context: MarkdownContext, child: MarkdownElement): bool
  }

  class HorizontalRule {
      + new_line = False
  }

  class TableElement {
      - __init__()
      + on_child_close(context: MarkdownContext, child: MarkdownElement): bool
  }

  class TableHeaderElement {
      - __init__()
      + on_child_close(context: MarkdownContext, child: MarkdownElement): bool
  }

  class TableBodyElement {
      - __init__()
      + on_child_close(context: MarkdownContext, child: MarkdownElement): bool
  }

  class TableRowElement {
      - __init__()
      + on_child_close(context: MarkdownContext, child: MarkdownElement): bool
  }

  class TableDataElement {
      + {classmethod} create(cls, markdown: Markdown, token: Token): MarkdownElement
      - __init__(justify: JustifyMethod)
      + on_text(context: MarkdownContext, text: TextType)
  }

  class ListElement {
      + {classmethod} create(cls, markdown: Markdown, token: Token): ListElement
      - __init__(list_type: str, list_start: int | None)
      + on_child_close(context: MarkdownContext, child: MarkdownElement): bool
  }

  class ListItem {
      + style_name = 'markdown.item'
  --
      - __init__()
      + on_child_close(context: MarkdownContext, child: MarkdownElement): bool
      + render_bullet(console: Console, options: ConsoleOptions): RenderResult
      + render_number(console: Console, options: ConsoleOptions, number: int, last_number: int): RenderResult
  }

  class Link {
      + {classmethod} create(cls, markdown: Markdown, token: Token): MarkdownElement
      - __init__(text: str, href: str)
  }

  class ImageItem {
      + new_line = False
  --
      + {classmethod} create(cls, markdown: Markdown, token: Token): MarkdownElement
      - __init__(destination: str, hyperlinks: bool)
      + on_enter(context: MarkdownContext)
  }

  class MarkdownContext {
      - __init__(console: Console, options: ConsoleOptions, style: Style, inline_code_lexer: str | None = None, inline_code_theme: str = 'monokai')
      + current_style(): Style
      + on_text(text: str, node_type: str)
      + enter_style(style_name: str | Style): Style
      + leave_style(): Style
  }

  class Markdown {
      + elements: ClassVar[dict[str, type[MarkdownElement]]] = {'paragraph_open': Paragraph, 'heading_open': Heading, 'fence': CodeBlock, 'code_block': CodeBlock, 'blockquote_open': BlockQuote, 'hr': HorizontalRule, 'bullet_list_open': ListElement, 'ordered_list_open': ListElement, 'list_item_open': ListItem, 'image': ImageItem, 'table_open': TableElement, 'tbody_open': TableBodyElement, 'thead_open': TableHeaderElement, 'tr_open': TableRowElement, 'td_open': TableDataElement, 'th_open': TableDataElement}
      + inlines = {'em', 'strong', 'code', 's'}
  --
      - __init__(markup: str, code_theme: str = 'monokai', justify: JustifyMethod | None = None, style: str | Style = 'none', hyperlinks: bool = True, inline_code_lexer: str | None = None, inline_code_theme: str | None = None)
  }

  class Tag {
      + name: str
      + parameters: Optional[str]
  --
      + markup(): str
  }

  class Measurement {
      + minimum: int
      + maximum: int
  --
      + span(): int
      + normalize(): 'Measurement'
      + with_maximum(width: int): 'Measurement'
      + with_minimum(width: int): 'Measurement'
      + clamp(min_width: Optional[int] = None, max_width: Optional[int] = None): 'Measurement'
      + {classmethod} get(cls, console: 'Console', options: 'ConsoleOptions', renderable: 'RenderableType'): 'Measurement'
  }

  class Padding {
      - __init__(renderable: 'RenderableType', pad: 'PaddingDimensions' = (0, 0, 0, 0))
      + {classmethod} indent(cls, renderable: 'RenderableType', level: int): 'Padding'
      + {static} unpack(pad: 'PaddingDimensions'): Tuple[int, int, int, int]
  }

  class Pager {
      + show(content: str)
  }

  class SystemPager {
      + show(content: str)
  }

  class Palette {
      - __init__(colors: Sequence[Tuple[int, int, int]])
      + match(color: Tuple[int, int, int]): int
  }

  class ColorBox {
  }

  class Panel {
      - __init__(renderable: 'RenderableType', box: Box = ROUNDED)
      + {classmethod} fit(cls, renderable: 'RenderableType', box: Box = ROUNDED): 'Panel'
  }

  class RichFormatter {
      + pprint: bool = True
  }

  class Pretty {
      - __init__(_object, highlighter: Optional['HighlighterType'] = None)
  }

  class Node <<dataclass>> {
      + key_repr: str = ''
      + value_repr: str = ''
      + open_brace: str = ''
      + close_brace: str = ''
      + empty: str = ''
      + last: bool = False
      + is_tuple: bool = False
      + is_namedtuple: bool = False
      + children: Optional[List['Node']] = None
      + key_separator: str = ': '
      + separator: str = ', '
  --
      + iter_tokens(): Iterable[str]
      + check_length(start_length: int, max_length: int): bool
      + render(max_width: int = 80, indent_size: int = 4, expand_all: bool = False): str
  }

  class BrokenRepr {
  }

  class StockKeepingUnit {
      + name: str
      + description: str
      + price: float
      + category: str
      + reviews: List[str]
  }

  class Thing {
  }

  class ProgressColumn {
      + max_refresh: Optional[float] = None
  --
      - __init__(table_column: Optional[Column] = None)
      + get_table_column(): Column
      + render(task: 'Task'): RenderableType
  }

  class RenderableColumn {
      - __init__(renderable: RenderableType = '')
      + render(task: 'Task'): RenderableType
  }

  class SpinnerColumn {
      - __init__(spinner_name: str = 'dots', style: Optional[StyleType] = 'progress.spinner', speed: float = 1.0, finished_text: TextType = ' ', table_column: Optional[Column] = None)
      + set_spinner(spinner_name: str, spinner_style: Optional[StyleType] = 'progress.spinner', speed: float = 1.0)
      + render(task: 'Task'): RenderableType
  }

  class TextColumn {
      - __init__(text_format: str, style: StyleType = 'none', justify: JustifyMethod = 'left', markup: bool = True, highlighter: Optional[Highlighter] = None, table_column: Optional[Column] = None)
      + render(task: 'Task'): Text
  }

  class BarColumn {
      - __init__(bar_width: Optional[int] = 40, style: StyleType = 'bar.back', complete_style: StyleType = 'bar.complete', finished_style: StyleType = 'bar.finished', pulse_style: StyleType = 'bar.pulse', table_column: Optional[Column] = None)
      + render(task: 'Task'): ProgressBar
  }

  class TimeElapsedColumn {
      + render(task: 'Task'): Text
  }

  class TaskProgressColumn {
      - __init__(text_format: str = '[progress.percentage]{task.percentage:>3.0f}%', text_format_no_percentage: str = '', style: StyleType = 'none', justify: JustifyMethod = 'left', markup: bool = True, highlighter: Optional[Highlighter] = None, table_column: Optional[Column] = None, show_speed: bool = False)
      + {classmethod} render_speed(cls, speed: Optional[float]): Text
      + render(task: 'Task'): Text
  }

  class TimeRemainingColumn {
      + max_refresh = 0.5
  --
      - __init__(compact: bool = False, elapsed_when_finished: bool = False, table_column: Optional[Column] = None)
      + render(task: 'Task'): Text
  }

  class FileSizeColumn {
      + render(task: 'Task'): Text
  }

  class TotalFileSizeColumn {
      + render(task: 'Task'): Text
  }

  class MofNCompleteColumn {
      - __init__(separator: str = '/', table_column: Optional[Column] = None)
      + render(task: 'Task'): Text
  }

  class DownloadColumn {
      - __init__(binary_units: bool = False, table_column: Optional[Column] = None)
      + render(task: 'Task'): Text
  }

  class TransferSpeedColumn {
      + render(task: 'Task'): Text
  }

  class ProgressSample {
      + timestamp: float
      + completed: float
  }

  class Task <<dataclass>> {
      + id: TaskID
      + description: str
      + total: Optional[float]
      + completed: float
      + finished_time: Optional[float] = None
      + visible: bool = True
      + fields: Dict[str, Any] = field(default_factory=dict)
      + start_time: Optional[float] = field(default=None, init=False, repr=False)
      + stop_time: Optional[float] = field(default=None, init=False, repr=False)
      + finished_speed: Optional[float] = None
  --
      + get_time(): float
      + started(): bool
      + remaining(): Optional[float]
      + elapsed(): Optional[float]
      + finished(): bool
      + percentage(): float
      + speed(): Optional[float]
      + time_remaining(): Optional[float]
  }

  class Progress {
      - __init__()
      + {classmethod} get_default_columns(cls): Tuple[ProgressColumn, ...]
      + console(): Console
      + tasks(): List[Task]
      + task_ids(): List[TaskID]
      + finished(): bool
      + start()
      + stop()
      + track(sequence: Union[Iterable[ProgressType], Sequence[ProgressType]], total: Optional[float] = None, completed: int = 0, task_id: Optional[TaskID] = None, description: str = 'Working...', update_period: float = 0.1): Iterable[ProgressType]
      + wrap_file(file: BinaryIO, total: Optional[int] = None): BinaryIO
      + open(file: Union[str, 'PathLike[str]', bytes], mode: Literal['rb'], buffering: int = -1, encoding: Optional[str] = None, errors: Optional[str] = None, newline: Optional[str] = None): BinaryIO
      + open(file: Union[str, 'PathLike[str]', bytes], mode: Union[Literal['r'], Literal['rt']], buffering: int = -1, encoding: Optional[str] = None, errors: Optional[str] = None, newline: Optional[str] = None): TextIO
      + open(file: Union[str, 'PathLike[str]', bytes], mode: Union[Literal['rb'], Literal['rt'], Literal['r']] = 'r', buffering: int = -1, encoding: Optional[str] = None, errors: Optional[str] = None, newline: Optional[str] = None): Union[BinaryIO, TextIO]
      + start_task(task_id: TaskID)
      + stop_task(task_id: TaskID)
      + update(task_id: TaskID)
      + reset(task_id: TaskID)
      + advance(task_id: TaskID, advance: float = 1)
      + refresh()
      + get_renderable(): RenderableType
      + get_renderables(): Iterable[RenderableType]
      + make_tasks_table(tasks: Iterable[Task]): Table
      + add_task(description: str, start: bool = True, total: Optional[float] = 100.0, completed: int = 0, visible: bool = True): TaskID
      + remove_task(task_id: TaskID)
  }

  class ProgressBar {
      - __init__(total: Optional[float] = 100.0, completed: float = 0, width: Optional[int] = None, pulse: bool = False, style: StyleType = 'bar.back', complete_style: StyleType = 'bar.complete', finished_style: StyleType = 'bar.finished', pulse_style: StyleType = 'bar.pulse', animation_time: Optional[float] = None)
      + percentage_completed(): Optional[float]
      + update(completed: float, total: Optional[float] = None)
  }

  class PromptError {
  }

  class InvalidResponse {
      - __init__(message: TextType)
  }

  class PromptBase {
      + response_type: type = str
      + validate_error_message = '[prompt.invalid]Please enter a valid value'
      + illegal_choice_message = '[prompt.invalid.choice]Please select one of the available options'
      + prompt_suffix = ': '
      + choices: Optional[List[str]] = None
  --
      - __init__(prompt: TextType = '')
      + {classmethod} ask(cls, prompt: TextType = ''): Union[DefaultType, PromptType]
      + {classmethod} ask(cls, prompt: TextType = ''): PromptType
      + {classmethod} ask(cls, prompt: TextType = ''): Any
      + render_default(default: DefaultType): Text
      + make_prompt(default: DefaultType): Text
      + {classmethod} get_input(cls, console: Console, prompt: TextType, password: bool, stream: Optional[TextIO] = None): str
      + check_choice(value: str): bool
      + process_response(value: str): PromptType
      + on_validate_error(value: str, error: InvalidResponse)
      + pre_prompt()
  }

  class Prompt {
      + response_type = str
  }

  class IntPrompt {
      + response_type = int
      + validate_error_message = '[prompt.invalid]Please enter a valid integer number'
  }

  class FloatPrompt {
      + response_type = float
      + validate_error_message = '[prompt.invalid]Please enter a number'
  }

  class Confirm {
      + response_type = bool
      + validate_error_message = '[prompt.invalid]Please enter Y or N'
      + choices: List[str] = ['y', 'n']
  --
      + render_default(default: DefaultType): Text
      + process_response(value: str): bool
  }

  class Region {
      + x: int
      + y: int
      + width: int
      + height: int
  }

  class ReprError {
  }

  class Foo {
  }

  class Rule {
      - __init__(title: Union[str, Text] = '')
  }

  class Screen {
      + renderable: 'RenderableType'
  --
      - __init__()
  }

  class ControlType {
      + BELL = 1
      + CARRIAGE_RETURN = 2
      + HOME = 3
      + CLEAR = 4
      + SHOW_CURSOR = 5
      + HIDE_CURSOR = 6
      + ENABLE_ALT_SCREEN = 7
      + DISABLE_ALT_SCREEN = 8
      + CURSOR_UP = 9
      + CURSOR_DOWN = 10
      + CURSOR_FORWARD = 11
      + CURSOR_BACKWARD = 12
      + CURSOR_MOVE_TO_COLUMN = 13
      + CURSOR_MOVE_TO = 14
      + ERASE_IN_LINE = 15
      + SET_WINDOW_TITLE = 16
  }

  class Segment {
      + text: str
      + style: Optional[Style] = None
      + control: Optional[Sequence[ControlCode]] = None
  --
      + cell_length(): int
      + is_control(): bool
      + split_cells(cut: int): Tuple['Segment', 'Segment']
      + {classmethod} line(cls): 'Segment'
      + {classmethod} apply_style(cls, segments: Iterable['Segment'], style: Optional[Style] = None, post_style: Optional[Style] = None): Iterable['Segment']
      + {classmethod} filter_control(cls, segments: Iterable['Segment'], is_control: bool = False): Iterable['Segment']
      + {classmethod} split_lines(cls, segments: Iterable['Segment']): Iterable[List['Segment']]
      + {classmethod} split_and_crop_lines(cls, segments: Iterable['Segment'], length: int, style: Optional[Style] = None, pad: bool = True, include_new_lines: bool = True): Iterable[List['Segment']]
      + {classmethod} adjust_line_length(cls, line: List['Segment'], length: int, style: Optional[Style] = None, pad: bool = True): List['Segment']
      + {classmethod} get_line_length(cls, line: List['Segment']): int
      + {classmethod} get_shape(cls, lines: List[List['Segment']]): Tuple[int, int]
      + {classmethod} set_shape(cls, lines: List[List['Segment']], width: int, height: Optional[int] = None, style: Optional[Style] = None, new_lines: bool = False): List[List['Segment']]
      + {classmethod} align_top(cls: Type['Segment'], lines: List[List['Segment']], width: int, height: int, style: Style, new_lines: bool = False): List[List['Segment']]
      + {classmethod} align_bottom(cls: Type['Segment'], lines: List[List['Segment']], width: int, height: int, style: Style, new_lines: bool = False): List[List['Segment']]
      + {classmethod} align_middle(cls: Type['Segment'], lines: List[List['Segment']], width: int, height: int, style: Style, new_lines: bool = False): List[List['Segment']]
      + {classmethod} simplify(cls, segments: Iterable['Segment']): Iterable['Segment']
      + {classmethod} strip_links(cls, segments: Iterable['Segment']): Iterable['Segment']
      + {classmethod} strip_styles(cls, segments: Iterable['Segment']): Iterable['Segment']
      + {classmethod} remove_color(cls, segments: Iterable['Segment']): Iterable['Segment']
      + {classmethod} divide(cls, segments: Iterable['Segment'], cuts: Iterable[int]): Iterable[List['Segment']]
  }

  class Segments {
      - __init__(segments: Iterable[Segment], new_lines: bool = False)
  }

  class SegmentLines {
      - __init__(lines: Iterable[List[Segment]], new_lines: bool = False)
  }

  class Spinner {
      - __init__(name: str, text: 'RenderableType' = '')
      + render(time: float): 'RenderableType'
      + update()
  }

  class Status {
      - __init__(status: RenderableType)
      + renderable(): Spinner
      + console(): 'Console'
      + update(status: Optional[RenderableType] = None)
      + start()
      + stop()
  }

  class Style {
      + STYLE_ATTRIBUTES = {'dim': 'dim', 'd': 'dim', 'bold': 'bold', 'b': 'bold', 'italic': 'italic', 'i': 'italic', 'underline': 'underline', 'u': 'underline', 'blink': 'blink', 'blink2': 'blink2', 'reverse': 'reverse', 'r': 'reverse', 'conceal': 'conceal', 'c': 'conceal', 'strike': 'strike', 's': 'strike', 'underline2': 'underline2', 'uu': 'underline2', 'frame': 'frame', 'encircle': 'encircle', 'overline': 'overline', 'o': 'overline'}
      + bold = _Bit(0)
      + dim = _Bit(1)
      + italic = _Bit(2)
      + underline = _Bit(3)
      + blink = _Bit(4)
      + blink2 = _Bit(5)
      + reverse = _Bit(6)
      + conceal = _Bit(7)
      + strike = _Bit(8)
      + underline2 = _Bit(9)
      + frame = _Bit(10)
      + encircle = _Bit(11)
      + overline = _Bit(12)
  --
      - __init__()
      + {classmethod} null(cls): 'Style'
      + {classmethod} from_color(cls, color: Optional[Color] = None, bgcolor: Optional[Color] = None): 'Style'
      + {classmethod} from_meta(cls, meta: Optional[Dict[str, Any]]): 'Style'
      + {classmethod} on(cls, meta: Optional[Dict[str, Any]] = None): 'Style'
      + link_id(): str
      + {classmethod} normalize(cls, style: str): str
      + {classmethod} pick_first(cls): StyleType
      + color(): Optional[Color]
      + bgcolor(): Optional[Color]
      + link(): Optional[str]
      + transparent_background(): bool
      + background_style(): 'Style'
      + meta(): Dict[str, Any]
      + without_color(): 'Style'
      + {classmethod} parse(cls, style_definition: str): 'Style'
      + get_html_style(theme: Optional[TerminalTheme] = None): str
      + {classmethod} combine(cls, styles: Iterable['Style']): 'Style'
      + {classmethod} chain(cls): 'Style'
      + copy(): 'Style'
      + clear_meta_and_links(): 'Style'
      + update_link(link: Optional[str] = None): 'Style'
      + render(text: str = ''): str
      + test(text: Optional[str] = None)
  }

  class StyleStack {
      - __init__(default_style: 'Style')
      + current(): Style
      + push(style: Style)
      + pop(): Style
  }

  class Styled {
      - __init__(renderable: 'RenderableType', style: 'StyleType')
  }

  class SyntaxTheme {
      + get_style_for_token(token_type: TokenType): Style
      + get_background_style(): Style
  }

  class PygmentsSyntaxTheme {
      - __init__(theme: Union[str, Type[PygmentsStyle]])
      + get_style_for_token(token_type: TokenType): Style
      + get_background_style(): Style
  }

  class ANSISyntaxTheme {
      - __init__(style_map: Dict[TokenType, Style])
      + get_style_for_token(token_type: TokenType): Style
      + get_background_style(): Style
  }

  class Syntax {
      + {classmethod} get_theme(cls, name: Union[str, SyntaxTheme]): SyntaxTheme
      - __init__(code: str, lexer: Union[Lexer, str])
      + {classmethod} from_path(cls, path: str, encoding: str = 'utf-8', lexer: Optional[Union[Lexer, str]] = None, theme: Union[str, SyntaxTheme] = DEFAULT_THEME, dedent: bool = False, line_numbers: bool = False, line_range: Optional[Tuple[int, int]] = None, start_line: int = 1, highlight_lines: Optional[Set[int]] = None, code_width: Optional[int] = None, tab_size: int = 4, word_wrap: bool = False, background_color: Optional[str] = None, indent_guides: bool = False, padding: PaddingDimensions = 0): 'Syntax'
      + {classmethod} guess_lexer(cls, path: str, code: Optional[str] = None): str
      + lexer(): Optional[Lexer]
      + default_lexer(): Lexer
      + highlight(code: str, line_range: Optional[Tuple[Optional[int], Optional[int]]] = None): Text
      + stylize_range(style: StyleType, start: SyntaxPosition, end: SyntaxPosition, style_before: bool = False)
  }

  class Column <<dataclass>> {
      + header: 'RenderableType' = ''
      + footer: 'RenderableType' = ''
      + header_style: StyleType = ''
      + footer_style: StyleType = ''
      + style: StyleType = ''
      + justify: 'JustifyMethod' = 'left'
      + vertical: 'VerticalAlignMethod' = 'top'
      + overflow: 'OverflowMethod' = 'ellipsis'
      + width: Optional[int] = None
      + min_width: Optional[int] = None
      + max_width: Optional[int] = None
      + ratio: Optional[int] = None
      + no_wrap: bool = False
      + highlight: bool = False
  --
      + copy(): 'Column'
      + cells(): Iterable['RenderableType']
      + flexible(): bool
  }

  class Row <<dataclass>> {
      + style: Optional[StyleType] = None
      + end_section: bool = False
  }

  class Table {
      + columns: List[Column]
      + rows: List[Row]
  --
      - __init__()
      + {classmethod} grid(cls): 'Table'
      + expand(): bool
      + expand(expand: bool)
      + row_count(): int
      + get_row_style(console: 'Console', index: int): StyleType
      + padding(): Tuple[int, int, int, int]
      + padding(padding: PaddingDimensions): 'Table'
      + add_column(header: 'RenderableType' = '', footer: 'RenderableType' = '')
      + add_row()
      + add_section()
  }

  class TerminalTheme {
      - __init__(background: _ColorTuple, foreground: _ColorTuple, normal: List[_ColorTuple], bright: Optional[List[_ColorTuple]] = None)
  }

  class Span {
      + start: int
      + end: int
      + style: Union[str, Style]
  --
      + split(offset: int): Tuple['Span', Optional['Span']]
      + move(offset: int): 'Span'
      + right_crop(offset: int): 'Span'
      + extend(cells: int): 'Span'
  }

  class Text {
      - __init__(text: str = '', style: Union[str, Style] = '')
      + cell_len(): int
      + markup(): str
      + {classmethod} from_markup(cls, text: str): 'Text'
      + {classmethod} from_ansi(cls, text: str): 'Text'
      + {classmethod} styled(cls, text: str, style: StyleType = ''): 'Text'
      + {classmethod} assemble(cls): 'Text'
      + plain(): str
      + plain(new_text: str)
      + spans(): List[Span]
      + spans(spans: List[Span])
      + blank_copy(plain: str = ''): 'Text'
      + copy(): 'Text'
      + stylize(style: Union[str, Style], start: int = 0, end: Optional[int] = None)
      + stylize_before(style: Union[str, Style], start: int = 0, end: Optional[int] = None)
      + apply_meta(meta: Dict[str, Any], start: int = 0, end: Optional[int] = None)
      + on(meta: Optional[Dict[str, Any]] = None): 'Text'
      + remove_suffix(suffix: str)
      + get_style_at_offset(console: 'Console', offset: int): Style
      + extend_style(spaces: int)
      + highlight_regex(re_highlight: Union[Pattern[str], str], style: Optional[Union[GetStyleCallable, StyleType]] = None): int
      + highlight_words(words: Iterable[str], style: Union[str, Style]): int
      + rstrip()
      + rstrip_end(size: int)
      + set_length(new_length: int)
      + render(console: 'Console', end: str = ''): Iterable['Segment']
      + join(lines: Iterable['Text']): 'Text'
      + expand_tabs(tab_size: Optional[int] = None)
      + truncate(max_width: int)
      + pad(count: int, character: str = ' ')
      + pad_left(count: int, character: str = ' ')
      + pad_right(count: int, character: str = ' ')
      + align(align: AlignMethod, width: int, character: str = ' ')
      + append(text: Union['Text', str], style: Optional[Union[str, 'Style']] = None): 'Text'
      + append_text(text: 'Text'): 'Text'
      + append_tokens(tokens: Iterable[Tuple[str, Optional[StyleType]]]): 'Text'
      + copy_styles(text: 'Text')
      + split(separator: str = '\n'): Lines
      + divide(offsets: Iterable[int]): Lines
      + right_crop(amount: int = 1)
      + wrap(console: 'Console', width: int): Lines
      + fit(width: int): Lines
      + detect_indentation(): int
      + with_indent_guides(indent_size: Optional[int] = None): 'Text'
  }

  class Theme {
      + styles: Dict[str, Style]
  --
      - __init__(styles: Optional[Mapping[str, StyleType]] = None, inherit: bool = True)
      + config(): str
      + {classmethod} from_file(cls, config_file: IO[str], source: Optional[str] = None, inherit: bool = True): 'Theme'
      + {classmethod} read(cls, path: str, inherit: bool = True, encoding: Optional[str] = None): 'Theme'
  }

  class ThemeStackError {
  }

  class ThemeStack {
      - __init__(theme: Theme)
      + push_theme(theme: Theme, inherit: bool = True)
      + pop_theme()
  }

  class Frame <<dataclass>> {
      + filename: str
      + lineno: int
      + name: str
      + line: str = ''
      + locals: Optional[Dict[str, pretty.Node]] = None
      + last_instruction: Optional[Tuple[Tuple[int, int], Tuple[int, int]]] = None
  }

  class Stack <<dataclass>> {
      + exc_type: str
      + exc_value: str
      + syntax_error: Optional[_SyntaxError] = None
      + is_cause: bool = False
      + frames: List[Frame] = field(default_factory=list)
  }

  class Trace <<dataclass>> {
      + stacks: List[Stack]
  }

  class PathHighlighter {
      + highlights = ['(?P<dim>.*/)(?P<bold>.+)']
  }

  class Traceback {
      + LEXERS = {'': 'text', '.py': 'python', '.pxd': 'cython', '.pyx': 'cython', '.pxi': 'pyrex'}
  --
      - __init__(trace: Optional[Trace] = None)
      + {classmethod} from_exception(cls, exc_type: Type[Any], exc_value: BaseException, traceback: Optional[TracebackType]): 'Traceback'
      + {classmethod} extract(cls, exc_type: Type[BaseException], exc_value: BaseException, traceback: Optional[TracebackType]): Trace
  }

  class Tree {
      + ASCII_GUIDES = ('    ', '|   ', '+-- ', '`-- ')
      + TREE_GUIDES = [('    ', '│   ', '├── ', '└── '), ('    ', '┃   ', '┣━━ ', '┗━━ '), ('    ', '║   ', '╠══ ', '╚══ ')]
  --
      - __init__(label: RenderableType)
      + add(label: RenderableType): 'Tree'
  }

  class Inspect {
      - __init__(obj)
  }

  class LogRender {
      - __init__(show_time: bool = True, show_level: bool = False, show_path: bool = True, time_format: Union[str, FormatTimeCallable] = '[%x %X]', omit_repeated_times: bool = True, level_width: Optional[int] = 8)
  }

  class NullFile {
      + close()
      + isatty(): bool
      + read(__n: int = 1): str
      + readable(): bool
      + readline(__limit: int = 1): str
      + readlines(__hint: int = 1): List[str]
      + seek(__offset: int, __whence: int = 1): int
      + seekable(): bool
      + tell(): int
      + truncate(__size: Optional[int] = 1): int
      + writable(): bool
      + writelines(__lines: Iterable[str])
      + write(text: str): int
      + flush()
      + fileno(): int
  }

  class Edge {
      + size: Optional[int] = None
      + ratio: int = 1
      + minimum_size: int = 1
  }

  class E <<dataclass>> {
      + size: Optional[int] = None
      + ratio: int = 1
      + minimum_size: int = 1
  }

  class Stack {
      + top(): T
      + push(item: T)
  }

  class LegacyWindowsError {
  }

  class WindowsCoordinates {
      + row: int
      + col: int
  --
      + {classmethod} from_param(cls, value: 'WindowsCoordinates'): COORD
  }

  class CONSOLE_SCREEN_BUFFER_INFO {
  }

  class CONSOLE_CURSOR_INFO {
  }

  class LegacyWindowsTerm {
      + BRIGHT_BIT = 8
      + ANSI_TO_WINDOWS = [0, 4, 2, 6, 1, 5, 3, 7, 8, 12, 10, 14, 9, 13, 11, 15]
  --
      - __init__(file: 'IO[str]')
      + cursor_position(): WindowsCoordinates
      + screen_size(): WindowsCoordinates
      + write_text(text: str)
      + write_styled(text: str, style: Style)
      + move_cursor_to(new_position: WindowsCoordinates)
      + erase_line()
      + erase_end_of_line()
      + erase_start_of_line()
      + move_cursor_up()
      + move_cursor_down()
      + move_cursor_forward()
      + move_cursor_to_column(column: int)
      + move_cursor_backward()
      + hide_cursor()
      + show_cursor()
      + set_title(title: str)
  }

  class WindowsConsoleFeatures <<dataclass>> {
      + vt: bool = False
      + truecolor: bool = False
  }

  class ColorBox {
  }

}

package tomli {
  class TOMLDecodeError {
  }

  class Flags {
      + FROZEN = 0
      + EXPLICIT_NEST = 1
  --
      - __init__()
      + add_pending(key: Key, flag: int)
      + finalize_pending()
      + unset_all(key: Key)
      + set(key: Key, flag: int)
      + is_(key: Key, flag: int): bool
  }

  class NestedDict {
      - __init__()
      + get_or_create_nest(key: Key): dict
      + append_nest_to_list(key: Key)
  }

  class Output {
      + data: NestedDict
      + flags: Flags
  }

}

package truststore {
  class SSLContext {
      - __init__(protocol: int = None)
      + wrap_socket(sock: socket.socket, server_side: bool = False, do_handshake_on_connect: bool = True, suppress_ragged_eofs: bool = True, server_hostname: str | None = None, session: ssl.SSLSession | None = None): ssl.SSLSocket
      + wrap_bio(incoming: ssl.MemoryBIO, outgoing: ssl.MemoryBIO, server_side: bool = False, server_hostname: str | None = None, session: ssl.SSLSession | None = None): ssl.SSLObject
      + load_verify_locations(cafile: str | bytes | os.PathLike[str] | os.PathLike[bytes] | None = None, capath: str | bytes | os.PathLike[str] | os.PathLike[bytes] | None = None, cadata: typing.Union[str, 'Buffer', None] = None)
      + load_cert_chain(certfile: _StrOrBytesPath, keyfile: _StrOrBytesPath | None = None, password: _PasswordType | None = None)
      + load_default_certs(purpose: ssl.Purpose = ssl.Purpose.SERVER_AUTH)
      + set_alpn_protocols(alpn_protocols: typing.Iterable[str])
      + set_npn_protocols(npn_protocols: typing.Iterable[str])
      + set_ciphers(__cipherlist: str)
      + get_ciphers(): typing.Any
      + session_stats(): dict[str, int]
      + cert_store_stats(): dict[str, int]
      + get_ca_certs(binary_form: typing.Literal[False] = ...): list[typing.Any]
      + get_ca_certs(binary_form: typing.Literal[True] = ...): list[bytes]
      + get_ca_certs(binary_form: bool = ...): typing.Any
      + get_ca_certs(binary_form: bool = False): list[typing.Any] | list[bytes]
      + check_hostname(): bool
      + check_hostname(value: bool)
      + hostname_checks_common_name(): bool
      + hostname_checks_common_name(value: bool)
      + keylog_filename(): str
      + keylog_filename(value: str)
      + maximum_version(): ssl.TLSVersion
      + maximum_version(value: ssl.TLSVersion)
      + minimum_version(): ssl.TLSVersion
      + minimum_version(value: ssl.TLSVersion)
      + options(): ssl.Options
      + options(value: ssl.Options)
      + post_handshake_auth(): bool
      + post_handshake_auth(value: bool)
      + protocol(): ssl._SSLMethod
      + security_level(): int
      + verify_flags(): ssl.VerifyFlags
      + verify_flags(value: ssl.VerifyFlags)
      + verify_mode(): ssl.VerifyMode
      + verify_mode(value: ssl.VerifyMode)
  }

  class CFConst {
      + kCFStringEncodingUTF8 = CFStringEncoding(134217984)
      + errSecIncompleteCertRevocationCheck = -67635
      + errSecHostNameMismatch = -67602
      + errSecCertificateExpired = -67818
      + errSecNotTrusted = -67843
  }

  class CERT_CONTEXT {
  }

  class CERT_ENHKEY_USAGE {
  }

  class CERT_USAGE_MATCH {
  }

  class CERT_CHAIN_PARA {
  }

  class CERT_TRUST_STATUS {
  }

  class CERT_CHAIN_ELEMENT {
  }

  class CERT_SIMPLE_CHAIN {
  }

  class CERT_CHAIN_CONTEXT {
  }

  class SSL_EXTRA_CERT_CHAIN_POLICY_PARA {
  }

  class CERT_CHAIN_POLICY_PARA {
  }

  class CERT_CHAIN_POLICY_STATUS {
  }

  class CERT_CHAIN_ENGINE_CONFIG {
  }

}

package urllib3 {
  class BaseSSLError {
  }

  class ConnectionError {
  }

  class BrokenPipeError {
  }

  class HTTPConnection {
      + default_port = port_by_scheme['http']
      + default_socket_options = [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)]
      + is_verified = False
      + proxy_is_verified = None
  --
      - __init__()
      + host()
      + host(value)
      + connect()
      + putrequest(method, url)
      + putheader(header)
      + request(method, url, body = None, headers = None)
      + request_chunked(method, url, body = None, headers = None)
  }

  class HTTPSConnection {
      + default_port = port_by_scheme['https']
      + cert_reqs = None
      + ca_certs = None
      + ca_cert_dir = None
      + ca_cert_data = None
      + ssl_version = None
      + assert_fingerprint = None
      + tls_in_tls_required = False
  --
      - __init__(host, port = None, key_file = None, cert_file = None, key_password = None, strict = None, timeout = socket._GLOBAL_DEFAULT_TIMEOUT, ssl_context = None, server_hostname = None)
      + set_cert(key_file = None, cert_file = None, cert_reqs = None, key_password = None, ca_certs = None, assert_hostname = None, assert_fingerprint = None, ca_cert_dir = None, ca_cert_data = None)
      + connect()
  }

  class DummyConnection {
  }

  class ConnectionPool {
      + scheme = None
      + QueueCls = LifoQueue
  --
      - __init__(host, port = None)
      + close()
  }

  class HTTPConnectionPool {
      + scheme = 'http'
      + ConnectionCls = HTTPConnection
      + ResponseCls = HTTPResponse
  --
      - __init__(host, port = None, strict = False, timeout = Timeout.DEFAULT_TIMEOUT, maxsize = 1, block = False, headers = None, retries = None, _proxy = None, _proxy_headers = None, _proxy_config = None)
      + close()
      + is_same_host(url)
      + urlopen(method, url, body = None, headers = None, retries = None, redirect = True, assert_same_host = True, timeout = _Default, pool_timeout = None, release_conn = None, chunked = False, body_pos = None)
  }

  class HTTPSConnectionPool {
      + scheme = 'https'
      + ConnectionCls = HTTPSConnection
  --
      - __init__(host, port = None, strict = False, timeout = Timeout.DEFAULT_TIMEOUT, maxsize = 1, block = False, headers = None, retries = None, _proxy = None, _proxy_headers = None, key_file = None, cert_file = None, cert_reqs = None, key_password = None, ca_certs = None, ssl_version = None, assert_hostname = None, assert_fingerprint = None, ca_cert_dir = None)
  }

  class HTTPError {
  }

  class HTTPWarning {
  }

  class PoolError {
      - __init__(pool, message)
  }

  class RequestError {
      - __init__(pool, url, message)
  }

  class SSLError {
  }

  class ProxyError {
      - __init__(message, error)
  }

  class DecodeError {
  }

  class ProtocolError {
  }

  class MaxRetryError {
      - __init__(pool, url, reason = None)
  }

  class HostChangedError {
      - __init__(pool, url, retries = 3)
  }

  class TimeoutStateError {
  }

  class TimeoutError {
  }

  class ReadTimeoutError {
  }

  class ConnectTimeoutError {
  }

  class NewConnectionError {
  }

  class EmptyPoolError {
  }

  class ClosedPoolError {
  }

  class LocationValueError {
  }

  class LocationParseError {
      - __init__(location)
  }

  class URLSchemeUnknown {
      - __init__(scheme)
  }

  class ResponseError {
      + GENERIC_ERROR = 'too many error responses'
      + SPECIFIC_ERROR = 'too many {status_code} error responses'
  }

  class SecurityWarning {
  }

  class SubjectAltNameWarning {
  }

  class InsecureRequestWarning {
  }

  class SystemTimeWarning {
  }

  class InsecurePlatformWarning {
  }

  class SNIMissingWarning {
  }

  class DependencyWarning {
  }

  class ResponseNotChunked {
  }

  class BodyNotHttplibCompatible {
  }

  class IncompleteRead {
      - __init__(partial, expected)
  }

  class InvalidChunkLength {
      - __init__(response, length)
  }

  class InvalidHeader {
  }

  class ProxySchemeUnknown {
      - __init__(scheme)
  }

  class ProxySchemeUnsupported {
  }

  class HeaderParsingError {
      - __init__(defects, unparsed_data)
  }

  class UnrewindableBodyError {
  }

  class RequestField {
      - __init__(name, data, filename = None, headers = None, header_formatter = format_header_param_html5)
      + {classmethod} from_tuples(cls, fieldname, value, header_formatter = format_header_param_html5)
      + render_headers()
      + make_multipart(content_disposition = None, content_type = None, content_location = None)
  }

  class PoolManager {
      + proxy = None
      + proxy_config = None
  --
      - __init__(num_pools = 10, headers = None)
      + clear()
      + connection_from_host(host, port = None, scheme = 'http', pool_kwargs = None)
      + connection_from_context(request_context)
      + connection_from_pool_key(pool_key, request_context = None)
      + connection_from_url(url, pool_kwargs = None)
      + urlopen(method, url, redirect = True)
  }

  class ProxyManager {
      - __init__(proxy_url, num_pools = 10, headers = None, proxy_headers = None, proxy_ssl_context = None, use_forwarding_for_https = False)
      + connection_from_host(host, port = None, scheme = 'http', pool_kwargs = None)
      + urlopen(method, url, redirect = True)
  }

  class RequestMethods {
      - __init__(headers = None)
      + urlopen(method, url, body = None, headers = None, encode_multipart = True, multipart_boundary = None)
      + request(method, url, fields = None, headers = None)
      + request_encode_url(method, url, fields = None, headers = None)
      + request_encode_body(method, url, fields = None, headers = None, encode_multipart = True, multipart_boundary = None)
  }

  class RequestModule {
  }

  class DeflateDecoder {
      - __init__()
      + decompress(data)
  }

  class GzipDecoderState {
      + FIRST_MEMBER = 0
      + OTHER_MEMBERS = 1
      + SWALLOW_DATA = 2
  }

  class GzipDecoder {
      - __init__()
      + decompress(data)
  }

  class BrotliDecoder {
      - __init__()
      + flush()
  }

  class MultiDecoder {
      - __init__(modes)
      + flush()
      + decompress(data)
  }

  class HTTPResponse {
      + CONTENT_DECODERS = ['gzip', 'deflate']
      + REDIRECT_STATUSES = [301, 302, 303, 307, 308]
      + DECODER_ERROR_CLASSES = (IOError, zlib.error)
  --
      - __init__(body = '', headers = None, status = 0, version = 0, reason = None, strict = 0, preload_content = True, decode_content = True, original_response = None, pool = None, connection = None, msg = None, retries = None, enforce_content_length = False, request_method = None, request_url = None, auto_close = True)
      + get_redirect_location()
      + release_conn()
      + drain_conn()
      + data()
      + connection()
      + isclosed()
      + tell()
      + read(amt = None, decode_content = None, cache_content = False)
      + stream(amt = 2 ** 16, decode_content = None)
      + {classmethod} from_httplib(ResponseCls, r)
      + getheaders()
      + getheader(name, default = None)
      + info()
      + close()
      + closed()
      + fileno()
      + flush()
      + readable()
      + readinto(b)
      + supports_chunked_reads()
      + read_chunked(amt = None, decode_content = None)
      + geturl()
  }

  class RLock {
  }

  class RecentlyUsedContainer {
      + ContainerCls = OrderedDict
  --
      - __init__(maxsize = 10, dispose_func = None)
      + clear()
      + keys()
  }

  class HTTPHeaderDict {
      + getheaders = getlist
      + getallmatchingheaders = getlist
      + iget = getlist
      + get_all = getlist
  --
      - __init__(headers = None)
      + pop(key, default = __marker)
      + discard(key)
      + add(key, val)
      + extend()
      + getlist(key, default = __marker)
      + copy()
      + iteritems()
      + itermerged()
      + items()
      + {classmethod} from_httplib(cls, message)
  }

  class BaseSSLError {
  }

  class HTTPConnection {
      + default_port: typing.ClassVar[int] = port_by_scheme['http']
      + default_socket_options: typing.ClassVar[connection._TYPE_SOCKET_OPTIONS] = [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)]
      + is_verified: bool = False
      + proxy_is_verified: bool | None = None
      + blocksize: int
      + source_address: tuple[str, int] | None
      + socket_options: connection._TYPE_SOCKET_OPTIONS | None
  --
      - __init__(host: str, port: int | None = None)
      + host(): str
      + host(value: str)
      + set_tunnel(host: str, port: int | None = None, headers: typing.Mapping[str, str] | None = None, scheme: str = 'http')
      + connect()
      + is_closed(): bool
      + is_connected(): bool
      + has_connected_to_proxy(): bool
      + proxy_is_forwarding(): bool
      + proxy_is_tunneling(): bool
      + close()
      + putrequest(method: str, url: str, skip_host: bool = False, skip_accept_encoding: bool = False)
      + putheader(header: str)
      + request(method: str, url: str, body: _TYPE_BODY | None = None, headers: typing.Mapping[str, str] | None = None)
      + request_chunked(method: str, url: str, body: _TYPE_BODY | None = None, headers: typing.Mapping[str, str] | None = None)
      + getresponse(): HTTPResponse
  }

  class HTTPSConnection {
      + default_port = port_by_scheme['https']
      + cert_reqs: int | str | None = None
      + ca_certs: str | None = None
      + ca_cert_dir: str | None = None
      + ca_cert_data: None | str | bytes = None
      + ssl_version: int | str | None = None
      + ssl_minimum_version: int | None = None
      + ssl_maximum_version: int | None = None
      + assert_fingerprint: str | None = None
  --
      - __init__(host: str, port: int | None = None)
      + set_cert(key_file: str | None = None, cert_file: str | None = None, cert_reqs: int | str | None = None, key_password: str | None = None, ca_certs: str | None = None, assert_hostname: None | str | typing.Literal[False] = None, assert_fingerprint: str | None = None, ca_cert_dir: str | None = None, ca_cert_data: None | str | bytes = None)
      + connect()
  }

  class DummyConnection {
  }

  class ConnectionPool {
      + scheme: str | None = None
      + QueueCls = queue.LifoQueue
  --
      - __init__(host: str, port: int | None = None)
      + close()
  }

  class HTTPConnectionPool {
      + scheme = 'http'
      + ConnectionCls: type[BaseHTTPConnection] | type[BaseHTTPSConnection] = HTTPConnection
  --
      - __init__(host: str, port: int | None = None, timeout: _TYPE_TIMEOUT | None = _DEFAULT_TIMEOUT, maxsize: int = 1, block: bool = False, headers: typing.Mapping[str, str] | None = None, retries: Retry | bool | int | None = None, _proxy: Url | None = None, _proxy_headers: typing.Mapping[str, str] | None = None, _proxy_config: ProxyConfig | None = None)
      + close()
      + is_same_host(url: str): bool
      + urlopen(method: str, url: str, body: _TYPE_BODY | None = None, headers: typing.Mapping[str, str] | None = None, retries: Retry | bool | int | None = None, redirect: bool = True, assert_same_host: bool = True, timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT, pool_timeout: int | None = None, release_conn: bool | None = None, chunked: bool = False, body_pos: _TYPE_BODY_POSITION | None = None, preload_content: bool = True, decode_content: bool = True): BaseHTTPResponse
  }

  class HTTPSConnectionPool {
      + scheme = 'https'
      + ConnectionCls: type[BaseHTTPSConnection] = HTTPSConnection
  --
      - __init__(host: str, port: int | None = None, timeout: _TYPE_TIMEOUT | None = _DEFAULT_TIMEOUT, maxsize: int = 1, block: bool = False, headers: typing.Mapping[str, str] | None = None, retries: Retry | bool | int | None = None, _proxy: Url | None = None, _proxy_headers: typing.Mapping[str, str] | None = None, key_file: str | None = None, cert_file: str | None = None, cert_reqs: int | str | None = None, key_password: str | None = None, ca_certs: str | None = None, ssl_version: int | str | None = None, ssl_minimum_version: ssl.TLSVersion | None = None, ssl_maximum_version: ssl.TLSVersion | None = None, assert_hostname: str | typing.Literal[False] | None = None, assert_fingerprint: str | None = None, ca_cert_dir: str | None = None)
  }

  class HTTPError {
  }

  class HTTPWarning {
  }

  class PoolError {
      - __init__(pool: ConnectionPool, message: str)
  }

  class RequestError {
      - __init__(pool: ConnectionPool, url: str, message: str)
  }

  class SSLError {
  }

  class ProxyError {
      + original_error: Exception
  --
      - __init__(message: str, error: Exception)
  }

  class DecodeError {
  }

  class ProtocolError {
  }

  class MaxRetryError {
      - __init__(pool: ConnectionPool, url: str, reason: Exception | None = None)
  }

  class HostChangedError {
      - __init__(pool: ConnectionPool, url: str, retries: Retry | int = 3)
  }

  class TimeoutStateError {
  }

  class TimeoutError {
  }

  class ReadTimeoutError {
  }

  class ConnectTimeoutError {
  }

  class NewConnectionError {
      - __init__(conn: HTTPConnection, message: str)
      + pool(): HTTPConnection
  }

  class NameResolutionError {
      - __init__(host: str, conn: HTTPConnection, reason: socket.gaierror)
  }

  class EmptyPoolError {
  }

  class FullPoolError {
  }

  class ClosedPoolError {
  }

  class LocationValueError {
  }

  class LocationParseError {
      - __init__(location: str)
  }

  class URLSchemeUnknown {
      - __init__(scheme: str)
  }

  class ResponseError {
      + GENERIC_ERROR = 'too many error responses'
      + SPECIFIC_ERROR = 'too many {status_code} error responses'
  }

  class SecurityWarning {
  }

  class InsecureRequestWarning {
  }

  class NotOpenSSLWarning {
  }

  class SystemTimeWarning {
  }

  class InsecurePlatformWarning {
  }

  class DependencyWarning {
  }

  class ResponseNotChunked {
  }

  class BodyNotHttplibCompatible {
  }

  class IncompleteRead {
      + partial: int
      + expected: int
  --
      - __init__(partial: int, expected: int)
  }

  class InvalidChunkLength {
      - __init__(response: HTTPResponse, length: bytes)
  }

  class InvalidHeader {
  }

  class ProxySchemeUnknown {
      - __init__(scheme: str | None)
  }

  class ProxySchemeUnsupported {
  }

  class HeaderParsingError {
      - __init__(defects: list[MessageDefect], unparsed_data: bytes | str | None)
  }

  class UnrewindableBodyError {
  }

  class RequestField {
      - __init__(name: str, data: _TYPE_FIELD_VALUE, filename: str | None = None, headers: typing.Mapping[str, str] | None = None, header_formatter: typing.Callable[[str, _TYPE_FIELD_VALUE], str] | None = None)
      + {classmethod} from_tuples(cls, fieldname: str, value: _TYPE_FIELD_VALUE_TUPLE, header_formatter: typing.Callable[[str, _TYPE_FIELD_VALUE], str] | None = None): RequestField
      + render_headers(): str
      + make_multipart(content_disposition: str | None = None, content_type: str | None = None, content_location: str | None = None)
  }

  class PoolKey {
      + key_scheme: str
      + key_host: str
      + key_port: int | None
      + key_timeout: Timeout | float | int | None
      + key_retries: Retry | bool | int | None
      + key_block: bool | None
      + key_source_address: tuple[str, int] | None
      + key_key_file: str | None
      + key_key_password: str | None
      + key_cert_file: str | None
      + key_cert_reqs: str | None
      + key_ca_certs: str | None
      + key_ca_cert_data: str | bytes | None
      + key_ssl_version: int | str | None
      + key_ssl_minimum_version: ssl.TLSVersion | None
      + key_ssl_maximum_version: ssl.TLSVersion | None
      + key_ca_cert_dir: str | None
      + key_ssl_context: ssl.SSLContext | None
      + key_maxsize: int | None
      + key_headers: frozenset[tuple[str, str]] | None
      + key__proxy: Url | None
      + key__proxy_headers: frozenset[tuple[str, str]] | None
      + key__proxy_config: ProxyConfig | None
      + key_socket_options: _TYPE_SOCKET_OPTIONS | None
      + key__socks_options: frozenset[tuple[str, str]] | None
      + key_assert_hostname: bool | str | None
      + key_assert_fingerprint: str | None
      + key_server_hostname: str | None
      + key_blocksize: int | None
  }

  class PoolManager {
      + proxy: Url | None = None
      + proxy_config: ProxyConfig | None = None
  --
      - __init__(num_pools: int = 10, headers: typing.Mapping[str, str] | None = None)
      + clear()
      + connection_from_host(host: str | None, port: int | None = None, scheme: str | None = 'http', pool_kwargs: dict[str, typing.Any] | None = None): HTTPConnectionPool
      + connection_from_context(request_context: dict[str, typing.Any]): HTTPConnectionPool
      + connection_from_pool_key(pool_key: PoolKey, request_context: dict[str, typing.Any]): HTTPConnectionPool
      + connection_from_url(url: str, pool_kwargs: dict[str, typing.Any] | None = None): HTTPConnectionPool
      + urlopen(method: str, url: str, redirect: bool = True): BaseHTTPResponse
  }

  class ProxyManager {
      - __init__(proxy_url: str, num_pools: int = 10, headers: typing.Mapping[str, str] | None = None, proxy_headers: typing.Mapping[str, str] | None = None, proxy_ssl_context: ssl.SSLContext | None = None, use_forwarding_for_https: bool = False, proxy_assert_hostname: None | str | typing.Literal[False] = None, proxy_assert_fingerprint: str | None = None)
      + connection_from_host(host: str | None, port: int | None = None, scheme: str | None = 'http', pool_kwargs: dict[str, typing.Any] | None = None): HTTPConnectionPool
      + urlopen(method: str, url: str, redirect: bool = True): BaseHTTPResponse
  }

  class ContentDecoder {
      + decompress(data: bytes): bytes
      + flush(): bytes
  }

  class DeflateDecoder {
      - __init__()
      + decompress(data: bytes): bytes
      + flush(): bytes
  }

  class GzipDecoderState {
      + FIRST_MEMBER = 0
      + OTHER_MEMBERS = 1
      + SWALLOW_DATA = 2
  }

  class GzipDecoder {
      - __init__()
      + decompress(data: bytes): bytes
      + flush(): bytes
  }

  class BrotliDecoder {
      - __init__()
      + flush(): bytes
  }

  class ZstdDecoder {
      - __init__()
      + decompress(data: bytes): bytes
      + flush(): bytes
  }

  class MultiDecoder {
      - __init__(modes: str)
      + flush(): bytes
      + decompress(data: bytes): bytes
  }

  class BytesQueueBuffer {
      - __init__()
      + put(data: bytes)
      + get(n: int): bytes
      + get_all(): bytes
  }

  class BaseHTTPResponse {
      + CONTENT_DECODERS = ['gzip', 'x-gzip', 'deflate']
      + REDIRECT_STATUSES = [301, 302, 303, 307, 308]
      + DECODER_ERROR_CLASSES: tuple[type[Exception], ...] = (IOError, zlib.error)
  --
      - __init__()
      + get_redirect_location(): str | None | typing.Literal[False]
      + data(): bytes
      + json(): typing.Any
      + url(): str | None
      + url(url: str | None)
      + connection(): BaseHTTPConnection | None
      + retries(): Retry | None
      + retries(retries: Retry | None)
      + stream(amt: int | None = 2 ** 16, decode_content: bool | None = None): typing.Iterator[bytes]
      + read(amt: int | None = None, decode_content: bool | None = None, cache_content: bool = False): bytes
      + read1(amt: int | None = None, decode_content: bool | None = None): bytes
      + read_chunked(amt: int | None = None, decode_content: bool | None = None): typing.Iterator[bytes]
      + release_conn()
      + drain_conn()
      + shutdown()
      + close()
      + readinto(b: bytearray): int
      + getheaders(): HTTPHeaderDict
      + getheader(name: str, default: str | None = None): str | None
      + info(): HTTPHeaderDict
      + geturl(): str | None
  }

  class HTTPResponse {
      - __init__(body: _TYPE_BODY = '', headers: typing.Mapping[str, str] | typing.Mapping[bytes, bytes] | None = None, status: int = 0, version: int = 0, version_string: str = 'HTTP/?', reason: str | None = None, preload_content: bool = True, decode_content: bool = True, original_response: _HttplibHTTPResponse | None = None, pool: HTTPConnectionPool | None = None, connection: HTTPConnection | None = None, msg: _HttplibHTTPMessage | None = None, retries: Retry | None = None, enforce_content_length: bool = True, request_method: str | None = None, request_url: str | None = None, auto_close: bool = True, sock_shutdown: typing.Callable[[int], None] | None = None)
      + release_conn()
      + drain_conn()
      + data(): bytes
      + connection(): HTTPConnection | None
      + isclosed(): bool
      + tell(): int
      + read(amt: int | None = None, decode_content: bool | None = None, cache_content: bool = False): bytes
      + read1(amt: int | None = None, decode_content: bool | None = None): bytes
      + stream(amt: int | None = 2 ** 16, decode_content: bool | None = None): typing.Generator[bytes]
      + readable(): bool
      + shutdown()
      + close()
      + closed(): bool
      + fileno(): int
      + flush()
      + supports_chunked_reads(): bool
      + read_chunked(amt: int | None = None, decode_content: bool | None = None): typing.Generator[bytes]
      + url(): str | None
      + url(url: str)
  }

  class ProxyConfig {
      + ssl_context: ssl.SSLContext | None
      + use_forwarding_for_https: bool
      + assert_hostname: None | str | typing.Literal[False]
      + assert_fingerprint: str | None
  }

  class BaseHTTPConnection {
      + default_port: typing.ClassVar[int]
      + default_socket_options: typing.ClassVar[_TYPE_SOCKET_OPTIONS]
      + host: str
      + port: int
      + timeout: None | float
      + blocksize: int
      + source_address: tuple[str, int] | None
      + socket_options: _TYPE_SOCKET_OPTIONS | None
      + proxy: Url | None
      + proxy_config: ProxyConfig | None
      + is_verified: bool
      + proxy_is_verified: bool | None
  --
      - __init__(host: str, port: int | None = None)
      + set_tunnel(host: str, port: int | None = None, headers: typing.Mapping[str, str] | None = None, scheme: str = 'http')
      + connect()
      + request(method: str, url: str, body: _TYPE_BODY | None = None, headers: typing.Mapping[str, str] | None = None)
      + getresponse(): BaseHTTPResponse
      + close()
      + is_closed(): bool
      + is_connected(): bool
      + has_connected_to_proxy(): bool
  }

  class BaseHTTPSConnection {
      + default_port: typing.ClassVar[int]
      + default_socket_options: typing.ClassVar[_TYPE_SOCKET_OPTIONS]
      + cert_reqs: int | str | None
      + assert_hostname: None | str | typing.Literal[False]
      + assert_fingerprint: str | None
      + ssl_context: ssl.SSLContext | None
      + ca_certs: str | None
      + ca_cert_dir: str | None
      + ca_cert_data: None | str | bytes
      + ssl_minimum_version: int | None
      + ssl_maximum_version: int | None
      + ssl_version: int | str | None
      + cert_file: str | None
      + key_file: str | None
      + key_password: str | None
  --
      - __init__(host: str, port: int | None = None)
  }

  class HasGettableStringKeys {
      + keys(): typing.Iterator[str]
  }

  class RecentlyUsedContainer {
      + dispose_func: typing.Callable[[_VT], None] | None
      + lock: RLock
  --
      - __init__(maxsize: int = 10, dispose_func: typing.Callable[[_VT], None] | None = None)
      + clear()
      + keys(): set[_KT]
  }

  class HTTPHeaderDictItemView {
      - __init__(headers: HTTPHeaderDict)
  }

  class HTTPHeaderDict {
      + getheaders = getlist
      + getallmatchingheaders = getlist
      + iget = getlist
      + get_all = getlist
  --
      - __init__(headers: ValidHTTPHeaderSource | None = None)
      + setdefault(key: str, default: str = ''): str
      + discard(key: str)
      + add(key: str, val: str)
      + extend()
      + getlist(key: str): list[str]
      + getlist(key: str, default: _DT): list[str] | _DT
      + getlist(key: str, default: _Sentinel | _DT = _Sentinel.not_passed): list[str] | _DT
      + copy(): Self
      + iteritems(): typing.Iterator[tuple[str, str]]
      + itermerged(): typing.Iterator[tuple[str, str]]
      + items(): HTTPHeaderDictItemView
  }

  class RequestMethods {
      - __init__(headers: typing.Mapping[str, str] | None = None)
      + urlopen(method: str, url: str, body: _TYPE_BODY | None = None, headers: typing.Mapping[str, str] | None = None, encode_multipart: bool = True, multipart_boundary: str | None = None): BaseHTTPResponse
      + request(method: str, url: str, body: _TYPE_BODY | None = None, fields: _TYPE_FIELDS | None = None, headers: typing.Mapping[str, str] | None = None, json: typing.Any | None = None): BaseHTTPResponse
      + request_encode_url(method: str, url: str, fields: _TYPE_ENCODE_URL_FIELDS | None = None, headers: typing.Mapping[str, str] | None = None): BaseHTTPResponse
      + request_encode_body(method: str, url: str, fields: _TYPE_FIELDS | None = None, headers: typing.Mapping[str, str] | None = None, encode_multipart: bool = True, multipart_boundary: str | None = None): BaseHTTPResponse
  }

}

package contrib {
  class AppEnginePlatformWarning {
  }

  class AppEnginePlatformError {
  }

  class AppEngineManager {
      - __init__(headers = None, retries = None, validate_certificate = True, urlfetch_retries = True)
      + urlopen(method, url, body = None, headers = None, retries = None, redirect = True, timeout = Timeout.DEFAULT_TIMEOUT)
  }

  class NTLMConnectionPool {
      + scheme = 'https'
  --
      - __init__(user, pw, authurl)
      + urlopen(method, url, body = None, headers = None, retries = 3, redirect = True, assert_same_host = True)
  }

  class UnsupportedExtension {
  }

  class WrappedSocket {
      - __init__(connection, socket, suppress_ragged_eofs = True)
      + fileno()
      + recv()
      + recv_into()
      + settimeout(timeout)
      + sendall(data)
      + shutdown()
      + close()
      + getpeercert(binary_form = False)
      + version()
  }

  class PyOpenSSLContext {
      - __init__(protocol)
      + options()
      + options(value)
      + verify_mode()
      + verify_mode(value)
      + set_default_verify_paths()
      + set_ciphers(ciphers)
      + load_verify_locations(cafile = None, capath = None, cadata = None)
      + load_cert_chain(certfile, keyfile = None, password = None)
      + set_alpn_protocols(protocols)
      + wrap_socket(sock, server_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True, server_hostname = None)
  }

  class WrappedSocket {
      - __init__(socket)
      + handshake(server_hostname, verify, trust_bundle, min_version, max_version, client_cert, client_key, client_key_passphrase, alpn_protocols)
      + fileno()
      + recv(bufsiz)
      + recv_into(buffer, nbytes = None)
      + settimeout(timeout)
      + gettimeout()
      + send(data)
      + sendall(data)
      + shutdown()
      + close()
      + getpeercert(binary_form = False)
      + version()
  }

  class SecureTransportContext {
      - __init__(protocol)
      + check_hostname()
      + check_hostname(value)
      + options()
      + options(value)
      + verify_mode()
      + verify_mode(value)
      + set_default_verify_paths()
      + load_default_certs()
      + set_ciphers(ciphers)
      + load_verify_locations(cafile = None, capath = None, cadata = None)
      + load_cert_chain(certfile, keyfile = None, password = None)
      + set_alpn_protocols(protocols)
      + wrap_socket(sock, server_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True, server_hostname = None)
  }

  class SOCKSConnection {
      - __init__()
  }

  class SOCKSHTTPSConnection {
  }

  class SOCKSHTTPConnectionPool {
      + ConnectionCls = SOCKSConnection
  }

  class SOCKSHTTPSConnectionPool {
      + ConnectionCls = SOCKSHTTPSConnection
  }

  class SOCKSProxyManager {
      + pool_classes_by_scheme = {'http': SOCKSHTTPConnectionPool, 'https': SOCKSHTTPSConnectionPool}
  --
      - __init__(proxy_url, username = None, password = None, num_pools = 10, headers = None)
  }

  class UnsupportedExtension {
  }

  class WrappedSocket {
      - __init__(connection: OpenSSL.SSL.Connection, socket: socket_cls, suppress_ragged_eofs: bool = True)
      + fileno(): int
      + recv(): bytes
      + recv_into(): int
      + settimeout(timeout: float)
      + sendall(data: bytes)
      + shutdown(how: int)
      + close()
      + getpeercert(binary_form: bool = False): dict[str, list[typing.Any]] | None
      + version(): str
      + selected_alpn_protocol(): str | None
  }

  class PyOpenSSLContext {
      - __init__(protocol: int)
      + options(): int
      + options(value: int)
      + verify_mode(): int
      + verify_mode(value: ssl.VerifyMode)
      + set_default_verify_paths()
      + set_ciphers(ciphers: bytes | str)
      + load_verify_locations(cafile: str | None = None, capath: str | None = None, cadata: bytes | None = None)
      + load_cert_chain(certfile: str, keyfile: str | None = None, password: str | None = None)
      + set_alpn_protocols(protocols: list[bytes | str])
      + wrap_socket(sock: socket_cls, server_side: bool = False, do_handshake_on_connect: bool = True, suppress_ragged_eofs: bool = True, server_hostname: bytes | str | None = None): WrappedSocket
      + minimum_version(): int
      + minimum_version(minimum_version: int)
      + maximum_version(): int
      + maximum_version(maximum_version: int)
  }

  class SOCKSConnection {
      - __init__(_socks_options: _TYPE_SOCKS_OPTIONS)
  }

  class SOCKSHTTPSConnection {
  }

  class SOCKSHTTPConnectionPool {
      + ConnectionCls = SOCKSConnection
  }

  class SOCKSHTTPSConnectionPool {
      + ConnectionCls = SOCKSHTTPSConnection
  }

  class SOCKSProxyManager {
      + pool_classes_by_scheme = {'http': SOCKSHTTPConnectionPool, 'https': SOCKSHTTPSConnectionPool}
  --
      - __init__(proxy_url: str, username: str | None = None, password: str | None = None, num_pools: int = 10, headers: typing.Mapping[str, str] | None = None)
  }

}

package _securetransport {
  class CFConst {
      + kCFStringEncodingUTF8 = CFStringEncoding(134217984)
  }

  class SecurityConst {
      + kSSLSessionOptionBreakOnServerAuth = 0
      + kSSLProtocol2 = 1
      + kSSLProtocol3 = 2
      + kTLSProtocol1 = 4
      + kTLSProtocol11 = 7
      + kTLSProtocol12 = 8
      + kTLSProtocol13 = 10
      + kTLSProtocolMaxSupported = 999
      + kSSLClientSide = 1
      + kSSLStreamType = 0
      + kSecFormatPEMSequence = 10
      + kSecTrustResultInvalid = 0
      + kSecTrustResultProceed = 1
      + kSecTrustResultDeny = 3
      + kSecTrustResultUnspecified = 4
      + kSecTrustResultRecoverableTrustFailure = 5
      + kSecTrustResultFatalTrustFailure = 6
      + kSecTrustResultOtherError = 7
      + errSSLProtocol = -9800
      + errSSLWouldBlock = -9803
      + errSSLClosedGraceful = -9805
      + errSSLClosedNoNotify = -9816
      + errSSLClosedAbort = -9806
      + errSSLXCertChainInvalid = -9807
      + errSSLCrypto = -9809
      + errSSLInternal = -9810
      + errSSLCertExpired = -9814
      + errSSLCertNotYetValid = -9815
      + errSSLUnknownRootCert = -9812
      + errSSLNoRootCert = -9813
      + errSSLHostNameMismatch = -9843
      + errSSLPeerHandshakeFail = -9824
      + errSSLPeerUserCancelled = -9839
      + errSSLWeakPeerEphemeralDHKey = -9850
      + errSSLServerAuthCompleted = -9841
      + errSSLRecordOverflow = -9847
      + errSecVerifyFailed = -67808
      + errSecNoTrustSettings = -25263
      + errSecItemNotFound = -25300
      + errSecInvalidTrustSettings = -25262
      + TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 49196
      + TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 49200
      + TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 49195
      + TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 49199
      + TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = 52393
      + TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 52392
      + TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 159
      + TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 158
      + TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 49188
      + TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 49192
      + TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 49162
      + TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 49172
      + TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 107
      + TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 57
      + TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 49187
      + TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 49191
      + TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 49161
      + TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 49171
      + TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 103
      + TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 51
      + TLS_RSA_WITH_AES_256_GCM_SHA384 = 157
      + TLS_RSA_WITH_AES_128_GCM_SHA256 = 156
      + TLS_RSA_WITH_AES_256_CBC_SHA256 = 61
      + TLS_RSA_WITH_AES_128_CBC_SHA256 = 60
      + TLS_RSA_WITH_AES_256_CBC_SHA = 53
      + TLS_RSA_WITH_AES_128_CBC_SHA = 47
      + TLS_AES_128_GCM_SHA256 = 4865
      + TLS_AES_256_GCM_SHA384 = 4866
      + TLS_AES_128_CCM_8_SHA256 = 4869
      + TLS_AES_128_CCM_SHA256 = 4868
  }

}

package backports {
  class weakref_finalize {
      - __init__(obj, func)
      + detach()
      + peek()
      + alive()
      + atexit()
      + atexit(value)
  }

}

package premailer {
  class PremailerError {
  }

  class ExternalNotFoundError {
  }

  class ExternalFileLoadingError {
  }

  class Premailer {
      + attribute_name = 'data-premailer'
  --
      - __init__(html = None, base_url = None, disable_link_rewrites = False, preserve_internal_links = False, preserve_inline_attachments = True, preserve_handlebar_syntax = False, exclude_pseudoclasses = True, keep_style_tags = False, include_star_selectors = False, remove_classes = False, capitalize_float_margin = False, strip_important = True, external_styles = None, css_text = None, method = 'html', base_path = None, disable_basic_attributes = None, disable_validation = False, cache_css_parsing = True, cssutils_logging_handler = None, cssutils_logging_level = None, disable_leftover_css = False, align_floating_images = True, remove_unset_properties = True, allow_network = True, allow_insecure_ssl = False, allow_loading_external_files = False, session = None)
      + transform(html = None, pretty_print = True)
      + {static} six_color(color_value)
  }

}

package psycopg {
  class WaitFunc {
  }

  class AdaptContext {
      + adapters(): AdaptersMap
      + connection(): BaseConnection[Any] | None
  }

  class Dumper {
      + format: pq.Format
      + oid: int
  --
      - __init__(cls: type, context: AdaptContext | None = None)
      + dump(obj): Buffer | None
      + quote(obj): Buffer
      + get_key(obj, format: PyFormat): DumperKey
      + upgrade(obj, format: PyFormat): Dumper
  }

  class Loader {
      + format: pq.Format
  --
      - __init__(oid: int, context: AdaptContext | None = None)
      + load(data: Buffer): Any
  }

  class Transformer {
      + types: tuple[int, ...] | None
      + formats: list[pq.Format] | None
  --
      - __init__(context: AdaptContext | None = None)
      + {classmethod} from_context(cls, context: AdaptContext | None): Transformer
      + connection(): BaseConnection[Any] | None
      + encoding(): str
      + adapters(): AdaptersMap
      + pgresult(): PGresult | None
      + set_pgresult(result: PGresult | None)
      + set_dumper_types(types: Sequence[int], format: pq.Format)
      + set_loader_types(types: Sequence[int], format: pq.Format)
      + dump_sequence(params: Sequence[Any], formats: Sequence[PyFormat]): Sequence[Buffer | None]
      + as_literal(obj): bytes
      + get_dumper(obj, format: PyFormat): Dumper
      + load_rows(row0: int, row1: int, make_row: RowMaker[Row]): list[Row]
      + load_row(row: int, make_row: RowMaker[Row]): Row | None
      + load_sequence(record: Sequence[Buffer | None]): tuple[Any, ...]
      + get_loader(oid: int, format: pq.Format): Loader
  }

  class Dumper {
      + oid: int = 0
      + format: pq.Format = pq.Format.TEXT
  --
      - __init__(cls: type, context: abc.AdaptContext | None = None)
      + dump(obj): Buffer | None
      + quote(obj): Buffer
      + get_key(obj, format: PyFormat): abc.DumperKey
      + upgrade(obj, format: PyFormat): Dumper
  }

  class Loader {
      + format: pq.Format = pq.Format.TEXT
  --
      - __init__(oid: int, context: abc.AdaptContext | None = None)
      + load(data: Buffer): Any
  }

  class RecursiveDumper {
      - __init__(cls: type, context: abc.AdaptContext | None = None)
  }

  class RecursiveLoader {
      - __init__(oid: int, context: abc.AdaptContext | None = None)
  }

  class ClientCursorMixin {
      + mogrify(query: Query, params: Params | None = None): str
  }

  class ClientCursor {
  }

  class AsyncClientCursor {
  }

  class Connection {
      + cursor_factory: type[Cursor[Row]]
      + server_cursor_factory: type[ServerCursor[Row]]
      + row_factory: RowFactory[Row]
  --
      - __init__(pgconn: PGconn, row_factory: RowFactory[Row] = cast(RowFactory[Row], tuple_row))
      + {classmethod} connect(cls, conninfo: str = ''): Self
      + close()
      + cursor(): Cursor[Row]
      + cursor(): Cursor[CursorRow]
      + cursor(name: str): ServerCursor[Row]
      + cursor(name: str): ServerCursor[CursorRow]
      + cursor(name: str = ''): Cursor[Any] | ServerCursor[Any]
      + execute(query: Query, params: Params | None = None): Cursor[Row]
      + commit()
      + rollback()
      + cancel_safe()
      + transaction(savepoint_name: str | None = None, force_rollback: bool = False): Iterator[Transaction]
      + notifies(): Generator[Notify, None, None]
      + pipeline(): Iterator[Pipeline]
      + wait(gen: PQGen[RV], interval: float | None = _WAIT_INTERVAL): RV
      + set_autocommit(value: bool)
      + set_isolation_level(value: IsolationLevel | None)
      + set_read_only(value: bool | None)
      + set_deferrable(value: bool | None)
      + tpc_begin(xid: Xid | str)
      + tpc_prepare()
      + tpc_commit(xid: Xid | str | None = None)
      + tpc_rollback(xid: Xid | str | None = None)
      + tpc_recover(): list[Xid]
  }

  class AsyncConnection {
      + cursor_factory: type[AsyncCursor[Row]]
      + server_cursor_factory: type[AsyncServerCursor[Row]]
      + row_factory: AsyncRowFactory[Row]
  --
      - __init__(pgconn: PGconn, row_factory: AsyncRowFactory[Row] = cast(AsyncRowFactory[Row], tuple_row))
      + cursor(): AsyncCursor[Row]
      + cursor(): AsyncCursor[CursorRow]
      + cursor(name: str): AsyncServerCursor[Row]
      + cursor(name: str): AsyncServerCursor[CursorRow]
      + cursor(name: str = ''): AsyncCursor[Any] | AsyncServerCursor[Any]
  }

  class FileWriter {
      - __init__(file: IO[bytes])
      + write(data: Buffer)
  }

  class Cursor {
      - __init__(connection: Connection[Row])
      - __init__(connection: Connection[Any])
      - __init__(connection: Connection[Any])
      + close()
      + row_factory(): RowFactory[Row]
      + row_factory(row_factory: RowFactory[Row])
      + execute(query: Query, params: Params | None = None): Self
      + executemany(query: Query, params_seq: Iterable[Params])
      + stream(query: Query, params: Params | None = None): Iterator[Row]
      + fetchone(): Row | None
      + fetchmany(size: int = 0): list[Row]
      + fetchall(): list[Row]
      + scroll(value: int, mode: str = 'relative')
      + copy(statement: Query, params: Params | None = None): Iterator[Copy]
  }

  class AsyncCursor {
      - __init__(connection: AsyncConnection[Row])
      - __init__(connection: AsyncConnection[Any])
      - __init__(connection: AsyncConnection[Any])
      + row_factory(): AsyncRowFactory[Row]
      + row_factory(row_factory: AsyncRowFactory[Row])
  }

  class DBAPITypeObject {
      - __init__(name: str, oids: Sequence[int])
  }

  class Binary {
      - __init__(obj)
  }

  class BinaryBinaryDumper {
      + dump(obj: Buffer | Binary): Buffer | None
  }

  class BinaryTextDumper {
      + dump(obj: Buffer | Binary): Buffer | None
  }

  class FinishedPGconn <<dataclass>> {
      + info: list[ConninfoOption] = field(default_factory=list)
      + db: bytes = b''
      + user: bytes = b''
      + password: bytes = b''
      + host: bytes = b''
      + hostaddr: bytes = b''
      + port: bytes = b''
      + tty: bytes = b''
      + options: bytes = b''
      + status: int = ConnStatus.BAD.value
      + transaction_status: int = TransactionStatus.UNKNOWN.value
      + pipeline_status: int = PipelineStatus.OFF.value
      + error_message: bytes = b''
      + server_version: int = 0
      + backend_pid: int = 0
      + needs_password: bool = False
      + used_password: bool = False
      + ssl_in_use: bool = False
      + nonblocking: int = 0
      + notice_handler: Callable[[PGresult], None] | None = None
      + notify_handler: Callable[[PGnotify], None] | None = None
  --
      + {classmethod} connect(cls): NoReturn
      + {classmethod} connect_start(cls): NoReturn
      + connect_poll(): NoReturn
      + finish()
      + reset(): NoReturn
      + get_error_message(encoding: str = ''): str
      + reset_start(): NoReturn
      + reset_poll(): NoReturn
      + {classmethod} ping(cls): NoReturn
      + parameter_status(): NoReturn
      + socket(): NoReturn
      + exec_(): NoReturn
      + send_query()
      + exec_params(): NoReturn
      + send_query_params(): NoReturn
      + send_prepare(): NoReturn
      + send_query_prepared(): NoReturn
      + prepare(): NoReturn
      + exec_prepared(): NoReturn
      + describe_prepared(): NoReturn
      + send_describe_prepared(): NoReturn
      + describe_portal(): NoReturn
      + send_describe_portal(): NoReturn
      + close_prepared(): NoReturn
      + send_close_prepared(): NoReturn
      + close_portal(): NoReturn
      + send_close_portal(): NoReturn
      + get_result(): NoReturn
      + consume_input(): NoReturn
      + is_busy(): NoReturn
      + flush(): NoReturn
      + set_single_row_mode(): NoReturn
      + set_chunked_rows_mode(size: int): NoReturn
      + cancel_conn(): NoReturn
      + get_cancel(): NoReturn
      + notifies(): NoReturn
      + put_copy_data(): NoReturn
      + put_copy_end(): NoReturn
      + get_copy_data(): NoReturn
      + trace(): NoReturn
      + set_trace_flags(): NoReturn
      + untrace(): NoReturn
      + encrypt_password(): NoReturn
      + change_password(): NoReturn
      + make_empty_result(): NoReturn
      + enter_pipeline_mode(): NoReturn
      + exit_pipeline_mode(): NoReturn
      + pipeline_sync(): NoReturn
      + send_flush_request(): NoReturn
  }

  class Warning {
  }

  class Error {
      + sqlstate: str | None = None
  --
      - __init__()
      + pgconn(): PGconn | None
      + pgresult(): PGresult | None
      + diag(): Diagnostic
  }

  class InterfaceError {
  }

  class DatabaseError {
  }

  class DataError {
  }

  class OperationalError {
  }

  class IntegrityError {
  }

  class InternalError {
  }

  class ProgrammingError {
  }

  class NotSupportedError {
  }

  class ConnectionTimeout {
  }

  class CancellationTimeout {
  }

  class PipelineAborted {
  }

  class Diagnostic {
      - __init__(info: ErrorInfo, encoding: str = 'utf-8')
      + severity(): str | None
      + severity_nonlocalized(): str | None
      + sqlstate(): str | None
      + message_primary(): str | None
      + message_detail(): str | None
      + message_hint(): str | None
      + statement_position(): str | None
      + internal_position(): str | None
      + internal_query(): str | None
      + context(): str | None
      + schema_name(): str | None
      + table_name(): str | None
      + column_name(): str | None
      + datatype_name(): str | None
      + constraint_name(): str | None
      + source_file(): str | None
      + source_line(): str | None
      + source_function(): str | None
  }

  class NoData {
  }

  class NoAdditionalDynamicResultSetsReturned {
  }

  class SqlStatementNotYetComplete {
  }

  class ConnectionException {
  }

  class SqlclientUnableToEstablishSqlconnection {
  }

  class ConnectionDoesNotExist {
  }

  class SqlserverRejectedEstablishmentOfSqlconnection {
  }

  class ConnectionFailure {
  }

  class TransactionResolutionUnknown {
  }

  class ProtocolViolation {
  }

  class TriggeredActionException {
  }

  class FeatureNotSupported {
  }

  class InvalidTransactionInitiation {
  }

  class LocatorException {
  }

  class InvalidLocatorSpecification {
  }

  class InvalidGrantor {
  }

  class InvalidGrantOperation {
  }

  class InvalidRoleSpecification {
  }

  class DiagnosticsException {
  }

  class StackedDiagnosticsAccessedWithoutActiveHandler {
  }

  class CaseNotFound {
  }

  class CardinalityViolation {
  }

  class DataException {
  }

  class StringDataRightTruncation {
  }

  class NullValueNoIndicatorParameter {
  }

  class NumericValueOutOfRange {
  }

  class NullValueNotAllowed {
  }

  class ErrorInAssignment {
  }

  class InvalidDatetimeFormat {
  }

  class DatetimeFieldOverflow {
  }

  class InvalidTimeZoneDisplacementValue {
  }

  class EscapeCharacterConflict {
  }

  class InvalidUseOfEscapeCharacter {
  }

  class InvalidEscapeOctet {
  }

  class ZeroLengthCharacterString {
  }

  class MostSpecificTypeMismatch {
  }

  class SequenceGeneratorLimitExceeded {
  }

  class NotAnXmlDocument {
  }

  class InvalidXmlDocument {
  }

  class InvalidXmlContent {
  }

  class InvalidXmlComment {
  }

  class InvalidXmlProcessingInstruction {
  }

  class InvalidIndicatorParameterValue {
  }

  class SubstringError {
  }

  class DivisionByZero {
  }

  class InvalidPrecedingOrFollowingSize {
  }

  class InvalidArgumentForNtileFunction {
  }

  class IntervalFieldOverflow {
  }

  class InvalidArgumentForNthValueFunction {
  }

  class InvalidCharacterValueForCast {
  }

  class InvalidEscapeCharacter {
  }

  class InvalidRegularExpression {
  }

  class InvalidArgumentForLogarithm {
  }

  class InvalidArgumentForPowerFunction {
  }

  class InvalidArgumentForWidthBucketFunction {
  }

  class InvalidRowCountInLimitClause {
  }

  class InvalidRowCountInResultOffsetClause {
  }

  class CharacterNotInRepertoire {
  }

  class IndicatorOverflow {
  }

  class InvalidParameterValue {
  }

  class UnterminatedCString {
  }

  class InvalidEscapeSequence {
  }

  class StringDataLengthMismatch {
  }

  class TrimError {
  }

  class ArraySubscriptError {
  }

  class InvalidTablesampleRepeat {
  }

  class InvalidTablesampleArgument {
  }

  class DuplicateJsonObjectKeyValue {
  }

  class InvalidArgumentForSqlJsonDatetimeFunction {
  }

  class InvalidJsonText {
  }

  class InvalidSqlJsonSubscript {
  }

  class MoreThanOneSqlJsonItem {
  }

  class NoSqlJsonItem {
  }

  class NonNumericSqlJsonItem {
  }

  class NonUniqueKeysInAJsonObject {
  }

  class SingletonSqlJsonItemRequired {
  }

  class SqlJsonArrayNotFound {
  }

  class SqlJsonMemberNotFound {
  }

  class SqlJsonNumberNotFound {
  }

  class SqlJsonObjectNotFound {
  }

  class TooManyJsonArrayElements {
  }

  class TooManyJsonObjectMembers {
  }

  class SqlJsonScalarRequired {
  }

  class SqlJsonItemCannotBeCastToTargetType {
  }

  class FloatingPointException {
  }

  class InvalidTextRepresentation {
  }

  class InvalidBinaryRepresentation {
  }

  class BadCopyFileFormat {
  }

  class UntranslatableCharacter {
  }

  class NonstandardUseOfEscapeCharacter {
  }

  class IntegrityConstraintViolation {
  }

  class RestrictViolation {
  }

  class NotNullViolation {
  }

  class ForeignKeyViolation {
  }

  class UniqueViolation {
  }

  class CheckViolation {
  }

  class ExclusionViolation {
  }

  class InvalidCursorState {
  }

  class InvalidTransactionState {
  }

  class ActiveSqlTransaction {
  }

  class BranchTransactionAlreadyActive {
  }

  class InappropriateAccessModeForBranchTransaction {
  }

  class InappropriateIsolationLevelForBranchTransaction {
  }

  class NoActiveSqlTransactionForBranchTransaction {
  }

  class ReadOnlySqlTransaction {
  }

  class SchemaAndDataStatementMixingNotSupported {
  }

  class HeldCursorRequiresSameIsolationLevel {
  }

  class NoActiveSqlTransaction {
  }

  class InFailedSqlTransaction {
  }

  class IdleInTransactionSessionTimeout {
  }

  class TransactionTimeout {
  }

  class InvalidSqlStatementName {
  }

  class TriggeredDataChangeViolation {
  }

  class InvalidAuthorizationSpecification {
  }

  class InvalidPassword {
  }

  class DependentPrivilegeDescriptorsStillExist {
  }

  class DependentObjectsStillExist {
  }

  class InvalidTransactionTermination {
  }

  class SqlRoutineException {
  }

  class ModifyingSqlDataNotPermitted {
  }

  class ProhibitedSqlStatementAttempted {
  }

  class ReadingSqlDataNotPermitted {
  }

  class FunctionExecutedNoReturnStatement {
  }

  class InvalidCursorName {
  }

  class ExternalRoutineException {
  }

  class ContainingSqlNotPermitted {
  }

  class ModifyingSqlDataNotPermittedExt {
  }

  class ProhibitedSqlStatementAttemptedExt {
  }

  class ReadingSqlDataNotPermittedExt {
  }

  class ExternalRoutineInvocationException {
  }

  class InvalidSqlstateReturned {
  }

  class NullValueNotAllowedExt {
  }

  class TriggerProtocolViolated {
  }

  class SrfProtocolViolated {
  }

  class EventTriggerProtocolViolated {
  }

  class SavepointException {
  }

  class InvalidSavepointSpecification {
  }

  class InvalidCatalogName {
  }

  class InvalidSchemaName {
  }

  class TransactionRollback {
  }

  class SerializationFailure {
  }

  class TransactionIntegrityConstraintViolation {
  }

  class StatementCompletionUnknown {
  }

  class DeadlockDetected {
  }

  class SyntaxErrorOrAccessRuleViolation {
  }

  class InsufficientPrivilege {
  }

  class SyntaxError {
  }

  class InvalidName {
  }

  class InvalidColumnDefinition {
  }

  class NameTooLong {
  }

  class DuplicateColumn {
  }

  class AmbiguousColumn {
  }

  class UndefinedColumn {
  }

  class UndefinedObject {
  }

  class DuplicateObject {
  }

  class DuplicateAlias {
  }

  class DuplicateFunction {
  }

  class AmbiguousFunction {
  }

  class GroupingError {
  }

  class DatatypeMismatch {
  }

  class WrongObjectType {
  }

  class InvalidForeignKey {
  }

  class CannotCoerce {
  }

  class UndefinedFunction {
  }

  class GeneratedAlways {
  }

  class ReservedName {
  }

  class UndefinedTable {
  }

  class UndefinedParameter {
  }

  class DuplicateCursor {
  }

  class DuplicateDatabase {
  }

  class DuplicatePreparedStatement {
  }

  class DuplicateSchema {
  }

  class DuplicateTable {
  }

  class AmbiguousParameter {
  }

  class AmbiguousAlias {
  }

  class InvalidColumnReference {
  }

  class InvalidCursorDefinition {
  }

  class InvalidDatabaseDefinition {
  }

  class InvalidFunctionDefinition {
  }

  class InvalidPreparedStatementDefinition {
  }

  class InvalidSchemaDefinition {
  }

  class InvalidTableDefinition {
  }

  class InvalidObjectDefinition {
  }

  class IndeterminateDatatype {
  }

  class InvalidRecursion {
  }

  class WindowingError {
  }

  class CollationMismatch {
  }

  class IndeterminateCollation {
  }

  class WithCheckOptionViolation {
  }

  class InsufficientResources {
  }

  class DiskFull {
  }

  class OutOfMemory {
  }

  class TooManyConnections {
  }

  class ConfigurationLimitExceeded {
  }

  class ProgramLimitExceeded {
  }

  class StatementTooComplex {
  }

  class TooManyColumns {
  }

  class TooManyArguments {
  }

  class ObjectNotInPrerequisiteState {
  }

  class ObjectInUse {
  }

  class CantChangeRuntimeParam {
  }

  class LockNotAvailable {
  }

  class UnsafeNewEnumValueUsage {
  }

  class OperatorIntervention {
  }

  class QueryCanceled {
  }

  class AdminShutdown {
  }

  class CrashShutdown {
  }

  class CannotConnectNow {
  }

  class DatabaseDropped {
  }

  class IdleSessionTimeout {
  }

  class SystemError {
  }

  class IoError {
  }

  class UndefinedFile {
  }

  class DuplicateFile {
  }

  class SnapshotTooOld {
  }

  class ConfigFileError {
  }

  class LockFileExists {
  }

  class FdwError {
  }

  class FdwOutOfMemory {
  }

  class FdwDynamicParameterValueNeeded {
  }

  class FdwInvalidDataType {
  }

  class FdwColumnNameNotFound {
  }

  class FdwInvalidDataTypeDescriptors {
  }

  class FdwInvalidColumnName {
  }

  class FdwInvalidColumnNumber {
  }

  class FdwInvalidUseOfNullPointer {
  }

  class FdwInvalidStringFormat {
  }

  class FdwInvalidHandle {
  }

  class FdwInvalidOptionIndex {
  }

  class FdwInvalidOptionName {
  }

  class FdwOptionNameNotFound {
  }

  class FdwReplyHandle {
  }

  class FdwUnableToCreateExecution {
  }

  class FdwUnableToCreateReply {
  }

  class FdwUnableToEstablishConnection {
  }

  class FdwNoSchemas {
  }

  class FdwSchemaNotFound {
  }

  class FdwTableNotFound {
  }

  class FdwFunctionSequenceError {
  }

  class FdwTooManyHandles {
  }

  class FdwInconsistentDescriptorInformation {
  }

  class FdwInvalidAttributeValue {
  }

  class FdwInvalidStringLengthOrBufferLength {
  }

  class FdwInvalidDescriptorFieldIdentifier {
  }

  class PlpgsqlError {
  }

  class RaiseException {
  }

  class NoDataFound {
  }

  class TooManyRows {
  }

  class AssertFailure {
  }

  class InternalError_ {
  }

  class DataCorrupted {
  }

  class IndexCorrupted {
  }

  class PostgresRawQuery {
      + convert(query: Query, vars: Params | None)
      + dump(vars: Params | None)
  }

  class RawCursorMixin {
  }

  class RawCursor {
  }

  class AsyncRawCursor {
  }

  class RawServerCursor {
  }

  class AsyncRawServerCursor {
  }

  class RowMaker {
  }

  class RowFactory {
  }

  class AsyncRowFactory {
  }

  class BaseRowFactory {
  }

  class ServerCursorMixin {
      - __init__(name: str, scrollable: bool | None, withhold: bool)
      + name(): str
      + scrollable(): bool | None
      + withhold(): bool
      + rownumber(): int | None
  }

  class ServerCursor {
      - __init__(connection: Connection[Row], name: str)
      - __init__(connection: Connection[Any], name: str)
      - __init__(connection: Connection[Any], name: str)
      + close()
      + execute(query: Query, params: Params | None = None): Self
      + executemany(query: Query, params_seq: Iterable[Params])
      + fetchone(): Row | None
      + fetchmany(size: int = 0): list[Row]
      + fetchall(): list[Row]
      + scroll(value: int, mode: str = 'relative')
  }

  class AsyncServerCursor {
      - __init__(connection: AsyncConnection[Row], name: str)
      - __init__(connection: AsyncConnection[Any], name: str)
      - __init__(connection: AsyncConnection[Any], name: str)
  }

  class Composable {
      - __init__(obj)
      + as_bytes(context: AdaptContext | None = None): bytes
      + as_string(context: AdaptContext | None = None): str
  }

  class Composed {
      - __init__(seq: Sequence[Any])
      + as_bytes(context: AdaptContext | None = None): bytes
      + join(joiner: SQL | LiteralString): Composed
  }

  class SQL {
      - __init__(obj: LiteralString)
      + as_string(context: AdaptContext | None = None): str
      + as_bytes(context: AdaptContext | None = None): bytes
      + format(): Composed
      + join(seq: Iterable[Composable]): Composed
  }

  class Identifier {
      - __init__()
      + as_bytes(context: AdaptContext | None = None): bytes
  }

  class Literal {
      + as_bytes(context: AdaptContext | None = None): bytes
  }

  class Placeholder {
      - __init__(name: str = '', format: str | PyFormat = PyFormat.AUTO)
      + as_string(context: AdaptContext | None = None): str
      + as_bytes(context: AdaptContext | None = None): bytes
  }

  class Rollback {
      - __init__(transaction: Transaction | AsyncTransaction | None = None)
  }

  class OutOfOrderTransactionNesting {
  }

  class BaseTransaction {
      - __init__(connection: ConnectionType, savepoint_name: str | None = None, force_rollback: bool = False)
      + savepoint_name(): str | None
  }

  class Transaction {
      + connection(): Connection[Any]
  }

  class AsyncTransaction {
      + connection(): AsyncConnection[Any]
  }

  class FakeGenericMeta {
  }

  class Queue {
      + get(block: bool = True, timeout: float | None = None): T
  }

  class AQueue {
  }

  class AdaptersMap {
      + types: TypesRegistry
  --
      - __init__(template: AdaptersMap | None = None, types: TypesRegistry | None = None)
      + adapters(): AdaptersMap
      + connection(): BaseConnection[Any] | None
      + register_dumper(cls: type | str | None, dumper: type[Dumper])
      + register_loader(oid: int | str, loader: type[Loader])
      + get_dumper(cls: type, format: PyFormat): type[Dumper]
      + get_dumper_by_oid(oid: int, format: pq.Format): type[Dumper]
      + get_loader(oid: int, format: pq.Format): type[Loader] | None
  }

  class Capabilities {
      - __init__()
      + has_encrypt_password(check: bool = False): bool
      + has_hostaddr(check: bool = False): bool
      + has_pipeline(check: bool = False): bool
      + has_set_trace_flags(check: bool = False): bool
      + has_cancel_safe(check: bool = False): bool
      + has_stream_chunked(check: bool = False): bool
      + has_send_close_prepared(check: bool = False): bool
  }

  class Column {
      - __init__(cursor: BaseCursor[Any, Any], index: int)
      + type_display(): str
      + name(): str
      + type_code(): int
      + display_size(): int | None
      + internal_size(): int | None
      + precision(): int | None
      + scale(): int | None
      + null_ok(): bool | None
  }

  class Notify {
      + channel: str
      + payload: str
      + pid: int
  }

  class BaseConnection {
      + Warning = e.Warning
      + Error = e.Error
      + InterfaceError = e.InterfaceError
      + DatabaseError = e.DatabaseError
      + DataError = e.DataError
      + OperationalError = e.OperationalError
      + IntegrityError = e.IntegrityError
      + InternalError = e.InternalError
      + ProgrammingError = e.ProgrammingError
      + NotSupportedError = e.NotSupportedError
  --
      - __init__(pgconn: PGconn)
      + closed(): bool
      + broken(): bool
      + autocommit(): bool
      + autocommit(value: bool)
      + isolation_level(): IsolationLevel | None
      + isolation_level(value: IsolationLevel | None)
      + read_only(): bool | None
      + read_only(value: bool | None)
      + deferrable(): bool | None
      + deferrable(value: bool | None)
      + info(): ConnectionInfo
      + adapters(): AdaptersMap
      + connection(): BaseConnection[Row]
      + fileno(): int
      + cancel()
      + add_notice_handler(callback: NoticeHandler)
      + remove_notice_handler(callback: NoticeHandler)
      + add_notify_handler(callback: NotifyHandler)
      + remove_notify_handler(callback: NotifyHandler)
      + prepare_threshold(): int | None
      + prepare_threshold(value: int | None)
      + prepared_max(): int | None
      + prepared_max(value: int | None)
      + xid(format_id: int, gtrid: str, bqual: str): Xid
  }

  class ConnectionInfo {
      - __init__(pgconn: pq.abc.PGconn)
      + vendor(): str
      + host(): str
      + hostaddr(): str
      + port(): int
      + dbname(): str
      + user(): str
      + password(): str
      + options(): str
      + get_parameters(): dict[str, str]
      + dsn(): str
      + status(): pq.ConnStatus
      + transaction_status(): pq.TransactionStatus
      + pipeline_status(): pq.PipelineStatus
      + parameter_status(param_name: str): str | None
      + server_version(): int
      + backend_pid(): int
      + error_message(): str
      + timezone(): tzinfo
      + encoding(): str
  }

  class ParamDef <<dataclass>> {
      + keyword: str
      + envvar: str
      + compiled: str | None
  }

  class Copy {
      + writer: Writer
  --
      - __init__(cursor: Cursor[Any])
      + read(): Buffer
      + rows(): Iterator[tuple[Any, ...]]
      + read_row(): tuple[Any, ...] | None
      + write(buffer: Buffer | str)
      + write_row(row: Sequence[Any])
      + finish(exc: BaseException | None)
  }

  class Writer {
      + write(data: Buffer)
      + finish(exc: BaseException | None = None)
  }

  class LibpqWriter {
      - __init__(cursor: Cursor[Any])
      + write(data: Buffer)
      + finish(exc: BaseException | None = None)
  }

  class QueuedLibpqWriter {
      - __init__(cursor: Cursor[Any])
      + worker()
      + write(data: Buffer)
      + finish(exc: BaseException | None = None)
  }

  class AsyncCopy {
      + writer: AsyncWriter
  --
      - __init__(cursor: AsyncCursor[Any])
  }

  class AsyncWriter {
  }

  class AsyncLibpqWriter {
      - __init__(cursor: AsyncCursor[Any])
  }

  class AsyncQueuedLibpqWriter {
      - __init__(cursor: AsyncCursor[Any])
  }

  class BaseCopy {
      + formatter: Formatter
  --
      - __init__(cursor: BaseCursor[ConnectionType, Any])
      + set_types(types: Sequence[int | str])
  }

  class Formatter {
      + format: pq.Format
  --
      - __init__(transformer: Transformer)
      + parse_row(data: Buffer): tuple[Any, ...] | None
      + write(buffer: Buffer | str): Buffer
      + write_row(row: Sequence[Any]): Buffer
      + end(): Buffer
  }

  class TextFormatter {
      + format = TEXT
  --
      - __init__(transformer: Transformer, encoding: str = 'utf-8')
      + parse_row(data: Buffer): tuple[Any, ...] | None
      + write(buffer: Buffer | str): Buffer
      + write_row(row: Sequence[Any]): Buffer
      + end(): Buffer
  }

  class BinaryFormatter {
      + format = BINARY
  --
      - __init__(transformer: Transformer)
      + parse_row(data: Buffer): tuple[Any, ...] | None
      + write(buffer: Buffer | str): Buffer
      + write_row(row: Sequence[Any]): Buffer
      + end(): Buffer
  }

  class BaseCursor {
      - __init__(connection: ConnectionType)
      + connection(): ConnectionType
      + adapters(): adapt.AdaptersMap
      + closed(): bool
      + description(): list[Column] | None
      + rowcount(): int
      + rownumber(): int | None
      + setinputsizes(sizes: Sequence[Any])
      + setoutputsize(size, column: int | None = None)
      + nextset(): bool | None
      + statusmessage(): str | None
  }

  class HostPort {
      + host: str
      + port: str
      + totry: bool = False
      + target: str | None = None
  }

  class Rfc2782Resolver {
      + re_srv_rr = re.compile('^(?P<service>_[^\\.]+)\\.(?P<proto>_[^\\.]+)\\.(?P<target>.+)')
  --
      + resolve(params: dict[str, Any]): dict[str, Any]
      + sort_rfc2782(ans: Sequence[SRV]): list[SRV]
  }

  class Wait {
      + R = EVENT_READ
      + W = EVENT_WRITE
      + RW = EVENT_READ | EVENT_WRITE
  }

  class Ready {
      + NONE = 0
      + R = EVENT_READ
      + W = EVENT_WRITE
      + RW = EVENT_READ | EVENT_WRITE
  }

  class PyFormat {
      + AUTO = 's'
      + TEXT = 't'
      + BINARY = 'b'
  --
      + {classmethod} from_pq(cls, fmt: pq.Format): 'PyFormat'
      + {classmethod} as_pq(cls, fmt: 'PyFormat'): pq.Format
  }

  class IsolationLevel {
      + READ_UNCOMMITTED = 1
      + READ_COMMITTED = 2
      + REPEATABLE_READ = 3
      + SERIALIZABLE = 4
  }

  class BasePipeline {
      + command_queue: Deque[PipelineCommand]
      + result_queue: Deque[PendingResult]
  --
      - __init__(conn: BaseConnection[Any])
      + status(): pq.PipelineStatus
      + {classmethod} is_supported(cls): bool
  }

  class Pipeline {
      - __init__(conn: Connection[Any])
      + sync()
  }

  class AsyncPipeline {
      - __init__(conn: AsyncConnection[Any])
  }

  class Prepare {
      + NO = auto()
      + YES = auto()
      + SHOULD = auto()
  }

  class PrepareManager {
      + prepare_threshold: int | None = 5
      + prepared_max: int = 100
  --
      - __init__()
      + {static} key(query: PostgresQuery): Key
      + get(query: PostgresQuery, prepare: bool | None = None): tuple[Prepare, bytes]
      + maybe_add_to_cache(query: PostgresQuery, prep: Prepare, name: bytes): Key | None
      + validate(key: Key, prep: Prepare, name: bytes, results: Sequence[PGresult])
      + clear(): bool
      + maintain_gen(conn: BaseConnection[Any]): PQGen[None]
  }

  class Transformer {
      + types: tuple[int, ...] | None
      + formats: list[pq.Format] | None
  --
      - __init__(context: AdaptContext | None = None)
      + {classmethod} from_context(cls, context: AdaptContext | None): Transformer
      + connection(): BaseConnection[Any] | None
      + encoding(): str
      + adapters(): AdaptersMap
      + pgresult(): PGresult | None
      + set_pgresult(result: PGresult | None)
      + set_dumper_types(types: Sequence[int], format: pq.Format)
      + set_loader_types(types: Sequence[int], format: pq.Format)
      + dump_sequence(params: Sequence[Any], formats: Sequence[PyFormat]): Sequence[Buffer | None]
      + as_literal(obj): bytes
      + get_dumper(obj, format: PyFormat): abc.Dumper
      + get_dumper_by_oid(oid: int, format: pq.Format): abc.Dumper
      + load_rows(row0: int, row1: int, make_row: RowMaker[Row]): list[Row]
      + load_row(row: int, make_row: RowMaker[Row]): Row | None
      + load_sequence(record: Sequence[Buffer | None]): tuple[Any, ...]
      + get_loader(oid: int, format: pq.Format): abc.Loader
  }

  class QueryPart {
      + pre: bytes
      + item: int | str
      + format: PyFormat
  }

  class PostgresQuery {
      - __init__(transformer: Transformer)
      + convert(query: Query, vars: Params | None)
      + dump(vars: Params | None)
      + {static} is_params_sequence(vars: Params): TypeGuard[Sequence[Any]]
      + {static} validate_and_reorder_params(parts: list[QueryPart], vars: Params, order: list[str] | None): Sequence[Any]
  }

  class PostgresClientQuery {
      + convert(query: Query, vars: Params | None)
      + dump(vars: Params | None)
  }

  class UnpackLen {
  }

  class Xid <<dataclass>> {
      + format_id: int | None
      + gtrid: str
      + bqual: str | None
      + prepared: dt.datetime | None = None
      + owner: str | None = None
      + database: str | None = None
  --
      + {classmethod} from_string(cls, s: str): Xid
      + {classmethod} from_parts(cls, format_id: int | None, gtrid: str, bqual: str | None): Xid
  }

  class TypeInfo {
      - __init__(name: str, oid: int, array_oid: int)
      + {classmethod} fetch(cls: type[T], conn: Connection[Any], name: str | sql.Identifier): T | None
      + {classmethod} fetch(cls: type[T], conn: BaseConnection[Any], name: str | sql.Identifier): Any
      + register(context: AdaptContext | None = None)
      + get_type_display(oid: int | None = None, fmod: int | None = None): str
      + get_display_size(fmod: int): int | None
      + get_precision(fmod: int): int | None
      + get_scale(fmod: int): int | None
  }

  class TypesRegistry {
      - __init__(template: TypesRegistry | None = None)
      + clear()
      + add(info: TypeInfo)
      + get(key: str | int): TypeInfo | None
      + get(key: tuple[type[T], int]): T | None
      + get(key: RegistryKey): TypeInfo | None
      + get_oid(name: str): int
      + get_by_subtype(cls: type[T], subtype: int | str): T | None
  }

  class TypeModifier {
      - __init__(oid: int)
      + get_modifier(typemod: int): tuple[int, ...] | None
      + get_display_size(typemod: int): int | None
      + get_precision(typemod: int): int | None
      + get_scale(typemod: int): int | None
  }

  class NumericTypeModifier {
      + get_modifier(typemod: int): tuple[int, ...] | None
      + get_precision(typemod: int): int | None
      + get_scale(typemod: int): int | None
  }

  class CharTypeModifier {
      + get_modifier(typemod: int): tuple[int, ...] | None
      + get_display_size(typemod: int): int | None
  }

  class BitTypeModifier {
      + get_modifier(typemod: int): tuple[int, ...] | None
      + get_display_size(typemod: int): int | None
  }

  class TimeTypeModifier {
      + get_modifier(typemod: int): tuple[int, ...] | None
      + get_precision(typemod: int): int | None
  }

  class Int2 {
  }

  class Int4 {
  }

  class Int8 {
  }

  class IntNumeric {
  }

  class Float4 {
  }

  class Float8 {
  }

  class Oid {
  }

}

package crdb {
  class CrdbConnection {
  }

  class AsyncCrdbConnection {
  }

  class CrdbConnectionInfo {
      + vendor(): str
      + server_version(): int
      + {classmethod} parse_crdb_version(sver: str): int | None
  }

  class CrdbEnumDumper {
      + oid = TEXT_OID
  }

  class CrdbEnumBinaryDumper {
      + oid = TEXT_OID
  }

  class CrdbNoneDumper {
      + oid = TEXT_OID
  }

}

package pq {
  class PGconn {
      + notice_handler: Callable[[PGresult], None] | None
      + notify_handler: Callable[[PGnotify], None] | None
  --
      + {classmethod} connect(cls, conninfo: bytes): Self
      + {classmethod} connect_start(cls, conninfo: bytes): Self
      + connect_poll(): int
      + finish()
      + info(): list[ConninfoOption]
      + reset()
      + reset_start()
      + reset_poll(): int
      + {classmethod} ping(conninfo: bytes): int
      + db(): bytes
      + user(): bytes
      + password(): bytes
      + host(): bytes
      + hostaddr(): bytes
      + port(): bytes
      + tty(): bytes
      + options(): bytes
      + status(): int
      + transaction_status(): int
      + parameter_status(name: bytes): bytes | None
      + error_message(): bytes
      + get_error_message(encoding: str = ...): str
      + server_version(): int
      + socket(): int
      + backend_pid(): int
      + needs_password(): bool
      + used_password(): bool
      + ssl_in_use(): bool
      + exec_(command: bytes): PGresult
      + send_query(command: bytes)
      + exec_params(command: bytes, param_values: Sequence[Buffer | None] | None, param_types: Sequence[int] | None = None, param_formats: Sequence[int] | None = None, result_format: int = Format.TEXT): PGresult
      + send_query_params(command: bytes, param_values: Sequence[Buffer | None] | None, param_types: Sequence[int] | None = None, param_formats: Sequence[int] | None = None, result_format: int = Format.TEXT)
      + send_prepare(name: bytes, command: bytes, param_types: Sequence[int] | None = None)
      + send_query_prepared(name: bytes, param_values: Sequence[Buffer | None] | None, param_formats: Sequence[int] | None = None, result_format: int = Format.TEXT)
      + prepare(name: bytes, command: bytes, param_types: Sequence[int] | None = None): PGresult
      + exec_prepared(name: bytes, param_values: Sequence[Buffer] | None, param_formats: Sequence[int] | None = None, result_format: int = 0): PGresult
      + describe_prepared(name: bytes): PGresult
      + send_describe_prepared(name: bytes)
      + describe_portal(name: bytes): PGresult
      + send_describe_portal(name: bytes)
      + close_prepared(name: bytes): PGresult
      + send_close_prepared(name: bytes)
      + close_portal(name: bytes): PGresult
      + send_close_portal(name: bytes)
      + get_result(): PGresult | None
      + consume_input()
      + is_busy(): int
      + nonblocking(): int
      + nonblocking(arg: int)
      + flush(): int
      + set_single_row_mode()
      + set_chunked_rows_mode(size: int)
      + cancel_conn(): PGcancelConn
      + get_cancel(): PGcancel
      + notifies(): PGnotify | None
      + put_copy_data(buffer: Buffer): int
      + put_copy_end(error: bytes | None = None): int
      + get_copy_data(async_: int): tuple[int, memoryview]
      + trace(fileno: int)
      + set_trace_flags(flags: Trace)
      + untrace()
      + encrypt_password(passwd: bytes, user: bytes, algorithm: bytes | None = None): bytes
      + change_password(user: bytes, passwd: bytes)
      + make_empty_result(exec_status: int): PGresult
      + pipeline_status(): int
      + enter_pipeline_mode()
      + exit_pipeline_mode()
      + pipeline_sync()
      + send_flush_request()
  }

  class PGresult {
      + clear()
      + status(): int
      + error_message(): bytes
      + get_error_message(encoding: str = ...): str
      + error_field(fieldcode: int): bytes | None
      + ntuples(): int
      + nfields(): int
      + fname(column_number: int): bytes | None
      + ftable(column_number: int): int
      + ftablecol(column_number: int): int
      + fformat(column_number: int): int
      + ftype(column_number: int): int
      + fmod(column_number: int): int
      + fsize(column_number: int): int
      + binary_tuples(): int
      + get_value(row_number: int, column_number: int): bytes | None
      + nparams(): int
      + param_type(param_number: int): int
      + command_status(): bytes | None
      + command_tuples(): int | None
      + oid_value(): int
      + set_attributes(descriptions: list[PGresAttDesc])
  }

  class PGcancelConn {
      + start()
      + blocking()
      + poll(): int
      + status(): int
      + socket(): int
      + error_message(): bytes
      + get_error_message(encoding: str = ...): str
      + reset()
      + finish()
  }

  class PGcancel {
      + free()
      + cancel()
  }

  class Conninfo {
      + {classmethod} get_defaults(cls): list[ConninfoOption]
      + {classmethod} parse(cls, conninfo: bytes): list[ConninfoOption]
  }

  class Escaping {
      - __init__(conn: PGconn | None = None)
      + escape_literal(data: Buffer): bytes
      + escape_identifier(data: Buffer): bytes
      + escape_string(data: Buffer): bytes
      + escape_bytea(data: Buffer): bytes
      + unescape_bytea(data: Buffer): bytes
  }

  class PGnotify {
      + relname: bytes
      + be_pid: int
      + extra: bytes
  }

  class ConninfoOption {
      + keyword: bytes
      + envvar: bytes | None
      + compiled: bytes | None
      + val: bytes | None
      + label: bytes
      + dispchar: bytes
      + dispsize: int
  }

  class PGresAttDesc {
      + name: bytes
      + tableid: int
      + columnid: int
      + format: int
      + typid: int
      + typlen: int
      + atttypmod: int
  }

  class PGconn {
      - __init__(pgconn_ptr: impl.PGconn_struct)
      + {classmethod} connect(cls, conninfo: bytes): PGconn
      + {classmethod} connect_start(cls, conninfo: bytes): PGconn
      + connect_poll(): int
      + finish()
      + pgconn_ptr(): int | None
      + info(): list[ConninfoOption]
      + reset()
      + reset_start()
      + reset_poll(): int
      + {classmethod} ping(conninfo: bytes): int
      + db(): bytes
      + user(): bytes
      + password(): bytes
      + host(): bytes
      + hostaddr(): bytes
      + port(): bytes
      + tty(): bytes
      + options(): bytes
      + status(): int
      + transaction_status(): int
      + parameter_status(name: bytes): bytes | None
      + error_message(): bytes
      + get_error_message(encoding: str = ''): str
      + protocol_version(): int
      + server_version(): int
      + socket(): int
      + backend_pid(): int
      + needs_password(): bool
      + used_password(): bool
      + ssl_in_use(): bool
      + exec_(command: bytes): PGresult
      + send_query(command: bytes)
      + exec_params(command: bytes, param_values: Sequence[abc.Buffer | None] | None, param_types: Sequence[int] | None = None, param_formats: Sequence[int] | None = None, result_format: int = Format.TEXT): PGresult
      + send_query_params(command: bytes, param_values: Sequence[abc.Buffer | None] | None, param_types: Sequence[int] | None = None, param_formats: Sequence[int] | None = None, result_format: int = Format.TEXT)
      + send_prepare(name: bytes, command: bytes, param_types: Sequence[int] | None = None)
      + send_query_prepared(name: bytes, param_values: Sequence[abc.Buffer | None] | None, param_formats: Sequence[int] | None = None, result_format: int = Format.TEXT)
      + prepare(name: bytes, command: bytes, param_types: Sequence[int] | None = None): PGresult
      + exec_prepared(name: bytes, param_values: Sequence[abc.Buffer] | None, param_formats: Sequence[int] | None = None, result_format: int = 0): PGresult
      + describe_prepared(name: bytes): PGresult
      + send_describe_prepared(name: bytes)
      + describe_portal(name: bytes): PGresult
      + send_describe_portal(name: bytes)
      + close_prepared(name: bytes): PGresult
      + send_close_prepared(name: bytes)
      + close_portal(name: bytes): PGresult
      + send_close_portal(name: bytes)
      + get_result(): PGresult | None
      + consume_input()
      + is_busy(): int
      + nonblocking(): int
      + nonblocking(arg: int)
      + flush(): int
      + set_single_row_mode()
      + set_chunked_rows_mode(size: int)
      + cancel_conn(): PGcancelConn
      + get_cancel(): PGcancel
      + notifies(): PGnotify | None
      + put_copy_data(buffer: abc.Buffer): int
      + put_copy_end(error: bytes | None = None): int
      + get_copy_data(async_: int): tuple[int, memoryview]
      + trace(fileno: int)
      + set_trace_flags(flags: Trace)
      + untrace()
      + encrypt_password(passwd: bytes, user: bytes, algorithm: bytes | None = None): bytes
      + change_password(user: bytes, passwd: bytes)
      + make_empty_result(exec_status: int): PGresult
      + pipeline_status(): int
      + enter_pipeline_mode()
      + exit_pipeline_mode()
      + pipeline_sync()
      + send_flush_request()
  }

  class PGresult {
      - __init__(pgresult_ptr: impl.PGresult_struct)
      + clear()
      + pgresult_ptr(): int | None
      + status(): int
      + error_message(): bytes
      + get_error_message(encoding: str = 'utf-8'): str
      + error_field(fieldcode: int): bytes | None
      + ntuples(): int
      + nfields(): int
      + fname(column_number: int): bytes | None
      + ftable(column_number: int): int
      + ftablecol(column_number: int): int
      + fformat(column_number: int): int
      + ftype(column_number: int): int
      + fmod(column_number: int): int
      + fsize(column_number: int): int
      + binary_tuples(): int
      + get_value(row_number: int, column_number: int): bytes | None
      + nparams(): int
      + param_type(param_number: int): int
      + command_status(): bytes | None
      + command_tuples(): int | None
      + oid_value(): int
      + set_attributes(descriptions: list[PGresAttDesc])
  }

  class PGcancelConn {
      - __init__(pgcancelconn_ptr: impl.PGcancelConn_struct)
      + start()
      + blocking()
      + poll(): int
      + status(): int
      + socket(): int
      + error_message(): bytes
      + get_error_message(encoding: str = 'utf-8'): str
      + reset()
      + finish()
  }

  class PGcancel {
      - __init__(pgcancel_ptr: impl.PGcancel_struct)
      + free()
      + cancel()
  }

  class Conninfo {
      + {classmethod} get_defaults(cls): list[ConninfoOption]
      + {classmethod} parse(cls, conninfo: bytes): list[ConninfoOption]
  }

  class Escaping {
      - __init__(conn: PGconn | None = None)
      + escape_literal(data: abc.Buffer): bytes
      + escape_identifier(data: abc.Buffer): bytes
      + escape_string(data: abc.Buffer): bytes
      + escape_bytea(data: abc.Buffer): bytes
      + unescape_bytea(data: abc.Buffer): bytes
  }

  class PGconnDebug {
      - __init__(pgconn: abc.PGconn)
      + {classmethod} connect(cls, conninfo: bytes): Self
      + {classmethod} connect_start(cls, conninfo: bytes): Self
      + {classmethod} ping(conninfo: bytes): int
  }

  class ConnStatus {
      + OK = 0
      + BAD = auto()
      + STARTED = auto()
      + MADE = auto()
      + AWAITING_RESPONSE = auto()
      + AUTH_OK = auto()
      + SETENV = auto()
      + SSL_STARTUP = auto()
      + NEEDED = auto()
      + CHECK_WRITABLE = auto()
      + CONSUME = auto()
      + GSS_STARTUP = auto()
      + CHECK_TARGET = auto()
      + CHECK_STANDBY = auto()
      + ALLOCATED = auto()
  }

  class PollingStatus {
      + FAILED = 0
      + READING = auto()
      + WRITING = auto()
      + OK = auto()
      + ACTIVE = auto()
  }

  class ExecStatus {
      + EMPTY_QUERY = 0
      + COMMAND_OK = auto()
      + TUPLES_OK = auto()
      + COPY_OUT = auto()
      + COPY_IN = auto()
      + BAD_RESPONSE = auto()
      + NONFATAL_ERROR = auto()
      + FATAL_ERROR = auto()
      + COPY_BOTH = auto()
      + SINGLE_TUPLE = auto()
      + PIPELINE_SYNC = auto()
      + PIPELINE_ABORTED = auto()
      + TUPLES_CHUNK = auto()
  }

  class TransactionStatus {
      + IDLE = 0
      + ACTIVE = auto()
      + INTRANS = auto()
      + INERROR = auto()
      + UNKNOWN = auto()
  }

  class Ping {
      + OK = 0
      + REJECT = auto()
      + NO_RESPONSE = auto()
      + NO_ATTEMPT = auto()
  }

  class PipelineStatus {
      + OFF = 0
      + ON = auto()
      + ABORTED = auto()
  }

  class DiagnosticField {
      + SEVERITY = ord('S')
      + SEVERITY_NONLOCALIZED = ord('V')
      + SQLSTATE = ord('C')
      + MESSAGE_PRIMARY = ord('M')
      + MESSAGE_DETAIL = ord('D')
      + MESSAGE_HINT = ord('H')
      + STATEMENT_POSITION = ord('P')
      + INTERNAL_POSITION = ord('p')
      + INTERNAL_QUERY = ord('q')
      + CONTEXT = ord('W')
      + SCHEMA_NAME = ord('s')
      + TABLE_NAME = ord('t')
      + COLUMN_NAME = ord('c')
      + DATATYPE_NAME = ord('d')
      + CONSTRAINT_NAME = ord('n')
      + SOURCE_FILE = ord('F')
      + SOURCE_LINE = ord('L')
      + SOURCE_FUNCTION = ord('R')
  }

  class Format {
      + TEXT = 0
      + BINARY = 1
  }

  class Trace {
      + SUPPRESS_TIMESTAMPS = 1
      + REGRESS_MODE = 2
  }

  class FILE {
  }

  class PGconn_struct {
  }

  class PGresult_struct {
  }

  class PQconninfoOption_struct {
  }

  class PGnotify_struct {
  }

  class PGcancelConn_struct {
  }

  class PGcancel_struct {
  }

  class PGresAttDesc_struct {
  }

}

package types {
  class BaseListDumper {
      + element_oid = INVALID_OID
  --
      - __init__(cls: type, context: AdaptContext | None = None)
  }

  class ListDumper {
      + delimiter = b','
  --
      + get_key(obj: list[Any], format: PyFormat): DumperKey
      + upgrade(obj: list[Any], format: PyFormat): BaseListDumper
      + dump(obj: list[Any]): Buffer | None
  }

  class ListBinaryDumper {
      + format = pq.Format.BINARY
  --
      + get_key(obj: list[Any], format: PyFormat): DumperKey
      + upgrade(obj: list[Any], format: PyFormat): BaseListDumper
      + dump(obj: list[Any]): Buffer | None
  }

  class ArrayLoader {
      + delimiter = b','
      + base_oid: int
  --
      + load(data: Buffer): list[Any]
  }

  class ArrayBinaryLoader {
      + format = pq.Format.BINARY
  --
      + load(data: Buffer): list[Any]
  }

  class BoolDumper {
      + oid = _oids.BOOL_OID
  --
      + dump(obj: bool): Buffer | None
      + quote(obj: bool): Buffer
  }

  class BoolBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.BOOL_OID
  --
      + dump(obj: bool): Buffer | None
  }

  class BoolLoader {
      + load(data: Buffer): bool
  }

  class BoolBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): bool
  }

  class CompositeInfo {
      - __init__(name: str, oid: int, array_oid: int)
  }

  class SequenceDumper {
  }

  class TupleDumper {
      + dump(obj: tuple[Any, ...]): Buffer | None
  }

  class TupleBinaryDumper {
      + format = pq.Format.BINARY
  --
      - __init__(cls: type, context: abc.AdaptContext | None = None)
      + dump(obj: tuple[Any, ...]): Buffer | None
  }

  class BaseCompositeLoader {
      - __init__(oid: int, context: abc.AdaptContext | None = None)
  }

  class RecordLoader {
      + load(data: abc.Buffer): tuple[Any, ...]
  }

  class RecordBinaryLoader {
      + format = pq.Format.BINARY
  --
      - __init__(oid: int, context: abc.AdaptContext | None = None)
      + load(data: abc.Buffer): tuple[Any, ...]
  }

  class CompositeLoader {
      + factory: Callable[..., Any]
      + fields_types: list[int]
  --
      + load(data: abc.Buffer): Any
  }

  class CompositeBinaryLoader {
      + format = pq.Format.BINARY
      + factory: Callable[..., Any]
  --
      + load(data: abc.Buffer): Any
  }

  class DateDumper {
      + oid = _oids.DATE_OID
  --
      + dump(obj: date): Buffer | None
  }

  class DateBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.DATE_OID
  --
      + dump(obj: date): Buffer | None
  }

  class TimeDumper {
      + oid = _oids.TIME_OID
  --
      + upgrade(obj: time, format: PyFormat): Dumper
  }

  class TimeTzDumper {
      + oid = _oids.TIMETZ_OID
  --
      + dump(obj: time): Buffer | None
  }

  class TimeBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.TIME_OID
  --
      + dump(obj: time): Buffer | None
      + upgrade(obj: time, format: PyFormat): Dumper
  }

  class TimeTzBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.TIMETZ_OID
  --
      + dump(obj: time): Buffer | None
  }

  class DatetimeDumper {
      + oid = _oids.TIMESTAMPTZ_OID
  --
      + upgrade(obj: datetime, format: PyFormat): Dumper
  }

  class DatetimeNoTzDumper {
      + oid = _oids.TIMESTAMP_OID
  }

  class DatetimeBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.TIMESTAMPTZ_OID
  --
      + dump(obj: datetime): Buffer | None
      + upgrade(obj: datetime, format: PyFormat): Dumper
  }

  class DatetimeNoTzBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.TIMESTAMP_OID
  --
      + dump(obj: datetime): Buffer | None
  }

  class TimedeltaDumper {
      + oid = _oids.INTERVAL_OID
  --
      - __init__(cls: type, context: AdaptContext | None = None)
      + dump(obj: timedelta): Buffer | None
  }

  class TimedeltaBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.INTERVAL_OID
  --
      + dump(obj: timedelta): Buffer | None
  }

  class DateLoader {
      - __init__(oid: int, context: AdaptContext | None = None)
      + load(data: Buffer): date
  }

  class DateBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): date
  }

  class TimeLoader {
      + load(data: Buffer): time
  }

  class TimeBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): time
  }

  class TimetzLoader {
      + load(data: Buffer): time
  }

  class TimetzBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): time
  }

  class TimestampLoader {
      - __init__(oid: int, context: AdaptContext | None = None)
      + load(data: Buffer): datetime
  }

  class TimestampBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): datetime
  }

  class TimestamptzLoader {
      - __init__(oid: int, context: AdaptContext | None = None)
      + load(data: Buffer): datetime
  }

  class TimestamptzBinaryLoader {
      + format = Format.BINARY
  --
      - __init__(oid: int, context: AdaptContext | None = None)
      + load(data: Buffer): datetime
  }

  class IntervalLoader {
      - __init__(oid: int, context: AdaptContext | None = None)
      + load(data: Buffer): timedelta
  }

  class IntervalBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): timedelta
  }

  class EnumInfo {
      - __init__(name: str, oid: int, array_oid: int, labels: Sequence[str])
  }

  class EnumDumper {
      - __init__(cls: type, context: AdaptContext | None = None)
      + dump(value: E): Buffer | None
  }

  class EnumBinaryDumper {
      + format = BINARY
  }

  class BaseHstoreDumper {
      + dump(obj: Hstore): Buffer | None
  }

  class HstoreLoader {
      + load(data: Buffer): Hstore
  }

  class Json {
  }

  class Jsonb {
  }

  class JsonDumper {
      + oid = _oids.JSON_OID
  }

  class JsonBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.JSON_OID
  }

  class JsonbDumper {
      + oid = _oids.JSONB_OID
  }

  class JsonbBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.JSONB_OID
  --
      + dump(obj): Buffer | None
  }

  class JsonLoader {
  }

  class JsonbLoader {
  }

  class JsonBinaryLoader {
      + format = Format.BINARY
  }

  class JsonbBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): Any
  }

  class MultirangeInfo {
      - __init__(name: str, oid: int, array_oid: int)
  }

  class Multirange {
      - __init__(items: Iterable[Range[T]] = ())
      + insert(index: int, value: Range[T])
  }

  class Int4Multirange {
  }

  class Int8Multirange {
  }

  class NumericMultirange {
  }

  class DateMultirange {
  }

  class TimestampMultirange {
  }

  class TimestamptzMultirange {
  }

  class BaseMultirangeDumper {
      - __init__(cls: type, context: AdaptContext | None = None)
      + get_key(obj: Multirange[Any], format: PyFormat): DumperKey
      + upgrade(obj: Multirange[Any], format: PyFormat): BaseMultirangeDumper
  }

  class MultirangeDumper {
      + dump(obj: Multirange[Any]): Buffer | None
  }

  class MultirangeBinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj: Multirange[Any]): Buffer | None
  }

  class BaseMultirangeLoader {
      + subtype_oid: int
  --
      - __init__(oid: int, context: AdaptContext | None = None)
  }

  class MultirangeLoader {
      + load(data: Buffer): Multirange[T]
  }

  class MultirangeBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): Multirange[T]
  }

  class Int4MultirangeDumper {
      + oid = _oids.INT4MULTIRANGE_OID
  }

  class Int8MultirangeDumper {
      + oid = _oids.INT8MULTIRANGE_OID
  }

  class NumericMultirangeDumper {
      + oid = _oids.NUMMULTIRANGE_OID
  }

  class DateMultirangeDumper {
      + oid = _oids.DATEMULTIRANGE_OID
  }

  class TimestampMultirangeDumper {
      + oid = _oids.TSMULTIRANGE_OID
  }

  class TimestamptzMultirangeDumper {
      + oid = _oids.TSTZMULTIRANGE_OID
  }

  class Int4MultirangeBinaryDumper {
      + oid = _oids.INT4MULTIRANGE_OID
  }

  class Int8MultirangeBinaryDumper {
      + oid = _oids.INT8MULTIRANGE_OID
  }

  class NumericMultirangeBinaryDumper {
      + oid = _oids.NUMMULTIRANGE_OID
  }

  class DateMultirangeBinaryDumper {
      + oid = _oids.DATEMULTIRANGE_OID
  }

  class TimestampMultirangeBinaryDumper {
      + oid = _oids.TSMULTIRANGE_OID
  }

  class TimestamptzMultirangeBinaryDumper {
      + oid = _oids.TSTZMULTIRANGE_OID
  }

  class Int4MultirangeLoader {
      + subtype_oid = _oids.INT4_OID
  }

  class Int8MultirangeLoader {
      + subtype_oid = _oids.INT8_OID
  }

  class NumericMultirangeLoader {
      + subtype_oid = _oids.NUMERIC_OID
  }

  class DateMultirangeLoader {
      + subtype_oid = _oids.DATE_OID
  }

  class TimestampMultirangeLoader {
      + subtype_oid = _oids.TIMESTAMP_OID
  }

  class TimestampTZMultirangeLoader {
      + subtype_oid = _oids.TIMESTAMPTZ_OID
  }

  class Int4MultirangeBinaryLoader {
      + subtype_oid = _oids.INT4_OID
  }

  class Int8MultirangeBinaryLoader {
      + subtype_oid = _oids.INT8_OID
  }

  class NumericMultirangeBinaryLoader {
      + subtype_oid = _oids.NUMERIC_OID
  }

  class DateMultirangeBinaryLoader {
      + subtype_oid = _oids.DATE_OID
  }

  class TimestampMultirangeBinaryLoader {
      + subtype_oid = _oids.TIMESTAMP_OID
  }

  class TimestampTZMultirangeBinaryLoader {
      + subtype_oid = _oids.TIMESTAMPTZ_OID
  }

  class InterfaceDumper {
      + oid = _oids.INET_OID
  --
      + dump(obj: Interface): Buffer | None
  }

  class NetworkDumper {
      + oid = _oids.CIDR_OID
  --
      + dump(obj: Network): Buffer | None
  }

  class AddressBinaryDumper {
      + dump(obj: Address): Buffer | None
  }

  class InterfaceBinaryDumper {
      + dump(obj: Interface): Buffer | None
  }

  class InetBinaryDumper {
      - __init__(cls: type, context: AdaptContext | None = None)
      + dump(obj: Address | Interface): Buffer | None
  }

  class NetworkBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.CIDR_OID
  --
      + dump(obj: Network): Buffer | None
  }

  class InetLoader {
      + load(data: Buffer): Address | Interface
  }

  class InetBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): Address | Interface
  }

  class CidrLoader {
      + load(data: Buffer): Network
  }

  class CidrBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): Network
  }

  class NoneDumper {
      + dump(obj: None): Buffer | None
      + quote(obj: None): Buffer
  }

  class FloatDumper {
      + oid = _oids.FLOAT8_OID
  }

  class Float4Dumper {
      + oid = _oids.FLOAT4_OID
  }

  class FloatBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.FLOAT8_OID
  --
      + dump(obj: float): Buffer | None
  }

  class Float4BinaryDumper {
      + oid = _oids.FLOAT4_OID
  --
      + dump(obj: float): Buffer | None
  }

  class DecimalDumper {
      + oid = _oids.NUMERIC_OID
  --
      + dump(obj: Decimal): Buffer | None
  }

  class Int2Dumper {
      + oid = _oids.INT2_OID
  }

  class Int4Dumper {
      + oid = _oids.INT4_OID
  }

  class Int8Dumper {
      + oid = _oids.INT8_OID
  }

  class IntNumericDumper {
      + oid = _oids.NUMERIC_OID
  }

  class OidDumper {
      + oid = _oids.OID_OID
  }

  class IntDumper {
      + dump(obj): Buffer | None
      + get_key(obj: int, format: PyFormat): type
      + upgrade(obj: int, format: PyFormat): Dumper
  }

  class Int2BinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj: int): Buffer | None
  }

  class Int4BinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj: int): Buffer | None
  }

  class Int8BinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj: int): Buffer | None
  }

  class IntNumericBinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj: int): Buffer | None
  }

  class OidBinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj: int): Buffer | None
  }

  class IntBinaryDumper {
      + format = Format.BINARY
  }

  class IntLoader {
      + load(data: Buffer): int
  }

  class Int2BinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): int
  }

  class Int4BinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): int
  }

  class Int8BinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): int
  }

  class OidBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): int
  }

  class FloatLoader {
      + load(data: Buffer): float
  }

  class Float4BinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): float
  }

  class Float8BinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): float
  }

  class NumericLoader {
      + load(data: Buffer): Decimal
  }

  class NumericBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): Decimal
  }

  class DecimalBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.NUMERIC_OID
  --
      + dump(obj: Decimal): Buffer | None
  }

  class NumericDumper {
      + dump(obj: Decimal | int | numpy.integer[Any]): Buffer | None
  }

  class NumericBinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj: Decimal | int | numpy.integer[Any]): Buffer | None
  }

  class NPInt16Dumper {
      + oid = _oids.INT2_OID
  }

  class NPInt32Dumper {
      + oid = _oids.INT4_OID
  }

  class NPInt64Dumper {
      + oid = _oids.INT8_OID
  }

  class NPNumericDumper {
      + oid = _oids.NUMERIC_OID
  }

  class NPInt16BinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj): bytes
  }

  class NPInt32BinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj): bytes
  }

  class NPInt64BinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj): bytes
  }

  class NPNumericBinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj): Buffer
  }

  class RangeInfo {
      - __init__(name: str, oid: int, array_oid: int)
  }

  class Range {
      - __init__(lower: T | None = None, upper: T | None = None, bounds: str = '[)', empty: bool = False)
      + lower(): T | None
      + upper(): T | None
      + bounds(): str
      + isempty(): bool
      + lower_inf(): bool
      + upper_inf(): bool
      + lower_inc(): bool
      + upper_inc(): bool
  }

  class Int4Range {
  }

  class Int8Range {
  }

  class NumericRange {
  }

  class DateRange {
  }

  class TimestampRange {
  }

  class TimestamptzRange {
  }

  class BaseRangeDumper {
      - __init__(cls: type, context: AdaptContext | None = None)
      + get_key(obj: Range[Any], format: PyFormat): DumperKey
      + upgrade(obj: Range[Any], format: PyFormat): BaseRangeDumper
  }

  class RangeDumper {
      + dump(obj: Range[Any]): Buffer | None
  }

  class RangeBinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj: Range[Any]): Buffer | None
  }

  class BaseRangeLoader {
      + subtype_oid: int
  --
      - __init__(oid: int, context: AdaptContext | None = None)
  }

  class RangeLoader {
      + load(data: Buffer): Range[T]
  }

  class RangeBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): Range[T]
  }

  class Int4RangeDumper {
      + oid = _oids.INT4RANGE_OID
  }

  class Int8RangeDumper {
      + oid = _oids.INT8RANGE_OID
  }

  class NumericRangeDumper {
      + oid = _oids.NUMRANGE_OID
  }

  class DateRangeDumper {
      + oid = _oids.DATERANGE_OID
  }

  class TimestampRangeDumper {
      + oid = _oids.TSRANGE_OID
  }

  class TimestamptzRangeDumper {
      + oid = _oids.TSTZRANGE_OID
  }

  class Int4RangeBinaryDumper {
      + oid = _oids.INT4RANGE_OID
  }

  class Int8RangeBinaryDumper {
      + oid = _oids.INT8RANGE_OID
  }

  class NumericRangeBinaryDumper {
      + oid = _oids.NUMRANGE_OID
  }

  class DateRangeBinaryDumper {
      + oid = _oids.DATERANGE_OID
  }

  class TimestampRangeBinaryDumper {
      + oid = _oids.TSRANGE_OID
  }

  class TimestamptzRangeBinaryDumper {
      + oid = _oids.TSTZRANGE_OID
  }

  class Int4RangeLoader {
      + subtype_oid = _oids.INT4_OID
  }

  class Int8RangeLoader {
      + subtype_oid = _oids.INT8_OID
  }

  class NumericRangeLoader {
      + subtype_oid = _oids.NUMERIC_OID
  }

  class DateRangeLoader {
      + subtype_oid = _oids.DATE_OID
  }

  class TimestampRangeLoader {
      + subtype_oid = _oids.TIMESTAMP_OID
  }

  class TimestampTZRangeLoader {
      + subtype_oid = _oids.TIMESTAMPTZ_OID
  }

  class Int4RangeBinaryLoader {
      + subtype_oid = _oids.INT4_OID
  }

  class Int8RangeBinaryLoader {
      + subtype_oid = _oids.INT8_OID
  }

  class NumericRangeBinaryLoader {
      + subtype_oid = _oids.NUMERIC_OID
  }

  class DateRangeBinaryLoader {
      + subtype_oid = _oids.DATE_OID
  }

  class TimestampRangeBinaryLoader {
      + subtype_oid = _oids.TIMESTAMP_OID
  }

  class TimestampTZRangeBinaryLoader {
      + subtype_oid = _oids.TIMESTAMPTZ_OID
  }

  class GeometryBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): BaseGeometry
  }

  class GeometryLoader {
      + load(data: Buffer): BaseGeometry
  }

  class BaseGeometryBinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj: BaseGeometry): Buffer | None
  }

  class BaseGeometryDumper {
      + dump(obj: BaseGeometry): Buffer | None
  }

  class StrBinaryDumper {
      + oid = _oids.TEXT_OID
  }

  class StrBinaryDumperVarchar {
      + oid = _oids.VARCHAR_OID
  }

  class StrBinaryDumperName {
      + oid = _oids.NAME_OID
  }

  class StrDumper {
      + oid = _oids.TEXT_OID
  }

  class StrDumperVarchar {
      + oid = _oids.VARCHAR_OID
  }

  class StrDumperName {
      + oid = _oids.NAME_OID
  }

  class StrDumperUnknown {
  }

  class TextLoader {
      - __init__(oid: int, context: AdaptContext | None = None)
      + load(data: Buffer): bytes | str
  }

  class TextBinaryLoader {
      + format = Format.BINARY
  }

  class BytesDumper {
      + oid = _oids.BYTEA_OID
  --
      - __init__(cls: type, context: AdaptContext | None = None)
      + dump(obj: Buffer): Buffer | None
      + quote(obj: Buffer): Buffer
  }

  class BytesBinaryDumper {
      + format = Format.BINARY
      + oid = _oids.BYTEA_OID
  --
      + dump(obj: Buffer): Buffer | None
  }

  class ByteaLoader {
      - __init__(oid: int, context: AdaptContext | None = None)
      + load(data: Buffer): bytes
  }

  class ByteaBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): Buffer
  }

  class UUIDDumper {
      + oid = _oids.UUID_OID
  --
      + dump(obj: uuid.UUID): Buffer | None
  }

  class UUIDBinaryDumper {
      + format = Format.BINARY
  --
      + dump(obj: uuid.UUID): Buffer | None
  }

  class UUIDLoader {
      - __init__(oid: int, context: AdaptContext | None = None)
      + load(data: Buffer): uuid.UUID
  }

  class UUIDBinaryLoader {
      + format = Format.BINARY
  --
      + load(data: Buffer): uuid.UUID
  }

}

package pydantic {
  class AliasPath {
      + path: list[int | str]
  --
      - __init__(first_arg: str)
      + convert_to_aliases(): list[str | int]
      + search_dict_for_path(d: dict): Any
  }

  class AliasChoices {
      + choices: list[str | AliasPath]
  --
      - __init__(first_choice: str | AliasPath)
      + convert_to_aliases(): list[list[str | int]]
  }

  class AliasGenerator {
      + alias: Callable[[str], str] | None = None
      + validation_alias: Callable[[str], str | AliasPath | AliasChoices] | None = None
      + serialization_alias: Callable[[str], str] | None = None
  --
      + generate_aliases(field_name: str): tuple[str | None, str | AliasPath | AliasChoices | None, str | None]
  }

  class GetJsonSchemaHandler {
      + mode: JsonSchemaMode
  --
      + resolve_ref_schema(): JsonSchemaValue
  }

  class GetCoreSchemaHandler {
      + generate_schema(): core_schema.CoreSchema
      + resolve_ref_schema(): core_schema.CoreSchema
      + field_name(): str | None
  }

  class RGBA {
      - __init__(r: float, g: float, b: float, alpha: Optional[float])
  }

  class Color {
      - __init__(value: ColorType)
      + original(): ColorType
      + as_named(): str
      + as_hex(): str
      + as_rgb(): str
      + as_rgb_tuple(): ColorTuple
      + as_hsl(): str
      + as_hsl_tuple(): HslColorTuple
  }

  class ConfigDict {
      + title: str | None
      + model_title_generator: Callable[[type], str] | None
      + field_title_generator: Callable[[str, FieldInfo | ComputedFieldInfo], str] | None
      + str_to_lower: bool
      + str_to_upper: bool
      + str_strip_whitespace: bool
      + str_min_length: int
      + str_max_length: int | None
      + extra: ExtraValues | None
      + frozen: bool
      + populate_by_name: bool
      + use_enum_values: bool
      + validate_assignment: bool
      + arbitrary_types_allowed: bool
      + from_attributes: bool
      + loc_by_alias: bool
      + alias_generator: Callable[[str], str] | AliasGenerator | None
      + ignored_types: tuple[type, ...]
      + allow_inf_nan: bool
      + json_schema_extra: JsonDict | JsonSchemaExtraCallable | None
      + json_encoders: dict[type[object], JsonEncoder] | None
      + strict: bool
      + revalidate_instances: Literal['always', 'never', 'subclass-instances']
      + ser_json_timedelta: Literal['iso8601', 'float']
      + ser_json_bytes: Literal['utf8', 'base64', 'hex']
      + val_json_bytes: Literal['utf8', 'base64', 'hex']
      + ser_json_inf_nan: Literal['null', 'constants', 'strings']
      + validate_default: bool
      + validate_return: bool
      + protected_namespaces: tuple[str | Pattern[str], ...]
      + hide_input_in_errors: bool
      + defer_build: bool
      + plugin_settings: dict[str, object] | None
      + schema_generator: type[_GenerateSchema] | None
      + json_schema_serialization_defaults_required: bool
      + json_schema_mode_override: Literal['validation', 'serialization', None]
      + coerce_numbers_to_str: bool
      + regex_engine: Literal['rust-regex', 'python-re']
      + validation_error_cause: bool
      + use_attribute_docstrings: bool
      + cache_strings: bool | Literal['all', 'keys', 'none']
  }

  class PydanticErrorMixin {
      - __init__(message: str)
  }

  class PydanticUserError {
  }

  class PydanticUndefinedAnnotation {
      - __init__(name: str, message: str)
      + {classmethod} from_name_error(cls, name_error: NameError): Self
  }

  class PydanticImportError {
      - __init__(message: str)
  }

  class PydanticSchemaGenerationError {
      - __init__(message: str)
  }

  class PydanticInvalidForJsonSchema {
      - __init__(message: str)
  }

  class FieldInfo {
      + annotation: type[Any] | None
      + default
      + default_factory: Callable[[], Any] | Callable[[dict[str, Any]], Any] | None
      + alias: str | None
      + alias_priority: int | None
      + validation_alias: str | AliasPath | AliasChoices | None
      + serialization_alias: str | None
      + title: str | None
      + field_title_generator: Callable[[str, FieldInfo], str] | None
      + description: str | None
      + examples: list[Any] | None
      + exclude: bool | None
      + discriminator: str | types.Discriminator | None
      + deprecated: Deprecated | str | bool | None
      + json_schema_extra: JsonDict | Callable[[JsonDict], None] | None
      + frozen: bool | None
      + validate_default: bool | None
      + repr: bool
      + init: bool | None
      + init_var: bool | None
      + kw_only: bool | None
      + metadata: list[Any]
      + metadata_lookup: ClassVar[dict[str, typing.Callable[[Any], Any] | None]] = {'strict': types.Strict, 'gt': annotated_types.Gt, 'ge': annotated_types.Ge, 'lt': annotated_types.Lt, 'le': annotated_types.Le, 'multiple_of': annotated_types.MultipleOf, 'min_length': annotated_types.MinLen, 'max_length': annotated_types.MaxLen, 'pattern': None, 'allow_inf_nan': None, 'max_digits': None, 'decimal_places': None, 'union_mode': None, 'coerce_numbers_to_str': None, 'fail_fast': types.FailFast}
  --
      - __init__()
      + {static} from_field(default = PydanticUndefined): FieldInfo
      + {static} from_annotation(annotation: type[Any]): FieldInfo
      + {static} from_annotated_attribute(annotation: type[Any], default): FieldInfo
      + {static} merge_field_infos(): FieldInfo
      + deprecation_message(): str | None
      + default_factory_takes_validated_data(): bool | None
      + get_default(): Any
      + get_default(): Any
      + get_default(): Any
      + is_required(): bool
      + rebuild_annotation(): Any
      + apply_typevars_map(typevars_map: dict[Any, Any] | None, globalns: GlobalsNamespace | None = None, localns: MappingNamespace | None = None)
  }

  class ModelPrivateAttr {
      - __init__(default = PydanticUndefined)
      + get_default(): Any
  }

  class ComputedFieldInfo {
      + decorator_repr: ClassVar[str] = '@computed_field'
      + wrapped_property: property
      + return_type
      + alias: str | None
      + alias_priority: int | None
      + title: str | None
      + field_title_generator: typing.Callable[[str, ComputedFieldInfo], str] | None
      + description: str | None
      + deprecated: Deprecated | str | bool | None
      + examples: list[Any] | None
      + json_schema_extra: JsonDict | typing.Callable[[JsonDict], None] | None
      + repr: bool
  --
      + deprecation_message(): str | None
  }

  class PlainSerializer {
      + func: core_schema.SerializerFunction
      + return_type = PydanticUndefined
      + when_used: WhenUsed = 'always'
  }

  class WrapSerializer {
      + func: core_schema.WrapSerializerFunction
      + return_type = PydanticUndefined
      + when_used: WhenUsed = 'always'
  }

  class SerializeAsAny {
  }

  class AfterValidator {
      + func: core_schema.NoInfoValidatorFunction | core_schema.WithInfoValidatorFunction
  }

  class BeforeValidator {
      + func: core_schema.NoInfoValidatorFunction | core_schema.WithInfoValidatorFunction
      + json_schema_input_type = PydanticUndefined
  }

  class PlainValidator {
      + func: core_schema.NoInfoValidatorFunction | core_schema.WithInfoValidatorFunction
      + json_schema_input_type = Any
  }

  class WrapValidator {
      + func: core_schema.NoInfoWrapValidatorFunction | core_schema.WithInfoWrapValidatorFunction
      + json_schema_input_type = PydanticUndefined
  }

  class ModelWrapValidatorHandler {
  }

  class ModelWrapValidatorWithoutInfo {
  }

  class ModelWrapValidator {
  }

  class FreeModelBeforeValidatorWithoutInfo {
  }

  class ModelBeforeValidatorWithoutInfo {
  }

  class FreeModelBeforeValidator {
  }

  class ModelBeforeValidator {
  }

  class InstanceOf {
  }

  class SkipValidation {
  }

  class PydanticJsonSchemaWarning {
  }

  class GenerateJsonSchema {
      + schema_dialect = 'https://json-schema.org/draft/2020-12/schema'
      + ignored_warning_kinds: set[JsonSchemaWarningKind] = {'skipped-choice'}
  --
      - __init__(by_alias: bool = True, ref_template: str = DEFAULT_REF_TEMPLATE)
      + mode(): JsonSchemaMode
      + build_schema_type_to_method(): dict[CoreSchemaOrFieldType, Callable[[CoreSchemaOrField], JsonSchemaValue]]
      + generate_definitions(inputs: Sequence[tuple[JsonSchemaKeyT, JsonSchemaMode, core_schema.CoreSchema]]): tuple[dict[tuple[JsonSchemaKeyT, JsonSchemaMode], JsonSchemaValue], dict[DefsRef, JsonSchemaValue]]
      + generate(schema: CoreSchema, mode: JsonSchemaMode = 'validation'): JsonSchemaValue
      + generate_inner(schema: CoreSchemaOrField): JsonSchemaValue
      + sort(value: JsonSchemaValue, parent_key: str | None = None): JsonSchemaValue
      + invalid_schema(schema: core_schema.InvalidSchema): JsonSchemaValue
      + any_schema(schema: core_schema.AnySchema): JsonSchemaValue
      + none_schema(schema: core_schema.NoneSchema): JsonSchemaValue
      + bool_schema(schema: core_schema.BoolSchema): JsonSchemaValue
      + int_schema(schema: core_schema.IntSchema): JsonSchemaValue
      + float_schema(schema: core_schema.FloatSchema): JsonSchemaValue
      + decimal_schema(schema: core_schema.DecimalSchema): JsonSchemaValue
      + str_schema(schema: core_schema.StringSchema): JsonSchemaValue
      + bytes_schema(schema: core_schema.BytesSchema): JsonSchemaValue
      + date_schema(schema: core_schema.DateSchema): JsonSchemaValue
      + time_schema(schema: core_schema.TimeSchema): JsonSchemaValue
      + datetime_schema(schema: core_schema.DatetimeSchema): JsonSchemaValue
      + timedelta_schema(schema: core_schema.TimedeltaSchema): JsonSchemaValue
      + literal_schema(schema: core_schema.LiteralSchema): JsonSchemaValue
      + enum_schema(schema: core_schema.EnumSchema): JsonSchemaValue
      + is_instance_schema(schema: core_schema.IsInstanceSchema): JsonSchemaValue
      + is_subclass_schema(schema: core_schema.IsSubclassSchema): JsonSchemaValue
      + callable_schema(schema: core_schema.CallableSchema): JsonSchemaValue
      + list_schema(schema: core_schema.ListSchema): JsonSchemaValue
      + tuple_positional_schema(schema: core_schema.TupleSchema): JsonSchemaValue
      + tuple_variable_schema(schema: core_schema.TupleSchema): JsonSchemaValue
      + tuple_schema(schema: core_schema.TupleSchema): JsonSchemaValue
      + set_schema(schema: core_schema.SetSchema): JsonSchemaValue
      + frozenset_schema(schema: core_schema.FrozenSetSchema): JsonSchemaValue
      + generator_schema(schema: core_schema.GeneratorSchema): JsonSchemaValue
      + dict_schema(schema: core_schema.DictSchema): JsonSchemaValue
      + function_before_schema(schema: core_schema.BeforeValidatorFunctionSchema): JsonSchemaValue
      + function_after_schema(schema: core_schema.AfterValidatorFunctionSchema): JsonSchemaValue
      + function_plain_schema(schema: core_schema.PlainValidatorFunctionSchema): JsonSchemaValue
      + function_wrap_schema(schema: core_schema.WrapValidatorFunctionSchema): JsonSchemaValue
      + default_schema(schema: core_schema.WithDefaultSchema): JsonSchemaValue
      + nullable_schema(schema: core_schema.NullableSchema): JsonSchemaValue
      + union_schema(schema: core_schema.UnionSchema): JsonSchemaValue
      + tagged_union_schema(schema: core_schema.TaggedUnionSchema): JsonSchemaValue
      + chain_schema(schema: core_schema.ChainSchema): JsonSchemaValue
      + lax_or_strict_schema(schema: core_schema.LaxOrStrictSchema): JsonSchemaValue
      + json_or_python_schema(schema: core_schema.JsonOrPythonSchema): JsonSchemaValue
      + typed_dict_schema(schema: core_schema.TypedDictSchema): JsonSchemaValue
      + typed_dict_field_schema(schema: core_schema.TypedDictField): JsonSchemaValue
      + dataclass_field_schema(schema: core_schema.DataclassField): JsonSchemaValue
      + model_field_schema(schema: core_schema.ModelField): JsonSchemaValue
      + computed_field_schema(schema: core_schema.ComputedField): JsonSchemaValue
      + model_schema(schema: core_schema.ModelSchema): JsonSchemaValue
      + resolve_ref_schema(json_schema: JsonSchemaValue): JsonSchemaValue
      + model_fields_schema(schema: core_schema.ModelFieldsSchema): JsonSchemaValue
      + field_is_present(field: CoreSchemaField): bool
      + field_is_required(field: core_schema.ModelField | core_schema.DataclassField | core_schema.TypedDictField, total: bool): bool
      + dataclass_args_schema(schema: core_schema.DataclassArgsSchema): JsonSchemaValue
      + dataclass_schema(schema: core_schema.DataclassSchema): JsonSchemaValue
      + arguments_schema(schema: core_schema.ArgumentsSchema): JsonSchemaValue
      + kw_arguments_schema(arguments: list[core_schema.ArgumentsParameter], var_kwargs_schema: CoreSchema | None): JsonSchemaValue
      + p_arguments_schema(arguments: list[core_schema.ArgumentsParameter], var_args_schema: CoreSchema | None): JsonSchemaValue
      + get_argument_name(argument: core_schema.ArgumentsParameter): str
      + call_schema(schema: core_schema.CallSchema): JsonSchemaValue
      + custom_error_schema(schema: core_schema.CustomErrorSchema): JsonSchemaValue
      + json_schema(schema: core_schema.JsonSchema): JsonSchemaValue
      + url_schema(schema: core_schema.UrlSchema): JsonSchemaValue
      + multi_host_url_schema(schema: core_schema.MultiHostUrlSchema): JsonSchemaValue
      + uuid_schema(schema: core_schema.UuidSchema): JsonSchemaValue
      + definitions_schema(schema: core_schema.DefinitionsSchema): JsonSchemaValue
      + definition_ref_schema(schema: core_schema.DefinitionReferenceSchema): JsonSchemaValue
      + ser_schema(schema: core_schema.SerSchema | core_schema.IncExSeqSerSchema | core_schema.IncExDictSerSchema): JsonSchemaValue | None
      + complex_schema(schema: core_schema.ComplexSchema): JsonSchemaValue
      + get_title_from_name(name: str): str
      + field_title_should_be_set(schema: CoreSchemaOrField): bool
      + normalize_name(name: str): str
      + get_defs_ref(core_mode_ref: CoreModeRef): DefsRef
      + get_cache_defs_ref_schema(core_ref: CoreRef): tuple[DefsRef, JsonSchemaValue]
      + handle_ref_overrides(json_schema: JsonSchemaValue): JsonSchemaValue
      + get_schema_from_definitions(json_ref: JsonRef): JsonSchemaValue | None
      + encode_default(dft): Any
      + update_with_validations(json_schema: JsonSchemaValue, core_schema: CoreSchema, mapping: dict[str, str])
      + get_flattened_anyof(schemas: list[JsonSchemaValue]): JsonSchemaValue
      + get_json_ref_counts(json_schema: JsonSchemaValue): dict[JsonRef, int]
      + handle_invalid_for_json_schema(schema: CoreSchemaOrField, error_info: str): JsonSchemaValue
      + emit_warning(kind: JsonSchemaWarningKind, detail: str)
      + render_warning_message(kind: JsonSchemaWarningKind, detail: str): str | None
  }

  class ValidationsMapping {
      + numeric = {'multiple_of': 'multipleOf', 'le': 'maximum', 'ge': 'minimum', 'lt': 'exclusiveMaximum', 'gt': 'exclusiveMinimum'}
      + bytes = {'min_length': 'minLength', 'max_length': 'maxLength'}
      + string = {'min_length': 'minLength', 'max_length': 'maxLength', 'pattern': 'pattern'}
      + array = {'min_length': 'minItems', 'max_length': 'maxItems'}
      + object = {'min_length': 'minProperties', 'max_length': 'maxProperties'}
  }

  class WithJsonSchema {
      + json_schema: JsonSchemaValue | None
      + mode: Literal['validation', 'serialization'] | None = None
  }

  class Examples {
      - __init__(examples: dict[str, Any], mode: Literal['validation', 'serialization'] | None = None)
      - __init__(examples: list[Any], mode: Literal['validation', 'serialization'] | None = None)
      - __init__(examples: dict[str, Any] | list[Any], mode: Literal['validation', 'serialization'] | None = None)
  }

  class SkipJsonSchema {
  }

  class BaseModel {
      + model_config: ClassVar[ConfigDict] = ConfigDict()
  --
      - __init__()
      + model_extra(): dict[str, Any] | None
      + model_fields_set(): set[str]
      + {classmethod} model_construct(cls, _fields_set: set[str] | None = None): Self
      + model_copy(): Self
      + model_dump(): dict[str, Any]
      + model_dump_json(): str
      + {classmethod} model_json_schema(cls, by_alias: bool = True, ref_template: str = DEFAULT_REF_TEMPLATE, schema_generator: type[GenerateJsonSchema] = GenerateJsonSchema, mode: JsonSchemaMode = 'validation'): dict[str, Any]
      + {classmethod} model_parametrized_name(cls, params: tuple[type[Any], ...]): str
      + model_post_init(__context)
      + {classmethod} model_rebuild(cls): bool | None
      + {classmethod} model_validate(cls, obj): Self
      + {classmethod} model_validate_json(cls, json_data: str | bytes | bytearray): Self
      + {classmethod} model_validate_strings(cls, obj): Self
      + dict(): Dict[str, Any]
      + json(): str
      + {classmethod} parse_obj(cls, obj): Self
      + {classmethod} parse_raw(cls, b: str | bytes): Self
      + {classmethod} parse_file(cls, path: str | Path): Self
      + {classmethod} from_orm(cls, obj): Self
      + {classmethod} construct(cls, _fields_set: set[str] | None = None): Self
      + copy(): Self
      + {classmethod} schema(cls, by_alias: bool = True, ref_template: str = DEFAULT_REF_TEMPLATE): Dict[str, Any]
      + {classmethod} schema_json(cls): str
      + {classmethod} validate(cls, value): Self
      + {classmethod} update_forward_refs(cls)
  }

  class PydanticPlugin {
      - __init__(options: Options)
      + get_base_class_hook(fullname: str): Callable[[ClassDefContext], None] | None
      + get_metaclass_hook(fullname: str): Callable[[ClassDefContext], None] | None
      + get_method_hook(fullname: str): Callable[[MethodContext], Type] | None
      + report_config_data(ctx: ReportConfigContext): dict[str, Any]
  }

  class PydanticPluginConfig {
      + init_forbid_extra: bool
      + init_typed: bool
      + warn_required_dynamic_aliases: bool
      + debug_dataclass_transform: bool
  --
      - __init__(options: Options)
      + to_data(): dict[str, Any]
  }

  class PydanticModelField {
      - __init__(name: str, alias: str | None, is_frozen: bool, has_dynamic_alias: bool, has_default: bool, strict: bool | None, line: int, column: int, type: Type | None, info: TypeInfo)
      + to_argument(current_info: TypeInfo, typed: bool, model_strict: bool, force_optional: bool, use_alias: bool, api: SemanticAnalyzerPluginInterface, force_typevars_invariant: bool, is_root_model_root: bool): Argument
      + expand_type(current_info: TypeInfo, api: SemanticAnalyzerPluginInterface, force_typevars_invariant: bool = False): Type | None
      + to_var(current_info: TypeInfo, api: SemanticAnalyzerPluginInterface, use_alias: bool, force_typevars_invariant: bool = False): Var
      + serialize(): JsonDict
      + {classmethod} deserialize(cls, info: TypeInfo, data: JsonDict, api: SemanticAnalyzerPluginInterface): PydanticModelField
      + expand_typevar_from_subtype(sub_type: TypeInfo, api: SemanticAnalyzerPluginInterface)
  }

  class PydanticModelClassVar {
      - __init__(name)
      + {classmethod} deserialize(cls, data: JsonDict): PydanticModelClassVar
      + serialize(): JsonDict
  }

  class PydanticModelTransformer {
      + tracked_config_fields: set[str] = {'extra', 'frozen', 'from_attributes', 'populate_by_name', 'alias_generator', 'strict'}
  --
      - __init__(cls: ClassDef, reason: Expression | Statement, api: SemanticAnalyzerPluginInterface, plugin_config: PydanticPluginConfig)
      + transform(): bool
      + adjust_decorator_signatures()
      + collect_config(): ModelConfigData
      + collect_fields_and_class_vars(model_config: ModelConfigData, is_root_model: bool): tuple[list[PydanticModelField] | None, list[PydanticModelClassVar] | None]
      + collect_field_or_class_var_from_stmt(stmt: AssignmentStmt, model_config: ModelConfigData, class_vars: dict[str, PydanticModelClassVar]): PydanticModelField | PydanticModelClassVar | None
      + add_initializer(fields: list[PydanticModelField], config: ModelConfigData, is_settings: bool, is_root_model: bool)
      + add_model_construct_method(fields: list[PydanticModelField], config: ModelConfigData, is_settings: bool, is_root_model: bool)
      + set_frozen(fields: list[PydanticModelField], api: SemanticAnalyzerPluginInterface, frozen: bool)
      + get_config_update(name: str, arg: Expression, lax_extra: bool = False): ModelConfigData | None
      + {static} get_has_default(stmt: AssignmentStmt): bool
      + {static} get_strict(stmt: AssignmentStmt): bool | None
      + {static} get_alias_info(stmt: AssignmentStmt): tuple[str | None, bool]
      + {static} is_field_frozen(stmt: AssignmentStmt): bool
      + get_field_arguments(fields: list[PydanticModelField], typed: bool, model_strict: bool, use_alias: bool, requires_dynamic_aliases: bool, is_settings: bool, is_root_model: bool, force_typevars_invariant: bool = False): list[Argument]
      + should_init_forbid_extra(fields: list[PydanticModelField], config: ModelConfigData): bool
      + {static} is_dynamic_alias_present(fields: list[PydanticModelField], has_alias_generator: bool): bool
  }

  class ModelConfigData {
      - __init__(forbid_extra: bool | None = None, frozen: bool | None = None, from_attributes: bool | None = None, populate_by_name: bool | None = None, has_alias_generator: bool | None = None, strict: bool | None = None)
      + get_values_dict(): dict[str, Any]
      + update(config: ModelConfigData | None)
      + setdefault(key: str, value)
  }

  class UrlConstraints {
      + max_length: int | None = None
      + allowed_schemes: list[str] | None = None
      + host_required: bool | None = None
      + default_host: str | None = None
      + default_port: int | None = None
      + default_path: str | None = None
  --
      + defined_constraints(): dict[str, Any]
  }

  class AnyUrl {
  }

  class AnyHttpUrl {
  }

  class HttpUrl {
  }

  class AnyWebsocketUrl {
  }

  class WebsocketUrl {
  }

  class FileUrl {
  }

  class FtpUrl {
  }

  class PostgresDsn {
      + host(): str
  }

  class CockroachDsn {
      + host(): str
  }

  class AmqpDsn {
  }

  class RedisDsn {
      + host(): str
  }

  class MongoDsn {
  }

  class KafkaDsn {
  }

  class NatsDsn {
  }

  class MySQLDsn {
  }

  class MariaDBDsn {
  }

  class ClickHouseDsn {
  }

  class SnowflakeDsn {
      + host(): str
  }

  class EmailStr {
  }

  class NameEmail {
      - __init__(name: str, email: str)
  }

  class IPvAnyAddress {
  }

  class IPvAnyInterface {
  }

  class IPvAnyNetwork {
  }

  class RootModel {
      + root: RootModelRootType
  --
      - __init__(root: RootModelRootType = PydanticUndefined)
      + {classmethod} model_construct(cls, root: RootModelRootType, _fields_set: set[str] | None = None): Self
  }

  class Strict {
      + strict: bool = True
  }

  class AllowInfNan {
      + allow_inf_nan: bool = True
  }

  class StringConstraints {
      + strip_whitespace: bool | None = None
      + to_upper: bool | None = None
      + to_lower: bool | None = None
      + strict: bool | None = None
      + min_length: int | None = None
      + max_length: int | None = None
      + pattern: str | Pattern[str] | None = None
  }

  class ImportString {
  }

  class UuidVersion {
      + uuid_version: Literal[1, 3, 4, 5]
  }

  class PathType {
      + path_type: Literal['file', 'dir', 'new', 'socket']
  --
      + {static} validate_file(path: Path, _: core_schema.ValidationInfo): Path
      + {static} validate_socket(path: Path, _: core_schema.ValidationInfo): Path
      + {static} validate_directory(path: Path, _: core_schema.ValidationInfo): Path
      + {static} validate_new(path: Path, _: core_schema.ValidationInfo): Path
  }

  class Json {
  }

  class Secret {
  }

  class SecretStr {
  }

  class SecretBytes {
  }

  class PaymentCardBrand {
      + amex = 'American Express'
      + mastercard = 'Mastercard'
      + visa = 'Visa'
      + other = 'other'
  }

  class PaymentCardNumber {
      + strip_whitespace: ClassVar[bool] = True
      + min_length: ClassVar[int] = 12
      + max_length: ClassVar[int] = 19
      + bin: str
      + last4: str
      + brand: PaymentCardBrand
  --
      - __init__(card_number: str)
      + {classmethod} validate(_: core_schema.ValidationInfo): PaymentCardNumber
      + masked(): str
      + {classmethod} validate_digits(cls, card_number: str)
      + {classmethod} validate_luhn_check_digit(cls, card_number: str): str
      + {static} validate_brand(card_number: str): PaymentCardBrand
  }

  class ByteSize {
      + byte_sizes = {'b': 1, 'kb': 10 ** 3, 'mb': 10 ** 6, 'gb': 10 ** 9, 'tb': 10 ** 12, 'pb': 10 ** 15, 'eb': 10 ** 18, 'kib': 2 ** 10, 'mib': 2 ** 20, 'gib': 2 ** 30, 'tib': 2 ** 40, 'pib': 2 ** 50, 'eib': 2 ** 60, 'bit': 1 / 8, 'kbit': 10 ** 3 / 8, 'mbit': 10 ** 6 / 8, 'gbit': 10 ** 9 / 8, 'tbit': 10 ** 12 / 8, 'pbit': 10 ** 15 / 8, 'ebit': 10 ** 18 / 8, 'kibit': 2 ** 10 / 8, 'mibit': 2 ** 20 / 8, 'gibit': 2 ** 30 / 8, 'tibit': 2 ** 40 / 8, 'pibit': 2 ** 50 / 8, 'eibit': 2 ** 60 / 8}
      + byte_string_pattern = '^\\s*(\\d*\\.?\\d+)\\s*(\\w+)?'
      + byte_string_re = re.compile(byte_string_pattern, re.IGNORECASE)
  --
      + human_readable(decimal: bool = False, separator: str = ''): str
      + to(unit: str): float
  }

  class PastDate {
  }

  class FutureDate {
  }

  class AwareDatetime {
  }

  class NaiveDatetime {
  }

  class PastDatetime {
  }

  class FutureDatetime {
  }

  class EncoderProtocol {
      + {classmethod} decode(cls, data: bytes): bytes
      + {classmethod} encode(cls, value: bytes): bytes
      + {classmethod} get_json_format(cls): str
  }

  class Base64Encoder {
      + {classmethod} decode(cls, data: bytes): bytes
      + {classmethod} encode(cls, value: bytes): bytes
      + {classmethod} get_json_format(cls): Literal['base64']
  }

  class Base64UrlEncoder {
      + {classmethod} decode(cls, data: bytes): bytes
      + {classmethod} encode(cls, value: bytes): bytes
      + {classmethod} get_json_format(cls): Literal['base64url']
  }

  class EncodedBytes {
      + encoder: type[EncoderProtocol]
  --
      + decode(data: bytes, _: core_schema.ValidationInfo): bytes
      + encode(value: bytes): bytes
  }

  class EncodedStr {
      + encoder: type[EncoderProtocol]
  --
      + decode_str(data: str, _: core_schema.ValidationInfo): str
      + encode_str(value: str): str
  }

  class GetPydanticSchema {
      + get_pydantic_core_schema: Callable[[Any, GetCoreSchemaHandler], CoreSchema] | None = None
      + get_pydantic_json_schema: Callable[[Any, GetJsonSchemaHandler], JsonSchemaValue] | None = None
  }

  class Tag {
      + tag: str
  }

  class Discriminator {
      + discriminator: str | Callable[[Any], Hashable]
      + custom_error_type: str | None = None
      + custom_error_message: str | None = None
      + custom_error_context: dict[str, int | str | float] | None = None
  }

  class FailFast {
      + fail_fast: bool = True
  }

  class TypeAdapter {
      + core_schema: CoreSchema
      + validator: SchemaValidator | PluggableSchemaValidator
      + serializer: SchemaSerializer
      + pydantic_complete: bool
  --
      - __init__(type: type[T])
      - __init__(type)
      - __init__(type)
      + rebuild(): bool | None
      + validate_python(): T
      + validate_json(): T
      + validate_strings(): T
      + get_default_value(): Some[T] | None
      + dump_python(): Any
      + dump_json(): bytes
      + json_schema(): dict[str, Any]
      + {static} json_schemas(): tuple[dict[tuple[JsonSchemaKeyT, JsonSchemaMode], JsonSchemaValue], JsonSchemaValue]
  }

  class PydanticDeprecationWarning {
      + message: str
      + since: tuple[int, int]
      + expected_removal: tuple[int, int]
  --
      - __init__(message: str)
  }

  class PydanticDeprecatedSince20 {
      - __init__(message: str)
  }

  class PydanticDeprecatedSince26 {
      - __init__(message: str)
  }

  class PydanticDeprecatedSince29 {
      - __init__(message: str)
  }

  class PydanticDeprecatedSince210 {
      - __init__(message: str)
  }

  class GenericBeforeBaseModelWarning {
  }

  class PydanticExperimentalWarning {
  }

}

package deprecated {
  class BaseConfig {
  }

  class Extra {
      + allow: Literal['allow'] = 'allow'
      + ignore: Literal['ignore'] = 'ignore'
      + forbid: Literal['forbid'] = 'forbid'
  }

  class ValidatedFunction {
      - __init__(function: 'AnyCallable', config: 'ConfigType')
      + init_model_instance(): BaseModel
      + call(): Any
      + build_values(args: Tuple[Any, ...], kwargs: Dict[str, Any]): Dict[str, Any]
      + execute(m: BaseModel): Any
      + create_model(fields: Dict[str, Any], takes_args: bool, takes_kwargs: bool, config: 'ConfigType')
  }

  class Protocol {
      + json = 'json'
      + pickle = 'pickle'
  }

}

package v1 {
  class Validator {
      - __init__(func: AnyCallable, pre: bool = False, each_item: bool = False, always: bool = False, check_fields: bool = False, skip_on_failure: bool = False)
  }

  class ValidatorGroup {
      - __init__(validators: 'ValidatorListDict')
      + get_validators(name: str): Optional[Dict[str, Validator]]
      + check_for_unused()
  }

  class RGBA {
      - __init__(r: float, g: float, b: float, alpha: Optional[float])
  }

  class Color {
      - __init__(value: ColorType)
      + original(): ColorType
      + as_named(): str
      + as_hex(): str
      + as_rgb(): str
      + as_rgb_tuple(): ColorTuple
      + as_hsl(): str
      + as_hsl_tuple(): HslColorTuple
  }

  class SchemaExtraCallable {
  }

  class Extra {
      + allow = 'allow'
      + ignore = 'ignore'
      + forbid = 'forbid'
  }

  class ConfigDict {
      + title: Optional[str]
      + anystr_lower: bool
      + anystr_strip_whitespace: bool
      + min_anystr_length: int
      + max_anystr_length: Optional[int]
      + validate_all: bool
      + extra: Extra
      + allow_mutation: bool
      + frozen: bool
      + allow_population_by_field_name: bool
      + use_enum_values: bool
      + fields: Dict[str, Union[str, Dict[str, str]]]
      + validate_assignment: bool
      + error_msg_templates: Dict[str, str]
      + arbitrary_types_allowed: bool
      + orm_mode: bool
      + getter_dict: Type[GetterDict]
      + alias_generator: Optional[Callable[[str], str]]
      + keep_untouched: Tuple[type, ...]
      + schema_extra: Union[Dict[str, object], 'SchemaExtraCallable']
      + json_loads: Callable[[str], object]
      + json_dumps: AnyArgTCallable[str]
      + json_encoders: Dict[Type[object], AnyCallable]
      + underscore_attrs_are_private: bool
      + allow_inf_nan: bool
      + copy_on_model_validation: Literal['none', 'deep', 'shallow']
      + post_init_call: Literal['before_validation', 'after_validation']
  }

  class BaseConfig {
      + title: Optional[str] = None
      + anystr_lower: bool = False
      + anystr_upper: bool = False
      + anystr_strip_whitespace: bool = False
      + min_anystr_length: int = 0
      + max_anystr_length: Optional[int] = None
      + validate_all: bool = False
      + extra: Extra = Extra.ignore
      + allow_mutation: bool = True
      + frozen: bool = False
      + allow_population_by_field_name: bool = False
      + use_enum_values: bool = False
      + fields: Dict[str, Union[str, Dict[str, str]]] = {}
      + validate_assignment: bool = False
      + error_msg_templates: Dict[str, str] = {}
      + arbitrary_types_allowed: bool = False
      + orm_mode: bool = False
      + getter_dict: Type[GetterDict] = GetterDict
      + alias_generator: Optional[Callable[[str], str]] = None
      + keep_untouched: Tuple[type, ...] = ()
      + schema_extra: Union[Dict[str, Any], 'SchemaExtraCallable'] = {}
      + json_loads: Callable[[str], Any] = json.loads
      + json_dumps: Callable[..., str] = json.dumps
      + json_encoders: Dict[Union[Type[Any], str, ForwardRef], AnyCallable] = {}
      + underscore_attrs_are_private: bool = False
      + allow_inf_nan: bool = True
      + copy_on_model_validation: Literal['none', 'deep', 'shallow'] = 'shallow'
      + smart_union: bool = False
      + post_init_call: Literal['before_validation', 'after_validation'] = 'before_validation'
  --
      + {classmethod} get_field_info(cls, name: str): Dict[str, Any]
      + {classmethod} prepare_field(cls, field: 'ModelField')
  }

  class Config {
  }

  class Dataclass {
      - __init__()
  }

  class DataclassProxy {
      - __init__(dc_cls: Type['Dataclass'])
  }

  class ValidatedFunction {
      - __init__(function: 'AnyCallableT', config: 'ConfigType')
      + init_model_instance(): BaseModel
      + call(): Any
      + build_values(args: Tuple[Any, ...], kwargs: Dict[str, Any]): Dict[str, Any]
      + execute(m: BaseModel): Any
      + create_model(fields: Dict[str, Any], takes_args: bool, takes_kwargs: bool, config: 'ConfigType')
  }

  class SettingsError {
  }

  class BaseSettings {
      - __init__(__pydantic_self__, _env_file: Optional[DotenvType] = env_file_sentinel, _env_file_encoding: Optional[str] = None, _env_nested_delimiter: Optional[str] = None, _secrets_dir: Optional[StrPath] = None)
  }

  class Config {
      + env_prefix: str = ''
      + env_file: Optional[DotenvType] = None
      + env_file_encoding: Optional[str] = None
      + env_nested_delimiter: Optional[str] = None
      + secrets_dir: Optional[StrPath] = None
      + validate_all: bool = True
      + extra: Extra = Extra.forbid
      + arbitrary_types_allowed: bool = True
      + case_sensitive: bool = False
  --
      + {classmethod} prepare_field(cls, field: ModelField)
      + {classmethod} customise_sources(cls, init_settings: SettingsSourceCallable, env_settings: SettingsSourceCallable, file_secret_settings: SettingsSourceCallable): Tuple[SettingsSourceCallable, ...]
      + {classmethod} parse_env_var(cls, field_name: str, raw_val: str): Any
  }

  class InitSettingsSource {
      - __init__(init_kwargs: Dict[str, Any])
  }

  class EnvSettingsSource {
      - __init__(env_file: Optional[DotenvType], env_file_encoding: Optional[str], env_nested_delimiter: Optional[str] = None, env_prefix_len: int = 0)
      + field_is_complex(field: ModelField): Tuple[bool, bool]
      + explode_env_vars(field: ModelField, env_vars: Mapping[str, Optional[str]]): Dict[str, Any]
  }

  class SecretsSettingsSource {
      - __init__(secrets_dir: Optional[StrPath])
  }

  class PydanticErrorMixin {
      + code: str
      + msg_template: str
  --
      - __init__()
  }

  class PydanticTypeError {
  }

  class PydanticValueError {
  }

  class ConfigError {
  }

  class MissingError {
      + msg_template = 'field required'
  }

  class ExtraError {
      + msg_template = 'extra fields not permitted'
  }

  class NoneIsNotAllowedError {
      + code = 'none.not_allowed'
      + msg_template = 'none is not an allowed value'
  }

  class NoneIsAllowedError {
      + code = 'none.allowed'
      + msg_template = 'value is not none'
  }

  class WrongConstantError {
      + code = 'const'
  }

  class NotNoneError {
      + code = 'not_none'
      + msg_template = 'value is not None'
  }

  class BoolError {
      + msg_template = 'value could not be parsed to a boolean'
  }

  class BytesError {
      + msg_template = 'byte type expected'
  }

  class DictError {
      + msg_template = 'value is not a valid dict'
  }

  class EmailError {
      + msg_template = 'value is not a valid email address'
  }

  class UrlError {
      + code = 'url'
  }

  class UrlSchemeError {
      + code = 'url.scheme'
      + msg_template = 'invalid or missing URL scheme'
  }

  class UrlSchemePermittedError {
      + code = 'url.scheme'
      + msg_template = 'URL scheme not permitted'
  --
      - __init__(allowed_schemes: Set[str])
  }

  class UrlUserInfoError {
      + code = 'url.userinfo'
      + msg_template = 'userinfo required in URL but missing'
  }

  class UrlHostError {
      + code = 'url.host'
      + msg_template = 'URL host invalid'
  }

  class UrlHostTldError {
      + code = 'url.host'
      + msg_template = 'URL host invalid, top level domain required'
  }

  class UrlPortError {
      + code = 'url.port'
      + msg_template = 'URL port invalid, port cannot exceed 65535'
  }

  class UrlExtraError {
      + code = 'url.extra'
      + msg_template = 'URL invalid, extra characters found after valid URL: {extra!r}'
  }

  class EnumMemberError {
      + code = 'enum'
  }

  class IntegerError {
      + msg_template = 'value is not a valid integer'
  }

  class FloatError {
      + msg_template = 'value is not a valid float'
  }

  class PathError {
      + msg_template = 'value is not a valid path'
  }

  class PathNotExistsError {
      + code = 'path.not_exists'
      + msg_template = 'file or directory at path "{path}" does not exist'
  }

  class PathNotAFileError {
      + code = 'path.not_a_file'
      + msg_template = 'path "{path}" does not point to a file'
  }

  class PathNotADirectoryError {
      + code = 'path.not_a_directory'
      + msg_template = 'path "{path}" does not point to a directory'
  }

  class PyObjectError {
      + msg_template = 'ensure this value contains valid import path or valid callable: {error_message}'
  }

  class SequenceError {
      + msg_template = 'value is not a valid sequence'
  }

  class IterableError {
      + msg_template = 'value is not a valid iterable'
  }

  class ListError {
      + msg_template = 'value is not a valid list'
  }

  class SetError {
      + msg_template = 'value is not a valid set'
  }

  class FrozenSetError {
      + msg_template = 'value is not a valid frozenset'
  }

  class DequeError {
      + msg_template = 'value is not a valid deque'
  }

  class TupleError {
      + msg_template = 'value is not a valid tuple'
  }

  class TupleLengthError {
      + code = 'tuple.length'
      + msg_template = 'wrong tuple length {actual_length}, expected {expected_length}'
  --
      - __init__()
  }

  class ListMinLengthError {
      + code = 'list.min_items'
      + msg_template = 'ensure this value has at least {limit_value} items'
  --
      - __init__()
  }

  class ListMaxLengthError {
      + code = 'list.max_items'
      + msg_template = 'ensure this value has at most {limit_value} items'
  --
      - __init__()
  }

  class ListUniqueItemsError {
      + code = 'list.unique_items'
      + msg_template = 'the list has duplicated items'
  }

  class SetMinLengthError {
      + code = 'set.min_items'
      + msg_template = 'ensure this value has at least {limit_value} items'
  --
      - __init__()
  }

  class SetMaxLengthError {
      + code = 'set.max_items'
      + msg_template = 'ensure this value has at most {limit_value} items'
  --
      - __init__()
  }

  class FrozenSetMinLengthError {
      + code = 'frozenset.min_items'
      + msg_template = 'ensure this value has at least {limit_value} items'
  --
      - __init__()
  }

  class FrozenSetMaxLengthError {
      + code = 'frozenset.max_items'
      + msg_template = 'ensure this value has at most {limit_value} items'
  --
      - __init__()
  }

  class AnyStrMinLengthError {
      + code = 'any_str.min_length'
      + msg_template = 'ensure this value has at least {limit_value} characters'
  --
      - __init__()
  }

  class AnyStrMaxLengthError {
      + code = 'any_str.max_length'
      + msg_template = 'ensure this value has at most {limit_value} characters'
  --
      - __init__()
  }

  class StrError {
      + msg_template = 'str type expected'
  }

  class StrRegexError {
      + code = 'str.regex'
      + msg_template = 'string does not match regex "{pattern}"'
  --
      - __init__()
  }

  class NumberNotGtError {
      + code = 'number.not_gt'
      + msg_template = 'ensure this value is greater than {limit_value}'
  }

  class NumberNotGeError {
      + code = 'number.not_ge'
      + msg_template = 'ensure this value is greater than or equal to {limit_value}'
  }

  class NumberNotLtError {
      + code = 'number.not_lt'
      + msg_template = 'ensure this value is less than {limit_value}'
  }

  class NumberNotLeError {
      + code = 'number.not_le'
      + msg_template = 'ensure this value is less than or equal to {limit_value}'
  }

  class NumberNotFiniteError {
      + code = 'number.not_finite_number'
      + msg_template = 'ensure this value is a finite number'
  }

  class NumberNotMultipleError {
      + code = 'number.not_multiple'
      + msg_template = 'ensure this value is a multiple of {multiple_of}'
  --
      - __init__()
  }

  class DecimalError {
      + msg_template = 'value is not a valid decimal'
  }

  class DecimalIsNotFiniteError {
      + code = 'decimal.not_finite'
      + msg_template = 'value is not a valid decimal'
  }

  class DecimalMaxDigitsError {
      + code = 'decimal.max_digits'
      + msg_template = 'ensure that there are no more than {max_digits} digits in total'
  --
      - __init__()
  }

  class DecimalMaxPlacesError {
      + code = 'decimal.max_places'
      + msg_template = 'ensure that there are no more than {decimal_places} decimal places'
  --
      - __init__()
  }

  class DecimalWholeDigitsError {
      + code = 'decimal.whole_digits'
      + msg_template = 'ensure that there are no more than {whole_digits} digits before the decimal point'
  --
      - __init__()
  }

  class DateTimeError {
      + msg_template = 'invalid datetime format'
  }

  class DateError {
      + msg_template = 'invalid date format'
  }

  class DateNotInThePastError {
      + code = 'date.not_in_the_past'
      + msg_template = 'date is not in the past'
  }

  class DateNotInTheFutureError {
      + code = 'date.not_in_the_future'
      + msg_template = 'date is not in the future'
  }

  class TimeError {
      + msg_template = 'invalid time format'
  }

  class DurationError {
      + msg_template = 'invalid duration format'
  }

  class HashableError {
      + msg_template = 'value is not a valid hashable'
  }

  class UUIDError {
      + msg_template = 'value is not a valid uuid'
  }

  class UUIDVersionError {
      + code = 'uuid.version'
      + msg_template = 'uuid version {required_version} expected'
  --
      - __init__()
  }

  class ArbitraryTypeError {
      + code = 'arbitrary_type'
      + msg_template = 'instance of {expected_arbitrary_type} expected'
  --
      - __init__()
  }

  class ClassError {
      + code = 'class'
      + msg_template = 'a class is expected'
  }

  class SubclassError {
      + code = 'subclass'
      + msg_template = 'subclass of {expected_class} expected'
  --
      - __init__()
  }

  class JsonError {
      + msg_template = 'Invalid JSON'
  }

  class JsonTypeError {
      + code = 'json'
      + msg_template = 'JSON object must be str, bytes or bytearray'
  }

  class PatternError {
      + code = 'regex_pattern'
      + msg_template = 'Invalid regular expression'
  }

  class DataclassTypeError {
      + code = 'dataclass'
      + msg_template = 'instance of {class_name}, tuple or dict expected'
  }

  class CallableError {
      + msg_template = '{value} is not callable'
  }

  class EnumError {
      + code = 'enum_instance'
      + msg_template = '{value} is not a valid Enum instance'
  }

  class IntEnumError {
      + code = 'int_enum_instance'
      + msg_template = '{value} is not a valid IntEnum instance'
  }

  class IPvAnyAddressError {
      + msg_template = 'value is not a valid IPv4 or IPv6 address'
  }

  class IPvAnyInterfaceError {
      + msg_template = 'value is not a valid IPv4 or IPv6 interface'
  }

  class IPvAnyNetworkError {
      + msg_template = 'value is not a valid IPv4 or IPv6 network'
  }

  class IPv4AddressError {
      + msg_template = 'value is not a valid IPv4 address'
  }

  class IPv6AddressError {
      + msg_template = 'value is not a valid IPv6 address'
  }

  class IPv4NetworkError {
      + msg_template = 'value is not a valid IPv4 network'
  }

  class IPv6NetworkError {
      + msg_template = 'value is not a valid IPv6 network'
  }

  class IPv4InterfaceError {
      + msg_template = 'value is not a valid IPv4 interface'
  }

  class IPv6InterfaceError {
      + msg_template = 'value is not a valid IPv6 interface'
  }

  class ColorError {
      + msg_template = 'value is not a valid color: {reason}'
  }

  class StrictBoolError {
      + msg_template = 'value is not a valid boolean'
  }

  class NotDigitError {
      + code = 'payment_card_number.digits'
      + msg_template = 'card number is not all digits'
  }

  class LuhnValidationError {
      + code = 'payment_card_number.luhn_check'
      + msg_template = 'card number is not luhn valid'
  }

  class InvalidLengthForBrand {
      + code = 'payment_card_number.invalid_length_for_brand'
      + msg_template = 'Length for a {brand} card must be {required_length}'
  }

  class InvalidByteSize {
      + msg_template = 'could not parse value and unit from byte string'
  }

  class InvalidByteSizeUnit {
      + msg_template = 'could not interpret byte unit: {unit}'
  }

  class MissingDiscriminator {
      + code = 'discriminated_union.missing_discriminator'
      + msg_template = 'Discriminator {discriminator_key!r} is missing in value'
  }

  class InvalidDiscriminator {
      + code = 'discriminated_union.invalid_discriminator'
      + msg_template = 'No match for discriminator {discriminator_key!r} and value {discriminator_value!r} (allowed values: {allowed_values})'
  --
      - __init__()
  }

  class ErrorDict {
      + ctx: Dict[str, Any]
  }

  class ErrorWrapper {
      - __init__(exc: Exception, loc: Union[str, 'Loc'])
      + loc_tuple(): 'Loc'
  }

  class ValidationError {
      - __init__(errors: Sequence[ErrorList], model: 'ModelOrDc')
      + errors(): List['ErrorDict']
      + json(): str
  }

  class UndefinedType {
  }

  class FieldInfo {
      - __init__(default = Undefined)
      + get_constraints(): Set[str]
      + update_from_config(from_config: Dict[str, Any])
  }

  class ModelField {
      - __init__()
      + get_default(): Any
      + {classmethod} infer(cls): 'ModelField'
      + set_config(config: Type['BaseConfig'])
      + alt_alias(): bool
      + prepare()
      + prepare_discriminated_union_sub_fields()
      + populate_validators()
      + validate(v, values: Dict[str, Any]): 'ValidateReturn'
      + is_complex(): bool
  }

  class ModelPrivateAttr {
      - __init__(default = Undefined)
      + get_default(): Any
  }

  class DeferredType {
  }

  class GenericModel {
  }

  class ModelMetaclass {
  }

  class BaseModel {
      + Config = BaseConfig
  --
      - __init__(__pydantic_self__)
      + dict(): 'DictStrAny'
      + json(): str
      + {classmethod} parse_obj(cls: Type['Model'], obj): 'Model'
      + {classmethod} parse_raw(cls: Type['Model'], b: StrBytes): 'Model'
      + {classmethod} parse_file(cls: Type['Model'], path: Union[str, Path]): 'Model'
      + {classmethod} from_orm(cls: Type['Model'], obj): 'Model'
      + {classmethod} construct(cls: Type['Model'], _fields_set: Optional['SetStr'] = None): 'Model'
      + copy(): 'Model'
      + {classmethod} schema(cls, by_alias: bool = True, ref_template: str = default_ref_template): 'DictStrAny'
      + {classmethod} schema_json(cls): str
      + {classmethod} validate(cls: Type['Model'], value): 'Model'
      + {classmethod} update_forward_refs(cls)
  }

  class PydanticPlugin {
      - __init__(options: Options)
      + get_base_class_hook(fullname: str): 'Optional[Callable[[ClassDefContext], None]]'
      + get_metaclass_hook(fullname: str): Optional[Callable[[ClassDefContext], None]]
      + get_function_hook(fullname: str): 'Optional[Callable[[FunctionContext], Type]]'
      + get_method_hook(fullname: str): Optional[Callable[[MethodContext], Type]]
      + get_class_decorator_hook(fullname: str): Optional[Callable[[ClassDefContext], None]]
      + report_config_data(ctx: ReportConfigContext): Dict[str, Any]
  }

  class PydanticPluginConfig {
      + init_forbid_extra: bool
      + init_typed: bool
      + warn_required_dynamic_aliases: bool
      + warn_untyped_fields: bool
      + debug_dataclass_transform: bool
  --
      - __init__(options: Options)
      + to_data(): Dict[str, Any]
  }

  class PydanticModelTransformer {
      + tracked_config_fields: Set[str] = {'extra', 'allow_mutation', 'frozen', 'orm_mode', 'allow_population_by_field_name', 'alias_generator'}
  --
      - __init__(ctx: ClassDefContext, plugin_config: PydanticPluginConfig)
      + transform()
      + adjust_validator_signatures()
      + collect_config(): 'ModelConfigData'
      + collect_fields(model_config: 'ModelConfigData'): List['PydanticModelField']
      + add_initializer(fields: List['PydanticModelField'], config: 'ModelConfigData', is_settings: bool)
      + add_construct_method(fields: List['PydanticModelField'])
      + set_frozen(fields: List['PydanticModelField'], frozen: bool)
      + get_config_update(substmt: AssignmentStmt): Optional['ModelConfigData']
      + {static} get_is_required(cls: ClassDef, stmt: AssignmentStmt, lhs: NameExpr): bool
      + {static} type_has_implicit_default(type_: Optional[ProperType]): bool
      + {static} get_alias_info(stmt: AssignmentStmt): Tuple[Optional[str], bool]
      + get_field_arguments(fields: List['PydanticModelField'], typed: bool, force_all_optional: bool, use_alias: bool): List[Argument]
      + should_init_forbid_extra(fields: List['PydanticModelField'], config: 'ModelConfigData'): bool
      + {static} is_dynamic_alias_present(fields: List['PydanticModelField'], has_alias_generator: bool): bool
  }

  class PydanticModelField {
      - __init__(name: str, is_required: bool, alias: Optional[str], has_dynamic_alias: bool, line: int, column: int)
      + to_var(info: TypeInfo, use_alias: bool): Var
      + to_argument(info: TypeInfo, typed: bool, force_optional: bool, use_alias: bool): Argument
      + serialize(): JsonDict
      + {classmethod} deserialize(cls, info: TypeInfo, data: JsonDict): 'PydanticModelField'
  }

  class ModelConfigData {
      - __init__(forbid_extra: Optional[bool] = None, allow_mutation: Optional[bool] = None, frozen: Optional[bool] = None, orm_mode: Optional[bool] = None, allow_population_by_field_name: Optional[bool] = None, has_alias_generator: Optional[bool] = None)
      + set_values_dict(): Dict[str, Any]
      + update(config: Optional['ModelConfigData'])
      + setdefault(key: str, value)
  }

  class Parts {
      + scheme: str
      + user: Optional[str]
      + password: Optional[str]
      + ipv4: Optional[str]
      + ipv6: Optional[str]
      + domain: Optional[str]
      + port: Optional[str]
      + path: Optional[str]
      + query: Optional[str]
      + fragment: Optional[str]
  }

  class HostParts {
      + host: str
      + tld: Optional[str]
      + host_type: Optional[str]
      + port: Optional[str]
      + rebuild: bool
  }

  class Parts {
  }

  class AnyUrl {
      + strip_whitespace = True
      + min_length = 1
      + max_length = 2 ** 16
      + allowed_schemes: Optional[Collection[str]] = None
      + tld_required: bool = False
      + user_required: bool = False
      + host_required: bool = True
      + hidden_parts: Set[str] = set()
  --
      - __init__(url: str)
      + {classmethod} build(cls): str
      + {classmethod} validate(cls, value, field: 'ModelField', config: 'BaseConfig'): 'AnyUrl'
      + {classmethod} validate_parts(cls, parts: 'Parts', validate_port: bool = True): 'Parts'
      + {classmethod} validate_host(cls, parts: 'Parts'): Tuple[str, Optional[str], str, bool]
      + {static} get_default_parts(parts: 'Parts'): 'Parts'
      + {classmethod} apply_default_parts(cls, parts: 'Parts'): 'Parts'
  }

  class AnyHttpUrl {
      + allowed_schemes = {'http', 'https'}
  }

  class HttpUrl {
      + tld_required = True
      + max_length = 2083
      + hidden_parts = {'port'}
  --
      + {static} get_default_parts(parts: 'Parts'): 'Parts'
  }

  class FileUrl {
      + allowed_schemes = {'file'}
      + host_required = False
  }

  class MultiHostDsn {
      - __init__()
      + {classmethod} validate_parts(cls, parts: 'Parts', validate_port: bool = True): 'Parts'
  }

  class PostgresDsn {
      + allowed_schemes = {'postgres', 'postgresql', 'postgresql+asyncpg', 'postgresql+pg8000', 'postgresql+psycopg', 'postgresql+psycopg2', 'postgresql+psycopg2cffi', 'postgresql+py-postgresql', 'postgresql+pygresql'}
      + user_required = True
  }

  class CockroachDsn {
      + allowed_schemes = {'cockroachdb', 'cockroachdb+psycopg2', 'cockroachdb+asyncpg'}
      + user_required = True
  }

  class AmqpDsn {
      + allowed_schemes = {'amqp', 'amqps'}
      + host_required = False
  }

  class RedisDsn {
      + allowed_schemes = {'redis', 'rediss'}
      + host_required = False
  --
      + {static} get_default_parts(parts: 'Parts'): 'Parts'
  }

  class MongoDsn {
      + allowed_schemes = {'mongodb'}
  --
      + {static} get_default_parts(parts: 'Parts'): 'Parts'
  }

  class KafkaDsn {
      + allowed_schemes = {'kafka'}
  --
      + {static} get_default_parts(parts: 'Parts'): 'Parts'
  }

  class EmailStr {
      + {classmethod} validate(cls, value: Union[str]): str
  }

  class NameEmail {
      - __init__(name: str, email: str)
      + {classmethod} validate(cls, value): 'NameEmail'
  }

  class IPvAnyAddress {
      + {classmethod} validate(cls, value: Union[str, bytes, int]): Union[IPv4Address, IPv6Address]
  }

  class IPvAnyInterface {
      + {classmethod} validate(cls, value: NetworkType): Union[IPv4Interface, IPv6Interface]
  }

  class IPvAnyNetwork {
      + {classmethod} validate(cls, value: NetworkType): Union[IPv4Network, IPv6Network]
  }

  class Protocol {
      + json = 'json'
      + pickle = 'pickle'
  }

  class SkipField {
      - __init__(message: str)
  }

  class ConstrainedNumberMeta {
  }

  class StrictBool {
      + {classmethod} validate(cls, value): bool
  }

  class ConstrainedInt {
      + strict: bool = False
      + gt: OptionalInt = None
      + ge: OptionalInt = None
      + lt: OptionalInt = None
      + le: OptionalInt = None
      + multiple_of: OptionalInt = None
  }

  class PositiveInt {
      + gt = 0
  }

  class NegativeInt {
      + lt = 0
  }

  class NonPositiveInt {
      + le = 0
  }

  class NonNegativeInt {
      + ge = 0
  }

  class StrictInt {
      + strict = True
  }

  class ConstrainedFloat {
      + strict: bool = False
      + gt: OptionalIntFloat = None
      + ge: OptionalIntFloat = None
      + lt: OptionalIntFloat = None
      + le: OptionalIntFloat = None
      + multiple_of: OptionalIntFloat = None
      + allow_inf_nan: Optional[bool] = None
  }

  class PositiveFloat {
      + gt = 0
  }

  class NegativeFloat {
      + lt = 0
  }

  class NonPositiveFloat {
      + le = 0
  }

  class NonNegativeFloat {
      + ge = 0
  }

  class StrictFloat {
      + strict = True
  }

  class FiniteFloat {
      + allow_inf_nan = False
  }

  class ConstrainedBytes {
      + strip_whitespace = False
      + to_upper = False
      + to_lower = False
      + min_length: OptionalInt = None
      + max_length: OptionalInt = None
      + strict: bool = False
  }

  class StrictBytes {
      + strict = True
  }

  class ConstrainedStr {
      + strip_whitespace = False
      + to_upper = False
      + to_lower = False
      + min_length: OptionalInt = None
      + max_length: OptionalInt = None
      + curtail_length: OptionalInt = None
      + regex: Optional[Union[str, Pattern[str]]] = None
      + strict = False
  --
      + {classmethod} validate(cls, value: Union[str]): Union[str]
  }

  class StrictStr {
      + strict = True
  }

  class ConstrainedSet {
      + min_items: Optional[int] = None
      + max_items: Optional[int] = None
      + item_type: Type[T]
  --
      + {classmethod} set_length_validator(cls, v: 'Optional[Set[T]]'): 'Optional[Set[T]]'
  }

  class ConstrainedFrozenSet {
      + min_items: Optional[int] = None
      + max_items: Optional[int] = None
      + item_type: Type[T]
  --
      + {classmethod} frozenset_length_validator(cls, v: 'Optional[FrozenSet[T]]'): 'Optional[FrozenSet[T]]'
  }

  class ConstrainedList {
      + min_items: Optional[int] = None
      + max_items: Optional[int] = None
      + unique_items: Optional[bool] = None
      + item_type: Type[T]
  --
      + {classmethod} list_length_validator(cls, v: 'Optional[List[T]]'): 'Optional[List[T]]'
      + {classmethod} unique_items_validator(cls, v: 'Optional[List[T]]'): 'Optional[List[T]]'
  }

  class PyObject {
      + validate_always = True
  --
      + {classmethod} validate(cls, value): Any
  }

  class ConstrainedDecimal {
      + gt: OptionalIntFloatDecimal = None
      + ge: OptionalIntFloatDecimal = None
      + lt: OptionalIntFloatDecimal = None
      + le: OptionalIntFloatDecimal = None
      + max_digits: OptionalInt = None
      + decimal_places: OptionalInt = None
      + multiple_of: OptionalIntFloatDecimal = None
  --
      + {classmethod} validate(cls, value: Decimal): Decimal
  }

  class UUID1 {
  }

  class UUID3 {
  }

  class UUID4 {
  }

  class UUID5 {
  }

  class FilePath {
      + {classmethod} validate(cls, value: Path): Path
  }

  class DirectoryPath {
      + {classmethod} validate(cls, value: Path): Path
  }

  class JsonWrapper {
  }

  class JsonMeta {
  }

  class Json {
  }

  class SecretField {
      + get_secret_value(): Any
  }

  class SecretStr {
      + min_length: OptionalInt = None
      + max_length: OptionalInt = None
  --
      + {classmethod} validate(cls, value): 'SecretStr'
      - __init__(value: str)
      + display(): str
      + get_secret_value(): str
  }

  class SecretBytes {
      + min_length: OptionalInt = None
      + max_length: OptionalInt = None
  --
      + {classmethod} validate(cls, value): 'SecretBytes'
      - __init__(value: bytes)
      + display(): str
      + get_secret_value(): bytes
  }

  class PaymentCardBrand {
      + amex = 'American Express'
      + mastercard = 'Mastercard'
      + visa = 'Visa'
      + other = 'other'
  }

  class PaymentCardNumber {
      + strip_whitespace: ClassVar[bool] = True
      + min_length: ClassVar[int] = 12
      + max_length: ClassVar[int] = 19
      + bin: str
      + last4: str
      + brand: PaymentCardBrand
  --
      - __init__(card_number: str)
      + masked(): str
      + {classmethod} validate_digits(cls, card_number: str): str
      + {classmethod} validate_luhn_check_digit(cls, card_number: str): str
      + {classmethod} validate_length_for_brand(cls, card_number: 'PaymentCardNumber'): 'PaymentCardNumber'
  }

  class ByteSize {
      + {classmethod} validate(cls, v: StrIntFloat): 'ByteSize'
      + human_readable(decimal: bool = False): str
      + to(unit: str): float
  }

  class PastDate {
      + {classmethod} validate(cls, value: date): date
  }

  class FutureDate {
      + {classmethod} validate(cls, value: date): date
  }

  class ConstrainedDate {
      + gt: OptionalDate = None
      + ge: OptionalDate = None
      + lt: OptionalDate = None
      + le: OptionalDate = None
  }

  class PyObjectStr {
  }

  class Representation {
  }

  class GetterDict {
      - __init__(obj)
      + get(key, default = None): Any
      + extra_keys(): Set[Any]
      + keys(): List[Any]
      + values(): List[Any]
      + items(): Iterator[Tuple[str, Any]]
  }

  class ValueItems {
      - __init__(value, items: Union['AbstractSetIntStr', 'MappingIntStrAny'])
      + is_excluded(item): bool
      + is_included(item): bool
      + for_element(e: 'IntStr'): Optional[Union['AbstractSetIntStr', 'MappingIntStrAny']]
      + {classmethod} merge(cls, base, override, intersect: bool = False): Any
      + {static} is_true(v): bool
  }

  class ClassAttribute {
      - __init__(name: str, value)
  }

  class IfConfig {
      - __init__(validator: AnyCallable)
      + check(config: Type['BaseConfig']): bool
  }

}

package pydantic_core {
  class CoreConfig {
      + title: str
      + strict: bool
      + extra_fields_behavior: ExtraBehavior
      + typed_dict_total: bool
      + from_attributes: bool
      + loc_by_alias: bool
      + revalidate_instances: Literal['always', 'never', 'subclass-instances']
      + validate_default: bool
      + populate_by_name: bool
      + str_max_length: int
      + str_min_length: int
      + str_strip_whitespace: bool
      + str_to_lower: bool
      + str_to_upper: bool
      + allow_inf_nan: bool
      + ser_json_timedelta: Literal['iso8601', 'float']
      + ser_json_bytes: Literal['utf8', 'base64', 'hex']
      + ser_json_inf_nan: Literal['null', 'constants', 'strings']
      + val_json_bytes: Literal['utf8', 'base64', 'hex']
      + hide_input_in_errors: bool
      + validation_error_cause: bool
      + coerce_numbers_to_str: bool
      + regex_engine: Literal['rust-regex', 'python-re']
      + cache_strings: Union[bool, Literal['all', 'keys', 'none']]
  }

  class SerializationInfo {
      + include(): IncExCall
      + exclude(): IncExCall
      + context(): Any | None
      + mode(): str
      + by_alias(): bool
      + exclude_unset(): bool
      + exclude_defaults(): bool
      + exclude_none(): bool
      + serialize_as_any(): bool
      + round_trip(): bool
      + mode_is_json(): bool
  }

  class FieldSerializationInfo {
      + field_name(): str
  }

  class ValidationInfo {
      + context(): Any | None
      + config(): CoreConfig | None
      + mode(): Literal['python', 'json']
      + data(): Dict[str, Any]
      + field_name(): str | None
  }

  class SimpleSerSchema {
      + type: Required[ExpectedSerializationTypes]
  }

  class PlainSerializerFunctionSerSchema {
      + type: Required[Literal['function-plain']]
      + function: Required[SerializerFunction]
      + is_field_serializer: bool
      + info_arg: bool
      + return_schema: CoreSchema
      + when_used: WhenUsed
  }

  class SerializerFunctionWrapHandler {
  }

  class WrapSerializerFunctionSerSchema {
      + type: Required[Literal['function-wrap']]
      + function: Required[WrapSerializerFunction]
      + is_field_serializer: bool
      + info_arg: bool
      + schema: CoreSchema
      + return_schema: CoreSchema
      + when_used: WhenUsed
  }

  class FormatSerSchema {
      + type: Required[Literal['format']]
      + formatting_string: Required[str]
      + when_used: WhenUsed
  }

  class ToStringSerSchema {
      + type: Required[Literal['to-string']]
      + when_used: WhenUsed
  }

  class ModelSerSchema {
      + type: Required[Literal['model']]
      + cls: Required[Type[Any]]
      + schema: Required[CoreSchema]
  }

  class InvalidSchema {
      + type: Required[Literal['invalid']]
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class ComputedField {
      + type: Required[Literal['computed-field']]
      + property_name: Required[str]
      + return_schema: Required[CoreSchema]
      + alias: str
      + metadata: Dict[str, Any]
  }

  class AnySchema {
      + type: Required[Literal['any']]
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class NoneSchema {
      + type: Required[Literal['none']]
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class BoolSchema {
      + type: Required[Literal['bool']]
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class IntSchema {
      + type: Required[Literal['int']]
      + multiple_of: int
      + le: int
      + ge: int
      + lt: int
      + gt: int
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class FloatSchema {
      + type: Required[Literal['float']]
      + allow_inf_nan: bool
      + multiple_of: float
      + le: float
      + ge: float
      + lt: float
      + gt: float
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class DecimalSchema {
      + type: Required[Literal['decimal']]
      + allow_inf_nan: bool
      + multiple_of: Decimal
      + le: Decimal
      + ge: Decimal
      + lt: Decimal
      + gt: Decimal
      + max_digits: int
      + decimal_places: int
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class ComplexSchema {
      + type: Required[Literal['complex']]
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class StringSchema {
      + type: Required[Literal['str']]
      + pattern: Union[str, Pattern[str]]
      + max_length: int
      + min_length: int
      + strip_whitespace: bool
      + to_lower: bool
      + to_upper: bool
      + regex_engine: Literal['rust-regex', 'python-re']
      + strict: bool
      + coerce_numbers_to_str: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class BytesSchema {
      + type: Required[Literal['bytes']]
      + max_length: int
      + min_length: int
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class DateSchema {
      + type: Required[Literal['date']]
      + strict: bool
      + le: date
      + ge: date
      + lt: date
      + gt: date
      + now_op: Literal['past', 'future']
      + now_utc_offset: int
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class TimeSchema {
      + type: Required[Literal['time']]
      + strict: bool
      + le: time
      + ge: time
      + lt: time
      + gt: time
      + tz_constraint: Union[Literal['aware', 'naive'], int]
      + microseconds_precision: Literal['truncate', 'error']
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class DatetimeSchema {
      + type: Required[Literal['datetime']]
      + strict: bool
      + le: datetime
      + ge: datetime
      + lt: datetime
      + gt: datetime
      + now_op: Literal['past', 'future']
      + tz_constraint: Union[Literal['aware', 'naive'], int]
      + now_utc_offset: int
      + microseconds_precision: Literal['truncate', 'error']
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class TimedeltaSchema {
      + type: Required[Literal['timedelta']]
      + strict: bool
      + le: timedelta
      + ge: timedelta
      + lt: timedelta
      + gt: timedelta
      + microseconds_precision: Literal['truncate', 'error']
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class LiteralSchema {
      + type: Required[Literal['literal']]
      + expected: Required[List[Any]]
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class EnumSchema {
      + type: Required[Literal['enum']]
      + cls: Required[Any]
      + members: Required[List[Any]]
      + sub_type: Literal['str', 'int', 'float']
      + missing: Callable[[Any], Any]
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class IsInstanceSchema {
      + type: Required[Literal['is-instance']]
      + cls: Required[Any]
      + cls_repr: str
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class IsSubclassSchema {
      + type: Required[Literal['is-subclass']]
      + cls: Required[Type[Any]]
      + cls_repr: str
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class CallableSchema {
      + type: Required[Literal['callable']]
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class UuidSchema {
      + type: Required[Literal['uuid']]
      + version: Literal[1, 3, 4, 5]
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class IncExSeqSerSchema {
      + type: Required[Literal['include-exclude-sequence']]
      + include: Set[int]
      + exclude: Set[int]
  }

  class ListSchema {
      + type: Required[Literal['list']]
      + items_schema: CoreSchema
      + min_length: int
      + max_length: int
      + fail_fast: bool
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: IncExSeqOrElseSerSchema
  }

  class TupleSchema {
      + type: Required[Literal['tuple']]
      + items_schema: Required[List[CoreSchema]]
      + variadic_item_index: int
      + min_length: int
      + max_length: int
      + fail_fast: bool
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: IncExSeqOrElseSerSchema
  }

  class SetSchema {
      + type: Required[Literal['set']]
      + items_schema: CoreSchema
      + min_length: int
      + max_length: int
      + fail_fast: bool
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class FrozenSetSchema {
      + type: Required[Literal['frozenset']]
      + items_schema: CoreSchema
      + min_length: int
      + max_length: int
      + fail_fast: bool
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class GeneratorSchema {
      + type: Required[Literal['generator']]
      + items_schema: CoreSchema
      + min_length: int
      + max_length: int
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: IncExSeqOrElseSerSchema
  }

  class IncExDictSerSchema {
      + type: Required[Literal['include-exclude-dict']]
      + include: IncExDict
      + exclude: IncExDict
  }

  class DictSchema {
      + type: Required[Literal['dict']]
      + keys_schema: CoreSchema
      + values_schema: CoreSchema
      + min_length: int
      + max_length: int
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: IncExDictOrElseSerSchema
  }

  class NoInfoValidatorFunctionSchema {
      + type: Literal['no-info']
      + function: NoInfoValidatorFunction
  }

  class WithInfoValidatorFunctionSchema {
      + type: Required[Literal['with-info']]
      + function: Required[WithInfoValidatorFunction]
      + field_name: str
  }

  class BeforeValidatorFunctionSchema {
      + type: Required[Literal['function-before']]
      + json_schema_input_schema: CoreSchema
  }

  class AfterValidatorFunctionSchema {
      + type: Required[Literal['function-after']]
  }

  class ValidatorFunctionWrapHandler {
  }

  class NoInfoWrapValidatorFunctionSchema {
      + type: Literal['no-info']
      + function: NoInfoWrapValidatorFunction
  }

  class WithInfoWrapValidatorFunctionSchema {
      + type: Required[Literal['with-info']]
      + function: Required[WithInfoWrapValidatorFunction]
      + field_name: str
  }

  class WrapValidatorFunctionSchema {
      + type: Required[Literal['function-wrap']]
      + function: Required[WrapValidatorFunction]
      + schema: Required[CoreSchema]
      + ref: str
      + json_schema_input_schema: CoreSchema
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class PlainValidatorFunctionSchema {
      + type: Required[Literal['function-plain']]
      + function: Required[ValidationFunction]
      + ref: str
      + json_schema_input_schema: CoreSchema
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class WithDefaultSchema {
      + type: Required[Literal['default']]
      + schema: Required[CoreSchema]
      + default
      + default_factory: Union[Callable[[], Any], Callable[[Dict[str, Any]], Any]]
      + default_factory_takes_data: bool
      + on_error: Literal['raise', 'omit', 'default']
      + validate_default: bool
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class NullableSchema {
      + type: Required[Literal['nullable']]
      + schema: Required[CoreSchema]
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class UnionSchema {
      + type: Required[Literal['union']]
      + choices: Required[List[Union[CoreSchema, Tuple[CoreSchema, str]]]]
      + auto_collapse: bool
      + custom_error_type: str
      + custom_error_message: str
      + custom_error_context: Dict[str, Union[str, int, float]]
      + mode: Literal['smart', 'left_to_right']
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class TaggedUnionSchema {
      + type: Required[Literal['tagged-union']]
      + choices: Required[Dict[Hashable, CoreSchema]]
      + discriminator: Required[Union[str, List[Union[str, int]], List[List[Union[str, int]]], Callable[[Any], Hashable]]]
      + custom_error_type: str
      + custom_error_message: str
      + custom_error_context: Dict[str, Union[str, int, float]]
      + strict: bool
      + from_attributes: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class ChainSchema {
      + type: Required[Literal['chain']]
      + steps: Required[List[CoreSchema]]
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class LaxOrStrictSchema {
      + type: Required[Literal['lax-or-strict']]
      + lax_schema: Required[CoreSchema]
      + strict_schema: Required[CoreSchema]
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class JsonOrPythonSchema {
      + type: Required[Literal['json-or-python']]
      + json_schema: Required[CoreSchema]
      + python_schema: Required[CoreSchema]
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class TypedDictField {
      + type: Required[Literal['typed-dict-field']]
      + schema: Required[CoreSchema]
      + required: bool
      + validation_alias: Union[str, List[Union[str, int]], List[List[Union[str, int]]]]
      + serialization_alias: str
      + serialization_exclude: bool
      + metadata: Dict[str, Any]
  }

  class TypedDictSchema {
      + type: Required[Literal['typed-dict']]
      + fields: Required[Dict[str, TypedDictField]]
      + cls: Type[Any]
      + computed_fields: List[ComputedField]
      + strict: bool
      + extras_schema: CoreSchema
      + extra_behavior: ExtraBehavior
      + total: bool
      + populate_by_name: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
      + config: CoreConfig
  }

  class ModelField {
      + type: Required[Literal['model-field']]
      + schema: Required[CoreSchema]
      + validation_alias: Union[str, List[Union[str, int]], List[List[Union[str, int]]]]
      + serialization_alias: str
      + serialization_exclude: bool
      + frozen: bool
      + metadata: Dict[str, Any]
  }

  class ModelFieldsSchema {
      + type: Required[Literal['model-fields']]
      + fields: Required[Dict[str, ModelField]]
      + model_name: str
      + computed_fields: List[ComputedField]
      + strict: bool
      + extras_schema: CoreSchema
      + extra_behavior: ExtraBehavior
      + populate_by_name: bool
      + from_attributes: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class ModelSchema {
      + type: Required[Literal['model']]
      + cls: Required[Type[Any]]
      + generic_origin: Type[Any]
      + schema: Required[CoreSchema]
      + custom_init: bool
      + root_model: bool
      + post_init: str
      + revalidate_instances: Literal['always', 'never', 'subclass-instances']
      + strict: bool
      + frozen: bool
      + extra_behavior: ExtraBehavior
      + config: CoreConfig
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class DataclassField {
      + type: Required[Literal['dataclass-field']]
      + name: Required[str]
      + schema: Required[CoreSchema]
      + kw_only: bool
      + init: bool
      + init_only: bool
      + frozen: bool
      + validation_alias: Union[str, List[Union[str, int]], List[List[Union[str, int]]]]
      + serialization_alias: str
      + serialization_exclude: bool
      + metadata: Dict[str, Any]
  }

  class DataclassArgsSchema {
      + type: Required[Literal['dataclass-args']]
      + dataclass_name: Required[str]
      + fields: Required[List[DataclassField]]
      + computed_fields: List[ComputedField]
      + populate_by_name: bool
      + collect_init_only: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
      + extra_behavior: ExtraBehavior
  }

  class DataclassSchema {
      + type: Required[Literal['dataclass']]
      + cls: Required[Type[Any]]
      + generic_origin: Type[Any]
      + schema: Required[CoreSchema]
      + fields: Required[List[str]]
      + cls_name: str
      + post_init: bool
      + revalidate_instances: Literal['always', 'never', 'subclass-instances']
      + strict: bool
      + frozen: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
      + slots: bool
      + config: CoreConfig
  }

  class ArgumentsParameter {
      + name: Required[str]
      + schema: Required[CoreSchema]
      + mode: Literal['positional_only', 'positional_or_keyword', 'keyword_only']
      + alias: Union[str, List[Union[str, int]], List[List[Union[str, int]]]]
  }

  class ArgumentsSchema {
      + type: Required[Literal['arguments']]
      + arguments_schema: Required[List[ArgumentsParameter]]
      + populate_by_name: bool
      + var_args_schema: CoreSchema
      + var_kwargs_mode: VarKwargsMode
      + var_kwargs_schema: CoreSchema
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class CallSchema {
      + type: Required[Literal['call']]
      + arguments_schema: Required[CoreSchema]
      + function: Required[Callable[..., Any]]
      + function_name: str
      + return_schema: CoreSchema
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class CustomErrorSchema {
      + type: Required[Literal['custom-error']]
      + schema: Required[CoreSchema]
      + custom_error_type: Required[str]
      + custom_error_message: str
      + custom_error_context: Dict[str, Union[str, int, float]]
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class JsonSchema {
      + type: Required[Literal['json']]
      + schema: CoreSchema
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class UrlSchema {
      + type: Required[Literal['url']]
      + max_length: int
      + allowed_schemes: List[str]
      + host_required: bool
      + default_host: str
      + default_port: int
      + default_path: str
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class MultiHostUrlSchema {
      + type: Required[Literal['multi-host-url']]
      + max_length: int
      + allowed_schemes: List[str]
      + host_required: bool
      + default_host: str
      + default_port: int
      + default_path: str
      + strict: bool
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class DefinitionsSchema {
      + type: Required[Literal['definitions']]
      + schema: Required[CoreSchema]
      + definitions: Required[List[CoreSchema]]
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class DefinitionReferenceSchema {
      + type: Required[Literal['definition-ref']]
      + schema_ref: Required[str]
      + ref: str
      + metadata: Dict[str, Any]
      + serialization: SerSchema
  }

  class ErrorDetails {
      + type: str
      + loc: tuple[int | str, ...]
      + msg: str
      + input: _Any
      + ctx: _NotRequired[dict[str, _Any]]
  }

  class InitErrorDetails {
      + type: str | PydanticCustomError
      + loc: _NotRequired[tuple[int | str, ...]]
      + input: _Any
      + ctx: _NotRequired[dict[str, _Any]]
  }

  class ErrorTypeInfo {
      + type: ErrorType
      + message_template_python: str
      + example_message_python: str
      + message_template_json: _NotRequired[str]
      + example_message_json: _NotRequired[str]
      + example_context: dict[str, _Any] | None
  }

  class MultiHostHost {
      + username: str | None
      + password: str | None
      + host: str | None
      + port: int | None
  }

}

package pydantic_settings {
  class SettingsConfigDict {
      + case_sensitive: bool
      + nested_model_default_partial_update: bool | None
      + env_prefix: str
      + env_file: DotenvType | None
      + env_file_encoding: str | None
      + env_ignore_empty: bool
      + env_nested_delimiter: str | None
      + env_nested_max_split: int | None
      + env_parse_none_str: str | None
      + env_parse_enums: bool | None
      + cli_prog_name: str | None
      + cli_parse_args: bool | list[str] | tuple[str, ...] | None
      + cli_parse_none_str: str | None
      + cli_hide_none_type: bool
      + cli_avoid_json: bool
      + cli_enforce_required: bool
      + cli_use_class_docs_for_groups: bool
      + cli_exit_on_error: bool
      + cli_prefix: str
      + cli_flag_prefix_char: str
      + cli_implicit_flags: bool | None
      + cli_ignore_unknown_args: bool | None
      + cli_kebab_case: bool | None
      + secrets_dir: PathType | None
      + json_file: PathType | None
      + json_file_encoding: str | None
      + yaml_file: PathType | None
      + yaml_file_encoding: str | None
      + pyproject_toml_depth: int
      + pyproject_toml_table_header: tuple[str, ...]
      + toml_file: PathType | None
      + enable_decoding: bool
  }

  class BaseSettings {
      + model_config: ClassVar[SettingsConfigDict] = SettingsConfigDict(extra='forbid', arbitrary_types_allowed=True, validate_default=True, case_sensitive=False, env_prefix='', nested_model_default_partial_update=False, env_file=None, env_file_encoding=None, env_ignore_empty=False, env_nested_delimiter=None, env_nested_max_split=None, env_parse_none_str=None, env_parse_enums=None, cli_prog_name=None, cli_parse_args=None, cli_parse_none_str=None, cli_hide_none_type=False, cli_avoid_json=False, cli_enforce_required=False, cli_use_class_docs_for_groups=False, cli_exit_on_error=True, cli_prefix='', cli_flag_prefix_char='-', cli_implicit_flags=False, cli_ignore_unknown_args=False, cli_kebab_case=False, json_file=None, json_file_encoding=None, yaml_file=None, yaml_file_encoding=None, toml_file=None, secrets_dir=None, protected_namespaces=('model_validate', 'model_dump', 'settings_customise_sources'), enable_decoding=True)
  --
      - __init__(__pydantic_self__, _case_sensitive: bool | None = None, _nested_model_default_partial_update: bool | None = None, _env_prefix: str | None = None, _env_file: DotenvType | None = ENV_FILE_SENTINEL, _env_file_encoding: str | None = None, _env_ignore_empty: bool | None = None, _env_nested_delimiter: str | None = None, _env_nested_max_split: int | None = None, _env_parse_none_str: str | None = None, _env_parse_enums: bool | None = None, _cli_prog_name: str | None = None, _cli_parse_args: bool | list[str] | tuple[str, ...] | None = None, _cli_settings_source: CliSettingsSource[Any] | None = None, _cli_parse_none_str: str | None = None, _cli_hide_none_type: bool | None = None, _cli_avoid_json: bool | None = None, _cli_enforce_required: bool | None = None, _cli_use_class_docs_for_groups: bool | None = None, _cli_exit_on_error: bool | None = None, _cli_prefix: str | None = None, _cli_flag_prefix_char: str | None = None, _cli_implicit_flags: bool | None = None, _cli_ignore_unknown_args: bool | None = None, _cli_kebab_case: bool | None = None, _secrets_dir: PathType | None = None)
      + {classmethod} settings_customise_sources(cls, settings_cls: type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource): tuple[PydanticBaseSettingsSource, ...]
  }

  class CliApp {
      + {static} run(model_cls: type[T], cli_args: list[str] | Namespace | SimpleNamespace | dict[str, Any] | None = None, cli_settings_source: CliSettingsSource[Any] | None = None, cli_exit_on_error: bool | None = None, cli_cmd_method_name: str = 'cli_cmd'): T
      + {static} run_subcommand(model: PydanticModel, cli_exit_on_error: bool | None = None, cli_cmd_method_name: str = 'cli_cmd'): PydanticModel
  }

  class CliAppBaseSettings {
      + model_config = SettingsConfigDict(nested_model_default_partial_update=True, case_sensitive=True, cli_hide_none_type=True, cli_avoid_json=True, cli_enforce_required=True, cli_implicit_flags=True, cli_kebab_case=True)
  }

  class NoDecode {
  }

  class ForceDecode {
  }

  class SettingsError {
  }

  class CliMutuallyExclusiveGroup {
  }

  class EnvNoneType {
  }

  class PydanticBaseSettingsSource {
      - __init__(settings_cls: type[BaseSettings])
      + current_state(): dict[str, Any]
      + settings_sources_data(): dict[str, dict[str, Any]]
      + get_field_value(field: FieldInfo, field_name: str): tuple[Any, str, bool]
      + field_is_complex(field: FieldInfo): bool
      + prepare_field_value(field_name: str, field: FieldInfo, value, value_is_complex: bool): Any
      + decode_complex_value(field_name: str, field: FieldInfo, value): Any
  }

  class DefaultSettingsSource {
      - __init__(settings_cls: type[BaseSettings], nested_model_default_partial_update: bool | None = None)
      + get_field_value(field: FieldInfo, field_name: str): tuple[Any, str, bool]
  }

  class InitSettingsSource {
      - __init__(settings_cls: type[BaseSettings], init_kwargs: dict[str, Any], nested_model_default_partial_update: bool | None = None)
      + get_field_value(field: FieldInfo, field_name: str): tuple[Any, str, bool]
  }

  class PydanticBaseEnvSettingsSource {
      - __init__(settings_cls: type[BaseSettings], case_sensitive: bool | None = None, env_prefix: str | None = None, env_ignore_empty: bool | None = None, env_parse_none_str: str | None = None, env_parse_enums: bool | None = None)
  }

  class SecretsSettingsSource {
      - __init__(settings_cls: type[BaseSettings], secrets_dir: PathType | None = None, case_sensitive: bool | None = None, env_prefix: str | None = None, env_ignore_empty: bool | None = None, env_parse_none_str: str | None = None, env_parse_enums: bool | None = None)
      + {classmethod} find_case_path(cls, dir_path: Path, file_name: str, case_sensitive: bool): Path | None
      + get_field_value(field: FieldInfo, field_name: str): tuple[Any, str, bool]
  }

  class EnvSettingsSource {
      - __init__(settings_cls: type[BaseSettings], case_sensitive: bool | None = None, env_prefix: str | None = None, env_nested_delimiter: str | None = None, env_nested_max_split: int | None = None, env_ignore_empty: bool | None = None, env_parse_none_str: str | None = None, env_parse_enums: bool | None = None)
      + get_field_value(field: FieldInfo, field_name: str): tuple[Any, str, bool]
      + prepare_field_value(field_name: str, field: FieldInfo, value, value_is_complex: bool): Any
      + next_field(field: FieldInfo | Any | None, key: str, case_sensitive: bool | None = None): FieldInfo | None
      + explode_env_vars(field_name: str, field: FieldInfo, env_vars: Mapping[str, str | None]): dict[str, Any]
  }

  class DotEnvSettingsSource {
      - __init__(settings_cls: type[BaseSettings], env_file: DotenvType | None = ENV_FILE_SENTINEL, env_file_encoding: str | None = None, case_sensitive: bool | None = None, env_prefix: str | None = None, env_nested_delimiter: str | None = None, env_nested_max_split: int | None = None, env_ignore_empty: bool | None = None, env_parse_none_str: str | None = None, env_parse_enums: bool | None = None)
  }

  class CliSettingsSource {
      - __init__(settings_cls: type[BaseSettings], cli_prog_name: str | None = None, cli_parse_args: bool | list[str] | tuple[str, ...] | None = None, cli_parse_none_str: str | None = None, cli_hide_none_type: bool | None = None, cli_avoid_json: bool | None = None, cli_enforce_required: bool | None = None, cli_use_class_docs_for_groups: bool | None = None, cli_exit_on_error: bool | None = None, cli_prefix: str | None = None, cli_flag_prefix_char: str | None = None, cli_implicit_flags: bool | None = None, cli_ignore_unknown_args: bool | None = None, cli_kebab_case: bool | None = None, case_sensitive: bool | None = True, root_parser = None, parse_args_method: Callable[..., Any] | None = None, add_argument_method: Callable[..., Any] | None = ArgumentParser.add_argument, add_argument_group_method: Callable[..., Any] | None = ArgumentParser.add_argument_group, add_parser_method: Callable[..., Any] | None = _SubParsersAction.add_parser, add_subparsers_method: Callable[..., Any] | None = ArgumentParser.add_subparsers, formatter_class = RawDescriptionHelpFormatter)
      + root_parser(): T
  }

  class ConfigFileSourceMixin {
  }

  class JsonConfigSettingsSource {
      - __init__(settings_cls: type[BaseSettings], json_file: PathType | None = DEFAULT_PATH, json_file_encoding: str | None = None)
  }

  class TomlConfigSettingsSource {
      - __init__(settings_cls: type[BaseSettings], toml_file: PathType | None = DEFAULT_PATH)
  }

  class PyprojectTomlConfigSettingsSource {
      - __init__(settings_cls: type[BaseSettings], toml_file: Path | None = None)
  }

  class YamlConfigSettingsSource {
      - __init__(settings_cls: type[BaseSettings], yaml_file: PathType | None = DEFAULT_PATH, yaml_file_encoding: str | None = None)
  }

  class AzureKeyVaultMapping {
      - __init__(secret_client: SecretClient)
  }

  class AzureKeyVaultSettingsSource {
      - __init__(settings_cls: type[BaseSettings], url: str, credential: TokenCredential, env_prefix: str | None = None, env_parse_none_str: str | None = None, env_parse_enums: bool | None = None)
  }

}

package python_multipart {
  class SupportsWrite {
      + write(__b: _T_contra): object
  }

  class Base64Decoder {
      - __init__(underlying: 'SupportsWrite[bytes]')
      + write(data: bytes): int
      + close()
      + finalize()
  }

  class QuotedPrintableDecoder {
      - __init__(underlying: 'SupportsWrite[bytes]')
      + write(data: bytes): int
      + close()
      + finalize()
  }

  class FormParserError {
  }

  class ParseError {
      + offset = -1
  }

  class MultipartParseError {
  }

  class QuerystringParseError {
  }

  class DecodeError {
  }

  class FileError {
  }

  class SupportsRead {
      + read(__n: int): bytes
  }

  class QuerystringCallbacks {
      + on_field_start: Callable[[], None]
      + on_field_name: Callable[[bytes, int, int], None]
      + on_field_data: Callable[[bytes, int, int], None]
      + on_field_end: Callable[[], None]
      + on_end: Callable[[], None]
  }

  class OctetStreamCallbacks {
      + on_start: Callable[[], None]
      + on_data: Callable[[bytes, int, int], None]
      + on_end: Callable[[], None]
  }

  class MultipartCallbacks {
      + on_part_begin: Callable[[], None]
      + on_part_data: Callable[[bytes, int, int], None]
      + on_part_end: Callable[[], None]
      + on_header_begin: Callable[[], None]
      + on_header_field: Callable[[bytes, int, int], None]
      + on_header_value: Callable[[bytes, int, int], None]
      + on_header_end: Callable[[], None]
      + on_headers_finished: Callable[[], None]
      + on_end: Callable[[], None]
  }

  class FormParserConfig {
      + UPLOAD_DIR: str | None
      + UPLOAD_KEEP_FILENAME: bool
      + UPLOAD_KEEP_EXTENSIONS: bool
      + UPLOAD_ERROR_ON_BAD_CTE: bool
      + MAX_MEMORY_FILE_SIZE: int
      + MAX_BODY_SIZE: float
  }

  class FileConfig {
      + UPLOAD_DIR: str | bytes | None
      + UPLOAD_DELETE_TMP: bool
      + UPLOAD_KEEP_FILENAME: bool
      + UPLOAD_KEEP_EXTENSIONS: bool
      + MAX_MEMORY_FILE_SIZE: int
  }

  class FieldProtocol {
      - __init__(name: bytes | None)
      + set_none()
  }

  class FileProtocol {
      - __init__(file_name: bytes | None, field_name: bytes | None, config: FileConfig)
  }

  class QuerystringState {
      + BEFORE_FIELD = 0
      + FIELD_NAME = 1
      + FIELD_DATA = 2
  }

  class MultipartState {
      + START = 0
      + START_BOUNDARY = 1
      + HEADER_FIELD_START = 2
      + HEADER_FIELD = 3
      + HEADER_VALUE_START = 4
      + HEADER_VALUE = 5
      + HEADER_VALUE_ALMOST_DONE = 6
      + HEADERS_ALMOST_DONE = 7
      + PART_DATA_START = 8
      + PART_DATA = 9
      + PART_DATA_END = 10
      + END_BOUNDARY = 11
      + END = 12
  }

  class Field {
      - __init__(name: bytes | None)
      + {classmethod} from_value(cls, name: bytes, value: bytes | None): Field
      + write(data: bytes): int
      + on_data(data: bytes): int
      + on_end()
      + finalize()
      + close()
      + set_none()
      + field_name(): bytes | None
      + value(): bytes | None
  }

  class File {
      - __init__(file_name: bytes | None, field_name: bytes | None = None, config: FileConfig = {})
      + field_name(): bytes | None
      + file_name(): bytes | None
      + actual_file_name(): bytes | None
      + file_object(): BytesIO | BufferedRandom
      + size(): int
      + in_memory(): bool
      + flush_to_disk()
      + write(data: bytes): int
      + on_data(data: bytes): int
      + on_end()
      + finalize()
      + close()
  }

  class BaseParser {
      - __init__()
      + callback(name: CallbackName, data: bytes | None = None, start: int | None = None, end: int | None = None)
      + set_callback(name: CallbackName, new_func: Callable[..., Any] | None)
      + close()
      + finalize()
  }

  class OctetStreamParser {
      - __init__(callbacks: OctetStreamCallbacks = {}, max_size: float = float('inf'))
      + write(data: bytes): int
      + finalize()
  }

  class QuerystringParser {
      + state: QuerystringState
  --
      - __init__(callbacks: QuerystringCallbacks = {}, strict_parsing: bool = False, max_size: float = float('inf'))
      + write(data: bytes): int
      + finalize()
  }

  class MultipartParser {
      - __init__(boundary: bytes | str, callbacks: MultipartCallbacks = {}, max_size: float = float('inf'))
      + write(data: bytes): int
      + finalize()
  }

  class FormParser {
      + DEFAULT_CONFIG: FormParserConfig = {'MAX_BODY_SIZE': float('inf'), 'MAX_MEMORY_FILE_SIZE': 1 * 1024 * 1024, 'UPLOAD_DIR': None, 'UPLOAD_KEEP_FILENAME': False, 'UPLOAD_KEEP_EXTENSIONS': False, 'UPLOAD_ERROR_ON_BAD_CTE': False}
  --
      - __init__(content_type: str, on_field: OnFieldCallback | None, on_file: OnFileCallback | None, on_end: Callable[[], None] | None = None, boundary: bytes | str | None = None, file_name: bytes | None = None, FileClass: type[FileProtocol] = File, FieldClass: type[FieldProtocol] = Field, config: dict[Any, Any] = {})
      + write(data: bytes): int
      + finalize()
      + close()
  }

}

package rich_toolkit {
  class TextInputHandler {
      + DOWN_KEY = '\x1b[B'
      + UP_KEY = '\x1b[A'
      + LEFT_KEY = '\x1b[D'
      + RIGHT_KEY = '\x1b[C'
      + BACKSPACE_KEY = '\x7f'
      + DELETE_KEY = '\x1b[3~'
  --
      - __init__(cursor_offset: int = 0)
      + update_text(text: str)
      + fix_cursor(): Tuple[Control, ...]
  }

  class LiveInput {
      - __init__(console: Console, style: Optional[BaseStyle] = None, cursor_offset: int = 0)
      + render_result(): RenderableType
      + render_input(): RenderableType
      + should_show_cursor(): bool
      + position_cursor(): Tuple[Control, ...]
  }

  class Input {
      - __init__(console: Console, title: str, style: Optional[BaseStyle] = None, default: str = '', cursor_offset: int = 0, password: bool = False)
      + render_result(): RenderableType
      + render_input(): Group
      + ask(): str
  }

  class Option {
      + name: str
      + value: ReturnValue
  }

  class Menu {
      + DOWN_KEYS = [TextInputHandler.DOWN_KEY, 'j']
      + UP_KEYS = [TextInputHandler.UP_KEY, 'k']
      + LEFT_KEYS = [TextInputHandler.LEFT_KEY, 'h']
      + RIGHT_KEYS = [TextInputHandler.RIGHT_KEY, 'l']
      + current_selection_char = '●'
      + selection_char = '○'
      + filter_prompt = 'Filter: '
  --
      - __init__(title: str, options: List[Option[ReturnValue]], inline: bool = False, allow_filtering: bool = False)
      + get_key(): Optional[str]
      + options(): List[Option[ReturnValue]]
      + render_input(): RenderableType
      + render_result(): RenderableType
      + update_text(text: str)
      + reposition_cursor(): Control
      + position_cursor(): Tuple[Control, ...]
      + fix_cursor(): Tuple[Control, ...]
      + should_show_cursor(): bool
      + ask(): ReturnValue
  }

  class Progress {
      - __init__(title: str, style: Optional[BaseStyle] = None, console: Optional[Console] = None, transient: bool = False, transient_on_error: bool = False, inline_logs: bool = False, lines_to_show: int = -1)
      + get_renderable(): Any
      + log(text: str)
      + set_error(text: str)
  }

  class RichToolkitTheme {
      - __init__(style: BaseStyle, theme: Dict[str, str])
  }

  class RichToolkit {
      - __init__(theme: RichToolkitTheme, handle_keyboard_interrupts: bool = True)
      + print_title(title: str)
      + print()
      + print_as_string(): str
      + print_line()
      + confirm(title: str): bool
      + ask(title: str, options: List[Option[ReturnValue]], inline: bool = False, allow_filtering: bool = False): ReturnValue
      + input(title: str, default: str = '', password: bool = False): str
      + progress(title: str, transient: bool = False, transient_on_error: bool = False, inline_logs: bool = False, lines_to_show: int = -1): Progress
  }

}

package sentry_sdk {
  class Attachment {
      - __init__(bytes = None, filename = None, path = None, content_type = None, add_to_transactions = False)
      + to_envelope_item()
  }

  class get_options {
  }

  class Client {
  }

  class INSTRUMENTER {
      + SENTRY = 'sentry'
      + OTEL = 'otel'
  }

  class SPANDATA {
      + DB_NAME = 'db.name'
      + DB_USER = 'db.user'
      + DB_OPERATION = 'db.operation'
      + DB_SYSTEM = 'db.system'
      + CACHE_HIT = 'cache.hit'
      + CACHE_ITEM_SIZE = 'cache.item_size'
      + HTTP_QUERY = 'http.query'
      + HTTP_FRAGMENT = 'http.fragment'
      + HTTP_METHOD = 'http.method'
      + HTTP_STATUS_CODE = 'http.response.status_code'
      + SERVER_ADDRESS = 'server.address'
      + SERVER_PORT = 'server.port'
      + SERVER_SOCKET_ADDRESS = 'server.socket.address'
      + SERVER_SOCKET_PORT = 'server.socket.port'
      + CODE_FILEPATH = 'code.filepath'
      + CODE_LINENO = 'code.lineno'
      + CODE_FUNCTION = 'code.function'
      + CODE_NAMESPACE = 'code.namespace'
      + THREAD_ID = 'thread.id'
      + THREAD_NAME = 'thread.name'
  }

  class OP {
      + CACHE_GET_ITEM = 'cache.get_item'
      + DB = 'db'
      + DB_REDIS = 'db.redis'
      + EVENT_DJANGO = 'event.django'
      + FUNCTION = 'function'
      + FUNCTION_AWS = 'function.aws'
      + FUNCTION_GCP = 'function.gcp'
      + GRAPHQL_EXECUTE = 'graphql.execute'
      + GRAPHQL_MUTATION = 'graphql.mutation'
      + GRAPHQL_PARSE = 'graphql.parse'
      + GRAPHQL_RESOLVE = 'graphql.resolve'
      + GRAPHQL_SUBSCRIPTION = 'graphql.subscription'
      + GRAPHQL_QUERY = 'graphql.query'
      + GRAPHQL_VALIDATE = 'graphql.validate'
      + GRPC_CLIENT = 'grpc.client'
      + GRPC_SERVER = 'grpc.server'
      + HTTP_CLIENT = 'http.client'
      + HTTP_CLIENT_STREAM = 'http.client.stream'
      + HTTP_SERVER = 'http.server'
      + MIDDLEWARE_DJANGO = 'middleware.django'
      + MIDDLEWARE_STARLETTE = 'middleware.starlette'
      + MIDDLEWARE_STARLETTE_RECEIVE = 'middleware.starlette.receive'
      + MIDDLEWARE_STARLETTE_SEND = 'middleware.starlette.send'
      + MIDDLEWARE_STARLITE = 'middleware.starlite'
      + MIDDLEWARE_STARLITE_RECEIVE = 'middleware.starlite.receive'
      + MIDDLEWARE_STARLITE_SEND = 'middleware.starlite.send'
      + OPENAI_CHAT_COMPLETIONS_CREATE = 'ai.chat_completions.create.openai'
      + OPENAI_EMBEDDINGS_CREATE = 'ai.embeddings.create.openai'
      + QUEUE_SUBMIT_ARQ = 'queue.submit.arq'
      + QUEUE_TASK_ARQ = 'queue.task.arq'
      + QUEUE_SUBMIT_CELERY = 'queue.submit.celery'
      + QUEUE_TASK_CELERY = 'queue.task.celery'
      + QUEUE_TASK_RQ = 'queue.task.rq'
      + QUEUE_SUBMIT_HUEY = 'queue.submit.huey'
      + QUEUE_TASK_HUEY = 'queue.task.huey'
      + SUBPROCESS = 'subprocess'
      + SUBPROCESS_WAIT = 'subprocess.wait'
      + SUBPROCESS_COMMUNICATE = 'subprocess.communicate'
      + TEMPLATE_RENDER = 'template.render'
      + VIEW_RENDER = 'view.render'
      + VIEW_RESPONSE_RENDER = 'view.response.render'
      + WEBSOCKET_SERVER = 'websocket.server'
      + SOCKET_CONNECTION = 'socket.connection'
      + SOCKET_DNS = 'socket.dns'
  }

  class ClientConstructor {
      - __init__(dsn = None, max_breadcrumbs = DEFAULT_MAX_BREADCRUMBS, release = None, environment = None, server_name = None, shutdown_timeout = 2, integrations = [], in_app_include = [], in_app_exclude = [], default_integrations = True, dist = None, transport = None, transport_queue_size = DEFAULT_QUEUE_SIZE, sample_rate = 1.0, send_default_pii = False, http_proxy = None, https_proxy = None, ignore_errors = [], max_request_body_size = 'medium', socket_options = None, keep_alive = False, before_send = None, before_breadcrumb = None, debug = None, attach_stacktrace = False, ca_certs = None, propagate_traces = True, traces_sample_rate = None, traces_sampler = None, profiles_sample_rate = None, profiles_sampler = None, profiler_mode = None, auto_enabling_integrations = True, auto_session_tracking = True, send_client_reports = True, _experiments = {}, proxy_headers = None, instrumenter = INSTRUMENTER.SENTRY, before_send_transaction = None, project_root = None, enable_tracing = None, include_local_variables = True, include_source_context = True, trace_propagation_targets = [MATCH_ALL], functions_to_trace = [], event_scrubber = None, max_value_length = DEFAULT_MAX_VALUE_LENGTH, enable_backpressure_handling = True, error_sampler = None, enable_db_query_source = True, db_query_source_threshold_ms = 100, spotlight = None)
  }

  class Envelope {
      - __init__(headers = None, items = None)
      + description()
      + add_event(event)
      + add_transaction(transaction)
      + add_profile(profile)
      + add_checkin(checkin)
      + add_session(session)
      + add_sessions(sessions)
      + add_item(item)
      + get_event()
      + get_transaction_event()
      + serialize_into(f)
      + serialize()
      + {classmethod} deserialize_from(cls, f)
      + {classmethod} deserialize(cls, bytes)
  }

  class PayloadRef {
      - __init__(bytes = None, path = None, json = None)
      + get_bytes()
      + inferred_content_type()
  }

  class Item {
      - __init__(payload, headers = None, type = None, content_type = None, filename = None)
      + type()
      + data_category()
      + get_bytes()
      + get_event()
      + get_transaction_event()
      + serialize_into(f)
      + serialize()
      + {classmethod} deserialize_from(cls, f)
      + {classmethod} deserialize(cls, bytes)
  }

  class init {
  }

  class HubMeta {
      + current(cls)
      + main(cls)
  }

  class Hub {
      - __init__(client_or_hub = None, scope = None)
      + run(callback)
      + get_integration(name_or_class)
      + client()
      + scope()
      + last_event_id()
      + bind_client(new)
      + capture_event(event, hint = None, scope = None)
      + capture_message(message, level = None, scope = None)
      + capture_exception(error = None, scope = None)
      + add_breadcrumb(crumb = None, hint = None)
      + start_span(span = None, instrumenter = INSTRUMENTER.SENTRY)
      + start_transaction(transaction = None, instrumenter = INSTRUMENTER.SENTRY)
      + continue_trace(environ_or_headers, op = None, name = None, source = None)
      + push_scope(callback = None)
      + push_scope(callback)
      + push_scope(callback = None, continue_trace = True)
      + pop_scope_unsafe()
      + configure_scope(callback = None)
      + configure_scope(callback)
      + configure_scope(callback = None, continue_trace = True)
      + start_session(session_mode = 'application')
      + end_session()
      + stop_auto_session_tracking()
      + resume_auto_session_tracking()
      + flush(timeout = None, callback = None)
      + get_traceparent()
      + get_baggage()
      + iter_trace_propagation_headers(span = None)
      + trace_propagation_meta(span = None)
  }

  class Metric {
      + weight()
      + add(value)
      + serialize_value()
  }

  class CounterMetric {
      - __init__(first)
      + weight()
      + add(value)
      + serialize_value()
  }

  class GaugeMetric {
      - __init__(first)
      + weight()
      + add(value)
      + serialize_value()
  }

  class DistributionMetric {
      - __init__(first)
      + weight()
      + add(value)
      + serialize_value()
  }

  class SetMetric {
      - __init__(first)
      + weight()
      + add(value)
      + serialize_value()
  }

  class LocalAggregator {
      - __init__()
      + add(ty, key, value, unit, tags)
      + to_json()
  }

  class MetricsAggregator {
      + ROLLUP_IN_SECONDS = 10.0
      + MAX_WEIGHT = 100000
      + FLUSHER_SLEEP_TIME = 5.0
  --
      - __init__(capture_func, enable_code_locations = False)
      + add(ty, key, value, unit, tags, timestamp = None, local_aggregator = None, stacklevel = 0)
      + record_code_location(ty, key, unit, stacklevel, timestamp = None)
      + need_code_loation(ty, key, unit, timestamp)
      + kill()
      + flush()
  }

  class Monitor {
      + name = 'sentry.monitor'
  --
      - __init__(transport, interval = 10)
      + run()
      + set_downsample_factor()
      + check_health()
      + is_healthy()
      + downsample_factor()
      + kill()
  }

  class Profile {
      - __init__(transaction, hub = None, scheduler = None)
      + update_active_thread_id()
      + start()
      + stop()
      + write(ts, sample)
      + process()
      + to_json(event_opt, options)
      + valid()
  }

  class Scheduler {
      + mode = 'unknown'
  --
      - __init__(frequency)
      + setup()
      + teardown()
      + ensure_running()
      + start_profiling(profile)
      + stop_profiling(profile)
      + make_sampler()
  }

  class ThreadScheduler {
      + mode = 'thread'
      + name = 'sentry.profiler.ThreadScheduler'
  --
      - __init__(frequency)
      + setup()
      + teardown()
      + ensure_running()
      + run()
  }

  class GeventScheduler {
      + mode = 'gevent'
      + name = 'sentry.profiler.GeventScheduler'
  --
      - __init__(frequency)
      + setup()
      + teardown()
      + ensure_running()
      + run()
  }

  class Scope {
      - __init__()
      + set_new_propagation_context()
      + generate_propagation_context(incoming_data = None)
      + get_dynamic_sampling_context()
      + get_traceparent()
      + get_baggage()
      + get_trace_context()
      + trace_propagation_meta()
      + iter_headers()
      + iter_trace_propagation_headers()
      + clear()
      + level(value)
      + set_level(value)
      + fingerprint(value)
      + transaction()
      + transaction(value)
      + set_transaction_name(name, source = None)
      + user(value)
      + set_user(value)
      + span()
      + span(span)
      + profile()
      + profile(profile)
      + set_tag(key, value)
      + remove_tag(key)
      + set_context(key, value)
      + remove_context(key)
      + set_extra(key, value)
      + remove_extra(key)
      + clear_breadcrumbs()
      + add_attachment(bytes = None, filename = None, path = None, content_type = None, add_to_transactions = False)
      + add_breadcrumb(crumb = None, hint = None)
      + start_transaction(transaction = None, instrumenter = INSTRUMENTER.SENTRY)
      + start_span(span = None, instrumenter = INSTRUMENTER.SENTRY)
      + continue_trace(environ_or_headers, op = None, name = None, source = None)
      + capture_event(event, hint = None, client = None, scope = None)
      + capture_message(message, level = None, client = None, scope = None)
      + capture_exception(error = None, client = None, scope = None)
      + start_session()
      + end_session()
      + stop_auto_session_tracking()
      + resume_auto_session_tracking()
      + add_event_processor(func)
      + add_error_processor(func, cls = None)
      + apply_to_event(event, hint, options = None)
      + update_from_scope(scope)
      + update_from_kwargs(user = None, level = None, extras = None, contexts = None, tags = None, fingerprint = None)
  }

  class EventScrubber {
      - __init__(denylist = None, recursive = False)
      + scrub_list(lst)
      + scrub_dict(d)
      + scrub_request(event)
      + scrub_extra(event)
      + scrub_user(event)
      + scrub_breadcrumbs(event)
      + scrub_frames(event)
      + scrub_spans(event)
      + scrub_event(event)
  }

  class Memo {
      - __init__()
      + memoize(obj)
  }

  class Session {
      - __init__(sid = None, did = None, timestamp = None, started = None, duration = None, status = None, release = None, environment = None, user_agent = None, ip_address = None, errors = None, user = None, session_mode = 'application')
      + truncated_started()
      + update(sid = None, did = None, timestamp = None, started = None, duration = None, status = None, release = None, environment = None, user_agent = None, ip_address = None, errors = None, user = None)
      + close(status = None)
      + get_json_attrs(with_user_info = True)
      + to_json()
  }

  class SessionFlusher {
      - __init__(capture_func, flush_interval = 60)
      + flush()
      + add_aggregate_session(session)
      + add_session(session)
      + kill()
  }

  class SpotlightClient {
      - __init__(url)
      + capture_envelope(envelope)
  }

  class Span {
      - __init__(trace_id = None, span_id = None, parent_span_id = None, same_process_as_parent = True, sampled = None, op = None, description = None, hub = None, status = None, transaction = None, containing_transaction = None, start_timestamp = None)
      + init_span_recorder(maxlen)
      + containing_transaction()
      + start_child(instrumenter = INSTRUMENTER.SENTRY)
      + new_span()
      + {classmethod} continue_from_environ(cls, environ)
      + {classmethod} continue_from_headers(cls, headers)
      + iter_headers()
      + {classmethod} from_traceparent(cls, traceparent)
      + to_traceparent()
      + to_baggage()
      + set_tag(key, value)
      + set_data(key, value)
      + set_status(value)
      + set_thread(thread_id, thread_name)
      + set_http_status(http_status)
      + is_success()
      + finish(hub = None, end_timestamp = None)
      + to_json()
      + get_trace_context()
  }

  class Transaction {
      - __init__(name = '', parent_sampled = None, baggage = None, source = TRANSACTION_SOURCE_CUSTOM)
      + containing_transaction()
      + finish(hub = None, end_timestamp = None)
      + set_measurement(name, value, unit = '')
      + set_context(key, value)
      + set_http_status(http_status)
      + to_json()
      + get_baggage()
  }

  class NoOpSpan {
      + containing_transaction()
      + start_child(instrumenter = INSTRUMENTER.SENTRY)
      + new_span()
      + to_traceparent()
      + to_baggage()
      + get_baggage()
      + iter_headers()
      + set_tag(key, value)
      + set_data(key, value)
      + set_status(value)
      + set_http_status(http_status)
      + is_success()
      + to_json()
      + get_trace_context()
      + finish(hub = None, end_timestamp = None)
      + set_measurement(name, value, unit = '')
      + set_context(key, value)
      + init_span_recorder(maxlen)
  }

  class EnvironHeaders {
      - __init__(environ, prefix = 'HTTP_')
  }

  class Baggage {
      + SENTRY_PREFIX = 'sentry-'
      + SENTRY_PREFIX_REGEX = re.compile('^sentry-')
  --
      - __init__(sentry_items, third_party_items = '', mutable = True)
      + {classmethod} from_incoming_header(cls, header)
      + {classmethod} from_options(cls, scope)
      + {classmethod} populate_from_transaction(cls, transaction)
      + freeze()
      + dynamic_sampling_context()
      + serialize(include_third_party = False)
  }

  class Transport {
      + parsed_dsn = None
  --
      - __init__(options = None)
      + capture_event(event)
      + capture_envelope(envelope)
      + flush(timeout, callback = None)
      + kill()
      + record_lost_event(reason, data_category = None, item = None)
      + is_healthy()
  }

  class HttpTransport {
      - __init__(options)
      + record_lost_event(reason, data_category = None, item = None)
      + on_dropped_event(reason)
      + is_healthy()
      + capture_event(event)
      + capture_envelope(envelope)
      + flush(timeout, callback = None)
      + kill()
  }

  class CaptureInternalException {
  }

  class BadDsn {
  }

  class Dsn {
      - __init__(value)
      + netloc()
      + to_auth(client = None)
  }

  class Auth {
      - __init__(scheme, host, project_id, public_key, secret_key = None, version = 7, client = None, path = '/')
      + store_api_url()
      + get_api_url(type = 'store')
      + to_header()
  }

  class AnnotatedValue {
      - __init__(value, metadata)
      + {classmethod} removed_because_raw_data(cls)
      + {classmethod} removed_because_over_size_limit(cls)
      + {classmethod} substituted_because_contains_sensitive_data(cls)
  }

  class ServerlessTimeoutWarning {
  }

  class TimeoutThread {
      - __init__(waiting_time, configured_timeout)
      + stop()
      + run()
  }

  class BackgroundWorker {
      - __init__(queue_size = DEFAULT_QUEUE_SIZE)
      + is_alive()
      + start()
      + kill()
      + flush(timeout, callback = None)
      + full()
      + submit(callback)
  }

  class LRUCache {
      - __init__(max_size)
      + set(key, value)
      + get(key, default = None)
  }

  class EmptyError {
  }

  class FullError {
  }

  class Queue {
      - __init__(maxsize = 0)
      + task_done()
      + join()
      + qsize()
      + empty()
      + full()
      + put(item, block = True, timeout = None)
      + get(block = True, timeout = None)
      + put_nowait(item)
      + get_nowait()
  }

}

package crons {
  class MonitorStatus {
      + IN_PROGRESS = 'in_progress'
      + OK = 'ok'
      + ERROR = 'error'
  }

  class monitor {
      - __init__(monitor_slug = None, monitor_config = None)
  }

  class MonitorMixin {
  }

  class MonitorMixin {
  }

}

package integrations {
  class AioHttpIntegration {
      + identifier = 'aiohttp'
  --
      - __init__(transaction_style = 'handler_name')
      + {static} setup_once()
  }

  class ArgvIntegration {
      + identifier = 'argv'
  --
      + {static} setup_once()
  }

  class AriadneIntegration {
      + identifier = 'ariadne'
  --
      + {static} setup_once()
  }

  class ArqIntegration {
      + identifier = 'arq'
  --
      + {static} setup_once()
  }

  class SentryAsgiMiddleware {
      - __init__(app, unsafe_context_data = False, transaction_style = 'endpoint', mechanism_type = 'asgi')
      + event_processor(event, hint, asgi_scope)
  }

  class AsyncioIntegration {
      + identifier = 'asyncio'
  --
      + {static} setup_once()
  }

  class AsyncPGIntegration {
      + identifier = 'asyncpg'
  --
      - __init__()
      + {static} setup_once()
  }

  class AtexitIntegration {
      + identifier = 'atexit'
  --
      - __init__(callback = None)
      + {static} setup_once()
  }

  class AwsLambdaIntegration {
      + identifier = 'aws_lambda'
  --
      - __init__(timeout_warning = False)
      + {static} setup_once()
  }

  class BeamIntegration {
      + identifier = 'beam'
  --
      + {static} setup_once()
  }

  class Boto3Integration {
      + identifier = 'boto3'
  --
      + {static} setup_once()
  }

  class BottleIntegration {
      + identifier = 'bottle'
      + transaction_style = ''
  --
      - __init__(transaction_style = 'endpoint')
      + {static} setup_once()
  }

  class BottleRequestExtractor {
      + env()
      + cookies()
      + raw_data()
      + form()
      + files()
      + size_of_file(file)
  }

  class CeleryIntegration {
      + identifier = 'celery'
  --
      - __init__(propagate_traces = True, monitor_beat_tasks = False, exclude_beat_tasks = None)
      + {static} setup_once()
  }

  class NoOpMgr {
  }

  class EventSourceHandler {
  }

  class ChaliceIntegration {
      + identifier = 'chalice'
  --
      + {static} setup_once()
  }

  class ParamSpec {
      - __init__(_)
  }

  class ClickhouseDriverIntegration {
      + identifier = 'clickhouse_driver'
  --
      + {static} setup_once()
  }

  class CLOUD_PROVIDER {
      + ALIBABA = 'alibaba_cloud'
      + AWS = 'aws'
      + AZURE = 'azure'
      + GCP = 'gcp'
      + IBM = 'ibm_cloud'
      + TENCENT = 'tencent_cloud'
  }

  class CLOUD_PLATFORM {
      + AWS_EC2 = 'aws_ec2'
      + GCP_COMPUTE_ENGINE = 'gcp_compute_engine'
  }

  class CloudResourceContextIntegration {
      + identifier = 'cloudresourcecontext'
      + cloud_provider = ''
      + aws_token = ''
      + http = urllib3.PoolManager()
      + gcp_metadata = None
  --
      - __init__(cloud_provider = '')
      + {static} setup_once()
  }

  class DedupeIntegration {
      + identifier = 'dedupe'
  --
      - __init__()
      + {static} setup_once()
  }

  class ExcepthookIntegration {
      + identifier = 'excepthook'
      + always_run = False
  --
      - __init__(always_run = False)
      + {static} setup_once()
  }

  class ExecutingIntegration {
      + identifier = 'executing'
  --
      + {static} setup_once()
  }

  class FalconRequestExtractor {
      + env()
      + cookies()
      + form()
      + files()
      + raw_data()
  }

  class SentryFalconMiddleware {
      + process_request(req, resp)
  }

  class FalconIntegration {
      + identifier = 'falcon'
      + transaction_style = ''
  --
      - __init__(transaction_style = 'uri_template')
      + {static} setup_once()
  }

  class FastApiIntegration {
      + identifier = 'fastapi'
  --
      + {static} setup_once()
  }

  class FlaskIntegration {
      + identifier = 'flask'
      + transaction_style = ''
  --
      - __init__(transaction_style = 'endpoint')
      + {static} setup_once()
  }

  class FlaskRequestExtractor {
      + env()
      + cookies()
      + raw_data()
      + form()
      + files()
      + is_json()
      + json()
      + size_of_file(file)
  }

  class GcpIntegration {
      + identifier = 'gcp'
  --
      - __init__(timeout_warning = False)
      + {static} setup_once()
  }

  class GnuBacktraceIntegration {
      + identifier = 'gnu_backtrace'
  --
      + {static} setup_once()
  }

  class GQLIntegration {
      + identifier = 'gql'
  --
      + {static} setup_once()
  }

  class GrapheneIntegration {
      + identifier = 'graphene'
  --
      + {static} setup_once()
  }

  class HttpxIntegration {
      + identifier = 'httpx'
  --
      + {static} setup_once()
  }

  class HueyIntegration {
      + identifier = 'huey'
  --
      + {static} setup_once()
  }

  class LoggingIntegration {
      + identifier = 'logging'
  --
      - __init__(level = DEFAULT_LEVEL, event_level = DEFAULT_EVENT_LEVEL)
      + {static} setup_once()
  }

  class EventHandler {
      + emit(record)
  }

  class BreadcrumbHandler {
      + emit(record)
  }

  class LoggingLevels {
      + TRACE = 5
      + DEBUG = 10
      + INFO = 20
      + SUCCESS = 25
      + WARNING = 30
      + ERROR = 40
      + CRITICAL = 50
  }

  class LoguruIntegration {
      + identifier = 'loguru'
  --
      - __init__(level = DEFAULT_LEVEL, event_level = DEFAULT_EVENT_LEVEL, breadcrumb_format = DEFAULT_FORMAT, event_format = DEFAULT_FORMAT)
      + {static} setup_once()
  }

  class LoguruEventHandler {
  }

  class LoguruBreadcrumbHandler {
  }

  class ModulesIntegration {
      + identifier = 'modules'
  --
      + {static} setup_once()
  }

  class OpenAIIntegration {
      + identifier = 'openai'
  --
      - __init__(include_prompts = True)
      + {static} setup_once()
  }

  class PureEvalIntegration {
      + identifier = 'pure_eval'
  --
      + {static} setup_once()
  }

  class CommandTracer {
      - __init__()
      + started(event)
      + failed(event)
      + succeeded(event)
  }

  class PyMongoIntegration {
      + identifier = 'pymongo'
  --
      + {static} setup_once()
  }

  class PyramidIntegration {
      + identifier = 'pyramid'
      + transaction_style = ''
  --
      - __init__(transaction_style = 'route_name')
      + {static} setup_once()
  }

  class PyramidRequestExtractor {
      + url()
      + env()
      + cookies()
      + raw_data()
      + form()
      + files()
      + size_of_file(postdata)
  }

  class QuartIntegration {
      + identifier = 'quart'
      + transaction_style = ''
  --
      - __init__(transaction_style = 'endpoint')
      + {static} setup_once()
  }

  class RqIntegration {
      + identifier = 'rq'
  --
      + {static} setup_once()
  }

  class SanicIntegration {
      + identifier = 'sanic'
      + version = None
  --
      - __init__(unsampled_statuses = frozenset({404}))
      + {static} setup_once()
  }

  class SanicRequestExtractor {
      + content_length()
      + cookies()
      + raw_data()
      + form()
      + is_json()
      + json()
      + files()
      + size_of_file(file)
  }

  class SocketIntegration {
      + identifier = 'socket'
  --
      + {static} setup_once()
  }

  class SqlalchemyIntegration {
      + identifier = 'sqlalchemy'
  --
      + {static} setup_once()
  }

  class StarletteIntegration {
      + identifier = 'starlette'
      + transaction_style = ''
  --
      - __init__(transaction_style = 'url')
      + {static} setup_once()
  }

  class StarletteRequestExtractor {
      + request = None
  --
      - __init__(request)
      + extract_cookies_from_request()
      + cookies()
      + is_json()
  }

  class SentryStarliteASGIMiddleware {
      - __init__(app: 'ASGIApp')
  }

  class StarliteIntegration {
      + identifier = 'starlite'
  --
      + {static} setup_once()
  }

  class StdlibIntegration {
      + identifier = 'stdlib'
  --
      + {static} setup_once()
  }

  class StrawberryIntegration {
      + identifier = 'strawberry'
  --
      - __init__(async_execution = None)
      + {static} setup_once()
  }

  class SentryAsyncExtension {
      - __init__()
      + hash_query(query)
      + on_operation()
      + on_validate()
      + on_parse()
      + should_skip_tracing(_next, info)
  }

  class SentrySyncExtension {
      + resolve(_next, root, info)
  }

  class ThreadingIntegration {
      + identifier = 'threading'
  --
      - __init__(propagate_hub = False)
      + {static} setup_once()
  }

  class TornadoIntegration {
      + identifier = 'tornado'
  --
      + {static} setup_once()
  }

  class TornadoRequestExtractor {
      + content_length()
      + cookies()
      + raw_data()
      + form()
      + is_json()
      + files()
      + size_of_file(file)
  }

  class TrytondWSGIIntegration {
      + identifier = 'trytond_wsgi'
  --
      - __init__()
      + {static} setup_once()
  }

  class StartResponse {
  }

  class SentryWsgiMiddleware {
      - __init__(app, use_x_forwarded_for = False)
  }

  class RequestExtractor {
      - __init__(request)
      + extract_into_event(event)
      + content_length()
      + cookies()
      + raw_data()
      + form()
      + parsed_body()
      + is_json()
      + json()
      + files()
      + size_of_file(file)
      + env()
  }

  class DidNotEnable {
  }

  class Integration {
      + install = None
      + identifier = None
  --
      + {static} setup_once()
  }

}

package grpc {
  class ClientInterceptor {
      + intercept_unary_unary(continuation, client_call_details, request)
      + intercept_unary_stream(continuation, client_call_details, request)
  }

  class ServerInterceptor {
      - __init__(find_name = None)
      + intercept_service(continuation, handler_call_details)
  }

  class ParamSpec {
      - __init__(_)
  }

  class GRPCIntegration {
      + identifier = 'grpc'
  --
      + {static} setup_once()
  }

}

package aio {
  class ClientInterceptor {
  }

  class SentryUnaryUnaryClientInterceptor {
  }

  class SentryUnaryStreamClientInterceptor {
  }

  class ServerInterceptor {
      - __init__(find_name = None)
  }

}

package opentelemetry {
  class OpenTelemetryIntegration {
      + identifier = 'opentelemetry'
  --
      + {static} setup_once()
  }

  class SentryPropagator {
      + extract(carrier, context = None, getter = default_getter)
      + inject(carrier, context = None, setter = default_setter)
      + fields()
  }

  class SentrySpanProcessor {
      + otel_span_map = {}
      + open_spans = {}
  --
      - __init__()
      + on_start(otel_span, parent_context = None)
      + on_end(otel_span)
  }

}

package redis {
  class RedisIntegration {
      + identifier = 'redis'
  --
      - __init__(max_data_size = _DEFAULT_MAX_DATA_SIZE)
      + {static} setup_once()
  }

}

package spark {
  class SparkIntegration {
      + identifier = 'spark'
  --
      + {static} setup_once()
  }

  class SparkListener {
      + onApplicationEnd(applicationEnd)
      + onApplicationStart(applicationStart)
      + onBlockManagerAdded(blockManagerAdded)
      + onBlockManagerRemoved(blockManagerRemoved)
      + onBlockUpdated(blockUpdated)
      + onEnvironmentUpdate(environmentUpdate)
      + onExecutorAdded(executorAdded)
      + onExecutorBlacklisted(executorBlacklisted)
      + onExecutorBlacklistedForStage(executorBlacklistedForStage)
      + onExecutorMetricsUpdate(executorMetricsUpdate)
      + onExecutorRemoved(executorRemoved)
      + onJobEnd(jobEnd)
      + onJobStart(jobStart)
      + onNodeBlacklisted(nodeBlacklisted)
      + onNodeBlacklistedForStage(nodeBlacklistedForStage)
      + onNodeUnblacklisted(nodeUnblacklisted)
      + onOtherEvent(event)
      + onSpeculativeTaskSubmitted(speculativeTask)
      + onStageCompleted(stageCompleted)
      + onStageSubmitted(stageSubmitted)
      + onTaskEnd(taskEnd)
      + onTaskGettingResult(taskGettingResult)
      + onTaskStart(taskStart)
      + onUnpersistRDD(unpersistRDD)
  }

  class Java {
      + implements = ['org.apache.spark.scheduler.SparkListenerInterface']
  }

  class SentryListener {
      - __init__()
      + onJobStart(jobStart)
      + onJobEnd(jobEnd)
      + onStageSubmitted(stageSubmitted)
      + onStageCompleted(stageCompleted)
  }

  class SparkWorkerIntegration {
      + identifier = 'spark_worker'
  --
      + {static} setup_once()
  }

}

package shellingham {
  class ProcessEntry32 {
  }

  class ShellDetectionFailure {
  }

}

package posix {
  class ProcFormatError {
  }

  class PsNotAvailable {
  }

}

package sniffio {
  class AsyncLibraryNotFoundError {
  }

}

package sqlalchemy {
  class HasDescriptionCode {
      + code: Optional[str] = None
  --
      - __init__()
  }

  class SQLAlchemyError {
  }

  class ArgumentError {
  }

  class DuplicateColumnError {
  }

  class ObjectNotExecutableError {
      - __init__(target)
  }

  class NoSuchModuleError {
  }

  class NoForeignKeysError {
  }

  class AmbiguousForeignKeysError {
  }

  class ConstraintColumnNotFoundError {
  }

  class CircularDependencyError {
      - __init__(message: str, cycles, edges, msg: Optional[str] = None, code: Optional[str] = None)
  }

  class CompileError {
  }

  class UnsupportedCompilationError {
      + code = 'l7de'
  --
      - __init__(compiler: Union[Compiled, TypeCompiler], element_type: Type[ClauseElement], message: Optional[str] = None)
  }

  class IdentifierError {
  }

  class DisconnectionError {
      + invalidate_pool: bool = False
  }

  class InvalidatePoolError {
      + invalidate_pool: bool = True
  }

  class TimeoutError {
  }

  class InvalidRequestError {
  }

  class IllegalStateChangeError {
  }

  class NoInspectionAvailable {
  }

  class PendingRollbackError {
  }

  class ResourceClosedError {
  }

  class NoSuchColumnError {
  }

  class NoResultFound {
  }

  class MultipleResultsFound {
  }

  class NoReferenceError {
      + table_name: str
  }

  class AwaitRequired {
      + code = 'xd1r'
  }

  class MissingGreenlet {
      + code = 'xd2s'
  }

  class NoReferencedTableError {
      - __init__(message: str, tname: str)
  }

  class NoReferencedColumnError {
      - __init__(message: str, tname: str, cname: str)
  }

  class NoSuchTableError {
  }

  class UnreflectableTableError {
  }

  class UnboundExecutionError {
  }

  class DontWrapMixin {
  }

  class StatementError {
      + statement: Optional[str] = None
      + params: Optional[_AnyExecuteParams] = None
      + orig: Optional[BaseException] = None
      + ismulti: Optional[bool] = None
      + connection_invalidated: bool = False
  --
      - __init__(message: str, statement: Optional[str], params: Optional[_AnyExecuteParams], orig: Optional[BaseException], hide_parameters: bool = False, code: Optional[str] = None, ismulti: Optional[bool] = None)
      + add_detail(msg: str)
  }

  class DBAPIError {
      + code = 'dbapi'
  --
      + {classmethod} instance(cls, statement: Optional[str], params: Optional[_AnyExecuteParams], orig: Exception, dbapi_base_err: Type[Exception], hide_parameters: bool = False, connection_invalidated: bool = False, dialect: Optional[Dialect] = None, ismulti: Optional[bool] = None): StatementError
      + {classmethod} instance(cls, statement: Optional[str], params: Optional[_AnyExecuteParams], orig: DontWrapMixin, dbapi_base_err: Type[Exception], hide_parameters: bool = False, connection_invalidated: bool = False, dialect: Optional[Dialect] = None, ismulti: Optional[bool] = None): DontWrapMixin
      + {classmethod} instance(cls, statement: Optional[str], params: Optional[_AnyExecuteParams], orig: BaseException, dbapi_base_err: Type[Exception], hide_parameters: bool = False, connection_invalidated: bool = False, dialect: Optional[Dialect] = None, ismulti: Optional[bool] = None): BaseException
      + {classmethod} instance(cls, statement: Optional[str], params: Optional[_AnyExecuteParams], orig: Union[BaseException, DontWrapMixin], dbapi_base_err: Type[Exception], hide_parameters: bool = False, connection_invalidated: bool = False, dialect: Optional[Dialect] = None, ismulti: Optional[bool] = None): Union[BaseException, DontWrapMixin]
      - __init__(statement: Optional[str], params: Optional[_AnyExecuteParams], orig: BaseException, hide_parameters: bool = False, connection_invalidated: bool = False, code: Optional[str] = None, ismulti: Optional[bool] = None)
  }

  class InterfaceError {
      + code = 'rvf5'
  }

  class DatabaseError {
      + code = '4xp6'
  }

  class DataError {
      + code = '9h9h'
  }

  class OperationalError {
      + code = 'e3q8'
  }

  class IntegrityError {
      + code = 'gkpj'
  }

  class InternalError {
      + code = '2j85'
  }

  class ProgrammingError {
      + code = 'f405'
  }

  class NotSupportedError {
      + code = 'tw8g'
  }

  class SATestSuiteWarning {
  }

  class SADeprecationWarning {
      + deprecated_since: Optional[str] = None
  }

  class Base20DeprecationWarning {
      + deprecated_since: Optional[str] = '1.4'
  }

  class LegacyAPIWarning {
  }

  class MovedIn20Warning {
  }

  class SAPendingDeprecationWarning {
      + deprecated_since: Optional[str] = None
  }

  class SAWarning {
  }

  class Inspectable {
  }

  class Identified {
      + logging_name: Optional[str] = None
      + logger: _IdentifiedLoggerType
  }

  class InstanceLogger {
      + warn = warning
  --
      - __init__(echo: _EchoFlagType, name: str)
      + debug(msg: str)
      + info(msg: str)
      + warning(msg: str)
      + error(msg: str)
      + exception(msg: str)
      + critical(msg: str)
      + log(level: int, msg: str)
      + isEnabledFor(level: int): bool
      + getEffectiveLevel(): int
  }

  class echo_property {
  }

}

package connectors {
  class AsyncAdapt_aioodbc_cursor {
      + setinputsizes()
  }

  class AsyncAdapt_aioodbc_ss_cursor {
  }

  class AsyncAdapt_aioodbc_connection {
      + autocommit()
      + autocommit(value)
      + cursor(server_side = False)
      + rollback()
      + commit()
      + close()
  }

  class AsyncAdaptFallback_aioodbc_connection {
  }

  class AsyncAdapt_aioodbc_dbapi {
      - __init__(aioodbc, pyodbc)
      + connect()
  }

  class aiodbcConnector {
      + is_async = True
      + supports_statement_cache = True
      + supports_server_side_cursors = True
  --
      + {classmethod} import_dbapi(cls)
      + create_connect_args(url: URL): ConnectArgsType
      + {classmethod} get_pool_class(cls, url)
      + get_driver_connection(connection)
  }

  class AsyncAdapt_dbapi_cursor {
      + server_side = False
  --
      - __init__(adapt_connection)
      + description()
      + rowcount()
      + arraysize()
      + arraysize(value)
      + lastrowid()
      + close()
      + execute(operation, parameters = None)
      + executemany(operation, seq_of_parameters)
      + nextset()
      + setinputsizes()
      + fetchone()
      + fetchmany(size = None)
      + fetchall()
  }

  class AsyncAdapt_dbapi_ss_cursor {
      + server_side = True
  --
      - __init__(adapt_connection)
      + close()
      + fetchone()
      + fetchmany(size = None)
      + fetchall()
  }

  class AsyncAdapt_dbapi_connection {
      + await_ = staticmethod(await_only)
  --
      - __init__(dbapi, connection)
      + ping(reconnect)
      + add_output_converter()
      + character_set_name()
      + autocommit()
      + autocommit(value)
      + cursor(server_side = False)
      + rollback()
      + commit()
      + close()
  }

  class AsyncAdaptFallback_dbapi_connection {
      + await_ = staticmethod(await_fallback)
  }

  class PyODBCConnector {
      + driver = 'pyodbc'
      + supports_sane_rowcount_returning = True
      + supports_sane_multi_rowcount = False
      + supports_native_decimal = True
      + default_paramstyle = 'named'
      + fast_executemany = False
      + pyodbc_driver_name: Optional[str] = None
      + dbapi: ModuleType
  --
      - __init__(use_setinputsizes: bool = False)
      + {classmethod} import_dbapi(cls): ModuleType
      + create_connect_args(url: URL): ConnectArgsType
      + is_disconnect(e: Exception, connection: Optional[Union[pool.PoolProxiedConnection, interfaces.DBAPIConnection]], cursor: Optional[interfaces.DBAPICursor]): bool
      + do_set_input_sizes(cursor: interfaces.DBAPICursor, list_of_tuples: List[Tuple[str, Any, TypeEngine[Any]]], context: ExecutionContext)
      + get_isolation_level_values(dbapi_connection: interfaces.DBAPIConnection): List[IsolationLevel]
      + set_isolation_level(dbapi_connection: interfaces.DBAPIConnection, level: IsolationLevel)
  }

  class Connector {
  }

}

package mssql {
  class MSExecutionContext_aioodbc {
      + create_server_side_cursor()
  }

  class MSDialectAsync_aioodbc {
      + driver = 'aioodbc'
      + supports_statement_cache = True
      + execution_ctx_cls = MSExecutionContext_aioodbc
  }

  class REAL {
      - __init__()
  }

  class DOUBLE_PRECISION {
      - __init__()
  }

  class TINYINT {
  }

  class TIME {
      - __init__(precision = None)
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
  }

  class SMALLDATETIME {
  }

  class DATETIME2 {
      - __init__(precision = None)
  }

  class DATETIMEOFFSET {
      - __init__(precision = None)
  }

  class TIMESTAMP {
      + length = None
  --
      - __init__(convert_int = False)
      + result_processor(dialect, coltype)
  }

  class ROWVERSION {
  }

  class NTEXT {
  }

  class VARBINARY {
      - __init__(length = None, filestream = False)
  }

  class IMAGE {
  }

  class XML {
  }

  class BIT {
  }

  class MONEY {
  }

  class SMALLMONEY {
  }

  class MSUUid {
      + bind_processor(dialect)
      + literal_processor(dialect)
  }

  class UNIQUEIDENTIFIER {
      - __init__(as_uuid: Literal[True] = ...)
      - __init__(as_uuid: Literal[False] = ...)
      - __init__(as_uuid: bool = True)
  }

  class SQL_VARIANT {
  }

  class MSTypeCompiler {
      + visit_double(type_)
      + visit_FLOAT(type_)
      + visit_TINYINT(type_)
      + visit_TIME(type_)
      + visit_TIMESTAMP(type_)
      + visit_ROWVERSION(type_)
      + visit_datetime(type_)
      + visit_DATETIMEOFFSET(type_)
      + visit_DATETIME2(type_)
      + visit_SMALLDATETIME(type_)
      + visit_unicode(type_)
      + visit_text(type_)
      + visit_unicode_text(type_)
      + visit_NTEXT(type_)
      + visit_TEXT(type_)
      + visit_VARCHAR(type_)
      + visit_CHAR(type_)
      + visit_NCHAR(type_)
      + visit_NVARCHAR(type_)
      + visit_date(type_)
      + visit__BASETIMEIMPL(type_)
      + visit_time(type_)
      + visit_large_binary(type_)
      + visit_IMAGE(type_)
      + visit_XML(type_)
      + visit_VARBINARY(type_)
      + visit_boolean(type_)
      + visit_BIT(type_)
      + visit_JSON(type_)
      + visit_MONEY(type_)
      + visit_SMALLMONEY(type_)
      + visit_uuid(type_)
      + visit_UNIQUEIDENTIFIER(type_)
      + visit_SQL_VARIANT(type_)
  }

  class MSExecutionContext {
      + dialect: MSDialect
  --
      + pre_exec()
      + post_exec()
      + get_lastrowid()
      + handle_dbapi_exception(e)
      + fire_sequence(seq, type_)
      + get_insert_default(column)
  }

  class MSSQLCompiler {
      + returning_precedes_values = True
      + extract_map = util.update_copy(compiler.SQLCompiler.extract_map, {'doy': 'dayofyear', 'dow': 'weekday', 'milliseconds': 'millisecond', 'microseconds': 'microsecond'})
  --
      - __init__()
      + visit_now_func(fn)
      + visit_current_date_func(fn)
      + visit_length_func(fn)
      + visit_char_length_func(fn)
      + visit_aggregate_strings_func(fn)
      + visit_concat_op_expression_clauselist(clauselist, operator)
      + visit_concat_op_binary(binary, operator)
      + visit_true(expr)
      + visit_false(expr)
      + visit_match_op_binary(binary, operator)
      + get_select_precolumns(select)
      + get_from_hint_text(table, text)
      + get_crud_hint_text(table, text)
      + limit_clause(cs)
      + visit_try_cast(element)
      + translate_select_structure(select_stmt)
      + visit_table(table, mssql_aliased = False, iscrud = False)
      + visit_alias(alias)
      + visit_column(column, add_to_result_map = None)
      + visit_extract(extract)
      + visit_savepoint(savepoint_stmt)
      + visit_rollback_to_savepoint(savepoint_stmt)
      + visit_binary(binary)
      + returning_clause(stmt, returning_cols)
      + get_cte_preamble(recursive)
      + label_select_column(select, column, asfrom)
      + for_update_clause(select)
      + order_by_clause(select)
      + update_from_clause(update_stmt, from_table, extra_froms, from_hints)
      + delete_table_clause(delete_stmt, from_table, extra_froms)
      + delete_extra_from_clause(delete_stmt, from_table, extra_froms, from_hints)
      + visit_empty_set_expr(type_)
      + visit_is_distinct_from_binary(binary, operator)
      + visit_is_not_distinct_from_binary(binary, operator)
      + visit_json_getitem_op_binary(binary, operator)
      + visit_json_path_getitem_op_binary(binary, operator)
      + visit_sequence(seq)
  }

  class MSSQLStrictCompiler {
      + ansi_bind_rules = True
  --
      + visit_in_op_binary(binary, operator)
      + visit_not_in_op_binary(binary, operator)
      + render_literal_value(value, type_)
  }

  class MSDDLCompiler {
      + get_column_specification(column)
      + visit_create_index(create, include_schema = False)
      + visit_drop_index(drop)
      + visit_primary_key_constraint(constraint)
      + visit_unique_constraint(constraint)
      + visit_computed_column(generated)
      + visit_set_table_comment(create)
      + visit_drop_table_comment(drop)
      + visit_set_column_comment(create)
      + visit_drop_column_comment(drop)
      + visit_create_sequence(create)
      + visit_identity_column(identity)
  }

  class MSIdentifierPreparer {
      + reserved_words = RESERVED_WORDS
  --
      - __init__(dialect)
      + quote_schema(schema, force = None)
  }

  class MSDialect {
      + name = 'mssql'
      + supports_statement_cache = True
      + supports_default_values = True
      + supports_empty_insert = False
      + favor_returning_over_lastrowid = True
      + returns_native_bytes = True
      + supports_comments = True
      + supports_default_metavalue = False
      + execution_ctx_cls = MSExecutionContext
      + use_scope_identity = True
      + max_identifier_length = 128
      + schema_name = 'dbo'
      + insert_returning = True
      + update_returning = True
      + delete_returning = True
      + update_returning_multifrom = True
      + delete_returning_multifrom = True
      + colspecs = {sqltypes.DateTime: _MSDateTime, sqltypes.Date: _MSDate, sqltypes.JSON: JSON, sqltypes.JSON.JSONIndexType: JSONIndexType, sqltypes.JSON.JSONPathType: JSONPathType, sqltypes.Time: _BASETIMEIMPL, sqltypes.Unicode: _MSUnicode, sqltypes.UnicodeText: _MSUnicodeText, DATETIMEOFFSET: DATETIMEOFFSET, DATETIME2: DATETIME2, SMALLDATETIME: SMALLDATETIME, DATETIME: DATETIME, sqltypes.Uuid: MSUUid}
      + engine_config_types = default.DefaultDialect.engine_config_types.union({'legacy_schema_aliasing': util.asbool})
      + ischema_names = ischema_names
      + supports_sequences = True
      + sequences_optional = True
      + default_sequence_base = 1
      + supports_native_boolean = False
      + non_native_boolean_check_constraint = False
      + supports_unicode_binds = True
      + postfetch_lastrowid = True
      + supports_multivalues_insert = True
      + use_insertmanyvalues = True
      + use_insertmanyvalues_wo_returning = True
      + insertmanyvalues_implicit_sentinel = InsertmanyvaluesSentinelOpts.AUTOINCREMENT | InsertmanyvaluesSentinelOpts.IDENTITY | InsertmanyvaluesSentinelOpts.USE_INSERT_FROM_SELECT
      + insertmanyvalues_max_parameters = 2099
      + legacy_schema_aliasing = False
      + server_version_info = ()
      + statement_compiler = MSSQLCompiler
      + ddl_compiler = MSDDLCompiler
      + type_compiler_cls = MSTypeCompiler
      + preparer = MSIdentifierPreparer
      + construct_arguments = [(sa_schema.PrimaryKeyConstraint, {'clustered': None}), (sa_schema.UniqueConstraint, {'clustered': None}), (sa_schema.Index, {'clustered': None, 'include': None, 'where': None, 'columnstore': None}), (sa_schema.Column, {'identity_start': None, 'identity_increment': None})]
  --
      - __init__(query_timeout = None, use_scope_identity = True, schema_name = 'dbo', deprecate_large_types = None, supports_comments = None, json_serializer = None, json_deserializer = None, legacy_schema_aliasing = None, ignore_no_transaction_on_rollback = False)
      + do_savepoint(connection, name)
      + do_release_savepoint(connection, name)
      + do_rollback(dbapi_connection)
      + get_isolation_level_values(dbapi_connection)
      + set_isolation_level(dbapi_connection, level)
      + get_isolation_level(dbapi_connection)
      + initialize(connection)
      + has_table(connection, tablename, dbname, owner, schema)
      + has_sequence(connection, sequencename, dbname, owner, schema)
      + get_sequence_names(connection, dbname, owner, schema)
      + get_schema_names(connection)
      + get_table_names(connection, dbname, owner, schema)
      + get_view_names(connection, dbname, owner, schema)
      + get_indexes(connection, tablename, dbname, owner, schema)
      + get_view_definition(connection, viewname, dbname, owner, schema)
      + get_table_comment(connection, table_name, schema = None)
      + get_columns(connection, tablename, dbname, owner, schema)
      + get_pk_constraint(connection, tablename, dbname, owner, schema)
      + get_foreign_keys(connection, tablename, dbname, owner, schema)
  }

  class CoerceUnicode {
      + impl = Unicode
      + cache_ok = True
  --
      + bind_expression(bindvalue)
  }

  class NumericSqlVariant {
      + impl = Unicode
      + cache_ok = True
  --
      + column_expression(colexpr)
  }

  class NVarcharSqlVariant {
      + impl = Unicode
      + cache_ok = True
  --
      + column_expression(colexpr)
  }

  class JSON {
  }

  class JSONIndexType {
  }

  class JSONPathType {
  }

  class MSIdentifierPreparer_pymssql {
      - __init__(dialect)
  }

  class MSDialect_pymssql {
      + supports_statement_cache = True
      + supports_native_decimal = True
      + supports_native_uuid = True
      + driver = 'pymssql'
      + preparer = MSIdentifierPreparer_pymssql
      + colspecs = util.update_copy(MSDialect.colspecs, {sqltypes.Numeric: _MSNumeric_pymssql, sqltypes.Float: sqltypes.Float})
  --
      + {classmethod} import_dbapi(cls)
      + create_connect_args(url)
      + is_disconnect(e, connection, cursor)
      + get_isolation_level_values(dbapi_connection)
      + set_isolation_level(dbapi_connection, level)
  }

  class MSExecutionContext_pyodbc {
      + pre_exec()
      + post_exec()
  }

  class MSDialect_pyodbc {
      + supports_statement_cache = True
      + supports_sane_rowcount_returning = False
      + execution_ctx_cls = MSExecutionContext_pyodbc
      + colspecs = util.update_copy(MSDialect.colspecs, {sqltypes.Numeric: _MSNumeric_pyodbc, sqltypes.Float: _MSFloat_pyodbc, BINARY: _BINARY_pyodbc, sqltypes.DateTime: _ODBCDateTime, DATETIMEOFFSET: _ODBCDATETIMEOFFSET, VARBINARY: _VARBINARY_pyodbc, sqltypes.VARBINARY: _VARBINARY_pyodbc, sqltypes.LargeBinary: _VARBINARY_pyodbc, sqltypes.String: _String_pyodbc, sqltypes.Unicode: _Unicode_pyodbc, sqltypes.UnicodeText: _UnicodeText_pyodbc, sqltypes.JSON: _JSON_pyodbc, sqltypes.JSON.JSONIndexType: _JSONIndexType_pyodbc, sqltypes.JSON.JSONPathType: _JSONPathType_pyodbc, sqltypes.Enum: sqltypes.Enum})
  --
      - __init__(fast_executemany = False, use_setinputsizes = True)
      + on_connect()
      + do_executemany(cursor, statement, parameters, context = None)
      + is_disconnect(e, connection, cursor)
  }

}

package mysql {
  class AsyncAdapt_aiomysql_cursor {
      + server_side = False
  --
      - __init__(adapt_connection)
      + description()
      + rowcount()
      + arraysize()
      + arraysize(value)
      + lastrowid()
      + close()
      + execute(operation, parameters = None)
      + executemany(operation, seq_of_parameters)
      + setinputsizes()
      + fetchone()
      + fetchmany(size = None)
      + fetchall()
  }

  class AsyncAdapt_aiomysql_ss_cursor {
      + server_side = True
  --
      - __init__(adapt_connection)
      + close()
      + fetchone()
      + fetchmany(size = None)
      + fetchall()
  }

  class AsyncAdapt_aiomysql_connection {
      + await_ = staticmethod(await_only)
  --
      - __init__(dbapi, connection)
      + ping(reconnect)
      + character_set_name()
      + autocommit(value)
      + cursor(server_side = False)
      + rollback()
      + commit()
      + terminate()
      + close()
  }

  class AsyncAdaptFallback_aiomysql_connection {
      + await_ = staticmethod(await_fallback)
  }

  class AsyncAdapt_aiomysql_dbapi {
      - __init__(aiomysql, pymysql)
      + connect()
  }

  class MySQLDialect_aiomysql {
      + driver = 'aiomysql'
      + supports_statement_cache = True
      + supports_server_side_cursors = True
      + is_async = True
      + has_terminate = True
  --
      + {classmethod} import_dbapi(cls)
      + {classmethod} get_pool_class(cls, url)
      + do_terminate(dbapi_connection)
      + create_connect_args(url)
      + is_disconnect(e, connection, cursor)
      + get_driver_connection(connection)
  }

  class AsyncAdapt_asyncmy_cursor {
      + server_side = False
  --
      - __init__(adapt_connection)
      + description()
      + rowcount()
      + arraysize()
      + arraysize(value)
      + lastrowid()
      + close()
      + execute(operation, parameters = None)
      + executemany(operation, seq_of_parameters)
      + setinputsizes()
      + fetchone()
      + fetchmany(size = None)
      + fetchall()
  }

  class AsyncAdapt_asyncmy_ss_cursor {
      + server_side = True
  --
      - __init__(adapt_connection)
      + close()
      + fetchone()
      + fetchmany(size = None)
      + fetchall()
  }

  class AsyncAdapt_asyncmy_connection {
      + await_ = staticmethod(await_only)
  --
      - __init__(dbapi, connection)
      + ping(reconnect)
      + character_set_name()
      + autocommit(value)
      + cursor(server_side = False)
      + rollback()
      + commit()
      + terminate()
      + close()
  }

  class AsyncAdaptFallback_asyncmy_connection {
      + await_ = staticmethod(await_fallback)
  }

  class AsyncAdapt_asyncmy_dbapi {
      + STRING = util.symbol('STRING')
      + NUMBER = util.symbol('NUMBER')
      + BINARY = util.symbol('BINARY')
      + DATETIME = util.symbol('DATETIME')
      + TIMESTAMP = util.symbol('TIMESTAMP')
      + Binary = staticmethod(_Binary)
  --
      - __init__(asyncmy)
      + connect()
  }

  class MySQLDialect_asyncmy {
      + driver = 'asyncmy'
      + supports_statement_cache = True
      + supports_server_side_cursors = True
      + is_async = True
      + has_terminate = True
  --
      + {classmethod} import_dbapi(cls)
      + {classmethod} get_pool_class(cls, url)
      + do_terminate(dbapi_connection)
      + create_connect_args(url)
      + is_disconnect(e, connection, cursor)
      + get_driver_connection(connection)
  }

  class MySQLExecutionContext {
      + post_exec()
      + create_server_side_cursor()
      + fire_sequence(seq, type_)
  }

  class MySQLCompiler {
      + render_table_with_column_in_update_from = True
      + extract_map = compiler.SQLCompiler.extract_map.copy()
  --
      + default_from()
      + visit_random_func(fn)
      + visit_rollup_func(fn)
      + visit_aggregate_strings_func(fn)
      + visit_sequence(seq)
      + visit_sysdate_func(fn)
      + visit_json_getitem_op_binary(binary, operator)
      + visit_json_path_getitem_op_binary(binary, operator)
      + visit_on_duplicate_key_update(on_duplicate)
      + visit_concat_op_expression_clauselist(clauselist, operator)
      + visit_concat_op_binary(binary, operator)
      + visit_mysql_match(element)
      + visit_match_op_binary(binary, operator)
      + get_from_hint_text(table, text)
      + visit_typeclause(typeclause, type_ = None)
      + visit_cast(cast)
      + render_literal_value(value, type_)
      + visit_true(element)
      + visit_false(element)
      + get_select_precolumns(select)
      + visit_join(join, asfrom = False, from_linter = None)
      + for_update_clause(select)
      + limit_clause(select)
      + update_limit_clause(update_stmt)
      + delete_limit_clause(delete_stmt)
      + update_tables_clause(update_stmt, from_table, extra_froms)
      + update_from_clause(update_stmt, from_table, extra_froms, from_hints)
      + delete_table_clause(delete_stmt, from_table, extra_froms)
      + delete_extra_from_clause(delete_stmt, from_table, extra_froms, from_hints)
      + visit_empty_set_expr(element_types)
      + visit_is_distinct_from_binary(binary, operator)
      + visit_is_not_distinct_from_binary(binary, operator)
      + visit_regexp_match_op_binary(binary, operator)
      + visit_not_regexp_match_op_binary(binary, operator)
      + visit_regexp_replace_op_binary(binary, operator)
  }

  class MySQLDDLCompiler {
      + get_column_specification(column)
      + post_create_table(table)
      + visit_create_index(create)
      + visit_primary_key_constraint(constraint)
      + visit_drop_index(drop)
      + visit_drop_constraint(drop)
      + define_constraint_match(constraint)
      + visit_set_table_comment(create)
      + visit_drop_table_comment(create)
      + visit_set_column_comment(create)
  }

  class MySQLTypeCompiler {
      + visit_NUMERIC(type_)
      + visit_DECIMAL(type_)
      + visit_DOUBLE(type_)
      + visit_REAL(type_)
      + visit_FLOAT(type_)
      + visit_INTEGER(type_)
      + visit_BIGINT(type_)
      + visit_MEDIUMINT(type_)
      + visit_TINYINT(type_)
      + visit_SMALLINT(type_)
      + visit_BIT(type_)
      + visit_DATETIME(type_)
      + visit_DATE(type_)
      + visit_TIME(type_)
      + visit_TIMESTAMP(type_)
      + visit_YEAR(type_)
      + visit_TEXT(type_)
      + visit_TINYTEXT(type_)
      + visit_MEDIUMTEXT(type_)
      + visit_LONGTEXT(type_)
      + visit_VARCHAR(type_)
      + visit_CHAR(type_)
      + visit_NVARCHAR(type_)
      + visit_NCHAR(type_)
      + visit_UUID(type_)
      + visit_VARBINARY(type_)
      + visit_JSON(type_)
      + visit_large_binary(type_)
      + visit_enum(type_)
      + visit_BLOB(type_)
      + visit_TINYBLOB(type_)
      + visit_MEDIUMBLOB(type_)
      + visit_LONGBLOB(type_)
      + visit_ENUM(type_)
      + visit_SET(type_)
      + visit_BOOLEAN(type_)
  }

  class MySQLIdentifierPreparer {
      + reserved_words = RESERVED_WORDS_MYSQL
  --
      - __init__(dialect, server_ansiquotes = False)
  }

  class MariaDBIdentifierPreparer {
      + reserved_words = RESERVED_WORDS_MARIADB
  }

  class MySQLDialect {
      + name = 'mysql'
      + supports_statement_cache = True
      + supports_alter = True
      + supports_native_boolean = False
      + max_identifier_length = 255
      + max_index_name_length = 64
      + max_constraint_name_length = 64
      + div_is_floordiv = False
      + supports_native_enum = True
      + returns_native_bytes = True
      + supports_sequences = False
      + sequences_optional = False
      + supports_for_update_of = False
      + supports_default_values = False
      + supports_default_metavalue = True
      + use_insertmanyvalues: bool = True
      + insertmanyvalues_implicit_sentinel = InsertmanyvaluesSentinelOpts.ANY_AUTOINCREMENT
      + supports_sane_rowcount = True
      + supports_sane_multi_rowcount = False
      + supports_multivalues_insert = True
      + insert_null_pk_still_autoincrements = True
      + supports_comments = True
      + inline_comments = True
      + default_paramstyle = 'format'
      + colspecs = colspecs
      + cte_follows_insert = True
      + statement_compiler = MySQLCompiler
      + ddl_compiler = MySQLDDLCompiler
      + type_compiler_cls = MySQLTypeCompiler
      + ischema_names = ischema_names
      + preparer = MySQLIdentifierPreparer
      + is_mariadb = False
      + construct_arguments = [(sa_schema.Table, {'*': None}), (sql.Update, {'limit': None}), (sql.Delete, {'limit': None}), (sa_schema.PrimaryKeyConstraint, {'using': None}), (sa_schema.Index, {'using': None, 'length': None, 'prefix': None, 'with_parser': None})]
  --
      - __init__(json_serializer = None, json_deserializer = None, is_mariadb = None)
      + get_isolation_level_values(dbapi_conn)
      + set_isolation_level(dbapi_connection, level)
      + get_isolation_level(dbapi_connection)
      + do_begin_twophase(connection, xid)
      + do_prepare_twophase(connection, xid)
      + do_rollback_twophase(connection, xid, is_prepared = True, recover = False)
      + do_commit_twophase(connection, xid, is_prepared = True, recover = False)
      + do_recover_twophase(connection)
      + is_disconnect(e, connection, cursor)
      + has_table(connection, table_name, schema = None)
      + has_sequence(connection, sequence_name, schema = None)
      + get_sequence_names(connection, schema = None)
      + initialize(connection)
      + get_schema_names(connection)
      + get_table_names(connection, schema = None)
      + get_view_names(connection, schema = None)
      + get_table_options(connection, table_name, schema = None)
      + get_columns(connection, table_name, schema = None)
      + get_pk_constraint(connection, table_name, schema = None)
      + get_foreign_keys(connection, table_name, schema = None)
      + get_check_constraints(connection, table_name, schema = None)
      + get_table_comment(connection, table_name, schema = None)
      + get_indexes(connection, table_name, schema = None)
      + get_unique_constraints(connection, table_name, schema = None)
      + get_view_definition(connection, view_name, schema = None)
  }

  class MySQLDialect_cymysql {
      + driver = 'cymysql'
      + supports_statement_cache = True
      + description_encoding = None
      + supports_sane_rowcount = True
      + supports_sane_multi_rowcount = False
      + supports_unicode_statements = True
      + colspecs = util.update_copy(MySQLDialect.colspecs, {BIT: _cymysqlBIT})
  --
      + {classmethod} import_dbapi(cls)
      + is_disconnect(e, connection, cursor)
  }

  class Insert {
      + stringify_dialect = 'mysql'
      + inherit_cache = False
  --
      + inserted(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + inserted_alias(): NamedFromClause
      + on_duplicate_key_update(): Self
  }

  class OnDuplicateClause {
      + update: Dict[str, Any]
      + stringify_dialect = 'mysql'
  --
      - __init__(inserted_alias: NamedFromClause, update: _UpdateArg)
  }

  class ENUM {
      + native_enum = True
  --
      - __init__()
      + {classmethod} adapt_emulated_to_native(cls, impl)
  }

  class SET {
      - __init__()
      + column_expression(colexpr)
      + result_processor(dialect, coltype)
      + bind_processor(dialect)
      + adapt(impltype)
  }

  class match {
      + inherit_cache = True
  --
      - __init__()
      + in_boolean_mode(): Self
      + in_natural_language_mode(): Self
      + with_query_expansion(): Self
  }

  class JSON {
  }

  class JSONIndexType {
  }

  class JSONPathType {
  }

  class INET4 {
  }

  class INET6 {
  }

  class MariaDBTypeCompiler {
      + visit_INET4(type_): str
      + visit_INET6(type_): str
  }

  class MariaDBDialect {
      + is_mariadb = True
      + supports_statement_cache = True
      + name = 'mariadb'
      + preparer = MariaDBIdentifierPreparer
      + type_compiler_cls = MariaDBTypeCompiler
  }

  class MySQLExecutionContext_mariadbconnector {
      + create_server_side_cursor()
      + create_default_cursor()
      + post_exec()
      + get_lastrowid()
  }

  class MySQLCompiler_mariadbconnector {
  }

  class MySQLDialect_mariadbconnector {
      + driver = 'mariadbconnector'
      + supports_statement_cache = True
      + supports_unicode_statements = True
      + encoding = 'utf8mb4'
      + convert_unicode = True
      + supports_sane_rowcount = True
      + supports_sane_multi_rowcount = True
      + supports_native_decimal = True
      + default_paramstyle = 'qmark'
      + execution_ctx_cls = MySQLExecutionContext_mariadbconnector
      + statement_compiler = MySQLCompiler_mariadbconnector
      + supports_server_side_cursors = True
      + colspecs = util.update_copy(MySQLDialect.colspecs, {sqltypes.Uuid: _MariaDBUUID})
  --
      - __init__()
      + {classmethod} import_dbapi(cls)
      + is_disconnect(e, connection, cursor)
      + create_connect_args(url)
      + get_isolation_level_values(dbapi_connection)
      + set_isolation_level(connection, level)
      + do_begin_twophase(connection, xid)
      + do_prepare_twophase(connection, xid)
      + do_rollback_twophase(connection, xid, is_prepared = True, recover = False)
      + do_commit_twophase(connection, xid, is_prepared = True, recover = False)
  }

  class MySQLCompiler_mysqlconnector {
      + visit_mod_binary(binary, operator)
  }

  class MySQLIdentifierPreparer_mysqlconnector {
  }

  class MySQLDialect_mysqlconnector {
      + driver = 'mysqlconnector'
      + supports_statement_cache = True
      + supports_sane_rowcount = True
      + supports_sane_multi_rowcount = True
      + supports_native_decimal = True
      + default_paramstyle = 'format'
      + statement_compiler = MySQLCompiler_mysqlconnector
      + preparer = MySQLIdentifierPreparer_mysqlconnector
      + colspecs = util.update_copy(MySQLDialect.colspecs, {BIT: _myconnpyBIT})
  --
      + {classmethod} import_dbapi(cls)
      + do_ping(dbapi_connection)
      + create_connect_args(url)
      + is_disconnect(e, connection, cursor)
  }

  class MySQLExecutionContext_mysqldb {
  }

  class MySQLCompiler_mysqldb {
  }

  class MySQLDialect_mysqldb {
      + driver = 'mysqldb'
      + supports_statement_cache = True
      + supports_unicode_statements = True
      + supports_sane_rowcount = True
      + supports_sane_multi_rowcount = True
      + supports_native_decimal = True
      + default_paramstyle = 'format'
      + execution_ctx_cls = MySQLExecutionContext_mysqldb
      + statement_compiler = MySQLCompiler_mysqldb
      + preparer = MySQLIdentifierPreparer
  --
      - __init__()
      + supports_server_side_cursors()
      + {classmethod} import_dbapi(cls)
      + on_connect()
      + do_ping(dbapi_connection)
      + do_executemany(cursor, statement, parameters, context = None)
      + create_connect_args(url, _translate_args = None)
      + get_isolation_level_values(dbapi_connection)
      + set_isolation_level(dbapi_connection, level)
  }

  class MySQLDialect_pymysql {
      + driver = 'pymysql'
      + supports_statement_cache = True
      + description_encoding = None
  --
      + supports_server_side_cursors()
      + {classmethod} import_dbapi(cls)
      + do_ping(dbapi_connection)
      + create_connect_args(url, _translate_args = None)
      + is_disconnect(e, connection, cursor)
  }

  class MySQLExecutionContext_pyodbc {
      + get_lastrowid()
  }

  class MySQLDialect_pyodbc {
      + supports_statement_cache = True
      + colspecs = util.update_copy(MySQLDialect.colspecs, {Time: _pyodbcTIME})
      + supports_unicode_statements = True
      + execution_ctx_cls = MySQLExecutionContext_pyodbc
      + pyodbc_driver_name = 'MySQL'
  --
      + on_connect()
  }

  class ReflectedState {
      - __init__()
  }

  class MySQLTableDefinitionParser {
      - __init__(dialect, preparer)
      + parse(show_create, charset)
  }

  class NUMERIC {
      - __init__(precision = None, scale = None, asdecimal = True)
  }

  class DECIMAL {
      - __init__(precision = None, scale = None, asdecimal = True)
  }

  class DOUBLE {
      - __init__(precision = None, scale = None, asdecimal = True)
  }

  class REAL {
      - __init__(precision = None, scale = None, asdecimal = True)
  }

  class FLOAT {
      - __init__(precision = None, scale = None, asdecimal = False)
      + bind_processor(dialect)
  }

  class INTEGER {
      - __init__(display_width = None)
  }

  class BIGINT {
      - __init__(display_width = None)
  }

  class MEDIUMINT {
      - __init__(display_width = None)
  }

  class TINYINT {
      - __init__(display_width = None)
  }

  class SMALLINT {
      - __init__(display_width = None)
  }

  class BIT {
      - __init__(length = None)
      + result_processor(dialect, coltype)
  }

  class TIME {
      - __init__(timezone = False, fsp = None)
      + result_processor(dialect, coltype)
  }

  class TIMESTAMP {
      - __init__(timezone = False, fsp = None)
  }

  class DATETIME {
      - __init__(timezone = False, fsp = None)
  }

  class YEAR {
      - __init__(display_width = None)
  }

  class TEXT {
      - __init__(length = None)
  }

  class TINYTEXT {
      - __init__()
  }

  class MEDIUMTEXT {
      - __init__()
  }

  class LONGTEXT {
      - __init__()
  }

  class VARCHAR {
      - __init__(length = None)
  }

  class CHAR {
      - __init__(length = None)
  }

  class NVARCHAR {
      - __init__(length = None)
  }

  class NCHAR {
      - __init__(length = None)
  }

  class TINYBLOB {
  }

  class MEDIUMBLOB {
  }

  class LONGBLOB {
  }

}

package oracle {
  class OracleTypeCompiler {
      + visit_NVARCHAR = visit_NVARCHAR2
  --
      + visit_datetime(type_)
      + visit_float(type_)
      + visit_double(type_)
      + visit_unicode(type_)
      + visit_INTERVAL(type_)
      + visit_LONG(type_)
      + visit_TIMESTAMP(type_)
      + visit_DOUBLE_PRECISION(type_)
      + visit_BINARY_DOUBLE(type_)
      + visit_BINARY_FLOAT(type_)
      + visit_FLOAT(type_)
      + visit_NUMBER(type_)
      + visit_string(type_)
      + visit_VARCHAR2(type_)
      + visit_NVARCHAR2(type_)
      + visit_VARCHAR(type_)
      + visit_text(type_)
      + visit_unicode_text(type_)
      + visit_large_binary(type_)
      + visit_big_integer(type_)
      + visit_boolean(type_)
      + visit_RAW(type_)
      + visit_ROWID(type_)
  }

  class OracleCompiler {
      + compound_keywords = util.update_copy(compiler.SQLCompiler.compound_keywords, {expression.CompoundSelect.EXCEPT: 'MINUS'})
  --
      - __init__()
      + visit_mod_binary(binary, operator)
      + visit_now_func(fn)
      + visit_char_length_func(fn)
      + visit_match_op_binary(binary, operator)
      + visit_true(expr)
      + visit_false(expr)
      + get_cte_preamble(recursive)
      + get_select_hint_text(byfroms)
      + function_argspec(fn)
      + visit_function(func)
      + visit_table_valued_column(element)
      + default_from()
      + visit_join(join, from_linter = None)
      + visit_outer_join_column(vc)
      + visit_sequence(seq)
      + get_render_as_alias_suffix(alias_name_text)
      + returning_clause(stmt, returning_cols)
      + translate_select_structure(select_stmt)
      + limit_clause(select)
      + visit_empty_set_expr(type_)
      + for_update_clause(select)
      + visit_is_distinct_from_binary(binary, operator)
      + visit_is_not_distinct_from_binary(binary, operator)
      + visit_regexp_match_op_binary(binary, operator)
      + visit_not_regexp_match_op_binary(binary, operator)
      + visit_regexp_replace_op_binary(binary, operator)
      + visit_aggregate_strings_func(fn)
      + visit_bitwise_xor_op_binary(binary, operator)
      + visit_bitwise_or_op_binary(binary, operator)
      + visit_bitwise_and_op_binary(binary, operator)
      + visit_bitwise_rshift_op_binary(binary, operator)
      + visit_bitwise_lshift_op_binary(binary, operator)
      + visit_bitwise_not_op_unary_operator(element, operator)
  }

  class OracleDDLCompiler {
      + define_constraint_cascades(constraint)
      + visit_drop_table_comment(drop)
      + visit_create_index(create)
      + post_create_table(table)
      + get_identity_options(identity_options)
      + visit_computed_column(generated)
      + visit_identity_column(identity)
  }

  class OracleIdentifierPreparer {
      + reserved_words = {x.lower() for x in RESERVED_WORDS}
      + illegal_initial_characters = {str(dig) for dig in range(0, 10)}.union(['_', '$'])
  --
      + format_savepoint(savepoint)
  }

  class OracleExecutionContext {
      + fire_sequence(seq, type_)
      + pre_exec()
  }

  class OracleDialect {
      + name = 'oracle'
      + supports_statement_cache = True
      + supports_alter = True
      + max_identifier_length = 128
      + insert_returning = True
      + update_returning = True
      + delete_returning = True
      + div_is_floordiv = False
      + supports_simple_order_by_label = False
      + cte_follows_insert = True
      + returns_native_bytes = True
      + supports_sequences = True
      + sequences_optional = False
      + postfetch_lastrowid = False
      + default_paramstyle = 'named'
      + colspecs = colspecs
      + ischema_names = ischema_names
      + requires_name_normalize = True
      + supports_comments = True
      + supports_default_values = False
      + supports_default_metavalue = True
      + supports_empty_insert = False
      + supports_identity_columns = True
      + statement_compiler = OracleCompiler
      + ddl_compiler = OracleDDLCompiler
      + type_compiler_cls = OracleTypeCompiler
      + preparer = OracleIdentifierPreparer
      + execution_ctx_cls = OracleExecutionContext
      + reflection_options = ('oracle_resolve_synonyms',)
      + construct_arguments = [(sa_schema.Table, {'resolve_synonyms': False, 'on_commit': None, 'compress': False, 'tablespace': None}), (sa_schema.Index, {'bitmap': False, 'compress': False})]
  --
      - __init__(use_ansi = True, optimize_limits = False, use_binds_for_limits = None, use_nchar_for_unicode = False, exclude_tablespaces = ('SYSTEM', 'SYSAUX'), enable_offset_fetch = True)
      + initialize(connection)
      + do_release_savepoint(connection, name)
      + get_isolation_level_values(dbapi_connection)
      + get_default_isolation_level(dbapi_conn)
      + has_table(connection, table_name, schema = None, dblink = None)
      + has_sequence(connection, sequence_name, schema = None, dblink = None)
      + denormalize_schema_name(name)
      + get_schema_names(connection, dblink = None)
      + get_table_names(connection, schema = None, dblink = None)
      + get_temp_table_names(connection, dblink = None)
      + get_materialized_view_names(connection, schema = None, dblink = None, _normalize = True)
      + get_view_names(connection, schema = None, dblink = None)
      + get_sequence_names(connection, schema = None, dblink = None)
      + get_table_options(connection, table_name, schema = None)
      + get_multi_table_options(connection)
      + get_columns(connection, table_name, schema = None)
      + get_multi_columns(connection)
      + get_table_comment(connection, table_name, schema = None)
      + get_multi_table_comment(connection)
      + get_indexes(connection, table_name, schema = None)
      + get_multi_indexes(connection)
      + get_pk_constraint(connection, table_name, schema = None)
      + get_multi_pk_constraint(connection)
      + get_foreign_keys(connection, table_name, schema = None)
      + get_multi_foreign_keys(connection)
      + get_unique_constraints(connection, table_name, schema = None)
      + get_multi_unique_constraints(connection)
      + get_view_definition(connection, view_name, schema = None, dblink = None)
      + get_check_constraints(connection, table_name, schema = None, include_all = False)
      + get_multi_check_constraints(connection)
  }

  class OracleCompiler_cx_oracle {
      + bindname_escape_characters = util.immutabledict({'%': 'P', '(': 'A', ')': 'Z', ':': 'C', '.': 'C', '[': 'C', ']': 'C', ' ': 'C', '\\': 'C', '/': 'C', '?': 'C'})
  --
      + bindparam_string(name)
  }

  class OracleExecutionContext_cx_oracle {
      + out_parameters = None
  --
      + pre_exec()
      + post_exec()
      + create_cursor()
      + fetchall_for_returning(cursor)
      + get_out_parameter_values(out_param_names)
  }

  class OracleDialect_cx_oracle {
      + supports_statement_cache = True
      + execution_ctx_cls = OracleExecutionContext_cx_oracle
      + statement_compiler = OracleCompiler_cx_oracle
      + supports_sane_rowcount = True
      + supports_sane_multi_rowcount = True
      + insert_executemany_returning = True
      + insert_executemany_returning_sort_by_parameter_order = True
      + update_executemany_returning = True
      + delete_executemany_returning = True
      + bind_typing = interfaces.BindTyping.SETINPUTSIZES
      + driver = 'cx_oracle'
      + colspecs = util.update_copy(OracleDialect.colspecs, {sqltypes.TIMESTAMP: _CXOracleTIMESTAMP, sqltypes.Numeric: _OracleNumeric, sqltypes.Float: _OracleNumeric, oracle.BINARY_FLOAT: _OracleBINARY_FLOAT, oracle.BINARY_DOUBLE: _OracleBINARY_DOUBLE, sqltypes.Integer: _OracleInteger, oracle.NUMBER: _OracleNUMBER, sqltypes.Date: _CXOracleDate, sqltypes.LargeBinary: _OracleBinary, sqltypes.Boolean: oracle._OracleBoolean, sqltypes.Interval: _OracleInterval, oracle.INTERVAL: _OracleInterval, sqltypes.Text: _OracleText, sqltypes.String: _OracleString, sqltypes.UnicodeText: _OracleUnicodeTextCLOB, sqltypes.CHAR: _OracleChar, sqltypes.NCHAR: _OracleNChar, sqltypes.Enum: _OracleEnum, oracle.LONG: _OracleLong, oracle.RAW: _OracleRaw, sqltypes.Unicode: _OracleUnicodeStringCHAR, sqltypes.NVARCHAR: _OracleUnicodeStringNCHAR, sqltypes.Uuid: _OracleUUID, oracle.NCLOB: _OracleUnicodeTextNCLOB, oracle.ROWID: _OracleRowid})
      + execute_sequence_format = list
  --
      - __init__(auto_convert_lobs = True, coerce_to_decimal = True, arraysize = None, encoding_errors = None, threaded = None)
      + {classmethod} import_dbapi(cls)
      + initialize(connection)
      + get_isolation_level(dbapi_connection)
      + get_isolation_level_values(dbapi_connection)
      + set_isolation_level(dbapi_connection, level)
      + on_connect()
      + create_connect_args(url)
      + is_disconnect(e, connection, cursor)
      + create_xid()
      + do_executemany(cursor, statement, parameters, context = None)
      + do_begin_twophase(connection, xid)
      + do_prepare_twophase(connection, xid)
      + do_rollback_twophase(connection, xid, is_prepared = True, recover = False)
      + do_commit_twophase(connection, xid, is_prepared = True, recover = False)
      + do_set_input_sizes(cursor, list_of_tuples, context)
      + do_recover_twophase(connection)
  }

  class OracleExecutionContext_oracledb {
  }

  class OracleDialect_oracledb {
      + supports_statement_cache = True
      + execution_ctx_cls = OracleExecutionContext_oracledb
      + driver = 'oracledb'
  --
      - __init__(auto_convert_lobs = True, coerce_to_decimal = True, arraysize = None, encoding_errors = None, thick_mode = None)
      + {classmethod} import_dbapi(cls)
      + {classmethod} is_thin_mode(cls, connection)
      + {classmethod} get_async_dialect_cls(cls, url)
      + do_begin_twophase(connection, xid)
      + do_prepare_twophase(connection, xid)
      + do_rollback_twophase(connection, xid, is_prepared = True, recover = False)
      + do_commit_twophase(connection, xid, is_prepared = True, recover = False)
      + do_recover_twophase(connection)
  }

  class AsyncAdapt_oracledb_cursor {
      + outputtypehandler()
      + outputtypehandler(value)
      + var()
      + close()
      + setinputsizes(): Any
  }

  class AsyncAdapt_oracledb_ss_cursor {
      + close()
  }

  class AsyncAdapt_oracledb_connection {
      + thin = True
  --
      + autocommit()
      + autocommit(value)
      + outputtypehandler()
      + outputtypehandler(value)
      + version()
      + stmtcachesize()
      + stmtcachesize(value)
      + max_identifier_length()
      + cursor()
      + ss_cursor()
      + xid(): Any
      + tpc_begin(): Any
      + tpc_commit(): Any
      + tpc_prepare(): Any
      + tpc_recover(): Any
      + tpc_rollback(): Any
  }

  class AsyncAdaptFallback_oracledb_connection {
  }

  class OracledbAdaptDBAPI {
      - __init__(oracledb)
      + connect()
  }

  class OracleExecutionContextAsync_oracledb {
      + create_cursor = default.DefaultExecutionContext.create_cursor
  --
      + create_default_cursor()
      + create_server_side_cursor()
  }

  class OracleDialectAsync_oracledb {
      + is_async = True
      + supports_server_side_cursors = True
      + supports_statement_cache = True
      + execution_ctx_cls = OracleExecutionContextAsync_oracledb
  --
      + {classmethod} import_dbapi(cls)
      + {classmethod} get_pool_class(cls, url)
      + get_driver_connection(connection)
  }

  class RAW {
  }

  class NCLOB {
  }

  class VARCHAR2 {
  }

  class NUMBER {
      - __init__(precision = None, scale = None, asdecimal = None)
      + adapt(impltype)
  }

  class FLOAT {
      - __init__(binary_precision = None, asdecimal = False, decimal_return_scale = None)
  }

  class BINARY_DOUBLE {
  }

  class BINARY_FLOAT {
  }

  class BFILE {
  }

  class LONG {
  }

  class DATE {
      + literal_processor(dialect)
  }

  class INTERVAL {
      - __init__(day_precision = None, second_precision = None)
      + {classmethod} adapt_emulated_to_native(cls, interval: sqltypes.Interval)
      + as_generic(allow_nulltype = False)
      + python_type(): Type[dt.timedelta]
      + literal_processor(dialect: Dialect): Optional[_LiteralProcessorType[dt.timedelta]]
  }

  class TIMESTAMP {
      - __init__(timezone: bool = False, local_timezone: bool = False)
  }

  class ROWID {
  }

}

package postgresql {
  class array {
      + stringify_dialect = 'postgresql'
      + inherit_cache = True
  --
      - __init__(clauses)
      + self_group(against = None)
  }

  class ARRAY {
      + comparator_factory = Comparator
  --
      - __init__(item_type: _TypeEngineArgument[Any], as_tuple: bool = False, dimensions: Optional[int] = None, zero_indexes: bool = False)
      + hashable()
      + python_type()
      + compare_values(x, y)
      + literal_processor(dialect)
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
  }

  class Comparator {
      + contains(other)
      + contained_by(other)
      + overlap(other)
  }

  class AsyncpgARRAY {
      + render_bind_cast = True
  }

  class AsyncpgString {
      + render_bind_cast = True
  }

  class AsyncpgREGCONFIG {
      + render_bind_cast = True
  }

  class AsyncpgTime {
      + render_bind_cast = True
  }

  class AsyncpgBit {
      + render_bind_cast = True
  }

  class AsyncpgByteA {
      + render_bind_cast = True
  }

  class AsyncpgDate {
      + render_bind_cast = True
  }

  class AsyncpgDateTime {
      + render_bind_cast = True
  }

  class AsyncpgBoolean {
      + render_bind_cast = True
  }

  class AsyncPgInterval {
      + render_bind_cast = True
  --
      + {classmethod} adapt_emulated_to_native(cls, interval)
  }

  class AsyncPgEnum {
      + render_bind_cast = True
  }

  class AsyncpgInteger {
      + render_bind_cast = True
  }

  class AsyncpgSmallInteger {
      + render_bind_cast = True
  }

  class AsyncpgBigInteger {
      + render_bind_cast = True
  }

  class AsyncpgJSON {
      + result_processor(dialect, coltype)
  }

  class AsyncpgJSONB {
      + result_processor(dialect, coltype)
  }

  class AsyncpgJSONIndexType {
  }

  class AsyncpgJSONIntIndexType {
      + render_bind_cast = True
  }

  class AsyncpgJSONStrIndexType {
      + render_bind_cast = True
  }

  class AsyncpgJSONPathType {
      + bind_processor(dialect)
  }

  class AsyncpgNumeric {
      + render_bind_cast = True
  --
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
  }

  class AsyncpgFloat {
      + render_bind_cast = True
  }

  class AsyncpgREGCLASS {
      + render_bind_cast = True
  }

  class AsyncpgOID {
      + render_bind_cast = True
  }

  class AsyncpgCHAR {
      + render_bind_cast = True
  }

  class PGExecutionContext_asyncpg {
      + handle_dbapi_exception(e)
      + pre_exec()
      + create_server_side_cursor()
  }

  class PGCompiler_asyncpg {
  }

  class PGIdentifierPreparer_asyncpg {
  }

  class AsyncAdapt_asyncpg_cursor {
      + server_side = False
  --
      - __init__(adapt_connection)
      + close()
      + execute(operation, parameters = None)
      + executemany(operation, seq_of_parameters)
      + setinputsizes()
      + fetchone()
      + fetchmany(size = None)
      + fetchall()
  }

  class AsyncAdapt_asyncpg_ss_cursor {
      + server_side = True
  --
      - __init__(adapt_connection)
      + close()
      + fetchone()
      + fetchmany(size = None)
      + fetchall()
      + executemany(operation, seq_of_parameters)
  }

  class AsyncAdapt_asyncpg_connection {
      + await_ = staticmethod(await_only)
  --
      - __init__(dbapi, connection, prepared_statement_cache_size = 100, prepared_statement_name_func = None)
      + autocommit()
      + autocommit(value)
      + ping()
      + set_isolation_level(level)
      + cursor(server_side = False)
      + rollback()
      + commit()
      + close()
      + terminate()
  }

  class AsyncAdaptFallback_asyncpg_connection {
      + await_ = staticmethod(await_fallback)
  }

  class AsyncAdapt_asyncpg_dbapi {
      + STRING = util.symbol('STRING')
      + NUMBER = util.symbol('NUMBER')
      + DATETIME = util.symbol('DATETIME')
  --
      - __init__(asyncpg)
      + connect()
      + Binary(value)
  }

  class Error {
  }

  class Warning {
  }

  class InterfaceError {
  }

  class DatabaseError {
  }

  class InternalError {
  }

  class OperationalError {
  }

  class ProgrammingError {
  }

  class IntegrityError {
  }

  class DataError {
  }

  class NotSupportedError {
  }

  class InternalServerError {
  }

  class InvalidCachedStatementError {
      - __init__(message)
  }

  class PGDialect_asyncpg {
      + driver = 'asyncpg'
      + supports_statement_cache = True
      + supports_server_side_cursors = True
      + render_bind_cast = True
      + has_terminate = True
      + default_paramstyle = 'numeric_dollar'
      + supports_sane_multi_rowcount = False
      + execution_ctx_cls = PGExecutionContext_asyncpg
      + statement_compiler = PGCompiler_asyncpg
      + preparer = PGIdentifierPreparer_asyncpg
      + colspecs = util.update_copy(PGDialect.colspecs, {sqltypes.String: AsyncpgString, sqltypes.ARRAY: AsyncpgARRAY, BIT: AsyncpgBit, CITEXT: CITEXT, REGCONFIG: AsyncpgREGCONFIG, sqltypes.Time: AsyncpgTime, sqltypes.Date: AsyncpgDate, sqltypes.DateTime: AsyncpgDateTime, sqltypes.Interval: AsyncPgInterval, INTERVAL: AsyncPgInterval, sqltypes.Boolean: AsyncpgBoolean, sqltypes.Integer: AsyncpgInteger, sqltypes.SmallInteger: AsyncpgSmallInteger, sqltypes.BigInteger: AsyncpgBigInteger, sqltypes.Numeric: AsyncpgNumeric, sqltypes.Float: AsyncpgFloat, sqltypes.JSON: AsyncpgJSON, sqltypes.LargeBinary: AsyncpgByteA, json.JSONB: AsyncpgJSONB, sqltypes.JSON.JSONPathType: AsyncpgJSONPathType, sqltypes.JSON.JSONIndexType: AsyncpgJSONIndexType, sqltypes.JSON.JSONIntIndexType: AsyncpgJSONIntIndexType, sqltypes.JSON.JSONStrIndexType: AsyncpgJSONStrIndexType, sqltypes.Enum: AsyncPgEnum, OID: AsyncpgOID, REGCLASS: AsyncpgREGCLASS, sqltypes.CHAR: AsyncpgCHAR, ranges.AbstractSingleRange: _AsyncpgRange, ranges.AbstractMultiRange: _AsyncpgMultiRange})
      + is_async = True
  --
      + {classmethod} import_dbapi(cls)
      + get_isolation_level_values(dbapi_connection)
      + set_isolation_level(dbapi_connection, level)
      + set_readonly(connection, value)
      + get_readonly(connection)
      + set_deferrable(connection, value)
      + get_deferrable(connection)
      + do_terminate(dbapi_connection)
      + create_connect_args(url)
      + do_ping(dbapi_connection)
      + {classmethod} get_pool_class(cls, url)
      + is_disconnect(e, connection, cursor)
      + on_connect()
      + get_driver_connection(connection)
  }

  class PGCompiler {
      + visit_to_tsvector_func(element)
      + visit_to_tsquery_func(element)
      + visit_plainto_tsquery_func(element)
      + visit_phraseto_tsquery_func(element)
      + visit_websearch_to_tsquery_func(element)
      + visit_ts_headline_func(element)
      + render_bind_cast(type_, dbapi_type, sqltext)
      + visit_array(element)
      + visit_slice(element)
      + visit_bitwise_xor_op_binary(binary, operator)
      + visit_json_getitem_op_binary(binary, operator, _cast_applied = False)
      + visit_json_path_getitem_op_binary(binary, operator, _cast_applied = False)
      + visit_getitem_binary(binary, operator)
      + visit_aggregate_order_by(element)
      + visit_match_op_binary(binary, operator)
      + visit_ilike_case_insensitive_operand(element)
      + visit_ilike_op_binary(binary, operator)
      + visit_not_ilike_op_binary(binary, operator)
      + visit_regexp_match_op_binary(binary, operator)
      + visit_not_regexp_match_op_binary(binary, operator)
      + visit_regexp_replace_op_binary(binary, operator)
      + visit_empty_set_expr(element_types)
      + render_literal_value(value, type_)
      + visit_aggregate_strings_func(fn)
      + visit_sequence(seq)
      + limit_clause(select)
      + format_from_hint_text(sqltext, table, hint, iscrud)
      + get_select_precolumns(select)
      + for_update_clause(select)
      + visit_substring_func(func)
      + visit_on_conflict_do_nothing(on_conflict)
      + visit_on_conflict_do_update(on_conflict)
      + update_from_clause(update_stmt, from_table, extra_froms, from_hints)
      + delete_extra_from_clause(delete_stmt, from_table, extra_froms, from_hints)
      + fetch_clause(select)
  }

  class PGDDLCompiler {
      + get_column_specification(column)
      + visit_check_constraint(constraint)
      + visit_foreign_key_constraint(constraint)
      + visit_create_enum_type(create)
      + visit_drop_enum_type(drop)
      + visit_create_domain_type(create)
      + visit_drop_domain_type(drop)
      + visit_create_index(create)
      + define_unique_constraint_distinct(constraint)
      + visit_drop_index(drop)
      + visit_exclude_constraint(constraint)
      + post_create_table(table)
      + visit_computed_column(generated)
      + visit_create_sequence(create)
      + visit_set_constraint_comment(create)
      + visit_drop_constraint_comment(drop)
  }

  class PGTypeCompiler {
      + visit_TSVECTOR(type_)
      + visit_TSQUERY(type_)
      + visit_INET(type_)
      + visit_CIDR(type_)
      + visit_CITEXT(type_)
      + visit_MACADDR(type_)
      + visit_MACADDR8(type_)
      + visit_MONEY(type_)
      + visit_OID(type_)
      + visit_REGCONFIG(type_)
      + visit_REGCLASS(type_)
      + visit_FLOAT(type_)
      + visit_double(type_)
      + visit_BIGINT(type_)
      + visit_HSTORE(type_)
      + visit_JSON(type_)
      + visit_JSONB(type_)
      + visit_INT4MULTIRANGE(type_)
      + visit_INT8MULTIRANGE(type_)
      + visit_NUMMULTIRANGE(type_)
      + visit_DATEMULTIRANGE(type_)
      + visit_TSMULTIRANGE(type_)
      + visit_TSTZMULTIRANGE(type_)
      + visit_INT4RANGE(type_)
      + visit_INT8RANGE(type_)
      + visit_NUMRANGE(type_)
      + visit_DATERANGE(type_)
      + visit_TSRANGE(type_)
      + visit_TSTZRANGE(type_)
      + visit_json_int_index(type_)
      + visit_json_str_index(type_)
      + visit_datetime(type_)
      + visit_enum(type_)
      + visit_ENUM(type_, identifier_preparer = None)
      + visit_DOMAIN(type_, identifier_preparer = None)
      + visit_TIMESTAMP(type_)
      + visit_TIME(type_)
      + visit_INTERVAL(type_)
      + visit_BIT(type_)
      + visit_uuid(type_)
      + visit_UUID(type_)
      + visit_large_binary(type_)
      + visit_BYTEA(type_)
      + visit_ARRAY(type_)
      + visit_json_path(type_)
      + visit_JSONPATH(type_)
  }

  class PGIdentifierPreparer {
      + reserved_words = RESERVED_WORDS
  --
      + format_type(type_, use_schema = True)
  }

  class ReflectedNamedType {
      + name: str
      + schema: str
      + visible: bool
  }

  class ReflectedDomainConstraint {
      + name: str
      + check: str
  }

  class ReflectedDomain {
      + type: str
      + nullable: bool
      + default: Optional[str]
      + constraints: List[ReflectedDomainConstraint]
      + collation: Optional[str]
  }

  class ReflectedEnum {
      + labels: List[str]
  }

  class PGInspector {
      + dialect: PGDialect
  --
      + get_table_oid(table_name: str, schema: Optional[str] = None): int
      + get_domains(schema: Optional[str] = None): List[ReflectedDomain]
      + get_enums(schema: Optional[str] = None): List[ReflectedEnum]
      + get_foreign_table_names(schema: Optional[str] = None): List[str]
      + has_type(type_name: str, schema: Optional[str] = None): bool
  }

  class PGExecutionContext {
      + fire_sequence(seq, type_)
      + get_insert_default(column)
  }

  class PGReadOnlyConnectionCharacteristic {
      + transactional = True
  --
      + reset_characteristic(dialect, dbapi_conn)
      + set_characteristic(dialect, dbapi_conn, value)
      + get_characteristic(dialect, dbapi_conn)
  }

  class PGDeferrableConnectionCharacteristic {
      + transactional = True
  --
      + reset_characteristic(dialect, dbapi_conn)
      + set_characteristic(dialect, dbapi_conn, value)
      + get_characteristic(dialect, dbapi_conn)
  }

  class PGDialect {
      + name = 'postgresql'
      + supports_statement_cache = True
      + supports_alter = True
      + max_identifier_length = 63
      + supports_sane_rowcount = True
      + bind_typing = interfaces.BindTyping.RENDER_CASTS
      + supports_native_enum = True
      + supports_native_boolean = True
      + supports_native_uuid = True
      + supports_smallserial = True
      + supports_sequences = True
      + sequences_optional = True
      + preexecute_autoincrement_sequences = True
      + postfetch_lastrowid = False
      + use_insertmanyvalues = True
      + returns_native_bytes = True
      + insertmanyvalues_implicit_sentinel = InsertmanyvaluesSentinelOpts.ANY_AUTOINCREMENT | InsertmanyvaluesSentinelOpts.USE_INSERT_FROM_SELECT | InsertmanyvaluesSentinelOpts.RENDER_SELECT_COL_CASTS
      + supports_comments = True
      + supports_constraint_comments = True
      + supports_default_values = True
      + supports_default_metavalue = True
      + supports_empty_insert = False
      + supports_multivalues_insert = True
      + supports_identity_columns = True
      + default_paramstyle = 'pyformat'
      + ischema_names = ischema_names
      + colspecs = colspecs
      + statement_compiler = PGCompiler
      + ddl_compiler = PGDDLCompiler
      + type_compiler_cls = PGTypeCompiler
      + preparer = PGIdentifierPreparer
      + execution_ctx_cls = PGExecutionContext
      + inspector = PGInspector
      + update_returning = True
      + delete_returning = True
      + insert_returning = True
      + update_returning_multifrom = True
      + delete_returning_multifrom = True
      + connection_characteristics = default.DefaultDialect.connection_characteristics
      + connection_characteristics = connection_characteristics.union({'postgresql_readonly': PGReadOnlyConnectionCharacteristic(), 'postgresql_deferrable': PGDeferrableConnectionCharacteristic()})
      + construct_arguments = [(schema.Index, {'using': False, 'include': None, 'where': None, 'ops': {}, 'concurrently': False, 'with': {}, 'tablespace': None, 'nulls_not_distinct': None}), (schema.Table, {'ignore_search_path': False, 'tablespace': None, 'partition_by': None, 'with_oids': None, 'on_commit': None, 'inherits': None, 'using': None}), (schema.CheckConstraint, {'not_valid': False}), (schema.ForeignKeyConstraint, {'not_valid': False}), (schema.UniqueConstraint, {'nulls_not_distinct': None})]
      + reflection_options = ('postgresql_ignore_search_path',)
  --
      - __init__(native_inet_types = None, json_serializer = None, json_deserializer = None)
      + initialize(connection)
      + get_isolation_level_values(dbapi_conn)
      + set_isolation_level(dbapi_connection, level)
      + get_isolation_level(dbapi_connection)
      + set_readonly(connection, value)
      + get_readonly(connection)
      + set_deferrable(connection, value)
      + get_deferrable(connection)
      + do_begin_twophase(connection, xid)
      + do_prepare_twophase(connection, xid)
      + do_rollback_twophase(connection, xid, is_prepared = True, recover = False)
      + do_commit_twophase(connection, xid, is_prepared = True, recover = False)
      + do_recover_twophase(connection)
      + has_schema(connection, schema)
      + has_table(connection, table_name, schema = None)
      + has_sequence(connection, sequence_name, schema = None)
      + has_type(connection, type_name, schema = None)
      + get_table_oid(connection, table_name, schema = None)
      + get_schema_names(connection)
      + get_table_names(connection, schema = None)
      + get_temp_table_names(connection)
      + get_view_names(connection, schema = None)
      + get_materialized_view_names(connection, schema = None)
      + get_temp_view_names(connection, schema = None)
      + get_sequence_names(connection, schema = None)
      + get_view_definition(connection, view_name, schema = None)
      + get_columns(connection, table_name, schema = None)
      + get_multi_columns(connection, schema, filter_names, scope, kind)
      + get_pk_constraint(connection, table_name, schema = None)
      + get_multi_pk_constraint(connection, schema, filter_names, scope, kind)
      + get_foreign_keys(connection, table_name, schema = None, postgresql_ignore_search_path = False)
      + get_multi_foreign_keys(connection, schema, filter_names, scope, kind, postgresql_ignore_search_path = False)
      + get_indexes(connection, table_name, schema = None)
      + get_multi_indexes(connection, schema, filter_names, scope, kind)
      + get_unique_constraints(connection, table_name, schema = None)
      + get_multi_unique_constraints(connection, schema, filter_names, scope, kind)
      + get_table_comment(connection, table_name, schema = None)
      + get_multi_table_comment(connection, schema, filter_names, scope, kind)
      + get_check_constraints(connection, table_name, schema = None)
      + get_multi_check_constraints(connection, schema, filter_names, scope, kind)
  }

  class Insert {
      + stringify_dialect = 'postgresql'
      + inherit_cache = False
  --
      + excluded(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + on_conflict_do_update(constraint: _OnConflictConstraintT = None, index_elements: _OnConflictIndexElementsT = None, index_where: _OnConflictIndexWhereT = None, set_: _OnConflictSetT = None, where: _OnConflictWhereT = None): Self
      + on_conflict_do_nothing(constraint: _OnConflictConstraintT = None, index_elements: _OnConflictIndexElementsT = None, index_where: _OnConflictIndexWhereT = None): Self
  }

  class OnConflictClause {
      + stringify_dialect = 'postgresql'
      + constraint_target: Optional[str]
      + inferred_target_elements: Optional[List[Union[str, schema.Column[Any]]]]
      + inferred_target_whereclause: Optional[Union[ColumnElement[Any], TextClause]]
  --
      - __init__(constraint: _OnConflictConstraintT = None, index_elements: _OnConflictIndexElementsT = None, index_where: _OnConflictIndexWhereT = None)
  }

  class OnConflictDoNothing {
  }

  class OnConflictDoUpdate {
      + update_values_to_set: List[Tuple[Union[schema.Column[Any], str], Any]]
      + update_whereclause: Optional[ColumnElement[Any]]
  --
      - __init__(constraint: _OnConflictConstraintT = None, index_elements: _OnConflictIndexElementsT = None, index_where: _OnConflictIndexWhereT = None, set_: _OnConflictSetT = None, where: _OnConflictWhereT = None)
  }

  class aggregate_order_by {
      + stringify_dialect = 'postgresql'
  --
      - __init__(target)
      + self_group(against = None)
      + get_children()
  }

  class ExcludeConstraint {
      + where = None
      + inherit_cache = False
      + create_drop_stringify_dialect = 'postgresql'
  --
      - __init__()
  }

  class to_tsvector {
      + inherit_cache = True
      + type = types.TSVECTOR
  }

  class to_tsquery {
      + inherit_cache = True
      + type = types.TSQUERY
  }

  class plainto_tsquery {
      + inherit_cache = True
      + type = types.TSQUERY
  }

  class phraseto_tsquery {
      + inherit_cache = True
      + type = types.TSQUERY
  }

  class websearch_to_tsquery {
      + inherit_cache = True
      + type = types.TSQUERY
  }

  class ts_headline {
      + inherit_cache = True
      + type = TEXT
  --
      - __init__()
  }

  class HSTORE {
      + hashable = False
      + text_type = sqltypes.Text()
      + comparator_factory = Comparator
  --
      - __init__(text_type = None)
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
  }

  class Comparator {
      + has_key(other)
      + has_all(other)
      + has_any(other)
      + contains(other)
      + contained_by(other)
      + defined(key)
      + delete(key)
      + slice(array)
      + keys()
      + vals()
      + array()
      + matrix()
  }

  class hstore {
      + type = HSTORE
      + name = 'hstore'
      + inherit_cache = True
  }

  class JSONPathType {
      + bind_processor(dialect: Dialect): _BindProcessorType[Any]
      + literal_processor(dialect: Dialect): _LiteralProcessorType[Any]
  }

  class JSONPATH {
  }

  class JSON {
      + render_bind_cast = True
      + astext_type: TypeEngine[str] = sqltypes.Text()
      + comparator_factory = Comparator
  --
      - __init__(none_as_null: bool = False, astext_type: Optional[TypeEngine[str]] = None)
  }

  class Comparator {
      + type: JSON
  --
      + astext(): ColumnElement[str]
  }

  class JSONB {
      + comparator_factory = Comparator
  }

  class Comparator {
      + type: JSONB
  --
      + has_key(other): ColumnElement[bool]
      + has_all(other): ColumnElement[bool]
      + has_any(other): ColumnElement[bool]
      + contains(other): ColumnElement[bool]
      + contained_by(other): ColumnElement[bool]
      + delete_path(array: Union[List[str], _pg_array[str]]): ColumnElement[JSONB]
      + path_exists(other): ColumnElement[bool]
      + path_match(other): ColumnElement[bool]
  }

  class NamedType {
      + DDLGenerator: Type[NamedTypeGenerator]
      + DDLDropper: Type[NamedTypeDropper]
      + create_type: bool
  --
      + create(bind, checkfirst = True)
      + drop(bind, checkfirst = True)
  }

  class NamedTypeGenerator {
      - __init__(dialect, connection, checkfirst = False)
  }

  class NamedTypeDropper {
      - __init__(dialect, connection, checkfirst = False)
  }

  class EnumGenerator {
      + visit_enum(enum)
  }

  class EnumDropper {
      + visit_enum(enum)
  }

  class ENUM {
      + native_enum = True
      + DDLGenerator = EnumGenerator
      + DDLDropper = EnumDropper
  --
      - __init__()
      + coerce_compared_value(op, value)
      + {classmethod} adapt_emulated_to_native(cls, impl)
      + create(bind = None, checkfirst = True)
      + drop(bind = None, checkfirst = True)
      + get_dbapi_type(dbapi)
  }

  class DomainGenerator {
      + visit_DOMAIN(domain)
  }

  class DomainDropper {
      + visit_DOMAIN(domain)
  }

  class DOMAIN {
      + DDLGenerator = DomainGenerator
      + DDLDropper = DomainDropper
  --
      - __init__(name: str, data_type: _TypeEngineArgument[Any])
      + adapt(impl)
  }

  class CreateEnumType {
  }

  class DropEnumType {
  }

  class CreateDomainType {
  }

  class DropDomainType {
  }

  class PGExecutionContext_pg8000 {
      + create_server_side_cursor()
      + pre_exec()
  }

  class ServerSideCursor {
      + server_side = True
  --
      - __init__(cursor, ident)
      + connection()
      + rowcount()
      + description()
      + execute(operation, args = (), stream = None)
      + executemany(operation, param_sets)
      + fetchone()
      + fetchmany(num = None)
      + fetchall()
      + close()
      + setinputsizes()
      + setoutputsize(size, column = None)
  }

  class PGCompiler_pg8000 {
      + visit_mod_binary(binary, operator)
  }

  class PGIdentifierPreparer_pg8000 {
      - __init__()
  }

  class PGDialect_pg8000 {
      + driver = 'pg8000'
      + supports_statement_cache = True
      + supports_unicode_statements = True
      + supports_unicode_binds = True
      + default_paramstyle = 'format'
      + supports_sane_multi_rowcount = True
      + execution_ctx_cls = PGExecutionContext_pg8000
      + statement_compiler = PGCompiler_pg8000
      + preparer = PGIdentifierPreparer_pg8000
      + supports_server_side_cursors = True
      + render_bind_cast = True
      + description_encoding = None
      + colspecs = util.update_copy(PGDialect.colspecs, {sqltypes.String: _PGString, sqltypes.Numeric: _PGNumericNoBind, sqltypes.Float: _PGFloat, sqltypes.JSON: _PGJSON, sqltypes.Boolean: _PGBoolean, sqltypes.NullType: _PGNullType, JSONB: _PGJSONB, CITEXT: CITEXT, sqltypes.JSON.JSONPathType: _PGJSONPathType, sqltypes.JSON.JSONIndexType: _PGJSONIndexType, sqltypes.JSON.JSONIntIndexType: _PGJSONIntIndexType, sqltypes.JSON.JSONStrIndexType: _PGJSONStrIndexType, sqltypes.Interval: _PGInterval, INTERVAL: _PGInterval, sqltypes.DateTime: _PGTimeStamp, sqltypes.DateTime: _PGTimeStamp, sqltypes.Date: _PGDate, sqltypes.Time: _PGTime, sqltypes.Integer: _PGInteger, sqltypes.SmallInteger: _PGSmallInteger, sqltypes.BigInteger: _PGBigInteger, sqltypes.Enum: _PGEnum, sqltypes.ARRAY: _PGARRAY, OIDVECTOR: _PGOIDVECTOR, ranges.INT4RANGE: _Pg8000Range, ranges.INT8RANGE: _Pg8000Range, ranges.NUMRANGE: _Pg8000Range, ranges.DATERANGE: _Pg8000Range, ranges.TSRANGE: _Pg8000Range, ranges.TSTZRANGE: _Pg8000Range, ranges.INT4MULTIRANGE: _Pg8000MultiRange, ranges.INT8MULTIRANGE: _Pg8000MultiRange, ranges.NUMMULTIRANGE: _Pg8000MultiRange, ranges.DATEMULTIRANGE: _Pg8000MultiRange, ranges.TSMULTIRANGE: _Pg8000MultiRange, ranges.TSTZMULTIRANGE: _Pg8000MultiRange})
  --
      - __init__(client_encoding = None)
      + {classmethod} import_dbapi(cls)
      + create_connect_args(url)
      + is_disconnect(e, connection, cursor)
      + get_isolation_level_values(dbapi_connection)
      + set_isolation_level(dbapi_connection, level)
      + set_readonly(connection, value)
      + get_readonly(connection)
      + set_deferrable(connection, value)
      + get_deferrable(connection)
      + do_begin_twophase(connection, xid)
      + do_prepare_twophase(connection, xid)
      + do_rollback_twophase(connection, xid, is_prepared = True, recover = False)
      + do_commit_twophase(connection, xid, is_prepared = True, recover = False)
      + do_recover_twophase(connection)
      + on_connect()
  }

  class NAME {
      + impl = String(64, collation='C')
      + cache_ok = True
  }

  class PG_NODE_TREE {
      + impl = Text(collation='C')
      + cache_ok = True
  }

  class INT2VECTOR {
      + impl = ARRAY(SmallInteger)
      + cache_ok = True
  }

  class OIDVECTOR {
      + impl = ARRAY(OID)
      + cache_ok = True
  }

  class PGExecutionContext_psycopg {
  }

  class PGCompiler_psycopg {
  }

  class PGIdentifierPreparer_psycopg {
  }

  class PGDialect_psycopg {
      + driver = 'psycopg'
      + supports_statement_cache = True
      + supports_server_side_cursors = True
      + default_paramstyle = 'pyformat'
      + supports_sane_multi_rowcount = True
      + execution_ctx_cls = PGExecutionContext_psycopg
      + statement_compiler = PGCompiler_psycopg
      + preparer = PGIdentifierPreparer_psycopg
      + psycopg_version = (0, 0)
      + colspecs = util.update_copy(_PGDialect_common_psycopg.colspecs, {sqltypes.String: _PGString, REGCONFIG: _PGREGCONFIG, JSON: _PGJSON, CITEXT: CITEXT, sqltypes.JSON: _PGJSON, JSONB: _PGJSONB, sqltypes.JSON.JSONPathType: _PGJSONPathType, sqltypes.JSON.JSONIntIndexType: _PGJSONIntIndexType, sqltypes.JSON.JSONStrIndexType: _PGJSONStrIndexType, sqltypes.Interval: _PGInterval, INTERVAL: _PGInterval, sqltypes.Date: _PGDate, sqltypes.DateTime: _PGTimeStamp, sqltypes.Time: _PGTime, sqltypes.Integer: _PGInteger, sqltypes.SmallInteger: _PGSmallInteger, sqltypes.BigInteger: _PGBigInteger, ranges.AbstractSingleRange: _PsycopgRange, ranges.AbstractMultiRange: _PsycopgMultiRange})
  --
      - __init__()
      + create_connect_args(url)
      + initialize(connection)
      + {classmethod} import_dbapi(cls)
      + {classmethod} get_async_dialect_cls(cls, url)
      + get_isolation_level(dbapi_connection)
      + set_isolation_level(dbapi_connection, level)
      + set_readonly(connection, value)
      + get_readonly(connection)
      + on_connect()
      + is_disconnect(e, connection, cursor)
      + do_rollback_twophase(connection, xid, is_prepared = True, recover = False)
      + do_commit_twophase(connection, xid, is_prepared = True, recover = False)
  }

  class AsyncAdapt_psycopg_cursor {
      - __init__(cursor, await_)
      + arraysize()
      + arraysize(value)
      + close()
      + execute(query, params = None)
      + executemany(query, params_seq)
      + fetchone()
      + fetchmany(size = None)
      + fetchall()
  }

  class AsyncAdapt_psycopg_ss_cursor {
      + execute(query, params = None)
      + close()
      + fetchone()
      + fetchmany(size = 0)
      + fetchall()
  }

  class AsyncAdapt_psycopg_connection {
      + await_ = staticmethod(await_only)
  --
      - __init__(connection)
      + execute(query, params = None)
      + cursor()
      + commit()
      + rollback()
      + close()
      + autocommit()
      + autocommit(value)
      + set_autocommit(value)
      + set_isolation_level(value)
      + set_read_only(value)
      + set_deferrable(value)
  }

  class AsyncAdaptFallback_psycopg_connection {
      + await_ = staticmethod(await_fallback)
  }

  class PsycopgAdaptDBAPI {
      - __init__(psycopg)
      + connect()
  }

  class PGDialectAsync_psycopg {
      + is_async = True
      + supports_statement_cache = True
  --
      + {classmethod} import_dbapi(cls)
      + {classmethod} get_pool_class(cls, url)
      + set_readonly(connection, value)
      + set_deferrable(connection, value)
      + get_driver_connection(connection)
  }

  class PGExecutionContext_psycopg2 {
      + post_exec()
  }

  class PGIdentifierPreparer_psycopg2 {
  }

  class ExecutemanyMode {
      + EXECUTEMANY_VALUES = 0
      + EXECUTEMANY_VALUES_PLUS_BATCH = 1
  }

  class PGDialect_psycopg2 {
      + driver = 'psycopg2'
      + supports_statement_cache = True
      + supports_server_side_cursors = True
      + default_paramstyle = 'pyformat'
      + supports_sane_multi_rowcount = False
      + execution_ctx_cls = PGExecutionContext_psycopg2
      + preparer = PGIdentifierPreparer_psycopg2
      + psycopg2_version = (0, 0)
      + use_insertmanyvalues_wo_returning = True
      + returns_native_bytes = False
      + colspecs = util.update_copy(_PGDialect_common_psycopg.colspecs, {JSON: _PGJSON, sqltypes.JSON: _PGJSON, JSONB: _PGJSONB, ranges.INT4RANGE: _Psycopg2NumericRange, ranges.INT8RANGE: _Psycopg2NumericRange, ranges.NUMRANGE: _Psycopg2NumericRange, ranges.DATERANGE: _Psycopg2DateRange, ranges.TSRANGE: _Psycopg2DateTimeRange, ranges.TSTZRANGE: _Psycopg2DateTimeTZRange})
  --
      - __init__(executemany_mode = 'values_only', executemany_batch_page_size = 100)
      + initialize(connection)
      + {classmethod} import_dbapi(cls)
      + set_isolation_level(dbapi_connection, level)
      + set_readonly(connection, value)
      + get_readonly(connection)
      + set_deferrable(connection, value)
      + get_deferrable(connection)
      + on_connect()
      + do_executemany(cursor, statement, parameters, context = None)
      + do_begin_twophase(connection, xid)
      + do_prepare_twophase(connection, xid)
      + do_rollback_twophase(connection, xid, is_prepared = True, recover = False)
      + do_commit_twophase(connection, xid, is_prepared = True, recover = False)
      + is_disconnect(e, connection, cursor)
  }

  class PGDialect_psycopg2cffi {
      + driver = 'psycopg2cffi'
      + supports_unicode_statements = True
      + supports_statement_cache = True
      + FEATURE_VERSION_MAP = dict(native_json=(2, 4, 4), native_jsonb=(2, 7, 1), sane_multi_rowcount=(2, 4, 4), array_oid=(2, 4, 4), hstore_adapter=(2, 4, 4))
  --
      + {classmethod} import_dbapi(cls)
  }

  class Range {
      + lower: Optional[_T] = None
      + upper: Optional[_T] = None
  --
      + isempty(): bool
      + is_empty(): bool
      + lower_inc(): bool
      + lower_inf(): bool
      + upper_inc(): bool
      + upper_inf(): bool
      + contained_by(other: Range[_T]): bool
      + contains(value: Union[_T, Range[_T]]): bool
      + overlaps(other: Range[_T]): bool
      + strictly_left_of(other: Range[_T]): bool
      + strictly_right_of(other: Range[_T]): bool
      + not_extend_left_of(other: Range[_T]): bool
      + not_extend_right_of(other: Range[_T]): bool
      + adjacent_to(other: Range[_T]): bool
      + union(other: Range[_T]): Range[_T]
      + difference(other: Range[_T]): Range[_T]
      + intersection(other: Range[_T]): Range[_T]
  }

  class MultiRange {
  }

  class AbstractRange {
      + render_bind_cast = True
  --
      + adapt(cls: Type[_TE]): _TE
      + adapt(cls: Type[TypeEngineMixin]): TypeEngine[Any]
      + adapt(cls: Type[Union[TypeEngine[Any], TypeEngineMixin]]): TypeEngine[Any]
  }

  class comparator_factory {
      + contains(other): ColumnElement[bool]
      + contained_by(other): ColumnElement[bool]
      + overlaps(other): ColumnElement[bool]
      + strictly_left_of(other): ColumnElement[bool]
      + strictly_right_of(other): ColumnElement[bool]
      + not_extend_right_of(other): ColumnElement[bool]
      + not_extend_left_of(other): ColumnElement[bool]
      + adjacent_to(other): ColumnElement[bool]
      + union(other): ColumnElement[bool]
      + difference(other): ColumnElement[bool]
      + intersection(other): ColumnElement[Range[_T]]
  }

  class AbstractSingleRange {
  }

  class AbstractSingleRangeImpl {
  }

  class AbstractMultiRange {
  }

  class AbstractMultiRangeImpl {
  }

  class INT4RANGE {
  }

  class INT8RANGE {
  }

  class NUMRANGE {
  }

  class DATERANGE {
  }

  class TSRANGE {
  }

  class TSTZRANGE {
  }

  class INT4MULTIRANGE {
  }

  class INT8MULTIRANGE {
  }

  class NUMMULTIRANGE {
  }

  class DATEMULTIRANGE {
  }

  class TSMULTIRANGE {
  }

  class TSTZMULTIRANGE {
  }

  class PGUuid {
      + render_bind_cast = True
      + render_literal_cast = True
  }

  class BYTEA {
  }

  class INET {
  }

  class CIDR {
  }

  class MACADDR {
  }

  class MACADDR8 {
  }

  class MONEY {
  }

  class OID {
  }

  class REGCONFIG {
  }

  class TSQUERY {
  }

  class REGCLASS {
  }

  class TIMESTAMP {
      - __init__(timezone: bool = False, precision: Optional[int] = None)
  }

  class TIME {
      - __init__(timezone: bool = False, precision: Optional[int] = None)
  }

  class INTERVAL {
      + native = True
  --
      - __init__(precision: Optional[int] = None, fields: Optional[str] = None)
      + {classmethod} adapt_emulated_to_native(cls, interval: sqltypes.Interval): INTERVAL
      + as_generic(allow_nulltype: bool = False): sqltypes.Interval
      + python_type(): Type[dt.timedelta]
      + literal_processor(dialect: Dialect): Optional[_LiteralProcessorType[dt.timedelta]]
  }

  class BIT {
      - __init__(length: Optional[int] = None, varying: bool = False)
  }

  class TSVECTOR {
  }

  class CITEXT {
      + coerce_compared_value(op: Optional[OperatorType], value): TypeEngine[Any]
  }

}

package sqlite {
  class AsyncAdapt_aiosqlite_cursor {
      + server_side = False
  --
      - __init__(adapt_connection)
      + close()
      + execute(operation, parameters = None)
      + executemany(operation, seq_of_parameters)
      + setinputsizes()
      + fetchone()
      + fetchmany(size = None)
      + fetchall()
  }

  class AsyncAdapt_aiosqlite_ss_cursor {
      + server_side = True
  --
      - __init__()
      + close()
      + fetchone()
      + fetchmany(size = None)
      + fetchall()
  }

  class AsyncAdapt_aiosqlite_connection {
      + await_ = staticmethod(await_only)
  --
      - __init__(dbapi, connection)
      + isolation_level()
      + isolation_level(value)
      + create_function()
      + cursor(server_side = False)
      + execute()
      + rollback()
      + commit()
      + close()
  }

  class AsyncAdaptFallback_aiosqlite_connection {
      + await_ = staticmethod(await_fallback)
  }

  class AsyncAdapt_aiosqlite_dbapi {
      - __init__(aiosqlite, sqlite)
      + connect()
  }

  class SQLiteExecutionContext_aiosqlite {
      + create_server_side_cursor()
  }

  class SQLiteDialect_aiosqlite {
      + driver = 'aiosqlite'
      + supports_statement_cache = True
      + is_async = True
      + supports_server_side_cursors = True
      + execution_ctx_cls = SQLiteExecutionContext_aiosqlite
  --
      + {classmethod} import_dbapi(cls)
      + {classmethod} get_pool_class(cls, url)
      + is_disconnect(e, connection, cursor)
      + get_driver_connection(connection)
  }

  class DATETIME {
      - __init__()
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
  }

  class DATE {
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
  }

  class TIME {
      - __init__()
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
  }

  class SQLiteCompiler {
      + extract_map = util.update_copy(compiler.SQLCompiler.extract_map, {'month': '%m', 'day': '%d', 'year': '%Y', 'second': '%S', 'hour': '%H', 'doy': '%j', 'minute': '%M', 'epoch': '%s', 'dow': '%w', 'week': '%W'})
  --
      + visit_truediv_binary(binary, operator)
      + visit_now_func(fn)
      + visit_localtimestamp_func(func)
      + visit_true(expr)
      + visit_false(expr)
      + visit_char_length_func(fn)
      + visit_aggregate_strings_func(fn)
      + visit_cast(cast)
      + visit_extract(extract)
      + returning_clause(stmt, returning_cols)
      + limit_clause(select)
      + for_update_clause(select)
      + update_from_clause(update_stmt, from_table, extra_froms, from_hints)
      + visit_is_distinct_from_binary(binary, operator)
      + visit_is_not_distinct_from_binary(binary, operator)
      + visit_json_getitem_op_binary(binary, operator)
      + visit_json_path_getitem_op_binary(binary, operator)
      + visit_empty_set_op_expr(type_, expand_op)
      + visit_empty_set_expr(element_types)
      + visit_regexp_match_op_binary(binary, operator)
      + visit_not_regexp_match_op_binary(binary, operator)
      + visit_on_conflict_do_nothing(on_conflict)
      + visit_on_conflict_do_update(on_conflict)
      + visit_bitwise_xor_op_binary(binary, operator)
  }

  class SQLiteDDLCompiler {
      + get_column_specification(column)
      + visit_primary_key_constraint(constraint)
      + visit_unique_constraint(constraint)
      + visit_check_constraint(constraint)
      + visit_column_check_constraint(constraint)
      + visit_foreign_key_constraint(constraint)
      + define_constraint_remote_table(constraint, table, preparer)
      + visit_create_index(create, include_schema = False, include_table_schema = True)
      + post_create_table(table)
  }

  class SQLiteTypeCompiler {
      + visit_large_binary(type_)
      + visit_DATETIME(type_)
      + visit_DATE(type_)
      + visit_TIME(type_)
      + visit_JSON(type_)
  }

  class SQLiteIdentifierPreparer {
      + reserved_words = {'add', 'after', 'all', 'alter', 'analyze', 'and', 'as', 'asc', 'attach', 'autoincrement', 'before', 'begin', 'between', 'by', 'cascade', 'case', 'cast', 'check', 'collate', 'column', 'commit', 'conflict', 'constraint', 'create', 'cross', 'current_date', 'current_time', 'current_timestamp', 'database', 'default', 'deferrable', 'deferred', 'delete', 'desc', 'detach', 'distinct', 'drop', 'each', 'else', 'end', 'escape', 'except', 'exclusive', 'exists', 'explain', 'false', 'fail', 'for', 'foreign', 'from', 'full', 'glob', 'group', 'having', 'if', 'ignore', 'immediate', 'in', 'index', 'indexed', 'initially', 'inner', 'insert', 'instead', 'intersect', 'into', 'is', 'isnull', 'join', 'key', 'left', 'like', 'limit', 'match', 'natural', 'not', 'notnull', 'null', 'of', 'offset', 'on', 'or', 'order', 'outer', 'plan', 'pragma', 'primary', 'query', 'raise', 'references', 'reindex', 'rename', 'replace', 'restrict', 'right', 'rollback', 'row', 'select', 'set', 'table', 'temp', 'temporary', 'then', 'to', 'transaction', 'trigger', 'true', 'union', 'unique', 'update', 'using', 'vacuum', 'values', 'view', 'virtual', 'when', 'where'}
  }

  class SQLiteExecutionContext {
  }

  class SQLiteDialect {
      + name = 'sqlite'
      + supports_alter = False
      + supports_default_values = True
      + supports_default_metavalue = False
      + supports_sane_rowcount_returning = False
      + supports_empty_insert = False
      + supports_cast = True
      + supports_multivalues_insert = True
      + use_insertmanyvalues = True
      + tuple_in_values = True
      + supports_statement_cache = True
      + insert_null_pk_still_autoincrements = True
      + insert_returning = True
      + update_returning = True
      + update_returning_multifrom = True
      + delete_returning = True
      + update_returning_multifrom = True
      + supports_default_metavalue = True
      + default_metavalue_token = 'NULL'
      + default_paramstyle = 'qmark'
      + execution_ctx_cls = SQLiteExecutionContext
      + statement_compiler = SQLiteCompiler
      + ddl_compiler = SQLiteDDLCompiler
      + type_compiler_cls = SQLiteTypeCompiler
      + preparer = SQLiteIdentifierPreparer
      + ischema_names = ischema_names
      + colspecs = colspecs
      + construct_arguments = [(sa_schema.Table, {'autoincrement': False, 'with_rowid': True, 'strict': False}), (sa_schema.Index, {'where': None}), (sa_schema.Column, {'on_conflict_primary_key': None, 'on_conflict_not_null': None, 'on_conflict_unique': None}), (sa_schema.Constraint, {'on_conflict': None})]
  --
      - __init__(native_datetime = False, json_serializer = None, json_deserializer = None, _json_serializer = None, _json_deserializer = None)
      + get_isolation_level_values(dbapi_connection)
      + set_isolation_level(dbapi_connection, level)
      + get_isolation_level(dbapi_connection)
      + get_schema_names(connection)
      + get_table_names(connection, schema = None, sqlite_include_internal = False)
      + get_temp_table_names(connection, sqlite_include_internal = False)
      + get_temp_view_names(connection, sqlite_include_internal = False)
      + has_table(connection, table_name, schema = None)
      + get_view_names(connection, schema = None, sqlite_include_internal = False)
      + get_view_definition(connection, view_name, schema = None)
      + get_columns(connection, table_name, schema = None)
      + get_pk_constraint(connection, table_name, schema = None)
      + get_foreign_keys(connection, table_name, schema = None)
      + get_unique_constraints(connection, table_name, schema = None)
      + get_check_constraints(connection, table_name, schema = None)
      + get_indexes(connection, table_name, schema = None)
  }

  class Insert {
      + stringify_dialect = 'sqlite'
      + inherit_cache = False
  --
      + excluded(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + on_conflict_do_update(index_elements: _OnConflictIndexElementsT = None, index_where: _OnConflictIndexWhereT = None, set_: _OnConflictSetT = None, where: _OnConflictWhereT = None): Self
      + on_conflict_do_nothing(index_elements: _OnConflictIndexElementsT = None, index_where: _OnConflictIndexWhereT = None): Self
  }

  class OnConflictClause {
      + stringify_dialect = 'sqlite'
      + inferred_target_elements: Optional[List[Union[str, schema.Column[Any]]]]
      + inferred_target_whereclause: Optional[Union[ColumnElement[Any], TextClause]]
  --
      - __init__(index_elements: _OnConflictIndexElementsT = None, index_where: _OnConflictIndexWhereT = None)
  }

  class OnConflictDoNothing {
  }

  class OnConflictDoUpdate {
      + update_values_to_set: List[Tuple[Union[schema.Column[Any], str], Any]]
      + update_whereclause: Optional[ColumnElement[Any]]
  --
      - __init__(index_elements: _OnConflictIndexElementsT = None, index_where: _OnConflictIndexWhereT = None, set_: _OnConflictSetT = None, where: _OnConflictWhereT = None)
  }

  class JSON {
  }

  class JSONIndexType {
  }

  class JSONPathType {
  }

  class SQLiteDialect_pysqlcipher {
      + driver = 'pysqlcipher'
      + supports_statement_cache = True
      + pragmas = ('kdf_iter', 'cipher', 'cipher_page_size', 'cipher_use_hmac')
  --
      + {classmethod} import_dbapi(cls)
      + {classmethod} get_pool_class(cls, url)
      + on_connect_url(url)
      + create_connect_args(url)
  }

  class SQLiteDialect_pysqlite {
      + default_paramstyle = 'qmark'
      + supports_statement_cache = True
      + returns_native_bytes = True
      + colspecs = util.update_copy(SQLiteDialect.colspecs, {sqltypes.Date: _SQLite_pysqliteDate, sqltypes.TIMESTAMP: _SQLite_pysqliteTimeStamp})
      + description_encoding = None
      + driver = 'pysqlite'
  --
      + {classmethod} import_dbapi(cls)
      + {classmethod} get_pool_class(cls, url)
      + set_isolation_level(dbapi_connection, level)
      + on_connect()
      + create_connect_args(url)
      + is_disconnect(e, connection, cursor)
  }

}

package engine {
  class Connection {
      + dialect: Dialect
      + dispatch: dispatcher[ConnectionEventsTarget]
      + should_close_with_result = False
  --
      - __init__(engine: Engine, connection: Optional[PoolProxiedConnection] = None, _has_events: Optional[bool] = None, _allow_revalidate: bool = True, _allow_autobegin: bool = True)
      + schema_for_object(obj: HasSchemaAttr): Optional[str]
      + execution_options(): Connection
      + execution_options(): Connection
      + execution_options(): Connection
      + get_execution_options(): _ExecuteOptions
      + closed(): bool
      + invalidated(): bool
      + connection(): PoolProxiedConnection
      + get_isolation_level(): IsolationLevel
      + default_isolation_level(): Optional[IsolationLevel]
      + info(): _InfoType
      + invalidate(exception: Optional[BaseException] = None)
      + detach()
      + begin(): RootTransaction
      + begin_nested(): NestedTransaction
      + begin_twophase(xid: Optional[Any] = None): TwoPhaseTransaction
      + commit()
      + rollback()
      + recover_twophase(): List[Any]
      + rollback_prepared(xid, recover: bool = False)
      + commit_prepared(xid, recover: bool = False)
      + in_transaction(): bool
      + in_nested_transaction(): bool
      + get_transaction(): Optional[RootTransaction]
      + get_nested_transaction(): Optional[NestedTransaction]
      + close()
      + scalar(statement: TypedReturnsRows[Tuple[_T]], parameters: Optional[_CoreSingleExecuteParams] = None): Optional[_T]
      + scalar(statement: Executable, parameters: Optional[_CoreSingleExecuteParams] = None): Any
      + scalar(statement: Executable, parameters: Optional[_CoreSingleExecuteParams] = None): Any
      + scalars(statement: TypedReturnsRows[Tuple[_T]], parameters: Optional[_CoreAnyExecuteParams] = None): ScalarResult[_T]
      + scalars(statement: Executable, parameters: Optional[_CoreAnyExecuteParams] = None): ScalarResult[Any]
      + scalars(statement: Executable, parameters: Optional[_CoreAnyExecuteParams] = None): ScalarResult[Any]
      + execute(statement: TypedReturnsRows[_T], parameters: Optional[_CoreAnyExecuteParams] = None): CursorResult[_T]
      + execute(statement: Executable, parameters: Optional[_CoreAnyExecuteParams] = None): CursorResult[Any]
      + execute(statement: Executable, parameters: Optional[_CoreAnyExecuteParams] = None): CursorResult[Any]
      + exec_driver_sql(statement: str, parameters: Optional[_DBAPIAnyExecuteParams] = None, execution_options: Optional[CoreExecuteOptionsParameter] = None): CursorResult[Any]
  }

  class ExceptionContextImpl {
      - __init__(exception: BaseException, sqlalchemy_exception: Optional[exc.StatementError], engine: Optional[Engine], dialect: Dialect, connection: Optional[Connection], cursor: Optional[DBAPICursor], statement: Optional[str], parameters: Optional[_DBAPIAnyExecuteParams], context: Optional[ExecutionContext], is_disconnect: bool, invalidate_pool_on_disconnect: bool, is_pre_ping: bool)
  }

  class Transaction {
      + is_active: bool
      + connection: Connection
  --
      - __init__(connection: Connection)
      + is_valid(): bool
      + close()
      + rollback()
      + commit()
  }

  class RootTransaction {
      - __init__(connection: Connection)
  }

  class NestedTransaction {
      - __init__(connection: Connection)
  }

  class TwoPhaseTransaction {
      + xid
  --
      - __init__(connection: Connection, xid)
      + prepare()
  }

  class Engine {
      + dispatch: dispatcher[ConnectionEventsTarget]
      + dialect: Dialect
      + pool: Pool
      + url: URL
      + hide_parameters: bool
      + echo = log.echo_property()
  --
      - __init__(pool: Pool, dialect: Dialect, url: URL, logging_name: Optional[str] = None, echo: Optional[_EchoFlagType] = None, query_cache_size: int = 500, execution_options: Optional[Mapping[str, Any]] = None, hide_parameters: bool = False)
      + engine(): Engine
      + clear_compiled_cache()
      + update_execution_options()
      + execution_options(): OptionEngine
      + execution_options(): OptionEngine
      + execution_options(): OptionEngine
      + get_execution_options(): _ExecuteOptions
      + name(): str
      + driver(): str
      + dispose(close: bool = True)
      + begin(): Iterator[Connection]
      + connect(): Connection
      + raw_connection(): PoolProxiedConnection
  }

  class OptionEngineMixin {
      + dispatch: dispatcher[ConnectionEventsTarget]
      + dialect: Dialect
      + pool: Pool
      + url: URL
      + hide_parameters: bool
      + echo: log.echo_property
  --
      - __init__(proxied: Engine, execution_options: CoreExecuteOptionsParameter)
      + update_execution_options()
  }

  class OptionEngine {
      + update_execution_options()
  }

  class ConnectionCharacteristic {
      + transactional: ClassVar[bool] = False
  --
      + reset_characteristic(dialect: Dialect, dbapi_conn: DBAPIConnection)
      + set_characteristic(dialect: Dialect, dbapi_conn: DBAPIConnection, value)
      + set_connection_characteristic(dialect: Dialect, conn: Connection, dbapi_conn: DBAPIConnection, value)
      + get_characteristic(dialect: Dialect, dbapi_conn: DBAPIConnection): Any
      + get_connection_characteristic(dialect: Dialect, conn: Connection, dbapi_conn: DBAPIConnection): Any
  }

  class IsolationLevelCharacteristic {
      + transactional: ClassVar[bool] = True
  --
      + reset_characteristic(dialect: Dialect, dbapi_conn: DBAPIConnection)
      + set_characteristic(dialect: Dialect, dbapi_conn: DBAPIConnection, value)
      + get_characteristic(dialect: Dialect, dbapi_conn: DBAPIConnection): Any
  }

  class LoggingTokenCharacteristic {
      + transactional: ClassVar[bool] = False
  --
      + reset_characteristic(dialect: Dialect, dbapi_conn: DBAPIConnection)
      + set_characteristic(dialect: Dialect, dbapi_conn: DBAPIConnection, value)
      + set_connection_characteristic(dialect: Dialect, conn: Connection, dbapi_conn: DBAPIConnection, value)
      + get_characteristic(dialect: Dialect, dbapi_conn: DBAPIConnection): Any
      + get_connection_characteristic(dialect: Dialect, conn: Connection, dbapi_conn: DBAPIConnection): Any
  }

  class CursorResultMetaData {
      + returns_rows: ClassVar[bool] = True
  --
      - __init__(parent: CursorResult[Any], cursor_description: _DBAPICursorDescription)
  }

  class ResultFetchStrategy {
      + alternate_cursor_description: Optional[_DBAPICursorDescription] = None
  --
      + soft_close(result: CursorResult[Any], dbapi_cursor: Optional[DBAPICursor])
      + hard_close(result: CursorResult[Any], dbapi_cursor: Optional[DBAPICursor])
      + yield_per(result: CursorResult[Any], dbapi_cursor: Optional[DBAPICursor], num: int)
      + fetchone(result: CursorResult[Any], dbapi_cursor: DBAPICursor, hard_close: bool = False): Any
      + fetchmany(result: CursorResult[Any], dbapi_cursor: DBAPICursor, size: Optional[int] = None): Any
      + fetchall(result: CursorResult[Any], dbapi_cursor: DBAPICursor): Any
      + handle_exception(result: CursorResult[Any], dbapi_cursor: Optional[DBAPICursor], err: BaseException): NoReturn
  }

  class NoCursorFetchStrategy {
      + soft_close(result, dbapi_cursor)
      + hard_close(result, dbapi_cursor)
      + fetchone(result, dbapi_cursor, hard_close = False)
      + fetchmany(result, dbapi_cursor, size = None)
      + fetchall(result, dbapi_cursor)
  }

  class NoCursorDQLFetchStrategy {
  }

  class NoCursorDMLFetchStrategy {
  }

  class CursorFetchStrategy {
      + soft_close(result: CursorResult[Any], dbapi_cursor: Optional[DBAPICursor])
      + hard_close(result: CursorResult[Any], dbapi_cursor: Optional[DBAPICursor])
      + handle_exception(result: CursorResult[Any], dbapi_cursor: Optional[DBAPICursor], err: BaseException): NoReturn
      + yield_per(result: CursorResult[Any], dbapi_cursor: Optional[DBAPICursor], num: int)
      + fetchone(result: CursorResult[Any], dbapi_cursor: DBAPICursor, hard_close: bool = False): Any
      + fetchmany(result: CursorResult[Any], dbapi_cursor: DBAPICursor, size: Optional[int] = None): Any
      + fetchall(result: CursorResult[Any], dbapi_cursor: DBAPICursor): Any
  }

  class BufferedRowCursorFetchStrategy {
      - __init__(dbapi_cursor, execution_options, growth_factor = 5, initial_buffer = None)
      + {classmethod} create(cls, result)
      + yield_per(result, dbapi_cursor, num)
      + soft_close(result, dbapi_cursor)
      + hard_close(result, dbapi_cursor)
      + fetchone(result, dbapi_cursor, hard_close = False)
      + fetchmany(result, dbapi_cursor, size = None)
      + fetchall(result, dbapi_cursor)
  }

  class FullyBufferedCursorFetchStrategy {
      - __init__(dbapi_cursor, alternate_description = None, initial_buffer = None)
      + yield_per(result, dbapi_cursor, num)
      + soft_close(result, dbapi_cursor)
      + hard_close(result, dbapi_cursor)
      + fetchone(result, dbapi_cursor, hard_close = False)
      + fetchmany(result, dbapi_cursor, size = None)
      + fetchall(result, dbapi_cursor)
  }

  class CursorResult {
      + closed: bool = False
      + context: DefaultExecutionContext
      + dialect: Dialect
      + cursor_strategy: ResultFetchStrategy
      + connection: Connection
  --
      - __init__(context: DefaultExecutionContext, cursor_strategy: ResultFetchStrategy, cursor_description: Optional[_DBAPICursorDescription])
      + inserted_primary_key_rows()
      + inserted_primary_key()
      + last_updated_params()
      + last_inserted_params()
      + returned_defaults_rows()
      + splice_horizontally(other)
      + splice_vertically(other)
      + returned_defaults()
      + lastrow_has_defaults()
      + postfetch_cols()
      + prefetch_cols()
      + supports_sane_rowcount()
      + supports_sane_multi_rowcount()
      + rowcount(): int
      + lastrowid()
      + returns_rows()
      + is_insert()
      + merge(): MergedResult[Any]
      + close(): Any
      + yield_per(num: int): Self
  }

  class DefaultDialect {
      + statement_compiler = compiler.SQLCompiler
      + ddl_compiler = compiler.DDLCompiler
      + type_compiler_cls = compiler.GenericTypeCompiler
      + preparer = compiler.IdentifierPreparer
      + supports_alter = True
      + supports_comments = False
      + supports_constraint_comments = False
      + inline_comments = False
      + supports_statement_cache = True
      + div_is_floordiv = True
      + bind_typing = interfaces.BindTyping.NONE
      + include_set_input_sizes: Optional[Set[Any]] = None
      + exclude_set_input_sizes: Optional[Set[Any]] = None
      + default_sequence_base = 1
      + execute_sequence_format = tuple
      + supports_schemas = True
      + supports_views = True
      + supports_sequences = False
      + sequences_optional = False
      + preexecute_autoincrement_sequences = False
      + supports_identity_columns = False
      + postfetch_lastrowid = True
      + favor_returning_over_lastrowid = False
      + insert_null_pk_still_autoincrements = False
      + update_returning = False
      + delete_returning = False
      + update_returning_multifrom = False
      + delete_returning_multifrom = False
      + insert_returning = False
      + cte_follows_insert = False
      + supports_native_enum = False
      + supports_native_boolean = False
      + supports_native_uuid = False
      + returns_native_bytes = False
      + non_native_boolean_check_constraint = True
      + supports_simple_order_by_label = True
      + tuple_in_values = False
      + connection_characteristics = util.immutabledict({'isolation_level': characteristics.IsolationLevelCharacteristic(), 'logging_token': characteristics.LoggingTokenCharacteristic()})
      + engine_config_types: Mapping[str, Any] = util.immutabledict({'pool_timeout': util.asint, 'echo': util.bool_or_str('debug'), 'echo_pool': util.bool_or_str('debug'), 'pool_recycle': util.asint, 'pool_size': util.asint, 'max_overflow': util.asint, 'future': util.asbool})
      + supports_native_decimal = False
      + name = 'default'
      + max_identifier_length = 9999
      + isolation_level: Optional[str] = None
      + max_index_name_length: Optional[int] = None
      + max_constraint_name_length: Optional[int] = None
      + supports_sane_rowcount = True
      + supports_sane_multi_rowcount = True
      + colspecs: MutableMapping[Type[TypeEngine[Any]], Type[TypeEngine[Any]]] = {}
      + default_paramstyle = 'named'
      + supports_default_values = False
      + supports_default_metavalue = False
      + default_metavalue_token = 'DEFAULT'
      + supports_empty_insert = True
      + supports_multivalues_insert = False
      + use_insertmanyvalues: bool = False
      + use_insertmanyvalues_wo_returning: bool = False
      + insertmanyvalues_implicit_sentinel: InsertmanyvaluesSentinelOpts = InsertmanyvaluesSentinelOpts.NOT_SUPPORTED
      + insertmanyvalues_page_size: int = 1000
      + insertmanyvalues_max_parameters = 32700
      + supports_is_distinct_from = True
      + supports_server_side_cursors = False
      + server_side_cursors = False
      + supports_for_update_of = False
      + server_version_info = None
      + default_schema_name: Optional[str] = None
      + requires_name_normalize = False
      + is_async = False
      + has_terminate = False
      + update_executemany_returning = False
      + delete_executemany_returning = False
  --
      - __init__(paramstyle: Optional[_ParamStyle] = None, isolation_level: Optional[IsolationLevel] = None, dbapi: Optional[ModuleType] = None, implicit_returning: Literal[True] = True, supports_native_boolean: Optional[bool] = None, max_identifier_length: Optional[int] = None, label_length: Optional[int] = None, insertmanyvalues_page_size: Union[_NoArg, int] = _NoArg.NO_ARG, use_insertmanyvalues: Optional[bool] = None, compiler_linting: Linting = int(compiler.NO_LINTING), server_side_cursors: bool = False)
      + full_returning()
      + insert_executemany_returning()
      + insert_executemany_returning_sort_by_parameter_order()
      + loaded_dbapi(): ModuleType
      + dialect_description()
      + supports_sane_rowcount_returning()
      + {classmethod} get_pool_class(cls, url: URL): Type[Pool]
      + get_dialect_pool_class(url: URL): Type[Pool]
      + {classmethod} load_provisioning(cls)
      + initialize(connection)
      + on_connect()
      + get_default_isolation_level(dbapi_conn)
      + type_descriptor(typeobj)
      + has_index(connection, table_name, index_name, schema = None)
      + has_schema(connection: Connection, schema_name: str): bool
      + validate_identifier(ident)
      + connect()
      + create_connect_args(url)
      + set_engine_execution_options(engine: Engine, opts: Mapping[str, Any])
      + set_connection_execution_options(connection: Connection, opts: Mapping[str, Any])
      + do_begin(dbapi_connection)
      + do_rollback(dbapi_connection)
      + do_commit(dbapi_connection)
      + do_terminate(dbapi_connection)
      + do_close(dbapi_connection)
      + do_ping(dbapi_connection: DBAPIConnection): bool
      + create_xid()
      + do_savepoint(connection, name)
      + do_rollback_to_savepoint(connection, name)
      + do_release_savepoint(connection, name)
      + do_executemany(cursor, statement, parameters, context = None)
      + do_execute(cursor, statement, parameters, context = None)
      + do_execute_no_params(cursor, statement, context = None)
      + is_disconnect(e, connection, cursor)
      + reset_isolation_level(dbapi_conn)
      + normalize_name(name)
      + denormalize_name(name)
      + get_driver_connection(connection)
      + get_multi_table_options(connection)
      + get_multi_columns(connection)
      + get_multi_pk_constraint(connection)
      + get_multi_foreign_keys(connection)
      + get_multi_indexes(connection)
      + get_multi_unique_constraints(connection)
      + get_multi_check_constraints(connection)
      + get_multi_table_comment(connection)
  }

  class StrCompileDialect {
      + statement_compiler = compiler.StrSQLCompiler
      + ddl_compiler = compiler.DDLCompiler
      + type_compiler_cls = compiler.StrSQLTypeCompiler
      + preparer = compiler.IdentifierPreparer
      + insert_returning = True
      + update_returning = True
      + delete_returning = True
      + supports_statement_cache = True
      + supports_identity_columns = True
      + supports_sequences = True
      + sequences_optional = True
      + preexecute_autoincrement_sequences = False
      + supports_native_boolean = True
      + supports_multivalues_insert = True
      + supports_simple_order_by_label = True
  }

  class DefaultExecutionContext {
      + isinsert = False
      + isupdate = False
      + isdelete = False
      + is_crud = False
      + is_text = False
      + isddl = False
      + execute_style: ExecuteStyle = ExecuteStyle.EXECUTE
      + compiled: Optional[Compiled] = None
      + result_column_struct: Optional[Tuple[List[ResultColumnsEntry], bool, bool, bool, bool]] = None
      + returned_default_rows: Optional[Sequence[Row[Any]]] = None
      + execution_options: _ExecuteOptions = util.EMPTY_DICT
      + cursor_fetch_strategy = _cursor._DEFAULT_FETCH
      + invoked_statement: Optional[Executable] = None
      + cache_hit = NO_CACHE_KEY
      + root_connection: Connection
      + dialect: Dialect
      + unicode_statement: str
      + cursor: DBAPICursor
      + compiled_parameters: List[_MutableCoreSingleExecuteParams]
      + parameters: _DBAPIMultiExecuteParams
      + extracted_parameters: Optional[Sequence[BindParameter[Any]]]
      + current_parameters: Optional[_CoreSingleExecuteParams] = None
  --
      + executemany()
      + identifier_preparer()
      + engine()
      + postfetch_cols(): Optional[Sequence[Column[Any]]]
      + prefetch_cols(): Optional[Sequence[Column[Any]]]
      + no_parameters()
      + connection()
      + create_cursor()
      + fetchall_for_returning(cursor)
      + create_default_cursor()
      + create_server_side_cursor()
      + pre_exec()
      + get_out_parameter_values(names)
      + post_exec()
      + get_result_processor(type_, colname, coltype)
      + get_lastrowid()
      + handle_dbapi_exception(e)
      + rowcount(): int
      + supports_sane_rowcount()
      + supports_sane_multi_rowcount()
      + inserted_primary_key_rows()
      + lastrow_has_defaults()
      + get_current_parameters(isolate_multiinsert_groups = True)
      + get_insert_default(column)
      + get_update_default(column)
  }

  class ConnectionEvents {
      + before_execute(conn: Connection, clauseelement: Executable, multiparams: _CoreMultiExecuteParams, params: _CoreSingleExecuteParams, execution_options: _ExecuteOptions): Optional[Tuple[Executable, _CoreMultiExecuteParams, _CoreSingleExecuteParams]]
      + after_execute(conn: Connection, clauseelement: Executable, multiparams: _CoreMultiExecuteParams, params: _CoreSingleExecuteParams, execution_options: _ExecuteOptions, result: Result[Any])
      + before_cursor_execute(conn: Connection, cursor: DBAPICursor, statement: str, parameters: _DBAPIAnyExecuteParams, context: Optional[ExecutionContext], executemany: bool): Optional[Tuple[str, _DBAPIAnyExecuteParams]]
      + after_cursor_execute(conn: Connection, cursor: DBAPICursor, statement: str, parameters: _DBAPIAnyExecuteParams, context: Optional[ExecutionContext], executemany: bool)
      + engine_connect(conn: Connection)
      + set_connection_execution_options(conn: Connection, opts: Dict[str, Any])
      + set_engine_execution_options(engine: Engine, opts: Dict[str, Any])
      + engine_disposed(engine: Engine)
      + begin(conn: Connection)
      + rollback(conn: Connection)
      + commit(conn: Connection)
      + savepoint(conn: Connection, name: str)
      + rollback_savepoint(conn: Connection, name: str, context: None)
      + release_savepoint(conn: Connection, name: str, context: None)
      + begin_twophase(conn: Connection, xid)
      + prepare_twophase(conn: Connection, xid)
      + rollback_twophase(conn: Connection, xid, is_prepared: bool)
      + commit_twophase(conn: Connection, xid, is_prepared: bool)
  }

  class DialectEvents {
      + handle_error(exception_context: ExceptionContext): Optional[BaseException]
      + do_connect(dialect: Dialect, conn_rec: ConnectionPoolEntry, cargs: Tuple[Any, ...], cparams: Dict[str, Any]): Optional[DBAPIConnection]
      + do_executemany(cursor: DBAPICursor, statement: str, parameters: _DBAPIMultiExecuteParams, context: ExecutionContext): Optional[Literal[True]]
      + do_execute_no_params(cursor: DBAPICursor, statement: str, context: ExecutionContext): Optional[Literal[True]]
      + do_execute(cursor: DBAPICursor, statement: str, parameters: _DBAPISingleExecuteParams, context: ExecutionContext): Optional[Literal[True]]
      + do_setinputsizes(inputsizes: Dict[BindParameter[Any], Any], cursor: DBAPICursor, statement: str, parameters: _DBAPIAnyExecuteParams, context: ExecutionContext)
  }

  class CacheStats {
      + CACHE_HIT = 0
      + CACHE_MISS = 1
      + CACHING_DISABLED = 2
      + NO_CACHE_KEY = 3
      + NO_DIALECT_SUPPORT = 4
  }

  class ExecuteStyle {
      + EXECUTE = 0
      + EXECUTEMANY = 1
      + INSERTMANYVALUES = 2
  }

  class DBAPIConnection {
      + autocommit: bool
  --
      + close()
      + commit()
      + cursor(): DBAPICursor
      + rollback()
  }

  class DBAPIType {
  }

  class DBAPICursor {
      + arraysize: int
      + lastrowid: int
  --
      + description(): _DBAPICursorDescription
      + rowcount(): int
      + close()
      + execute(operation, parameters: Optional[_DBAPISingleExecuteParams] = None): Any
      + executemany(operation, parameters: _DBAPIMultiExecuteParams): Any
      + fetchone(): Optional[Any]
      + fetchmany(size: int = ...): Sequence[Any]
      + fetchall(): Sequence[Any]
      + setinputsizes(sizes: Sequence[Any])
      + setoutputsize(size, column)
      + callproc(procname: str, parameters: Sequence[Any] = ...): Any
      + nextset(): Optional[bool]
  }

  class ReflectedIdentity {
      + always: bool
      + on_null: bool
      + start: int
      + increment: int
      + minvalue: int
      + maxvalue: int
      + nominvalue: bool
      + nomaxvalue: bool
      + cycle: bool
      + cache: Optional[int]
      + order: bool
  }

  class ReflectedComputed {
      + sqltext: str
      + persisted: NotRequired[bool]
  }

  class ReflectedColumn {
      + name: str
      + type: TypeEngine[Any]
      + nullable: bool
      + default: Optional[str]
      + autoincrement: NotRequired[bool]
      + comment: NotRequired[Optional[str]]
      + computed: NotRequired[ReflectedComputed]
      + identity: NotRequired[ReflectedIdentity]
      + dialect_options: NotRequired[Dict[str, Any]]
  }

  class ReflectedConstraint {
      + name: Optional[str]
      + comment: NotRequired[Optional[str]]
  }

  class ReflectedCheckConstraint {
      + sqltext: str
      + dialect_options: NotRequired[Dict[str, Any]]
  }

  class ReflectedUniqueConstraint {
      + column_names: List[str]
      + duplicates_index: NotRequired[Optional[str]]
      + dialect_options: NotRequired[Dict[str, Any]]
  }

  class ReflectedPrimaryKeyConstraint {
      + constrained_columns: List[str]
      + dialect_options: NotRequired[Dict[str, Any]]
  }

  class ReflectedForeignKeyConstraint {
      + constrained_columns: List[str]
      + referred_schema: Optional[str]
      + referred_table: str
      + referred_columns: List[str]
      + options: NotRequired[Dict[str, Any]]
  }

  class ReflectedIndex {
      + name: Optional[str]
      + column_names: List[Optional[str]]
      + expressions: NotRequired[List[str]]
      + unique: bool
      + duplicates_constraint: NotRequired[Optional[str]]
      + include_columns: NotRequired[List[str]]
      + column_sorting: NotRequired[Dict[str, Tuple[str]]]
      + dialect_options: NotRequired[Dict[str, Any]]
  }

  class ReflectedTableComment {
      + text: Optional[str]
  }

  class BindTyping {
      + NONE = 1
      + SETINPUTSIZES = 2
      + RENDER_CASTS = 3
  }

  class Dialect {
      + CACHE_HIT = CacheStats.CACHE_HIT
      + CACHE_MISS = CacheStats.CACHE_MISS
      + CACHING_DISABLED = CacheStats.CACHING_DISABLED
      + NO_CACHE_KEY = CacheStats.NO_CACHE_KEY
      + NO_DIALECT_SUPPORT = CacheStats.NO_DIALECT_SUPPORT
      + dispatch: dispatcher[Dialect]
      + name: str
      + driver: str
      + dialect_description: str
      + dbapi: Optional[ModuleType]
      + positional: bool
      + paramstyle: str
      + compiler_linting: Linting
      + statement_compiler: Type[SQLCompiler]
      + ddl_compiler: Type[DDLCompiler]
      + type_compiler_cls: ClassVar[Type[TypeCompiler]]
      + type_compiler_instance: TypeCompiler
      + type_compiler
      + preparer: Type[IdentifierPreparer]
      + identifier_preparer: IdentifierPreparer
      + server_version_info: Optional[Tuple[Any, ...]]
      + default_schema_name: Optional[str]
      + default_isolation_level: Optional[IsolationLevel]
      + execution_ctx_cls: Type[ExecutionContext]
      + execute_sequence_format: Union[Type[Tuple[Any, ...]], Type[Tuple[List[Any]]]]
      + supports_alter: bool
      + max_identifier_length: int
      + supports_server_side_cursors: bool
      + server_side_cursors: bool
      + supports_sane_rowcount: bool
      + supports_sane_multi_rowcount: bool
      + supports_empty_insert: bool
      + supports_default_values: bool
      + supports_default_metavalue: bool
      + default_metavalue_token: str = 'DEFAULT'
      + supports_multivalues_insert: bool
      + insert_executemany_returning: bool
      + insert_executemany_returning_sort_by_parameter_order: bool
      + update_executemany_returning: bool
      + delete_executemany_returning: bool
      + use_insertmanyvalues: bool
      + use_insertmanyvalues_wo_returning: bool
      + insertmanyvalues_implicit_sentinel: InsertmanyvaluesSentinelOpts
      + insertmanyvalues_page_size: int
      + insertmanyvalues_max_parameters: int
      + preexecute_autoincrement_sequences: bool
      + insert_returning: bool
      + update_returning: bool
      + update_returning_multifrom: bool
      + delete_returning: bool
      + delete_returning_multifrom: bool
      + favor_returning_over_lastrowid: bool
      + supports_identity_columns: bool
      + cte_follows_insert: bool
      + colspecs: MutableMapping[Type[TypeEngine[Any]], Type[TypeEngine[Any]]]
      + supports_sequences: bool
      + sequences_optional: bool
      + default_sequence_base: int
      + supports_native_enum: bool
      + supports_native_boolean: bool
      + supports_native_decimal: bool
      + supports_native_uuid: bool
      + returns_native_bytes: bool
      + construct_arguments: Optional[List[Tuple[Type[Union[SchemaItem, ClauseElement]], Mapping[str, Any]]]] = None
      + reflection_options: Sequence[str] = ()
      + dbapi_exception_translation_map: Mapping[str, str] = util.EMPTY_DICT
      + supports_comments: bool
      + inline_comments: bool
      + supports_constraint_comments: bool
      + supports_statement_cache: bool = True
      + bind_typing = BindTyping.NONE
      + is_async: bool
      + has_terminate: bool
      + engine_config_types: Mapping[str, Any]
      + label_length: Optional[int]
      + include_set_input_sizes: Optional[Set[Any]]
      + exclude_set_input_sizes: Optional[Set[Any]]
      + supports_simple_order_by_label: bool
      + div_is_floordiv: bool
      + tuple_in_values: bool
  --
      + loaded_dbapi(): ModuleType
      + create_connect_args(url: URL): ConnectArgsType
      + {classmethod} import_dbapi(cls): ModuleType
      + type_descriptor(typeobj: TypeEngine[_T]): TypeEngine[_T]
      + initialize(connection: Connection)
      + get_columns(connection: Connection, table_name: str, schema: Optional[str] = None): List[ReflectedColumn]
      + get_multi_columns(connection: Connection): Iterable[Tuple[TableKey, List[ReflectedColumn]]]
      + get_pk_constraint(connection: Connection, table_name: str, schema: Optional[str] = None): ReflectedPrimaryKeyConstraint
      + get_multi_pk_constraint(connection: Connection): Iterable[Tuple[TableKey, ReflectedPrimaryKeyConstraint]]
      + get_foreign_keys(connection: Connection, table_name: str, schema: Optional[str] = None): List[ReflectedForeignKeyConstraint]
      + get_multi_foreign_keys(connection: Connection): Iterable[Tuple[TableKey, List[ReflectedForeignKeyConstraint]]]
      + get_table_names(connection: Connection, schema: Optional[str] = None): List[str]
      + get_temp_table_names(connection: Connection, schema: Optional[str] = None): List[str]
      + get_view_names(connection: Connection, schema: Optional[str] = None): List[str]
      + get_materialized_view_names(connection: Connection, schema: Optional[str] = None): List[str]
      + get_sequence_names(connection: Connection, schema: Optional[str] = None): List[str]
      + get_temp_view_names(connection: Connection, schema: Optional[str] = None): List[str]
      + get_schema_names(connection: Connection): List[str]
      + get_view_definition(connection: Connection, view_name: str, schema: Optional[str] = None): str
      + get_indexes(connection: Connection, table_name: str, schema: Optional[str] = None): List[ReflectedIndex]
      + get_multi_indexes(connection: Connection): Iterable[Tuple[TableKey, List[ReflectedIndex]]]
      + get_unique_constraints(connection: Connection, table_name: str, schema: Optional[str] = None): List[ReflectedUniqueConstraint]
      + get_multi_unique_constraints(connection: Connection): Iterable[Tuple[TableKey, List[ReflectedUniqueConstraint]]]
      + get_check_constraints(connection: Connection, table_name: str, schema: Optional[str] = None): List[ReflectedCheckConstraint]
      + get_multi_check_constraints(connection: Connection): Iterable[Tuple[TableKey, List[ReflectedCheckConstraint]]]
      + get_table_options(connection: Connection, table_name: str, schema: Optional[str] = None): Dict[str, Any]
      + get_multi_table_options(connection: Connection): Iterable[Tuple[TableKey, Dict[str, Any]]]
      + get_table_comment(connection: Connection, table_name: str, schema: Optional[str] = None): ReflectedTableComment
      + get_multi_table_comment(connection: Connection): Iterable[Tuple[TableKey, ReflectedTableComment]]
      + normalize_name(name: str): str
      + denormalize_name(name: str): str
      + has_table(connection: Connection, table_name: str, schema: Optional[str] = None): bool
      + has_index(connection: Connection, table_name: str, index_name: str, schema: Optional[str] = None): bool
      + has_sequence(connection: Connection, sequence_name: str, schema: Optional[str] = None): bool
      + has_schema(connection: Connection, schema_name: str): bool
      + do_begin(dbapi_connection: PoolProxiedConnection)
      + do_rollback(dbapi_connection: PoolProxiedConnection)
      + do_commit(dbapi_connection: PoolProxiedConnection)
      + do_terminate(dbapi_connection: DBAPIConnection)
      + do_close(dbapi_connection: DBAPIConnection)
      + do_ping(dbapi_connection: DBAPIConnection): bool
      + do_set_input_sizes(cursor: DBAPICursor, list_of_tuples: _GenericSetInputSizesType, context: ExecutionContext): Any
      + create_xid(): Any
      + do_savepoint(connection: Connection, name: str)
      + do_rollback_to_savepoint(connection: Connection, name: str)
      + do_release_savepoint(connection: Connection, name: str)
      + do_begin_twophase(connection: Connection, xid)
      + do_prepare_twophase(connection: Connection, xid)
      + do_rollback_twophase(connection: Connection, xid, is_prepared: bool = True, recover: bool = False)
      + do_commit_twophase(connection: Connection, xid, is_prepared: bool = True, recover: bool = False)
      + do_recover_twophase(connection: Connection): List[Any]
      + do_executemany(cursor: DBAPICursor, statement: str, parameters: _DBAPIMultiExecuteParams, context: Optional[ExecutionContext] = None)
      + do_execute(cursor: DBAPICursor, statement: str, parameters: Optional[_DBAPISingleExecuteParams], context: Optional[ExecutionContext] = None)
      + do_execute_no_params(cursor: DBAPICursor, statement: str, context: Optional[ExecutionContext] = None)
      + is_disconnect(e: Exception, connection: Optional[Union[PoolProxiedConnection, DBAPIConnection]], cursor: Optional[DBAPICursor]): bool
      + connect(): DBAPIConnection
      + on_connect_url(url: URL): Optional[Callable[[Any], Any]]
      + on_connect(): Optional[Callable[[Any], Any]]
      + reset_isolation_level(dbapi_connection: DBAPIConnection)
      + set_isolation_level(dbapi_connection: DBAPIConnection, level: IsolationLevel)
      + get_isolation_level(dbapi_connection: DBAPIConnection): IsolationLevel
      + get_default_isolation_level(dbapi_conn: DBAPIConnection): IsolationLevel
      + get_isolation_level_values(dbapi_conn: DBAPIConnection): List[IsolationLevel]
      + {classmethod} get_dialect_cls(cls, url: URL): Type[Dialect]
      + {classmethod} get_async_dialect_cls(cls, url: URL): Type[Dialect]
      + {classmethod} load_provisioning(cls)
      + {classmethod} engine_created(cls, engine: Engine)
      + get_driver_connection(connection: DBAPIConnection): Any
      + set_engine_execution_options(engine: Engine, opts: CoreExecuteOptionsParameter)
      + set_connection_execution_options(connection: Connection, opts: CoreExecuteOptionsParameter)
      + get_dialect_pool_class(url: URL): Type[Pool]
  }

  class CreateEnginePlugin {
      - __init__(url: URL, kwargs: Dict[str, Any])
      + update_url(url: URL): URL
      + handle_dialect_kwargs(dialect_cls: Type[Dialect], dialect_args: Dict[str, Any])
      + handle_pool_kwargs(pool_cls: Type[Pool], pool_args: Dict[str, Any])
      + engine_created(engine: Engine)
  }

  class ExecutionContext {
      + engine: Engine
      + connection: Connection
      + root_connection: Connection
      + dialect: Dialect
      + cursor: DBAPICursor
      + compiled: Optional[Compiled]
      + statement: str
      + invoked_statement: Optional[Executable]
      + parameters: _AnyMultiExecuteParams
      + no_parameters: bool
      + isinsert: bool
      + isupdate: bool
      + execute_style: ExecuteStyle
      + executemany: bool
      + prefetch_cols: util.generic_fn_descriptor[Optional[Sequence[Column[Any]]]]
      + postfetch_cols: util.generic_fn_descriptor[Optional[Sequence[Column[Any]]]]
      + execution_options: _ExecuteOptions
  --
      + fire_sequence(seq: Sequence_SchemaItem, type_: Integer): int
      + create_cursor(): DBAPICursor
      + pre_exec()
      + get_out_parameter_values(out_param_names: Sequence[str]): Sequence[Any]
      + post_exec()
      + handle_dbapi_exception(e: BaseException)
      + lastrow_has_defaults(): bool
      + get_rowcount(): Optional[int]
      + fetchall_for_returning(cursor: DBAPICursor): Sequence[Any]
  }

  class ConnectionEventsTarget {
      + dispatch: dispatcher[ConnectionEventsTarget]
  }

  class ExceptionContext {
      + dialect: Dialect
      + connection: Optional[Connection]
      + engine: Optional[Engine]
      + cursor: Optional[DBAPICursor]
      + statement: Optional[str]
      + parameters: Optional[_DBAPIAnyExecuteParams]
      + original_exception: BaseException
      + sqlalchemy_exception: Optional[StatementError]
      + chained_exception: Optional[BaseException]
      + execution_context: Optional[ExecutionContext]
      + is_disconnect: bool
      + invalidate_pool_on_disconnect: bool
      + is_pre_ping: bool
  }

  class AdaptedConnection {
      + driver_connection(): Any
      + run_async(fn: Callable[[Any], Awaitable[_T]]): _T
  }

  class MockConnection {
      + engine: Engine = cast(Any, property(lambda s: s))
      + dialect: Dialect = cast(Any, property(attrgetter('_dialect')))
      + name: str = cast(Any, property(lambda s: s._dialect.name))
  --
      - __init__(dialect: Dialect, execute: Callable[..., Any])
      + connect(): MockConnection
      + schema_for_object(obj: HasSchemaAttr): Optional[str]
      + execution_options(): MockConnection
      + execute(obj: Executable, parameters: Optional[_CoreAnyExecuteParams] = None, execution_options: Optional[CoreExecuteOptionsParameter] = None): Any
  }

  class ObjectKind {
      + TABLE = auto()
      + VIEW = auto()
      + MATERIALIZED_VIEW = auto()
      + ANY_VIEW = VIEW | MATERIALIZED_VIEW
      + ANY = TABLE | VIEW | MATERIALIZED_VIEW
  }

  class ObjectScope {
      + DEFAULT = auto()
      + TEMPORARY = auto()
      + ANY = DEFAULT | TEMPORARY
  }

  class Inspector {
      + bind: Union[Engine, Connection]
      + engine: Engine
      + dialect: Dialect
      + info_cache: Dict[Any, Any]
  --
      - __init__(bind: Union[Engine, Connection])
      + clear_cache()
      + {classmethod} from_engine(cls, bind: Engine): Inspector
      + default_schema_name(): Optional[str]
      + get_schema_names(): List[str]
      + get_table_names(schema: Optional[str] = None): List[str]
      + has_table(table_name: str, schema: Optional[str] = None): bool
      + has_sequence(sequence_name: str, schema: Optional[str] = None): bool
      + has_index(table_name: str, index_name: str, schema: Optional[str] = None): bool
      + has_schema(schema_name: str): bool
      + get_sorted_table_and_fkc_names(schema: Optional[str] = None): List[Tuple[Optional[str], List[Tuple[str, Optional[str]]]]]
      + sort_tables_on_foreign_key_dependency(consider_schemas: Collection[Optional[str]] = (None,)): List[Tuple[Optional[Tuple[Optional[str], str]], List[Tuple[Tuple[Optional[str], str], Optional[str]]]]]
      + get_temp_table_names(): List[str]
      + get_temp_view_names(): List[str]
      + get_table_options(table_name: str, schema: Optional[str] = None): Dict[str, Any]
      + get_multi_table_options(schema: Optional[str] = None, filter_names: Optional[Sequence[str]] = None, kind: ObjectKind = ObjectKind.TABLE, scope: ObjectScope = ObjectScope.DEFAULT): Dict[TableKey, Dict[str, Any]]
      + get_view_names(schema: Optional[str] = None): List[str]
      + get_materialized_view_names(schema: Optional[str] = None): List[str]
      + get_sequence_names(schema: Optional[str] = None): List[str]
      + get_view_definition(view_name: str, schema: Optional[str] = None): str
      + get_columns(table_name: str, schema: Optional[str] = None): List[ReflectedColumn]
      + get_multi_columns(schema: Optional[str] = None, filter_names: Optional[Sequence[str]] = None, kind: ObjectKind = ObjectKind.TABLE, scope: ObjectScope = ObjectScope.DEFAULT): Dict[TableKey, List[ReflectedColumn]]
      + get_pk_constraint(table_name: str, schema: Optional[str] = None): ReflectedPrimaryKeyConstraint
      + get_multi_pk_constraint(schema: Optional[str] = None, filter_names: Optional[Sequence[str]] = None, kind: ObjectKind = ObjectKind.TABLE, scope: ObjectScope = ObjectScope.DEFAULT): Dict[TableKey, ReflectedPrimaryKeyConstraint]
      + get_foreign_keys(table_name: str, schema: Optional[str] = None): List[ReflectedForeignKeyConstraint]
      + get_multi_foreign_keys(schema: Optional[str] = None, filter_names: Optional[Sequence[str]] = None, kind: ObjectKind = ObjectKind.TABLE, scope: ObjectScope = ObjectScope.DEFAULT): Dict[TableKey, List[ReflectedForeignKeyConstraint]]
      + get_indexes(table_name: str, schema: Optional[str] = None): List[ReflectedIndex]
      + get_multi_indexes(schema: Optional[str] = None, filter_names: Optional[Sequence[str]] = None, kind: ObjectKind = ObjectKind.TABLE, scope: ObjectScope = ObjectScope.DEFAULT): Dict[TableKey, List[ReflectedIndex]]
      + get_unique_constraints(table_name: str, schema: Optional[str] = None): List[ReflectedUniqueConstraint]
      + get_multi_unique_constraints(schema: Optional[str] = None, filter_names: Optional[Sequence[str]] = None, kind: ObjectKind = ObjectKind.TABLE, scope: ObjectScope = ObjectScope.DEFAULT): Dict[TableKey, List[ReflectedUniqueConstraint]]
      + get_table_comment(table_name: str, schema: Optional[str] = None): ReflectedTableComment
      + get_multi_table_comment(schema: Optional[str] = None, filter_names: Optional[Sequence[str]] = None, kind: ObjectKind = ObjectKind.TABLE, scope: ObjectScope = ObjectScope.DEFAULT): Dict[TableKey, ReflectedTableComment]
      + get_check_constraints(table_name: str, schema: Optional[str] = None): List[ReflectedCheckConstraint]
      + get_multi_check_constraints(schema: Optional[str] = None, filter_names: Optional[Sequence[str]] = None, kind: ObjectKind = ObjectKind.TABLE, scope: ObjectScope = ObjectScope.DEFAULT): Dict[TableKey, List[ReflectedCheckConstraint]]
      + reflect_table(table: sa_schema.Table, include_columns: Optional[Collection[str]], exclude_columns: Collection[str] = (), resolve_fks: bool = True, _extend_on: Optional[Set[sa_schema.Table]] = None, _reflect_info: Optional[_ReflectionInfo] = None)
  }

  class ReflectionDefaults {
      + {classmethod} columns(cls): List[ReflectedColumn]
      + {classmethod} pk_constraint(cls): ReflectedPrimaryKeyConstraint
      + {classmethod} foreign_keys(cls): List[ReflectedForeignKeyConstraint]
      + {classmethod} indexes(cls): List[ReflectedIndex]
      + {classmethod} unique_constraints(cls): List[ReflectedUniqueConstraint]
      + {classmethod} check_constraints(cls): List[ReflectedCheckConstraint]
      + {classmethod} table_options(cls): Dict[str, Any]
      + {classmethod} table_comment(cls): ReflectedTableComment
  }

  class ResultMetaData {
      + keys(): RMKeyView
  }

  class RMKeyView {
      - __init__(parent: ResultMetaData)
  }

  class SimpleResultMetaData {
      - __init__(keys: Sequence[str], extra: Optional[Sequence[Any]] = None, _processors: Optional[_ProcessorsType] = None, _tuplefilter: Optional[_TupleGetterType] = None, _translated_indexes: Optional[Sequence[int]] = None, _unique_filters: Optional[Sequence[Callable[[Any], Any]]] = None)
  }

  class ResultInternal {
  }

  class Result {
      - __init__(cursor_metadata: ResultMetaData)
      + close()
      + closed(): bool
      + yield_per(num: int): Self
      + unique(strategy: Optional[_UniqueFilterType] = None): Self
      + columns(): Self
      + scalars(): ScalarResult[_T]
      + scalars(index: Literal[0]): ScalarResult[_T]
      + scalars(index: _KeyIndexType = 0): ScalarResult[Any]
      + scalars(index: _KeyIndexType = 0): ScalarResult[Any]
      + mappings(): MappingResult
      + t(): TupleResult[_TP]
      + tuples(): TupleResult[_TP]
      + partitions(size: Optional[int] = None): Iterator[Sequence[Row[_TP]]]
      + fetchall(): Sequence[Row[_TP]]
      + fetchone(): Optional[Row[_TP]]
      + fetchmany(size: Optional[int] = None): Sequence[Row[_TP]]
      + all(): Sequence[Row[_TP]]
      + first(): Optional[Row[_TP]]
      + one_or_none(): Optional[Row[_TP]]
      + scalar_one(): _T
      + scalar_one(): Any
      + scalar_one(): Any
      + scalar_one_or_none(): Optional[_T]
      + scalar_one_or_none(): Optional[Any]
      + scalar_one_or_none(): Optional[Any]
      + one(): Row[_TP]
      + scalar(): Optional[_T]
      + scalar(): Any
      + scalar(): Any
      + freeze(): FrozenResult[_TP]
      + merge(): MergedResult[_TP]
  }

  class FilterResult {
      + yield_per(num: int): Self
      + closed(): bool
      + close()
  }

  class ScalarResult {
      - __init__(real_result: Result[Any], index: _KeyIndexType)
      + unique(strategy: Optional[_UniqueFilterType] = None): Self
      + partitions(size: Optional[int] = None): Iterator[Sequence[_R]]
      + fetchall(): Sequence[_R]
      + fetchmany(size: Optional[int] = None): Sequence[_R]
      + all(): Sequence[_R]
      + first(): Optional[_R]
      + one_or_none(): Optional[_R]
      + one(): _R
  }

  class TupleResult {
  }

  class MappingResult {
      - __init__(result: Result[Any])
      + unique(strategy: Optional[_UniqueFilterType] = None): Self
      + columns(): Self
      + partitions(size: Optional[int] = None): Iterator[Sequence[RowMapping]]
      + fetchall(): Sequence[RowMapping]
      + fetchone(): Optional[RowMapping]
      + fetchmany(size: Optional[int] = None): Sequence[RowMapping]
      + all(): Sequence[RowMapping]
      + first(): Optional[RowMapping]
      + one_or_none(): Optional[RowMapping]
      + one(): RowMapping
  }

  class FrozenResult {
      + data: Sequence[Any]
  --
      - __init__(result: Result[_TP])
      + rewrite_rows(): Sequence[Sequence[Any]]
      + with_new_rows(tuple_data: Sequence[Row[_TP]]): FrozenResult[_TP]
  }

  class IteratorResult {
      - __init__(cursor_metadata: ResultMetaData, iterator: Iterator[_InterimSupportsScalarsRowType], raw: Optional[Result[Any]] = None, _source_supports_scalars: bool = False)
      + closed(): bool
  }

  class ChunkedIteratorResult {
      - __init__(cursor_metadata: ResultMetaData, chunks: Callable[[Optional[int]], Iterator[Sequence[_InterimRowType[_R]]]], source_supports_scalars: bool = False, raw: Optional[Result[Any]] = None, dynamic_yield_per: bool = False)
      + yield_per(num: int): Self
  }

  class MergedResult {
      + closed = False
      + rowcount: Optional[int]
  --
      - __init__(cursor_metadata: ResultMetaData, results: Sequence[Result[_TP]])
  }

  class Row {
      + tuple(): _TP
      + t(): _TP
  }

  class ROMappingView {
      - __init__(mapping: Mapping['_KeyType', Any], items: Sequence[Any])
  }

  class ROMappingKeysValuesView {
  }

  class ROMappingItemsView {
  }

  class RowMapping {
      + items(): ROMappingItemsView
      + keys(): RMKeyView
      + values(): ROMappingKeysValuesView
  }

  class MockEngineStrategy {
      + MockConnection = MockConnection
  }

  class URL {
      + drivername: str
      + username: Optional[str]
      + password: Optional[str]
      + host: Optional[str]
      + port: Optional[int]
      + database: Optional[str]
      + query: util.immutabledict[str, Union[Tuple[str, ...], str]]
  --
      + {classmethod} create(cls, drivername: str, username: Optional[str] = None, password: Optional[str] = None, host: Optional[str] = None, port: Optional[int] = None, database: Optional[str] = None, query: Mapping[str, Union[Sequence[str], str]] = util.EMPTY_DICT): URL
      + set(drivername: Optional[str] = None, username: Optional[str] = None, password: Optional[str] = None, host: Optional[str] = None, port: Optional[int] = None, database: Optional[str] = None, query: Optional[Mapping[str, Union[Sequence[str], str]]] = None): URL
      + update_query_string(query_string: str, append: bool = False): URL
      + update_query_pairs(key_value_pairs: Iterable[Tuple[str, Union[str, List[str]]]], append: bool = False): URL
      + update_query_dict(query_parameters: Mapping[str, Union[str, List[str]]], append: bool = False): URL
      + difference_update_query(names: Iterable[str]): URL
      + normalized_query(): Mapping[str, Sequence[str]]
      + render_as_string(hide_password: bool = True): str
      + get_backend_name(): str
      + get_driver_name(): str
      + get_dialect(_is_async: bool = False): Type[Dialect]
      + translate_connect_args(names: Optional[List[str]] = None): Dict[str, Any]
  }

  class TransactionalContext {
      + commit()
      + rollback()
      + close()
  }

  class BaseRow {
      - __init__(parent: ResultMetaData, processors: Optional[_ProcessorsType], key_to_index: Mapping[_KeyType, int], data: _RawRowType)
  }

}

package event {
  class RefCollection {
      + ref: weakref.ref[RefCollection[_ET]]
  }

  class Events {
  }

  class dispatcher {
      - __init__(events: Type[_HasEventsDispatch[_ET]])
  }

  class slots_dispatcher {
  }

  class EventTarget {
      + dispatch: dispatcher[Any]
  }

}

package asyncio {
  class ReversibleProxy {
  }

  class StartableContext {
  }

  class GeneratorStartableContext {
      + gen: AsyncGenerator[_T_co, Any]
  --
      - __init__(func: Callable[..., AsyncIterator[_T_co]], args: Tuple[Any, ...], kwds: Dict[str, Any])
  }

  class ProxyComparable {
  }

  class AsyncConnectable {
  }

  class AsyncConnection {
      + sync_connection: Optional[Connection]
      + sync_engine: Engine
  --
      - __init__(async_engine: AsyncEngine, sync_connection: Optional[Connection] = None)
      + connection(): NoReturn
      + info(): _InfoType
      + begin(): AsyncTransaction
      + begin_nested(): AsyncTransaction
      + in_transaction(): bool
      + in_nested_transaction(): bool
      + get_transaction(): Optional[AsyncTransaction]
      + get_nested_transaction(): Optional[AsyncTransaction]
      + stream(statement: TypedReturnsRows[_T], parameters: Optional[_CoreAnyExecuteParams] = None): GeneratorStartableContext[AsyncResult[_T]]
      + stream(statement: Executable, parameters: Optional[_CoreAnyExecuteParams] = None): GeneratorStartableContext[AsyncResult[Any]]
      + stream_scalars(statement: TypedReturnsRows[Tuple[_T]], parameters: Optional[_CoreSingleExecuteParams] = None): GeneratorStartableContext[AsyncScalarResult[_T]]
      + stream_scalars(statement: Executable, parameters: Optional[_CoreSingleExecuteParams] = None): GeneratorStartableContext[AsyncScalarResult[Any]]
      + closed(): Any
      + invalidated(): Any
      + dialect(): Dialect
      + dialect(attr: Dialect)
      + default_isolation_level(): Any
  }

  class AsyncEngine {
      + sync_engine: Engine
  --
      - __init__(sync_engine: Engine)
      + connect(): AsyncConnection
      + execution_options(): AsyncEngine
      + execution_options(): AsyncEngine
      + execution_options(): AsyncEngine
      + clear_compiled_cache()
      + update_execution_options()
      + get_execution_options(): _ExecuteOptions
      + url(): URL
      + url(attr: URL)
      + pool(): Pool
      + pool(attr: Pool)
      + dialect(): Dialect
      + dialect(attr: Dialect)
      + engine(): Any
      + name(): Any
      + driver(): Any
      + echo(): Any
      + echo(attr)
  }

  class AsyncTransaction {
      + sync_transaction: Optional[Transaction]
      + connection: AsyncConnection
      + nested: bool
  --
      - __init__(connection: AsyncConnection, nested: bool = False)
      + is_valid(): bool
      + is_active(): bool
  }

  class AsyncMethodRequired {
  }

  class AsyncContextNotStarted {
  }

  class AsyncContextAlreadyStarted {
  }

  class AsyncCommon {
      + closed(): bool
  }

  class AsyncResult {
      - __init__(real_result: Result[_TP])
      + t(): AsyncTupleResult[_TP]
      + tuples(): AsyncTupleResult[_TP]
      + unique(strategy: Optional[_UniqueFilterType] = None): Self
      + columns(): Self
      + scalars(index: Literal[0]): AsyncScalarResult[_T]
      + scalars(): AsyncScalarResult[_T]
      + scalars(index: _KeyIndexType = 0): AsyncScalarResult[Any]
      + scalars(index: _KeyIndexType = 0): AsyncScalarResult[Any]
      + mappings(): AsyncMappingResult
  }

  class AsyncScalarResult {
      - __init__(real_result: Result[Any], index: _KeyIndexType)
      + unique(strategy: Optional[_UniqueFilterType] = None): Self
  }

  class AsyncMappingResult {
      - __init__(result: Result[Any])
      + unique(strategy: Optional[_UniqueFilterType] = None): Self
      + columns(): Self
  }

  class AsyncTupleResult {
  }

  class async_scoped_session {
      + session_factory: async_sessionmaker[_AS]
      + registry: ScopedRegistry[_AS]
  --
      - __init__(session_factory: async_sessionmaker[_AS], scopefunc: Callable[[], Any])
      + configure()
      + add(instance: object, _warn: bool = True)
      + add_all(instances: Iterable[object])
      + begin(): AsyncSessionTransaction
      + begin_nested(): AsyncSessionTransaction
      + expire(instance: object, attribute_names: Optional[Iterable[str]] = None)
      + expire_all()
      + expunge(instance: object)
      + expunge_all()
      + get_bind(mapper: Optional[_EntityBindKey[_O]] = None, clause: Optional[ClauseElement] = None, bind: Optional[_SessionBind] = None): Union[Engine, Connection]
      + is_modified(instance: object, include_collections: bool = True): bool
      + bind(): Any
      + bind(attr)
      + dirty(): Any
      + deleted(): Any
      + new(): Any
      + identity_map(): Any
      + identity_map(attr)
      + is_active(): Any
      + autoflush(): Any
      + autoflush(attr)
      + no_autoflush(): Any
      + info(): Any
      + {classmethod} object_session(cls, instance: object): Optional[Session]
      + {classmethod} identity_key(cls, class_: Optional[Type[Any]] = None, ident: Union[Any, Tuple[Any, ...]] = None): _IdentityKeyType[Any]
  }

  class AsyncAttrs {
      + awaitable_attrs(): AsyncAttrs._AsyncAttrGetitem
  }

  class AsyncSession {
      + dispatch: dispatcher[Session]
      + sync_session_class: Type[Session] = Session
      + sync_session: Session
  --
      - __init__(bind: Optional[_AsyncSessionBind] = None)
      + get_transaction(): Optional[AsyncSessionTransaction]
      + get_nested_transaction(): Optional[AsyncSessionTransaction]
      + get_bind(mapper: Optional[_EntityBindKey[_O]] = None, clause: Optional[ClauseElement] = None, bind: Optional[_SessionBind] = None): Union[Engine, Connection]
      + begin(): AsyncSessionTransaction
      + begin_nested(): AsyncSessionTransaction
      + add(instance: object, _warn: bool = True)
      + add_all(instances: Iterable[object])
      + expire(instance: object, attribute_names: Optional[Iterable[str]] = None)
      + expire_all()
      + expunge(instance: object)
      + expunge_all()
      + is_modified(instance: object, include_collections: bool = True): bool
      + in_transaction(): bool
      + in_nested_transaction(): bool
      + dirty(): Any
      + deleted(): Any
      + new(): Any
      + identity_map(): IdentityMap
      + identity_map(attr: IdentityMap)
      + is_active(): Any
      + autoflush(): bool
      + autoflush(attr: bool)
      + no_autoflush(): Any
      + info(): Any
      + {classmethod} object_session(cls, instance: object): Optional[Session]
      + {classmethod} identity_key(cls, class_: Optional[Type[Any]] = None, ident: Union[Any, Tuple[Any, ...]] = None): _IdentityKeyType[Any]
  }

  class async_sessionmaker {
      + class_: Type[_AS]
  --
      - __init__(bind: Optional[_AsyncSessionBind] = ...)
      - __init__(bind: Optional[_AsyncSessionBind] = ...)
      - __init__(bind: Optional[_AsyncSessionBind] = None)
      + begin(): _AsyncSessionContextManager[_AS]
      + configure()
  }

  class AsyncSessionTransaction {
      + session: AsyncSession
      + sync_transaction: Optional[SessionTransaction]
  --
      - __init__(session: AsyncSession, nested: bool = False)
      + is_active(): bool
  }

  class AsyncSession {
      + sync_session_class: Type[Session] = Session
      + sync_session: Session
  }

  class async_retry_base {
  }

  class retry_if_exception {
      - __init__(predicate: typing.Callable[[BaseException], typing.Awaitable[bool]])
  }

  class retry_if_result {
      - __init__(predicate: typing.Callable[[typing.Any], typing.Awaitable[bool]])
  }

  class retry_any {
      - __init__()
  }

  class retry_all {
      - __init__()
  }

  class AsyncRetrying {
      - __init__(sleep: t.Callable[[t.Union[int, float]], t.Union[None, t.Awaitable[None]]] = _portable_async_sleep, stop: 'StopBaseT' = tenacity.stop.stop_never, wait: 'WaitBaseT' = tenacity.wait.wait_none(), retry: 't.Union[SyncRetryBaseT, RetryBaseT]' = tenacity.retry_if_exception_type(), before: t.Callable[['RetryCallState'], t.Union[None, t.Awaitable[None]]] = before_nothing, after: t.Callable[['RetryCallState'], t.Union[None, t.Awaitable[None]]] = after_nothing, before_sleep: t.Optional[t.Callable[['RetryCallState'], t.Union[None, t.Awaitable[None]]]] = None, reraise: bool = False, retry_error_cls: t.Type['RetryError'] = RetryError, retry_error_callback: t.Optional[t.Callable[['RetryCallState'], t.Union[t.Any, t.Awaitable[t.Any]]]] = None)
      + wraps(fn: WrappedFn): WrappedFn
  }

  class Timeout {
      - __init__(deadline: Optional[float], loop: asyncio.AbstractEventLoop)
      + expired(): bool
      + deadline(): Optional[float]
      + reject()
      + shift(delay: float)
      + update(deadline: float)
  }

  class ClientConnection {
      - __init__(protocol: ClientProtocol)
      + process_event(event: Event)
  }

  class connect {
      - __init__(uri: str)
      + process_redirect(exc: Exception): Exception | str
  }

  class HTTPProxyConnection {
      - __init__(ws_uri: WebSocketURI, proxy: Proxy, user_agent_header: str | None = None)
      + run_parser()
      + connection_made(transport: asyncio.BaseTransport)
      + data_received(data: bytes)
      + eof_received()
      + connection_lost(exc: Exception | None)
  }

  class Connection {
      - __init__(protocol: Protocol)
      + local_address(): Any
      + remote_address(): Any
      + state(): State
      + subprotocol(): Subprotocol | None
      + close_code(): int | None
      + close_reason(): str | None
      + recv_streaming(decode: Literal[True]): AsyncIterator[str]
      + recv_streaming(decode: Literal[False]): AsyncIterator[bytes]
      + recv_streaming(decode: bool | None = None): AsyncIterator[Data]
      + process_event(event: Event)
      + acknowledge_pings(data: bytes)
      + abort_pings()
      + start_keepalive()
      + send_data()
      + set_recv_exc(exc: BaseException | None)
      + connection_made(transport: asyncio.BaseTransport)
      + connection_lost(exc: Exception | None)
      + pause_writing()
      + resume_writing()
      + data_received(data: bytes)
      + eof_received()
  }

  class SimpleQueue {
      - __init__()
      + put(item: T)
      + reset(items: Iterable[T])
      + abort()
  }

  class Assembler {
      - __init__(high: int | None = None, low: int | None = None, pause: Callable[[], Any] = lambda: None, resume: Callable[[], Any] = lambda: None)
      + get_iter(decode: Literal[True]): AsyncIterator[str]
      + get_iter(decode: Literal[False]): AsyncIterator[bytes]
      + get_iter(decode: bool | None = None): AsyncIterator[Data]
      + put(frame: Frame)
      + maybe_pause()
      + maybe_resume()
      + close()
  }

  class Router {
      - __init__(url_map: Map, server_name: str | None = None, url_scheme: str = 'ws')
      + get_server_name(connection: ServerConnection, request: Request): str
      + redirect(connection: ServerConnection, url: str): Response
      + not_found(connection: ServerConnection): Response
      + route_request(connection: ServerConnection, request: Request): Response | None
  }

  class ServerConnection {
      - __init__(protocol: ServerProtocol, server: Server)
      + respond(status: StatusLike, text: str): Response
      + process_event(event: Event)
      + connection_made(transport: asyncio.BaseTransport)
  }

  class Server {
      - __init__(handler: Callable[[ServerConnection], Awaitable[None]])
      + connections(): set[ServerConnection]
      + wrap(server: asyncio.Server)
      + start_connection_handler(connection: ServerConnection)
      + close(close_connections: bool = True)
      + get_loop(): asyncio.AbstractEventLoop
      + is_serving(): bool
      + sockets(): Iterable[socket.socket]
  }

  class serve {
      - __init__(handler: Callable[[ServerConnection], Awaitable[None]], host: str | None = None, port: int | None = None)
  }

}

package declarative {
  class ConcreteBase {
  }

  class AbstractConcreteBase {
  }

  class DeferredReflection {
      + {classmethod} prepare(cls, bind: Union[Engine, Connection])
  }

}

package mypy {
  class SQLAlchemyPlugin {
      + get_dynamic_class_hook(fullname: str): Optional[Callable[[DynamicClassDefContext], None]]
      + get_customize_class_mro_hook(fullname: str): Optional[Callable[[ClassDefContext], None]]
      + get_class_decorator_hook(fullname: str): Optional[Callable[[ClassDefContext], None]]
      + get_metaclass_hook(fullname: str): Optional[Callable[[ClassDefContext], None]]
      + get_base_class_hook(fullname: str): Optional[Callable[[ClassDefContext], None]]
      + get_attribute_hook(fullname: str): Optional[Callable[[AttributeContext], Type]]
      + get_additional_deps(file: MypyFile): List[Tuple[int, str, int]]
  }

  class SQLAlchemyAttribute {
      - __init__(name: str, line: int, column: int, typ: Optional[Type], info: TypeInfo)
      + serialize(): JsonDict
      + expand_typevar_from_subtype(sub_type: TypeInfo)
      + {classmethod} deserialize(cls, info: TypeInfo, data: JsonDict, api: SemanticAnalyzerPluginInterface): SQLAlchemyAttribute
  }

}

package orm {
  class QueryableAttribute {
      + is_attribute = True
      + dispatch: dispatcher[QueryableAttribute[_T_co]]
      + class_: _ExternalEntityType[Any]
      + key: str
      + parententity: _InternalEntityType[Any]
      + impl: AttributeImpl
      + comparator: interfaces.PropComparator[_T_co]
      + parent: _InternalEntityType[Any]
      + expression: ColumnElement[_T_co]
  --
      - __init__(class_: _ExternalEntityType[_O], key: str, parententity: _InternalEntityType[_O], comparator: interfaces.PropComparator[_T_co], impl: Optional[AttributeImpl] = None, of_type: Optional[_InternalEntityType[Any]] = None, extra_criteria: Tuple[ColumnElement[bool], ...] = ())
      + get_history(instance, passive: PassiveFlag = PASSIVE_OFF): History
      + info(): _InfoType
      + adapt_to_entity(adapt_to_entity: AliasedInsp[Any]): Self
      + of_type(entity: _EntityType[_T]): QueryableAttribute[_T]
      + and_(): QueryableAttribute[bool]
      + label(name: Optional[str]): Label[_T_co]
      + operate(op: OperatorType): ColumnElement[Any]
      + reverse_operate(op: OperatorType, other): ColumnElement[Any]
      + hasparent(state: InstanceState[Any], optimistic: bool = False): bool
  }

  class InstrumentedAttribute {
      + inherit_cache = True
  }

  class AdHocHasEntityNamespace {
      + is_mapper: ClassVar[bool] = False
      + is_aliased_class: ClassVar[bool] = False
  --
      + entity_namespace()
  }

  class AttributeEventToken {
      - __init__(attribute_impl: AttributeImpl, op: util.symbol)
      + key()
      + hasparent(state)
  }

  class AttributeImpl {
      + collection: bool
      + default_accepts_scalar_loader: bool
      + uses_objects: bool
      + supports_population: bool
      + dynamic: bool
      + active_history = property(_get_active_history, _set_active_history)
  --
      - __init__(class_: _ExternalEntityType[_O], key: str, callable_: Optional[_LoaderCallable], dispatch: _Dispatch[QueryableAttribute[Any]], trackparent: bool = False, compare_function: Optional[Callable[..., bool]] = None, active_history: bool = False, parent_token: Optional[AttributeEventToken] = None, load_on_unexpire: bool = True, send_modified_events: bool = True, accepts_scalar_loader: Optional[bool] = None)
      + hasparent(state: InstanceState[Any], optimistic: bool = False): bool
      + sethasparent(state: InstanceState[Any], parent_state: InstanceState[Any], value: bool)
      + get_history(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PASSIVE_OFF): History
      + get_all_pending(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PASSIVE_NO_INITIALIZE): _AllPendingType
      + get(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PASSIVE_OFF): Any
      + append(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], passive: PassiveFlag = PASSIVE_OFF)
      + remove(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], passive: PassiveFlag = PASSIVE_OFF)
      + pop(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], passive: PassiveFlag = PASSIVE_OFF)
      + set(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken] = None, passive: PassiveFlag = PASSIVE_OFF, check_old = None, pop: bool = False)
      + delete(state: InstanceState[Any], dict_: _InstanceDict)
      + get_committed_value(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PASSIVE_OFF): Any
      + set_committed_value(state, dict_, value)
  }

  class ScalarAttributeImpl {
      + default_accepts_scalar_loader = True
      + uses_objects = False
      + supports_population = True
      + collection = False
      + dynamic = False
  --
      - __init__()
      + delete(state: InstanceState[Any], dict_: _InstanceDict)
      + get_history(state: InstanceState[Any], dict_: Dict[str, Any], passive: PassiveFlag = PASSIVE_OFF): History
      + set(state: InstanceState[Any], dict_: Dict[str, Any], value, initiator: Optional[AttributeEventToken] = None, passive: PassiveFlag = PASSIVE_OFF, check_old: Optional[object] = None, pop: bool = False)
      + fire_replace_event(state: InstanceState[Any], dict_: _InstanceDict, value: _T, previous, initiator: Optional[AttributeEventToken]): _T
      + fire_remove_event(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken])
  }

  class ScalarObjectAttributeImpl {
      + default_accepts_scalar_loader = False
      + uses_objects = True
      + supports_population = True
      + collection = False
  --
      + delete(state: InstanceState[Any], dict_: _InstanceDict)
      + get_history(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PASSIVE_OFF): History
      + get_all_pending(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PASSIVE_NO_INITIALIZE): _AllPendingType
      + set(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken] = None, passive: PassiveFlag = PASSIVE_OFF, check_old = None, pop: bool = False)
      + fire_remove_event(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken])
      + fire_replace_event(state: InstanceState[Any], dict_: _InstanceDict, value: _T, previous, initiator: Optional[AttributeEventToken]): _T
  }

  class HasCollectionAdapter {
      + collection: bool
  --
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: Literal[None] = ..., passive: Literal[PassiveFlag.PASSIVE_OFF] = ...): CollectionAdapter
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: _AdaptedCollectionProtocol = ..., passive: PassiveFlag = ...): CollectionAdapter
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: Optional[_AdaptedCollectionProtocol] = ..., passive: PassiveFlag = ...): Union[Literal[LoaderCallableStatus.PASSIVE_NO_RESULT], CollectionAdapter]
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: Optional[_AdaptedCollectionProtocol] = None, passive: PassiveFlag = PassiveFlag.PASSIVE_OFF): Union[Literal[LoaderCallableStatus.PASSIVE_NO_RESULT], CollectionAdapter]
      + set(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken] = None, passive: PassiveFlag = PassiveFlag.PASSIVE_OFF, check_old = None, pop: bool = False, _adapt: bool = True)
  }

  class CollectionAttributeImpl {
      + uses_objects = True
      + collection = True
      + default_accepts_scalar_loader = False
      + supports_population = True
      + dynamic = False
  --
      - __init__(class_, key, callable_, dispatch, typecallable = None, trackparent = False, copy_function = None, compare_function = None)
      + get_history(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PASSIVE_OFF): History
      + get_all_pending(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PASSIVE_NO_INITIALIZE): _AllPendingType
      + fire_append_event(state: InstanceState[Any], dict_: _InstanceDict, value: _T, initiator: Optional[AttributeEventToken], key: Optional[Any]): _T
      + fire_append_wo_mutation_event(state: InstanceState[Any], dict_: _InstanceDict, value: _T, initiator: Optional[AttributeEventToken], key: Optional[Any]): _T
      + fire_pre_remove_event(state: InstanceState[Any], dict_: _InstanceDict, initiator: Optional[AttributeEventToken], key: Optional[Any])
      + fire_remove_event(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], key: Optional[Any])
      + delete(state: InstanceState[Any], dict_: _InstanceDict)
      + append(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], passive: PassiveFlag = PASSIVE_OFF)
      + remove(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], passive: PassiveFlag = PASSIVE_OFF)
      + pop(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], passive: PassiveFlag = PASSIVE_OFF)
      + set(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken] = None, passive: PassiveFlag = PassiveFlag.PASSIVE_OFF, check_old = None, pop: bool = False, _adapt: bool = True)
      + set_committed_value(state: InstanceState[Any], dict_: _InstanceDict, value): _AdaptedCollectionProtocol
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: Literal[None] = ..., passive: Literal[PassiveFlag.PASSIVE_OFF] = ...): CollectionAdapter
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: _AdaptedCollectionProtocol = ..., passive: PassiveFlag = ...): CollectionAdapter
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: Optional[_AdaptedCollectionProtocol] = ..., passive: PassiveFlag = PASSIVE_OFF): Union[Literal[LoaderCallableStatus.PASSIVE_NO_RESULT], CollectionAdapter]
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: Optional[_AdaptedCollectionProtocol] = None, passive: PassiveFlag = PASSIVE_OFF): Union[Literal[LoaderCallableStatus.PASSIVE_NO_RESULT], CollectionAdapter]
  }

  class History {
      + added: Union[Tuple[()], List[Any]]
      + unchanged: Union[Tuple[()], List[Any]]
      + deleted: Union[Tuple[()], List[Any]]
  --
      + empty(): bool
      + sum(): Sequence[Any]
      + non_deleted(): Sequence[Any]
      + non_added(): Sequence[Any]
      + has_changes(): bool
      + as_state(): History
      + {classmethod} from_scalar_attribute(cls, attribute: ScalarAttributeImpl, state: InstanceState[Any], current): History
      + {classmethod} from_object_attribute(cls, attribute: ScalarObjectAttributeImpl, state: InstanceState[Any], current, original = _NO_HISTORY): History
      + {classmethod} from_collection(cls, attribute: CollectionAttributeImpl, state: InstanceState[Any], current): History
  }

  class LoaderCallableStatus {
      + PASSIVE_NO_RESULT = 0
      + PASSIVE_CLASS_MISMATCH = 1
      + ATTR_WAS_SET = 2
      + ATTR_EMPTY = 3
      + NO_VALUE = 4
      + NEVER_SET = NO_VALUE
  }

  class PassiveFlag {
      + NO_CHANGE = 0
      + CALLABLES_OK = 1
      + SQL_OK = 2
      + RELATED_OBJECT_OK = 4
      + INIT_OK = 8
      + NON_PERSISTENT_OK = 16
      + LOAD_AGAINST_COMMITTED = 32
      + NO_AUTOFLUSH = 64
      + NO_RAISE = 128
      + DEFERRED_HISTORY_LOAD = 256
      + INCLUDE_PENDING_MUTATIONS = 512
      + PASSIVE_OFF = RELATED_OBJECT_OK | NON_PERSISTENT_OK | INIT_OK | CALLABLES_OK | SQL_OK
      + PASSIVE_RETURN_NO_VALUE = PASSIVE_OFF ^ INIT_OK
      + PASSIVE_NO_INITIALIZE = PASSIVE_RETURN_NO_VALUE ^ CALLABLES_OK
      + PASSIVE_NO_FETCH = PASSIVE_OFF ^ SQL_OK
      + PASSIVE_NO_FETCH_RELATED = PASSIVE_OFF ^ RELATED_OBJECT_OK
      + PASSIVE_ONLY_PERSISTENT = PASSIVE_OFF ^ NON_PERSISTENT_OK
      + PASSIVE_MERGE = PASSIVE_OFF | NO_RAISE
  }

  class EventConstants {
      + EXT_CONTINUE = 1
      + EXT_STOP = 2
      + EXT_SKIP = 3
      + NO_KEY = 4
  }

  class RelationshipDirection {
      + ONETOMANY = 1
      + MANYTOONE = 2
      + MANYTOMANY = 3
  }

  class InspectionAttrExtensionType {
  }

  class NotExtension {
      + NOT_EXTENSION = 'not_extension'
  }

  class InspectionAttr {
      + is_selectable = False
      + is_aliased_class = False
      + is_instance = False
      + is_mapper = False
      + is_bundle = False
      + is_property = False
      + is_attribute = False
      + is_clause_element = False
      + extension_type: InspectionAttrExtensionType = NotExtension.NOT_EXTENSION
  }

  class InspectionAttrInfo {
      + info(): _InfoType
  }

  class SQLORMOperations {
  }

  class ORMDescriptor {
  }

  class SQLORMExpression {
  }

  class Mapped {
  }

  class DynamicMapped {
  }

  class WriteOnlyMapped {
  }

  class ORMDMLState {
      + is_dml_returning = True
      + from_statement_ctx: Optional[ORMFromStatementCompileState] = None
  --
      + {classmethod} get_entity_description(cls, statement)
      + {classmethod} get_returning_column_descriptions(cls, statement)
  }

  class BulkUDCompileState {
      + {classmethod} can_use_returning(cls, dialect: Dialect, mapper: Mapper[Any]): bool
      + {classmethod} orm_pre_session_exec(cls, session, statement, params, execution_options, bind_arguments, is_pre_event)
      + {classmethod} orm_setup_cursor_result(cls, session, statement, params, execution_options, bind_arguments, result)
  }

  class default_update_options {
  }

  class BulkORMInsert {
      + select_statement: Optional[FromStatement] = None
  --
      + {classmethod} orm_pre_session_exec(cls, session, statement, params, execution_options, bind_arguments, is_pre_event)
      + {classmethod} orm_execute_statement(cls, session: Session, statement: dml.Insert, params: _CoreAnyExecuteParams, execution_options: OrmExecuteOptionsParameter, bind_arguments: _BindArguments, conn: Connection): _result.Result
      + {classmethod} create_for_statement(cls, statement, compiler): BulkORMInsert
  }

  class default_insert_options {
  }

  class BulkORMUpdate {
      + {classmethod} create_for_statement(cls, statement, compiler)
      + {classmethod} orm_execute_statement(cls, session: Session, statement: dml.Update, params: _CoreAnyExecuteParams, execution_options: OrmExecuteOptionsParameter, bind_arguments: _BindArguments, conn: Connection): _result.Result
      + {classmethod} can_use_returning(cls, dialect: Dialect, mapper: Mapper[Any]): bool
  }

  class BulkORMDelete {
      + {classmethod} create_for_statement(cls, statement, compiler)
      + {classmethod} orm_execute_statement(cls, session: Session, statement: dml.Delete, params: _CoreAnyExecuteParams, execution_options: OrmExecuteOptionsParameter, bind_arguments: _BindArguments, conn: Connection): _result.Result
      + {classmethod} can_use_returning(cls, dialect: Dialect, mapper: Mapper[Any]): bool
  }

  class ClsRegistryToken {
  }

  class collection {
      + {static} appender(fn)
      + {static} remover(fn)
      + {static} iterator(fn)
      + {static} internally_instrumented(fn)
      + {static} converter(fn)
      + {static} adds(arg)
      + {static} replaces(arg)
      + {static} removes(arg)
      + {static} removes_return()
  }

  class CollectionAdapter {
      + attr: CollectionAttributeImpl
      + owner_state: InstanceState[Any]
      + invalidated: bool
      + empty: bool
  --
      - __init__(attr: CollectionAttributeImpl, owner_state: InstanceState[Any], data: _AdaptedCollectionProtocol)
      + data(): _AdaptedCollectionProtocol
      + bulk_appender()
      + append_with_event(item, initiator: Optional[AttributeEventToken] = None)
      + append_without_event(item)
      + append_multiple_without_event(items: Iterable[Any])
      + bulk_remover()
      + remove_with_event(item, initiator: Optional[AttributeEventToken] = None)
      + remove_without_event(item)
      + clear_with_event(initiator: Optional[AttributeEventToken] = None)
      + clear_without_event()
      + fire_append_wo_mutation_event(item, initiator = None, key = NO_KEY)
      + fire_append_event(item, initiator = None, key = NO_KEY)
      + fire_remove_event(item, initiator = None, key = NO_KEY)
      + fire_pre_remove_event(initiator = None, key = NO_KEY)
  }

  class InstrumentedList {
  }

  class InstrumentedSet {
  }

  class InstrumentedDict {
  }

  class QueryContext {
      + runid: int
      + post_load_paths: Dict[PathRegistry, PostLoad]
      + compile_state: ORMCompileState
  --
      - __init__(compile_state: CompileState, statement: Union[Select[Any], FromStatement[Any], UpdateBase], user_passed_query: Union[Select[Any], FromStatement[Any], UpdateBase], params: _CoreSingleExecuteParams, session: Session, load_options: Union[Type[QueryContext.default_load_options], QueryContext.default_load_options], execution_options: Optional[OrmExecuteOptionsParameter] = None, bind_arguments: Optional[_BindArguments] = None)
  }

  class default_load_options {
  }

  class AbstractORMCompileState {
      + is_dml_returning = False
  --
      + {classmethod} create_for_statement(cls, statement: Executable, compiler: SQLCompiler): CompileState
      + {classmethod} orm_pre_session_exec(cls, session, statement, params, execution_options, bind_arguments, is_pre_event)
      + {classmethod} orm_execute_statement(cls, session, statement, params, execution_options, bind_arguments, conn): Result
      + {classmethod} orm_setup_cursor_result(cls, session, statement, params, execution_options, bind_arguments, result)
  }

  class AutoflushOnlyORMCompileState {
      + {classmethod} orm_pre_session_exec(cls, session, statement, params, execution_options, bind_arguments, is_pre_event)
      + {classmethod} orm_setup_cursor_result(cls, session, statement, params, execution_options, bind_arguments, result)
  }

  class ORMCompileState {
      + attributes: Dict[Any, Any]
      + global_attributes: Dict[Any, Any]
      + statement: Union[Select[Any], FromStatement[Any], UpdateBase]
      + select_statement: Union[Select[Any], FromStatement[Any], UpdateBase]
      + compile_options: Union[Type[default_compile_options], default_compile_options]
      + use_legacy_query_style: bool
      + primary_columns: List[ColumnElement[Any]]
      + secondary_columns: List[ColumnElement[Any]]
      + dedupe_columns: Set[ColumnElement[Any]]
      + create_eager_joins: List[Tuple[Any, ...]]
      + current_path: PathRegistry = _path_registry
  --
      - __init__()
      + {classmethod} create_for_statement(cls, statement: Executable, compiler: SQLCompiler): ORMCompileState
      + {classmethod} get_column_descriptions(cls, statement)
      + {classmethod} orm_pre_session_exec(cls, session, statement, params, execution_options, bind_arguments, is_pre_event)
      + {classmethod} orm_setup_cursor_result(cls, session, statement, params, execution_options, bind_arguments, result)
  }

  class default_compile_options {
  }

  class ORMFromStatementCompileState {
      + statement_container: FromStatement
      + requested_statement: Union[SelectBase, TextClause, UpdateBase]
      + dml_table: Optional[_DMLTableElement] = None
      + multi_row_eager_loaders = False
      + eager_adding_joins = False
      + compound_eager_adapter = None
      + extra_criteria_entities = _EMPTY_DICT
      + eager_joins = _EMPTY_DICT
  --
      + setup_dml_returning_compile_state(dml_mapper)
  }

  class FromStatement {
      + element: Union[ExecutableReturnsRows, TextClause]
      + is_from_statement = True
  --
      - __init__(entities: Iterable[_ColumnsClauseArgument[Any]], element: Union[ExecutableReturnsRows, TextClause], _adapt_on_names: bool = True)
      + column_descriptions()
      + get_children()
  }

  class CompoundSelectCompileState {
  }

  class ORMSelectCompileState {
      + multi_row_eager_loaders = False
      + eager_adding_joins = False
      + compound_eager_adapter = None
      + correlate = None
      + correlate_except = None
  --
      + {classmethod} determine_last_joined_entity(cls, statement)
      + {classmethod} all_selected_columns(cls, statement)
      + {classmethod} get_columns_clause_froms(cls, statement)
      + {classmethod} from_statement(cls, statement, from_statement)
  }

  class DeclarativeAttributeIntercept {
  }

  class DCTransformDeclarative {
  }

  class DeclarativeMeta {
      + metadata: MetaData
      + registry: RegistryType
  --
      - __init__(cls, classname, bases, dict_)
  }

  class declared_attr {
      + directive(cls): _declared_directive[Any]
      + cascading(cls): _stateful_declared_attr[_T]
  }

  class MappedAsDataclass {
  }

  class DeclarativeBase {
  }

  class DeclarativeBaseNoMeta {
      + registry: ClassVar[_RegistryType]
      + metadata: ClassVar[MetaData]
  }

  class registry {
      + metadata: MetaData
      + constructor: CallableReference[Callable[..., None]]
      + type_annotation_map: _MutableTypeAnnotationMapType
  --
      - __init__()
      + update_type_annotation_map(type_annotation_map: _TypeAnnotationMapType)
      + mappers(): FrozenSet[Mapper[Any]]
      + configure(cascade: bool = False)
      + dispose(cascade: bool = False)
      + generate_base(mapper: Optional[Callable[..., Mapper[Any]]] = None, cls: Type[Any] = object, name: str = 'Base', metaclass: Type[Any] = DeclarativeMeta): Any
      + mapped_as_dataclass(__cls: Type[_O]): Type[_O]
      + mapped_as_dataclass(__cls: Literal[None] = ...): Callable[[Type[_O]], Type[_O]]
      + mapped_as_dataclass(__cls: Optional[Type[_O]] = None): Union[Type[_O], Callable[[Type[_O]], Type[_O]]]
      + mapped(cls: Type[_O]): Type[_O]
      + as_declarative_base(): Callable[[Type[_T]], Type[_T]]
      + map_declaratively(cls: Type[_O]): Mapper[_O]
      + map_imperatively(class_: Type[_O], local_table: Optional[FromClause] = None): Mapper[_O]
  }

  class MappedClassProtocol {
  }

  class DependencyProcessor {
      - __init__(prop)
      + {classmethod} from_relationship(cls, prop)
      + hasparent(state)
      + per_property_preprocessors(uow)
      + per_property_flush_actions(uow)
      + per_state_flush_actions(uow, states, isdelete)
      + presort_deletes(uowcommit, states)
      + presort_saves(uowcommit, states)
      + process_deletes(uowcommit, states)
      + process_saves(uowcommit, states)
      + prop_has_changes(uowcommit, states, isdelete)
  }

  class OneToManyDP {
      + per_property_dependencies(uow, parent_saves, child_saves, parent_deletes, child_deletes, after_save, before_delete)
      + per_state_dependencies(uow, save_parent, delete_parent, child_action, after_save, before_delete, isdelete, childisdelete)
      + presort_deletes(uowcommit, states)
      + presort_saves(uowcommit, states)
      + process_deletes(uowcommit, states)
      + process_saves(uowcommit, states)
  }

  class ManyToOneDP {
      - __init__(prop)
      + per_property_dependencies(uow, parent_saves, child_saves, parent_deletes, child_deletes, after_save, before_delete)
      + per_state_dependencies(uow, save_parent, delete_parent, child_action, after_save, before_delete, isdelete, childisdelete)
      + presort_deletes(uowcommit, states)
      + presort_saves(uowcommit, states)
      + process_deletes(uowcommit, states)
      + process_saves(uowcommit, states)
  }

  class DetectKeySwitch {
      + per_property_preprocessors(uow)
      + per_property_flush_actions(uow)
      + per_state_flush_actions(uow, states, isdelete)
      + presort_deletes(uowcommit, states)
      + presort_saves(uow, states)
      + prop_has_changes(uow, states, isdelete)
      + process_deletes(uowcommit, states)
      + process_saves(uowcommit, states)
  }

  class ManyToManyDP {
      + per_property_dependencies(uow, parent_saves, child_saves, parent_deletes, child_deletes, after_save, before_delete)
      + per_state_dependencies(uow, save_parent, delete_parent, child_action, after_save, before_delete, isdelete, childisdelete)
      + presort_deletes(uowcommit, states)
      + presort_saves(uowcommit, states)
      + process_deletes(uowcommit, states)
      + process_saves(uowcommit, states)
  }

  class DescriptorProperty {
      + doc: Optional[str] = None
      + uses_objects = False
      + descriptor: DescriptorReference[Any]
  --
      + get_history(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PassiveFlag.PASSIVE_OFF): History
      + instrument_class(mapper: Mapper[Any])
  }

  class CompositeProperty {
      + composite_class: Union[Type[_CC], Callable[..., _CC]]
      + attrs: Tuple[_CompositeAttrType[Any], ...]
      + comparator_factory: Type[Comparator[_CC]]
  --
      - __init__(_class_or_attr: Union[None, Type[_CC], Callable[..., _CC], _CompositeAttrType[Any]] = None)
      + instrument_class(mapper: Mapper[Any])
      + do_init()
      + declarative_scan(decl_scan: _ClassScanMapperConfig, registry: _RegistryType, cls: Type[Any], originating_module: Optional[str], key: str, mapped_container: Optional[Type[Mapped[Any]]], annotation: Optional[_AnnotationScanType], extracted_mapped_annotation: Optional[_AnnotationScanType], is_dataclass_field: bool)
      + props(): Sequence[MapperProperty[Any]]
      + columns(): Sequence[Column[Any]]
      + mapper_property_to_assign(): Optional[MapperProperty[_CC]]
      + columns_to_assign(): List[Tuple[schema.Column[Any], int]]
      + get_history(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PassiveFlag.PASSIVE_OFF): History
  }

  class CompositeBundle {
      - __init__(property_: Composite[_T], expr: ClauseList)
      + create_row_processor(query: Select[Any], procs: Sequence[Callable[[Row[Any]], Any]], labels: Sequence[str]): Callable[[Row[Any]], Any]
  }

  class Comparator {
      + prop: RODescriptorReference[Composite[_PT]]
  --
      + clauses(): ClauseList
      + expression(): CompositeProperty.CompositeBundle[_PT]
  }

  class Composite {
      + inherit_cache = True
  }

  class ConcreteInheritedProperty {
      - __init__()
  }

  class SynonymProperty {
      + comparator_factory: Optional[Type[PropComparator[_T]]]
  --
      - __init__(name: str, map_column: Optional[bool] = None, descriptor: Optional[Any] = None, comparator_factory: Optional[Type[PropComparator[_T]]] = None, attribute_options: Optional[_AttributeOptions] = None, info: Optional[_InfoType] = None, doc: Optional[str] = None)
      + get_history(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PassiveFlag.PASSIVE_OFF): History
      + set_parent(parent: Mapper[Any], init: bool)
  }

  class Synonym {
      + inherit_cache = True
  }

  class DynamicCollectionHistory {
      - __init__(attr: DynamicAttributeImpl, state: InstanceState[_T], passive: PassiveFlag, apply_to: Optional[DynamicCollectionHistory[_T]] = None)
  }

  class DynamicAttributeImpl {
      + collection_history_cls = DynamicCollectionHistory[Any]
      + query_class: Type[AppenderMixin[Any]]
  --
      - __init__(class_: Union[Type[Any], AliasedClass[Any]], key: str, dispatch: _Dispatch[QueryableAttribute[Any]], target_mapper: Mapper[_T], order_by: _RelationshipOrderByArg, query_class: Optional[Type[AppenderMixin[_T]]] = None)
  }

  class DynaLoader {
      + impl_class = DynamicAttributeImpl
  }

  class AppenderMixin {
      + query_class: Optional[Type[Query[_T]]] = None
  --
      - __init__(attr: DynamicAttributeImpl, state: InstanceState[_T])
      + session(): Optional[Session]
      + session(session: Session)
      + count(): int
      + add_all(iterator: Iterable[_T])
      + add(item: _T)
      + extend(iterator: Iterable[_T])
      + append(item: _T)
      + remove(item: _T)
  }

  class AppenderQuery {
  }

  class UnevaluatableError {
  }

  class InstrumentationEvents {
      + class_instrument(cls: ClassManager[_O])
      + class_uninstrument(cls: ClassManager[_O])
      + attribute_instrument(cls: ClassManager[_O], key: _KT, inst: _O)
  }

  class InstanceEvents {
      + first_init(manager: ClassManager[_O], cls: Type[_O])
      + init(target: _O, args, kwargs)
      + init_failure(target: _O, args, kwargs)
      + load(target: _O, context: QueryContext)
      + refresh(target: _O, context: QueryContext, attrs: Optional[Iterable[str]])
      + refresh_flush(target: _O, flush_context: UOWTransaction, attrs: Optional[Iterable[str]])
      + expire(target: _O, attrs: Optional[Iterable[str]])
      + pickle(target: _O, state_dict: _InstanceDict)
      + unpickle(target: _O, state_dict: _InstanceDict)
  }

  class MapperEvents {
      + instrument_class(mapper: Mapper[_O], class_: Type[_O])
      + after_mapper_constructed(mapper: Mapper[_O], class_: Type[_O])
      + before_mapper_configured(mapper: Mapper[_O], class_: Type[_O])
      + mapper_configured(mapper: Mapper[_O], class_: Type[_O])
      + before_configured()
      + after_configured()
      + before_insert(mapper: Mapper[_O], connection: Connection, target: _O)
      + after_insert(mapper: Mapper[_O], connection: Connection, target: _O)
      + before_update(mapper: Mapper[_O], connection: Connection, target: _O)
      + after_update(mapper: Mapper[_O], connection: Connection, target: _O)
      + before_delete(mapper: Mapper[_O], connection: Connection, target: _O)
      + after_delete(mapper: Mapper[_O], connection: Connection, target: _O)
  }

  class SessionEvents {
      + do_orm_execute(orm_execute_state: ORMExecuteState)
      + after_transaction_create(session: Session, transaction: SessionTransaction)
      + after_transaction_end(session: Session, transaction: SessionTransaction)
      + before_commit(session: Session)
      + after_commit(session: Session)
      + after_rollback(session: Session)
      + after_soft_rollback(session: Session, previous_transaction: SessionTransaction)
      + before_flush(session: Session, flush_context: UOWTransaction, instances: Optional[Sequence[_O]])
      + after_flush(session: Session, flush_context: UOWTransaction)
      + after_flush_postexec(session: Session, flush_context: UOWTransaction)
      + after_begin(session: Session, transaction: SessionTransaction, connection: Connection)
      + before_attach(session: Session, instance: _O)
      + after_attach(session: Session, instance: _O)
      + after_bulk_update(update_context: _O)
      + after_bulk_delete(delete_context: _O)
      + transient_to_pending(session: Session, instance: _O)
      + pending_to_transient(session: Session, instance: _O)
      + persistent_to_transient(session: Session, instance: _O)
      + pending_to_persistent(session: Session, instance: _O)
      + detached_to_persistent(session: Session, instance: _O)
      + loaded_as_persistent(session: Session, instance: _O)
      + persistent_to_deleted(session: Session, instance: _O)
      + deleted_to_persistent(session: Session, instance: _O)
      + deleted_to_detached(session: Session, instance: _O)
      + persistent_to_detached(session: Session, instance: _O)
  }

  class AttributeEvents {
      + append(target: _O, value: _T, initiator: Event): Optional[_T]
      + append_wo_mutation(target: _O, value: _T, initiator: Event)
      + bulk_replace(target: _O, values: Iterable[_T], initiator: Event)
      + remove(target: _O, value: _T, initiator: Event)
      + set(target: _O, value: _T, oldvalue: _T, initiator: Event)
      + init_scalar(target: _O, value: _T, dict_: Dict[Any, Any])
      + init_collection(target: _O, collection: Type[Collection[Any]], collection_adapter: CollectionAdapter)
      + dispose_collection(target: _O, collection: Collection[Any], collection_adapter: CollectionAdapter)
      + modified(target: _O, initiator: Event)
  }

  class QueryEvents {
      + before_compile(query: Query[Any])
      + before_compile_update(query: Query[Any], update_context: BulkUpdate)
      + before_compile_delete(query: Query[Any], delete_context: BulkDelete)
  }

  class StaleDataError {
  }

  class FlushError {
  }

  class UnmappedError {
  }

  class ObjectDereferencedError {
  }

  class DetachedInstanceError {
      + code = 'bhk3'
  }

  class UnmappedInstanceError {
      - __init__(obj: object, msg: Optional[str] = None)
  }

  class UnmappedClassError {
      - __init__(cls: Type[_T], msg: Optional[str] = None)
  }

  class ObjectDeletedError {
      - __init__(state: InstanceState[Any], msg: Optional[str] = None)
  }

  class UnmappedColumnError {
  }

  class LoaderStrategyException {
      - __init__(applied_to_property_type: Type[Any], requesting_property: MapperProperty[Any], applies_to: Optional[Type[MapperProperty[Any]]], actual_strategy_type: Optional[Type[LoaderStrategy]], strategy_key: Tuple[Any, ...])
  }

  class IdentityMap {
      - __init__()
      + all_states(): List[InstanceState[Any]]
      + contains_state(state: InstanceState[Any]): bool
      + safe_discard(state: InstanceState[Any])
      + get(key: _IdentityKeyType[_O], default: Optional[_O] = None): Optional[_O]
      + fast_get_state(key: _IdentityKeyType[_O]): Optional[InstanceState[_O]]
      + keys(): Iterable[_IdentityKeyType[Any]]
      + values(): Iterable[object]
      + replace(state: InstanceState[_O]): Optional[InstanceState[_O]]
      + add(state: InstanceState[Any]): bool
      + check_modified(): bool
      + has_key(key: _IdentityKeyType[Any]): bool
  }

  class WeakInstanceDict {
      + contains_state(state: InstanceState[Any]): bool
      + replace(state: InstanceState[Any]): Optional[InstanceState[Any]]
      + add(state: InstanceState[Any]): bool
      + fast_get_state(key: _IdentityKeyType[_O]): Optional[InstanceState[_O]]
      + get(key: _IdentityKeyType[_O], default: Optional[_O] = None): Optional[_O]
      + items(): List[Tuple[_IdentityKeyType[Any], InstanceState[Any]]]
      + values(): List[object]
      + all_states(): List[InstanceState[Any]]
      + discard(state: InstanceState[Any])
      + safe_discard(state: InstanceState[Any])
  }

  class ClassManager {
      + dispatch: dispatcher[ClassManager[_O]]
      + MANAGER_ATTR = base.DEFAULT_MANAGER_ATTR
      + STATE_ATTR = base.DEFAULT_STATE_ATTR
      + expired_attribute_loader: _ExpiredAttributeLoaderProto
      + init_method: Optional[Callable[..., None]]
      + original_init: Optional[Callable[..., None]] = None
      + factory: Optional[_ManagerFactory]
      + declarative_scan: Optional[weakref.ref[_MapperConfig]] = None
      + registry: _RegistryType
      + class_: Type[_O]
  --
      + deferred_scalar_loader()
      + deferred_scalar_loader(obj)
      - __init__(class_)
      + is_mapped(): bool
      + mapper(): Mapper[_O]
      + manage()
      + manager_getter()
      + state_getter()
      + dict_getter()
      + instrument_attribute(key: str, inst: QueryableAttribute[Any], propagated: bool = False)
      + subclass_managers(recursive)
      + post_configure_attribute(key)
      + uninstrument_attribute(key, propagated = False)
      + unregister()
      + install_descriptor(key: str, inst: QueryableAttribute[Any])
      + uninstall_descriptor(key: str)
      + install_member(key: str, implementation)
      + uninstall_member(key: str)
      + instrument_collection_class(key: str, collection_class: Type[Collection[Any]]): _CollectionFactoryType
      + initialize_collection(key: str, state: InstanceState[_O], factory: _CollectionFactoryType): Tuple[collections.CollectionAdapter, _AdaptedCollectionProtocol]
      + is_instrumented(key: str, search: bool = False): bool
      + get_impl(key: str): AttributeImpl
      + attributes(): Iterable[Any]
      + new_instance(state: Optional[InstanceState[_O]] = None): _O
      + setup_instance(instance: _O, state: Optional[InstanceState[_O]] = None)
      + teardown_instance(instance: _O)
      + has_state(instance: _O): bool
      + has_parent(state: InstanceState[_O], key: str, optimistic: bool = False): bool
  }

  class InstrumentationFactory {
      + dispatch: dispatcher[InstrumentationFactory]
  --
      + create_manager_for_cls(class_: Type[_O]): ClassManager[_O]
      + unregister(class_: Type[_O])
  }

  class ORMStatementRole {
  }

  class ORMColumnsClauseRole {
  }

  class ORMEntityColumnsClauseRole {
  }

  class ORMFromClauseRole {
  }

  class ORMColumnDescription {
      + name: str
      + type: Union[Type[Any], TypeEngine[Any]]
      + aliased: bool
      + expr: _ColumnsClauseArgument[Any]
      + entity: Optional[_ColumnsClauseArgument[Any]]
  }

  class MapperProperty {
      + is_property = True
      + comparator: PropComparator[_T]
      + key: str
      + parent: Mapper[Any]
      + doc: Optional[str]
      + info: _InfoType
  --
      + setup(context: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, adapter: Optional[ORMAdapter])
      + create_row_processor(context: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, mapper: Mapper[Any], result: Result[Any], adapter: Optional[ORMAdapter], populators: _PopulatorDict)
      + cascade_iterator(type_: str, state: InstanceState[Any], dict_: _InstanceDict, visited_states: Set[InstanceState[Any]], halt_on: Optional[Callable[[InstanceState[Any]], bool]] = None): Iterator[Tuple[object, Mapper[Any], InstanceState[Any], _InstanceDict]]
      + set_parent(parent: Mapper[Any], init: bool)
      + instrument_class(mapper: Mapper[Any])
      - __init__(attribute_options: Optional[_AttributeOptions] = None, _assume_readonly_dc_attributes: bool = False)
      + init()
      + class_attribute(): InstrumentedAttribute[_T]
      + do_init()
      + post_instrument_class(mapper: Mapper[Any])
      + merge(session: Session, source_state: InstanceState[Any], source_dict: _InstanceDict, dest_state: InstanceState[Any], dest_dict: _InstanceDict, load: bool, _recursive: Dict[Any, object], _resolve_conflict_map: Dict[_IdentityKeyType[Any], object])
  }

  class PropComparator {
      + prop: RODescriptorReference[MapperProperty[_T_co]]
      + any_op = cast(operators.OperatorType, _any_op)
      + has_op = cast(operators.OperatorType, _has_op)
      + of_type_op = cast(operators.OperatorType, _of_type_op)
  --
      - __init__(prop: MapperProperty[_T], parentmapper: _InternalEntityType[Any], adapt_to_entity: Optional[AliasedInsp[Any]] = None)
      + property(): MapperProperty[_T_co]
      + adapt_to_entity(adapt_to_entity: AliasedInsp[Any]): PropComparator[_T_co]
      + adapter(): Optional[_ORMAdapterProto]
      + info(): _InfoType
      + of_type(class_: _EntityType[Any]): PropComparator[_T_co]
      + and_(): PropComparator[bool]
      + any(criterion: Optional[_ColumnExpressionArgument[bool]] = None): ColumnElement[bool]
      + has(criterion: Optional[_ColumnExpressionArgument[bool]] = None): ColumnElement[bool]
  }

  class StrategizedProperty {
      + inherit_cache = True
      + strategy_wildcard_key: ClassVar[str]
      + strategy_key: _StrategyKey
  --
      + setup(context: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, adapter: Optional[ORMAdapter])
      + create_row_processor(context: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, mapper: Mapper[Any], result: Result[Any], adapter: Optional[ORMAdapter], populators: _PopulatorDict)
      + do_init()
      + post_instrument_class(mapper: Mapper[Any])
      + {classmethod} strategy_for(cls): Callable[[_TLS], _TLS]
  }

  class ORMOption {
      + propagate_to_loaders = False
  }

  class CompileStateOption {
      + process_compile_state(compile_state: ORMCompileState)
      + process_compile_state_replaced_entities(compile_state: ORMCompileState, mapper_entities: Sequence[_MapperEntity])
  }

  class LoaderOption {
      + process_compile_state_replaced_entities(compile_state: ORMCompileState, mapper_entities: Sequence[_MapperEntity])
  }

  class CriteriaOption {
      + get_global_criteria(attributes: Dict[str, Any])
  }

  class UserDefinedOption {
      + propagate_to_loaders = False
  --
      - __init__(payload: Optional[Any] = None)
  }

  class MapperOption {
      + propagate_to_loaders = False
  --
      + process_query(query: Query[Any])
      + process_query_conditionally(query: Query[Any])
  }

  class LoaderStrategy {
      - __init__(parent: MapperProperty[Any], strategy_key: _StrategyKey)
      + init_class_attribute(mapper: Mapper[Any])
      + setup_query(compile_state: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, loadopt: Optional[_LoadElement], adapter: Optional[ORMAdapter])
      + create_row_processor(context: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, loadopt: Optional[_LoadElement], mapper: Mapper[Any], result: Result[Any], adapter: Optional[ORMAdapter], populators: _PopulatorDict)
  }

  class PostLoad {
      - __init__()
      + add_state(state, overwrite)
      + invoke(context, path)
      + {classmethod} for_context(cls, context, path, only_load_props)
      + {classmethod} path_exists(context, path, key)
      + {classmethod} callable_for_path(cls, context, path, limit_to_mapper, token, loader_callable)
  }

  class KeyFuncDict {
      - __init__(keyfunc: Callable[[Any], Any])
      + set(value: _KT, _sa_initiator: Union[AttributeEventToken, Literal[None, False]] = None)
      + remove(value: _KT, _sa_initiator: Union[AttributeEventToken, Literal[None, False]] = None)
  }

  class Mapper {
      + dispatch: dispatcher[Mapper[_O]]
      + is_mapper = True
      + represents_outer_join = False
      + registry: _RegistryType
      + class_: Type[_O]
      + tables: Sequence[TableClause]
      + validators: util.immutabledict[str, Tuple[str, Dict[str, Any]]]
      + always_refresh: bool
      + allow_partial_pks: bool
      + version_id_col: Optional[ColumnElement[Any]]
      + with_polymorphic: Optional[Tuple[Union[Literal['*'], Sequence[Union[Mapper[Any], Type[Any]]]], Optional[FromClause]]]
      + version_id_generator: Optional[Union[Literal[False], Callable[[Any], Any]]]
      + local_table: FromClause
      + persist_selectable: FromClause
      + inherits: Optional[Mapper[Any]]
      + inherit_condition: Optional[ColumnElement[bool]]
      + configured: bool = False
      + concrete: bool
      + primary_key: Tuple[Column[Any], ...]
      + class_manager: ClassManager[_O]
      + single: bool
      + non_primary: bool
      + polymorphic_on: Optional[KeyedColumnElement[Any]]
      + polymorphic_map: Dict[Any, Mapper[Any]]
      + polymorphic_identity: Optional[Any]
      + base_mapper: Mapper[Any]
      + columns: ReadOnlyColumnCollection[str, Column[Any]]
      + c: ReadOnlyColumnCollection[str, Column[Any]]
      + with_polymorphic_mappers = _with_polymorphic_mappers
  --
      - __init__(class_: Type[_O], local_table: Optional[FromClause] = None, properties: Optional[Mapping[str, MapperProperty[Any]]] = None, primary_key: Optional[Iterable[_ORMColumnExprArgument[Any]]] = None, non_primary: bool = False, inherits: Optional[Union[Mapper[Any], Type[Any]]] = None, inherit_condition: Optional[_ColumnExpressionArgument[bool]] = None, inherit_foreign_keys: Optional[Sequence[_ORMColumnExprArgument[Any]]] = None, always_refresh: bool = False, version_id_col: Optional[_ORMColumnExprArgument[Any]] = None, version_id_generator: Optional[Union[Literal[False], Callable[[Any], Any]]] = None, polymorphic_on: Optional[Union[_ORMColumnExprArgument[Any], str, MapperProperty[Any]]] = None, _polymorphic_map: Optional[Dict[Any, Mapper[Any]]] = None, polymorphic_identity: Optional[Any] = None, concrete: bool = False, with_polymorphic: Optional[_WithPolymorphicArg] = None, polymorphic_abstract: bool = False, polymorphic_load: Optional[Literal['selectin', 'inline']] = None, allow_partial_pks: bool = True, batch: bool = True, column_prefix: Optional[str] = None, include_properties: Optional[Sequence[str]] = None, exclude_properties: Optional[Sequence[str]] = None, passive_updates: bool = True, passive_deletes: bool = False, confirm_deleted_rows: bool = True, eager_defaults: Literal[True, False, 'auto'] = 'auto', legacy_is_orphan: bool = False, _compiled_cache_size: int = 100)
      + mapper(): Mapper[_O]
      + entity()
      + mapped_table()
      + add_properties(dict_of_properties)
      + add_property(key: str, prop: Union[Column[Any], MapperProperty[Any]])
      + has_property(key: str): bool
      + get_property(key: str, _configure_mappers: bool = False): MapperProperty[Any]
      + get_property_by_column(column: ColumnElement[_T]): MapperProperty[_T]
      + iterate_properties()
      + select_identity_token()
      + selectable(): FromClause
      + attrs(): util.ReadOnlyProperties[MapperProperty[Any]]
      + all_orm_descriptors(): util.ReadOnlyProperties[InspectionAttr]
      + synonyms(): util.ReadOnlyProperties[SynonymProperty[Any]]
      + entity_namespace()
      + column_attrs(): util.ReadOnlyProperties[ColumnProperty[Any]]
      + relationships(): util.ReadOnlyProperties[RelationshipProperty[Any]]
      + composites(): util.ReadOnlyProperties[CompositeProperty[Any]]
      + common_parent(other: Mapper[Any]): bool
      + is_sibling(other: Mapper[Any]): bool
      + isa(other: Mapper[Any]): bool
      + iterate_to_root(): Iterator[Mapper[Any]]
      + self_and_descendants(): Sequence[Mapper[Any]]
      + polymorphic_iterator(): Iterator[Mapper[Any]]
      + primary_mapper(): Mapper[Any]
      + primary_base_mapper(): Mapper[Any]
      + identity_key_from_row(row: Union[Row[Any], RowMapping], identity_token: Optional[Any] = None, adapter: Optional[ORMAdapter] = None): _IdentityKeyType[_O]
      + identity_key_from_primary_key(primary_key: Tuple[Any, ...], identity_token: Optional[Any] = None): _IdentityKeyType[_O]
      + identity_key_from_instance(instance: _O): _IdentityKeyType[_O]
      + primary_key_from_instance(instance: _O): Tuple[Any, ...]
      + cascade_iterator(type_: str, state: InstanceState[_O], halt_on: Optional[Callable[[InstanceState[Any]], bool]] = None): Iterator[Tuple[object, Mapper[Any], InstanceState[Any], _InstanceDict]]
  }

  class PathRegistry {
      + is_token = False
      + is_root = False
      + has_entity = False
      + is_property = False
      + is_entity = False
      + is_unnatural: bool
      + path: _PathRepresentation
      + natural_path: _PathRepresentation
      + parent: Optional[PathRegistry]
      + root: RootRegistry
  --
      + odd_element(index: int): _InternalEntityType[Any]
      + set(attributes: Dict[Any, Any], key, value)
      + setdefault(attributes: Dict[Any, Any], key, value)
      + get(attributes: Dict[Any, Any], key, value: Optional[Any] = None): Any
      + length(): int
      + pairs(): Iterator[Tuple[_InternalEntityType[Any], Union[str, StrategizedProperty[Any]]]]
      + contains_mapper(mapper: Mapper[Any]): bool
      + contains(attributes: Dict[Any, Any], key): bool
      + serialize(): _SerializedPath
      + {classmethod} deserialize(cls, path: _SerializedPath): PathRegistry
      + {classmethod} per_mapper(cls, mapper: Mapper[Any]): CachingEntityRegistry
      + {classmethod} per_mapper(cls, mapper: AliasedInsp[Any]): SlotsEntityRegistry
      + {classmethod} per_mapper(cls, mapper: _InternalEntityType[Any]): AbstractEntityRegistry
      + {classmethod} coerce(cls, raw: _PathRepresentation): PathRegistry
  }

  class CreatesToken {
      + is_aliased_class: bool
      + is_root: bool
  --
      + token(token: _StrPathToken): TokenRegistry
  }

  class RootRegistry {
      + inherit_cache = True
      + path = ()
      + natural_path = ()
      + has_entity = False
      + is_aliased_class = False
      + is_root = True
      + is_unnatural = False
  }

  class PathToken {
      + {classmethod} intern(cls, strvalue: str): PathToken
  }

  class TokenRegistry {
      + inherit_cache = True
      + token: _StrPathToken
      + parent: CreatesToken
      + has_entity = False
      + is_token = True
  --
      - __init__(parent: CreatesToken, token: _StrPathToken)
      + generate_for_superclasses(): Iterator[PathRegistry]
  }

  class PropRegistry {
      + inherit_cache = True
      + is_property = True
      + prop: StrategizedProperty[Any]
      + mapper: Optional[Mapper[Any]]
      + entity: Optional[_InternalEntityType[Any]]
  --
      - __init__(parent: AbstractEntityRegistry, prop: StrategizedProperty[Any])
      + entity_path(): AbstractEntityRegistry
  }

  class AbstractEntityRegistry {
      + has_entity = True
      + is_entity = True
      + parent: Union[RootRegistry, PropRegistry]
      + key: _InternalEntityType[Any]
      + entity: _InternalEntityType[Any]
      + is_aliased_class: bool
  --
      - __init__(parent: Union[RootRegistry, PropRegistry], entity: _InternalEntityType[Any])
      + root_entity(): _InternalEntityType[Any]
      + entity_path(): PathRegistry
      + mapper(): Mapper[Any]
  }

  class SlotsEntityRegistry {
      + inherit_cache = True
  }

  class CachingEntityRegistry {
      + inherit_cache = True
  --
      - __init__(parent: Union[RootRegistry, PropRegistry], entity: _InternalEntityType[Any])
      + pop(key, default): Any
  }

  class ColumnProperty {
      + strategy_wildcard_key = strategy_options._COLUMN_TOKEN
      + inherit_cache = True
      + columns: List[NamedColumn[Any]]
      + comparator_factory: Type[PropComparator[_T]]
  --
      - __init__(column: _ORMColumnExprArgument[_T])
      + declarative_scan(decl_scan: _ClassScanMapperConfig, registry: _RegistryType, cls: Type[Any], originating_module: Optional[str], key: str, mapped_container: Optional[Type[Mapped[Any]]], annotation: Optional[_AnnotationScanType], extracted_mapped_annotation: Optional[_AnnotationScanType], is_dataclass_field: bool)
      + mapper_property_to_assign(): Optional[MapperProperty[_T]]
      + columns_to_assign(): List[Tuple[Column[Any], int]]
      + expression(): roles.ColumnsClauseRole
      + instrument_class(mapper: Mapper[Any])
      + do_init()
      + copy(): ColumnProperty[_T]
      + merge(session: Session, source_state: InstanceState[Any], source_dict: _InstanceDict, dest_state: InstanceState[Any], dest_dict: _InstanceDict, load: bool, _recursive: Dict[Any, object], _resolve_conflict_map: Dict[_IdentityKeyType[Any], object])
  }

  class Comparator {
      + prop: RODescriptorReference[ColumnProperty[_PT]]
      + expressions: Sequence[NamedColumn[Any]]
  --
      + operate(op: OperatorType): ColumnElement[Any]
      + reverse_operate(op: OperatorType, other): ColumnElement[Any]
  }

  class MappedSQLExpression {
      + inherit_cache = True
  }

  class MappedColumn {
      + deferred: Union[_NoArg, bool]
      + deferred_raiseload: bool
      + deferred_group: Optional[str]
      + column: Column[_T]
      + foreign_keys: Optional[Set[ForeignKey]]
  --
      - __init__()
      + name(): str
      + mapper_property_to_assign(): Optional[MapperProperty[_T]]
      + columns_to_assign(): List[Tuple[Column[Any], int]]
      + operate(op: OperatorType): ColumnElement[Any]
      + reverse_operate(op: OperatorType, other): ColumnElement[Any]
      + found_in_pep593_annotated(): Any
      + declarative_scan(decl_scan: _ClassScanMapperConfig, registry: _RegistryType, cls: Type[Any], originating_module: Optional[str], key: str, mapped_container: Optional[Type[Mapped[Any]]], annotation: Optional[_AnnotationScanType], extracted_mapped_annotation: Optional[_AnnotationScanType], is_dataclass_field: bool)
      + declarative_scan_for_composite(registry: _RegistryType, cls: Type[Any], originating_module: Optional[str], key: str, param_name: str, param_annotation: _AnnotationScanType)
  }

  class Query {
      + load_options = QueryContext.default_load_options + {'_legacy_uniquing': True}
      + session: Session
      + dispatch: dispatcher[Query[_T]]
      + apply_labels = with_labels
  --
      - __init__(entities: Union[_ColumnsClauseArgument[Any], Sequence[_ColumnsClauseArgument[Any]]], session: Optional[Session] = None)
      + tuples(): Query[Tuple[_O]]
      + statement(): Union[Select[_T], FromStatement[_T], UpdateBase]
      + subquery(name: Optional[str] = None, with_labels: bool = False, reduce_columns: bool = False): Subquery
      + cte(name: Optional[str] = None, recursive: bool = False, nesting: bool = False): CTE
      + label(name: Optional[str]): Label[Any]
      + as_scalar(): ScalarSelect[_MAYBE_ENTITY]
      + as_scalar(): ScalarSelect[_NOT_ENTITY]
      + as_scalar(): ScalarSelect[Any]
      + as_scalar(): ScalarSelect[Any]
      + scalar_subquery(): ScalarSelect[Any]
      + scalar_subquery(): ScalarSelect[_NOT_ENTITY]
      + scalar_subquery(): ScalarSelect[Any]
      + scalar_subquery(): ScalarSelect[Any]
      + selectable(): Union[Select[_T], FromStatement[_T], UpdateBase]
      + only_return_tuples(value: Literal[True]): RowReturningQuery[Tuple[_O]]
      + only_return_tuples(value: Literal[False]): Query[_O]
      + only_return_tuples(value: bool): Query[Any]
      + is_single_entity(): bool
      + enable_eagerloads(value: bool): Self
      + with_labels(): Self
      + get_label_style(): SelectLabelStyle
      + set_label_style(style: SelectLabelStyle): Self
      + enable_assertions(value: bool): Self
      + whereclause(): Optional[ColumnElement[bool]]
      + yield_per(count: int): Self
      + get(ident: _PKIdentityArgument): Optional[Any]
      + lazy_loaded_from(): Optional[InstanceState[Any]]
      + correlate(): Self
      + autoflush(setting: bool): Self
      + populate_existing(): Self
      + with_parent(instance: object, property: Optional[attributes.QueryableAttribute[Any]] = None, from_entity: Optional[_ExternalEntityType[Any]] = None): Self
      + add_entity(entity: _EntityType[Any], alias: Optional[Union[Alias, Subquery]] = None): Query[Any]
      + with_session(session: Session): Self
      + values(): Iterable[Any]
      + value(column: _ColumnExpressionArgument[Any]): Any
      + with_entities(_entity: _EntityType[_O]): Query[_O]
      + with_entities(_colexpr: roles.TypedColumnsClauseRole[_T]): RowReturningQuery[Tuple[_T]]
      + with_entities(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1]): RowReturningQuery[Tuple[_T0, _T1]]
      + with_entities(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2]): RowReturningQuery[Tuple[_T0, _T1, _T2]]
      + with_entities(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3]]
      + with_entities(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4]]
      + with_entities(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5]]
      + with_entities(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5], __ent6: _TCCA[_T6]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5, _T6]]
      + with_entities(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5], __ent6: _TCCA[_T6], __ent7: _TCCA[_T7]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7]]
      + with_entities(): Query[Any]
      + with_entities(): Query[Any]
      + add_columns(): Query[Any]
      + add_column(column: _ColumnExpressionArgument[Any]): Query[Any]
      + options(): Self
      + with_transformation(fn: Callable[[Query[Any]], Query[Any]]): Query[Any]
      + get_execution_options(): _ImmutableExecuteOptions
      + execution_options(): Self
      + execution_options(): Self
      + execution_options(): Self
      + with_for_update(): Self
      + params(__params: Optional[Dict[str, Any]] = None): Self
      + where(): Self
      + filter(): Self
      + filter_by(): Self
      + order_by(__first: Union[Literal[None, False, _NoArg.NO_ARG], _ColumnExpressionOrStrLabelArgument[Any]] = _NoArg.NO_ARG): Self
      + group_by(__first: Union[Literal[None, False, _NoArg.NO_ARG], _ColumnExpressionOrStrLabelArgument[Any]] = _NoArg.NO_ARG): Self
      + having(): Self
      + union(): Self
      + union_all(): Self
      + intersect(): Self
      + intersect_all(): Self
      + except_(): Self
      + except_all(): Self
      + join(target: _JoinTargetArgument, onclause: Optional[_OnClauseArgument] = None): Self
      + outerjoin(target: _JoinTargetArgument, onclause: Optional[_OnClauseArgument] = None): Self
      + reset_joinpoint(): Self
      + select_from(): Self
      + slice(start: int, stop: int): Self
      + limit(limit: _LimitOffsetType): Self
      + offset(offset: _LimitOffsetType): Self
      + distinct(): Self
      + all(): List[_T]
      + from_statement(statement: ExecutableReturnsRows): Self
      + first(): Optional[_T]
      + one_or_none(): Optional[_T]
      + one(): _T
      + scalar(): Any
      + column_descriptions(): List[ORMColumnDescription]
      + instances(result_proxy: CursorResult[Any], context: Optional[QueryContext] = None): Any
      + merge_result(iterator: Union[FrozenResult[Any], Iterable[Sequence[Any]], Iterable[object]], load: bool = True): Union[FrozenResult[Any], Iterable[Any]]
      + exists(): Exists
      + count(): int
      + delete(synchronize_session: SynchronizeSessionArgument = 'auto', delete_args: Optional[Dict[Any, Any]] = None): int
      + update(values: Dict[_DMLColumnArgument, Any], synchronize_session: SynchronizeSessionArgument = 'auto', update_args: Optional[Dict[Any, Any]] = None): int
  }

  class AliasOption {
      + inherit_cache = False
  --
      - __init__(alias: Union[Alias, Subquery])
      + process_compile_state(compile_state: ORMCompileState)
  }

  class BulkUD {
      - __init__(query: Query[Any])
      + session(): Session
  }

  class BulkUpdate {
      - __init__(query: Query[Any], values: Dict[_DMLColumnArgument, Any], update_kwargs: Optional[Dict[Any, Any]])
  }

  class BulkDelete {
      - __init__(query: Query[Any], delete_kwargs: Optional[Dict[Any, Any]])
  }

  class RowReturningQuery {
  }

  class RelationshipProperty {
      + strategy_wildcard_key = strategy_options._RELATIONSHIP_TOKEN
      + inherit_cache = True
      + primaryjoin: ColumnElement[bool]
      + secondaryjoin: Optional[ColumnElement[bool]]
      + secondary: Optional[FromClause]
      + order_by: _RelationshipOrderByArg
      + remote_side: Set[ColumnElement[Any]]
      + local_columns: Set[ColumnElement[Any]]
      + synchronize_pairs: _ColumnPairs
      + secondary_synchronize_pairs: Optional[_ColumnPairs]
      + local_remote_pairs: Optional[_ColumnPairs]
      + direction: RelationshipDirection
  --
      - __init__(argument: Optional[_RelationshipArgumentType[_T]] = None, secondary: Optional[_RelationshipSecondaryArgument] = None)
      + instrument_class(mapper: Mapper[Any])
      + merge(session: Session, source_state: InstanceState[Any], source_dict: _InstanceDict, dest_state: InstanceState[Any], dest_dict: _InstanceDict, load: bool, _recursive: Dict[Any, object], _resolve_conflict_map: Dict[_IdentityKeyType[Any], object])
      + cascade_iterator(type_: str, state: InstanceState[Any], dict_: _InstanceDict, visited_states: Set[InstanceState[Any]], halt_on: Optional[Callable[[InstanceState[Any]], bool]] = None): Iterator[Tuple[Any, Mapper[Any], InstanceState[Any], _InstanceDict]]
      + entity(): _InternalEntityType[_T]
      + mapper(): Mapper[_T]
      + do_init()
      + declarative_scan(decl_scan: _ClassScanMapperConfig, registry: _RegistryType, cls: Type[Any], originating_module: Optional[str], key: str, mapped_container: Optional[Type[Mapped[Any]]], annotation: Optional[_AnnotationScanType], extracted_mapped_annotation: Optional[_AnnotationScanType], is_dataclass_field: bool)
      + cascade(): CascadeOptions
      + cascade(cascade: Union[str, CascadeOptions])
  }

  class Comparator {
      + prop: RODescriptorReference[RelationshipProperty[_PT]]
      + entity: _InternalEntityType[_PT]
      + mapper: Mapper[_PT]
  --
      - __init__(prop: RelationshipProperty[_PT], parentmapper: _InternalEntityType[Any], adapt_to_entity: Optional[AliasedInsp[Any]] = None, of_type: Optional[_EntityType[_PT]] = None, extra_criteria: Tuple[ColumnElement[bool], ...] = ())
      + adapt_to_entity(adapt_to_entity: AliasedInsp[Any]): RelationshipProperty.Comparator[Any]
      + of_type(class_: _EntityType[Any]): PropComparator[_PT]
      + and_(): PropComparator[Any]
      + in_(other): NoReturn
      + any(criterion: Optional[_ColumnExpressionArgument[bool]] = None): ColumnElement[bool]
      + has(criterion: Optional[_ColumnExpressionArgument[bool]] = None): ColumnElement[bool]
      + contains(other: _ColumnExpressionArgument[Any]): ColumnElement[bool]
  }

  class JoinCondition {
      + primaryjoin_initial: Optional[ColumnElement[bool]]
      + primaryjoin: ColumnElement[bool]
      + secondaryjoin: Optional[ColumnElement[bool]]
      + secondary: Optional[FromClause]
      + prop: RelationshipProperty[Any]
      + synchronize_pairs: _ColumnPairs
      + secondary_synchronize_pairs: _ColumnPairs
      + direction: RelationshipDirection
      + parent_persist_selectable: FromClause
      + child_persist_selectable: FromClause
      + parent_local_selectable: FromClause
      + child_local_selectable: FromClause
  --
      - __init__(parent_persist_selectable: FromClause, child_persist_selectable: FromClause, parent_local_selectable: FromClause, child_local_selectable: FromClause)
      + primaryjoin_minus_local(): ColumnElement[bool]
      + secondaryjoin_minus_local(): ColumnElement[bool]
      + primaryjoin_reverse_remote(): ColumnElement[bool]
      + remote_columns(): Set[ColumnElement[Any]]
      + local_columns(): Set[ColumnElement[Any]]
      + foreign_key_columns(): Set[ColumnElement[Any]]
      + join_targets(source_selectable: Optional[FromClause], dest_selectable: FromClause, aliased: bool, single_crit: Optional[ColumnElement[bool]] = None, extra_criteria: Tuple[ColumnElement[bool], ...] = ()): Tuple[ColumnElement[bool], Optional[ColumnElement[bool]], Optional[FromClause], Optional[ClauseAdapter], FromClause]
      + create_lazy_clause(reverse_direction: bool = False): Tuple[ColumnElement[bool], Dict[str, ColumnElement[Any]], Dict[ColumnElement[Any], ColumnElement[Any]]]
  }

  class Relationship {
      + inherit_cache = True
  }

  class QueryPropertyDescriptor {
  }

  class scoped_session {
      + session_factory: sessionmaker[_S]
      + registry: ScopedRegistry[_S]
  --
      - __init__(session_factory: sessionmaker[_S], scopefunc: Optional[Callable[[], Any]] = None)
      + configure()
      + remove()
      + query_property(query_cls: Optional[Type[Query[_T]]] = None): QueryPropertyDescriptor
      + add(instance: object, _warn: bool = True)
      + add_all(instances: Iterable[object])
      + begin(nested: bool = False): SessionTransaction
      + begin_nested(): SessionTransaction
      + close()
      + reset()
      + commit()
      + connection(bind_arguments: Optional[_BindArguments] = None, execution_options: Optional[CoreExecuteOptionsParameter] = None): Connection
      + delete(instance: object)
      + execute(statement: TypedReturnsRows[_T], params: Optional[_CoreAnyExecuteParams] = None): Result[_T]
      + execute(statement: UpdateBase, params: Optional[_CoreAnyExecuteParams] = None): CursorResult[Any]
      + execute(statement: Executable, params: Optional[_CoreAnyExecuteParams] = None): Result[Any]
      + execute(statement: Executable, params: Optional[_CoreAnyExecuteParams] = None): Result[Any]
      + expire(instance: object, attribute_names: Optional[Iterable[str]] = None)
      + expire_all()
      + expunge(instance: object)
      + expunge_all()
      + flush(objects: Optional[Sequence[Any]] = None)
      + get(entity: _EntityBindKey[_O], ident: _PKIdentityArgument): Optional[_O]
      + get_one(entity: _EntityBindKey[_O], ident: _PKIdentityArgument): _O
      + get_bind(mapper: Optional[_EntityBindKey[_O]] = None): Union[Engine, Connection]
      + is_modified(instance: object, include_collections: bool = True): bool
      + bulk_save_objects(objects: Iterable[object], return_defaults: bool = False, update_changed_only: bool = True, preserve_order: bool = True)
      + bulk_insert_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]], return_defaults: bool = False, render_nulls: bool = False)
      + bulk_update_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]])
      + merge(instance: _O): _O
      + query(_entity: _EntityType[_O]): Query[_O]
      + query(_colexpr: TypedColumnsClauseRole[_T]): RowReturningQuery[Tuple[_T]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1]): RowReturningQuery[Tuple[_T0, _T1]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2]): RowReturningQuery[Tuple[_T0, _T1, _T2]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5], __ent6: _TCCA[_T6]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5, _T6]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5], __ent6: _TCCA[_T6], __ent7: _TCCA[_T7]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7]]
      + query(): Query[Any]
      + query(): Query[Any]
      + refresh(instance: object, attribute_names: Optional[Iterable[str]] = None, with_for_update: ForUpdateParameter = None)
      + rollback()
      + scalar(statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreSingleExecuteParams] = None): Optional[_T]
      + scalar(statement: Executable, params: Optional[_CoreSingleExecuteParams] = None): Any
      + scalar(statement: Executable, params: Optional[_CoreSingleExecuteParams] = None): Any
      + scalars(statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreAnyExecuteParams] = None): ScalarResult[_T]
      + scalars(statement: Executable, params: Optional[_CoreAnyExecuteParams] = None): ScalarResult[Any]
      + scalars(statement: Executable, params: Optional[_CoreAnyExecuteParams] = None): ScalarResult[Any]
      + bind(): Optional[Union[Engine, Connection]]
      + bind(attr: Optional[Union[Engine, Connection]])
      + dirty(): Any
      + deleted(): Any
      + new(): Any
      + identity_map(): IdentityMap
      + identity_map(attr: IdentityMap)
      + is_active(): Any
      + autoflush(): bool
      + autoflush(attr: bool)
      + no_autoflush(): Any
      + info(): Any
      + {classmethod} close_all(cls)
      + {classmethod} object_session(cls, instance: object): Optional[Session]
      + {classmethod} identity_key(cls, class_: Optional[Type[Any]] = None, ident: Union[Any, Tuple[Any, ...]] = None): _IdentityKeyType[Any]
  }

  class SessionTransactionState {
      + ACTIVE = 1
      + PREPARED = 2
      + COMMITTED = 3
      + DEACTIVE = 4
      + CLOSED = 5
      + PROVISIONING_CONNECTION = 6
  }

  class ORMExecuteState {
      + session: Session
      + statement: Executable
      + parameters: Optional[_CoreAnyExecuteParams]
      + execution_options: _ExecuteOptions
      + local_execution_options: _ExecuteOptions
      + bind_arguments: _BindArguments
  --
      - __init__(session: Session, statement: Executable, parameters: Optional[_CoreAnyExecuteParams], execution_options: _ExecuteOptions, bind_arguments: _BindArguments, compile_state_cls: Optional[Type[ORMCompileState]], events_todo: List[_InstanceLevelDispatch[Session]])
      + invoke_statement(statement: Optional[Executable] = None, params: Optional[_CoreAnyExecuteParams] = None, execution_options: Optional[OrmExecuteOptionsParameter] = None, bind_arguments: Optional[_BindArguments] = None): Result[Any]
      + bind_mapper(): Optional[Mapper[Any]]
      + all_mappers(): Sequence[Mapper[Any]]
      + is_orm_statement(): bool
      + is_executemany(): bool
      + is_select(): bool
      + is_from_statement(): bool
      + is_insert(): bool
      + is_update(): bool
      + is_delete(): bool
      + update_execution_options()
      + lazy_loaded_from(): Optional[InstanceState[Any]]
      + loader_strategy_path(): Optional[PathRegistry]
      + is_column_load(): bool
      + is_relationship_load(): bool
      + load_options(): Union[context.QueryContext.default_load_options, Type[context.QueryContext.default_load_options]]
      + update_delete_options(): Union[bulk_persistence.BulkUDCompileState.default_update_options, Type[bulk_persistence.BulkUDCompileState.default_update_options]]
      + user_defined_options(): Sequence[UserDefinedOption]
  }

  class SessionTransactionOrigin {
      + AUTOBEGIN = 0
      + BEGIN = 1
      + BEGIN_NESTED = 2
      + SUBTRANSACTION = 3
  }

  class SessionTransaction {
      + session: Session
      + origin: SessionTransactionOrigin
      + nested: bool = False
  --
      - __init__(session: Session, origin: SessionTransactionOrigin, parent: Optional[SessionTransaction] = None)
      + parent(): Optional[SessionTransaction]
      + is_active(): bool
      + connection(bindkey: Optional[Mapper[Any]], execution_options: Optional[_ExecuteOptions] = None): Connection
      + prepare()
      + commit(_to_root: bool = False)
      + rollback(_capture_exception: bool = False, _to_root: bool = False)
      + close(invalidate: bool = False)
  }

  class Session {
      + dispatch: dispatcher[Session]
      + identity_map: IdentityMap
      + bind: Optional[Union[Engine, Connection]]
      + hash_key: int
      + autoflush: bool
      + expire_on_commit: bool
      + enable_baked_queries: bool
      + twophase: bool
      + join_transaction_mode: JoinTransactionMode
      + connection_callable: Optional[_ConnectionCallableProto] = None
  --
      - __init__(bind: Optional[_SessionBind] = None)
      + in_transaction(): bool
      + in_nested_transaction(): bool
      + get_transaction(): Optional[SessionTransaction]
      + get_nested_transaction(): Optional[SessionTransaction]
      + info(): _InfoType
      + begin(nested: bool = False): SessionTransaction
      + begin_nested(): SessionTransaction
      + rollback()
      + commit()
      + prepare()
      + connection(bind_arguments: Optional[_BindArguments] = None, execution_options: Optional[CoreExecuteOptionsParameter] = None): Connection
      + execute(statement: TypedReturnsRows[_T], params: Optional[_CoreAnyExecuteParams] = None): Result[_T]
      + execute(statement: UpdateBase, params: Optional[_CoreAnyExecuteParams] = None): CursorResult[Any]
      + execute(statement: Executable, params: Optional[_CoreAnyExecuteParams] = None): Result[Any]
      + execute(statement: Executable, params: Optional[_CoreAnyExecuteParams] = None): Result[Any]
      + scalar(statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreSingleExecuteParams] = None): Optional[_T]
      + scalar(statement: Executable, params: Optional[_CoreSingleExecuteParams] = None): Any
      + scalar(statement: Executable, params: Optional[_CoreSingleExecuteParams] = None): Any
      + scalars(statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreAnyExecuteParams] = None): ScalarResult[_T]
      + scalars(statement: Executable, params: Optional[_CoreAnyExecuteParams] = None): ScalarResult[Any]
      + scalars(statement: Executable, params: Optional[_CoreAnyExecuteParams] = None): ScalarResult[Any]
      + close()
      + reset()
      + invalidate()
      + expunge_all()
      + bind_mapper(mapper: _EntityBindKey[_O], bind: _SessionBind)
      + bind_table(table: TableClause, bind: _SessionBind)
      + get_bind(mapper: Optional[_EntityBindKey[_O]] = None): Union[Engine, Connection]
      + query(_entity: _EntityType[_O]): Query[_O]
      + query(_colexpr: TypedColumnsClauseRole[_T]): RowReturningQuery[Tuple[_T]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1]): RowReturningQuery[Tuple[_T0, _T1]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2]): RowReturningQuery[Tuple[_T0, _T1, _T2]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5], __ent6: _TCCA[_T6]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5, _T6]]
      + query(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5], __ent6: _TCCA[_T6], __ent7: _TCCA[_T7]): RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7]]
      + query(): Query[Any]
      + query(): Query[Any]
      + no_autoflush(): Iterator[Session]
      + refresh(instance: object, attribute_names: Optional[Iterable[str]] = None, with_for_update: ForUpdateParameter = None)
      + expire_all()
      + expire(instance: object, attribute_names: Optional[Iterable[str]] = None)
      + expunge(instance: object)
      + add(instance: object, _warn: bool = True)
      + add_all(instances: Iterable[object])
      + delete(instance: object)
      + get(entity: _EntityBindKey[_O], ident: _PKIdentityArgument): Optional[_O]
      + get_one(entity: _EntityBindKey[_O], ident: _PKIdentityArgument): _O
      + merge(instance: _O): _O
      + enable_relationship_loading(obj: object)
      + flush(objects: Optional[Sequence[Any]] = None)
      + bulk_save_objects(objects: Iterable[object], return_defaults: bool = False, update_changed_only: bool = True, preserve_order: bool = True)
      + bulk_insert_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]], return_defaults: bool = False, render_nulls: bool = False)
      + bulk_update_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]])
      + is_modified(instance: object, include_collections: bool = True): bool
      + is_active(): bool
      + dirty(): IdentitySet
      + deleted(): IdentitySet
      + new(): IdentitySet
  }

  class sessionmaker {
      + class_: Type[_S]
  --
      - __init__(bind: Optional[_SessionBind] = ...)
      - __init__(bind: Optional[_SessionBind] = ...)
      - __init__(bind: Optional[_SessionBind] = None)
      + begin(): contextlib.AbstractContextManager[_S]
      + configure()
  }

  class InstanceState {
      + manager: ClassManager[_O]
      + session_id: Optional[int] = None
      + key: Optional[_IdentityKeyType[_O]] = None
      + runid: Optional[int] = None
      + load_options: Tuple[ORMOption, ...] = ()
      + load_path: PathRegistry = PathRegistry.root
      + insert_order: Optional[int] = None
      + obj: weakref.ref[_O]
      + committed_state: Dict[str, Any]
      + modified: bool = False
      + expired: bool = False
      + is_instance: bool = True
      + identity_token: object = None
      + expired_attributes: Set[str]
      + callables: Dict[str, Callable[[InstanceState[_O], PassiveFlag], Any]]
  --
      - __init__(obj: _O, manager: ClassManager[_O])
      + attrs(): util.ReadOnlyProperties[AttributeState]
      + transient(): bool
      + pending(): bool
      + deleted(): bool
      + was_deleted(): bool
      + persistent(): bool
      + detached(): bool
      + session(): Optional[Session]
      + async_session(): Optional[AsyncSession]
      + object(): Optional[_O]
      + identity(): Optional[Tuple[Any, ...]]
      + identity_key(): Optional[_IdentityKeyType[_O]]
      + parents(): Dict[int, Union[Literal[False], InstanceState[Any]]]
      + mapper(): Mapper[_O]
      + has_identity(): bool
      + dict(): _InstanceDict
      + get_history(key: str, passive: PassiveFlag): History
      + get_impl(key: str): AttributeImpl
      + unmodified(): Set[str]
      + unmodified_intersection(keys: Iterable[str]): Set[str]
      + unloaded(): Set[str]
      + unloaded_expirable(): Set[str]
  }

  class AttributeState {
      + state: InstanceState[Any]
      + key: str
  --
      - __init__(state: InstanceState[Any], key: str)
      + loaded_value(): Any
      + value(): Any
      + history(): History
      + load_history(): History
  }

  class PendingCollection {
      + deleted_items: util.IdentitySet
      + added_items: util.OrderedIdentitySet
  --
      - __init__()
      + merge_with_history(history: History): History
      + append(value)
      + remove(value)
  }

  class UninstrumentedColumnLoader {
      - __init__(parent, strategy_key)
      + setup_query(compile_state, query_entity, path, loadopt, adapter, column_collection = None)
      + create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
  }

  class ColumnLoader {
      - __init__(parent, strategy_key)
      + setup_query(compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators, check_for_adapt = False)
      + init_class_attribute(mapper)
      + create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
  }

  class ExpressionColumnLoader {
      - __init__(parent, strategy_key)
      + setup_query(compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators)
      + create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
      + init_class_attribute(mapper)
  }

  class DeferredColumnLoader {
      - __init__(parent, strategy_key)
      + create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
      + init_class_attribute(mapper)
      + setup_query(compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators, only_load_props = None)
  }

  class LoadDeferredColumns {
      - __init__(key: str, raiseload: bool = False)
  }

  class AbstractRelationshipLoader {
      - __init__(parent, strategy_key)
  }

  class DoNothingLoader {
  }

  class NoLoader {
      + init_class_attribute(mapper)
      + create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
  }

  class LazyLoader {
      + parent_property: RelationshipProperty[Any]
  --
      - __init__(parent: RelationshipProperty[Any], strategy_key: Tuple[Any, ...])
      + init_class_attribute(mapper)
      + create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
  }

  class LoadLazyAttribute {
      - __init__(key, initiating_strategy, loadopt, extra_criteria)
  }

  class PostLoader {
  }

  class ImmediateLoader {
      - __init__(parent, strategy_key)
      + init_class_attribute(mapper)
      + create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
  }

  class SubqueryLoader {
      - __init__(parent, strategy_key)
      + init_class_attribute(mapper)
      + create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
  }

  class JoinedLoader {
      - __init__(parent, strategy_key)
      + init_class_attribute(mapper)
      + setup_query(compile_state, query_entity, path, loadopt, adapter, column_collection = None, parentmapper = None, chained_from_outerjoin = False)
      + create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
  }

  class SelectInLoader {
      + query_info = collections.namedtuple('queryinfo', ['load_only_child', 'load_with_join', 'in_expr', 'pk_cols', 'zero_idx', 'child_lookup_cols'])
  --
      - __init__(parent, strategy_key)
      + init_class_attribute(mapper)
      + create_row_processor(context, query_entity, path, loadopt, mapper, result, adapter, populators)
  }

  class Load {
      + path: PathRegistry
      + context: Tuple[_LoadElement, ...]
      + additional_source_entities: Tuple[_InternalEntityType[Any], ...]
  --
      - __init__(entity: _EntityType[Any])
      + options(): Self
  }

  class UOWTransaction {
      + session: Session
      + transaction: SessionTransaction
      + attributes: Dict[str, Any]
      + deps: util.defaultdict[Mapper[Any], Set[DependencyProcessor]]
      + mappers: util.defaultdict[Mapper[Any], Set[InstanceState[Any]]]
  --
      - __init__(session: Session)
      + has_work()
      + was_already_deleted(state)
      + is_deleted(state)
      + memo(key, callable_)
      + remove_state_actions(state)
      + get_attribute_history(state, key, passive = attributes.PASSIVE_NO_INITIALIZE)
      + has_dep(processor)
      + register_preprocessor(processor, fromparent)
      + register_object(state: InstanceState[Any], isdelete: bool = False, listonly: bool = False, cancel_delete: bool = False, operation: Optional[str] = None, prop: Optional[MapperProperty] = None): bool
      + register_post_update(state, post_update_cols)
      + filter_states_for_dep(dep, states)
      + states_for_mapper_hierarchy(mapper, isdelete, listonly)
      + execute()
      + finalize_flush_changes()
  }

  class IterateMappersMixin {
  }

  class Preprocess {
      - __init__(dependency_processor, fromparent)
      + execute(uow)
  }

  class PostSortRec {
      + execute_aggregate(uow, recs)
  }

  class ProcessAll {
      - __init__(uow, dependency_processor, isdelete, fromparent)
      + execute(uow)
      + per_state_flush_actions(uow)
  }

  class PostUpdateAll {
      - __init__(uow, mapper, isdelete)
      + execute(uow)
  }

  class SaveUpdateAll {
      - __init__(uow, mapper)
      + execute(uow)
      + per_state_flush_actions(uow)
  }

  class DeleteAll {
      - __init__(uow, mapper)
      + execute(uow)
      + per_state_flush_actions(uow)
  }

  class ProcessState {
      - __init__(uow, dependency_processor, isdelete, state)
      + execute_aggregate(uow, recs)
  }

  class SaveUpdateState {
      - __init__(uow, state)
      + execute_aggregate(uow, recs)
  }

  class DeleteState {
      - __init__(uow, state)
      + execute_aggregate(uow, recs)
  }

  class CascadeOptions {
      + save_update: bool
      + delete: bool
      + refresh_expire: bool
      + merge: bool
      + expunge: bool
      + delete_orphan: bool
  --
      + {classmethod} from_string(cls, arg)
  }

  class ORMStatementAdapter {
      - __init__(role: _TraceAdaptRole, selectable: Selectable)
  }

  class ORMAdapter {
      + is_aliased_class: bool
      + aliased_insp: Optional[AliasedInsp[Any]]
  --
      - __init__(role: _TraceAdaptRole, entity: _InternalEntityType[Any])
  }

  class AliasedClass {
      - __init__(mapped_class_or_ac: _EntityType[_O], alias: Optional[FromClause] = None, name: Optional[str] = None, flat: bool = False, adapt_on_names: bool = False, with_polymorphic_mappers: Optional[Sequence[Mapper[Any]]] = None, with_polymorphic_discriminator: Optional[ColumnElement[Any]] = None, base_alias: Optional[AliasedInsp[Any]] = None, use_mapper_path: bool = False, represents_outer_join: bool = False)
  }

  class AliasedInsp {
      + mapper: Mapper[_O]
      + selectable: FromClause
      + with_polymorphic_mappers: Sequence[Mapper[Any]]
      + is_aliased_class = True
  --
      - __init__(entity: AliasedClass[_O], inspected: _InternalEntityType[_O], selectable: FromClause, name: Optional[str], with_polymorphic_mappers: Optional[Sequence[Mapper[Any]]], polymorphic_on: Optional[ColumnElement[Any]], _base_alias: Optional[AliasedInsp[Any]], _use_mapper_path: bool, adapt_on_names: bool, represents_outer_join: bool, nest_adapters: bool)
      + entity(): AliasedClass[_O]
      + entity_namespace(): AliasedClass[_O]
      + class_(): Type[_O]
  }

  class LoaderCriteriaOption {
      + root_entity: Optional[Type[Any]]
      + entity: Optional[_InternalEntityType[Any]]
      + where_criteria: Union[ColumnElement[bool], lambdas.DeferredLambdaElement]
      + deferred_where_criteria: bool
      + include_aliases: bool
      + propagate_to_loaders: bool
  --
      - __init__(entity_or_base: _EntityType[Any], where_criteria: Union[_ColumnExpressionArgument[bool], Callable[[Any], _ColumnExpressionArgument[bool]]], loader_only: bool = False, include_aliases: bool = False, propagate_to_loaders: bool = True, track_closure_variables: bool = True)
      + process_compile_state_replaced_entities(compile_state: ORMCompileState, mapper_entities: Iterable[_MapperEntity])
      + process_compile_state(compile_state: ORMCompileState)
      + get_global_criteria(attributes: Dict[Any, Any])
  }

  class Bundle {
      + single_entity = False
      + is_clause_element = False
      + is_mapper = False
      + is_aliased_class = False
      + is_bundle = True
      + proxy_set = util.EMPTY_SET
      + exprs: List[_ColumnsClauseElement]
      + columns: ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + c: ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
  --
      - __init__(name: str)
      + mapper(): Optional[Mapper[Any]]
      + entity(): Optional[_InternalEntityType[Any]]
      + entity_namespace(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + clauses()
      + label(name)
      + create_row_processor(query: Select[Any], procs: Sequence[Callable[[Row[Any]], Any]], labels: Sequence[str]): Callable[[Row[Any]], Any]
  }

  class WriteOnlyHistory {
      + unchanged_items: util.OrderedIdentitySet
      + added_items: util.OrderedIdentitySet
      + deleted_items: util.OrderedIdentitySet
  --
      - __init__(attr: WriteOnlyAttributeImpl, state: InstanceState[_T], passive: PassiveFlag, apply_to: Optional[WriteOnlyHistory[_T]] = None)
      + added_plus_unchanged(): List[_T]
      + all_items(): List[_T]
      + as_history(): attributes.History
      + indexed(index: Union[int, slice]): Union[List[_T], _T]
      + add_added(value: _T)
      + add_removed(value: _T)
  }

  class WriteOnlyAttributeImpl {
      + uses_objects: bool = True
      + default_accepts_scalar_loader: bool = False
      + supports_population: bool = False
      + collection: bool = False
      + dynamic: bool = True
      + order_by: _RelationshipOrderByArg = ()
      + collection_history_cls: Type[WriteOnlyHistory[Any]] = WriteOnlyHistory
      + query_class: Type[WriteOnlyCollection[Any]]
  --
      - __init__(class_: Union[Type[Any], AliasedClass[Any]], key: str, dispatch: _Dispatch[QueryableAttribute[Any]], target_mapper: Mapper[_T], order_by: _RelationshipOrderByArg)
      + get(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PassiveFlag.PASSIVE_OFF): Union[util.OrderedIdentitySet, WriteOnlyCollection[Any]]
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: Literal[None] = ..., passive: Literal[PassiveFlag.PASSIVE_OFF] = ...): CollectionAdapter
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: _AdaptedCollectionProtocol = ..., passive: PassiveFlag = ...): CollectionAdapter
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: Optional[_AdaptedCollectionProtocol] = ..., passive: PassiveFlag = ...): Union[Literal[LoaderCallableStatus.PASSIVE_NO_RESULT], CollectionAdapter]
      + get_collection(state: InstanceState[Any], dict_: _InstanceDict, user_data: Optional[_AdaptedCollectionProtocol] = None, passive: PassiveFlag = PassiveFlag.PASSIVE_OFF): Union[Literal[LoaderCallableStatus.PASSIVE_NO_RESULT], CollectionAdapter]
      + fire_append_event(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], collection_history: Optional[WriteOnlyHistory[Any]] = None)
      + fire_remove_event(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], collection_history: Optional[WriteOnlyHistory[Any]] = None)
      + set(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken] = None, passive: PassiveFlag = PassiveFlag.PASSIVE_OFF, check_old = None, pop: bool = False, _adapt: bool = True)
      + delete(): NoReturn
      + set_committed_value(state: InstanceState[Any], dict_: _InstanceDict, value): NoReturn
      + get_history(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PassiveFlag.PASSIVE_NO_FETCH): attributes.History
      + get_all_pending(state: InstanceState[Any], dict_: _InstanceDict, passive: PassiveFlag = PassiveFlag.PASSIVE_NO_INITIALIZE): List[Tuple[InstanceState[Any], Any]]
      + append(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], passive: PassiveFlag = PassiveFlag.PASSIVE_NO_FETCH)
      + remove(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], passive: PassiveFlag = PassiveFlag.PASSIVE_NO_FETCH)
      + pop(state: InstanceState[Any], dict_: _InstanceDict, value, initiator: Optional[AttributeEventToken], passive: PassiveFlag = PassiveFlag.PASSIVE_NO_FETCH)
  }

  class WriteOnlyLoader {
      + impl_class = WriteOnlyAttributeImpl
  --
      + init_class_attribute(mapper: Mapper[Any])
  }

  class DynamicCollectionAdapter {
      + data: Collection[Any]
  --
      - __init__(data: Collection[Any])
  }

  class AbstractCollectionWriter {
      + instance: _T
  --
      - __init__(attr: WriteOnlyAttributeImpl, state: InstanceState[_T])
  }

  class WriteOnlyCollection {
      + select(): Select[Tuple[_T]]
      + insert(): Insert
      + update(): Update
      + delete(): Delete
      + add_all(iterator: Iterable[_T])
      + add(item: _T)
      + remove(item: _T)
  }

  class Session {
      + exec(statement: Select[_TSelectParam]): TupleResult[_TSelectParam]
      + exec(statement: SelectOfScalar[_TSelectParam]): ScalarResult[_TSelectParam]
      + exec(statement: Union[Select[_TSelectParam], SelectOfScalar[_TSelectParam], Executable[_TSelectParam]]): Union[TupleResult[_TSelectParam], ScalarResult[_TSelectParam]]
      + execute(statement: _Executable, params: Optional[_CoreAnyExecuteParams] = None): Result[Any]
      + query(): _Query[Any]
  }

}

package pool {
  class PoolResetState {
      + transaction_was_reset: bool
      + terminate_only: bool
      + asyncio_safe: bool
  }

  class ResetStyle {
      + reset_rollback = 0
      + reset_commit = 1
      + reset_none = 2
  }

  class Pool {
      + dispatch: dispatcher[Pool]
      + echo: log._EchoFlagType
  --
      - __init__(creator: Union[_CreatorFnType, _CreatorWRecFnType], recycle: int = -1, echo: log._EchoFlagType = None, logging_name: Optional[str] = None, reset_on_return: _ResetStyleArgType = True, events: Optional[List[Tuple[_ListenerFnType, str]]] = None, dialect: Optional[Union[_ConnDialect, Dialect]] = None, pre_ping: bool = False, _dispatch: Optional[_DispatchCommon[Pool]] = None)
      + recreate(): Pool
      + dispose()
      + connect(): PoolProxiedConnection
      + status(): str
  }

  class ManagesConnection {
      + dbapi_connection: Optional[DBAPIConnection]
      + driver_connection: Optional[Any]
  --
      + info(): _InfoType
      + record_info(): Optional[_InfoType]
      + invalidate(e: Optional[BaseException] = None, soft: bool = False)
  }

  class ConnectionPoolEntry {
      + in_use(): bool
      + close()
  }

  class PoolProxiedConnection {
      + is_valid(): bool
      + is_detached(): bool
      + detach()
      + close()
  }

  class PoolEvents {
      + connect(dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry)
      + first_connect(dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry)
      + checkout(dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry, connection_proxy: PoolProxiedConnection)
      + checkin(dbapi_connection: Optional[DBAPIConnection], connection_record: ConnectionPoolEntry)
      + reset(dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry, reset_state: PoolResetState)
      + invalidate(dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry, exception: Optional[BaseException])
      + soft_invalidate(dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry, exception: Optional[BaseException])
      + close(dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry)
      + detach(dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry)
      + close_detached(dbapi_connection: DBAPIConnection)
  }

  class QueuePool {
      - __init__(creator: Union[_CreatorFnType, _CreatorWRecFnType], pool_size: int = 5, max_overflow: int = 10, timeout: float = 30.0, use_lifo: bool = False)
      + recreate(): QueuePool
      + dispose()
      + status(): str
      + size(): int
      + timeout(): float
      + checkedin(): int
      + overflow(): int
      + checkedout(): int
  }

  class AsyncAdaptedQueuePool {
  }

  class FallbackAsyncAdaptedQueuePool {
  }

  class NullPool {
      + status(): str
      + recreate(): NullPool
      + dispose()
  }

  class SingletonThreadPool {
      - __init__(creator: Union[_CreatorFnType, _CreatorWRecFnType], pool_size: int = 5)
      + recreate(): SingletonThreadPool
      + dispose()
      + status(): str
      + connect(): PoolProxiedConnection
  }

  class StaticPool {
      + connection(): _ConnectionRecord
      + status(): str
      + dispose()
      + recreate(): StaticPool
  }

  class AssertionPool {
      - __init__()
      + status(): str
      + dispose()
      + recreate(): AssertionPool
  }

}

package sql {
  class SupportsAnnotations {
      + proxy_set: util.generic_fn_descriptor[FrozenSet[Any]]
  }

  class SupportsWrappingAnnotations {
  }

  class SupportsCloneAnnotations {
  }

  class Annotated {
      - __init__(element: SupportsWrappingAnnotations, values: _AnnotationDict)
      + entity_namespace(): _EntityNamespace
  }

  class Immutable {
      + unique_params()
      + params()
  }

  class SingletonConstant {
      + proxy_set(): FrozenSet[ColumnElement[Any]]
  }

  class DialectKWArgs {
      + {classmethod} argument_for(cls, dialect_name, argument_name, default)
      + dialect_kwargs()
      + kwargs()
      + dialect_options()
  }

  class CompileState {
      + plugins: Dict[Tuple[str, str], Type[CompileState]] = {}
  --
      + {classmethod} create_for_statement(cls, statement: Executable, compiler: SQLCompiler): CompileState
      - __init__(statement, compiler)
      + {classmethod} get_plugin_class(cls, statement: Executable): Optional[Type[CompileState]]
      + {classmethod} plugin_for(cls, plugin_name: str, visit_name: str): Callable[[_Fn], _Fn]
  }

  class Generative {
  }

  class InPlaceGenerative {
  }

  class HasCompileState {
  }

  class Options {
      - __init__()
      + {classmethod} isinstance(cls, klass: Type[Any]): bool
      + add_to_element(name, value)
      + {classmethod} safe_merge(cls, other)
      + {classmethod} from_execution_options(cls, key, attrs, exec_options, statement_exec_options)
  }

  class CacheableOptions {
  }

  class ExecutableOption {
  }

  class Executable {
      + supports_execution: bool = True
      + is_select = False
      + is_from_statement = False
      + is_update = False
      + is_insert = False
      + is_text = False
      + is_delete = False
      + is_dml = False
  --
      + options(): Self
      + execution_options(): Self
      + execution_options(): Self
      + execution_options(): Self
      + get_execution_options(): _ExecuteOptions
  }

  class SchemaEventTarget {
      + dispatch: dispatcher[SchemaEventTarget]
  }

  class SchemaVisitor {
  }

  class ColumnCollection {
      - __init__(columns: Optional[Iterable[Tuple[_COLKEY, _COL_co]]] = None)
      + keys(): List[_COLKEY]
      + values(): List[_COL_co]
      + items(): List[Tuple[_COLKEY, _COL_co]]
      + compare(other: ColumnCollection[Any, Any]): bool
      + get(key: str, default: None = None): Optional[_COL_co]
      + get(key: str, default: _COL): Union[_COL_co, _COL]
      + get(key: str, default: Optional[_COL] = None): Optional[Union[_COL_co, _COL]]
      + clear(): NoReturn
      + remove(column)
      + update(iter_): NoReturn
      + add(column: ColumnElement[Any], key: Optional[_COLKEY] = None)
      + contains_column(col: ColumnElement[Any]): bool
      + as_readonly(): ReadOnlyColumnCollection[_COLKEY, _COL_co]
      + corresponding_column(column: _COL, require_embedded: bool = False): Optional[Union[_COL, _COL_co]]
  }

  class DedupeColumnCollection {
      + add(column: _NAMEDCOL, key: Optional[str] = None)
      + extend(iter_: Iterable[_NAMEDCOL])
      + remove(column: _NAMEDCOL)
      + replace(column: _NAMEDCOL, extra_remove: Optional[Iterable[_NAMEDCOL]] = None)
  }

  class ReadOnlyColumnCollection {
      - __init__(collection)
      + add(column, key = ...): Any
      + extend(elements): NoReturn
      + remove(item): NoReturn
  }

  class ColumnSet {
      + contains_column(col)
      + extend(cols)
  }

  class CacheConst {
      + NO_CACHE = 0
  }

  class CacheTraverseTarget {
      + CACHE_IN_PLACE = 0
      + CALL_GEN_CACHE_KEY = 1
      + STATIC_CACHE_KEY = 2
      + PROPAGATE_ATTRS = 3
      + ANON_NAME = 4
  }

  class HasCacheKey {
      + inherit_cache: Optional[bool] = None
  }

  class HasCacheKeyTraverse {
  }

  class MemoizedHasCacheKey {
  }

  class SlotsMemoizedHasCacheKey {
  }

  class CacheKey {
      + key: Tuple[Any, ...]
      + bindparams: Sequence[BindParameter[Any]]
  --
      + to_offline_string(statement_cache: MutableMapping[Any, str], statement: ClauseElement, parameters: _CoreSingleExecuteParams): str
  }

  class RoleImpl {
      - __init__(role_class)
  }

  class LiteralValueImpl {
  }

  class HasCacheKeyImpl {
  }

  class ExecutableOptionImpl {
  }

  class ExpressionElementImpl {
  }

  class BinaryElementImpl {
  }

  class InElementImpl {
  }

  class OnClauseImpl {
  }

  class WhereHavingImpl {
  }

  class StatementOptionImpl {
  }

  class ColumnArgumentImpl {
  }

  class ColumnArgumentOrKeyImpl {
  }

  class StrAsPlainColumnImpl {
  }

  class ByOfImpl {
  }

  class OrderByImpl {
  }

  class GroupByImpl {
  }

  class DMLColumnImpl {
  }

  class ConstExprImpl {
  }

  class TruncatedLabelImpl {
  }

  class DDLExpressionImpl {
  }

  class DDLConstraintColumnImpl {
  }

  class DDLReferredColumnImpl {
  }

  class LimitOffsetImpl {
  }

  class LabeledColumnExprImpl {
  }

  class ColumnsClauseImpl {
  }

  class ReturnsRowsImpl {
  }

  class StatementImpl {
  }

  class SelectStatementImpl {
  }

  class HasCTEImpl {
  }

  class IsCTEImpl {
  }

  class JoinTargetImpl {
  }

  class FromClauseImpl {
  }

  class StrictFromClauseImpl {
  }

  class AnonymizedFromClauseImpl {
  }

  class DMLTableImpl {
  }

  class DMLSelectImpl {
  }

  class CompoundElementImpl {
  }

  class ResultColumnsEntry {
      + keyname: str
      + name: str
      + objects: Tuple[Any, ...]
      + type: TypeEngine[Any]
  }

  class ExpandedState {
      + statement: str
      + parameters: _CoreSingleExecuteParams
      + processors: Mapping[str, _BindProcessorType[Any]]
      + positiontup: Optional[Sequence[str]]
      + parameter_expansion: Mapping[str, List[str]]
  --
      + positional_parameters(): Tuple[Any, ...]
      + additional_parameters(): _CoreSingleExecuteParams
  }

  class InsertmanyvaluesSentinelOpts {
      + NOT_SUPPORTED = 1
      + AUTOINCREMENT = 2
      + IDENTITY = 4
      + SEQUENCE = 8
      + ANY_AUTOINCREMENT = AUTOINCREMENT | IDENTITY | SEQUENCE
      + USE_INSERT_FROM_SELECT = 16
      + RENDER_SELECT_COL_CASTS = 64
  }

  class CompilerState {
      + COMPILING = 0
      + STRING_APPLIED = 1
      + NO_STATEMENT = 2
  }

  class Linting {
      + NO_LINTING = 0
      + COLLECT_CARTESIAN_PRODUCTS = 1
      + WARN_LINTING = 2
      + FROM_LINTING = COLLECT_CARTESIAN_PRODUCTS | WARN_LINTING
  }

  class FromLinter {
      + lint(start = None)
      + warn(stmt_type = 'SELECT')
  }

  class Compiled {
      + statement: Optional[ClauseElement] = None
      + string: str = ''
      + state: CompilerState
      + is_sql = False
      + is_ddl = False
      + schema_translate_map: Optional[SchemaTranslateMapType] = None
      + execution_options: _ExecuteOptions = util.EMPTY_DICT
      + preparer: IdentifierPreparer
      + compile_state: Optional[CompileState] = None
      + dml_compile_state: Optional[CompileState] = None
      + cache_key: Optional[CacheKey] = None
  --
      - __init__(dialect: Dialect, statement: Optional[ClauseElement], schema_translate_map: Optional[SchemaTranslateMapType] = None, render_schema_translate: bool = False, compile_kwargs: Mapping[str, Any] = util.immutabledict())
      + visit_unsupported_compilation(element, err)
      + sql_compiler()
      + process(obj: Visitable): str
      + construct_params(params: Optional[_CoreSingleExecuteParams] = None, extracted_parameters: Optional[Sequence[BindParameter[Any]]] = None, escape_names: bool = True): Optional[_MutableCoreSingleExecuteParams]
      + params()
  }

  class TypeCompiler {
      + ensure_kwarg = 'visit_\\w+'
  --
      - __init__(dialect: Dialect)
      + process(type_: TypeEngine[Any]): str
      + visit_unsupported_compilation(element, err: Exception): NoReturn
  }

  class ilike_case_insensitive {
      - __init__(element)
      + proxy_set()
      + type()
      + self_group()
  }

  class SQLCompiler {
      + extract_map = EXTRACT_MAP
      + bindname_escape_characters: ClassVar[Mapping[str, str]] = util.immutabledict({'%': 'P', '(': 'A', ')': 'Z', ':': 'C', '.': '_', '[': '_', ']': '_', ' ': '_'})
      + is_sql = True
      + compound_keywords = COMPOUND_KEYWORDS
      + isdelete: bool = False
      + isinsert: bool = False
      + isupdate: bool = False
      + postfetch: Optional[List[Column[Any]]]
      + insert_prefetch: Sequence[Column[Any]] = ()
      + update_prefetch: Sequence[Column[Any]] = ()
      + implicit_returning: Optional[Sequence[ColumnElement[Any]]] = None
      + isplaintext: bool = False
      + binds: Dict[str, BindParameter[Any]]
      + bind_names: Dict[BindParameter[Any], str]
      + stack: List[_CompilerStackEntry]
      + returning_precedes_values: bool = False
      + render_table_with_column_in_update_from: bool = False
      + ansi_bind_rules: bool = False
      + bindtemplate: str
      + compilation_bindtemplate: str
      + literal_execute_params: FrozenSet[BindParameter[Any]] = frozenset()
      + post_compile_params: FrozenSet[BindParameter[Any]] = frozenset()
      + escaped_bind_names: util.immutabledict[str, str] = util.EMPTY_DICT
      + has_out_parameters = False
      + postfetch_lastrowid = False
      + positiontup: Optional[List[str]] = None
      + inline: bool = False
      + ctes: Optional[MutableMapping[CTE, str]]
      + ctes_by_level_name: Dict[Tuple[int, str], CTE]
      + level_name_by_cte: Dict[CTE, Tuple[int, str, selectable._CTEOpts]]
      + ctes_recursive: bool
      + translate_select_structure = None
  --
      - __init__(dialect: Dialect, statement: Optional[ClauseElement], cache_key: Optional[CacheKey] = None, column_keys: Optional[Sequence[str]] = None, for_executemany: bool = False, linting: Linting = NO_LINTING, _supporting_against: Optional[SQLCompiler] = None)
      + insert_single_values_expr(): Optional[str]
      + effective_returning(): Optional[Sequence[ColumnElement[Any]]]
      + returning()
      + current_executable()
      + prefetch()
      + is_subquery()
      + sql_compiler()
      + construct_expanded_state(params: Optional[_CoreSingleExecuteParams] = None, escape_names: bool = True): ExpandedState
      + construct_params(params: Optional[_CoreSingleExecuteParams] = None, extracted_parameters: Optional[Sequence[BindParameter[Any]]] = None, escape_names: bool = True, _group_number: Optional[int] = None, _check: bool = True, _no_postcompile: bool = False): _MutableCoreSingleExecuteParams
      + params()
      + default_from()
      + visit_override_binds(override_binds)
      + visit_grouping(grouping, asfrom = False)
      + visit_select_statement_grouping(grouping)
      + visit_label_reference(element, within_columns_clause = False)
      + visit_textual_label_reference(element, within_columns_clause = False)
      + visit_label(label, add_to_result_map = None, within_label_clause = False, within_columns_clause = False, render_label_as_label = None, result_map_targets = ())
      + visit_lambda_element(element)
      + visit_column(column: ColumnClause[Any], add_to_result_map: Optional[_ResultMapAppender] = None, include_table: bool = True, result_map_targets: Tuple[Any, ...] = (), ambiguous_table_name_map: Optional[_AmbiguousTableNameMap] = None): str
      + visit_collation(element)
      + visit_fromclause(fromclause)
      + visit_index(index)
      + visit_typeclause(typeclause)
      + post_process_text(text)
      + escape_literal_column(text)
      + visit_textclause(textclause, add_to_result_map = None)
      + visit_textual_select(taf, compound_index = None, asfrom = False)
      + visit_null(expr)
      + visit_true(expr)
      + visit_false(expr)
      + visit_tuple(clauselist)
      + visit_clauselist(clauselist)
      + visit_expression_clauselist(clauselist)
      + visit_case(clause)
      + visit_type_coerce(type_coerce)
      + visit_cast(cast)
      + visit_over(over)
      + visit_withingroup(withingroup)
      + visit_funcfilter(funcfilter)
      + visit_extract(extract)
      + visit_scalar_function_column(element)
      + visit_function(func: Function[Any], add_to_result_map: Optional[_ResultMapAppender] = None): str
      + visit_next_value_func(next_value)
      + visit_sequence(sequence)
      + function_argspec(func)
      + visit_compound_select(cs, asfrom = False, compound_index = None)
      + visit_unary(unary, add_to_result_map = None, result_map_targets = ())
      + visit_truediv_binary(binary, operator)
      + visit_floordiv_binary(binary, operator)
      + visit_is_true_unary_operator(element, operator)
      + visit_is_false_unary_operator(element, operator)
      + visit_not_match_op_binary(binary, operator)
      + visit_not_in_op_binary(binary, operator)
      + visit_empty_set_op_expr(type_, expand_op)
      + visit_empty_set_expr(element_types)
      + visit_binary(binary, override_operator = None, eager_grouping = False, from_linter = None, lateral_from_linter = None)
      + visit_function_as_comparison_op_binary(element, operator)
      + visit_mod_binary(binary, operator)
      + visit_custom_op_binary(element, operator)
      + visit_custom_op_unary_operator(element, operator)
      + visit_custom_op_unary_modifier(element, operator)
      + visit_ilike_case_insensitive_operand(element)
      + visit_contains_op_binary(binary, operator)
      + visit_not_contains_op_binary(binary, operator)
      + visit_icontains_op_binary(binary, operator)
      + visit_not_icontains_op_binary(binary, operator)
      + visit_startswith_op_binary(binary, operator)
      + visit_not_startswith_op_binary(binary, operator)
      + visit_istartswith_op_binary(binary, operator)
      + visit_not_istartswith_op_binary(binary, operator)
      + visit_endswith_op_binary(binary, operator)
      + visit_not_endswith_op_binary(binary, operator)
      + visit_iendswith_op_binary(binary, operator)
      + visit_not_iendswith_op_binary(binary, operator)
      + visit_like_op_binary(binary, operator)
      + visit_not_like_op_binary(binary, operator)
      + visit_ilike_op_binary(binary, operator)
      + visit_not_ilike_op_binary(binary, operator)
      + visit_between_op_binary(binary, operator)
      + visit_not_between_op_binary(binary, operator)
      + visit_regexp_match_op_binary(binary, operator)
      + visit_not_regexp_match_op_binary(binary, operator)
      + visit_regexp_replace_op_binary(binary, operator)
      + visit_bindparam(bindparam, within_columns_clause = False, literal_binds = False, skip_bind_expression = False, literal_execute = False, render_postcompile = False)
      + render_bind_cast(type_, dbapi_type, sqltext)
      + render_literal_bindparam(bindparam, render_literal_value = NO_ARG, bind_expression_template = None)
      + render_literal_value(value, type_)
      + bindparam_string(name: str, post_compile: bool = False, expanding: bool = False, escaped_from: Optional[str] = None, bindparam_type: Optional[TypeEngine[Any]] = None, accumulate_bind_names: Optional[Set[str]] = None, visited_bindparam: Optional[List[str]] = None): str
      + visit_cte(cte: CTE, asfrom: bool = False, ashint: bool = False, fromhints: Optional[_FromHintsType] = None, visiting_cte: Optional[CTE] = None, from_linter: Optional[FromLinter] = None, cte_opts: selectable._CTEOpts = selectable._CTEOpts(False)): Optional[str]
      + visit_table_valued_alias(element)
      + visit_table_valued_column(element)
      + visit_alias(alias, asfrom = False, ashint = False, iscrud = False, fromhints = None, subquery = False, lateral = False, enclosing_alias = None, from_linter = None)
      + visit_subquery(subquery)
      + visit_lateral(lateral_)
      + visit_tablesample(tablesample, asfrom = False)
      + visit_values(element, asfrom = False, from_linter = None)
      + visit_scalar_values(element)
      + get_render_as_alias_suffix(alias_name_text)
      + format_from_hint_text(sqltext, table, hint, iscrud)
      + get_select_hint_text(byfroms)
      + get_from_hint_text(table, text)
      + get_crud_hint_text(table, text)
      + get_statement_hint_text(hint_texts)
      + visit_select(select_stmt, asfrom = False, insert_into = False, fromhints = None, compound_index = None, select_wraps_for = None, lateral = False, from_linter = None)
      + get_cte_preamble(recursive)
      + get_select_precolumns(select)
      + group_by_clause(select)
      + order_by_clause(select)
      + for_update_clause(select)
      + returning_clause(stmt: UpdateBase, returning_cols: Sequence[ColumnElement[Any]]): str
      + limit_clause(select)
      + fetch_clause(select, fetch_clause = None, require_offset = False, use_literal_execute_for_simple_int = False)
      + visit_table(table, asfrom = False, iscrud = False, ashint = False, fromhints = None, use_schema = True, from_linter = None, ambiguous_table_name_map = None)
      + visit_join(join, asfrom = False, from_linter = None)
      + visit_insert(insert_stmt, visited_bindparam = None, visiting_cte = None)
      + update_limit_clause(update_stmt)
      + delete_limit_clause(delete_stmt)
      + update_tables_clause(update_stmt, from_table, extra_froms)
      + update_from_clause(update_stmt, from_table, extra_froms, from_hints)
      + visit_update(update_stmt, visiting_cte = None)
      + delete_extra_from_clause(update_stmt, from_table, extra_froms, from_hints)
      + delete_table_clause(delete_stmt, from_table, extra_froms)
      + visit_delete(delete_stmt, visiting_cte = None)
      + visit_savepoint(savepoint_stmt)
      + visit_rollback_to_savepoint(savepoint_stmt)
      + visit_release_savepoint(savepoint_stmt)
  }

  class StrSQLCompiler {
      + visit_unsupported_compilation(element, err)
      + visit_getitem_binary(binary, operator)
      + visit_json_getitem_op_binary(binary, operator)
      + visit_json_path_getitem_op_binary(binary, operator)
      + visit_sequence(sequence)
      + returning_clause(stmt: UpdateBase, returning_cols: Sequence[ColumnElement[Any]]): str
      + update_from_clause(update_stmt, from_table, extra_froms, from_hints)
      + delete_extra_from_clause(update_stmt, from_table, extra_froms, from_hints)
      + visit_empty_set_expr(element_types)
      + get_from_hint_text(table, text)
      + visit_regexp_match_op_binary(binary, operator)
      + visit_not_regexp_match_op_binary(binary, operator)
      + visit_regexp_replace_op_binary(binary, operator)
      + visit_try_cast(cast)
  }

  class DDLCompiler {
      + is_ddl = True
  --
      + sql_compiler()
      + type_compiler()
      + construct_params(params: Optional[_CoreSingleExecuteParams] = None, extracted_parameters: Optional[Sequence[BindParameter[Any]]] = None, escape_names: bool = True): Optional[_MutableCoreSingleExecuteParams]
      + visit_ddl(ddl)
      + visit_create_schema(create)
      + visit_drop_schema(drop)
      + visit_create_table(create)
      + visit_create_column(create, first_pk = False)
      + create_table_constraints(table, _include_foreign_key_constraints = None)
      + visit_drop_table(drop)
      + visit_drop_view(drop)
      + visit_create_index(create, include_schema = False, include_table_schema = True)
      + visit_drop_index(drop)
      + visit_add_constraint(create)
      + visit_set_table_comment(create)
      + visit_drop_table_comment(drop)
      + visit_set_column_comment(create)
      + visit_drop_column_comment(drop)
      + visit_set_constraint_comment(create)
      + visit_drop_constraint_comment(drop)
      + get_identity_options(identity_options)
      + visit_create_sequence(create, prefix = None)
      + visit_drop_sequence(drop)
      + visit_drop_constraint(drop)
      + get_column_specification(column)
      + create_table_suffix(table)
      + post_create_table(table)
      + get_column_default_string(column)
      + render_default_string(default)
      + visit_table_or_column_check_constraint(constraint)
      + visit_check_constraint(constraint)
      + visit_column_check_constraint(constraint)
      + visit_primary_key_constraint(constraint)
      + visit_foreign_key_constraint(constraint)
      + define_constraint_remote_table(constraint, table, preparer)
      + visit_unique_constraint(constraint)
      + define_unique_constraint_distinct(constraint)
      + define_constraint_cascades(constraint)
      + define_constraint_deferrability(constraint)
      + define_constraint_match(constraint)
      + visit_computed_column(generated)
      + visit_identity_column(identity)
  }

  class GenericTypeCompiler {
      + visit_FLOAT(type_)
      + visit_DOUBLE(type_)
      + visit_DOUBLE_PRECISION(type_)
      + visit_REAL(type_)
      + visit_NUMERIC(type_)
      + visit_DECIMAL(type_)
      + visit_INTEGER(type_)
      + visit_SMALLINT(type_)
      + visit_BIGINT(type_)
      + visit_TIMESTAMP(type_)
      + visit_DATETIME(type_)
      + visit_DATE(type_)
      + visit_TIME(type_)
      + visit_CLOB(type_)
      + visit_NCLOB(type_)
      + visit_CHAR(type_)
      + visit_NCHAR(type_)
      + visit_VARCHAR(type_)
      + visit_NVARCHAR(type_)
      + visit_TEXT(type_)
      + visit_UUID(type_)
      + visit_BLOB(type_)
      + visit_BINARY(type_)
      + visit_VARBINARY(type_)
      + visit_BOOLEAN(type_)
      + visit_uuid(type_)
      + visit_large_binary(type_)
      + visit_boolean(type_)
      + visit_time(type_)
      + visit_datetime(type_)
      + visit_date(type_)
      + visit_big_integer(type_)
      + visit_small_integer(type_)
      + visit_integer(type_)
      + visit_real(type_)
      + visit_float(type_)
      + visit_double(type_)
      + visit_numeric(type_)
      + visit_string(type_)
      + visit_unicode(type_)
      + visit_text(type_)
      + visit_unicode_text(type_)
      + visit_enum(type_)
      + visit_null(type_)
      + visit_type_decorator(type_)
      + visit_user_defined(type_)
  }

  class StrSQLTypeCompiler {
      + process(type_)
      + visit_null(type_)
      + visit_user_defined(type_)
  }

  class IdentifierPreparer {
      + reserved_words = RESERVED_WORDS
      + legal_characters = LEGAL_CHARACTERS
      + illegal_initial_characters = ILLEGAL_INITIAL_CHARACTERS
      + initial_quote: str
      + final_quote: str
      + schema_for_object: _SchemaForObjectCallable = operator.attrgetter('schema')
  --
      - __init__(dialect, initial_quote = '"', final_quote = None, escape_quote = '"', quote_case_sensitive_collations = True, omit_schema = False)
      + validate_sql_phrase(element, reg)
      + quote_identifier(value: str): str
      + quote_schema(schema: str, force = None): str
      + quote(ident: str, force = None): str
      + format_collation(collation_name)
      + format_sequence(sequence, use_schema = True)
      + format_label(label: Label[Any], name: Optional[str] = None): str
      + format_alias(alias: Optional[AliasedReturnsRows], name: Optional[str] = None): str
      + format_savepoint(savepoint, name = None)
      + format_constraint(constraint, _alembic_quote = True)
      + truncate_and_render_index_name(name, _alembic_quote = True)
      + truncate_and_render_constraint_name(name, _alembic_quote = True)
      + format_index(index)
      + format_table(table, use_schema = True, name = None)
      + format_schema(name)
      + format_label_name(name, anon_map = None)
      + format_column(column, use_table = False, name = None, table_name = None, use_schema = False, anon_map = None)
      + format_table_seq(table, use_schema = True)
      + unformat_identifiers(identifiers)
  }

  class BaseDDLElement {
  }

  class DDLIfCallable {
  }

  class DDLIf {
      + dialect: Optional[str]
      + callable_: Optional[DDLIfCallable]
      + state: Optional[Any]
  }

  class ExecutableDDLElement {
      + target: Optional[SchemaItem] = None
  --
      + against(target: SchemaItem): Self
      + execute_if(dialect: Optional[str] = None, callable_: Optional[DDLIfCallable] = None, state: Optional[Any] = None): Self
  }

  class DDL {
      - __init__(statement, context = None)
  }

  class CreateSchema {
      + stringify_dialect = 'default'
  --
      - __init__(name: str, if_not_exists: bool = False)
  }

  class DropSchema {
      + stringify_dialect = 'default'
  --
      - __init__(name: str, cascade: bool = False, if_exists: bool = False)
  }

  class CreateTable {
      - __init__(element: Table, include_foreign_key_constraints: Optional[typing_Sequence[ForeignKeyConstraint]] = None, if_not_exists: bool = False)
  }

  class CreateConstraint {
      - __init__(element: Constraint)
  }

  class CreateColumn {
      - __init__(element)
  }

  class DropTable {
      - __init__(element: Table, if_exists: bool = False)
  }

  class CreateSequence {
      - __init__(element: Sequence, if_not_exists: bool = False)
  }

  class DropSequence {
      - __init__(element: Sequence, if_exists: bool = False)
  }

  class CreateIndex {
      - __init__(element, if_not_exists = False)
  }

  class DropIndex {
      - __init__(element, if_exists = False)
  }

  class AddConstraint {
      - __init__(element: Constraint)
  }

  class DropConstraint {
      - __init__(element: Constraint)
  }

  class SetTableComment {
  }

  class DropTableComment {
  }

  class SetColumnComment {
  }

  class DropColumnComment {
  }

  class SetConstraintComment {
  }

  class DropConstraintComment {
  }

  class InvokeDDLBase {
      - __init__(connection)
      + with_ddl_events(target)
  }

  class InvokeCreateDDLBase {
      + with_ddl_events(target)
  }

  class InvokeDropDDLBase {
      + with_ddl_events(target)
  }

  class SchemaGenerator {
      - __init__(dialect, connection, checkfirst = False, tables = None)
      + visit_metadata(metadata)
      + visit_table(table, create_ok = False, include_foreign_key_constraints = None, _is_metadata_operation = False)
      + visit_foreign_key_constraint(constraint)
      + visit_sequence(sequence, create_ok = False)
      + visit_index(index, create_ok = False)
  }

  class SchemaDropper {
      - __init__(dialect, connection, checkfirst = False, tables = None)
      + visit_metadata(metadata)
      + visit_index(index, drop_ok = False)
      + visit_table(table, drop_ok = False, _is_metadata_operation = False, _ignore_sequences = ())
      + visit_foreign_key_constraint(constraint)
      + visit_sequence(sequence, drop_ok = False)
  }

  class DMLState {
      + isupdate = False
      + isdelete = False
      + isinsert = False
      + statement: UpdateBase
  --
      - __init__(statement: UpdateBase, compiler: SQLCompiler)
      + {classmethod} get_entity_description(cls, statement: UpdateBase): Dict[str, Any]
      + {classmethod} get_returning_column_descriptions(cls, statement: UpdateBase): List[Dict[str, Any]]
      + dml_table(): _DMLTableElement
  }

  class InsertDMLState {
      + isinsert = True
      + include_table_with_column_exprs = False
  --
      - __init__(statement: Insert, compiler: SQLCompiler, disable_implicit_returning: bool = False)
  }

  class UpdateDMLState {
      + isupdate = True
      + include_table_with_column_exprs = False
  --
      - __init__(statement: Update, compiler: SQLCompiler)
  }

  class DeleteDMLState {
      + isdelete = True
  --
      - __init__(statement: Delete, compiler: SQLCompiler)
  }

  class UpdateBase {
      + named_with_column = False
      + table: _DMLTableElement
      + is_dml = True
  --
      + params(): NoReturn
      + with_dialect_options(): Self
      + return_defaults(): Self
      + is_derived_from(fromclause: Optional[FromClause]): bool
      + returning(): UpdateBase
      + corresponding_column(column: KeyedColumnElement[Any], require_embedded: bool = False): Optional[ColumnElement[Any]]
      + exported_columns(): ReadOnlyColumnCollection[Optional[str], ColumnElement[Any]]
      + with_hint(text: str, selectable: Optional[_DMLTableArgument] = None, dialect_name: str = '*'): Self
      + entity_description(): Dict[str, Any]
      + returning_column_descriptions(): List[Dict[str, Any]]
  }

  class ValuesBase {
      + select: Optional[Select[Any]] = None
  --
      - __init__(table: _DMLTableArgument)
      + values(): Self
  }

  class Insert {
      + select = None
      + include_insert_from_select_defaults = False
      + is_insert = True
      + table: TableClause
  --
      - __init__(table: _DMLTableArgument)
      + inline(): Self
      + from_select(names: Sequence[_DMLColumnArgument], select: Selectable, include_defaults: bool = True): Self
  }

  class ReturningInsert {
  }

  class DMLWhereBase {
      + table: _DMLTableElement
  --
      + where(): Self
      + filter(): Self
      + filter_by(): Self
      + whereclause(): Optional[ColumnElement[Any]]
  }

  class Update {
      + is_update = True
  --
      - __init__(table: _DMLTableArgument)
      + ordered_values(): Self
      + inline(): Self
  }

  class ReturningUpdate {
  }

  class Delete {
      + is_delete = True
  --
      - __init__(table: _DMLTableArgument)
  }

  class ReturningDelete {
  }

  class CompilerElement {
      + supports_execution = False
      + stringify_dialect = 'default'
  --
      + compile(bind: Optional[_HasDialect] = None, dialect: Optional[Dialect] = None): Compiled
  }

  class ClauseElement {
      + is_clause_element = True
      + is_selectable = False
      + is_dml = False
      + negation_clause: ColumnElement[bool]
  --
      + description(): Optional[str]
      + entity_namespace()
      + unique_params(__optionaldict: Optional[Dict[str, Any]] = None): Self
      + params(__optionaldict: Optional[Mapping[str, Any]] = None): Self
      + compare(other: ClauseElement): bool
      + self_group(against: Optional[OperatorType] = None): ClauseElement
  }

  class DQLDMLClauseElement {
  }

  class CompilerColumnElement {
  }

  class SQLCoreOperations {
  }

  class SQLColumnExpression {
  }

  class ColumnElement {
      + primary_key: bool = False
      + foreign_keys: AbstractSet[ForeignKey] = frozenset()
      + key: Optional[str] = None
      + type: TypeEngine[_T]
  --
      + self_group(against: None = None): ColumnElement[_T]
      + self_group(against: Optional[OperatorType] = None): ColumnElement[Any]
      + self_group(against: Optional[OperatorType] = None): ColumnElement[Any]
      + comparator(): TypeEngine.Comparator[_T]
      + operate(op: operators.OperatorType): ColumnElement[Any]
      + reverse_operate(op: operators.OperatorType, other): ColumnElement[Any]
      + expression(): ColumnElement[Any]
      + base_columns(): FrozenSet[ColumnElement[Any]]
      + proxy_set(): FrozenSet[ColumnElement[Any]]
      + shares_lineage(othercolumn: ColumnElement[Any]): bool
      + cast(type_: _TypeEngineArgument[_OPT]): Cast[_OPT]
      + label(name: Optional[str]): Label[_T]
      + anon_label(): str
      + anon_key_label(): str
  }

  class KeyedColumnElement {
      + key: str
  }

  class WrapsColumnExpression {
      + wrapped_column_expression(): ColumnElement[_T]
  }

  class BindParameter {
      + key: str
      + type: TypeEngine[_T]
      + value: Optional[_T]
      + inherit_cache = True
  --
      - __init__(key: Optional[str], value = _NoArg.NO_ARG, type_: Optional[_TypeEngineArgument[_T]] = None, unique: bool = False, required: Union[bool, Literal[_NoArg.NO_ARG]] = _NoArg.NO_ARG, quote: Optional[bool] = None, callable_: Optional[Callable[[], Any]] = None, expanding: bool = False, isoutparam: bool = False, literal_execute: bool = False, _compared_to_operator: Optional[OperatorType] = None, _compared_to_type: Optional[TypeEngine[Any]] = None, _is_crud: bool = False)
      + effective_value(): Optional[_T]
      + render_literal_execute(): BindParameter[_T]
  }

  class TypeClause {
      - __init__(type_)
  }

  class TextClause {
      + key: Optional[str] = None
  --
      - __init__(text: str)
      + bindparams(): Self
      + columns(): TextualSelect
      + type(): TypeEngine[Any]
      + comparator()
      + self_group(against: Optional[OperatorType] = None): Union[Self, Grouping[Any]]
  }

  class Null {
  }

  class False_ {
  }

  class True_ {
  }

  class ClauseList {
      + clauses: List[ColumnElement[Any]]
  --
      - __init__()
      + append(clause)
      + self_group(against: Optional[OperatorType] = None): Union[Self, Grouping[Any]]
  }

  class OperatorExpression {
      + operator: OperatorType
      + type: TypeEngine[_T]
      + group: bool = True
  --
      + is_comparison()
      + self_group(against: Optional[OperatorType] = None): Union[Self, Grouping[_T]]
  }

  class ExpressionClauseList {
      + clauses: typing_Tuple[ColumnElement[Any], ...]
      + group: bool
  --
      - __init__(operator: OperatorType)
  }

  class BooleanClauseList {
      + inherit_cache = True
  --
      - __init__()
      + {classmethod} and_(cls, initial_clause: Union[Literal[True], _ColumnExpressionArgument[bool], _NoArg] = _NoArg.NO_ARG): ColumnElement[bool]
      + {classmethod} or_(cls, initial_clause: Union[Literal[False], _ColumnExpressionArgument[bool], _NoArg] = _NoArg.NO_ARG): ColumnElement[bool]
      + self_group(against: Optional[OperatorType] = None): Union[Self, Grouping[bool]]
  }

  class Tuple {
      + type: TupleType
  --
      - __init__()
      + self_group(against: Optional[OperatorType] = None): Self
  }

  class Case {
      + whens: List[typing_Tuple[ColumnElement[bool], ColumnElement[_T]]]
      + else_: Optional[ColumnElement[_T]]
      + value: Optional[ColumnElement[Any]]
  --
      - __init__()
  }

  class Cast {
      + clause: ColumnElement[Any]
      + type: TypeEngine[_T]
      + typeclause: TypeClause
  --
      - __init__(expression: _ColumnExpressionArgument[Any], type_: _TypeEngineArgument[_T])
      + wrapped_column_expression()
  }

  class TryCast {
      + inherit_cache = True
  }

  class TypeCoerce {
      + clause: ColumnElement[Any]
      + type: TypeEngine[_T]
  --
      - __init__(expression: _ColumnExpressionArgument[Any], type_: _TypeEngineArgument[_T])
      + typed_expression()
      + wrapped_column_expression()
      + self_group(against: Optional[OperatorType] = None): TypeCoerce[_T]
  }

  class Extract {
      + expr: ColumnElement[Any]
      + field: str
  --
      - __init__(field: str, expr: _ColumnExpressionArgument[Any])
  }

  class UnaryExpression {
      + element: ClauseElement
  --
      - __init__(element: ColumnElement[Any], operator: Optional[OperatorType] = None, modifier: Optional[OperatorType] = None, type_: Optional[_TypeEngineArgument[_T]] = None, wraps_column_expression: bool = False)
      + self_group(against: Optional[OperatorType] = None): Union[Self, Grouping[_T]]
  }

  class CollectionAggregate {
      + inherit_cache = True
  --
      + operate(op)
      + reverse_operate(op, other)
  }

  class AsBoolean {
      + inherit_cache = True
  --
      - __init__(element, operator, negate)
      + wrapped_column_expression()
      + self_group(against: Optional[OperatorType] = None): Self
  }

  class BinaryExpression {
      + modifiers: Optional[Mapping[str, Any]]
      + left: ColumnElement[Any]
      + right: ColumnElement[Any]
  --
      - __init__(left: ColumnElement[Any], right: ColumnElement[Any], operator: OperatorType, type_: Optional[_TypeEngineArgument[_T]] = None, negate: Optional[OperatorType] = None, modifiers: Optional[Mapping[str, Any]] = None)
  }

  class Slice {
      - __init__(start, stop, step, _name = None)
      + self_group(against: Optional[OperatorType] = None): Self
  }

  class IndexExpression {
      + inherit_cache = True
  }

  class GroupedElement {
      + element: ClauseElement
  --
      + self_group(against: Optional[OperatorType] = None): Self
  }

  class Grouping {
      + element: Union[TextClause, ClauseList, ColumnElement[_T]]
  --
      - __init__(element: Union[TextClause, ClauseList, ColumnElement[_T]])
  }

  class Over {
      + order_by: Optional[ClauseList] = None
      + partition_by: Optional[ClauseList] = None
      + element: ColumnElement[_T]
      + range_: Optional[typing_Tuple[_IntOrRange, _IntOrRange]]
      + rows: Optional[typing_Tuple[_IntOrRange, _IntOrRange]]
  --
      - __init__(element: ColumnElement[_T], partition_by: Optional[_ByArgument] = None, order_by: Optional[_ByArgument] = None, range_: Optional[typing_Tuple[Optional[int], Optional[int]]] = None, rows: Optional[typing_Tuple[Optional[int], Optional[int]]] = None)
  }

  class WithinGroup {
      + order_by: Optional[ClauseList] = None
  --
      - __init__(element: Union[FunctionElement[_T], FunctionFilter[_T]])
      + over(): Over[_T]
      + filter(): Self
      + filter(__criterion0: _ColumnExpressionArgument[bool]): FunctionFilter[_T]
      + filter(): Union[Self, FunctionFilter[_T]]
  }

  class FunctionFilter {
      + criterion: Optional[ColumnElement[bool]] = None
  --
      - __init__(func: Union[FunctionElement[_T], WithinGroup[_T]])
      + filter(): Self
      + over(partition_by: Optional[Union[Iterable[_ColumnExpressionArgument[Any]], _ColumnExpressionArgument[Any]]] = None, order_by: Optional[Union[Iterable[_ColumnExpressionArgument[Any]], _ColumnExpressionArgument[Any]]] = None, range_: Optional[typing_Tuple[Optional[int], Optional[int]]] = None, rows: Optional[typing_Tuple[Optional[int], Optional[int]]] = None): Over[_T]
      + within_group(): WithinGroup[_T]
      + within_group_type(within_group: WithinGroup[_T]): Optional[TypeEngine[_T]]
      + self_group(against: Optional[OperatorType] = None): Union[Self, Grouping[_T]]
  }

  class NamedColumn {
      + is_literal = False
      + table: Optional[FromClause] = None
      + name: str
      + key: str
  --
      + description(): str
  }

  class Label {
      + name: str
  --
      - __init__(name: Optional[str], element: _ColumnExpressionArgument[_T], type_: Optional[_TypeEngineArgument[_T]] = None)
      + element(): ColumnElement[_T]
      + self_group(against: Optional[OperatorType] = None): Label[_T]
      + primary_key()
      + foreign_keys()
  }

  class ColumnClause {
      + table: Optional[FromClause]
      + is_literal: bool
      + onupdate: Optional[DefaultGenerator] = None
      + default: Optional[DefaultGenerator] = None
      + server_default: Optional[FetchedValue] = None
      + server_onupdate: Optional[FetchedValue] = None
  --
      - __init__(text: str, type_: Optional[_TypeEngineArgument[_T]] = None, is_literal: bool = False, _selectable: Optional[FromClause] = None)
      + get_children()
      + entity_namespace()
  }

  class TableValuedColumn {
      - __init__(scalar_alias: NamedFromClause, type_: TypeEngine[_T])
  }

  class CollationClause {
      - __init__(collation)
  }

  class SavepointClause {
      + inherit_cache = False
  }

  class RollbackToSavepointClause {
      + inherit_cache = False
  }

  class ReleaseSavepointClause {
      + inherit_cache = False
  }

  class quoted_name {
      + quote: Optional[bool]
  --
      + {classmethod} construct(cls, value: str, quote: Optional[bool]): quoted_name
      + {classmethod} construct(cls, value: None, quote: Optional[bool])
      + {classmethod} construct(cls, value: Optional[str], quote: Optional[bool]): Optional[quoted_name]
  }

  class AnnotatedColumnElement {
      - __init__(element, values)
      + name()
      + type()
      + table()
      + key()
      + info(): _InfoType
  }

  class conv {
  }

  class DDLEvents {
      + before_create(target: SchemaEventTarget, connection: Connection)
      + after_create(target: SchemaEventTarget, connection: Connection)
      + before_drop(target: SchemaEventTarget, connection: Connection)
      + after_drop(target: SchemaEventTarget, connection: Connection)
      + before_parent_attach(target: SchemaEventTarget, parent: SchemaItem)
      + after_parent_attach(target: SchemaEventTarget, parent: SchemaItem)
      + column_reflect(inspector: Inspector, table: Table, column_info: ReflectedColumn)
  }

  class FunctionElement {
      + packagenames: Tuple[str, ...] = ()
      + primary_key
      + clause_expr: Grouping[Any]
  --
      - __init__()
      + scalar_table_valued(name: str, type_: Optional[_TypeEngineArgument[_T]] = None): ScalarFunctionColumn[_T]
      + table_valued(): TableValuedAlias
      + column_valued(name: Optional[str] = None, joins_implicitly: bool = False): TableValuedColumn[_T]
      + columns(): ColumnCollection[str, KeyedColumnElement[Any]]
      + c(): ColumnCollection[str, KeyedColumnElement[Any]]
      + exported_columns(): ColumnCollection[str, KeyedColumnElement[Any]]
      + clauses(): ClauseList
      + over(): Over[_T]
      + within_group(): WithinGroup[_T]
      + filter(): Self
      + filter(__criterion0: _ColumnExpressionArgument[bool]): FunctionFilter[_T]
      + filter(): Union[Self, FunctionFilter[_T]]
      + as_comparison(left_index: int, right_index: int): FunctionAsBinary
      + within_group_type(within_group: WithinGroup[_S]): Optional[TypeEngine[_S]]
      + alias(name: Optional[str] = None, joins_implicitly: bool = False): TableValuedAlias
      + select(): Select[Tuple[_T]]
      + self_group(against: Optional[OperatorType] = None): ClauseElement
      + entity_namespace(): _EntityNamespace
  }

  class FunctionAsBinary {
      + sql_function: FunctionElement[Any]
      + left_index: int
      + right_index: int
  --
      - __init__(fn: FunctionElement[Any], left_index: int, right_index: int)
      + left_expr(): ColumnElement[Any]
      + left_expr(value: ColumnElement[Any])
      + right_expr(): ColumnElement[Any]
      + right_expr(value: ColumnElement[Any])
  }

  class ScalarFunctionColumn {
      + is_literal = False
      + table = None
  --
      - __init__(fn: FunctionElement[_T], name: str, type_: Optional[_TypeEngineArgument[_T]] = None)
  }

  class Function {
      + name: str
      + identifier: str
      + type: TypeEngine[_T]
  --
      - __init__(name: str)
      - __init__(name: str)
      - __init__(name: str)
  }

  class GenericFunction {
      + coerce_arguments = True
      + inherit_cache = True
      + name = 'GenericFunction'
  --
      - __init__()
  }

  class next_value {
      + type = sqltypes.Integer()
      + name = 'next_value'
  --
      - __init__(seq: schema.Sequence)
      + compare(other): bool
  }

  class AnsiFunction {
      + inherit_cache = True
  --
      - __init__()
  }

  class ReturnTypeFromArgs {
      + inherit_cache = True
  --
      - __init__(col: ColumnElement[_T])
      - __init__(col: _ColumnExpressionArgument[_T])
      - __init__(col: _ColumnExpressionOrLiteralArgument[_T])
      - __init__()
  }

  class coalesce {
      + inherit_cache = True
  }

  class max {
      + inherit_cache = True
  }

  class min {
      + inherit_cache = True
  }

  class sum {
      + inherit_cache = True
  }

  class now {
      + type = sqltypes.DateTime()
      + inherit_cache = True
  }

  class concat {
      + type = sqltypes.String()
      + inherit_cache = True
  }

  class char_length {
      + type = sqltypes.Integer()
      + inherit_cache = True
  --
      - __init__(arg: _ColumnExpressionArgument[str])
  }

  class random {
      + inherit_cache = True
  }

  class count {
      + type = sqltypes.Integer()
      + inherit_cache = True
  --
      - __init__(expression: Union[_ColumnExpressionArgument[Any], _StarOrOne, None] = None)
  }

  class current_date {
      + type = sqltypes.Date()
      + inherit_cache = True
  }

  class current_time {
      + type = sqltypes.Time()
      + inherit_cache = True
  }

  class current_timestamp {
      + type = sqltypes.DateTime()
      + inherit_cache = True
  }

  class current_user {
      + type = sqltypes.String()
      + inherit_cache = True
  }

  class localtime {
      + type = sqltypes.DateTime()
      + inherit_cache = True
  }

  class localtimestamp {
      + type = sqltypes.DateTime()
      + inherit_cache = True
  }

  class session_user {
      + type = sqltypes.String()
      + inherit_cache = True
  }

  class sysdate {
      + type = sqltypes.DateTime()
      + inherit_cache = True
  }

  class user {
      + type = sqltypes.String()
      + inherit_cache = True
  }

  class array_agg {
      + inherit_cache = True
  --
      - __init__()
  }

  class OrderedSetAgg {
      + array_for_multi_clause = False
      + inherit_cache = True
  --
      + within_group_type(within_group: WithinGroup[Any]): TypeEngine[Any]
  }

  class mode {
      + inherit_cache = True
  }

  class percentile_cont {
      + array_for_multi_clause = True
      + inherit_cache = True
  }

  class percentile_disc {
      + array_for_multi_clause = True
      + inherit_cache = True
  }

  class rank {
      + type = sqltypes.Integer()
      + inherit_cache = True
  }

  class dense_rank {
      + type = sqltypes.Integer()
      + inherit_cache = True
  }

  class percent_rank {
      + type: sqltypes.Numeric[decimal.Decimal] = sqltypes.Numeric()
      + inherit_cache = True
  }

  class cume_dist {
      + type: sqltypes.Numeric[decimal.Decimal] = sqltypes.Numeric()
      + inherit_cache = True
  }

  class cube {
      + inherit_cache = True
  }

  class rollup {
      + inherit_cache = True
  }

  class grouping_sets {
      + inherit_cache = True
  }

  class aggregate_strings {
      + type = sqltypes.String()
      + inherit_cache = True
  --
      - __init__(clause: _ColumnExpressionArgument[Any], separator: str)
  }

  class LambdaOptions {
      + enable_tracking = True
      + track_closure_variables = True
      + track_on: Optional[object] = None
      + global_track_bound_values = True
      + track_bound_values = True
      + lambda_cache: Optional[_LambdaCacheType] = None
  }

  class LambdaElement {
      + parent_lambda: Optional[StatementLambdaElement] = None
      + closure_cache_key: Union[Tuple[Any, ...], Literal[CacheConst.NO_CACHE]]
      + role: Type[SQLRole]
      + fn: _AnyLambdaType
      + tracker_key: Tuple[CodeType, ...]
  --
      - __init__(fn: _LambdaType, role: Type[SQLRole], opts: Union[Type[LambdaOptions], LambdaOptions] = LambdaOptions, apply_propagate_attrs: Optional[ClauseElement] = None)
  }

  class DeferredLambdaElement {
      - __init__(fn: _AnyLambdaType, role: Type[roles.SQLRole], opts: Union[Type[LambdaOptions], LambdaOptions] = LambdaOptions, lambda_args: Tuple[Any, ...] = ())
  }

  class StatementLambdaElement {
      + add_criteria(other: _StmtLambdaElementType[Any], enable_tracking: bool = True, track_on: Optional[Any] = None, track_closure_variables: bool = True, track_bound_values: bool = True): StatementLambdaElement
      + is_select()
      + is_update()
      + is_insert()
      + is_text()
      + is_delete()
      + is_dml()
      + spoil(): NullLambdaStatement
  }

  class NullLambdaStatement {
      - __init__(statement)
      + add_criteria(other)
  }

  class LinkedLambdaElement {
      + parent_lambda: StatementLambdaElement
  --
      - __init__(fn: _StmtLambdaElementType[Any], parent_lambda: StatementLambdaElement, opts: Union[Type[LambdaOptions], LambdaOptions])
  }

  class AnalyzedCode {
      + {classmethod} get(cls, fn, lambda_element, lambda_kw)
      - __init__(fn, lambda_element, opts)
  }

  class NonAnalyzedFunction {
      + closure_bindparams: Optional[List[BindParameter[Any]]] = None
      + bindparam_trackers: Optional[List[_BoundParameterGetter]] = None
      + is_sequence = False
      + expr: ClauseElement
  --
      - __init__(expr: ClauseElement)
      + expected_expr(): ClauseElement
  }

  class AnalyzedFunction {
      + closure_bindparams: Optional[List[BindParameter[Any]]]
      + expected_expr: Union[ClauseElement, List[ClauseElement]]
      + bindparam_trackers: Optional[List[_BoundParameterGetter]]
  --
      - __init__(analyzed_code, lambda_element, apply_propagate_attrs, fn)
  }

  class PyWrapper {
      - __init__(fn, name, to_evaluate, closure_index = None, getter = None, track_bound_values = True)
      + operate(op)
      + reverse_operate(op, other)
  }

  class ConventionDict {
      - __init__(const, table, convention)
  }

  class OperatorType {
  }

  class Operators {
      + op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Optional[Union[Type[TypeEngine[Any]], TypeEngine[Any]]] = None, python_impl: Optional[Callable[..., Any]] = None): Callable[[Any], Operators]
      + bool_op(opstring: str, precedence: int = 0, python_impl: Optional[Callable[..., Any]] = None): Callable[[Any], Operators]
      + operate(op: OperatorType): Operators
      + reverse_operate(op: OperatorType, other): Operators
  }

  class custom_op {
      - __init__(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Optional[Union[Type[TypeEngine[_T]], TypeEngine[_T]]] = None, natural_self_precedent: bool = False, eager_grouping: bool = False, python_impl: Optional[Callable[..., Any]] = None)
  }

  class ColumnOperators {
      + timetuple: Literal[None] = None
  --
      + is_distinct_from(other): ColumnOperators
      + is_not_distinct_from(other): ColumnOperators
      + concat(other): ColumnOperators
      + like(other, escape: Optional[str] = None): ColumnOperators
      + ilike(other, escape: Optional[str] = None): ColumnOperators
      + bitwise_xor(other): ColumnOperators
      + bitwise_or(other): ColumnOperators
      + bitwise_and(other): ColumnOperators
      + bitwise_not(): ColumnOperators
      + bitwise_lshift(other): ColumnOperators
      + bitwise_rshift(other): ColumnOperators
      + in_(other): ColumnOperators
      + not_in(other): ColumnOperators
      + not_like(other, escape: Optional[str] = None): ColumnOperators
      + not_ilike(other, escape: Optional[str] = None): ColumnOperators
      + is_(other): ColumnOperators
      + is_not(other): ColumnOperators
      + startswith(other, escape: Optional[str] = None, autoescape: bool = False): ColumnOperators
      + istartswith(other, escape: Optional[str] = None, autoescape: bool = False): ColumnOperators
      + endswith(other, escape: Optional[str] = None, autoescape: bool = False): ColumnOperators
      + iendswith(other, escape: Optional[str] = None, autoescape: bool = False): ColumnOperators
      + contains(other): ColumnOperators
      + icontains(other): ColumnOperators
      + match(other): ColumnOperators
      + regexp_match(pattern, flags: Optional[str] = None): ColumnOperators
      + regexp_replace(pattern, replacement, flags: Optional[str] = None): ColumnOperators
      + desc(): ColumnOperators
      + asc(): ColumnOperators
      + nulls_first(): ColumnOperators
      + nulls_last(): ColumnOperators
      + collate(collation: str): ColumnOperators
      + between(cleft, cright, symmetric: bool = False): ColumnOperators
      + distinct(): ColumnOperators
      + any_(): ColumnOperators
      + all_(): ColumnOperators
  }

  class SQLRole {
      + allows_lambda = False
      + uses_inspection = False
  }

  class UsesInspection {
      + uses_inspection = True
  }

  class AllowsLambdaRole {
      + allows_lambda = True
  }

  class HasCacheKeyRole {
  }

  class ExecutableOptionRole {
  }

  class LiteralValueRole {
  }

  class ColumnArgumentRole {
  }

  class ColumnArgumentOrKeyRole {
  }

  class StrAsPlainColumnRole {
  }

  class ColumnListRole {
  }

  class StringRole {
  }

  class TruncatedLabelRole {
  }

  class ColumnsClauseRole {
  }

  class TypedColumnsClauseRole {
  }

  class LimitOffsetRole {
  }

  class ByOfRole {
  }

  class GroupByRole {
  }

  class OrderByRole {
  }

  class StructuralRole {
  }

  class StatementOptionRole {
  }

  class OnClauseRole {
  }

  class WhereHavingRole {
  }

  class ExpressionElementRole {
      + label(name: Optional[str]): Label[_T]
  }

  class ConstExprRole {
  }

  class LabeledColumnExprRole {
  }

  class BinaryElementRole {
  }

  class InElementRole {
  }

  class JoinTargetRole {
  }

  class FromClauseRole {
      + named_with_column: bool
  }

  class StrictFromClauseRole {
  }

  class AnonymizedFromClauseRole {
  }

  class ReturnsRowsRole {
  }

  class StatementRole {
  }

  class SelectStatementRole {
      + subquery(): Subquery
  }

  class HasCTERole {
  }

  class IsCTERole {
  }

  class CompoundElementRole {
  }

  class DMLRole {
  }

  class DMLTableRole {
  }

  class DMLColumnRole {
  }

  class DMLSelectRole {
  }

  class DDLRole {
  }

  class DDLExpressionRole {
  }

  class DDLConstraintColumnRole {
  }

  class DDLReferredColumnRole {
  }

  class SchemaConst {
      + RETAIN_SCHEMA = 1
      + BLANK_SCHEMA = 2
      + NULL_UNSPECIFIED = 3
  }

  class SchemaItem {
      + create_drop_stringify_dialect = 'default'
  --
      + info(): _InfoType
  }

  class HasConditionalDDL {
      + ddl_if(dialect: Optional[str] = None, callable_: Optional[ddl.DDLIfCallable] = None, state: Optional[Any] = None): Self
  }

  class HasSchemaAttr {
      + schema: Optional[str]
  }

  class Table {
      + constraints: Set[Constraint]
      + indexes: Set[Index]
  --
      - __init__(name: str, metadata: MetaData)
      + foreign_key_constraints(): Set[ForeignKeyConstraint]
      + autoincrement_column(): Optional[Column[int]]
      + key(): str
      + add_is_dependent_on(table: Table)
      + append_column(column: ColumnClause[Any], replace_existing: bool = False)
      + append_constraint(constraint: Union[Index, Constraint])
      + create(bind: _CreateDropBind, checkfirst: bool = False)
      + drop(bind: _CreateDropBind, checkfirst: bool = False)
      + tometadata(metadata: MetaData, schema: Union[str, Literal[SchemaConst.RETAIN_SCHEMA]] = RETAIN_SCHEMA, referred_schema_fn: Optional[Callable[[Table, Optional[str], ForeignKeyConstraint, Optional[str]], Optional[str]]] = None, name: Optional[str] = None): Table
      + to_metadata(metadata: MetaData, schema: Union[str, Literal[SchemaConst.RETAIN_SCHEMA]] = RETAIN_SCHEMA, referred_schema_fn: Optional[Callable[[Table, Optional[str], ForeignKeyConstraint, Optional[str]], Optional[str]]] = None, name: Optional[str] = None): Table
  }

  class Column {
      + inherit_cache = True
      + key: str
      + server_default: Optional[FetchedValue]
      + table: Table
      + constraints: Set[Constraint]
      + foreign_keys: Set[ForeignKey]
      + index: Optional[bool]
      + unique: Optional[bool]
      + computed: Optional[Computed]
      + identity: Optional[Identity]
  --
      - __init__(__name_pos: Optional[Union[str, _TypeEngineArgument[_T], SchemaEventTarget]] = None, __type_pos: Optional[Union[_TypeEngineArgument[_T], SchemaEventTarget]] = None)
      + references(column: Column[Any]): bool
      + append_foreign_key(fk: ForeignKey)
      + copy(): Column[Any]
  }

  class ForeignKey {
      + parent: Column[Any]
      + target_fullname = property(_get_colspec)
  --
      - __init__(column: _DDLColumnArgument, _constraint: Optional[ForeignKeyConstraint] = None, use_alter: bool = False, name: _ConstraintNameArgument = None, onupdate: Optional[str] = None, ondelete: Optional[str] = None, deferrable: Optional[bool] = None, initially: Optional[str] = None, link_to_name: bool = False, match: Optional[str] = None, info: Optional[_InfoType] = None, comment: Optional[str] = None, _unresolvable: bool = False)
      + copy(): ForeignKey
      + references(table: Table): bool
      + get_referent(table: FromClause): Optional[Column[Any]]
      + column(): Column[Any]
  }

  class DefaultGenerator {
      + is_sequence = False
      + is_identity = False
      + is_server_default = False
      + is_clause_element = False
      + is_callable = False
      + is_scalar = False
      + has_arg = False
      + is_sentinel = False
      + column: Optional[Column[Any]]
  --
      - __init__(for_update: bool = False)
  }

  class ColumnDefault {
      + arg
  }

  class ScalarElementColumnDefault {
      + is_scalar = True
      + has_arg = True
  --
      - __init__(arg, for_update: bool = False)
  }

  class ColumnElementColumnDefault {
      + is_clause_element = True
      + has_arg = True
      + arg: _SQLExprDefault
  --
      - __init__(arg: _SQLExprDefault, for_update: bool = False)
  }

  class CallableColumnDefault {
      + is_callable = True
      + arg: _CallableColumnDefaultProtocol
      + has_arg = True
  --
      - __init__(arg: Union[_CallableColumnDefaultProtocol, Callable[[], Any]], for_update: bool = False)
  }

  class IdentityOptions {
      - __init__(start: Optional[int] = None, increment: Optional[int] = None, minvalue: Optional[int] = None, maxvalue: Optional[int] = None, nominvalue: Optional[bool] = None, nomaxvalue: Optional[bool] = None, cycle: Optional[bool] = None, cache: Optional[int] = None, order: Optional[bool] = None)
  }

  class Sequence {
      + is_sequence = True
      + column: Optional[Column[Any]]
      + data_type: Optional[TypeEngine[int]]
  --
      - __init__(name: str, start: Optional[int] = None, increment: Optional[int] = None, minvalue: Optional[int] = None, maxvalue: Optional[int] = None, nominvalue: Optional[bool] = None, nomaxvalue: Optional[bool] = None, cycle: Optional[bool] = None, schema: Optional[Union[str, Literal[SchemaConst.BLANK_SCHEMA]]] = None, cache: Optional[int] = None, order: Optional[bool] = None, data_type: Optional[_TypeEngineArgument[int]] = None, optional: bool = False, quote: Optional[bool] = None, metadata: Optional[MetaData] = None, quote_schema: Optional[bool] = None, for_update: bool = False)
      + next_value(): Function[int]
      + create(bind: _CreateDropBind, checkfirst: bool = True)
      + drop(bind: _CreateDropBind, checkfirst: bool = True)
  }

  class FetchedValue {
      + is_server_default = True
      + reflected = False
      + has_argument = False
      + is_clause_element = False
      + is_identity = False
      + column: Optional[Column[Any]]
  --
      - __init__(for_update: bool = False)
  }

  class DefaultClause {
      + has_argument = True
  --
      - __init__(arg: Union[str, ClauseElement, TextClause], for_update: bool = False, _reflected: bool = False)
  }

  class Constraint {
      - __init__(name: _ConstraintNameArgument = None, deferrable: Optional[bool] = None, initially: Optional[str] = None, info: Optional[_InfoType] = None, comment: Optional[str] = None, _create_rule: Optional[Any] = None, _type_bound: bool = False)
      + table(): Table
      + copy(): Self
  }

  class ColumnCollectionMixin {
      - __init__()
      + columns(): ReadOnlyColumnCollection[str, Column[Any]]
      + c(): ReadOnlyColumnCollection[str, Column[Any]]
  }

  class ColumnCollectionConstraint {
      + columns: ReadOnlyColumnCollection[str, Column[Any]]
  --
      - __init__()
      + copy(): ColumnCollectionConstraint
      + contains_column(col: Column[Any]): bool
  }

  class CheckConstraint {
      - __init__(sqltext: _TextCoercedExpressionArgument[Any], name: _ConstraintNameArgument = None, deferrable: Optional[bool] = None, initially: Optional[str] = None, table: Optional[Table] = None, info: Optional[_InfoType] = None, _create_rule: Optional[Any] = None, _autoattach: bool = True, _type_bound: bool = False)
      + is_column_level(): bool
      + copy(): CheckConstraint
  }

  class ForeignKeyConstraint {
      + columns: ReadOnlyColumnCollection[str, Column[Any]]
      + elements: List[ForeignKey]
  --
      - __init__(columns: _typing_Sequence[_DDLColumnArgument], refcolumns: _typing_Sequence[_DDLColumnArgument], name: _ConstraintNameArgument = None, onupdate: Optional[str] = None, ondelete: Optional[str] = None, deferrable: Optional[bool] = None, initially: Optional[str] = None, use_alter: bool = False, link_to_name: bool = False, match: Optional[str] = None, table: Optional[Table] = None, info: Optional[_InfoType] = None, comment: Optional[str] = None)
      + referred_table(): Table
      + column_keys(): _typing_Sequence[str]
      + copy(): ForeignKeyConstraint
  }

  class PrimaryKeyConstraint {
      - __init__()
      + columns_autoinc_first(): List[Column[Any]]
  }

  class UniqueConstraint {
  }

  class Index {
      + table: Optional[Table]
      + expressions: _typing_Sequence[Union[str, ColumnElement[Any]]]
  --
      - __init__(name: Optional[str])
      + create(bind: _CreateDropBind, checkfirst: bool = False)
      + drop(bind: _CreateDropBind, checkfirst: bool = False)
  }

  class MetaData {
      + tables: util.FacadeDict[str, Table]
  --
      - __init__(schema: Optional[str] = None, quote_schema: Optional[bool] = None, naming_convention: Optional[_NamingSchemaParameter] = None, info: Optional[_InfoType] = None)
      + clear()
      + remove(table: Table)
      + sorted_tables(): List[Table]
      + reflect(bind: Engine, schema: Optional[str] = ..., views: bool = ..., only: Union[_typing_Sequence[str], Callable[[str, MetaData], bool], None] = ..., extend_existing: bool = ..., autoload_replace: bool = ..., resolve_fks: bool = ...)
      + reflect(bind: Connection, schema: Optional[str] = ..., views: bool = ..., only: Union[_typing_Sequence[str], Callable[[str, MetaData], bool], None] = ..., extend_existing: bool = ..., autoload_replace: bool = ..., resolve_fks: bool = ...)
      + reflect(bind: Union[Engine, Connection], schema: Optional[str] = None, views: bool = False, only: Union[_typing_Sequence[str], Callable[[str, MetaData], bool], None] = None, extend_existing: bool = False, autoload_replace: bool = True, resolve_fks: bool = True)
      + create_all(bind: _CreateDropBind, tables: Optional[_typing_Sequence[Table]] = None, checkfirst: bool = True)
      + drop_all(bind: _CreateDropBind, tables: Optional[_typing_Sequence[Table]] = None, checkfirst: bool = True)
  }

  class Computed {
      + column: Optional[Column[Any]]
  --
      - __init__(sqltext: _DDLColumnArgument, persisted: Optional[bool] = None)
      + copy(): Computed
  }

  class Identity {
      + is_identity = True
  --
      - __init__(always: bool = False, on_null: Optional[bool] = None, start: Optional[int] = None, increment: Optional[int] = None, minvalue: Optional[int] = None, maxvalue: Optional[int] = None, nominvalue: Optional[bool] = None, nomaxvalue: Optional[bool] = None, cycle: Optional[bool] = None, cache: Optional[int] = None, order: Optional[bool] = None)
      + copy(): Identity
  }

  class ReturnsRows {
      + selectable(): ReturnsRows
      + is_derived_from(fromclause: Optional[FromClause]): bool
      + exported_columns(): ReadOnlyColumnCollection[Any, Any]
  }

  class ExecutableReturnsRows {
  }

  class TypedReturnsRows {
  }

  class Selectable {
      + is_selectable = True
  --
      + lateral(name: Optional[str] = None): LateralFromClause
      + replace_selectable(old: FromClause, alias: Alias): Self
      + corresponding_column(column: KeyedColumnElement[Any], require_embedded: bool = False): Optional[KeyedColumnElement[Any]]
  }

  class HasPrefixes {
      + prefix_with(): Self
  }

  class HasSuffixes {
      + suffix_with(): Self
  }

  class HasHints {
      + with_statement_hint(text: str, dialect_name: str = '*'): Self
      + with_hint(selectable: _FromClauseArgument, text: str, dialect_name: str = '*'): Self
  }

  class FromClause {
      + named_with_column = False
      + schema: Optional[str] = None
      + is_selectable = True
  --
      + select(): Select[Any]
      + join(right: _FromClauseArgument, onclause: Optional[_ColumnExpressionArgument[bool]] = None, isouter: bool = False, full: bool = False): Join
      + outerjoin(right: _FromClauseArgument, onclause: Optional[_ColumnExpressionArgument[bool]] = None, full: bool = False): Join
      + alias(name: Optional[str] = None, flat: bool = False): NamedFromClause
      + tablesample(sampling: Union[float, Function[Any]], name: Optional[str] = None, seed: Optional[roles.ExpressionElementRole[Any]] = None): TableSample
      + is_derived_from(fromclause: Optional[FromClause]): bool
      + description(): str
      + exported_columns(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + columns(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + c(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + entity_namespace(): _EntityNamespace
      + primary_key(): Iterable[NamedColumn[Any]]
      + foreign_keys(): Iterable[ForeignKey]
  }

  class NamedFromClause {
      + named_with_column = True
      + name: str
  --
      + table_valued(): TableValuedColumn[Any]
  }

  class SelectLabelStyle {
      + LABEL_STYLE_NONE = 0
      + LABEL_STYLE_TABLENAME_PLUS_COL = 1
      + LABEL_STYLE_DISAMBIGUATE_ONLY = 2
      + LABEL_STYLE_DEFAULT = LABEL_STYLE_DISAMBIGUATE_ONLY
      + LABEL_STYLE_LEGACY_ORM = 3
  }

  class Join {
      + left: FromClause
      + right: FromClause
      + onclause: Optional[ColumnElement[bool]]
      + isouter: bool
      + full: bool
  --
      - __init__(left: _FromClauseArgument, right: _FromClauseArgument, onclause: Optional[_OnClauseArgument] = None, isouter: bool = False, full: bool = False)
      + description(): str
      + is_derived_from(fromclause: Optional[FromClause]): bool
      + self_group(against: Optional[OperatorType] = None): FromGrouping
      + select(): Select[Any]
  }

  class NoInit {
      - __init__()
  }

  class LateralFromClause {
  }

  class AliasedReturnsRows {
      + element: ReturnsRows
  --
      + description(): str
      + implicit_returning(): bool
      + original(): ReturnsRows
      + is_derived_from(fromclause: Optional[FromClause]): bool
  }

  class FromClauseAlias {
      + element: FromClause
  }

  class Alias {
      + inherit_cache = True
      + element: FromClause
  }

  class TableValuedAlias {
      + joins_implicitly = False
  --
      + column(): TableValuedColumn[Any]
      + alias(name: Optional[str] = None, flat: bool = False): TableValuedAlias
      + lateral(name: Optional[str] = None): LateralFromClause
      + render_derived(name: Optional[str] = None, with_types: bool = False): TableValuedAlias
  }

  class Lateral {
      + inherit_cache = True
  }

  class TableSample {
  }

  class CTE {
      + element: HasCTE
  --
      + alias(name: Optional[str] = None, flat: bool = False): CTE
      + union(): CTE
      + union_all(): CTE
  }

  class SelectsRows {
  }

  class HasCTE {
      + add_cte(): Self
      + cte(name: Optional[str] = None, recursive: bool = False, nesting: bool = False): CTE
  }

  class Subquery {
      + inherit_cache = True
      + element: SelectBase
  --
      + as_scalar(): ScalarSelect[Any]
  }

  class FromGrouping {
      + element: FromClause
  --
      - __init__(element: FromClause)
      + columns(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + c(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + primary_key(): Iterable[NamedColumn[Any]]
      + foreign_keys(): Iterable[ForeignKey]
      + is_derived_from(fromclause: Optional[FromClause]): bool
      + alias(name: Optional[str] = None, flat: bool = False): NamedFromGrouping
  }

  class NamedFromGrouping {
      + inherit_cache = True
  }

  class TableClause {
      + fullname: str
      + implicit_returning = False
  --
      - __init__(name: str)
      + description(): str
      + append_column(c: ColumnClause[Any])
      + insert(): util.preloaded.sql_dml.Insert
      + update(): Update
      + delete(): Delete
  }

  class ForUpdateArg {
      + of: Optional[Sequence[ClauseElement]]
      + nowait: bool
      + read: bool
      + skip_locked: bool
  --
      - __init__()
  }

  class Values {
      - __init__()
      + alias(name: Optional[str] = None, flat: bool = False): Self
      + lateral(name: Optional[str] = None): LateralFromClause
      + data(values: Sequence[Tuple[Any, ...]]): Self
      + scalar_values(): ScalarValues
  }

  class ScalarValues {
      - __init__(columns: Sequence[ColumnClause[Any]], data: Tuple[Sequence[Tuple[Any, ...]], ...], literal_binds: bool)
  }

  class SelectBase {
      + is_select = True
  --
      + selected_columns(): ColumnCollection[str, ColumnElement[Any]]
      + exported_columns(): ReadOnlyColumnCollection[str, ColumnElement[Any]]
      + c(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + columns(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
      + get_label_style(): SelectLabelStyle
      + set_label_style(style: SelectLabelStyle): Self
      + select(): Select[Any]
      + as_scalar(): ScalarSelect[Any]
      + exists(): Exists
      + scalar_subquery(): ScalarSelect[Any]
      + label(name: Optional[str]): Label[Any]
      + lateral(name: Optional[str] = None): LateralFromClause
      + subquery(name: Optional[str] = None): Subquery
      + alias(name: Optional[str] = None, flat: bool = False): Subquery
  }

  class SelectStatementGrouping {
      + element: _SB
  --
      - __init__(element: _SB)
      + get_label_style(): SelectLabelStyle
      + set_label_style(label_style: SelectLabelStyle): SelectStatementGrouping[_SB]
      + select_statement(): _SB
      + self_group(against: Optional[OperatorType] = None): Self
      + selected_columns(): ColumnCollection[str, ColumnElement[Any]]
      + add_cte(): Self
  }

  class GenerativeSelect {
      - __init__(_label_style: SelectLabelStyle = LABEL_STYLE_DEFAULT)
      + with_for_update(): Self
      + get_label_style(): SelectLabelStyle
      + set_label_style(style: SelectLabelStyle): Self
      + limit(limit: _LimitOffsetType): Self
      + fetch(count: _LimitOffsetType, with_ties: bool = False, percent: bool = False): Self
      + offset(offset: _LimitOffsetType): Self
      + slice(start: int, stop: int): Self
      + order_by(__first: Union[Literal[None, _NoArg.NO_ARG], _ColumnExpressionOrStrLabelArgument[Any]] = _NoArg.NO_ARG): Self
      + group_by(__first: Union[Literal[None, _NoArg.NO_ARG], _ColumnExpressionOrStrLabelArgument[Any]] = _NoArg.NO_ARG): Self
  }

  class CompoundSelectState {
  }

  class CompoundSelect {
      + selects: List[SelectBase]
  --
      - __init__(keyword: _CompoundSelectKeyword)
      + self_group(against: Optional[OperatorType] = None): GroupedElement
      + is_derived_from(fromclause: Optional[FromClause]): bool
      + set_label_style(style: SelectLabelStyle): Self
      + selected_columns(): ColumnCollection[str, ColumnElement[Any]]
  }

  class SelectState {
      - __init__(statement: Select[Any], compiler: SQLCompiler)
      + {classmethod} get_column_descriptions(cls, statement: Select[Any]): List[Dict[str, Any]]
      + {classmethod} from_statement(cls, statement: Select[Any], from_statement: roles.ReturnsRowsRole): ExecutableReturnsRows
      + {classmethod} get_columns_clause_froms(cls, statement: Select[Any]): List[FromClause]
      + {classmethod} determine_last_joined_entity(cls, stmt: Select[Any]): Optional[_JoinTargetElement]
      + {classmethod} all_selected_columns(cls, statement: Select[Any]): _SelectIterable
  }

  class default_select_compile_options {
  }

  class Select {
      - __init__()
      + filter(): Self
      + filter_by(): Self
      + column_descriptions(): Any
      + from_statement(statement: roles.ReturnsRowsRole): ExecutableReturnsRows
      + join(target: _JoinTargetArgument, onclause: Optional[_OnClauseArgument] = None): Self
      + outerjoin_from(from_: _FromClauseArgument, target: _JoinTargetArgument, onclause: Optional[_OnClauseArgument] = None): Self
      + join_from(from_: _FromClauseArgument, target: _JoinTargetArgument, onclause: Optional[_OnClauseArgument] = None): Self
      + outerjoin(target: _JoinTargetArgument, onclause: Optional[_OnClauseArgument] = None): Self
      + get_final_froms(): Sequence[FromClause]
      + froms(): Sequence[FromClause]
      + columns_clause_froms(): List[FromClause]
      + inner_columns(): _SelectIterable
      + is_derived_from(fromclause: Optional[FromClause]): bool
      + get_children(): Iterable[ClauseElement]
      + add_columns(): Select[Any]
      + column(column: _ColumnsClauseArgument[Any]): Select[Any]
      + reduce_columns(only_synonyms: bool = True): Select[Any]
      + with_only_columns(__ent0: _TCCA[_T0]): Select[Tuple[_T0]]
      + with_only_columns(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1]): Select[Tuple[_T0, _T1]]
      + with_only_columns(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2]): Select[Tuple[_T0, _T1, _T2]]
      + with_only_columns(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3]): Select[Tuple[_T0, _T1, _T2, _T3]]
      + with_only_columns(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4]): Select[Tuple[_T0, _T1, _T2, _T3, _T4]]
      + with_only_columns(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5]): Select[Tuple[_T0, _T1, _T2, _T3, _T4, _T5]]
      + with_only_columns(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5], __ent6: _TCCA[_T6]): Select[Tuple[_T0, _T1, _T2, _T3, _T4, _T5, _T6]]
      + with_only_columns(__ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5], __ent6: _TCCA[_T6], __ent7: _TCCA[_T7]): Select[Tuple[_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7]]
      + with_only_columns(): Select[Any]
      + with_only_columns(): Select[Any]
      + whereclause(): Optional[ColumnElement[Any]]
      + where(): Self
      + having(): Self
      + distinct(): Self
      + select_from(): Self
      + correlate(): Self
      + correlate_except(): Self
      + selected_columns(): ColumnCollection[str, ColumnElement[Any]]
      + self_group(against: Optional[OperatorType] = None): Union[SelectStatementGrouping[Self], Self]
      + union(): CompoundSelect[_TP]
      + union_all(): CompoundSelect[_TP]
      + except_(): CompoundSelect[_TP]
      + except_all(): CompoundSelect[_TP]
      + intersect(): CompoundSelect[_TP]
      + intersect_all(): CompoundSelect[_TP]
  }

  class ScalarSelect {
      + inherit_cache = True
      + element: SelectBase
      + c = columns
  --
      - __init__(element: SelectBase)
      + columns(): NoReturn
      + where(crit: _ColumnExpressionArgument[bool]): Self
      + self_group(against: Optional[OperatorType] = None): Self
      + correlate(): Self
      + correlate_except(): Self
  }

  class Exists {
      + inherit_cache = True
      + element: Union[SelectStatementGrouping[Select[Any]], ScalarSelect[Any]]
  --
      - __init__(__argument: Optional[Union[_ColumnsClauseArgument[Any], SelectBase, ScalarSelect[Any]]] = None)
      + select(): Select[Tuple[bool]]
      + correlate(): Self
      + correlate_except(): Self
      + select_from(): Self
      + where(): Self
  }

  class TextualSelect {
      + is_text = True
      + is_select = True
  --
      - __init__(text: TextClause, columns: List[_ColumnExpressionArgument[Any]], positional: bool = False)
      + selected_columns(): ColumnCollection[str, KeyedColumnElement[Any]]
      + set_label_style(style: SelectLabelStyle): TextualSelect
      + bindparams(): Self
  }

  class AnnotatedFromClause {
      + c(): ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]
  }

  class HasExpressionLookup {
      + comparator_factory: _ComparatorFactory[Any] = Comparator
  }

  class Comparator {
  }

  class Concatenable {
      + comparator_factory: _ComparatorFactory[Any] = Comparator
  }

  class Comparator {
  }

  class Indexable {
      + comparator_factory: _ComparatorFactory[Any] = Comparator
  }

  class Comparator {
  }

  class String {
      - __init__(length: Optional[int] = None, collation: Optional[str] = None)
      + literal_processor(dialect)
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
      + python_type()
      + get_dbapi_type(dbapi)
  }

  class Text {
  }

  class Unicode {
  }

  class UnicodeText {
  }

  class Integer {
      + get_dbapi_type(dbapi)
      + python_type()
      + literal_processor(dialect)
  }

  class SmallInteger {
  }

  class BigInteger {
  }

  class Numeric {
      - __init__(precision: Optional[int] = ..., scale: Optional[int] = ..., decimal_return_scale: Optional[int] = ..., asdecimal: Literal[True] = ...)
      - __init__(precision: Optional[int] = ..., scale: Optional[int] = ..., decimal_return_scale: Optional[int] = ..., asdecimal: Literal[False] = ...)
      - __init__(precision: Optional[int] = None, scale: Optional[int] = None, decimal_return_scale: Optional[int] = None, asdecimal: bool = True)
      + get_dbapi_type(dbapi)
      + literal_processor(dialect)
      + python_type()
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
  }

  class Float {
      + scale = None
  --
      - __init__(precision: Optional[int] = ..., asdecimal: Literal[False] = ..., decimal_return_scale: Optional[int] = ...)
      - __init__(precision: Optional[int] = ..., asdecimal: Literal[True] = ..., decimal_return_scale: Optional[int] = ...)
      - __init__(precision: Optional[int] = None, asdecimal: bool = False, decimal_return_scale: Optional[int] = None)
      + result_processor(dialect, coltype)
  }

  class Double {
  }

  class DateTime {
      - __init__(timezone: bool = False)
      + get_dbapi_type(dbapi)
      + literal_processor(dialect)
      + python_type()
  }

  class Date {
      + get_dbapi_type(dbapi)
      + python_type()
      + literal_processor(dialect)
  }

  class Time {
      - __init__(timezone: bool = False)
      + get_dbapi_type(dbapi)
      + python_type()
      + literal_processor(dialect)
  }

  class LargeBinary {
      - __init__(length: Optional[int] = None)
  }

  class SchemaType {
      + name: Optional[str]
  --
      - __init__(name: Optional[str] = None, schema: Optional[str] = None, metadata: Optional[MetaData] = None, inherit_schema: bool = False, quote: Optional[bool] = None, _create_events: bool = True, _adapted_from: Optional[SchemaType] = None)
      + copy()
      + adapt(cls: Type[_TE]): _TE
      + adapt(cls: Type[TypeEngineMixin]): TypeEngine[Any]
      + adapt(cls: Type[Union[TypeEngine[Any], TypeEngineMixin]]): TypeEngine[Any]
      + create(bind, checkfirst = False)
      + drop(bind, checkfirst = False)
  }

  class Enum {
      + comparator_factory = Comparator
  --
      - __init__()
      + sort_key_function()
      + native()
      + as_generic(allow_nulltype = False)
      + adapt_to_emulated(impltype)
      + adapt(cls)
      + literal_processor(dialect)
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
      + copy()
      + python_type()
  }

  class Comparator {
      + type: String
  }

  class PickleType {
      + impl = LargeBinary
      + cache_ok = True
  --
      - __init__(protocol: int = pickle.HIGHEST_PROTOCOL, pickler = None, comparator: Optional[Callable[[Any, Any], bool]] = None, impl: Optional[_TypeEngineArgument[Any]] = None)
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
      + compare_values(x, y)
  }

  class Boolean {
      + native = True
  --
      - __init__(create_constraint: bool = False, name: Optional[str] = None, _create_events: bool = True, _adapted_from: Optional[SchemaType] = None)
      + copy()
      + python_type()
      + literal_processor(dialect)
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
  }

  class Interval {
      + impl = DateTime
      + epoch = dt.datetime.fromtimestamp(0, dt.timezone.utc).replace(tzinfo=None)
      + cache_ok = True
      + comparator_factory = Comparator
  --
      - __init__(native: bool = True, second_precision: Optional[int] = None, day_precision: Optional[int] = None)
      + python_type()
      + adapt_to_emulated(impltype)
      + coerce_compared_value(op, value)
      + bind_processor(dialect: Dialect): _BindProcessorType[dt.timedelta]
      + result_processor(dialect: Dialect, coltype): _ResultProcessorType[dt.timedelta]
  }

  class Comparator {
  }

  class JSON {
      + hashable = False
      + NULL = util.symbol('JSON_NULL')
      + comparator_factory = Comparator
  --
      - __init__(none_as_null: bool = False)
      + python_type()
      + should_evaluate_none()
      + should_evaluate_none(value)
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
  }

  class JSONElementType {
      + string_bind_processor(dialect: Dialect): Optional[_BindProcessorType[str]]
      + string_literal_processor(dialect: Dialect): Optional[_LiteralProcessorType[str]]
      + bind_processor(dialect: Dialect): _BindProcessorType[Any]
      + literal_processor(dialect: Dialect): _LiteralProcessorType[Any]
  }

  class JSONIndexType {
  }

  class JSONIntIndexType {
  }

  class JSONStrIndexType {
  }

  class JSONPathType {
  }

  class Comparator {
      + type: JSON
  --
      + as_boolean()
      + as_string()
      + as_integer()
      + as_float()
      + as_numeric(precision, scale, asdecimal = True)
      + as_json()
  }

  class ARRAY {
      + zero_indexes = False
      + comparator_factory = Comparator
  --
      - __init__(item_type: _TypeEngineArgument[Any], as_tuple: bool = False, dimensions: Optional[int] = None, zero_indexes: bool = False)
      + hashable()
      + python_type()
      + compare_values(x, y)
      + literal_processor(dialect)
  }

  class Comparator {
      + type: ARRAY
  --
      + contains()
      + any(other, operator = None)
      + all(other, operator = None)
  }

  class TupleType {
      + types: List[TypeEngine[Any]]
  --
      - __init__()
      + coerce_compared_value(op: Optional[OperatorType], value): TypeEngine[Any]
      + result_processor(dialect, coltype)
  }

  class REAL {
  }

  class FLOAT {
  }

  class DOUBLE {
  }

  class DOUBLE_PRECISION {
  }

  class NUMERIC {
  }

  class DECIMAL {
  }

  class INTEGER {
  }

  class SMALLINT {
  }

  class BIGINT {
  }

  class TIMESTAMP {
      - __init__(timezone: bool = False)
      + get_dbapi_type(dbapi)
  }

  class DATETIME {
  }

  class DATE {
  }

  class TIME {
  }

  class TEXT {
  }

  class CLOB {
  }

  class VARCHAR {
  }

  class NVARCHAR {
  }

  class CHAR {
  }

  class NCHAR {
  }

  class BLOB {
  }

  class BINARY {
  }

  class VARBINARY {
  }

  class BOOLEAN {
  }

  class NullType {
      + comparator_factory = Comparator
  --
      + literal_processor(dialect)
  }

  class Comparator {
  }

  class TableValueType {
      - __init__()
  }

  class MatchType {
  }

  class Uuid {
      + collation: Optional[str] = None
  --
      - __init__(as_uuid: Literal[True] = ..., native_uuid: bool = ...)
      - __init__(as_uuid: Literal[False] = ..., native_uuid: bool = ...)
      - __init__(as_uuid: bool = True, native_uuid: bool = True)
      + python_type()
      + native()
      + coerce_compared_value(op, value)
      + bind_processor(dialect)
      + result_processor(dialect, coltype)
      + literal_processor(dialect)
  }

  class UUID {
      - __init__(as_uuid: Literal[True] = ...)
      - __init__(as_uuid: Literal[False] = ...)
      - __init__(as_uuid: bool = True)
      + {classmethod} adapt_emulated_to_native(cls, impl)
  }

  class HasShallowCopy {
  }

  class GenerativeOnTraversal {
  }

  class HasCopyInternals {
  }

  class TraversalComparatorStrategy {
      - __init__()
      + compare(obj1: ExternallyTraversible, obj2: ExternallyTraversible): bool
      + compare_inner(obj1, obj2)
      + visit_has_cache_key(attrname, left_parent, left, right_parent, right)
      + visit_propagate_attrs(attrname, left_parent, left, right_parent, right)
      + visit_has_cache_key_list(attrname, left_parent, left, right_parent, right)
      + visit_executable_options(attrname, left_parent, left, right_parent, right)
      + visit_clauseelement(attrname, left_parent, left, right_parent, right)
      + visit_fromclause_canonical_column_collection(attrname, left_parent, left, right_parent, right)
      + visit_fromclause_derived_column_collection(attrname, left_parent, left, right_parent, right)
      + visit_string_clauseelement_dict(attrname, left_parent, left, right_parent, right)
      + visit_clauseelement_tuples(attrname, left_parent, left, right_parent, right)
      + visit_clauseelement_list(attrname, left_parent, left, right_parent, right)
      + visit_clauseelement_tuple(attrname, left_parent, left, right_parent, right)
      + visit_clauseelement_unordered_set(attrname, left_parent, left, right_parent, right)
      + visit_fromclause_ordered_set(attrname, left_parent, left, right_parent, right)
      + visit_string(attrname, left_parent, left, right_parent, right)
      + visit_string_list(attrname, left_parent, left, right_parent, right)
      + visit_string_multi_dict(attrname, left_parent, left, right_parent, right)
      + visit_multi(attrname, left_parent, left, right_parent, right)
      + visit_anon_name(attrname, left_parent, left, right_parent, right)
      + visit_boolean(attrname, left_parent, left, right_parent, right)
      + visit_operator(attrname, left_parent, left, right_parent, right)
      + visit_type(attrname, left_parent, left, right_parent, right)
      + visit_plain_dict(attrname, left_parent, left, right_parent, right)
      + visit_dialect_options(attrname, left_parent, left, right_parent, right)
      + visit_annotations_key(attrname, left_parent, left, right_parent, right)
      + visit_with_context_options(attrname, left_parent, left, right_parent, right)
      + visit_plain_obj(attrname, left_parent, left, right_parent, right)
      + visit_named_ddl_element(attrname, left_parent, left, right_parent, right)
      + visit_prefix_sequence(attrname, left_parent, left, right_parent, right)
      + visit_setup_join_tuple(attrname, left_parent, left, right_parent, right)
      + visit_memoized_select_entities(attrname, left_parent, left, right_parent, right)
      + visit_table_hint_list(attrname, left_parent, left, right_parent, right)
      + visit_statement_hint_list(attrname, left_parent, left, right_parent, right)
      + visit_unknown_structure(attrname, left_parent, left, right_parent, right)
      + visit_dml_ordered_values(attrname, left_parent, left, right_parent, right)
      + visit_dml_values(attrname, left_parent, left, right_parent, right)
      + visit_dml_multi_values(attrname, left_parent, left, right_parent, right)
      + compare_expression_clauselist(left, right)
      + compare_clauselist(left, right)
      + compare_binary(left, right)
      + compare_bindparam(left, right)
  }

  class ColIdentityComparatorStrategy {
      + compare_column_element(left, right, use_proxies = True, equivalents = ())
      + compare_column(left, right)
      + compare_label(left, right)
      + compare_table(left, right)
  }

  class TypeEngine {
      + render_bind_cast = False
      + render_literal_cast = False
      + hashable = True
      + comparator_factory: _ComparatorFactory[Any] = Comparator
      + sort_key_function: Optional[Callable[[Any], Any]] = None
      + should_evaluate_none: bool = False
  --
      + evaluates_none(): Self
      + copy(): Self
      + copy_value(value): Any
      + literal_processor(dialect: Dialect): Optional[_LiteralProcessorType[_T]]
      + bind_processor(dialect: Dialect): Optional[_BindProcessorType[_T]]
      + result_processor(dialect: Dialect, coltype: object): Optional[_ResultProcessorType[_T]]
      + column_expression(colexpr: ColumnElement[_T]): Optional[ColumnElement[_T]]
      + bind_expression(bindvalue: BindParameter[_T]): Optional[ColumnElement[_T]]
      + compare_values(x, y): bool
      + get_dbapi_type(dbapi: ModuleType): Optional[Any]
      + python_type(): Type[Any]
      + with_variant(type_: _TypeEngineArgument[Any]): Self
      + as_generic(allow_nulltype: bool = False): TypeEngine[_T]
      + dialect_impl(dialect: Dialect): TypeEngine[_T]
      + adapt(cls: Type[_TE]): _TE
      + adapt(cls: Type[TypeEngineMixin]): TypeEngine[Any]
      + adapt(cls: Type[Union[TypeEngine[Any], TypeEngineMixin]]): TypeEngine[Any]
      + coerce_compared_value(op: Optional[OperatorType], value): TypeEngine[Any]
      + compile(dialect: Optional[Dialect] = None): str
  }

  class Comparator {
      + expr: ColumnElement[_CT]
      + type: TypeEngine[_CT]
  --
      - __init__(expr: ColumnElement[_CT])
      + operate(op: OperatorType): ColumnElement[_RT]
      + operate(op: OperatorType): ColumnElement[_CT]
      + operate(op: OperatorType): ColumnElement[Any]
      + reverse_operate(op: OperatorType, other): ColumnElement[_CT]
  }

  class TypeEngineMixin {
  }

  class ExternalType {
      + cache_ok: Optional[bool] = None
  }

  class UserDefinedType {
      + ensure_kwarg = 'get_col_spec'
  --
      + coerce_compared_value(op: Optional[OperatorType], value): TypeEngine[Any]
  }

  class Emulated {
      + native: bool
  --
      + adapt_to_emulated(impltype: Type[Union[TypeEngine[Any], TypeEngineMixin]]): TypeEngine[Any]
      + adapt(cls: Type[_TE]): _TE
      + adapt(cls: Type[TypeEngineMixin]): TypeEngine[Any]
      + adapt(cls: Type[Union[TypeEngine[Any], TypeEngineMixin]]): TypeEngine[Any]
  }

  class NativeForEmulated {
      + {classmethod} adapt_native_to_emulated(cls, impl: Union[TypeEngine[Any], TypeEngineMixin]): TypeEngine[Any]
      + {classmethod} adapt_emulated_to_native(cls, impl: Union[TypeEngine[Any], TypeEngineMixin]): TypeEngine[Any]
  }

  class TypeDecorator {
      + impl: Union[TypeEngine[Any], Type[TypeEngine[Any]]]
      + coerce_to_is_types: Sequence[Type[Any]] = (type(None),)
  --
      + impl_instance(): TypeEngine[Any]
      - __init__()
      + comparator_factory(): _ComparatorFactory[Any]
      + type_engine(dialect: Dialect): TypeEngine[Any]
      + load_dialect_impl(dialect: Dialect): TypeEngine[Any]
      + process_literal_param(value: Optional[_T], dialect: Dialect): str
      + process_bind_param(value: Optional[_T], dialect: Dialect): Any
      + process_result_value(value: Optional[Any], dialect: Dialect): Optional[_T]
      + literal_processor(dialect: Dialect): Optional[_LiteralProcessorType[_T]]
      + bind_processor(dialect: Dialect): Optional[_BindProcessorType[_T]]
      + result_processor(dialect: Dialect, coltype): Optional[_ResultProcessorType[_T]]
      + bind_expression(bindparam: BindParameter[_T]): Optional[ColumnElement[_T]]
      + column_expression(column: ColumnElement[_T]): Optional[ColumnElement[_T]]
      + coerce_compared_value(op: Optional[OperatorType], value): Any
      + copy(): Self
      + get_dbapi_type(dbapi: ModuleType): Optional[Any]
      + compare_values(x, y): bool
      + sort_key_function(): Optional[Callable[[Any], Any]]
  }

  class Comparator {
      + operate(op: OperatorType): ColumnElement[_CT]
      + reverse_operate(op: OperatorType, other): ColumnElement[_CT]
  }

  class Variant {
      - __init__()
  }

  class ClauseAdapter {
      - __init__(selectable: Selectable, equivalents: Optional[_EquivalentColumnMap] = None, include_fn: Optional[Callable[[ClauseElement], bool]] = None, exclude_fn: Optional[Callable[[ClauseElement], bool]] = None, adapt_on_names: bool = False, anonymize_labels: bool = False, adapt_from_selectables: Optional[AbstractSet[FromClause]] = None)
      + replace(col: _ET, _include_singleton_constants: bool = False): Optional[_ET]
  }

  class ColumnAdapter {
      + columns: _ColumnLookup
      + adapt_clause = traverse
      + adapt_list = ClauseAdapter.copy_and_process
  --
      - __init__(selectable: Selectable, equivalents: Optional[_EquivalentColumnMap] = None, adapt_required: bool = False, include_fn: Optional[Callable[[ClauseElement], bool]] = None, exclude_fn: Optional[Callable[[ClauseElement], bool]] = None, adapt_on_names: bool = False, allow_label_resolve: bool = True, anonymize_labels: bool = False, adapt_from_selectables: Optional[AbstractSet[FromClause]] = None)
      + wrap(adapter)
      + traverse(obj: Literal[None])
      + traverse(obj: _ET): _ET
      + traverse(obj: Optional[ExternallyTraversible]): Optional[ExternallyTraversible]
      + chain(visitor: ExternalTraversal): ColumnAdapter
      + adapt_check_present(col: ColumnElement[Any]): Optional[ColumnElement[Any]]
  }

  class Visitable {
  }

  class InternalTraversal {
      + dp_has_cache_key = 'HC'
      + dp_has_cache_key_list = 'HL'
      + dp_clauseelement = 'CE'
      + dp_fromclause_canonical_column_collection = 'FC'
      + dp_clauseelement_tuples = 'CTS'
      + dp_clauseelement_list = 'CL'
      + dp_clauseelement_tuple = 'CT'
      + dp_executable_options = 'EO'
      + dp_with_context_options = 'WC'
      + dp_fromclause_ordered_set = 'CO'
      + dp_string = 'S'
      + dp_string_list = 'SL'
      + dp_anon_name = 'AN'
      + dp_boolean = 'B'
      + dp_operator = 'O'
      + dp_type = 'T'
      + dp_plain_dict = 'PD'
      + dp_dialect_options = 'DO'
      + dp_string_clauseelement_dict = 'CD'
      + dp_string_multi_dict = 'MD'
      + dp_annotations_key = 'AK'
      + dp_plain_obj = 'PO'
      + dp_named_ddl_element = 'DD'
      + dp_prefix_sequence = 'PS'
      + dp_table_hint_list = 'TH'
      + dp_setup_join_tuple = 'SJ'
      + dp_memoized_select_entities = 'ME'
      + dp_statement_hint_list = 'SH'
      + dp_unknown_structure = 'UK'
      + dp_dml_ordered_values = 'DML_OV'
      + dp_dml_values = 'DML_V'
      + dp_dml_multi_values = 'DML_MV'
      + dp_propagate_attrs = 'PA'
      + dp_ignore = 'IG'
      + dp_inspectable = 'IS'
      + dp_multi = 'M'
      + dp_multi_list = 'MT'
      + dp_has_cache_key_tuples = 'HT'
      + dp_inspectable_list = 'IL'
  }

  class HasTraverseInternals {
      + get_children(): Iterable[HasTraverseInternals]
  }

  class HasTraversalDispatch {
      + dispatch(visit_symbol: InternalTraversal): Callable[..., Any]
      + run_generated_dispatch(target: object, internal_dispatch: _TraverseInternalsType, generate_dispatcher_name: str): Any
      + generate_dispatch(target_cls: Type[object], internal_dispatch: _TraverseInternalsType, generate_dispatcher_name: str): _InternalTraversalDispatchType
  }

  class ExternallyTraversible {
  }

  class ExternalTraversal {
      + traverse_single(obj: Visitable): Any
      + iterate(obj: Optional[ExternallyTraversible]): Iterator[ExternallyTraversible]
      + traverse(obj: Literal[None])
      + traverse(obj: ExternallyTraversible): ExternallyTraversible
      + traverse(obj: Optional[ExternallyTraversible]): Optional[ExternallyTraversible]
      + visitor_iterator(): Iterator[ExternalTraversal]
      + chain(visitor: ExternalTraversal): _ExtT
  }

  class CloningExternalTraversal {
      + copy_and_process(list_: List[ExternallyTraversible]): List[ExternallyTraversible]
      + traverse(obj: Literal[None])
      + traverse(obj: ExternallyTraversible): ExternallyTraversible
      + traverse(obj: Optional[ExternallyTraversible]): Optional[ExternallyTraversible]
  }

  class ReplacingExternalTraversal {
      + replace(elem: ExternallyTraversible): Optional[ExternallyTraversible]
      + traverse(obj: Literal[None])
      + traverse(obj: ExternallyTraversible): ExternallyTraversible
      + traverse(obj: Optional[ExternallyTraversible]): Optional[ExternallyTraversible]
  }

  class prefix_anon_map {
  }

  class cache_anon_map {
      + get_anon(object_): Tuple[str, bool]
  }

  class Executable {
  }

  class AutoString {
      + impl = types.String
      + cache_ok = True
      + mysql_default_length = 255
  --
      + load_dialect_impl(dialect: Dialect): 'types.TypeEngine[Any]'
  }

  class SelectBase {
      + inherit_cache = True
  --
      + where(): Self
      + having(): Self
  }

  class Select {
      + inherit_cache = True
  }

  class SelectOfScalar {
      + inherit_cache = True
  }

}

package fixtures {
  class TestBase {
      + assert_(val, msg = None)
      + nocache()
      + connection_no_trans()
      + connection()
      + close_result_when_finished()
      + registry(metadata)
      + decl_base(metadata)
      + dc_decl_base(metadata)
      + future_connection(future_engine, connection)
      + future_engine()
      + testing_engine()
      + async_testing_engine(testing_engine)
      + metadata(request)
      + trans_ctx_manager_fixture(request, metadata)
  }

  class FutureEngineMixin {
  }

  class MypyTest {
      + per_func_cachedir()
      + cachedir()
      + mypy_runner(cachedir)
      + mypy_typecheck_file(mypy_runner)
      + {static} file_combinations(dirname)
  }

  class ORMTest {
      + fixture_session()
  }

  class MappedTest {
      + run_setup_classes = 'once'
      + run_setup_mappers = 'each'
      + classes = None
  --
      + {classmethod} setup_classes(cls)
      + {classmethod} setup_mappers(cls)
  }

  class DeclarativeMappedTest {
      + run_setup_classes = 'once'
      + run_setup_mappers = 'once'
  }

  class RemoveORMEventsGlobally {
  }

  class TablesTest {
      + run_setup_bind = 'once'
      + run_define_tables = 'once'
      + run_create_tables = 'once'
      + run_inserts = 'each'
      + run_deletes = 'each'
      + run_dispose_bind = None
      + bind = None
      + tables = None
      + other = None
      + sequences = None
  --
      + tables_test_metadata()
      + {classmethod} setup_bind(cls)
      + {classmethod} dispose_bind(cls, bind)
      + {classmethod} define_tables(cls, metadata)
      + {classmethod} fixtures(cls)
      + {classmethod} insert_data(cls, connection)
      + sql_count_(count, fn)
      + sql_eq_(callable_, statements)
  }

  class NoCache {
  }

  class RemovesEvents {
      + event_listen(target, name, fn)
  }

  class ComputedReflectionFixtureTest {
      + run_inserts = None
      + run_deletes = None
      + regexp = re.compile('[\\[\\]\\(\\)\\s`\'\\"]*')
  --
      + normalize(text)
      + {classmethod} define_tables(cls, metadata)
  }

  class CacheKeyFixture {
  }

}

package sqlmodel {
  class FieldInfo {
      - __init__(default = Undefined)
  }

  class RelationshipInfo {
      - __init__()
  }

  class SQLModelMetaclass {
      + model_config: SQLModelConfig
      + model_fields: Dict[str, FieldInfo]
  --
      - __init__(cls, classname: str, bases: Tuple[type, ...], dict_: Dict[str, Any])
  }

  class SQLModel {
      + metadata: ClassVar[MetaData]
  --
      - __init__(__pydantic_self__)
      + {classmethod} model_validate(cls: Type[_TSQLModel], obj): _TSQLModel
      + model_dump(): Dict[str, Any]
      + dict(): Dict[str, Any]
      + {classmethod} from_orm(cls: Type[_TSQLModel], obj, update: Optional[Dict[str, Any]] = None): _TSQLModel
      + {classmethod} parse_obj(cls: Type[_TSQLModel], obj, update: Optional[Dict[str, Any]] = None): _TSQLModel
      + sqlmodel_update(obj: Union[Dict[str, Any], BaseModel]): _TSQLModel
  }

  class Config {
      + orm_mode = True
  }

  class FakeMetadata {
      + max_length: Optional[int] = None
      + max_digits: Optional[int] = None
      + decimal_places: Optional[int] = None
  }

  class ObjectWithUpdateWrapper <<dataclass>> {
      + obj
      + update: Dict[str, Any]
  }

  class ModelField {
  }

  class SQLModelConfig {
      + table: Optional[bool]
      + registry: Optional[Any]
  }

  class SQLModelConfig {
      + table: Optional[bool] = None
      + registry: Optional[Any] = None
  }

}

package starlette {
  class Starlette {
      - __init__(debug: bool = False, routes: typing.Sequence[BaseRoute] | None = None, middleware: typing.Sequence[Middleware] | None = None, exception_handlers: typing.Mapping[typing.Any, ExceptionHandler] | None = None, on_startup: typing.Sequence[typing.Callable[[], typing.Any]] | None = None, on_shutdown: typing.Sequence[typing.Callable[[], typing.Any]] | None = None, lifespan: Lifespan[AppType] | None = None)
      + build_middleware_stack(): ASGIApp
      + routes(): list[BaseRoute]
      + url_path_for(): URLPath
      + on_event(event_type: str): typing.Callable
      + mount(path: str, app: ASGIApp, name: str | None = None)
      + host(host: str, app: ASGIApp, name: str | None = None)
      + add_middleware(middleware_class: _MiddlewareFactory[P])
      + add_exception_handler(exc_class_or_status_code: int | type[Exception], handler: ExceptionHandler)
      + add_event_handler(event_type: str, func: typing.Callable)
      + add_route(path: str, route: typing.Callable[[Request], typing.Awaitable[Response] | Response], methods: list[str] | None = None, name: str | None = None, include_in_schema: bool = True)
      + add_websocket_route(path: str, route: typing.Callable[[WebSocket], typing.Awaitable[None]], name: str | None = None)
      + exception_handler(exc_class_or_status_code: int | type[Exception]): typing.Callable
      + route(path: str, methods: list[str] | None = None, name: str | None = None, include_in_schema: bool = True): typing.Callable
      + websocket_route(path: str, name: str | None = None): typing.Callable
      + middleware(middleware_type: str): typing.Callable
  }

  class AuthenticationError {
  }

  class AuthenticationBackend {
  }

  class AuthCredentials {
      - __init__(scopes: typing.Sequence[str] | None = None)
  }

  class BaseUser {
      + is_authenticated(): bool
      + display_name(): str
      + identity(): str
  }

  class SimpleUser {
      - __init__(username: str)
      + is_authenticated(): bool
      + display_name(): str
  }

  class UnauthenticatedUser {
      + is_authenticated(): bool
      + display_name(): str
  }

  class BackgroundTask {
      - __init__(func: typing.Callable[P, typing.Any])
  }

  class BackgroundTasks {
      - __init__(tasks: typing.Sequence[BackgroundTask] | None = None)
      + add_task(func: typing.Callable[P, typing.Any])
  }

  class undefined {
  }

  class EnvironError {
  }

  class Environ {
      - __init__(environ: typing.MutableMapping[str, str] = os.environ)
  }

  class Config {
      - __init__(env_file: str | Path | None = None, environ: typing.Mapping[str, str] = environ, env_prefix: str = '')
      + get(key: str, cast: typing.Callable[[typing.Any], typing.Any] | None = None, default: typing.Any = undefined): typing.Any
  }

  class Convertor {
      + regex: typing.ClassVar[str] = ''
  --
      + convert(value: str): T
      + to_string(value: T): str
  }

  class StringConvertor {
      + regex = '[^/]+'
  --
      + convert(value: str): str
      + to_string(value: str): str
  }

  class PathConvertor {
      + regex = '.*'
  --
      + convert(value: str): str
      + to_string(value: str): str
  }

  class IntegerConvertor {
      + regex = '[0-9]+'
  --
      + convert(value: str): int
      + to_string(value: int): str
  }

  class FloatConvertor {
      + regex = '[0-9]+(\\.[0-9]+)?'
  --
      + convert(value: str): float
      + to_string(value: float): str
  }

  class UUIDConvertor {
      + regex = '[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}'
  --
      + convert(value: str): uuid.UUID
      + to_string(value: uuid.UUID): str
  }

  class Address {
      + host: str
      + port: int
  }

  class URL {
      - __init__(url: str = '', scope: Scope | None = None)
      + components(): SplitResult
      + scheme(): str
      + netloc(): str
      + path(): str
      + query(): str
      + fragment(): str
      + username(): None | str
      + password(): None | str
      + hostname(): None | str
      + port(): int | None
      + is_secure(): bool
      + replace(): URL
      + include_query_params(): URL
      + replace_query_params(): URL
      + remove_query_params(keys: str | typing.Sequence[str]): URL
  }

  class URLPath {
      - __init__(path: str, protocol: str = '', host: str = '')
      + make_absolute_url(base_url: str | URL): URL
  }

  class Secret {
      - __init__(value: str)
  }

  class CommaSeparatedStrings {
      - __init__(value: str | typing.Sequence[str])
  }

  class ImmutableMultiDict {
      - __init__()
      + getlist(key: typing.Any): list[_CovariantValueType]
      + keys(): typing.KeysView[_KeyType]
      + values(): typing.ValuesView[_CovariantValueType]
      + items(): typing.ItemsView[_KeyType, _CovariantValueType]
      + multi_items(): list[tuple[_KeyType, _CovariantValueType]]
  }

  class MultiDict {
      + pop(key: typing.Any, default: typing.Any = None): typing.Any
      + popitem(): tuple[typing.Any, typing.Any]
      + poplist(key: typing.Any): list[typing.Any]
      + clear()
      + setdefault(key: typing.Any, default: typing.Any = None): typing.Any
      + setlist(key: typing.Any, values: list[typing.Any])
      + append(key: typing.Any, value: typing.Any)
      + update()
  }

  class QueryParams {
      - __init__()
  }

  class UploadFile {
      - __init__(file: typing.BinaryIO)
      + content_type(): str | None
  }

  class FormData {
      - __init__()
  }

  class Headers {
      - __init__(headers: typing.Mapping[str, str] | None = None, raw: list[tuple[bytes, bytes]] | None = None, scope: typing.MutableMapping[str, typing.Any] | None = None)
      + raw(): list[tuple[bytes, bytes]]
      + keys(): list[str]
      + values(): list[str]
      + items(): list[tuple[str, str]]
      + getlist(key: str): list[str]
      + mutablecopy(): MutableHeaders
  }

  class MutableHeaders {
      + raw(): list[tuple[bytes, bytes]]
      + setdefault(key: str, value: str): str
      + update(other: typing.Mapping[str, str])
      + append(key: str, value: str)
      + add_vary_header(vary: str)
  }

  class State {
      - __init__(state: dict[str, typing.Any] | None = None)
  }

  class HTTPEndpoint {
      - __init__(scope: Scope, receive: Receive, send: Send)
  }

  class WebSocketEndpoint {
      + encoding: str | None = None
  --
      - __init__(scope: Scope, receive: Receive, send: Send)
  }

  class HTTPException {
      - __init__(status_code: int, detail: str | None = None, headers: Mapping[str, str] | None = None)
  }

  class WebSocketException {
      - __init__(code: int, reason: str | None = None)
  }

  class FormMessage {
      + FIELD_START = 1
      + FIELD_NAME = 2
      + FIELD_DATA = 3
      + FIELD_END = 4
      + END = 5
  }

  class MultipartPart <<dataclass>> {
      + content_disposition: bytes | None = None
      + field_name: str = ''
      + data: bytearray = field(default_factory=bytearray)
      + file: UploadFile | None = None
      + item_headers: list[tuple[bytes, bytes]] = field(default_factory=list)
  }

  class MultiPartException {
      - __init__(message: str)
  }

  class FormParser {
      - __init__(headers: Headers, stream: typing.AsyncGenerator[bytes, None])
      + on_field_start()
      + on_field_name(data: bytes, start: int, end: int)
      + on_field_data(data: bytes, start: int, end: int)
      + on_field_end()
      + on_end()
  }

  class MultiPartParser {
      + spool_max_size = 1024 * 1024
      + max_part_size = 1024 * 1024
  --
      - __init__(headers: Headers, stream: typing.AsyncGenerator[bytes, None])
      + on_part_begin()
      + on_part_data(data: bytes, start: int, end: int)
      + on_part_end()
      + on_header_field(data: bytes, start: int, end: int)
      + on_header_value(data: bytes, start: int, end: int)
      + on_header_end()
      + on_headers_finished()
      + on_end()
  }

  class ClientDisconnect {
  }

  class HTTPConnection {
      - __init__(scope: Scope, receive: Receive | None = None)
      + app(): typing.Any
      + url(): URL
      + base_url(): URL
      + headers(): Headers
      + query_params(): QueryParams
      + path_params(): dict[str, typing.Any]
      + cookies(): dict[str, str]
      + client(): Address | None
      + session(): dict[str, typing.Any]
      + auth(): typing.Any
      + user(): typing.Any
      + state(): State
      + url_for(): URL
  }

  class Request {
      - __init__(scope: Scope, receive: Receive = empty_receive, send: Send = empty_send)
      + method(): str
      + receive(): Receive
      + form(): AwaitableOrContextManager[FormData]
  }

  class Response {
      + media_type = None
      + charset = 'utf-8'
  --
      - __init__(content: typing.Any = None, status_code: int = 200, headers: typing.Mapping[str, str] | None = None, media_type: str | None = None, background: BackgroundTask | None = None)
      + render(content: typing.Any): bytes | memoryview
      + init_headers(headers: typing.Mapping[str, str] | None = None)
      + headers(): MutableHeaders
      + set_cookie(key: str, value: str = '', max_age: int | None = None, expires: datetime | str | int | None = None, path: str | None = '/', domain: str | None = None, secure: bool = False, httponly: bool = False, samesite: typing.Literal['lax', 'strict', 'none'] | None = 'lax')
      + delete_cookie(key: str, path: str = '/', domain: str | None = None, secure: bool = False, httponly: bool = False, samesite: typing.Literal['lax', 'strict', 'none'] | None = 'lax')
  }

  class HTMLResponse {
      + media_type = 'text/html'
  }

  class PlainTextResponse {
      + media_type = 'text/plain'
  }

  class JSONResponse {
      + media_type = 'application/json'
  --
      - __init__(content: typing.Any, status_code: int = 200, headers: typing.Mapping[str, str] | None = None, media_type: str | None = None, background: BackgroundTask | None = None)
      + render(content: typing.Any): bytes
  }

  class RedirectResponse {
      - __init__(url: str | URL, status_code: int = 307, headers: typing.Mapping[str, str] | None = None, background: BackgroundTask | None = None)
  }

  class StreamingResponse {
      + body_iterator: AsyncContentStream
  --
      - __init__(content: ContentStream, status_code: int = 200, headers: typing.Mapping[str, str] | None = None, media_type: str | None = None, background: BackgroundTask | None = None)
  }

  class MalformedRangeHeader {
      - __init__(content: str = 'Malformed range header.')
  }

  class RangeNotSatisfiable {
      - __init__(max_size: int)
  }

  class FileResponse {
      + chunk_size = 64 * 1024
  --
      - __init__(path: str | os.PathLike[str], status_code: int = 200, headers: typing.Mapping[str, str] | None = None, media_type: str | None = None, background: BackgroundTask | None = None, filename: str | None = None, stat_result: os.stat_result | None = None, method: str | None = None, content_disposition_type: str = 'attachment')
      + set_stat_headers(stat_result: os.stat_result)
      + generate_multipart(ranges: typing.Sequence[tuple[int, int]], boundary: str, max_size: int, content_type: str): tuple[int, typing.Callable[[int, int], bytes]]
  }

  class NoMatchFound {
      - __init__(name: str, path_params: dict[str, typing.Any])
  }

  class Match {
      + NONE = 0
      + PARTIAL = 1
      + FULL = 2
  }

  class BaseRoute {
      + matches(scope: Scope): tuple[Match, Scope]
      + url_path_for(): URLPath
  }

  class Route {
      - __init__(path: str, endpoint: typing.Callable[..., typing.Any])
      + matches(scope: Scope): tuple[Match, Scope]
      + url_path_for(): URLPath
  }

  class WebSocketRoute {
      - __init__(path: str, endpoint: typing.Callable[..., typing.Any])
      + matches(scope: Scope): tuple[Match, Scope]
      + url_path_for(): URLPath
  }

  class Mount {
      - __init__(path: str, app: ASGIApp | None = None, routes: typing.Sequence[BaseRoute] | None = None, name: str | None = None)
      + routes(): list[BaseRoute]
      + matches(scope: Scope): tuple[Match, Scope]
      + url_path_for(): URLPath
  }

  class Host {
      - __init__(host: str, app: ASGIApp, name: str | None = None)
      + routes(): list[BaseRoute]
      + matches(scope: Scope): tuple[Match, Scope]
      + url_path_for(): URLPath
  }

  class Router {
      - __init__(routes: typing.Sequence[BaseRoute] | None = None, redirect_slashes: bool = True, default: ASGIApp | None = None, on_startup: typing.Sequence[typing.Callable[[], typing.Any]] | None = None, on_shutdown: typing.Sequence[typing.Callable[[], typing.Any]] | None = None, lifespan: Lifespan[typing.Any] | None = None)
      + url_path_for(): URLPath
      + mount(path: str, app: ASGIApp, name: str | None = None)
      + host(host: str, app: ASGIApp, name: str | None = None)
      + add_route(path: str, endpoint: typing.Callable[[Request], typing.Awaitable[Response] | Response], methods: list[str] | None = None, name: str | None = None, include_in_schema: bool = True)
      + add_websocket_route(path: str, endpoint: typing.Callable[[WebSocket], typing.Awaitable[None]], name: str | None = None)
      + route(path: str, methods: list[str] | None = None, name: str | None = None, include_in_schema: bool = True): typing.Callable
      + websocket_route(path: str, name: str | None = None): typing.Callable
      + add_event_handler(event_type: str, func: typing.Callable[[], typing.Any])
      + on_event(event_type: str): typing.Callable
  }

  class OpenAPIResponse {
      + media_type = 'application/vnd.oai.openapi'
  --
      + render(content: typing.Any): bytes
  }

  class EndpointInfo {
      + path: str
      + http_method: str
      + func: typing.Callable[..., typing.Any]
  }

  class BaseSchemaGenerator {
      + get_schema(routes: list[BaseRoute]): dict[str, typing.Any]
      + get_endpoints(routes: list[BaseRoute]): list[EndpointInfo]
      + parse_docstring(func_or_method: typing.Callable[..., typing.Any]): dict[str, typing.Any]
      + OpenAPIResponse(request: Request): Response
  }

  class SchemaGenerator {
      - __init__(base_schema: dict[str, typing.Any])
      + get_schema(routes: list[BaseRoute]): dict[str, typing.Any]
  }

  class NotModifiedResponse {
      + NOT_MODIFIED_HEADERS = ('cache-control', 'content-location', 'date', 'etag', 'expires', 'vary')
  --
      - __init__(headers: Headers)
  }

  class StaticFiles {
      - __init__()
      + get_directories(directory: PathLike | None = None, packages: list[str | tuple[str, str]] | None = None): list[PathLike]
      + get_path(scope: Scope): str
      + lookup_path(path: str): tuple[str, os.stat_result | None]
      + file_response(full_path: PathLike, stat_result: os.stat_result, scope: Scope, status_code: int = 200): Response
      + is_not_modified(response_headers: Headers, request_headers: Headers): bool
  }

  class Jinja2Templates {
      - __init__(directory: str | PathLike[str] | typing.Sequence[str | PathLike[str]])
      - __init__()
      - __init__(directory: str | PathLike[str] | typing.Sequence[str | PathLike[str]] | None = None)
      + get_template(name: str): jinja2.Template
      + TemplateResponse(request: Request, name: str, context: dict[str, typing.Any] | None = None, status_code: int = 200, headers: typing.Mapping[str, str] | None = None, media_type: str | None = None, background: BackgroundTask | None = None): _TemplateResponse
      + TemplateResponse(name: str, context: dict[str, typing.Any] | None = None, status_code: int = 200, headers: typing.Mapping[str, str] | None = None, media_type: str | None = None, background: BackgroundTask | None = None): _TemplateResponse
      + TemplateResponse(): _TemplateResponse
  }

  class WebSocketDenialResponse {
  }

  class WebSocketTestSession {
      - __init__(app: ASGI3App, scope: Scope, portal_factory: _PortalFactoryType)
      + send(message: Message)
      + send_text(data: str)
      + send_bytes(data: bytes)
      + send_json(data: typing.Any, mode: typing.Literal['text', 'binary'] = 'text')
      + close(code: int = 1000, reason: str | None = None)
      + receive(): Message
      + receive_text(): str
      + receive_bytes(): bytes
      + receive_json(mode: typing.Literal['text', 'binary'] = 'text'): typing.Any
  }

  class TestClient {
      + task: Future[None]
      + portal: anyio.abc.BlockingPortal | None = None
  --
      - __init__(app: ASGIApp, base_url: str = 'http://testserver', raise_server_exceptions: bool = True, root_path: str = '', backend: typing.Literal['asyncio', 'trio'] = 'asyncio', backend_options: dict[str, typing.Any] | None = None, cookies: httpx._types.CookieTypes | None = None, headers: dict[str, str] | None = None, follow_redirects: bool = True, client: tuple[str, int] = ('testclient', 50000))
      + request(method: str, url: httpx._types.URLTypes): httpx.Response
      + get(url: httpx._types.URLTypes): httpx.Response
      + options(url: httpx._types.URLTypes): httpx.Response
      + head(url: httpx._types.URLTypes): httpx.Response
      + post(url: httpx._types.URLTypes): httpx.Response
      + put(url: httpx._types.URLTypes): httpx.Response
      + patch(url: httpx._types.URLTypes): httpx.Response
      + delete(url: httpx._types.URLTypes): httpx.Response
      + websocket_connect(url: str, subprotocols: typing.Sequence[str] | None = None): WebSocketTestSession
  }

  class WebSocketState {
      + CONNECTING = 0
      + CONNECTED = 1
      + DISCONNECTED = 2
      + RESPONSE = 3
  }

  class WebSocketDisconnect {
      - __init__(code: int = 1000, reason: str | None = None)
  }

  class WebSocket {
      - __init__(scope: Scope, receive: Receive, send: Send)
  }

  class WebSocketClose {
      - __init__(code: int = 1000, reason: str | None = None)
  }

  class AwaitableOrContextManager {
  }

  class SupportsAsyncClose {
  }

  class AwaitableOrContextManagerWrapper {
      - __init__(aw: typing.Awaitable[SupportsAsyncCloseType])
  }

}

package tenacity {
  class sleep_using_event {
      - __init__(event: 'threading.Event')
  }

  class retry_base {
  }

  class retry_if_exception {
      - __init__(predicate: typing.Callable[[BaseException], bool])
  }

  class retry_if_exception_type {
      - __init__(exception_types: typing.Union[typing.Type[BaseException], typing.Tuple[typing.Type[BaseException], ...]] = Exception)
  }

  class retry_if_not_exception_type {
      - __init__(exception_types: typing.Union[typing.Type[BaseException], typing.Tuple[typing.Type[BaseException], ...]] = Exception)
  }

  class retry_unless_exception_type {
      - __init__(exception_types: typing.Union[typing.Type[BaseException], typing.Tuple[typing.Type[BaseException], ...]] = Exception)
  }

  class retry_if_exception_cause_type {
      - __init__(exception_types: typing.Union[typing.Type[BaseException], typing.Tuple[typing.Type[BaseException], ...]] = Exception)
  }

  class retry_if_result {
      - __init__(predicate: typing.Callable[[typing.Any], bool])
  }

  class retry_if_not_result {
      - __init__(predicate: typing.Callable[[typing.Any], bool])
  }

  class retry_if_exception_message {
      - __init__(message: typing.Optional[str] = None, match: typing.Optional[str] = None)
  }

  class retry_if_not_exception_message {
      - __init__(message: typing.Optional[str] = None, match: typing.Optional[str] = None)
  }

  class retry_any {
      - __init__()
  }

  class retry_all {
      - __init__()
  }

  class stop_base {
  }

  class stop_any {
      - __init__()
  }

  class stop_all {
      - __init__()
  }

  class stop_when_event_set {
      - __init__(event: 'threading.Event')
  }

  class stop_after_attempt {
      - __init__(max_attempt_number: int)
  }

  class stop_after_delay {
      - __init__(max_delay: _utils.time_unit_type)
  }

  class stop_before_delay {
      - __init__(max_delay: _utils.time_unit_type)
  }

  class TornadoRetrying {
      - __init__(sleep: 'typing.Callable[[float], Future[None]]' = gen.sleep)
  }

  class wait_base {
  }

  class wait_fixed {
      - __init__(wait: _utils.time_unit_type)
  }

  class wait_none {
      - __init__()
  }

  class wait_random {
      - __init__(min: _utils.time_unit_type = 0, max: _utils.time_unit_type = 1)
  }

  class wait_combine {
      - __init__()
  }

  class wait_chain {
      - __init__()
  }

  class wait_incrementing {
      - __init__(start: _utils.time_unit_type = 0, increment: _utils.time_unit_type = 100, max: _utils.time_unit_type = _utils.MAX_WAIT)
  }

  class wait_exponential {
      - __init__(multiplier: typing.Union[int, float] = 1, max: _utils.time_unit_type = _utils.MAX_WAIT, exp_base: typing.Union[int, float] = 2, min: _utils.time_unit_type = 0)
  }

  class wait_random_exponential {
  }

  class wait_exponential_jitter {
      - __init__(initial: float = 1, max: float = _utils.MAX_WAIT, exp_base: float = 2, jitter: float = 1)
  }

  class IterState {
      + actions: t.List[t.Callable[['RetryCallState'], t.Any]] = dataclasses.field(default_factory=list)
      + retry_run_result: bool = False
      + delay_since_first_attempt: int = 0
      + stop_run_result: bool = False
      + is_explicit_retry: bool = False
  --
      + reset()
  }

  class TryAgain {
  }

  class DoAttempt {
  }

  class DoSleep {
  }

  class BaseAction {
      + REPR_FIELDS: t.Sequence[str] = ()
      + NAME: t.Optional[str] = None
  }

  class RetryAction {
      + REPR_FIELDS = ('sleep',)
      + NAME = 'retry'
  --
      - __init__(sleep: t.SupportsFloat)
  }

  class RetryError {
      - __init__(last_attempt: 'Future')
      + reraise(): t.NoReturn
  }

  class AttemptManager {
      - __init__(retry_state: 'RetryCallState')
  }

  class BaseRetrying {
      - __init__(sleep: t.Callable[[t.Union[int, float]], None] = sleep, stop: 'StopBaseT' = stop_never, wait: 'WaitBaseT' = wait_none(), retry: 'RetryBaseT' = retry_if_exception_type(), before: t.Callable[['RetryCallState'], None] = before_nothing, after: t.Callable[['RetryCallState'], None] = after_nothing, before_sleep: t.Optional[t.Callable[['RetryCallState'], None]] = None, reraise: bool = False, retry_error_cls: t.Type[RetryError] = RetryError, retry_error_callback: t.Optional[t.Callable[['RetryCallState'], t.Any]] = None)
      + copy(sleep: t.Union[t.Callable[[t.Union[int, float]], None], object] = _unset, stop: t.Union['StopBaseT', object] = _unset, wait: t.Union['WaitBaseT', object] = _unset, retry: t.Union[retry_base, object] = _unset, before: t.Union[t.Callable[['RetryCallState'], None], object] = _unset, after: t.Union[t.Callable[['RetryCallState'], None], object] = _unset, before_sleep: t.Union[t.Optional[t.Callable[['RetryCallState'], None]], object] = _unset, reraise: t.Union[bool, object] = _unset, retry_error_cls: t.Union[t.Type[RetryError], object] = _unset, retry_error_callback: t.Union[t.Optional[t.Callable[['RetryCallState'], t.Any]], object] = _unset): 'BaseRetrying'
      + statistics(): t.Dict[str, t.Any]
      + iter_state(): IterState
      + wraps(f: WrappedFn): WrappedFn
      + begin()
      + iter(retry_state: 'RetryCallState'): t.Union[DoAttempt, DoSleep, t.Any]
  }

  class Retrying {
  }

  class Future {
      - __init__(attempt_number: int)
      + failed(): bool
      + {classmethod} construct(cls, attempt_number: int, value: t.Any, has_exception: bool): 'Future'
  }

  class RetryCallState {
      - __init__(retry_object: BaseRetrying, fn: t.Optional[WrappedFn], args: t.Any, kwargs: t.Any)
      + seconds_since_start(): t.Optional[float]
      + prepare_for_next_attempt()
      + set_result(val: t.Any)
      + set_exception(exc_info: t.Tuple[t.Type[BaseException], BaseException, 'types.TracebackType| None'])
  }

}

package typer {
  class State {
      - __init__()
  }

  class TyperCLIGroup {
      + list_commands(ctx: click.Context): List[str]
      + get_command(ctx: click.Context, name: str): Optional[Command]
      + invoke(ctx: click.Context): Any
      + maybe_add_run(ctx: click.Context)
  }

  class TyperArgument {
      - __init__()
      + get_help_record(ctx: click.Context): Optional[Tuple[str, str]]
      + make_metavar(): str
  }

  class TyperOption {
      - __init__()
      + get_help_record(ctx: click.Context): Optional[Tuple[str, str]]
  }

  class TyperCommand {
      - __init__(name: Optional[str])
      + format_options(ctx: click.Context, formatter: click.HelpFormatter)
      + main(args: Optional[Sequence[str]] = None, prog_name: Optional[str] = None, complete_var: Optional[str] = None, standalone_mode: bool = True, windows_expand_args: bool = True): Any
      + format_help(ctx: click.Context, formatter: click.HelpFormatter)
  }

  class TyperGroup {
      - __init__()
      + format_options(ctx: click.Context, formatter: click.HelpFormatter)
      + main(args: Optional[Sequence[str]] = None, prog_name: Optional[str] = None, complete_var: Optional[str] = None, standalone_mode: bool = True, windows_expand_args: bool = True): Any
      + format_help(ctx: click.Context, formatter: click.HelpFormatter)
      + list_commands(ctx: click.Context): List[str]
  }

  class Typer {
      - __init__()
      + callback(): Callable[[CommandFunctionType], CommandFunctionType]
      + command(name: Optional[str] = None): Callable[[CommandFunctionType], CommandFunctionType]
      + add_typer(typer_instance: 'Typer')
  }

  class Context {
  }

  class FileText {
  }

  class FileTextWrite {
  }

  class FileBinaryRead {
  }

  class FileBinaryWrite {
  }

  class CallbackParam {
  }

  class DefaultPlaceholder {
      - __init__(value)
  }

  class CommandInfo {
      - __init__(name: Optional[str] = None)
  }

  class TyperInfo {
      - __init__(typer_instance: Optional['Typer'] = Default(None))
  }

  class ParameterInfo {
      - __init__()
  }

  class OptionInfo {
      - __init__()
  }

  class ArgumentInfo {
      - __init__()
  }

  class ParamMeta {
      + empty = inspect.Parameter.empty
  --
      - __init__()
  }

  class DeveloperExceptionConfig {
      - __init__()
  }

  class OptionHighlighter {
      + highlights = ['(^|\\W)(?P<switch>\\-\\w+)(?![a-zA-Z0-9])', '(^|\\W)(?P<option>\\-\\-[\\w\\-]+)(?![a-zA-Z0-9])', '(?P<metavar>\\<[^\\>]+\\>)', '(?P<usage>Usage: )']
  }

  class NegativeOptionHighlighter {
      + highlights = ['(^|\\W)(?P<negative_switch>\\-\\w+)(?![a-zA-Z0-9])', '(^|\\W)(?P<negative_option>\\-\\-[\\w\\-]+)(?![a-zA-Z0-9])']
  }

  class CliRunner {
      + invoke(app: Typer, args: Optional[Union[str, Sequence[str]]] = None, input: Optional[Union[bytes, str, IO[Any]]] = None, env: Optional[Mapping[str, str]] = None, catch_exceptions: bool = True, color: bool = False): Result
  }

  class AnnotatedParamWithDefaultValueError {
      + argument_name: str
      + param_type: Type[ParameterInfo]
  --
      - __init__(argument_name: str, param_type: Type[ParameterInfo])
  }

  class MixedAnnotatedAndDefaultStyleError {
      + argument_name: str
      + annotated_param_type: Type[ParameterInfo]
      + default_param_type: Type[ParameterInfo]
  --
      - __init__(argument_name: str, annotated_param_type: Type[ParameterInfo], default_param_type: Type[ParameterInfo])
  }

  class MultipleTyperAnnotationsError {
      + argument_name: str
  --
      - __init__(argument_name: str)
  }

  class DefaultFactoryAndDefaultValueError {
      + argument_name: str
      + param_type: Type[ParameterInfo]
  --
      - __init__(argument_name: str, param_type: Type[ParameterInfo])
  }

  class BashComplete {
      + name = Shells.bash.value
      + source_template = COMPLETION_SCRIPT_BASH
  --
      + source_vars(): Dict[str, Any]
      + get_completion_args(): Tuple[List[str], str]
      + format_completion(item: click.shell_completion.CompletionItem): str
      + complete(): str
  }

  class ZshComplete {
      + name = Shells.zsh.value
      + source_template = COMPLETION_SCRIPT_ZSH
  --
      + source_vars(): Dict[str, Any]
      + get_completion_args(): Tuple[List[str], str]
      + format_completion(item: click.shell_completion.CompletionItem): str
      + complete(): str
  }

  class FishComplete {
      + name = Shells.fish.value
      + source_template = COMPLETION_SCRIPT_FISH
  --
      + source_vars(): Dict[str, Any]
      + get_completion_args(): Tuple[List[str], str]
      + format_completion(item: click.shell_completion.CompletionItem): str
      + complete(): str
  }

  class PowerShellComplete {
      + name = Shells.powershell.value
      + source_template = COMPLETION_SCRIPT_POWER_SHELL
  --
      + source_vars(): Dict[str, Any]
      + get_completion_args(): Tuple[List[str], str]
      + format_completion(item: click.shell_completion.CompletionItem): str
  }

  class Shells {
      + bash = 'bash'
      + zsh = 'zsh'
      + fish = 'fish'
      + powershell = 'powershell'
      + pwsh = 'pwsh'
  }

}

package emscripten {
  class EmscriptenHTTPConnection {
      + default_port: typing.ClassVar[int] = port_by_scheme['http']
      + default_socket_options: typing.ClassVar[_TYPE_SOCKET_OPTIONS]
      + timeout: None | float
      + host: str
      + port: int
      + blocksize: int
      + source_address: tuple[str, int] | None
      + socket_options: _TYPE_SOCKET_OPTIONS | None
      + proxy: Url | None
      + proxy_config: ProxyConfig | None
      + is_verified: bool = False
      + proxy_is_verified: bool | None = None
  --
      - __init__(host: str, port: int = 0)
      + set_tunnel(host: str, port: int | None = 0, headers: typing.Mapping[str, str] | None = None, scheme: str = 'http')
      + connect()
      + request(method: str, url: str, body: _TYPE_BODY | None = None, headers: typing.Mapping[str, str] | None = None)
      + getresponse(): BaseHTTPResponse
      + close()
      + is_closed(): bool
      + is_connected(): bool
      + has_connected_to_proxy(): bool
  }

  class EmscriptenHTTPSConnection {
      + default_port = port_by_scheme['https']
      + cert_reqs: int | str | None = None
      + ca_certs: str | None = None
      + ca_cert_dir: str | None = None
      + ca_cert_data: None | str | bytes = None
      + cert_file: str | None
      + key_file: str | None
      + key_password: str | None
      + ssl_context: typing.Any | None
      + ssl_version: int | str | None = None
      + ssl_minimum_version: int | None = None
      + ssl_maximum_version: int | None = None
      + assert_hostname: None | str | typing.Literal[False]
      + assert_fingerprint: str | None = None
  --
      - __init__(host: str, port: int = 0)
      + set_cert(key_file: str | None = None, cert_file: str | None = None, cert_reqs: int | str | None = None, key_password: str | None = None, ca_certs: str | None = None, assert_hostname: None | str | typing.Literal[False] = None, assert_fingerprint: str | None = None, ca_cert_dir: str | None = None, ca_cert_data: None | str | bytes = None)
  }

  class EmscriptenRequest <<dataclass>> {
      + method: str
      + url: str
      + params: dict[str, str] | None = None
      + body: _TYPE_BODY | None = None
      + headers: dict[str, str] = field(default_factory=dict)
      + timeout: float = 0
      + decode_content: bool = True
  --
      + set_header(name: str, value: str)
      + set_body(body: _TYPE_BODY | None)
  }

  class EmscriptenResponse <<dataclass>> {
      + status_code: int
      + headers: dict[str, str]
      + body: IOBase | bytes
      + request: EmscriptenRequest
  }

  class EmscriptenHttpResponseWrapper {
      - __init__(internal_response: EmscriptenResponse, url: str | None = None, connection: BaseHTTPConnection | BaseHTTPSConnection | None = None)
      + url(): str | None
      + url(url: str | None)
      + connection(): BaseHTTPConnection | BaseHTTPSConnection | None
      + retries(): Retry | None
      + retries(retries: Retry | None)
      + stream(amt: int | None = 2 ** 16, decode_content: bool | None = None): typing.Generator[bytes]
      + read(amt: int | None = None, decode_content: bool | None = None, cache_content: bool = False): bytes
      + read_chunked(amt: int | None = None, decode_content: bool | None = None): typing.Generator[bytes]
      + release_conn()
      + drain_conn()
      + data(): bytes
      + json(): typing.Any
      + close()
  }

}

package http2 {
  class HTTP2Connection {
      - __init__(host: str, port: int | None = None)
      + connect()
      + putrequest(method: str, url: str)
      + putheader(header: str | bytes)
      + endheaders(message_body: typing.Any = None)
      + send(data: typing.Any)
      + set_tunnel(host: str, port: int | None = None, headers: typing.Mapping[str, str] | None = None, scheme: str = 'http')
      + getresponse(): HTTP2Response
      + request(method: str, url: str, body: _TYPE_BODY | None = None, headers: typing.Mapping[str, str] | None = None)
      + close()
  }

  class HTTP2Response {
      - __init__(status: int, headers: HTTPHeaderDict, request_url: str, data: bytes, decode_content: bool = False)
      + data(): bytes
      + get_redirect_location()
      + close()
  }

}

package uvicorn {
  class Config {
      - __init__(app: ASGIApplication | Callable[..., Any] | str, host: str = '127.0.0.1', port: int = 8000, uds: str | None = None, fd: int | None = None, loop: LoopSetupType = 'auto', http: type[asyncio.Protocol] | HTTPProtocolType = 'auto', ws: type[asyncio.Protocol] | WSProtocolType = 'auto', ws_max_size: int = 16 * 1024 * 1024, ws_max_queue: int = 32, ws_ping_interval: float | None = 20.0, ws_ping_timeout: float | None = 20.0, ws_per_message_deflate: bool = True, lifespan: LifespanType = 'auto', env_file: str | os.PathLike[str] | None = None, log_config: dict[str, Any] | str | RawConfigParser | IO[Any] | None = LOGGING_CONFIG, log_level: str | int | None = None, access_log: bool = True, use_colors: bool | None = None, interface: InterfaceType = 'auto', reload: bool = False, reload_dirs: list[str] | str | None = None, reload_delay: float = 0.25, reload_includes: list[str] | str | None = None, reload_excludes: list[str] | str | None = None, workers: int | None = None, proxy_headers: bool = True, server_header: bool = True, date_header: bool = True, forwarded_allow_ips: list[str] | str | None = None, root_path: str = '', limit_concurrency: int | None = None, limit_max_requests: int | None = None, backlog: int = 2048, timeout_keep_alive: int = 5, timeout_notify: int = 30, timeout_graceful_shutdown: int | None = None, callback_notify: Callable[..., Awaitable[None]] | None = None, ssl_keyfile: str | os.PathLike[str] | None = None, ssl_certfile: str | os.PathLike[str] | None = None, ssl_keyfile_password: str | None = None, ssl_version: int = SSL_PROTOCOL_VERSION, ssl_cert_reqs: int = ssl.CERT_NONE, ssl_ca_certs: str | None = None, ssl_ciphers: str = 'TLSv1', headers: list[tuple[str, str]] | None = None, factory: bool = False, h11_max_incomplete_event_size: int | None = None)
      + asgi_version(): Literal['2.0', '3.0']
      + is_ssl(): bool
      + use_subprocess(): bool
      + configure_logging()
      + load()
      + setup_event_loop()
      + bind_socket(): socket.socket
      + should_reload(): bool
  }

  class ImportFromStringError {
  }

  class ColourizedFormatter {
      + level_name_colors = {TRACE_LOG_LEVEL: lambda level_name: click.style(str(level_name), fg='blue'), logging.DEBUG: lambda level_name: click.style(str(level_name), fg='cyan'), logging.INFO: lambda level_name: click.style(str(level_name), fg='green'), logging.WARNING: lambda level_name: click.style(str(level_name), fg='yellow'), logging.ERROR: lambda level_name: click.style(str(level_name), fg='red'), logging.CRITICAL: lambda level_name: click.style(str(level_name), fg='bright_red')}
  --
      - __init__(fmt: str | None = None, datefmt: str | None = None, style: Literal['%', '{', '$'] = '%', use_colors: bool | None = None)
      + color_level_name(level_name: str, level_no: int): str
      + should_use_colors(): bool
      + formatMessage(record: logging.LogRecord): str
  }

  class DefaultFormatter {
      + should_use_colors(): bool
  }

  class AccessFormatter {
      + status_code_colours = {1: lambda code: click.style(str(code), fg='bright_white'), 2: lambda code: click.style(str(code), fg='green'), 3: lambda code: click.style(str(code), fg='yellow'), 4: lambda code: click.style(str(code), fg='red'), 5: lambda code: click.style(str(code), fg='bright_red')}
  --
      + get_status_code(status_code: int): str
      + formatMessage(record: logging.LogRecord): str
  }

  class ServerState {
      - __init__()
  }

  class Server {
      - __init__(config: Config)
      + run(sockets: list[socket.socket] | None = None)
      + capture_signals(): Generator[None, None, None]
      + handle_exit(sig: int, frame: FrameType | None)
  }

  class UvicornWorker {
      + CONFIG_KWARGS: dict[str, Any] = {'loop': 'auto', 'http': 'auto'}
  --
      - __init__()
      + init_process()
      + init_signals()
      + run()
  }

  class UvicornH11Worker {
      + CONFIG_KWARGS = {'loop': 'asyncio', 'http': 'h11'}
  }

  class ASGIVersions {
      + spec_version: str
      + version: Literal['2.0'] | Literal['3.0']
  }

  class HTTPScope {
      + type: Literal['http']
      + asgi: ASGIVersions
      + http_version: str
      + method: str
      + scheme: str
      + path: str
      + raw_path: bytes
      + query_string: bytes
      + root_path: str
      + headers: Iterable[tuple[bytes, bytes]]
      + client: tuple[str, int] | None
      + server: tuple[str, int | None] | None
      + state: NotRequired[dict[str, Any]]
      + extensions: NotRequired[dict[str, dict[object, object]]]
  }

  class WebSocketScope {
      + type: Literal['websocket']
      + asgi: ASGIVersions
      + http_version: str
      + scheme: str
      + path: str
      + raw_path: bytes
      + query_string: bytes
      + root_path: str
      + headers: Iterable[tuple[bytes, bytes]]
      + client: tuple[str, int] | None
      + server: tuple[str, int | None] | None
      + subprotocols: Iterable[str]
      + state: NotRequired[dict[str, Any]]
      + extensions: NotRequired[dict[str, dict[object, object]]]
  }

  class LifespanScope {
      + type: Literal['lifespan']
      + asgi: ASGIVersions
      + state: NotRequired[dict[str, Any]]
  }

  class HTTPRequestEvent {
      + type: Literal['http.request']
      + body: bytes
      + more_body: bool
  }

  class HTTPResponseDebugEvent {
      + type: Literal['http.response.debug']
      + info: dict[str, object]
  }

  class HTTPResponseStartEvent {
      + type: Literal['http.response.start']
      + status: int
      + headers: NotRequired[Iterable[tuple[bytes, bytes]]]
      + trailers: NotRequired[bool]
  }

  class HTTPResponseBodyEvent {
      + type: Literal['http.response.body']
      + body: bytes
      + more_body: NotRequired[bool]
  }

  class HTTPResponseTrailersEvent {
      + type: Literal['http.response.trailers']
      + headers: Iterable[tuple[bytes, bytes]]
      + more_trailers: bool
  }

  class HTTPServerPushEvent {
      + type: Literal['http.response.push']
      + path: str
      + headers: Iterable[tuple[bytes, bytes]]
  }

  class HTTPDisconnectEvent {
      + type: Literal['http.disconnect']
  }

  class WebSocketConnectEvent {
      + type: Literal['websocket.connect']
  }

  class WebSocketAcceptEvent {
      + type: Literal['websocket.accept']
      + subprotocol: NotRequired[str | None]
      + headers: NotRequired[Iterable[tuple[bytes, bytes]]]
  }

  class WebSocketResponseStartEvent {
      + type: Literal['websocket.http.response.start']
      + status: int
      + headers: Iterable[tuple[bytes, bytes]]
  }

  class WebSocketResponseBodyEvent {
      + type: Literal['websocket.http.response.body']
      + body: bytes
      + more_body: NotRequired[bool]
  }

  class WebSocketDisconnectEvent {
      + type: Literal['websocket.disconnect']
      + code: int
      + reason: NotRequired[str | None]
  }

  class WebSocketCloseEvent {
      + type: Literal['websocket.close']
      + code: NotRequired[int]
      + reason: NotRequired[str | None]
  }

  class LifespanStartupEvent {
      + type: Literal['lifespan.startup']
  }

  class LifespanShutdownEvent {
      + type: Literal['lifespan.shutdown']
  }

  class LifespanStartupCompleteEvent {
      + type: Literal['lifespan.startup.complete']
  }

  class LifespanStartupFailedEvent {
      + type: Literal['lifespan.startup.failed']
      + message: str
  }

  class LifespanShutdownCompleteEvent {
      + type: Literal['lifespan.shutdown.complete']
  }

  class LifespanShutdownFailedEvent {
      + type: Literal['lifespan.shutdown.failed']
      + message: str
  }

  class ASGI2Protocol {
      - __init__(scope: Scope)
  }

}

package lifespan {
  class LifespanOff {
      - __init__(config: Config)
  }

  class LifespanOn {
      - __init__(config: Config)
  }

}

package protocols {
  class ClientDisconnected {
  }

}

package http {
  class FlowControl {
      - __init__(transport: asyncio.Transport)
      + pause_reading()
      + resume_reading()
      + pause_writing()
      + resume_writing()
  }

  class H11Protocol {
      - __init__(config: Config, server_state: ServerState, app_state: dict[str, Any], _loop: asyncio.AbstractEventLoop | None = None)
      + connection_made(transport: asyncio.Transport)
      + connection_lost(exc: Exception | None)
      + eof_received()
      + data_received(data: bytes)
      + handle_events()
      + handle_websocket_upgrade(event: h11.Request)
      + send_400_response(msg: str)
      + on_response_complete()
      + shutdown()
      + pause_writing()
      + resume_writing()
      + timeout_keep_alive_handler()
  }

  class RequestResponseCycle {
      - __init__(scope: HTTPScope, conn: h11.Connection, transport: asyncio.Transport, flow: FlowControl, logger: logging.Logger, access_logger: logging.Logger, access_log: bool, default_headers: list[tuple[bytes, bytes]], message_event: asyncio.Event, on_response: Callable[..., None])
  }

  class HttpToolsProtocol {
      - __init__(config: Config, server_state: ServerState, app_state: dict[str, Any], _loop: asyncio.AbstractEventLoop | None = None)
      + connection_made(transport: asyncio.Transport)
      + connection_lost(exc: Exception | None)
      + eof_received()
      + data_received(data: bytes)
      + handle_websocket_upgrade()
      + send_400_response(msg: str)
      + on_message_begin()
      + on_url(url: bytes)
      + on_header(name: bytes, value: bytes)
      + on_headers_complete()
      + on_body(body: bytes)
      + on_message_complete()
      + on_response_complete()
      + shutdown()
      + pause_writing()
      + resume_writing()
      + timeout_keep_alive_handler()
  }

  class RequestResponseCycle {
      - __init__(scope: HTTPScope, transport: asyncio.Transport, flow: FlowControl, logger: logging.Logger, access_logger: logging.Logger, access_log: bool, default_headers: list[tuple[bytes, bytes]], message_event: asyncio.Event, expect_100_continue: bool, keep_alive: bool, on_response: Callable[..., None])
  }

}

package websockets {
  class Server {
      + closing = False
  --
      + register(ws: WebSocketServerProtocol)
      + unregister(ws: WebSocketServerProtocol)
      + is_serving(): bool
  }

  class WebSocketProtocol {
      + extra_headers: list[tuple[str, str]]
      + logger: logging.Logger | logging.LoggerAdapter[Any]
  --
      - __init__(config: Config, server_state: ServerState, app_state: dict[str, Any], _loop: asyncio.AbstractEventLoop | None = None)
      + connection_made(transport: asyncio.Transport)
      + connection_lost(exc: Exception | None)
      + shutdown()
      + on_task_complete(task: asyncio.Task[None])
      + process_subprotocol(headers: Headers, available_subprotocols: Sequence[Subprotocol] | None): Subprotocol | None
      + send_500_response()
  }

  class WSProtocol {
      - __init__(config: Config, server_state: ServerState, app_state: dict[str, typing.Any], _loop: asyncio.AbstractEventLoop | None = None)
      + connection_made(transport: asyncio.Transport)
      + connection_lost(exc: Exception | None)
      + eof_received()
      + data_received(data: bytes)
      + handle_events()
      + pause_writing()
      + resume_writing()
      + shutdown()
      + on_task_complete(task: asyncio.Task[None])
      + handle_connect(event: events.Request)
      + handle_text(event: events.TextMessage)
      + handle_bytes(event: events.BytesMessage)
      + handle_close(event: events.CloseConnection)
      + handle_ping(event: events.Ping)
      + send_500_response()
  }

  class ReadLines {
      - __init__()
      + parse(): Generator[None, None, None]
      + connection_made(transport: asyncio.BaseTransport)
      + data_received(data: bytes)
      + eof_received()
      + connection_lost(exc: Exception | None)
  }

  class ClientProtocol {
      - __init__(uri: WebSocketURI)
      + connect(): Request
      + process_response(response: Response)
      + process_extensions(headers: Headers): list[Extension]
      + process_subprotocol(headers: Headers): Subprotocol | None
      + send_request(request: Request)
      + parse(): Generator[None]
  }

  class ClientConnection {
      - __init__()
  }

  class MultipleValuesError {
  }

  class Headers {
      - __init__()
      + copy(): Headers
      + serialize(): bytes
      + clear()
      + update()
      + get_all(key: str): list[str]
      + raw_items(): Iterator[tuple[str, str]]
  }

  class SupportsKeysAndGetItem {
      + keys(): Iterable[str]
  }

  class WebSocketException {
  }

  class ConnectionClosed {
      - __init__(rcvd: frames.Close | None, sent: frames.Close | None, rcvd_then_sent: bool | None = None)
      + code(): int
      + reason(): str
  }

  class ConnectionClosedOK {
  }

  class ConnectionClosedError {
  }

  class InvalidURI {
      - __init__(uri: str, msg: str)
  }

  class InvalidProxy {
      - __init__(proxy: str, msg: str)
  }

  class InvalidHandshake {
  }

  class SecurityError {
  }

  class ProxyError {
  }

  class InvalidProxyMessage {
  }

  class InvalidProxyStatus {
      - __init__(response: http11.Response)
  }

  class InvalidMessage {
  }

  class InvalidStatus {
      - __init__(response: http11.Response)
  }

  class InvalidHeader {
      - __init__(name: str, value: str | None = None)
  }

  class InvalidHeaderFormat {
      - __init__(name: str, error: str, header: str, pos: int)
  }

  class InvalidHeaderValue {
  }

  class InvalidOrigin {
      - __init__(origin: str | None)
  }

  class InvalidUpgrade {
  }

  class NegotiationError {
  }

  class DuplicateParameter {
      - __init__(name: str)
  }

  class InvalidParameterName {
      - __init__(name: str)
  }

  class InvalidParameterValue {
      - __init__(name: str, value: str | None)
  }

  class ProtocolError {
  }

  class PayloadTooBig {
      - __init__(size_or_message: int | None | str, max_size: int | None = None, cur_size: int | None = None)
      + set_current_size(cur_size: int | None)
  }

  class InvalidState {
  }

  class ConcurrencyError {
  }

  class Opcode {
  }

  class CloseCode {
      + NORMAL_CLOSURE = 1000
      + GOING_AWAY = 1001
      + PROTOCOL_ERROR = 1002
      + UNSUPPORTED_DATA = 1003
      + NO_STATUS_RCVD = 1005
      + ABNORMAL_CLOSURE = 1006
      + INVALID_DATA = 1007
      + POLICY_VIOLATION = 1008
      + MESSAGE_TOO_BIG = 1009
      + MANDATORY_EXTENSION = 1010
      + INTERNAL_ERROR = 1011
      + SERVICE_RESTART = 1012
      + TRY_AGAIN_LATER = 1013
      + BAD_GATEWAY = 1014
      + TLS_HANDSHAKE = 1015
  }

  class Frame <<dataclass>> {
      + opcode: Opcode
      + data: Union[bytes, bytearray, memoryview]
      + fin: bool = True
      + rsv1: bool = False
      + rsv2: bool = False
      + rsv3: bool = False
      + MAX_LOG_SIZE = int(os.environ.get('WEBSOCKETS_MAX_LOG_SIZE', '75'))
  --
      + {classmethod} parse(cls, read_exact: Callable[[int], Generator[None, None, bytes]]): Generator[None, None, Frame]
      + serialize(): bytes
      + check()
  }

  class Close <<dataclass>> {
      + code: int
      + reason: str
  --
      + {classmethod} parse(cls, data: bytes): Close
      + serialize(): bytes
      + check()
  }

  class Request <<dataclass>> {
      + path: str
      + headers: Headers
  --
      + exception(): Exception | None
      + {classmethod} parse(cls, read_line: Callable[[int], Generator[None, None, bytes]]): Generator[None, None, Request]
      + serialize(): bytes
  }

  class Response <<dataclass>> {
      + status_code: int
      + reason_phrase: str
      + headers: Headers
      + body: bytes = b''
  --
      + exception(): Exception | None
      + {classmethod} parse(cls, read_line: Callable[[int], Generator[None, None, bytes]], read_exact: Callable[[int], Generator[None, None, bytes]], read_to_eof: Callable[[int], Generator[None, None, bytes]], include_body: bool = True): Generator[None, None, Response]
      + serialize(): bytes
  }

  class Side {
  }

  class State {
  }

  class Protocol {
      - __init__(side: Side)
      + state(): State
      + state(state: State)
      + close_code(): int | None
      + close_reason(): str | None
      + close_exc(): ConnectionClosed
      + receive_data(data: bytes)
      + receive_eof()
      + send_continuation(data: bytes, fin: bool)
      + send_text(data: bytes, fin: bool = True)
      + send_binary(data: bytes, fin: bool = True)
      + send_close(code: int | None = None, reason: str = '')
      + send_ping(data: bytes)
      + send_pong(data: bytes)
      + fail(code: int, reason: str = '')
      + events_received(): list[Event]
      + data_to_send(): list[bytes]
      + close_expected(): bool
      + parse(): Generator[None]
      + discard(): Generator[None]
      + recv_frame(frame: Frame)
      + send_frame(frame: Frame)
      + send_eof()
  }

  class ServerProtocol {
      - __init__()
      + accept(request: Request): Response
      + process_request(request: Request): tuple[str, str | None, str | None]
      + process_origin(headers: Headers): Origin | None
      + process_extensions(headers: Headers): tuple[str | None, list[Extension]]
      + process_subprotocol(headers: Headers): Subprotocol | None
      + select_subprotocol(subprotocols: Sequence[Subprotocol]): Subprotocol | None
      + reject(status: StatusLike, text: str): Response
      + send_response(response: Response)
      + parse(): Generator[None]
  }

  class ServerConnection {
      - __init__()
  }

  class StreamReader {
      - __init__()
      + read_line(m: int): Generator[None, None, bytes]
      + read_exact(n: int): Generator[None, None, bytes]
      + read_to_eof(m: int): Generator[None, None, bytes]
      + at_eof(): Generator[None, None, bool]
      + feed_data(data: bytes)
      + feed_eof()
      + discard()
  }

  class WebSocketURI <<dataclass>> {
      + secure: bool
      + host: str
      + port: int
      + path: str
      + query: str
      + username: str | None = None
      + password: str | None = None
  --
      + resource_name(): str
      + user_info(): tuple[str, str] | None
  }

  class Proxy <<dataclass>> {
      + scheme: str
      + host: str
      + port: int
      + username: str | None = None
      + password: str | None = None
  --
      + user_info(): tuple[str, str] | None
  }

}

package supervisors {
  class BaseReload {
      - __init__(config: Config, target: Callable[[list[socket] | None], None], sockets: list[socket])
      + signal_handler(sig: int, frame: FrameType | None)
      + run()
      + pause()
      + startup()
      + restart()
      + shutdown()
      + should_restart(): list[Path] | None
  }

  class Process {
      - __init__(config: Config, target: Callable[[list[socket] | None], None], sockets: list[socket])
      + ping(timeout: float = 5): bool
      + pong()
      + always_pong()
      + target(sockets: list[socket] | None = None): Any
      + is_alive(timeout: float = 5): bool
      + start()
      + terminate()
      + kill()
      + join()
      + pid(): int | None
  }

  class Multiprocess {
      - __init__(config: Config, target: Callable[[list[socket] | None], None], sockets: list[socket])
      + init_processes()
      + terminate_all()
      + join_all()
      + restart_all()
      + run()
      + keep_subprocess_alive()
      + handle_signals()
      + handle_int()
      + handle_term()
      + handle_break()
      + handle_hup()
      + handle_ttin()
      + handle_ttou()
  }

  class StatReload {
      - __init__(config: Config, target: Callable[[list[socket] | None], None], sockets: list[socket])
      + should_restart(): list[Path] | None
      + restart()
      + iter_py_files(): Iterator[Path]
  }

  class FileFilter {
      - __init__(config: Config)
  }

  class WatchFilesReload {
      - __init__(config: Config, target: Callable[[list[socket] | None], None], sockets: list[socket])
      + should_restart(): list[Path] | None
  }

}

package watchfiles {
  class BaseFilter {
      + ignore_dirs: Sequence[str] = ()
      + ignore_entity_patterns: Sequence[str] = ()
      + ignore_paths: Sequence[Union[str, Path]] = ()
  --
      - __init__()
  }

  class DefaultFilter {
      + ignore_dirs: Sequence[str] = ('__pycache__', '.git', '.hg', '.svn', '.tox', '.venv', '.idea', 'node_modules', '.mypy_cache', '.pytest_cache', '.hypothesis')
      + ignore_entity_patterns: Sequence[str] = ('\\.py[cod]$', '\\.___jb_...___$', '\\.sw.$', '~$', '^\\.\\#', '^\\.DS_Store$', '^flycheck_')
  --
      - __init__()
  }

  class PythonFilter {
      - __init__()
  }

  class Change {
      + added = 1
      + modified = 2
      + deleted = 3
  --
      + raw_str(): str
  }

  class AbstractEvent {
      + is_set(): bool
  }

  class CombinedProcess {
      - __init__(p: 'Union[SpawnProcess, subprocess.Popen[bytes]]')
      + stop(sigint_timeout: int = 5, sigkill_timeout: int = 1)
      + is_alive(): bool
      + pid(): int
      + join(timeout: int)
      + exitcode(): Optional[int]
  }

}

package extensions {
  class Extension {
      + name: ExtensionName
  --
      + decode(frame: Frame): Frame
      + encode(frame: Frame): Frame
  }

  class ClientExtensionFactory {
      + name: ExtensionName
  --
      + get_request_params(): Sequence[ExtensionParameter]
      + process_response_params(params: Sequence[ExtensionParameter], accepted_extensions: Sequence[Extension]): Extension
  }

  class ServerExtensionFactory {
      + name: ExtensionName
  --
      + process_request_params(params: Sequence[ExtensionParameter], accepted_extensions: Sequence[Extension]): tuple[list[ExtensionParameter], Extension]
  }

  class PerMessageDeflate {
      + name = ExtensionName('permessage-deflate')
  --
      - __init__(remote_no_context_takeover: bool, local_no_context_takeover: bool, remote_max_window_bits: int, local_max_window_bits: int, compress_settings: dict[Any, Any] | None = None)
      + decode(frame: frames.Frame): frames.Frame
      + encode(frame: frames.Frame): frames.Frame
  }

  class ClientPerMessageDeflateFactory {
      + name = ExtensionName('permessage-deflate')
  --
      - __init__(server_no_context_takeover: bool = False, client_no_context_takeover: bool = False, server_max_window_bits: int | None = None, client_max_window_bits: int | Literal[True] | None = True, compress_settings: dict[str, Any] | None = None)
      + get_request_params(): Sequence[ExtensionParameter]
      + process_response_params(params: Sequence[ExtensionParameter], accepted_extensions: Sequence[Extension]): PerMessageDeflate
  }

  class ServerPerMessageDeflateFactory {
      + name = ExtensionName('permessage-deflate')
  --
      - __init__(server_no_context_takeover: bool = False, client_no_context_takeover: bool = False, server_max_window_bits: int | None = None, client_max_window_bits: int | None = None, compress_settings: dict[str, Any] | None = None, require_client_max_window_bits: bool = False)
      + process_request_params(params: Sequence[ExtensionParameter], accepted_extensions: Sequence[Extension]): tuple[list[ExtensionParameter], PerMessageDeflate]
  }

}

package sync {
  class ClientConnection {
      - __init__(socket: socket.socket, protocol: ClientProtocol)
      + handshake(additional_headers: HeadersLike | None = None, user_agent_header: str | None = USER_AGENT, timeout: float | None = None)
      + process_event(event: Event)
      + recv_events()
  }

  class SSLSSLSocket {
      + recv_bufsize = 65536
  --
      - __init__(sock: socket.socket, ssl_context: ssl_module.SSLContext, server_hostname: str | None = None)
      + run_io(func: Callable[..., T]): T
      + recv(buflen: int): bytes
      + send(data: bytes): int
      + sendall(data: bytes)
  }

  class Connection {
      + recv_bufsize = 65536
  --
      - __init__(socket: socket.socket, protocol: Protocol)
      + local_address(): Any
      + remote_address(): Any
      + state(): State
      + subprotocol(): Subprotocol | None
      + close_code(): int | None
      + close_reason(): str | None
      + recv(timeout: float | None, decode: Literal[True]): str
      + recv(timeout: float | None, decode: Literal[False]): bytes
      + recv(timeout: float | None = None): str
      + recv(timeout: float | None = None): bytes
      + recv(timeout: float | None = None, decode: bool | None = None): Data
      + recv(timeout: float | None = None, decode: bool | None = None): Data
      + recv_streaming(decode: Literal[True]): Iterator[str]
      + recv_streaming(decode: Literal[False]): Iterator[bytes]
      + recv_streaming(decode: bool | None = None): Iterator[Data]
      + recv_streaming(decode: bool | None = None): Iterator[Data]
      + send(message: Data | Iterable[Data], text: bool | None = None)
      + close(code: int = CloseCode.NORMAL_CLOSURE, reason: str = '')
      + ping(data: Data | None = None, ack_on_close: bool = False): threading.Event
      + pong(data: Data = b'')
      + process_event(event: Event)
      + acknowledge_pings(data: bytes)
      + acknowledge_pending_pings()
      + keepalive()
      + start_keepalive()
      + recv_events()
      + send_context(): Iterator[None]
      + send_data()
      + set_recv_exc(exc: BaseException | None)
      + close_socket()
  }

  class Assembler {
      - __init__(high: int | None = None, low: int | None = None, pause: Callable[[], Any] = lambda: None, resume: Callable[[], Any] = lambda: None)
      + get_next_frame(timeout: float | None = None): Frame
      + reset_queue(frames: Iterable[Frame])
      + get(timeout: float | None, decode: Literal[True]): str
      + get(timeout: float | None, decode: Literal[False]): bytes
      + get(timeout: float | None = None): str
      + get(timeout: float | None = None): bytes
      + get(timeout: float | None = None, decode: bool | None = None): Data
      + get(timeout: float | None = None, decode: bool | None = None): Data
      + get_iter(decode: Literal[True]): Iterator[str]
      + get_iter(decode: Literal[False]): Iterator[bytes]
      + get_iter(decode: bool | None = None): Iterator[Data]
      + get_iter(decode: bool | None = None): Iterator[Data]
      + put(frame: Frame)
      + maybe_pause()
      + maybe_resume()
      + close()
  }

  class Router {
      - __init__(url_map: Map, server_name: str | None = None, url_scheme: str = 'ws')
      + get_server_name(connection: ServerConnection, request: Request): str
      + redirect(connection: ServerConnection, url: str): Response
      + not_found(connection: ServerConnection): Response
      + route_request(connection: ServerConnection, request: Request): Response | None
      + handler(connection: ServerConnection)
  }

  class ServerConnection {
      - __init__(socket: socket.socket, protocol: ServerProtocol)
      + respond(status: StatusLike, text: str): Response
      + handshake(process_request: Callable[[ServerConnection, Request], Response | None] | None = None, process_response: Callable[[ServerConnection, Request, Response], Response | None] | None = None, server_header: str | None = SERVER, timeout: float | None = None)
      + process_event(event: Event)
      + recv_events()
  }

  class Server {
      - __init__(socket: socket.socket, handler: Callable[[socket.socket, Any], None], logger: LoggerLike | None = None)
      + serve_forever()
      + shutdown()
      + fileno(): int
  }

  class Deadline {
      - __init__(timeout: float | None)
      + timeout(): float | None
  }

}

package yaml {
  class ComposerError {
  }

  class Composer {
      - __init__()
      + check_node()
      + get_node()
      + get_single_node()
      + compose_document()
      + compose_node(parent, index)
      + compose_scalar_node(anchor)
      + compose_sequence_node(anchor)
      + compose_mapping_node(anchor)
  }

  class ConstructorError {
  }

  class BaseConstructor {
      + yaml_constructors = {}
      + yaml_multi_constructors = {}
  --
      - __init__()
      + check_data()
      + check_state_key(key)
      + get_data()
      + get_single_data()
      + construct_document(node)
      + construct_object(node, deep = False)
      + construct_scalar(node)
      + construct_sequence(node, deep = False)
      + construct_mapping(node, deep = False)
      + construct_pairs(node, deep = False)
      + {classmethod} add_constructor(cls, tag, constructor)
      + {classmethod} add_multi_constructor(cls, tag_prefix, multi_constructor)
  }

  class SafeConstructor {
      + bool_values = {'yes': True, 'no': False, 'true': True, 'false': False, 'on': True, 'off': False}
      + inf_value = 1e+300
      + nan_value = -inf_value / inf_value
      + timestamp_regexp = re.compile('^(?P<year>[0-9][0-9][0-9][0-9])\n                -(?P<month>[0-9][0-9]?)\n                -(?P<day>[0-9][0-9]?)\n                (?:(?:[Tt]|[ \\t]+)\n                (?P<hour>[0-9][0-9]?)\n                :(?P<minute>[0-9][0-9])\n                :(?P<second>[0-9][0-9])\n                (?:\\.(?P<fraction>[0-9]*))?\n                (?:[ \\t]*(?P<tz>Z|(?P<tz_sign>[-+])(?P<tz_hour>[0-9][0-9]?)\n                (?::(?P<tz_minute>[0-9][0-9]))?))?)?$', re.X)
  --
      + construct_scalar(node)
      + flatten_mapping(node)
      + construct_mapping(node, deep = False)
      + construct_yaml_null(node)
      + construct_yaml_bool(node)
      + construct_yaml_int(node)
      + construct_yaml_float(node)
      + construct_yaml_binary(node)
      + construct_yaml_timestamp(node)
      + construct_yaml_omap(node)
      + construct_yaml_pairs(node)
      + construct_yaml_set(node)
      + construct_yaml_str(node)
      + construct_yaml_seq(node)
      + construct_yaml_map(node)
      + construct_yaml_object(node, cls)
      + construct_undefined(node)
  }

  class FullConstructor {
      + get_state_keys_blacklist()
      + get_state_keys_blacklist_regexp()
      + construct_python_str(node)
      + construct_python_unicode(node)
      + construct_python_bytes(node)
      + construct_python_long(node)
      + construct_python_complex(node)
      + construct_python_tuple(node)
      + find_python_module(name, mark, unsafe = False)
      + find_python_name(name, mark, unsafe = False)
      + construct_python_name(suffix, node)
      + construct_python_module(suffix, node)
      + make_python_instance(suffix, node, args = None, kwds = None, newobj = False, unsafe = False)
      + set_python_instance_state(instance, state, unsafe = False)
      + construct_python_object(suffix, node)
      + construct_python_object_apply(suffix, node, newobj = False)
      + construct_python_object_new(suffix, node)
  }

  class UnsafeConstructor {
      + find_python_module(name, mark)
      + find_python_name(name, mark)
      + make_python_instance(suffix, node, args = None, kwds = None, newobj = False)
      + set_python_instance_state(instance, state)
  }

  class Constructor {
  }

  class CBaseLoader {
      - __init__(stream)
  }

  class CSafeLoader {
      - __init__(stream)
  }

  class CFullLoader {
      - __init__(stream)
  }

  class CUnsafeLoader {
      - __init__(stream)
  }

  class CLoader {
      - __init__(stream)
  }

  class CBaseDumper {
      - __init__(stream, default_style = None, default_flow_style = False, canonical = None, indent = None, width = None, allow_unicode = None, line_break = None, encoding = None, explicit_start = None, explicit_end = None, version = None, tags = None, sort_keys = True)
  }

  class CSafeDumper {
      - __init__(stream, default_style = None, default_flow_style = False, canonical = None, indent = None, width = None, allow_unicode = None, line_break = None, encoding = None, explicit_start = None, explicit_end = None, version = None, tags = None, sort_keys = True)
  }

  class CDumper {
      - __init__(stream, default_style = None, default_flow_style = False, canonical = None, indent = None, width = None, allow_unicode = None, line_break = None, encoding = None, explicit_start = None, explicit_end = None, version = None, tags = None, sort_keys = True)
  }

  class BaseDumper {
      - __init__(stream, default_style = None, default_flow_style = False, canonical = None, indent = None, width = None, allow_unicode = None, line_break = None, encoding = None, explicit_start = None, explicit_end = None, version = None, tags = None, sort_keys = True)
  }

  class SafeDumper {
      - __init__(stream, default_style = None, default_flow_style = False, canonical = None, indent = None, width = None, allow_unicode = None, line_break = None, encoding = None, explicit_start = None, explicit_end = None, version = None, tags = None, sort_keys = True)
  }

  class Dumper {
      - __init__(stream, default_style = None, default_flow_style = False, canonical = None, indent = None, width = None, allow_unicode = None, line_break = None, encoding = None, explicit_start = None, explicit_end = None, version = None, tags = None, sort_keys = True)
  }

  class EmitterError {
  }

  class ScalarAnalysis {
      - __init__(scalar, empty, multiline, allow_flow_plain, allow_block_plain, allow_single_quoted, allow_double_quoted, allow_block)
  }

  class Emitter {
      + DEFAULT_TAG_PREFIXES = {'!': '!', 'tag:yaml.org,2002:': '!!'}
      + ESCAPE_REPLACEMENTS = {'\x00': '0', '\x07': 'a', '\x08': 'b', '\t': 't', '\n': 'n', '\x0b': 'v', '\x0c': 'f', '\r': 'r', '\x1b': 'e', '"': '"', '\\': '\\', '\x85': 'N', '\xa0': '_', '\u2028': 'L', '\u2029': 'P'}
  --
      - __init__(stream, canonical = None, indent = None, width = None, allow_unicode = None, line_break = None)
      + dispose()
      + emit(event)
      + need_more_events()
      + need_events(count)
      + increase_indent(flow = False, indentless = False)
      + expect_stream_start()
      + expect_nothing()
      + expect_first_document_start()
      + expect_document_start(first = False)
      + expect_document_end()
      + expect_document_root()
      + expect_node(root = False, sequence = False, mapping = False, simple_key = False)
      + expect_alias()
      + expect_scalar()
      + expect_flow_sequence()
      + expect_first_flow_sequence_item()
      + expect_flow_sequence_item()
      + expect_flow_mapping()
      + expect_first_flow_mapping_key()
      + expect_flow_mapping_key()
      + expect_flow_mapping_simple_value()
      + expect_flow_mapping_value()
      + expect_block_sequence()
      + expect_first_block_sequence_item()
      + expect_block_sequence_item(first = False)
      + expect_block_mapping()
      + expect_first_block_mapping_key()
      + expect_block_mapping_key(first = False)
      + expect_block_mapping_simple_value()
      + expect_block_mapping_value()
      + check_empty_sequence()
      + check_empty_mapping()
      + check_empty_document()
      + check_simple_key()
      + process_anchor(indicator)
      + process_tag()
      + choose_scalar_style()
      + process_scalar()
      + prepare_version(version)
      + prepare_tag_handle(handle)
      + prepare_tag_prefix(prefix)
      + prepare_tag(tag)
      + prepare_anchor(anchor)
      + analyze_scalar(scalar)
      + flush_stream()
      + write_stream_start()
      + write_stream_end()
      + write_indicator(indicator, need_whitespace, whitespace = False, indention = False)
      + write_indent()
      + write_line_break(data = None)
      + write_version_directive(version_text)
      + write_tag_directive(handle_text, prefix_text)
      + write_single_quoted(text, split = True)
      + write_double_quoted(text, split = True)
      + determine_block_hints(text)
      + write_folded(text)
      + write_literal(text)
      + write_plain(text, split = True)
  }

  class Mark {
      - __init__(name, index, line, column, buffer, pointer)
      + get_snippet(indent = 4, max_length = 75)
  }

  class YAMLError {
  }

  class MarkedYAMLError {
      - __init__(context = None, context_mark = None, problem = None, problem_mark = None, note = None)
  }

  class Event {
      - __init__(start_mark = None, end_mark = None)
  }

  class NodeEvent {
      - __init__(anchor, start_mark = None, end_mark = None)
  }

  class CollectionStartEvent {
      - __init__(anchor, tag, implicit, start_mark = None, end_mark = None, flow_style = None)
  }

  class CollectionEndEvent {
  }

  class StreamStartEvent {
      - __init__(start_mark = None, end_mark = None, encoding = None)
  }

  class StreamEndEvent {
  }

  class DocumentStartEvent {
      - __init__(start_mark = None, end_mark = None, explicit = None, version = None, tags = None)
  }

  class DocumentEndEvent {
      - __init__(start_mark = None, end_mark = None, explicit = None)
  }

  class AliasEvent {
  }

  class ScalarEvent {
      - __init__(anchor, tag, implicit, value, start_mark = None, end_mark = None, style = None)
  }

  class SequenceStartEvent {
  }

  class SequenceEndEvent {
  }

  class MappingStartEvent {
  }

  class MappingEndEvent {
  }

  class BaseLoader {
      - __init__(stream)
  }

  class FullLoader {
      - __init__(stream)
  }

  class SafeLoader {
      - __init__(stream)
  }

  class Loader {
      - __init__(stream)
  }

  class UnsafeLoader {
      - __init__(stream)
  }

  class Node {
      - __init__(tag, value, start_mark, end_mark)
  }

  class ScalarNode {
      + id = 'scalar'
  --
      - __init__(tag, value, start_mark = None, end_mark = None, style = None)
  }

  class CollectionNode {
      - __init__(tag, value, start_mark = None, end_mark = None, flow_style = None)
  }

  class SequenceNode {
      + id = 'sequence'
  }

  class MappingNode {
      + id = 'mapping'
  }

  class ParserError {
  }

  class Parser {
      + DEFAULT_TAGS = {'!': '!', '!!': 'tag:yaml.org,2002:'}
  --
      - __init__()
      + dispose()
      + check_event()
      + peek_event()
      + get_event()
      + parse_stream_start()
      + parse_implicit_document_start()
      + parse_document_start()
      + parse_document_end()
      + parse_document_content()
      + process_directives()
      + parse_block_node()
      + parse_flow_node()
      + parse_block_node_or_indentless_sequence()
      + parse_node(block = False, indentless_sequence = False)
      + parse_block_sequence_first_entry()
      + parse_block_sequence_entry()
      + parse_indentless_sequence_entry()
      + parse_block_mapping_first_key()
      + parse_block_mapping_key()
      + parse_block_mapping_value()
      + parse_flow_sequence_first_entry()
      + parse_flow_sequence_entry(first = False)
      + parse_flow_sequence_entry_mapping_key()
      + parse_flow_sequence_entry_mapping_value()
      + parse_flow_sequence_entry_mapping_end()
      + parse_flow_mapping_first_key()
      + parse_flow_mapping_key(first = False)
      + parse_flow_mapping_value()
      + parse_flow_mapping_empty_value()
      + process_empty_scalar(mark)
  }

  class ReaderError {
      - __init__(name, position, character, encoding, reason)
  }

  class Reader {
      + NON_PRINTABLE = re.compile('[^\t\n\r -~\x85\xa0-\ud7ff\ue000-�𐀀-\U0010ffff]')
  --
      - __init__(stream)
      + peek(index = 0)
      + prefix(length = 1)
      + forward(length = 1)
      + get_mark()
      + determine_encoding()
      + check_printable(data)
      + update(length)
      + update_raw(size = 4096)
  }

  class RepresenterError {
  }

  class BaseRepresenter {
      + yaml_representers = {}
      + yaml_multi_representers = {}
  --
      - __init__(default_style = None, default_flow_style = False, sort_keys = True)
      + represent(data)
      + represent_data(data)
      + {classmethod} add_representer(cls, data_type, representer)
      + {classmethod} add_multi_representer(cls, data_type, representer)
      + represent_scalar(tag, value, style = None)
      + represent_sequence(tag, sequence, flow_style = None)
      + represent_mapping(tag, mapping, flow_style = None)
      + ignore_aliases(data)
  }

  class SafeRepresenter {
      + inf_value = 1e+300
  --
      + ignore_aliases(data)
      + represent_none(data)
      + represent_str(data)
      + represent_binary(data)
      + represent_bool(data)
      + represent_int(data)
      + represent_float(data)
      + represent_list(data)
      + represent_dict(data)
      + represent_set(data)
      + represent_date(data)
      + represent_datetime(data)
      + represent_yaml_object(tag, data, cls, flow_style = None)
      + represent_undefined(data)
  }

  class Representer {
      + represent_complex(data)
      + represent_tuple(data)
      + represent_name(data)
      + represent_module(data)
      + represent_object(data)
      + represent_ordered_dict(data)
  }

  class ResolverError {
  }

  class BaseResolver {
      + DEFAULT_SCALAR_TAG = 'tag:yaml.org,2002:str'
      + DEFAULT_SEQUENCE_TAG = 'tag:yaml.org,2002:seq'
      + DEFAULT_MAPPING_TAG = 'tag:yaml.org,2002:map'
      + yaml_implicit_resolvers = {}
      + yaml_path_resolvers = {}
  --
      - __init__()
      + {classmethod} add_implicit_resolver(cls, tag, regexp, first)
      + {classmethod} add_path_resolver(cls, tag, path, kind = None)
      + descend_resolver(current_node, current_index)
      + ascend_resolver()
      + check_resolver_prefix(depth, path, kind, current_node, current_index)
      + resolve(kind, value, implicit)
  }

  class Resolver {
  }

  class ScannerError {
  }

  class SimpleKey {
      - __init__(token_number, required, index, line, column, mark)
  }

  class Scanner {
      + ESCAPE_REPLACEMENTS = {'0': '\x00', 'a': '\x07', 'b': '\x08', 't': '\t', '\t': '\t', 'n': '\n', 'v': '\x0b', 'f': '\x0c', 'r': '\r', 'e': '\x1b', ' ': ' ', '"': '"', '\\': '\\', '/': '/', 'N': '\x85', '_': '\xa0', 'L': '\u2028', 'P': '\u2029'}
      + ESCAPE_CODES = {'x': 2, 'u': 4, 'U': 8}
  --
      - __init__()
      + check_token()
      + peek_token()
      + get_token()
      + need_more_tokens()
      + fetch_more_tokens()
      + next_possible_simple_key()
      + stale_possible_simple_keys()
      + save_possible_simple_key()
      + remove_possible_simple_key()
      + unwind_indent(column)
      + add_indent(column)
      + fetch_stream_start()
      + fetch_stream_end()
      + fetch_directive()
      + fetch_document_start()
      + fetch_document_end()
      + fetch_document_indicator(TokenClass)
      + fetch_flow_sequence_start()
      + fetch_flow_mapping_start()
      + fetch_flow_collection_start(TokenClass)
      + fetch_flow_sequence_end()
      + fetch_flow_mapping_end()
      + fetch_flow_collection_end(TokenClass)
      + fetch_flow_entry()
      + fetch_block_entry()
      + fetch_key()
      + fetch_value()
      + fetch_alias()
      + fetch_anchor()
      + fetch_tag()
      + fetch_literal()
      + fetch_folded()
      + fetch_block_scalar(style)
      + fetch_single()
      + fetch_double()
      + fetch_flow_scalar(style)
      + fetch_plain()
      + check_directive()
      + check_document_start()
      + check_document_end()
      + check_block_entry()
      + check_key()
      + check_value()
      + check_plain()
      + scan_to_next_token()
      + scan_directive()
      + scan_directive_name(start_mark)
      + scan_yaml_directive_value(start_mark)
      + scan_yaml_directive_number(start_mark)
      + scan_tag_directive_value(start_mark)
      + scan_tag_directive_handle(start_mark)
      + scan_tag_directive_prefix(start_mark)
      + scan_directive_ignored_line(start_mark)
      + scan_anchor(TokenClass)
      + scan_tag()
      + scan_block_scalar(style)
      + scan_block_scalar_indicators(start_mark)
      + scan_block_scalar_ignored_line(start_mark)
      + scan_block_scalar_indentation()
      + scan_block_scalar_breaks(indent)
      + scan_flow_scalar(style)
      + scan_flow_scalar_non_spaces(double, start_mark)
      + scan_flow_scalar_spaces(double, start_mark)
      + scan_flow_scalar_breaks(double, start_mark)
      + scan_plain()
      + scan_plain_spaces(indent, start_mark)
      + scan_tag_handle(name, start_mark)
      + scan_tag_uri(name, start_mark)
      + scan_uri_escapes(name, start_mark)
      + scan_line_break()
  }

  class SerializerError {
  }

  class Serializer {
      + ANCHOR_TEMPLATE = 'id%03d'
  --
      - __init__(encoding = None, explicit_start = None, explicit_end = None, version = None, tags = None)
      + open()
      + close()
      + serialize(node)
      + anchor_node(node)
      + generate_anchor(node)
      + serialize_node(node, parent, index)
  }

  class Token {
      - __init__(start_mark, end_mark)
  }

  class DirectiveToken {
      + id = '<directive>'
  --
      - __init__(name, value, start_mark, end_mark)
  }

  class DocumentStartToken {
      + id = '<document start>'
  }

  class DocumentEndToken {
      + id = '<document end>'
  }

  class StreamStartToken {
      + id = '<stream start>'
  --
      - __init__(start_mark = None, end_mark = None, encoding = None)
  }

  class StreamEndToken {
      + id = '<stream end>'
  }

  class BlockSequenceStartToken {
      + id = '<block sequence start>'
  }

  class BlockMappingStartToken {
      + id = '<block mapping start>'
  }

  class BlockEndToken {
      + id = '<block end>'
  }

  class FlowSequenceStartToken {
      + id = '['
  }

  class FlowMappingStartToken {
      + id = '{'
  }

  class FlowSequenceEndToken {
      + id = ']'
  }

  class FlowMappingEndToken {
      + id = '}'
  }

  class KeyToken {
      + id = '?'
  }

  class ValueToken {
      + id = ':'
  }

  class BlockEntryToken {
      + id = '-'
  }

  class FlowEntryToken {
      + id = ','
  }

  class AliasToken {
      + id = '<alias>'
  --
      - __init__(value, start_mark, end_mark)
  }

  class AnchorToken {
      + id = '<anchor>'
  --
      - __init__(value, start_mark, end_mark)
  }

  class TagToken {
      + id = '<tag>'
  --
      - __init__(value, start_mark, end_mark)
  }

  class ScalarToken {
      + id = '<scalar>'
  --
      - __init__(value, plain, start_mark, end_mark, style = None)
  }

  class YAMLObjectMetaclass {
      - __init__(cls, name, bases, kwds)
  }

  class YAMLObject {
      + yaml_loader = [Loader, FullLoader, UnsafeLoader]
      + yaml_dumper = Dumper
      + yaml_tag = None
      + yaml_flow_style = None
  --
      + {classmethod} from_yaml(cls, loader, node)
      + {classmethod} to_yaml(cls, dumper, data)
  }

}

package Scripts {
  class MakeRFC822 {
      - __init__(options)
      + main()
  }

}

package uml {
  class DefaultDiagramFactory {
      - __init__(file_system: FileSystem, settings: dict[str, Any] | None = None)
      + create_analyzer(diagram_type: str): DiagramAnalyzer
      + create_generator(diagram_type: str): DiagramGenerator
      + register_analyzer(diagram_type: str, analyzer_class: type[DiagramAnalyzer])
      + register_generator(diagram_type: str, generator_class: type[DiagramGenerator])
  }

}

package core {
  class UMLGeneratorError {
      - __init__(message: str, cause: Exception | None = None)
  }

  class ConfigurationError {
  }

  class ParserError {
  }

  class GeneratorError {
  }

  class FileSystemError {
  }

  class DiagramTypeError {
  }

  class FileSystem {
      + read_file(path: str | Path): str
      + write_file(path: str | Path, content: str)
      + ensure_directory(path: str | Path)
      + find_files(directory: str | Path, pattern: str): list[Path]
  }

  class DefaultFileSystem {
      + read_file(path: str | Path): str
      + write_file(path: str | Path, content: str)
      + ensure_directory(path: str | Path)
      + find_files(directory: str | Path, pattern: str): list[Path]
  }

  class DiagramModel {
      + name(): str
      + diagram_type(): str
  }

  class DiagramAnalyzer {
      + analyze(path: str | Path): DiagramModel
  }

  class DiagramGenerator {
      + generate_diagram(model: DiagramModel, output_path: str | Path)
      + generate_index(output_dir: str | Path, diagrams: list[Path])
  }

  class DiagramFactory {
      + create_analyzer(diagram_type: str): DiagramAnalyzer
      + create_generator(diagram_type: str): DiagramGenerator
  }

  class UmlService {
      - __init__(factory: DiagramFactory, settings: dict[str, Any] | None = None)
      + generate_diagram(diagram_type: str, source_path: str | Path, output_path: str | Path)
      + generate_diagrams(diagram_type: str, source_paths: list[str | Path], output_dir: str | Path): list[Path]
      + generate_all_diagrams(source_paths: dict[str, list[str | Path]], output_dir: str | Path): dict[str, list[Path]]
  }

}

package diagrams {
  class BaseDiagramModel {
      - __init__(name: str, diagram_type: str)
      + name(): str
      + diagram_type(): str
  }

  class BaseDiagramAnalyzer {
      - __init__(file_system: FileSystem)
      + analyze(path: str | Path): DiagramModel
  }

  class BaseDiagramGenerator {
      - __init__(file_system: FileSystem, settings: dict[str, Any] | None = None)
      + generate_diagram(model: DiagramModel, output_path: str | Path)
      + generate_index(output_dir: str | Path, diagrams: list[Path])
  }

}

package activity_diagram {
  class ActivityAnalyzer {
      - __init__(file_system: FileSystem)
      + analyze(path: str | Path): ActivityDiagram
  }

  class ActivityDiagramGenerator {
      - __init__(file_system: FileSystem, settings: dict[str, Any] | None = None)
      + generate_diagram(model: DiagramModel, output_path: str | Path)
      + generate_plantuml(diagram: ActivityDiagram): str
      + generate_index(output_dir: str | Path, diagrams: list[Path])
  }

  class ActivityDiagram {
      - __init__(name: str)
      + add_activity(activity: 'ActivityModel')
      + add_transition(transition: 'TransitionModel')
      + add_start_node(start_node: 'StartNodeModel')
      + add_end_node(end_node: 'EndNodeModel')
      + add_decision_node(decision_node: 'DecisionNodeModel')
      + add_merge_node(merge_node: 'MergeNodeModel')
      + add_fork_node(fork_node: 'ForkNodeModel')
      + add_join_node(join_node: 'JoinNodeModel')
  }

  class ActivityNodeModel {
      - __init__(id: str, name: str | None = None)
  }

  class ActivityModel {
      - __init__(id: str, name: str | None = None, description: str | None = None)
  }

  class TransitionModel {
      - __init__(source_id: str, target_id: str, guard: str | None = None, label: str | None = None)
  }

  class StartNodeModel {
      - __init__(id: str)
  }

  class EndNodeModel {
      - __init__(id: str)
  }

  class DecisionNodeModel {
      - __init__(id: str, name: str | None = None)
  }

  class MergeNodeModel {
      - __init__(id: str, name: str | None = None)
  }

  class ForkNodeModel {
      - __init__(id: str, name: str | None = None)
  }

  class JoinNodeModel {
      - __init__(id: str, name: str | None = None)
  }

}

package class_diagram {
  class ClassAnalyzer {
      - __init__(file_system: FileSystem)
      + analyze(path: str | Path, module_name: str | None = None, exclude_patterns: list[str] | None = None, include_private: bool = False): ClassDiagram
  }

  class ClassDefinitionVisitor {
      - __init__(file_path: Path, include_private: bool = False)
      + visit_Import(node: ast.Import)
      + visit_ImportFrom(node: ast.ImportFrom)
      + visit_ClassDef(node: ast.ClassDef)
      + visit_FunctionDef(node: ast.FunctionDef)
  }

  class ClassDiagramGenerator {
      - __init__(file_system: FileSystem, settings: dict[str, Any] | None = None)
      + generate_plantuml(diagram: ClassDiagram, skinny: bool = False): str
      + generate_diagram(model: DiagramModel, output_path: str | Path)
      + generate_index(output_dir: str | Path, diagrams: list[Path])
  }

  class Visibility {
      + PUBLIC = '+'
      + PRIVATE = '-'
      + PROTECTED = '#'
  }

  class ParameterModel <<dataclass>> {
      + name: str
      + type_annotation: TypeAnnotation
      + default_value: str | None = None
  }

  class AttributeModel <<dataclass>> {
      + name: AttributeName
      + type_annotation: TypeAnnotation
      + visibility: Visibility = Visibility.PUBLIC
      + default_value: str | None = None
      + docstring: str | None = None
      + decorators: list[str] = field(default_factory=list)
  }

  class MethodModel <<dataclass>> {
      + name: MethodName
      + parameters: list[ParameterModel]
      + return_type: TypeAnnotation
      + visibility: Visibility = Visibility.PUBLIC
      + is_static: bool = False
      + is_classmethod: bool = False
      + docstring: str | None = None
      + decorators: list[str] = field(default_factory=list)
      + default_value: str | None = None
  --
      + signature(): str
  }

  class RelationshipModel <<dataclass>> {
      + source: ClassName
      + target: ClassName
      + type: str
  }

  class ImportModel <<dataclass>> {
      + module: str
      + name: str
      + alias: str | None = None
  }

  class ClassModel <<dataclass>> {
      + name: ClassName
      + filename: str
      + bases: list[ClassName] = field(default_factory=list)
      + methods: list[MethodModel] = field(default_factory=list)
      + attributes: list[AttributeModel] = field(default_factory=list)
      + relationships: list[RelationshipModel] = field(default_factory=list)
      + imports: list[ImportModel] = field(default_factory=list)
      + docstring: str | None = None
      + decorators: list[str] = field(default_factory=list)
  }

  class FunctionModel <<dataclass>> {
      + name: str
      + parameters: list[ParameterModel]
      + return_type: TypeAnnotation
      + visibility: Visibility = Visibility.PUBLIC
  --
      + signature(): str
  }

  class ClassDiagram {
      - __init__(name: str)
      + add_file(file_model: 'FileModel')
      + add_relationship(relationship: RelationshipModel)
      + all_classes(): list[ClassModel]
      + all_functions(): list[FunctionModel]
  }

  class FileModel <<dataclass>> {
      + path: Path
      + classes: list[ClassModel] = field(default_factory=list)
      + functions: list[FunctionModel] = field(default_factory=list)
      + imports: list[ImportModel] = field(default_factory=list)
  --
      + filename(): str
  }

}

package sequence_diagram {
  class ClassInfo {
      - __init__(name: str, module: str)
      + full_name(): str
  }

  class MethodCallVisitor {
      - __init__(class_name: str, method_name: str, file_path: str)
      + visit_Call(node: ast.Call)
  }

  class ClassDefVisitor {
      - __init__(module_name: str, file_path: str)
      + visit_ClassDef(node: ast.ClassDef)
  }

  class SequenceAnalyzer {
      - __init__(file_system: FileSystem, root_dir: str | Path = '.')
      + analyze(path: str | Path, entry_class: str | None = None, entry_method: str | None = None): SequenceDiagram
      + analyze_file(file_path: str | Path)
      + analyze_directory(dir_path: str | Path | None = None)
      + generate_sequence_diagram(entry_class: str, entry_method: str): SequenceDiagram
  }

  class SequenceDiagramGenerator {
      - __init__(file_system: FileSystem, settings: dict[str, Any] | None = None)
      + generate_plantuml(diagram: SequenceDiagram): str
      + generate_diagram(model: DiagramModel, output_path: str | Path)
      + generate_index(output_dir: str | Path, diagrams: list[Path])
  }

  class ParticipantType {
      + ACTOR = 'actor'
      + BOUNDARY = 'boundary'
      + CONTROL = 'control'
      + ENTITY = 'entity'
      + DATABASE = 'database'
      + CLASS = 'class'
  }

  class Participant <<dataclass>> {
      + name: str
      + type: ParticipantType = ParticipantType.CLASS
      + module: str | None = None
      + alias: str | None = None
  --
      + full_name(): str
  }

  class MessageType {
      + SYNCHRONOUS = '->'
      + ASYNCHRONOUS = '->>'
      + REPLY = '-->'
      + CREATE = '-->>'
      + SELF = '->'
  }

  class Message <<dataclass>> {
      + from_participant: str
      + to_participant: str
      + text: str
      + message_type: MessageType = MessageType.SYNCHRONOUS
      + is_self_message: bool = False
      + level: int = 0
      + method_name: str | None = None
      + arguments: list[str] = field(default_factory=list)
  --
      + formatted_text(): str
  }

  class ActivationBar <<dataclass>> {
      + participant: str
      + is_start: bool = True
  }

  class SequenceDiagram {
      - __init__(title: str)
      + add_participant(participant: Participant)
      + add_message(message: Message)
  }

  class FunctionCall <<dataclass>> {
      + caller_class: str | None
      + caller_method: str | None
      + called_class: str | None
      + called_method: str
      + arguments: list[str] = field(default_factory=list)
      + is_constructor: bool = False
      + line_number: int = 0
      + file_path: str | None = None
  }

}

package state_diagram {
  class StateAnalyzer {
      - __init__(file_system: FileSystem)
      + analyze(path: str | Path): StateDiagram
  }

  class StateDiagramGenerator {
      - __init__(file_system: FileSystem, settings: dict[str, Any] | None = None)
      + generate_diagram(model: DiagramModel, output_path: str | Path)
      + generate_plantuml(diagram: StateDiagram): str
      + generate_index(output_dir: str | Path, diagrams: list[Path])
  }

  class StateDiagram {
      - __init__(name: str)
      + add_state(state: 'StateModel')
      + add_transition(transition: 'TransitionModel')
      + add_start_state(start_state: 'StartStateModel')
      + add_end_state(end_state: 'EndStateModel')
      + add_composite_state(composite_state: 'CompositeStateModel')
  }

  class StateModel {
      - __init__(id: str, name: str | None = None, description: str | None = None)
      + add_entry_action(action: str)
      + add_exit_action(action: str)
      + add_internal_action(action: str)
  }

  class TransitionModel {
      - __init__(source_id: str, target_id: str, event: str | None = None, guard: str | None = None, action: str | None = None)
  }

  class StartStateModel {
      - __init__(id: str)
  }

  class EndStateModel {
      - __init__(id: str)
  }

  class CompositeStateModel {
      - __init__(id: str, name: str | None = None, description: str | None = None)
      + add_substate(state: StateModel)
      + add_internal_transition(transition: TransitionModel)
      + add_internal_start_state(start_state: StartStateModel)
      + add_internal_end_state(end_state: EndStateModel)
  }

}

' Relationships
SupportsInt --|> Protocol
SupportsFloat --|> Protocol
SupportsComplex --|> Protocol
SupportsBytes --|> Protocol
SupportsIndex --|> Protocol
RenameTable --|> AlterTable
AlterColumn --|> AlterTable
ColumnNullable --|> AlterColumn
ColumnType --|> AlterColumn
ColumnName --|> AlterColumn
ColumnDefault --|> AlterColumn
ComputedColumnDefault --|> AlterColumn
IdentityColumnDefault --|> AlterColumn
AddColumn --|> AlterTable
DropColumn --|> AlterTable
ColumnComment --|> AlterColumn
MSSQLImpl --|> DefaultImpl
MySQLImpl --|> DefaultImpl
MariaDBImpl --|> MySQLImpl
MySQLAlterDefault --|> AlterColumn
MySQLChangeColumn --|> AlterColumn
MySQLModifyColumn --|> MySQLChangeColumn
OracleImpl --|> DefaultImpl
PostgresqlImpl --|> DefaultImpl
PostgresqlColumnType --|> AlterColumn
SQLiteImpl --|> DefaultImpl
Operations --|> AbstractOperations
BatchOperations --|> AbstractOperations
AddConstraintOp --|> MigrateOperation
DropConstraintOp --|> MigrateOperation
CreatePrimaryKeyOp --|> AddConstraintOp
CreateUniqueConstraintOp --|> AddConstraintOp
CreateForeignKeyOp --|> AddConstraintOp
CreateCheckConstraintOp --|> AddConstraintOp
CreateIndexOp --|> MigrateOperation
DropIndexOp --|> MigrateOperation
CreateTableOp --|> MigrateOperation
DropTableOp --|> MigrateOperation
AlterTableOp --|> MigrateOperation
RenameTableOp --|> AlterTableOp
CreateTableCommentOp --|> AlterTableOp
DropTableCommentOp --|> AlterTableOp
AlterColumnOp --|> AlterTableOp
AddColumnOp --|> AlterTableOp
DropColumnOp --|> AlterTableOp
BulkInsertOp --|> MigrateOperation
ExecuteSQLOp --|> MigrateOperation
OpContainer --|> MigrateOperation
ModifyTableOps --|> OpContainer
UpgradeOps --|> OpContainer
DowngradeOps --|> OpContainer
MigrationScript --|> MigrateOperation
RevisionStep --|> MigrationStep
StampStep --|> MigrationStep
RangeNotAncestorError --|> RevisionError
MultipleHeads --|> RevisionError
ResolutionError --|> RevisionError
CycleDetected --|> RevisionError
DependencyCycleDetected --|> CycleDetected
LoopDetected --|> CycleDetected
DependencyLoopDetected --|> DependencyCycleDetected
DependencyLoopDetected --|> LoopDetected
TablesTest --|> TestBase
SuiteRequirements --|> Requirements
AutogenerateCommentsTest --|> AutogenFixtureTest
AutogenerateCommentsTest --|> TestBase
AutogenerateComputedTest --|> AutogenFixtureTest
AutogenerateComputedTest --|> TestBase
AlterColumnTest --|> AutogenFixtureTest
AlterColumnTest --|> TestBase
AutoincrementTest --|> AutogenFixtureTest
AutoincrementTest --|> TestBase
AutogenerateForeignKeysTest --|> AutogenFixtureTest
AutogenerateForeignKeysTest --|> TestBase
IncludeHooksTest --|> AutogenFixtureTest
IncludeHooksTest --|> TestBase
AutogenerateFKOptionsTest --|> AutogenFixtureTest
AutogenerateFKOptionsTest --|> TestBase
AutogenerateIdentityTest --|> AutogenFixtureTest
AutogenerateIdentityTest --|> TestBase
MigrationTransactionTest --|> TestBase
BackendAlterColumnTest --|> AlterColRoundTripFixture
BackendAlterColumnTest --|> TestBase
AutogenerateDiffsDetected --|> CommandError
SupportsGt --|> Protocol
SupportsGe --|> Protocol
SupportsLt --|> Protocol
SupportsLe --|> Protocol
SupportsMod --|> Protocol
SupportsDiv --|> Protocol
Gt --|> BaseMetadata
Ge --|> BaseMetadata
Lt --|> BaseMetadata
Le --|> BaseMetadata
GroupedMetadata --|> Protocol
Interval --|> GroupedMetadata
MultipleOf --|> BaseMetadata
MinLen --|> BaseMetadata
MaxLen --|> BaseMetadata
Len --|> GroupedMetadata
Timezone --|> BaseMetadata
Unit --|> BaseMetadata
Predicate --|> BaseMetadata
SocketAttribute --|> TypedAttributeSet
SocketStream --|> ByteStream
UNIXSocketStream --|> SocketStream
UnreliableObjectReceiveStream --|> AsyncResource
UnreliableObjectReceiveStream --|> TypedAttributeProvider
UnreliableObjectSendStream --|> AsyncResource
UnreliableObjectSendStream --|> TypedAttributeProvider
ByteReceiveStream --|> AsyncResource
ByteReceiveStream --|> TypedAttributeProvider
ByteSendStream --|> AsyncResource
ByteSendStream --|> TypedAttributeProvider
ByteStream --|> ByteReceiveStream
ByteStream --|> ByteSendStream
Listener --|> AsyncResource
Listener --|> TypedAttributeProvider
Process --|> AsyncResource
BufferedByteReceiveStream --|> ByteReceiveStream
FileStreamAttribute --|> TypedAttributeSet
FileReadStream --|> ByteReceiveStream
FileWriteStream --|> ByteSendStream
StapledByteStream --|> ByteStream
TLSAttribute --|> TypedAttributeSet
TLSStream --|> ByteStream
AsyncIOTaskInfo --|> TaskInfo
AsyncIOBackend --|> AsyncBackend
UNIXSocketStream --|> SocketStream
TrioTaskInfo --|> TaskInfo
TrioBackend --|> AsyncBackend
AsyncFile --|> AsyncResource
EventAdapter --|> Event
LockAdapter --|> Lock
SemaphoreAdapter --|> Semaphore
CapacityLimiterAdapter --|> CapacityLimiter
FIFOCache --|> Cache
LFUCache --|> Cache
LRUCache --|> Cache
MRUCache --|> Cache
RRCache --|> Cache
Big5Prober --|> MultiByteCharSetProber
EUCTWDistributionAnalysis --|> CharDistributionAnalysis
EUCKRDistributionAnalysis --|> CharDistributionAnalysis
JOHABDistributionAnalysis --|> CharDistributionAnalysis
GB2312DistributionAnalysis --|> CharDistributionAnalysis
Big5DistributionAnalysis --|> CharDistributionAnalysis
SJISDistributionAnalysis --|> CharDistributionAnalysis
EUCJPDistributionAnalysis --|> CharDistributionAnalysis
CharSetGroupProber --|> CharSetProber
CP949Prober --|> MultiByteCharSetProber
LanguageFilter --|> Flag
ProbingState --|> Enum
EscCharSetProber --|> CharSetProber
EUCJPProber --|> MultiByteCharSetProber
EUCKRProber --|> MultiByteCharSetProber
EUCTWProber --|> MultiByteCharSetProber
GB2312Prober --|> MultiByteCharSetProber
HebrewProber --|> CharSetProber
JOHABProber --|> MultiByteCharSetProber
SJISContextAnalysis --|> JapaneseContextAnalysis
EUCJPContextAnalysis --|> JapaneseContextAnalysis
Latin1Prober --|> CharSetProber
MacRomanProber --|> CharSetProber
MultiByteCharSetProber --|> CharSetProber
MBCSGroupProber --|> CharSetGroupProber
SingleByteCharSetProber --|> CharSetProber
SBCSGroupProber --|> CharSetGroupProber
SJISProber --|> MultiByteCharSetProber
UTF1632Prober --|> CharSetProber
UTF8Prober --|> CharSetProber
TooManySymbolOrPunctuationPlugin --|> MessDetectorPlugin
TooManyAccentuatedPlugin --|> MessDetectorPlugin
UnprintablePlugin --|> MessDetectorPlugin
SuspiciousDuplicateAccentPlugin --|> MessDetectorPlugin
SuspiciousRange --|> MessDetectorPlugin
SuperWeirdWordPlugin --|> MessDetectorPlugin
CjkInvalidStopPlugin --|> MessDetectorPlugin
ArchaicUpperLowerPlugin --|> MessDetectorPlugin
ArabicIsolatedFormPlugin --|> MessDetectorPlugin
Command --|> BaseCommand
MultiCommand --|> Command
Group --|> MultiCommand
CommandCollection --|> MultiCommand
Option --|> Parameter
Argument --|> Parameter
HelpOption --|> Option
UsageError --|> ClickException
BadParameter --|> UsageError
MissingParameter --|> BadParameter
NoSuchOption --|> UsageError
BadOptionUsage --|> UsageError
BadArgumentUsage --|> UsageError
FileError --|> ClickException
BashComplete --|> ShellComplete
ZshComplete --|> ShellComplete
FishComplete --|> ShellComplete
CompositeParamType --|> ParamType
FuncParamType --|> ParamType
UnprocessedParamType --|> ParamType
StringParamType --|> ParamType
Choice --|> ParamType
DateTime --|> ParamType
IntRange --|> IntParamType
FloatRange --|> FloatParamType
BoolParamType --|> ParamType
UUIDParameterType --|> ParamType
File --|> ParamType
Path --|> ParamType
Tuple --|> CompositeParamType
AnsiFore --|> AnsiCodes
AnsiBack --|> AnsiCodes
AnsiStyle --|> AnsiCodes
StreamWrapperTest --|> TestCase
AnsiToWin32Test --|> TestCase
AnsiTest --|> TestCase
InitTest --|> TestCase
JustFixWindowsConsoleTest --|> TestCase
IsattyTest --|> TestCase
StreamTTY --|> StringIO
StreamNonTTY --|> StringIO
WinTermTest --|> TestCase
SelectorSyntaxError --|> SelectorError
SelectorSyntaxError --|> SyntaxError
EOFToken --|> Token
MatchFunc --|> Protocol
ExpressionError --|> SelectorError
HTMLTranslator --|> GenericTranslator
Done --|> ParseError
Exhausted --|> ParseError
Missing --|> ParseError
NoMatch --|> ParseError
EchoHandler --|> DocumentHandler
Base2 --|> Base
CSSRuleRules --|> CSSRule
CSSStyleDeclaration --|> CSS2Properties
CSSPrimitiveValue --|> CSSValue
CSSValueList --|> CSSValue
CSSFunction --|> CSSPrimitiveValue
RGBColor --|> CSSFunction
CalcValue --|> CSSFunction
ExpressionValue --|> CSSFunction
CSSVariable --|> CSSValue
ColorValue --|> Value
DimensionValue --|> Value
URIValue --|> Value
CSSFunction --|> Value
MSValue --|> CSSFunction
CSSCalc --|> CSSFunction
CSSVariable --|> CSSFunction
rrule --|> rrulebase
rruleset --|> rrulebase
tzrange --|> tzrangebase
tzstr --|> tzrange
tzwinbase --|> tzrangebase
tzwin --|> tzwinbase
tzwinlocal --|> tzwinbase
DeprecatedTzFormatWarning --|> Warning
SimpleDeny --|> Policy
GenericOption --|> Option
ECSOption --|> Option
EDEOption --|> Option
NSIDOption --|> Option
CookieOption --|> Option
ReportChannelOption --|> Option
FormError --|> DNSException
SyntaxError --|> DNSException
UnexpectedEnd --|> SyntaxError
TooBig --|> DNSException
Timeout --|> DNSException
UnsupportedAlgorithm --|> DNSException
AlgorithmKeyMismatch --|> UnsupportedAlgorithm
ValidationFailure --|> DNSException
DeniedByPolicy --|> DNSException
QueryMessage --|> Message
IDNA2003Codec --|> IDNACodec
IDNA2008Codec --|> IDNACodec
AddressAndPortNameserver --|> Nameserver
Do53Nameserver --|> AddressAndPortNameserver
DoHNameserver --|> Nameserver
DoTNameserver --|> AddressAndPortNameserver
DoQNameserver --|> AddressAndPortNameserver
ImmutableNode --|> Node
GenericRdata --|> Rdata
ImmutableRdataset --|> Rdataset
HostAnswers --|> Answers
Cache --|> CacheBase
LRUCache --|> CacheBase
Resolver --|> BaseResolver
PeerBadKey --|> PeerError
PeerBadSignature --|> PeerError
PeerBadTime --|> PeerError
PeerBadTruncation --|> PeerError
NoSOA --|> BadZone
NoNS --|> BadZone
UnknownOrigin --|> BadZone
ImmutableVersionedNode --|> VersionedNode
WritableVersion --|> Version
ImmutableVersion --|> Version
DatagramSocket --|> Socket
StreamSocket --|> Socket
CryptographyPublicKey --|> GenericPublicKey
CryptographyPrivateKey --|> GenericPrivateKey
PublicDSA --|> CryptographyPublicKey
PrivateDSA --|> CryptographyPrivateKey
PublicDSANSEC3SHA1 --|> PublicDSA
PrivateDSANSEC3SHA1 --|> PrivateDSA
PublicECDSA --|> CryptographyPublicKey
PrivateECDSA --|> CryptographyPrivateKey
PublicECDSAP256SHA256 --|> PublicECDSA
PrivateECDSAP256SHA256 --|> PrivateECDSA
PublicECDSAP384SHA384 --|> PublicECDSA
PrivateECDSAP384SHA384 --|> PrivateECDSA
PublicEDDSA --|> CryptographyPublicKey
PrivateEDDSA --|> CryptographyPrivateKey
PublicED25519 --|> PublicEDDSA
PrivateED25519 --|> PrivateEDDSA
PublicED448 --|> PublicEDDSA
PrivateED448 --|> PrivateEDDSA
PublicRSA --|> CryptographyPublicKey
PrivateRSA --|> CryptographyPrivateKey
PublicRSAMD5 --|> PublicRSA
PrivateRSAMD5 --|> PrivateRSA
PublicRSASHA1 --|> PublicRSA
PrivateRSASHA1 --|> PrivateRSA
PublicRSASHA1NSEC3SHA1 --|> PublicRSA
PrivateRSASHA1NSEC3SHA1 --|> PrivateRSA
PublicRSASHA256 --|> PublicRSA
PrivateRSASHA256 --|> PrivateRSA
PublicRSASHA512 --|> PublicRSA
PrivateRSASHA512 --|> PrivateRSA
AsyncioQuicStream --|> BaseQuicStream
AsyncioQuicConnection --|> AsyncQuicConnection
AsyncioQuicManager --|> AsyncQuicManager
AsyncQuicConnection --|> BaseQuicConnection
AsyncQuicManager --|> BaseQuicManager
SyncQuicStream --|> BaseQuicStream
SyncQuicConnection --|> BaseQuicConnection
SyncQuicManager --|> BaseQuicManager
TrioQuicStream --|> BaseQuicStream
TrioQuicConnection --|> AsyncQuicConnection
TrioQuicManager --|> AsyncQuicManager
UncompressedMX --|> MXBase
UncompressedDowncasingMX --|> MXBase
UncompressedNS --|> NSBase
GenericParam --|> Param
MandatoryParam --|> Param
ALPNParam --|> Param
NoDefaultALPNParam --|> Param
PortParam --|> Param
IPv4HintParam --|> Param
IPv6HintParam --|> Param
ECHParam --|> Param
OHTTPParam --|> Param
Literal --|> Atom
Variable --|> Atom
Message --|> MessageSendMixin
Message --|> MessageTransformerMixin
Message --|> MessageSignMixin
Message --|> MessageBuildMixin
Message --|> BaseMessage
LocalPremailer --|> Premailer
BaseTransformer --|> HTMLParser
Transformer --|> BaseTransformer
MessageTransformer --|> BaseTransformer
SafeMIMEText --|> MIMEMixin
SafeMIMEMultipart --|> MIMEMixin
SMTPResponse --|> Response
SMTPClientWithResponse_SSL --|> SMTPClientWithResponse
OrderedSet --|> MutableSet
DjangoMessage --|> DjangoMessageMixin
DjangoMessage --|> MessageTransformerMixin
DjangoMessage --|> MessageSignMixin
DjangoMessage --|> MessageBuildMixin
DjangoMessage --|> BaseMessage
FileSystemLoader --|> BaseLoader
ZipLoader --|> BaseLoader
MsgLoader --|> BaseLoader
IndexFileNotFound --|> LoadError
InvalidHtmlFile --|> LoadError
DuplicateTag --|> InvalidTagValueList
InvalidTagSpec --|> InvalidTagValueList
InternalError --|> DKIMException
KeyFormatError --|> DKIMException
MessageFormatError --|> DKIMException
ParameterError --|> DKIMException
ValidationError --|> DKIMException
LazyHTTPFile --|> BaseFile
MemoryFileStore --|> FileStore
StringTemplate --|> BaseTemplate
JinjaTemplate --|> BaseTemplate
MakoTemplate --|> BaseTemplate
EmailSyntaxError --|> EmailNotValidError
EmailUndeliverableError --|> EmailNotValidError
FastAPI --|> Starlette
RequestValidationError --|> ValidationException
WebSocketRequestValidationError --|> ValidationException
ResponseValidationError --|> ValidationException
ParamTypes --|> Enum
Param --|> FieldInfo
Path --|> Param
Query --|> Param
Header --|> Param
Cookie --|> Param
Body --|> FieldInfo
Form --|> Body
File --|> Form
Security --|> Depends
UJSONResponse --|> JSONResponse
ORJSONResponse --|> JSONResponse
BaseModelWithConfig --|> BaseModel
Contact --|> BaseModelWithConfig
License --|> BaseModelWithConfig
Info --|> BaseModelWithConfig
ServerVariable --|> BaseModelWithConfig
Server --|> BaseModelWithConfig
Reference --|> BaseModel
Discriminator --|> BaseModel
XML --|> BaseModelWithConfig
ExternalDocumentation --|> BaseModelWithConfig
Schema --|> BaseModelWithConfig
ParameterInType --|> Enum
Encoding --|> BaseModelWithConfig
MediaType --|> BaseModelWithConfig
ParameterBase --|> BaseModelWithConfig
Parameter --|> ParameterBase
Header --|> ParameterBase
RequestBody --|> BaseModelWithConfig
Link --|> BaseModelWithConfig
Response --|> BaseModelWithConfig
Operation --|> BaseModelWithConfig
PathItem --|> BaseModelWithConfig
SecuritySchemeType --|> Enum
SecurityBase --|> BaseModelWithConfig
APIKeyIn --|> Enum
APIKey --|> SecurityBase
HTTPBase --|> SecurityBase
HTTPBearer --|> HTTPBase
OAuthFlow --|> BaseModelWithConfig
OAuthFlowImplicit --|> OAuthFlow
OAuthFlowPassword --|> OAuthFlow
OAuthFlowClientCredentials --|> OAuthFlow
OAuthFlowAuthorizationCode --|> OAuthFlow
OAuthFlows --|> BaseModelWithConfig
OAuth2 --|> SecurityBase
OpenIdConnect --|> SecurityBase
Components --|> BaseModelWithConfig
Tag --|> BaseModelWithConfig
OpenAPI --|> BaseModelWithConfig
APIKeyBase --|> SecurityBase
APIKeyQuery --|> APIKeyBase
APIKeyHeader --|> APIKeyBase
APIKeyCookie --|> APIKeyBase
HTTPBasicCredentials --|> BaseModel
HTTPAuthorizationCredentials --|> BaseModel
HTTPBase --|> SecurityBase
HTTPBasic --|> HTTPBase
HTTPBearer --|> HTTPBase
HTTPDigest --|> HTTPBase
OAuth2PasswordRequestFormStrict --|> OAuth2PasswordRequestForm
OAuth2 --|> SecurityBase
OAuth2PasswordBearer --|> OAuth2
OAuth2AuthorizationCodeBearer --|> OAuth2
OpenIdConnect --|> SecurityBase
CustomFormatter --|> DefaultFormatter
ContextVarsTests --|> TestCase
NoContextVarsTests --|> TestCase
CPPTests --|> TestCase
CAPITests --|> TestCase
GCTests --|> TestCase
genlet --|> greenlet
GeneratorTests --|> TestCase
genlet --|> greenlet
NestedGeneratorTests --|> TestCase
TestGreenlet --|> TestCase
TestGreenletSetParentErrors --|> TestCase
TestRepr --|> TestCase
TestMainGreenlet --|> TestCase
TestBrokenGreenlets --|> TestCase
TestLeaks --|> TestCase
Test --|> TestCase
ThrowTests --|> TestCase
TestGreenletTracing --|> TestCase
TestPythonTracing --|> TestCase
WeakRefTests --|> TestCase
NEED_DATA --|> Sentinel
PAUSED --|> Sentinel
Request --|> Event
Data --|> Event
EndOfMessage --|> Event
ConnectionClosed --|> Event
CLIENT --|> Sentinel
SERVER --|> Sentinel
IDLE --|> Sentinel
SEND_RESPONSE --|> Sentinel
SEND_BODY --|> Sentinel
DONE --|> Sentinel
MUST_CLOSE --|> Sentinel
CLOSED --|> Sentinel
ERROR --|> Sentinel
MIGHT_SWITCH_PROTOCOL --|> Sentinel
SWITCHED_PROTOCOL --|> Sentinel
LocalProtocolError --|> ProtocolError
RemoteProtocolError --|> ProtocolError
ContentLengthWriter --|> BodyWriter
ChunkedWriter --|> BodyWriter
Http10Writer --|> BodyWriter
RemoteProtocolError --|> ProtocolError
LocalProtocolError --|> ProtocolError
PoolTimeout --|> TimeoutException
ConnectTimeout --|> TimeoutException
ReadTimeout --|> TimeoutException
WriteTimeout --|> TimeoutException
ConnectError --|> NetworkError
ReadError --|> NetworkError
WriteError --|> NetworkError
AsyncHTTPConnection --|> AsyncConnectionInterface
AsyncConnectionPool --|> AsyncRequestInterface
AsyncHTTP11Connection --|> AsyncConnectionInterface
AsyncHTTP11UpgradeStream --|> AsyncNetworkStream
AsyncHTTP2Connection --|> AsyncConnectionInterface
AsyncHTTPProxy --|> AsyncConnectionPool
AsyncForwardHTTPConnection --|> AsyncConnectionInterface
AsyncTunnelHTTPConnection --|> AsyncConnectionInterface
AsyncConnectionInterface --|> AsyncRequestInterface
AsyncSOCKSProxy --|> AsyncConnectionPool
AsyncSocks5Connection --|> AsyncConnectionInterface
AnyIOStream --|> AsyncNetworkStream
AnyIOBackend --|> AsyncNetworkBackend
AutoBackend --|> AsyncNetworkBackend
MockStream --|> NetworkStream
MockBackend --|> NetworkBackend
AsyncMockStream --|> AsyncNetworkStream
AsyncMockBackend --|> AsyncNetworkBackend
TLSinTLSStream --|> NetworkStream
SyncStream --|> NetworkStream
SyncBackend --|> NetworkBackend
TrioStream --|> AsyncNetworkStream
TrioBackend --|> AsyncNetworkBackend
HTTPConnection --|> ConnectionInterface
ConnectionPool --|> RequestInterface
HTTP11Connection --|> ConnectionInterface
HTTP11UpgradeStream --|> NetworkStream
HTTP2Connection --|> ConnectionInterface
HTTPProxy --|> ConnectionPool
ForwardHTTPConnection --|> ConnectionInterface
TunnelHTTPConnection --|> ConnectionInterface
ConnectionInterface --|> RequestInterface
SOCKSProxy --|> ConnectionPool
Socks5Connection --|> ConnectionInterface
HttpParserCallbackError --|> HttpParserError
HttpParserInvalidStatusError --|> HttpParserError
HttpParserInvalidMethodError --|> HttpParserError
HttpParserInvalidURLError --|> HttpParserError
FunctionAuth --|> Auth
BasicAuth --|> Auth
NetRCAuth --|> Auth
DigestAuth --|> Auth
BoundSyncStream --|> SyncByteStream
BoundAsyncStream --|> AsyncByteStream
Client --|> BaseClient
AsyncClient --|> BaseClient
ByteStream --|> AsyncByteStream
ByteStream --|> SyncByteStream
IteratorByteStream --|> SyncByteStream
AsyncIteratorByteStream --|> AsyncByteStream
UnattachedStream --|> AsyncByteStream
UnattachedStream --|> SyncByteStream
IdentityDecoder --|> ContentDecoder
DeflateDecoder --|> ContentDecoder
GZipDecoder --|> ContentDecoder
BrotliDecoder --|> ContentDecoder
ZStandardDecoder --|> ContentDecoder
MultiDecoder --|> ContentDecoder
RequestError --|> HTTPError
TransportError --|> RequestError
TimeoutException --|> TransportError
ConnectTimeout --|> TimeoutException
ReadTimeout --|> TimeoutException
WriteTimeout --|> TimeoutException
PoolTimeout --|> TimeoutException
NetworkError --|> TransportError
ReadError --|> NetworkError
WriteError --|> NetworkError
ConnectError --|> NetworkError
CloseError --|> NetworkError
ProxyError --|> TransportError
UnsupportedProtocol --|> TransportError
ProtocolError --|> TransportError
LocalProtocolError --|> ProtocolError
RemoteProtocolError --|> ProtocolError
DecodingError --|> RequestError
TooManyRedirects --|> RequestError
HTTPStatusError --|> HTTPError
StreamConsumed --|> StreamError
StreamClosed --|> StreamError
ResponseNotRead --|> StreamError
RequestNotRead --|> StreamError
MultipartStream --|> SyncByteStream
MultipartStream --|> AsyncByteStream
codes --|> IntEnum
ASGIResponseStream --|> AsyncByteStream
ASGITransport --|> AsyncBaseTransport
ResponseStream --|> SyncByteStream
HTTPTransport --|> BaseTransport
AsyncResponseStream --|> AsyncByteStream
AsyncHTTPTransport --|> AsyncBaseTransport
MockTransport --|> AsyncBaseTransport
MockTransport --|> BaseTransport
WSGIByteStream --|> SyncByteStream
WSGITransport --|> BaseTransport
StreamWriter --|> Codec
StreamReader --|> Codec
IDNABidiError --|> IDNAError
InvalidCodepoint --|> IDNAError
InvalidCodepointContext --|> IDNAError
FileSystemBytecodeCache --|> BytecodeCache
MemcachedBytecodeCache --|> BytecodeCache
DependencyFinderVisitor --|> NodeVisitor
UndeclaredNameVisitor --|> NodeVisitor
CodeGenerator --|> NodeVisitor
TemplateNotFound --|> TemplateError
TemplatesNotFound --|> TemplateNotFound
TemplateSyntaxError --|> TemplateError
TemplateAssertionError --|> TemplateSyntaxError
TemplateRuntimeError --|> TemplateError
UndefinedError --|> TemplateRuntimeError
SecurityError --|> TemplateRuntimeError
FilterArgumentError --|> TemplateRuntimeError
InternationalizationExtension --|> Extension
ExprStmtExtension --|> Extension
LoopControlExtension --|> Extension
DebugExtension --|> Extension
RootVisitor --|> NodeVisitor
FrameSymbolVisitor --|> NodeVisitor
FileSystemLoader --|> BaseLoader
PackageLoader --|> BaseLoader
DictLoader --|> BaseLoader
FunctionLoader --|> BaseLoader
PrefixLoader --|> BaseLoader
ChoiceLoader --|> BaseLoader
ModuleLoader --|> BaseLoader
TrackingCodeGenerator --|> CodeGenerator
NativeCodeGenerator --|> CodeGenerator
NativeEnvironment --|> Environment
NativeTemplate --|> Template
Stmt --|> Node
Helper --|> Node
Template --|> Node
Output --|> Stmt
Extends --|> Stmt
For --|> Stmt
If --|> Stmt
Macro --|> Stmt
CallBlock --|> Stmt
FilterBlock --|> Stmt
With --|> Stmt
Block --|> Stmt
Include --|> Stmt
Import --|> Stmt
FromImport --|> Stmt
ExprStmt --|> Stmt
Assign --|> Stmt
AssignBlock --|> Stmt
Expr --|> Node
BinExpr --|> Expr
UnaryExpr --|> Expr
Name --|> Expr
NSRef --|> Expr
Literal --|> Expr
Const --|> Literal
TemplateData --|> Literal
Tuple --|> Literal
List --|> Literal
Dict --|> Literal
Pair --|> Helper
Keyword --|> Helper
CondExpr --|> Expr
Call --|> Expr
Getitem --|> Expr
Getattr --|> Expr
Slice --|> Expr
Concat --|> Expr
Compare --|> Expr
Operand --|> Helper
Mul --|> BinExpr
Div --|> BinExpr
FloorDiv --|> BinExpr
Add --|> BinExpr
Sub --|> BinExpr
Mod --|> BinExpr
Pow --|> BinExpr
And --|> BinExpr
Or --|> BinExpr
Not --|> UnaryExpr
Neg --|> UnaryExpr
Pos --|> UnaryExpr
EnvironmentAttribute --|> Expr
ExtensionAttribute --|> Expr
ImportedName --|> Expr
InternalName --|> Expr
MarkSafe --|> Expr
MarkSafeIfAutoescape --|> Expr
ContextReference --|> Expr
DerivedContextReference --|> Expr
Continue --|> Stmt
Break --|> Stmt
Scope --|> Stmt
OverlayScope --|> Stmt
EvalContextModifier --|> Stmt
ScopedEvalContextModifier --|> EvalContextModifier
Optimizer --|> NodeTransformer
AsyncLoopContext --|> LoopContext
ChainableUndefined --|> Undefined
DebugUndefined --|> Undefined
StrictUndefined --|> Undefined
SandboxedEnvironment --|> Environment
ImmutableSandboxedEnvironment --|> SandboxedEnvironment
SandboxedFormatter --|> Formatter
SandboxedEscapeFormatter --|> SandboxedFormatter
SandboxedEscapeFormatter --|> EscapeFormatter
NodeTransformer --|> NodeVisitor
NoneAlgorithm --|> Algorithm
HMACAlgorithm --|> Algorithm
RSAAlgorithm --|> Algorithm
ECAlgorithm --|> Algorithm
RSAPSSAlgorithm --|> RSAAlgorithm
OKPAlgorithm --|> Algorithm
InvalidTokenError --|> PyJWTError
DecodeError --|> InvalidTokenError
InvalidSignatureError --|> DecodeError
ExpiredSignatureError --|> InvalidTokenError
InvalidAudienceError --|> InvalidTokenError
InvalidIssuerError --|> InvalidTokenError
InvalidIssuedAtError --|> InvalidTokenError
ImmatureSignatureError --|> InvalidTokenError
InvalidKeyError --|> PyJWTError
InvalidAlgorithmError --|> InvalidTokenError
MissingRequiredClaimError --|> InvalidTokenError
PyJWKError --|> PyJWTError
MissingCryptographyError --|> PyJWKError
PyJWKSetError --|> PyJWTError
PyJWKClientError --|> PyJWTError
PyJWKClientConnectionError --|> PyJWKClientError
InvalidSubjectError --|> InvalidTokenError
InvalidJTIError --|> InvalidTokenError
LxmlHTMLTranslator --|> LxmlTranslator
LHTMLOutputChecker --|> LXMLOutputChecker
LimitedRecursiveIncludeError --|> FatalIncludeError
tag_token --|> token
href_token --|> token
SetMixin --|> MutableSet
Classes --|> MutableSet
HtmlComment --|> HtmlMixin
HtmlElement --|> HtmlMixin
HtmlProcessingInstruction --|> HtmlMixin
HtmlEntity --|> HtmlMixin
FormElement --|> HtmlElement
TextareaElement --|> InputMixin
TextareaElement --|> HtmlElement
SelectElement --|> InputMixin
SelectElement --|> HtmlElement
MultipleSelectOptions --|> SetMixin
CheckboxValues --|> SetMixin
InputElement --|> InputMixin
InputElement --|> HtmlElement
LabelElement --|> HtmlElement
PythonFragment --|> PythonCode
FunctionArgs --|> FunctionDecl
RuntimeException --|> MakoException
CompileException --|> MakoException
SyntaxException --|> MakoException
UnsupportedError --|> MakoException
NameConflictError --|> MakoException
TemplateLookupException --|> MakoException
TopLevelLookupException --|> TemplateLookupException
TemplateLookup --|> TemplateCollection
TemplateNode --|> Node
ControlLine --|> Node
Text --|> Node
Code --|> Node
Comment --|> Node
Expression --|> Node
Tag --|> Node
IncludeTag --|> Tag
NamespaceTag --|> Tag
TextTag --|> Tag
DefTag --|> Tag
BlockTag --|> Tag
CallTag --|> Tag
CallNamespaceTag --|> Tag
InheritTag --|> Tag
PageTag --|> Tag
TemplateNamespace --|> Namespace
ModuleNamespace --|> Namespace
ModuleTemplate --|> Template
DefTemplate --|> Template
NodeTransformer --|> NodeVisitor
SourceGenerator --|> NodeVisitor
BabelMakoExtractor --|> MessageExtractor
BeakerCacheImpl --|> CacheImpl
LinguaMakoExtractor --|> MessageExtractor
MakoLexer --|> RegexLexer
MakoHtmlLexer --|> DelegatingLexer
MakoXmlLexer --|> DelegatingLexer
MakoJavascriptLexer --|> DelegatingLexer
MakoCssLexer --|> DelegatingLexer
Config --|> ReadsCfg
PlainCacheImpl --|> CacheImpl
MissingConfig --|> ConfigError
MissingConfigSection --|> ConfigError
MissingConfigItem --|> ConfigError
ConfigValueTypeError --|> ConfigError
RendererProtocol --|> Protocol
RendererHTML --|> RendererProtocol
StateBlock --|> StateBase
StateCore --|> StateBase
StateInline --|> StateBase
SequenceView --|> Sequence
LazyCryptContext --|> CryptContext
PasswordSizeError --|> PasswordValueError
PasswordTruncateError --|> PasswordSizeError
MalformedTokenError --|> TokenError
InvalidTokenError --|> TokenError
UsedTokenError --|> TokenError
PasslibConfigWarning --|> PasslibWarning
PasslibHashWarning --|> PasslibWarning
PasslibRuntimeWarning --|> PasslibWarning
PasslibSecurityWarning --|> PasslibWarning
DisabledHash --|> PasswordHash
WordGenerator --|> SequenceGenerator
PhraseGenerator --|> SequenceGenerator
TotpToken --|> SequenceMixin
TotpMatch --|> SequenceMixin
HashInfo --|> SequenceMixin
DjangoContextAdapter --|> DjangoTranslator
cisco_asa --|> cisco_pix
DjangoVariableHash --|> DjangoSaltedHash
django_salted_sha1 --|> DjangoSaltedHash
django_salted_md5 --|> DjangoSaltedHash
django_pbkdf2_sha256 --|> DjangoVariableHash
django_pbkdf2_sha1 --|> django_pbkdf2_sha256
ldap_plaintext --|> plaintext
HtpasswdFileTest --|> TestCase
HtdigestFileTest --|> TestCase
AppsTest --|> TestCase
CryptContextTest --|> TestCase
LazyCryptContextTest --|> TestCase
CryptPolicyTest --|> TestCase
CryptContextTest --|> TestCase
LazyCryptContextTest --|> TestCase
DesTest --|> TestCase
HashInfoTest --|> TestCase
Pbkdf1_Test --|> TestCase
Pbkdf2Test --|> TestCase
ScryptEngineTest --|> TestCase
FakeUser --|> User
ExtensionBehaviorTest --|> DjangoBehaviorTest
HashersTest --|> TestCase
apr_md5_crypt_test --|> HandlerCase
bigcrypt_test --|> HandlerCase
crypt16_test --|> HandlerCase
fshp_test --|> HandlerCase
hex_md4_test --|> HandlerCase
hex_md5_test --|> HandlerCase
hex_sha1_test --|> HandlerCase
hex_sha256_test --|> HandlerCase
hex_sha512_test --|> HandlerCase
htdigest_test --|> UserHandlerMixin
htdigest_test --|> HandlerCase
ldap_md5_test --|> HandlerCase
ldap_sha1_test --|> HandlerCase
ldap_salted_md5_test --|> HandlerCase
ldap_salted_sha1_test --|> HandlerCase
ldap_salted_sha256_test --|> HandlerCase
ldap_salted_sha512_test --|> HandlerCase
ldap_plaintext_test --|> HandlerCase
lmhash_test --|> EncodingHandlerMixin
lmhash_test --|> HandlerCase
msdcc_test --|> UserHandlerMixin
msdcc_test --|> HandlerCase
msdcc2_test --|> UserHandlerMixin
msdcc2_test --|> HandlerCase
mssql2000_test --|> HandlerCase
mssql2005_test --|> HandlerCase
mysql323_test --|> HandlerCase
mysql41_test --|> HandlerCase
nthash_test --|> HandlerCase
bsd_nthash_test --|> HandlerCase
oracle10_test --|> UserHandlerMixin
oracle10_test --|> HandlerCase
oracle11_test --|> HandlerCase
phpass_test --|> HandlerCase
plaintext_test --|> HandlerCase
postgres_md5_test --|> UserHandlerMixin
postgres_md5_test --|> HandlerCase
RoundupTest --|> TestCase
sun_md5_crypt_test --|> HandlerCase
unix_disabled_test --|> HandlerCase
unix_fallback_test --|> HandlerCase
cisco_type7_test --|> HandlerCase
django_disabled_test --|> HandlerCase
django_des_crypt_test --|> HandlerCase
django_salted_md5_test --|> HandlerCase
django_salted_sha1_test --|> HandlerCase
django_pbkdf2_sha256_test --|> HandlerCase
django_pbkdf2_sha1_test --|> HandlerCase
django_bcrypt_test --|> HandlerCase
django_bcrypt_sha256_test --|> HandlerCase
django_argon2_test --|> HandlerCase
ldap_pbkdf2_test --|> TestCase
atlassian_pbkdf2_sha1_test --|> HandlerCase
pbkdf2_sha1_test --|> HandlerCase
pbkdf2_sha256_test --|> HandlerCase
pbkdf2_sha512_test --|> HandlerCase
cta_pbkdf2_sha1_test --|> HandlerCase
dlitz_pbkdf2_sha1_test --|> HandlerCase
grub_pbkdf2_sha512_test --|> HandlerCase
scram_test --|> HandlerCase
HostsTest --|> TestCase
UtilsTest --|> TestCase
WordGeneratorTest --|> TestCase
PhraseGeneratorTest --|> TestCase
RegistryTest --|> TestCase
AppWalletTest --|> TestCase
TotpTest --|> TestCase
MiscTest --|> TestCase
CodecTest --|> TestCase
Base64EngineTest --|> TestCase
SkeletonTest --|> TestCase
PrefixWrapperTest --|> TestCase
UnsaltedHashTest --|> HandlerCase
SaltedHashTest --|> HandlerCase
UtilsTest --|> TestCase
Pbkdf1_Test --|> TestCase
Pbkdf2_Test --|> TestCase
UtilTest --|> TestCase
HandlerCase --|> TestCase
OsCryptMixin --|> HandlerCase
UserHandlerMixin --|> HandlerCase
EncodingHandlerMixin --|> HandlerCase
LazyBase64Engine --|> Base64Engine
MinimalHandler --|> PasswordHash
TruncateMixin --|> MinimalHandler
GenericHandler --|> MinimalHandler
StaticHandler --|> GenericHandler
HasEncodingContext --|> GenericHandler
HasUserContext --|> GenericHandler
HasRawChecksum --|> GenericHandler
HasManyIdents --|> GenericHandler
HasSalt --|> GenericHandler
HasRawSalt --|> HasSalt
HasRounds --|> GenericHandler
ParallelismMixin --|> GenericHandler
BackendMixin --|> PasswordHash
SubclassBackendMixin --|> BackendMixin
HasManyBackends --|> BackendMixin
HasManyBackends --|> GenericHandler
NoOpBuildEnvironment --|> BuildEnvironment
SimpleWheelCache --|> Cache
EphemWheelCache --|> SimpleWheelCache
WheelCache --|> Cache
DiagnosticPipError --|> PipError
ConfigurationError --|> PipError
InstallationError --|> PipError
MissingPyProjectBuildRequires --|> DiagnosticPipError
InvalidPyProjectBuildRequires --|> DiagnosticPipError
NoneMetadataError --|> PipError
UserInstallationInvalid --|> InstallationError
InvalidSchemeCombination --|> InstallationError
DistributionNotFound --|> InstallationError
RequirementsFileParseError --|> InstallationError
BestVersionAlreadyInstalled --|> PipError
BadCommand --|> PipError
CommandError --|> PipError
PreviousBuildDirError --|> PipError
NetworkConnectionError --|> PipError
InvalidWheelFilename --|> InstallationError
UnsupportedWheel --|> InstallationError
InvalidWheel --|> InstallationError
MetadataInconsistent --|> InstallationError
MetadataInvalid --|> InstallationError
InstallationSubprocessError --|> DiagnosticPipError
InstallationSubprocessError --|> InstallationError
MetadataGenerationFailed --|> InstallationSubprocessError
MetadataGenerationFailed --|> InstallationError
HashErrors --|> InstallationError
HashError --|> InstallationError
VcsHashUnsupported --|> HashError
DirectoryUrlHashUnsupported --|> HashError
HashMissing --|> HashError
HashUnpinned --|> HashError
HashMismatch --|> HashError
UnsupportedPythonVersion --|> InstallationError
ConfigurationFileCouldNotBeLoaded --|> ConfigurationError
ExternallyManagedEnvironment --|> DiagnosticPipError
UninstallMissingRecord --|> DiagnosticPipError
LegacyDistutilsInstall --|> DiagnosticPipError
Command --|> CommandContextMixIn
PipOption --|> Option
SessionCommandMixin --|> CommandContextMixIn
IndexGroupCommand --|> Command
IndexGroupCommand --|> SessionCommandMixin
UpdatingDefaultsHelpFormatter --|> PrettyHelpFormatter
ConfigOptionParser --|> CustomOptionParser
RequirementCommand --|> IndexGroupCommand
InteractiveSpinner --|> SpinnerInterface
NonInteractiveSpinner --|> SpinnerInterface
CacheCommand --|> Command
CheckCommand --|> Command
CompletionCommand --|> Command
ConfigurationCommand --|> Command
DebugCommand --|> Command
DownloadCommand --|> RequirementCommand
FreezeCommand --|> Command
HashCommand --|> Command
HelpCommand --|> Command
IndexCommand --|> IndexGroupCommand
InspectCommand --|> Command
InstallCommand --|> RequirementCommand
ListCommand --|> IndexGroupCommand
SearchCommand --|> Command
SearchCommand --|> SessionCommandMixin
ShowCommand --|> Command
UninstallCommand --|> Command
UninstallCommand --|> SessionCommandMixin
WheelCommand --|> RequirementCommand
InstalledDistribution --|> AbstractDistribution
SourceDistribution --|> AbstractDistribution
WheelDistribution --|> AbstractDistribution
ParseLinks --|> Protocol
HTMLLinkParser --|> HTMLParser
BaseEntryPoint --|> Protocol
BaseDistribution --|> Protocol
Wheel --|> Protocol
FilesystemWheel --|> Wheel
MemoryWheel --|> Wheel
Distribution --|> BaseDistribution
Environment --|> BaseEnvironment
Backend --|> Protocol
BasePath --|> Protocol
Distribution --|> BaseDistribution
Environment --|> BaseEnvironment
KeyRingNullProvider --|> KeyRingBaseProvider
KeyRingPythonProvider --|> KeyRingBaseProvider
KeyRingCliProvider --|> KeyRingBaseProvider
MultiDomainBasicAuth --|> AuthBase
SafeFileCache --|> SeparateBodyBaseCache
LocalFSAdapter --|> BaseAdapter
InsecureHTTPAdapter --|> HTTPAdapter
InsecureCacheControlAdapter --|> CacheControlAdapter
File --|> Protocol
MissingCallableSuffix --|> InstallationError
PipScriptMaker --|> ScriptMaker
Resolver --|> BaseResolver
AlreadyInstalledCandidate --|> Candidate
ExtrasCandidate --|> Candidate
RequiresPythonCandidate --|> Candidate
ConflictCause --|> Protocol
PipReporter --|> BaseReporter
PipDebuggingReporter --|> BaseReporter
ExplicitRequirement --|> Requirement
SpecifierRequirement --|> Requirement
SpecifierWithoutExtrasRequirement --|> SpecifierRequirement
RequiresPythonRequirement --|> Requirement
UnsatisfiableRequirement --|> Requirement
Resolver --|> BaseResolver
PipDeprecationWarning --|> Warning
MissingHashes --|> Hashes
RichPipStreamHandler --|> RichHandler
MaxLevelFilter --|> Filter
ExcludeLoggerFilter --|> Filter
StreamWrapper --|> StringIO
ConfiguredBuildBackendHookCaller --|> BuildBackendHookCaller
AdjacentTempDirectory --|> TempDirectory
Bazaar --|> VersionControl
Git --|> VersionControl
Mercurial --|> VersionControl
Subversion --|> VersionControl
SupportsInt --|> Protocol
SupportsFloat --|> Protocol
SupportsComplex --|> Protocol
SupportsBytes --|> Protocol
SupportsIndex --|> Protocol
CacheControlAdapter --|> HTTPAdapter
DictCache --|> BaseCache
SeparateBodyBaseCache --|> BaseCache
OneDayCache --|> BaseHeuristic
ExpiresAfter --|> BaseHeuristic
LastModified --|> BaseHeuristic
FileCache --|> BaseCache
SeparateBodyFileCache --|> SeparateBodyBaseCache
RedisCache --|> BaseCache
BaseInstalledDistribution --|> Distribution
InstalledDistribution --|> BaseInstalledDistribution
EggInfoDistribution --|> BaseInstalledDistribution
PyPIRPCLocator --|> Locator
PyPIJSONLocator --|> Locator
SimpleScrapingLocator --|> Locator
DirectoryLocator --|> Locator
JSONLocator --|> Locator
DistPathLocator --|> Locator
AggregatingLocator --|> Locator
MetadataMissingError --|> DistlibException
MetadataConflictError --|> DistlibException
MetadataUnrecognizedVersionError --|> DistlibException
MetadataInvalidError --|> DistlibException
ResourceCache --|> Cache
Resource --|> ResourceBase
ResourceContainer --|> ResourceBase
ZipResourceFinder --|> ResourceFinder
HTTPSOnlyHandler --|> HTTPSHandler
CSVReader --|> CSVBase
CSVWriter --|> CSVBase
Configurator --|> BaseConfigurator
NormalizedVersion --|> Version
NormalizedMatcher --|> Matcher
LegacyVersion --|> Version
LegacyMatcher --|> Matcher
SemanticVersion --|> Version
SemanticMatcher --|> Matcher
StreamWriter --|> Codec
StreamReader --|> Codec
IDNABidiError --|> IDNAError
InvalidCodepoint --|> IDNAError
InvalidCodepointContext --|> IDNAError
BufferFull --|> UnpackException
OutOfData --|> UnpackException
FormatError --|> UnpackException
StackError --|> UnpackException
Specifier --|> BaseSpecifier
SpecifierSet --|> BaseSpecifier
Variable --|> Node
Value --|> Node
Op --|> Node
VersionConflict --|> ResolutionError
ContextualVersionConflict --|> VersionConflict
DistributionNotFound --|> ResolutionError
UnknownExtra --|> ResolutionError
IMetadataProvider --|> Protocol
IResourceProvider --|> IMetadataProvider
IResourceProvider --|> Protocol
EggProvider --|> NullProvider
DefaultProvider --|> EggProvider
EmptyProvider --|> NullProvider
MemoizedZipManifests --|> ZipManifests
ZipProvider --|> EggProvider
FileMetadata --|> EmptyProvider
PathMetadata --|> DefaultProvider
EggMetadata --|> ZipProvider
EggInfoDistribution --|> Distribution
DistInfoDistribution --|> Distribution
PkgResourcesDeprecationWarning --|> Warning
Android --|> PlatformDirsABC
MacOS --|> PlatformDirsABC
Unix --|> PlatformDirsABC
Windows --|> PlatformDirsABC
FunctionFilter --|> Filter
DelegatingLexer --|> Lexer
words --|> Future
RegexLexerMeta --|> LexerMeta
RegexLexer --|> Lexer
ExtendedRegexLexer --|> RegexLexer
ProfilingRegexLexerMeta --|> RegexLexerMeta
ProfilingRegexLexer --|> RegexLexer
CodeTagFilter --|> Filter
SymbolFilter --|> Filter
KeywordCaseFilter --|> Filter
NameHighlightFilter --|> Filter
RaiseOnErrorTokenFilter --|> Filter
VisibleWhitespaceFilter --|> Filter
GobbleFilter --|> Filter
TokenMergeFilter --|> Filter
BBCodeFormatter --|> Formatter
GroffFormatter --|> Formatter
HtmlFormatter --|> Formatter
ImageFormatter --|> Formatter
GifImageFormatter --|> ImageFormatter
JpgImageFormatter --|> ImageFormatter
BmpImageFormatter --|> ImageFormatter
IRCFormatter --|> Formatter
LatexFormatter --|> Formatter
LatexEmbeddedLexer --|> Lexer
NullFormatter --|> Formatter
RawTokenFormatter --|> Formatter
TestcaseFormatter --|> Formatter
PangoMarkupFormatter --|> Formatter
RtfFormatter --|> Formatter
SvgFormatter --|> Formatter
TerminalFormatter --|> Formatter
Terminal256Formatter --|> Formatter
TerminalTrueColorFormatter --|> Terminal256Formatter
PythonLexer --|> RegexLexer
Python2Lexer --|> RegexLexer
PythonConsoleLexer --|> DelegatingLexer
PythonTracebackLexer --|> RegexLexer
Python2TracebackLexer --|> RegexLexer
CythonLexer --|> RegexLexer
DgLexer --|> RegexLexer
NumPyLexer --|> PythonLexer
HTTPAdapter --|> BaseAdapter
HTTPBasicAuth --|> AuthBase
HTTPProxyAuth --|> HTTPBasicAuth
HTTPDigestAuth --|> AuthBase
InvalidJSONError --|> RequestException
JSONDecodeError --|> InvalidJSONError
HTTPError --|> RequestException
ConnectionError --|> RequestException
ProxyError --|> ConnectionError
SSLError --|> ConnectionError
Timeout --|> RequestException
ConnectTimeout --|> ConnectionError
ConnectTimeout --|> Timeout
ReadTimeout --|> Timeout
URLRequired --|> RequestException
TooManyRedirects --|> RequestException
MissingSchema --|> RequestException
InvalidSchema --|> RequestException
InvalidURL --|> RequestException
InvalidHeader --|> RequestException
InvalidProxyURL --|> InvalidURL
ChunkedEncodingError --|> RequestException
ContentDecodingError --|> RequestException
StreamConsumedError --|> RequestException
RetryError --|> RequestException
UnrewindableBodyError --|> RequestException
RequestsWarning --|> Warning
FileModeWarning --|> RequestsWarning
RequestsDependencyWarning --|> RequestsWarning
Request --|> RequestHooksMixin
PreparedRequest --|> RequestEncodingMixin
PreparedRequest --|> RequestHooksMixin
Session --|> SessionRedirectMixin
RequirementsConflicted --|> ResolverException
InconsistentCandidate --|> ResolverException
ResolutionError --|> ResolverException
ResolutionImpossible --|> ResolutionError
ResolutionTooDeep --|> ResolutionError
Resolver --|> AbstractResolver
Align --|> JupyterMixin
VerticalCenter --|> JupyterMixin
Bar --|> JupyterMixin
ColorSystem --|> IntEnum
ColorType --|> IntEnum
Columns --|> JupyterMixin
RichCast --|> Protocol
ConsoleRenderable --|> Protocol
Constrain --|> JupyterMixin
Emoji --|> JupyterMixin
StyleSyntaxError --|> ConsoleError
MissingStyle --|> StyleError
StyleStackError --|> ConsoleError
NotRenderableError --|> ConsoleError
MarkupError --|> ConsoleError
LiveError --|> ConsoleError
NoAltScreen --|> ConsoleError
NullHighlighter --|> Highlighter
RegexHighlighter --|> Highlighter
ReprHighlighter --|> RegexHighlighter
JSONHighlighter --|> RegexHighlighter
ISO8601Highlighter --|> RegexHighlighter
NoSplitter --|> LayoutError
RowSplitter --|> Splitter
ColumnSplitter --|> Splitter
Live --|> JupyterMixin
Live --|> RenderHook
Padding --|> JupyterMixin
SystemPager --|> Pager
Panel --|> JupyterMixin
Pretty --|> JupyterMixin
RenderableColumn --|> ProgressColumn
SpinnerColumn --|> ProgressColumn
TextColumn --|> ProgressColumn
BarColumn --|> ProgressColumn
TimeElapsedColumn --|> ProgressColumn
TaskProgressColumn --|> TextColumn
TimeRemainingColumn --|> ProgressColumn
FileSizeColumn --|> ProgressColumn
TotalFileSizeColumn --|> ProgressColumn
MofNCompleteColumn --|> ProgressColumn
DownloadColumn --|> ProgressColumn
TransferSpeedColumn --|> ProgressColumn
Progress --|> JupyterMixin
ProgressBar --|> JupyterMixin
InvalidResponse --|> PromptError
Rule --|> JupyterMixin
ControlType --|> IntEnum
Status --|> JupyterMixin
PygmentsSyntaxTheme --|> SyntaxTheme
ANSISyntaxTheme --|> SyntaxTheme
Syntax --|> JupyterMixin
Table --|> JupyterMixin
Text --|> JupyterMixin
PathHighlighter --|> RegexHighlighter
Tree --|> JupyterMixin
Inspect --|> JupyterMixin
Edge --|> Protocol
HTTPSConnection --|> HTTPConnection
HTTPConnectionPool --|> ConnectionPool
HTTPConnectionPool --|> RequestMethods
HTTPSConnectionPool --|> HTTPConnectionPool
HTTPWarning --|> Warning
PoolError --|> HTTPError
RequestError --|> PoolError
SSLError --|> HTTPError
ProxyError --|> HTTPError
DecodeError --|> HTTPError
ProtocolError --|> HTTPError
MaxRetryError --|> RequestError
HostChangedError --|> RequestError
TimeoutStateError --|> HTTPError
TimeoutError --|> HTTPError
ReadTimeoutError --|> TimeoutError
ReadTimeoutError --|> RequestError
ConnectTimeoutError --|> TimeoutError
NewConnectionError --|> ConnectTimeoutError
NewConnectionError --|> PoolError
EmptyPoolError --|> PoolError
ClosedPoolError --|> PoolError
LocationValueError --|> HTTPError
LocationParseError --|> LocationValueError
URLSchemeUnknown --|> LocationValueError
ResponseError --|> HTTPError
SecurityWarning --|> HTTPWarning
SubjectAltNameWarning --|> SecurityWarning
InsecureRequestWarning --|> SecurityWarning
SystemTimeWarning --|> SecurityWarning
InsecurePlatformWarning --|> SecurityWarning
SNIMissingWarning --|> HTTPWarning
DependencyWarning --|> HTTPWarning
ResponseNotChunked --|> ProtocolError
BodyNotHttplibCompatible --|> HTTPError
IncompleteRead --|> HTTPError
InvalidChunkLength --|> HTTPError
InvalidHeader --|> HTTPError
ProxySchemeUnknown --|> URLSchemeUnknown
HeaderParsingError --|> HTTPError
UnrewindableBodyError --|> HTTPError
PoolManager --|> RequestMethods
ProxyManager --|> PoolManager
AppEnginePlatformWarning --|> HTTPWarning
AppEnginePlatformError --|> HTTPError
AppEngineManager --|> RequestMethods
NTLMConnectionPool --|> HTTPSConnectionPool
SOCKSConnection --|> HTTPConnection
SOCKSHTTPSConnection --|> SOCKSConnection
SOCKSHTTPSConnection --|> HTTPSConnection
SOCKSHTTPConnectionPool --|> HTTPConnectionPool
SOCKSHTTPSConnectionPool --|> HTTPSConnectionPool
SOCKSProxyManager --|> PoolManager
WaitFunc --|> Protocol
AdaptContext --|> Protocol
Dumper --|> Protocol
Loader --|> Protocol
Transformer --|> Protocol
RecursiveDumper --|> Dumper
RecursiveLoader --|> Loader
FileWriter --|> Writer
BinaryBinaryDumper --|> BytesBinaryDumper
BinaryTextDumper --|> BytesDumper
InterfaceError --|> Error
DatabaseError --|> Error
DataError --|> DatabaseError
OperationalError --|> DatabaseError
IntegrityError --|> DatabaseError
InternalError --|> DatabaseError
ProgrammingError --|> DatabaseError
NotSupportedError --|> DatabaseError
ConnectionTimeout --|> OperationalError
CancellationTimeout --|> OperationalError
PipelineAborted --|> OperationalError
NoData --|> DatabaseError
NoAdditionalDynamicResultSetsReturned --|> DatabaseError
SqlStatementNotYetComplete --|> DatabaseError
ConnectionException --|> OperationalError
SqlclientUnableToEstablishSqlconnection --|> OperationalError
ConnectionDoesNotExist --|> OperationalError
SqlserverRejectedEstablishmentOfSqlconnection --|> OperationalError
ConnectionFailure --|> OperationalError
TransactionResolutionUnknown --|> OperationalError
ProtocolViolation --|> OperationalError
TriggeredActionException --|> DatabaseError
FeatureNotSupported --|> NotSupportedError
InvalidTransactionInitiation --|> DatabaseError
LocatorException --|> DatabaseError
InvalidLocatorSpecification --|> DatabaseError
InvalidGrantor --|> DatabaseError
InvalidGrantOperation --|> DatabaseError
InvalidRoleSpecification --|> DatabaseError
DiagnosticsException --|> DatabaseError
StackedDiagnosticsAccessedWithoutActiveHandler --|> DatabaseError
CaseNotFound --|> ProgrammingError
CardinalityViolation --|> ProgrammingError
DataException --|> DataError
StringDataRightTruncation --|> DataError
NullValueNoIndicatorParameter --|> DataError
NumericValueOutOfRange --|> DataError
NullValueNotAllowed --|> DataError
ErrorInAssignment --|> DataError
InvalidDatetimeFormat --|> DataError
DatetimeFieldOverflow --|> DataError
InvalidTimeZoneDisplacementValue --|> DataError
EscapeCharacterConflict --|> DataError
InvalidUseOfEscapeCharacter --|> DataError
InvalidEscapeOctet --|> DataError
ZeroLengthCharacterString --|> DataError
MostSpecificTypeMismatch --|> DataError
SequenceGeneratorLimitExceeded --|> DataError
NotAnXmlDocument --|> DataError
InvalidXmlDocument --|> DataError
InvalidXmlContent --|> DataError
InvalidXmlComment --|> DataError
InvalidXmlProcessingInstruction --|> DataError
InvalidIndicatorParameterValue --|> DataError
SubstringError --|> DataError
DivisionByZero --|> DataError
InvalidPrecedingOrFollowingSize --|> DataError
InvalidArgumentForNtileFunction --|> DataError
IntervalFieldOverflow --|> DataError
InvalidArgumentForNthValueFunction --|> DataError
InvalidCharacterValueForCast --|> DataError
InvalidEscapeCharacter --|> DataError
InvalidRegularExpression --|> DataError
InvalidArgumentForLogarithm --|> DataError
InvalidArgumentForPowerFunction --|> DataError
InvalidArgumentForWidthBucketFunction --|> DataError
InvalidRowCountInLimitClause --|> DataError
InvalidRowCountInResultOffsetClause --|> DataError
CharacterNotInRepertoire --|> DataError
IndicatorOverflow --|> DataError
InvalidParameterValue --|> DataError
UnterminatedCString --|> DataError
InvalidEscapeSequence --|> DataError
StringDataLengthMismatch --|> DataError
TrimError --|> DataError
ArraySubscriptError --|> DataError
InvalidTablesampleRepeat --|> DataError
InvalidTablesampleArgument --|> DataError
DuplicateJsonObjectKeyValue --|> DataError
InvalidArgumentForSqlJsonDatetimeFunction --|> DataError
InvalidJsonText --|> DataError
InvalidSqlJsonSubscript --|> DataError
MoreThanOneSqlJsonItem --|> DataError
NoSqlJsonItem --|> DataError
NonNumericSqlJsonItem --|> DataError
NonUniqueKeysInAJsonObject --|> DataError
SingletonSqlJsonItemRequired --|> DataError
SqlJsonArrayNotFound --|> DataError
SqlJsonMemberNotFound --|> DataError
SqlJsonNumberNotFound --|> DataError
SqlJsonObjectNotFound --|> DataError
TooManyJsonArrayElements --|> DataError
TooManyJsonObjectMembers --|> DataError
SqlJsonScalarRequired --|> DataError
SqlJsonItemCannotBeCastToTargetType --|> DataError
FloatingPointException --|> DataError
InvalidTextRepresentation --|> DataError
InvalidBinaryRepresentation --|> DataError
BadCopyFileFormat --|> DataError
UntranslatableCharacter --|> DataError
NonstandardUseOfEscapeCharacter --|> DataError
IntegrityConstraintViolation --|> IntegrityError
RestrictViolation --|> IntegrityError
NotNullViolation --|> IntegrityError
ForeignKeyViolation --|> IntegrityError
UniqueViolation --|> IntegrityError
CheckViolation --|> IntegrityError
ExclusionViolation --|> IntegrityError
InvalidCursorState --|> InternalError
InvalidTransactionState --|> InternalError
ActiveSqlTransaction --|> InternalError
BranchTransactionAlreadyActive --|> InternalError
InappropriateAccessModeForBranchTransaction --|> InternalError
InappropriateIsolationLevelForBranchTransaction --|> InternalError
NoActiveSqlTransactionForBranchTransaction --|> InternalError
ReadOnlySqlTransaction --|> InternalError
SchemaAndDataStatementMixingNotSupported --|> InternalError
HeldCursorRequiresSameIsolationLevel --|> InternalError
NoActiveSqlTransaction --|> InternalError
InFailedSqlTransaction --|> InternalError
IdleInTransactionSessionTimeout --|> InternalError
TransactionTimeout --|> InternalError
InvalidSqlStatementName --|> ProgrammingError
TriggeredDataChangeViolation --|> OperationalError
InvalidAuthorizationSpecification --|> OperationalError
InvalidPassword --|> OperationalError
DependentPrivilegeDescriptorsStillExist --|> InternalError
DependentObjectsStillExist --|> InternalError
InvalidTransactionTermination --|> InternalError
SqlRoutineException --|> OperationalError
ModifyingSqlDataNotPermitted --|> OperationalError
ProhibitedSqlStatementAttempted --|> OperationalError
ReadingSqlDataNotPermitted --|> OperationalError
FunctionExecutedNoReturnStatement --|> OperationalError
InvalidCursorName --|> ProgrammingError
ExternalRoutineException --|> OperationalError
ContainingSqlNotPermitted --|> OperationalError
ModifyingSqlDataNotPermittedExt --|> OperationalError
ProhibitedSqlStatementAttemptedExt --|> OperationalError
ReadingSqlDataNotPermittedExt --|> OperationalError
ExternalRoutineInvocationException --|> OperationalError
InvalidSqlstateReturned --|> OperationalError
NullValueNotAllowedExt --|> OperationalError
TriggerProtocolViolated --|> OperationalError
SrfProtocolViolated --|> OperationalError
EventTriggerProtocolViolated --|> OperationalError
SavepointException --|> OperationalError
InvalidSavepointSpecification --|> OperationalError
InvalidCatalogName --|> ProgrammingError
InvalidSchemaName --|> ProgrammingError
TransactionRollback --|> OperationalError
SerializationFailure --|> OperationalError
TransactionIntegrityConstraintViolation --|> OperationalError
StatementCompletionUnknown --|> OperationalError
DeadlockDetected --|> OperationalError
SyntaxErrorOrAccessRuleViolation --|> ProgrammingError
InsufficientPrivilege --|> ProgrammingError
SyntaxError --|> ProgrammingError
InvalidName --|> ProgrammingError
InvalidColumnDefinition --|> ProgrammingError
NameTooLong --|> ProgrammingError
DuplicateColumn --|> ProgrammingError
AmbiguousColumn --|> ProgrammingError
UndefinedColumn --|> ProgrammingError
UndefinedObject --|> ProgrammingError
DuplicateObject --|> ProgrammingError
DuplicateAlias --|> ProgrammingError
DuplicateFunction --|> ProgrammingError
AmbiguousFunction --|> ProgrammingError
GroupingError --|> ProgrammingError
DatatypeMismatch --|> ProgrammingError
WrongObjectType --|> ProgrammingError
InvalidForeignKey --|> ProgrammingError
CannotCoerce --|> ProgrammingError
UndefinedFunction --|> ProgrammingError
GeneratedAlways --|> ProgrammingError
ReservedName --|> ProgrammingError
UndefinedTable --|> ProgrammingError
UndefinedParameter --|> ProgrammingError
DuplicateCursor --|> ProgrammingError
DuplicateDatabase --|> ProgrammingError
DuplicatePreparedStatement --|> ProgrammingError
DuplicateSchema --|> ProgrammingError
DuplicateTable --|> ProgrammingError
AmbiguousParameter --|> ProgrammingError
AmbiguousAlias --|> ProgrammingError
InvalidColumnReference --|> ProgrammingError
InvalidCursorDefinition --|> ProgrammingError
InvalidDatabaseDefinition --|> ProgrammingError
InvalidFunctionDefinition --|> ProgrammingError
InvalidPreparedStatementDefinition --|> ProgrammingError
InvalidSchemaDefinition --|> ProgrammingError
InvalidTableDefinition --|> ProgrammingError
InvalidObjectDefinition --|> ProgrammingError
IndeterminateDatatype --|> ProgrammingError
InvalidRecursion --|> ProgrammingError
WindowingError --|> ProgrammingError
CollationMismatch --|> ProgrammingError
IndeterminateCollation --|> ProgrammingError
WithCheckOptionViolation --|> ProgrammingError
InsufficientResources --|> OperationalError
DiskFull --|> OperationalError
OutOfMemory --|> OperationalError
TooManyConnections --|> OperationalError
ConfigurationLimitExceeded --|> OperationalError
ProgramLimitExceeded --|> OperationalError
StatementTooComplex --|> OperationalError
TooManyColumns --|> OperationalError
TooManyArguments --|> OperationalError
ObjectNotInPrerequisiteState --|> OperationalError
ObjectInUse --|> OperationalError
CantChangeRuntimeParam --|> OperationalError
LockNotAvailable --|> OperationalError
UnsafeNewEnumValueUsage --|> OperationalError
OperatorIntervention --|> OperationalError
QueryCanceled --|> OperationalError
AdminShutdown --|> OperationalError
CrashShutdown --|> OperationalError
CannotConnectNow --|> OperationalError
DatabaseDropped --|> OperationalError
IdleSessionTimeout --|> OperationalError
SystemError --|> OperationalError
IoError --|> OperationalError
UndefinedFile --|> OperationalError
DuplicateFile --|> OperationalError
SnapshotTooOld --|> DatabaseError
ConfigFileError --|> OperationalError
LockFileExists --|> OperationalError
FdwError --|> OperationalError
FdwOutOfMemory --|> OperationalError
FdwDynamicParameterValueNeeded --|> OperationalError
FdwInvalidDataType --|> OperationalError
FdwColumnNameNotFound --|> OperationalError
FdwInvalidDataTypeDescriptors --|> OperationalError
FdwInvalidColumnName --|> OperationalError
FdwInvalidColumnNumber --|> OperationalError
FdwInvalidUseOfNullPointer --|> OperationalError
FdwInvalidStringFormat --|> OperationalError
FdwInvalidHandle --|> OperationalError
FdwInvalidOptionIndex --|> OperationalError
FdwInvalidOptionName --|> OperationalError
FdwOptionNameNotFound --|> OperationalError
FdwReplyHandle --|> OperationalError
FdwUnableToCreateExecution --|> OperationalError
FdwUnableToCreateReply --|> OperationalError
FdwUnableToEstablishConnection --|> OperationalError
FdwNoSchemas --|> OperationalError
FdwSchemaNotFound --|> OperationalError
FdwTableNotFound --|> OperationalError
FdwFunctionSequenceError --|> OperationalError
FdwTooManyHandles --|> OperationalError
FdwInconsistentDescriptorInformation --|> OperationalError
FdwInvalidAttributeValue --|> OperationalError
FdwInvalidStringLengthOrBufferLength --|> OperationalError
FdwInvalidDescriptorFieldIdentifier --|> OperationalError
PlpgsqlError --|> ProgrammingError
RaiseException --|> ProgrammingError
NoDataFound --|> ProgrammingError
TooManyRows --|> ProgrammingError
AssertFailure --|> ProgrammingError
InternalError_ --|> InternalError
DataCorrupted --|> InternalError
IndexCorrupted --|> InternalError
PostgresRawQuery --|> PostgresQuery
Composed --|> Composable
SQL --|> Composable
Identifier --|> Composable
Literal --|> Composable
Placeholder --|> Composable
LibpqWriter --|> Writer
QueuedLibpqWriter --|> LibpqWriter
AsyncLibpqWriter --|> AsyncWriter
AsyncQueuedLibpqWriter --|> AsyncLibpqWriter
TextFormatter --|> Formatter
BinaryFormatter --|> Formatter
Wait --|> IntEnum
Ready --|> IntEnum
PyFormat --|> Enum
IsolationLevel --|> IntEnum
Pipeline --|> BasePipeline
AsyncPipeline --|> BasePipeline
Prepare --|> IntEnum
Transformer --|> AdaptContext
PostgresClientQuery --|> PostgresQuery
UnpackLen --|> Protocol
NumericTypeModifier --|> TypeModifier
CharTypeModifier --|> TypeModifier
BitTypeModifier --|> TypeModifier
TimeTypeModifier --|> TypeModifier
CrdbConnectionInfo --|> ConnectionInfo
CrdbEnumDumper --|> EnumDumper
CrdbEnumBinaryDumper --|> EnumBinaryDumper
CrdbNoneDumper --|> NoneDumper
PGconn --|> Protocol
PGresult --|> Protocol
PGcancelConn --|> Protocol
PGcancel --|> Protocol
Conninfo --|> Protocol
Escaping --|> Protocol
ConnStatus --|> IntEnum
PollingStatus --|> IntEnum
ExecStatus --|> IntEnum
TransactionStatus --|> IntEnum
Ping --|> IntEnum
PipelineStatus --|> IntEnum
DiagnosticField --|> IntEnum
Format --|> IntEnum
BaseListDumper --|> RecursiveDumper
ListDumper --|> BaseListDumper
ListBinaryDumper --|> BaseListDumper
ArrayLoader --|> RecursiveLoader
ArrayBinaryLoader --|> RecursiveLoader
BoolDumper --|> Dumper
BoolBinaryDumper --|> Dumper
BoolLoader --|> Loader
BoolBinaryLoader --|> Loader
CompositeInfo --|> TypeInfo
SequenceDumper --|> RecursiveDumper
TupleDumper --|> SequenceDumper
TupleBinaryDumper --|> Dumper
BaseCompositeLoader --|> Loader
RecordLoader --|> BaseCompositeLoader
RecordBinaryLoader --|> Loader
CompositeLoader --|> RecordLoader
CompositeBinaryLoader --|> RecordBinaryLoader
DateDumper --|> Dumper
DateBinaryDumper --|> Dumper
TimedeltaDumper --|> Dumper
TimedeltaBinaryDumper --|> Dumper
DateLoader --|> Loader
DateBinaryLoader --|> Loader
TimeLoader --|> Loader
TimeBinaryLoader --|> Loader
TimetzLoader --|> Loader
TimetzBinaryLoader --|> Loader
TimestampLoader --|> Loader
TimestampBinaryLoader --|> Loader
TimestamptzLoader --|> Loader
TimestamptzBinaryLoader --|> Loader
IntervalLoader --|> Loader
IntervalBinaryLoader --|> Loader
EnumInfo --|> TypeInfo
EnumDumper --|> Dumper
EnumBinaryDumper --|> EnumDumper
BaseHstoreDumper --|> RecursiveDumper
HstoreLoader --|> RecursiveLoader
MultirangeInfo --|> TypeInfo
BaseMultirangeDumper --|> RecursiveDumper
MultirangeDumper --|> BaseMultirangeDumper
MultirangeBinaryDumper --|> BaseMultirangeDumper
BaseMultirangeLoader --|> RecursiveLoader
Int4MultirangeDumper --|> MultirangeDumper
Int8MultirangeDumper --|> MultirangeDumper
NumericMultirangeDumper --|> MultirangeDumper
DateMultirangeDumper --|> MultirangeDumper
TimestampMultirangeDumper --|> MultirangeDumper
TimestamptzMultirangeDumper --|> MultirangeDumper
Int4MultirangeBinaryDumper --|> MultirangeBinaryDumper
Int8MultirangeBinaryDumper --|> MultirangeBinaryDumper
NumericMultirangeBinaryDumper --|> MultirangeBinaryDumper
DateMultirangeBinaryDumper --|> MultirangeBinaryDumper
TimestampMultirangeBinaryDumper --|> MultirangeBinaryDumper
TimestamptzMultirangeBinaryDumper --|> MultirangeBinaryDumper
InterfaceDumper --|> Dumper
NetworkDumper --|> Dumper
NetworkBinaryDumper --|> Dumper
NoneDumper --|> Dumper
Float4Dumper --|> FloatDumper
FloatBinaryDumper --|> Dumper
Float4BinaryDumper --|> FloatBinaryDumper
IntDumper --|> Dumper
Int2BinaryDumper --|> Int2Dumper
Int4BinaryDumper --|> Int4Dumper
Int8BinaryDumper --|> Int8Dumper
IntNumericBinaryDumper --|> IntNumericDumper
OidBinaryDumper --|> OidDumper
IntBinaryDumper --|> IntDumper
IntLoader --|> Loader
Int2BinaryLoader --|> Loader
Int4BinaryLoader --|> Loader
Int8BinaryLoader --|> Loader
OidBinaryLoader --|> Loader
FloatLoader --|> Loader
Float4BinaryLoader --|> Loader
Float8BinaryLoader --|> Loader
NumericLoader --|> Loader
NumericBinaryLoader --|> Loader
DecimalBinaryDumper --|> Dumper
NPInt16BinaryDumper --|> NPInt16Dumper
NPInt32BinaryDumper --|> NPInt32Dumper
NPInt64BinaryDumper --|> NPInt64Dumper
NPNumericBinaryDumper --|> NPNumericDumper
RangeInfo --|> TypeInfo
BaseRangeDumper --|> RecursiveDumper
RangeDumper --|> BaseRangeDumper
RangeBinaryDumper --|> BaseRangeDumper
BaseRangeLoader --|> RecursiveLoader
Int4RangeDumper --|> RangeDumper
Int8RangeDumper --|> RangeDumper
NumericRangeDumper --|> RangeDumper
DateRangeDumper --|> RangeDumper
TimestampRangeDumper --|> RangeDumper
TimestamptzRangeDumper --|> RangeDumper
Int4RangeBinaryDumper --|> RangeBinaryDumper
Int8RangeBinaryDumper --|> RangeBinaryDumper
NumericRangeBinaryDumper --|> RangeBinaryDumper
DateRangeBinaryDumper --|> RangeBinaryDumper
TimestampRangeBinaryDumper --|> RangeBinaryDumper
TimestamptzRangeBinaryDumper --|> RangeBinaryDumper
GeometryBinaryLoader --|> Loader
GeometryLoader --|> Loader
BaseGeometryBinaryDumper --|> Dumper
BaseGeometryDumper --|> Dumper
TextLoader --|> Loader
TextBinaryLoader --|> TextLoader
BytesDumper --|> Dumper
BytesBinaryDumper --|> Dumper
ByteaLoader --|> Loader
ByteaBinaryLoader --|> Loader
UUIDDumper --|> Dumper
UUIDBinaryDumper --|> UUIDDumper
UUIDLoader --|> Loader
UUIDBinaryLoader --|> UUIDLoader
PydanticUserError --|> PydanticErrorMixin
PydanticUndefinedAnnotation --|> PydanticErrorMixin
PydanticImportError --|> PydanticErrorMixin
PydanticSchemaGenerationError --|> PydanticUserError
PydanticInvalidForJsonSchema --|> PydanticUserError
FreeModelBeforeValidatorWithoutInfo --|> Protocol
ModelBeforeValidatorWithoutInfo --|> Protocol
FreeModelBeforeValidator --|> Protocol
ModelBeforeValidator --|> Protocol
AnyHttpUrl --|> AnyUrl
HttpUrl --|> AnyUrl
AnyWebsocketUrl --|> AnyUrl
WebsocketUrl --|> AnyUrl
FileUrl --|> AnyUrl
FtpUrl --|> AnyUrl
CockroachDsn --|> AnyUrl
AmqpDsn --|> AnyUrl
RedisDsn --|> AnyUrl
KafkaDsn --|> AnyUrl
MySQLDsn --|> AnyUrl
MariaDBDsn --|> AnyUrl
ClickHouseDsn --|> AnyUrl
SnowflakeDsn --|> AnyUrl
RootModel --|> BaseModel
Strict --|> BaseMetadata
PaymentCardBrand --|> Enum
EncoderProtocol --|> Protocol
Base64Encoder --|> EncoderProtocol
Base64UrlEncoder --|> EncoderProtocol
FailFast --|> BaseMetadata
PydanticDeprecatedSince20 --|> PydanticDeprecationWarning
PydanticDeprecatedSince26 --|> PydanticDeprecationWarning
PydanticDeprecatedSince29 --|> PydanticDeprecationWarning
PydanticDeprecatedSince210 --|> PydanticDeprecationWarning
GenericBeforeBaseModelWarning --|> Warning
PydanticExperimentalWarning --|> Warning
Protocol --|> Enum
PydanticPluginProtocol --|> Protocol
BaseValidateHandlerProtocol --|> Protocol
ValidatePythonHandlerProtocol --|> BaseValidateHandlerProtocol
ValidatePythonHandlerProtocol --|> Protocol
ValidateJsonHandlerProtocol --|> BaseValidateHandlerProtocol
ValidateJsonHandlerProtocol --|> Protocol
ValidateStringsHandlerProtocol --|> BaseValidateHandlerProtocol
ValidateStringsHandlerProtocol --|> Protocol
Color --|> Representation
SchemaExtraCallable --|> Protocol
Extra --|> Enum
Config --|> BaseConfig
BaseSettings --|> BaseModel
Config --|> BaseConfig
PydanticTypeError --|> PydanticErrorMixin
PydanticValueError --|> PydanticErrorMixin
MissingError --|> PydanticValueError
ExtraError --|> PydanticValueError
NoneIsNotAllowedError --|> PydanticTypeError
NoneIsAllowedError --|> PydanticTypeError
WrongConstantError --|> PydanticValueError
NotNoneError --|> PydanticTypeError
BoolError --|> PydanticTypeError
BytesError --|> PydanticTypeError
DictError --|> PydanticTypeError
EmailError --|> PydanticValueError
UrlError --|> PydanticValueError
UrlSchemeError --|> UrlError
UrlSchemePermittedError --|> UrlError
UrlUserInfoError --|> UrlError
UrlHostError --|> UrlError
UrlHostTldError --|> UrlError
UrlPortError --|> UrlError
UrlExtraError --|> UrlError
EnumMemberError --|> PydanticTypeError
IntegerError --|> PydanticTypeError
FloatError --|> PydanticTypeError
PathError --|> PydanticTypeError
PyObjectError --|> PydanticTypeError
SequenceError --|> PydanticTypeError
IterableError --|> PydanticTypeError
ListError --|> PydanticTypeError
SetError --|> PydanticTypeError
FrozenSetError --|> PydanticTypeError
DequeError --|> PydanticTypeError
TupleError --|> PydanticTypeError
TupleLengthError --|> PydanticValueError
ListMinLengthError --|> PydanticValueError
ListMaxLengthError --|> PydanticValueError
ListUniqueItemsError --|> PydanticValueError
SetMinLengthError --|> PydanticValueError
SetMaxLengthError --|> PydanticValueError
FrozenSetMinLengthError --|> PydanticValueError
FrozenSetMaxLengthError --|> PydanticValueError
AnyStrMinLengthError --|> PydanticValueError
AnyStrMaxLengthError --|> PydanticValueError
StrError --|> PydanticTypeError
StrRegexError --|> PydanticValueError
NumberNotFiniteError --|> PydanticValueError
NumberNotMultipleError --|> PydanticValueError
DecimalError --|> PydanticTypeError
DecimalIsNotFiniteError --|> PydanticValueError
DecimalMaxDigitsError --|> PydanticValueError
DecimalMaxPlacesError --|> PydanticValueError
DecimalWholeDigitsError --|> PydanticValueError
DateTimeError --|> PydanticValueError
DateError --|> PydanticValueError
DateNotInThePastError --|> PydanticValueError
DateNotInTheFutureError --|> PydanticValueError
TimeError --|> PydanticValueError
DurationError --|> PydanticValueError
HashableError --|> PydanticTypeError
UUIDError --|> PydanticTypeError
UUIDVersionError --|> PydanticValueError
ArbitraryTypeError --|> PydanticTypeError
ClassError --|> PydanticTypeError
SubclassError --|> PydanticTypeError
JsonError --|> PydanticValueError
JsonTypeError --|> PydanticTypeError
PatternError --|> PydanticValueError
DataclassTypeError --|> PydanticTypeError
CallableError --|> PydanticTypeError
EnumError --|> PydanticTypeError
IntEnumError --|> PydanticTypeError
IPvAnyAddressError --|> PydanticValueError
IPvAnyInterfaceError --|> PydanticValueError
IPvAnyNetworkError --|> PydanticValueError
IPv4AddressError --|> PydanticValueError
IPv6AddressError --|> PydanticValueError
IPv4NetworkError --|> PydanticValueError
IPv6NetworkError --|> PydanticValueError
IPv4InterfaceError --|> PydanticValueError
IPv6InterfaceError --|> PydanticValueError
ColorError --|> PydanticValueError
StrictBoolError --|> PydanticValueError
NotDigitError --|> PydanticValueError
LuhnValidationError --|> PydanticValueError
InvalidLengthForBrand --|> PydanticValueError
InvalidByteSize --|> PydanticValueError
InvalidByteSizeUnit --|> PydanticValueError
MissingDiscriminator --|> PydanticValueError
InvalidDiscriminator --|> PydanticValueError
ErrorWrapper --|> Representation
ValidationError --|> Representation
FieldInfo --|> Representation
ModelField --|> Representation
ModelPrivateAttr --|> Representation
GenericModel --|> BaseModel
BaseModel --|> Representation
AnyHttpUrl --|> AnyUrl
HttpUrl --|> AnyHttpUrl
FileUrl --|> AnyUrl
MultiHostDsn --|> AnyUrl
PostgresDsn --|> MultiHostDsn
CockroachDsn --|> AnyUrl
AmqpDsn --|> AnyUrl
RedisDsn --|> AnyUrl
MongoDsn --|> AnyUrl
KafkaDsn --|> AnyUrl
NameEmail --|> Representation
Protocol --|> Enum
PositiveInt --|> ConstrainedInt
NegativeInt --|> ConstrainedInt
NonPositiveInt --|> ConstrainedInt
NonNegativeInt --|> ConstrainedInt
StrictInt --|> ConstrainedInt
PositiveFloat --|> ConstrainedFloat
NegativeFloat --|> ConstrainedFloat
NonPositiveFloat --|> ConstrainedFloat
NonNegativeFloat --|> ConstrainedFloat
StrictFloat --|> ConstrainedFloat
FiniteFloat --|> ConstrainedFloat
StrictBytes --|> ConstrainedBytes
StrictStr --|> ConstrainedStr
UUID1 --|> UUID
UUID3 --|> UUID1
UUID4 --|> UUID1
UUID5 --|> UUID1
FilePath --|> Path
DirectoryPath --|> Path
SecretStr --|> SecretField
SecretBytes --|> SecretField
PaymentCardBrand --|> Enum
GetterDict --|> Representation
ValueItems --|> Representation
V1OnlyValueValidator --|> Protocol
V1ValidatorWithValues --|> Protocol
V1ValidatorWithValuesKwOnly --|> Protocol
V1ValidatorWithKwargs --|> Protocol
V1ValidatorWithValuesAndKwargs --|> Protocol
V1RootValidatorFunction --|> Protocol
V2CoreBeforeRootValidator --|> Protocol
V2CoreAfterRootValidator --|> Protocol
PydanticMetadata --|> Representation
DeepChainMap --|> ChainMap
GenerateJsonSchemaHandler --|> GetJsonSchemaHandler
CallbackGetCoreSchemaHandler --|> GetCoreSchemaHandler
SerializationInfo --|> Protocol
FieldSerializationInfo --|> SerializationInfo
FieldSerializationInfo --|> Protocol
ValidationInfo --|> Protocol
SerializerFunctionWrapHandler --|> Protocol
ValidatorFunctionWrapHandler --|> Protocol
SettingsConfigDict --|> ConfigDict
BaseSettings --|> BaseModel
CliAppBaseSettings --|> BaseSettings
CliMutuallyExclusiveGroup --|> BaseModel
DefaultSettingsSource --|> PydanticBaseSettingsSource
InitSettingsSource --|> PydanticBaseSettingsSource
PydanticBaseEnvSettingsSource --|> PydanticBaseSettingsSource
SecretsSettingsSource --|> PydanticBaseEnvSettingsSource
EnvSettingsSource --|> PydanticBaseEnvSettingsSource
DotEnvSettingsSource --|> EnvSettingsSource
CliSettingsSource --|> EnvSettingsSource
JsonConfigSettingsSource --|> InitSettingsSource
JsonConfigSettingsSource --|> ConfigFileSourceMixin
TomlConfigSettingsSource --|> InitSettingsSource
TomlConfigSettingsSource --|> ConfigFileSourceMixin
PyprojectTomlConfigSettingsSource --|> TomlConfigSettingsSource
YamlConfigSettingsSource --|> InitSettingsSource
YamlConfigSettingsSource --|> ConfigFileSourceMixin
AzureKeyVaultSettingsSource --|> EnvSettingsSource
FunctionFilter --|> Filter
DelegatingLexer --|> Lexer
words --|> Future
RegexLexerMeta --|> LexerMeta
RegexLexer --|> Lexer
ExtendedRegexLexer --|> RegexLexer
ProfilingRegexLexerMeta --|> RegexLexerMeta
ProfilingRegexLexer --|> RegexLexer
CodeTagFilter --|> Filter
SymbolFilter --|> Filter
KeywordCaseFilter --|> Filter
NameHighlightFilter --|> Filter
RaiseOnErrorTokenFilter --|> Filter
VisibleWhitespaceFilter --|> Filter
GobbleFilter --|> Filter
TokenMergeFilter --|> Filter
BBCodeFormatter --|> Formatter
GroffFormatter --|> Formatter
HtmlFormatter --|> Formatter
ImageFormatter --|> Formatter
GifImageFormatter --|> ImageFormatter
JpgImageFormatter --|> ImageFormatter
BmpImageFormatter --|> ImageFormatter
IRCFormatter --|> Formatter
LatexFormatter --|> Formatter
LatexEmbeddedLexer --|> Lexer
NullFormatter --|> Formatter
RawTokenFormatter --|> Formatter
TestcaseFormatter --|> Formatter
PangoMarkupFormatter --|> Formatter
RtfFormatter --|> Formatter
SvgFormatter --|> Formatter
TerminalFormatter --|> Formatter
Terminal256Formatter --|> Formatter
TerminalTrueColorFormatter --|> Terminal256Formatter
ActionScriptLexer --|> RegexLexer
ActionScript3Lexer --|> RegexLexer
MxmlLexer --|> RegexLexer
AdaLexer --|> RegexLexer
GAPLexer --|> RegexLexer
GAPConsoleLexer --|> Lexer
MathematicaLexer --|> RegexLexer
MuPADLexer --|> RegexLexer
BCLexer --|> RegexLexer
AmbientTalkLexer --|> RegexLexer
AMDGPULexer --|> RegexLexer
AmplLexer --|> RegexLexer
apdlexer --|> RegexLexer
APLLexer --|> RegexLexer
AtomsLexer --|> RegexLexer
OdinLexer --|> AtomsLexer
CadlLexer --|> AtomsLexer
AdlLexer --|> AtomsLexer
ArrowLexer --|> RegexLexer
ArturoLexer --|> RegexLexer
AscLexer --|> RegexLexer
GasLexer --|> RegexLexer
ObjdumpLexer --|> RegexLexer
DObjdumpLexer --|> DelegatingLexer
CppObjdumpLexer --|> DelegatingLexer
CObjdumpLexer --|> DelegatingLexer
HsailLexer --|> RegexLexer
LlvmLexer --|> RegexLexer
LlvmMirBodyLexer --|> RegexLexer
LlvmMirLexer --|> RegexLexer
NasmLexer --|> RegexLexer
NasmObjdumpLexer --|> ObjdumpLexer
TasmLexer --|> RegexLexer
Ca65Lexer --|> RegexLexer
Dasm16Lexer --|> RegexLexer
Asn1Lexer --|> RegexLexer
AutohotkeyLexer --|> RegexLexer
AutoItLexer --|> RegexLexer
BareLexer --|> RegexLexer
BlitzMaxLexer --|> RegexLexer
BlitzBasicLexer --|> RegexLexer
MonkeyLexer --|> RegexLexer
CbmBasicV2Lexer --|> RegexLexer
QBasicLexer --|> RegexLexer
VBScriptLexer --|> RegexLexer
BBCBasicLexer --|> RegexLexer
BddLexer --|> RegexLexer
BerryLexer --|> RegexLexer
BibTeXLexer --|> ExtendedRegexLexer
BSTLexer --|> RegexLexer
BlueprintLexer --|> RegexLexer
BoaLexer --|> RegexLexer
BQNLexer --|> RegexLexer
CobolLexer --|> RegexLexer
CobolFreeformatLexer --|> CobolLexer
ABAPLexer --|> RegexLexer
OpenEdgeLexer --|> RegexLexer
GoodDataCLLexer --|> RegexLexer
MaqlLexer --|> RegexLexer
CapnProtoLexer --|> RegexLexer
CarbonLexer --|> RegexLexer
CddlLexer --|> RegexLexer
ChapelLexer --|> RegexLexer
CleanLexer --|> ExtendedRegexLexer
CodeQLLexer --|> RegexLexer
Comal80Lexer --|> RegexLexer
IniLexer --|> RegexLexer
DesktopLexer --|> RegexLexer
SystemdLexer --|> RegexLexer
RegeditLexer --|> RegexLexer
PropertiesLexer --|> RegexLexer
KconfigLexer --|> RegexLexer
Cfengine3Lexer --|> RegexLexer
ApacheConfLexer --|> RegexLexer
SquidConfLexer --|> RegexLexer
NginxConfLexer --|> RegexLexer
LighttpdConfLexer --|> RegexLexer
DockerLexer --|> RegexLexer
TerraformLexer --|> ExtendedRegexLexer
TermcapLexer --|> RegexLexer
TerminfoLexer --|> RegexLexer
PkgConfigLexer --|> RegexLexer
PacmanConfLexer --|> RegexLexer
AugeasLexer --|> RegexLexer
TOMLLexer --|> RegexLexer
NestedTextLexer --|> RegexLexer
SingularityLexer --|> RegexLexer
UnixConfigLexer --|> RegexLexer
VCTreeStatusLexer --|> RegexLexer
PyPyLogLexer --|> RegexLexer
CplintLexer --|> PrologLexer
CrystalLexer --|> ExtendedRegexLexer
CsoundLexer --|> RegexLexer
CsoundScoreLexer --|> CsoundLexer
CsoundOrchestraLexer --|> CsoundLexer
CsoundDocumentLexer --|> RegexLexer
CssLexer --|> RegexLexer
SassLexer --|> ExtendedRegexLexer
ScssLexer --|> RegexLexer
LessCssLexer --|> CssLexer
CFamilyLexer --|> RegexLexer
CLexer --|> CFamilyLexer
CppLexer --|> CFamilyLexer
PikeLexer --|> CppLexer
NesCLexer --|> CLexer
ClayLexer --|> RegexLexer
ECLexer --|> CLexer
ValaLexer --|> RegexLexer
CudaLexer --|> CLexer
SwigLexer --|> CppLexer
MqlLexer --|> CppLexer
ArduinoLexer --|> CppLexer
CharmciLexer --|> CppLexer
OmgIdlLexer --|> CLexer
PromelaLexer --|> CLexer
DLexer --|> RegexLexer
CrocLexer --|> RegexLexer
MiniDLexer --|> CrocLexer
SmaliLexer --|> RegexLexer
YamlLexerContext --|> LexerContext
YamlLexer --|> ExtendedRegexLexer
JsonLexer --|> Lexer
JsonBareObjectLexer --|> JsonLexer
JsonLdLexer --|> JsonLexer
DaxLexer --|> RegexLexer
DevicetreeLexer --|> RegexLexer
DiffLexer --|> RegexLexer
DarcsPatchLexer --|> RegexLexer
WDiffLexer --|> RegexLexer
DnsZoneLexer --|> RegexLexer
CSharpLexer --|> RegexLexer
NemerleLexer --|> RegexLexer
BooLexer --|> RegexLexer
VbNetLexer --|> RegexLexer
GenericAspxLexer --|> RegexLexer
CSharpAspxLexer --|> DelegatingLexer
VbNetAspxLexer --|> DelegatingLexer
FSharpLexer --|> RegexLexer
XppLexer --|> RegexLexer
ProtoBufLexer --|> RegexLexer
ThriftLexer --|> RegexLexer
ZeekLexer --|> RegexLexer
PuppetLexer --|> RegexLexer
RslLexer --|> RegexLexer
MscgenLexer --|> RegexLexer
VGLLexer --|> RegexLexer
AlloyLexer --|> RegexLexer
PanLexer --|> RegexLexer
CrmshLexer --|> RegexLexer
FlatlineLexer --|> RegexLexer
SnowballLexer --|> ExtendedRegexLexer
DylanLexer --|> RegexLexer
DylanLidLexer --|> RegexLexer
DylanConsoleLexer --|> Lexer
ECLLexer --|> RegexLexer
EiffelLexer --|> RegexLexer
ElmLexer --|> RegexLexer
ElpiLexer --|> RegexLexer
EmailHeaderLexer --|> RegexLexer
EmailLexer --|> DelegatingLexer
ErlangLexer --|> RegexLexer
ErlangShellLexer --|> Lexer
ElixirLexer --|> RegexLexer
ElixirConsoleLexer --|> Lexer
BrainfuckLexer --|> RegexLexer
BefungeLexer --|> RegexLexer
CAmkESLexer --|> RegexLexer
CapDLLexer --|> RegexLexer
RedcodeLexer --|> RegexLexer
AheuiLexer --|> RegexLexer
EzhilLexer --|> RegexLexer
FactorLexer --|> RegexLexer
FantomLexer --|> RegexLexer
FelixLexer --|> RegexLexer
FiftLexer --|> RegexLexer
FloScriptLexer --|> RegexLexer
ForthLexer --|> RegexLexer
FortranLexer --|> RegexLexer
FortranFixedLexer --|> RegexLexer
FoxProLexer --|> RegexLexer
FreeFemLexer --|> CppLexer
FuncLexer --|> RegexLexer
FutharkLexer --|> RegexLexer
GcodeLexer --|> RegexLexer
GDScriptLexer --|> RegexLexer
GleamLexer --|> RegexLexer
GoLexer --|> RegexLexer
BnfLexer --|> RegexLexer
AbnfLexer --|> RegexLexer
JsgfLexer --|> RegexLexer
PegLexer --|> RegexLexer
CypherLexer --|> RegexLexer
GLShaderLexer --|> RegexLexer
HLSLShaderLexer --|> RegexLexer
PostScriptLexer --|> RegexLexer
AsymptoteLexer --|> RegexLexer
GnuplotLexer --|> RegexLexer
PovrayLexer --|> RegexLexer
GraphQLLexer --|> RegexLexer
GraphvizLexer --|> RegexLexer
GSQLLexer --|> RegexLexer
HareLexer --|> RegexLexer
HaskellLexer --|> RegexLexer
HspecLexer --|> HaskellLexer
IdrisLexer --|> RegexLexer
AgdaLexer --|> RegexLexer
CryptolLexer --|> RegexLexer
LiterateLexer --|> Lexer
LiterateHaskellLexer --|> LiterateLexer
LiterateIdrisLexer --|> LiterateLexer
LiterateAgdaLexer --|> LiterateLexer
LiterateCryptolLexer --|> LiterateLexer
KokaLexer --|> RegexLexer
HaxeLexer --|> ExtendedRegexLexer
HxmlLexer --|> RegexLexer
VerilogLexer --|> RegexLexer
SystemVerilogLexer --|> RegexLexer
VhdlLexer --|> RegexLexer
HexdumpLexer --|> RegexLexer
HtmlLexer --|> RegexLexer
DtdLexer --|> RegexLexer
XmlLexer --|> RegexLexer
XsltLexer --|> XmlLexer
HamlLexer --|> ExtendedRegexLexer
ScamlLexer --|> ExtendedRegexLexer
PugLexer --|> ExtendedRegexLexer
UrlEncodedLexer --|> RegexLexer
VueLexer --|> HtmlLexer
IDLLexer --|> RegexLexer
IgorLexer --|> RegexLexer
LimboLexer --|> RegexLexer
NSISLexer --|> RegexLexer
RPMSpecLexer --|> RegexLexer
DebianSourcesLexer --|> RegexLexer
SourcesListLexer --|> RegexLexer
DebianControlLexer --|> RegexLexer
Inform6Lexer --|> RegexLexer
Inform7Lexer --|> RegexLexer
Inform6TemplateLexer --|> Inform7Lexer
Tads3Lexer --|> RegexLexer
IoLexer --|> RegexLexer
JLexer --|> RegexLexer
JavascriptLexer --|> RegexLexer
TypeScriptLexer --|> JavascriptLexer
KalLexer --|> RegexLexer
LiveScriptLexer --|> RegexLexer
DartLexer --|> RegexLexer
LassoLexer --|> RegexLexer
ObjectiveJLexer --|> RegexLexer
CoffeeScriptLexer --|> RegexLexer
MaskLexer --|> RegexLexer
EarlGreyLexer --|> RegexLexer
JuttleLexer --|> RegexLexer
NodeConsoleLexer --|> Lexer
JMESPathLexer --|> RegexLexer
JSLTLexer --|> RegexLexer
Json5Lexer --|> RegexLexer
JsonnetLexer --|> RegexLexer
JsxLexer --|> JavascriptLexer
TsxLexer --|> TypeScriptLexer
JuliaLexer --|> RegexLexer
JuliaConsoleLexer --|> Lexer
JavaLexer --|> RegexLexer
AspectJLexer --|> JavaLexer
ScalaLexer --|> RegexLexer
GosuLexer --|> RegexLexer
GosuTemplateLexer --|> Lexer
GroovyLexer --|> RegexLexer
IokeLexer --|> RegexLexer
ClojureLexer --|> RegexLexer
ClojureScriptLexer --|> ClojureLexer
TeaLangLexer --|> RegexLexer
CeylonLexer --|> RegexLexer
KotlinLexer --|> RegexLexer
XtendLexer --|> RegexLexer
PigLexer --|> RegexLexer
GoloLexer --|> RegexLexer
JasminLexer --|> RegexLexer
SarlLexer --|> RegexLexer
KuinLexer --|> RegexLexer
KustoLexer --|> RegexLexer
LdifLexer --|> RegexLexer
LdaprcLexer --|> RegexLexer
Lean3Lexer --|> RegexLexer
Lean4Lexer --|> RegexLexer
LilyPondLexer --|> SchemeLexer
SchemeLexer --|> RegexLexer
CommonLispLexer --|> RegexLexer
HyLexer --|> RegexLexer
RacketLexer --|> RegexLexer
NewLispLexer --|> RegexLexer
EmacsLispLexer --|> RegexLexer
ShenLexer --|> RegexLexer
CPSALexer --|> RegexLexer
XtlangLexer --|> RegexLexer
FennelLexer --|> RegexLexer
JanetLexer --|> RegexLexer
Macaulay2Lexer --|> RegexLexer
MakefileLexer --|> Lexer
BaseMakefileLexer --|> RegexLexer
CMakeLexer --|> RegexLexer
MapleLexer --|> ExtendedRegexLexer
BBCodeLexer --|> RegexLexer
MoinWikiLexer --|> RegexLexer
RstLexer --|> RegexLexer
TexLexer --|> RegexLexer
GroffLexer --|> RegexLexer
MozPreprocHashLexer --|> RegexLexer
MozPreprocPercentLexer --|> MozPreprocHashLexer
MozPreprocXulLexer --|> DelegatingLexer
MozPreprocJavascriptLexer --|> DelegatingLexer
MozPreprocCssLexer --|> DelegatingLexer
MarkdownLexer --|> RegexLexer
OrgLexer --|> RegexLexer
TiddlyWiki5Lexer --|> RegexLexer
WikitextLexer --|> RegexLexer
MatlabLexer --|> RegexLexer
MatlabSessionLexer --|> Lexer
OctaveLexer --|> RegexLexer
ScilabLexer --|> RegexLexer
MaximaLexer --|> RegexLexer
MesonLexer --|> RegexLexer
MIMELexer --|> RegexLexer
SNBTLexer --|> RegexLexer
MCFunctionLexer --|> RegexLexer
MCSchemaLexer --|> RegexLexer
MIPSLexer --|> RegexLexer
SMLLexer --|> RegexLexer
OcamlLexer --|> RegexLexer
OpaLexer --|> RegexLexer
ReasonLexer --|> RegexLexer
FStarLexer --|> RegexLexer
ModelicaLexer --|> RegexLexer
BugsLexer --|> RegexLexer
JagsLexer --|> RegexLexer
StanLexer --|> RegexLexer
Modula2Lexer --|> RegexLexer
MojoLexer --|> RegexLexer
MonteLexer --|> RegexLexer
MoselLexer --|> RegexLexer
NCLLexer --|> RegexLexer
NimrodLexer --|> RegexLexer
NitLexer --|> RegexLexer
NixLexer --|> RegexLexer
NumbaIRLexer --|> RegexLexer
ComponentPascalLexer --|> RegexLexer
LogosLexer --|> ObjectiveCppLexer
SwiftLexer --|> RegexLexer
OocLexer --|> RegexLexer
OpenScadLexer --|> RegexLexer
ParaSailLexer --|> RegexLexer
RagelLexer --|> RegexLexer
RagelEmbeddedLexer --|> RegexLexer
RagelRubyLexer --|> DelegatingLexer
RagelCLexer --|> DelegatingLexer
RagelDLexer --|> DelegatingLexer
RagelCppLexer --|> DelegatingLexer
RagelObjectiveCLexer --|> DelegatingLexer
RagelJavaLexer --|> DelegatingLexer
AntlrLexer --|> RegexLexer
AntlrCppLexer --|> DelegatingLexer
AntlrObjectiveCLexer --|> DelegatingLexer
AntlrCSharpLexer --|> DelegatingLexer
AntlrPythonLexer --|> DelegatingLexer
AntlrJavaLexer --|> DelegatingLexer
AntlrRubyLexer --|> DelegatingLexer
AntlrPerlLexer --|> DelegatingLexer
AntlrActionScriptLexer --|> DelegatingLexer
TreetopBaseLexer --|> RegexLexer
TreetopLexer --|> DelegatingLexer
EbnfLexer --|> RegexLexer
PortugolLexer --|> Lexer
DelphiLexer --|> Lexer
SourcePawnLexer --|> RegexLexer
PawnLexer --|> RegexLexer
PddlLexer --|> RegexLexer
PerlLexer --|> RegexLexer
Perl6Lexer --|> ExtendedRegexLexer
PhixLexer --|> RegexLexer
ZephirLexer --|> RegexLexer
PsyshConsoleLexer --|> Lexer
PhpLexer --|> RegexLexer
PointlessLexer --|> RegexLexer
PonyLexer --|> RegexLexer
PraatLexer --|> RegexLexer
ProcfileLexer --|> RegexLexer
PrologLexer --|> RegexLexer
LogtalkLexer --|> RegexLexer
PromQLLexer --|> RegexLexer
PrqlLexer --|> RegexLexer
PtxLexer --|> RegexLexer
PythonLexer --|> RegexLexer
Python2Lexer --|> RegexLexer
PythonConsoleLexer --|> DelegatingLexer
PythonTracebackLexer --|> RegexLexer
Python2TracebackLexer --|> RegexLexer
CythonLexer --|> RegexLexer
DgLexer --|> RegexLexer
NumPyLexer --|> PythonLexer
KLexer --|> RegexLexer
QLexer --|> KLexer
QlikLexer --|> RegexLexer
QVToLexer --|> RegexLexer
RConsoleLexer --|> Lexer
SLexer --|> RegexLexer
RdLexer --|> RegexLexer
SparqlLexer --|> RegexLexer
TurtleLexer --|> RegexLexer
ShExCLexer --|> RegexLexer
RebolLexer --|> RegexLexer
RedLexer --|> RegexLexer
RegoLexer --|> RegexLexer
ResourceLexer --|> RegexLexer
RideLexer --|> RegexLexer
RitaLexer --|> RegexLexer
RNCCompactLexer --|> RegexLexer
RoboconfGraphLexer --|> RegexLexer
RoboconfInstancesLexer --|> RegexLexer
RobotFrameworkLexer --|> Lexer
Comment --|> Tokenizer
Setting --|> Tokenizer
ImportSetting --|> Tokenizer
TestCaseSetting --|> Setting
KeywordSetting --|> TestCaseSetting
Variable --|> Tokenizer
KeywordCall --|> Tokenizer
TemplatedKeywordCall --|> Tokenizer
ForLoop --|> Tokenizer
KeywordTable --|> TestCaseTable
RubyLexer --|> ExtendedRegexLexer
RubyConsoleLexer --|> Lexer
FancyLexer --|> RegexLexer
RustLexer --|> RegexLexer
SASLexer --|> RegexLexer
SaviLexer --|> RegexLexer
ScdocLexer --|> RegexLexer
LuaLexer --|> RegexLexer
LuauLexer --|> RegexLexer
MoonScriptLexer --|> LuaLexer
ChaiscriptLexer --|> RegexLexer
LSLLexer --|> RegexLexer
AppleScriptLexer --|> RegexLexer
RexxLexer --|> RegexLexer
MOOCodeLexer --|> RegexLexer
HybrisLexer --|> RegexLexer
EasytrieveLexer --|> RegexLexer
JclLexer --|> RegexLexer
MiniScriptLexer --|> RegexLexer
SmartGameFormatLexer --|> RegexLexer
BashLexer --|> RegexLexer
SlurmBashLexer --|> BashLexer
ShellSessionBaseLexer --|> Lexer
BashSessionLexer --|> ShellSessionBaseLexer
BatchLexer --|> RegexLexer
MSDOSSessionLexer --|> ShellSessionBaseLexer
TcshLexer --|> RegexLexer
TcshSessionLexer --|> ShellSessionBaseLexer
PowerShellLexer --|> RegexLexer
PowerShellSessionLexer --|> ShellSessionBaseLexer
FishShellLexer --|> RegexLexer
ExeclineLexer --|> RegexLexer
SieveLexer --|> RegexLexer
SlashLanguageLexer --|> ExtendedRegexLexer
SlashLexer --|> DelegatingLexer
SmalltalkLexer --|> RegexLexer
NewspeakLexer --|> RegexLexer
SmithyLexer --|> RegexLexer
NuSMVLexer --|> RegexLexer
SnobolLexer --|> RegexLexer
SolidityLexer --|> RegexLexer
SoongLexer --|> RegexLexer
SophiaLexer --|> RegexLexer
TextLexer --|> Lexer
OutputLexer --|> Lexer
RawTokenLexer --|> Lexer
SpiceLexer --|> RegexLexer
PostgresLexer --|> PostgresBase
PostgresLexer --|> RegexLexer
PlPgsqlLexer --|> PostgresBase
PlPgsqlLexer --|> RegexLexer
PsqlRegexLexer --|> PostgresBase
PsqlRegexLexer --|> RegexLexer
PostgresConsoleLexer --|> Lexer
PostgresExplainLexer --|> RegexLexer
SqlLexer --|> RegexLexer
TransactSqlLexer --|> RegexLexer
MySqlLexer --|> RegexLexer
GoogleSqlLexer --|> RegexLexer
SqliteConsoleLexer --|> Lexer
RqlLexer --|> RegexLexer
SrcinfoLexer --|> RegexLexer
StataLexer --|> RegexLexer
SuperColliderLexer --|> RegexLexer
TableGenLexer --|> RegexLexer
TactLexer --|> RegexLexer
TalLexer --|> RegexLexer
TclLexer --|> RegexLexer
TealLexer --|> RegexLexer
ErbLexer --|> Lexer
SmartyLexer --|> RegexLexer
VelocityLexer --|> RegexLexer
VelocityHtmlLexer --|> DelegatingLexer
VelocityXmlLexer --|> DelegatingLexer
DjangoLexer --|> RegexLexer
MyghtyLexer --|> RegexLexer
MyghtyHtmlLexer --|> DelegatingLexer
MyghtyXmlLexer --|> DelegatingLexer
MyghtyJavascriptLexer --|> DelegatingLexer
MyghtyCssLexer --|> DelegatingLexer
MasonLexer --|> RegexLexer
MakoLexer --|> RegexLexer
MakoHtmlLexer --|> DelegatingLexer
MakoXmlLexer --|> DelegatingLexer
MakoJavascriptLexer --|> DelegatingLexer
MakoCssLexer --|> DelegatingLexer
CheetahPythonLexer --|> Lexer
CheetahLexer --|> RegexLexer
CheetahHtmlLexer --|> DelegatingLexer
CheetahXmlLexer --|> DelegatingLexer
CheetahJavascriptLexer --|> DelegatingLexer
GenshiTextLexer --|> RegexLexer
GenshiMarkupLexer --|> RegexLexer
HtmlGenshiLexer --|> DelegatingLexer
GenshiLexer --|> DelegatingLexer
JavascriptGenshiLexer --|> DelegatingLexer
CssGenshiLexer --|> DelegatingLexer
RhtmlLexer --|> DelegatingLexer
XmlErbLexer --|> DelegatingLexer
CssErbLexer --|> DelegatingLexer
JavascriptErbLexer --|> DelegatingLexer
HtmlPhpLexer --|> DelegatingLexer
XmlPhpLexer --|> DelegatingLexer
CssPhpLexer --|> DelegatingLexer
JavascriptPhpLexer --|> DelegatingLexer
HtmlSmartyLexer --|> DelegatingLexer
XmlSmartyLexer --|> DelegatingLexer
CssSmartyLexer --|> DelegatingLexer
JavascriptSmartyLexer --|> DelegatingLexer
HtmlDjangoLexer --|> DelegatingLexer
XmlDjangoLexer --|> DelegatingLexer
CssDjangoLexer --|> DelegatingLexer
JavascriptDjangoLexer --|> DelegatingLexer
JspRootLexer --|> RegexLexer
JspLexer --|> DelegatingLexer
EvoqueLexer --|> RegexLexer
EvoqueHtmlLexer --|> DelegatingLexer
EvoqueXmlLexer --|> DelegatingLexer
ColdfusionLexer --|> RegexLexer
ColdfusionMarkupLexer --|> RegexLexer
ColdfusionHtmlLexer --|> DelegatingLexer
ColdfusionCFCLexer --|> DelegatingLexer
SspLexer --|> DelegatingLexer
TeaTemplateRootLexer --|> RegexLexer
TeaTemplateLexer --|> DelegatingLexer
LassoHtmlLexer --|> DelegatingLexer
LassoXmlLexer --|> DelegatingLexer
LassoCssLexer --|> DelegatingLexer
LassoJavascriptLexer --|> DelegatingLexer
HandlebarsLexer --|> RegexLexer
HandlebarsHtmlLexer --|> DelegatingLexer
YamlJinjaLexer --|> DelegatingLexer
LiquidLexer --|> RegexLexer
TwigLexer --|> RegexLexer
TwigHtmlLexer --|> DelegatingLexer
Angular2Lexer --|> RegexLexer
Angular2HtmlLexer --|> DelegatingLexer
SqlJinjaLexer --|> DelegatingLexer
TeraTermLexer --|> RegexLexer
GherkinLexer --|> RegexLexer
TAPLexer --|> RegexLexer
AwkLexer --|> RegexLexer
SedLexer --|> RegexLexer
VimLexer --|> RegexLexer
IrcLogsLexer --|> RegexLexer
GettextLexer --|> RegexLexer
HttpLexer --|> RegexLexer
TodotxtLexer --|> RegexLexer
NotmuchLexer --|> RegexLexer
KernelLogLexer --|> RegexLexer
CoqLexer --|> RegexLexer
IsabelleLexer --|> RegexLexer
ThingsDBLexer --|> RegexLexer
TlbLexer --|> RegexLexer
TlsLexer --|> RegexLexer
TNTLexer --|> Lexer
RtsLexer --|> RegexLexer
TypoScriptCssDataLexer --|> RegexLexer
TypoScriptHtmlDataLexer --|> RegexLexer
TypoScriptLexer --|> RegexLexer
TypstLexer --|> RegexLexer
UL4Lexer --|> RegexLexer
HTMLUL4Lexer --|> DelegatingLexer
XMLUL4Lexer --|> DelegatingLexer
CSSUL4Lexer --|> DelegatingLexer
JavascriptUL4Lexer --|> DelegatingLexer
PythonUL4Lexer --|> DelegatingLexer
UniconLexer --|> RegexLexer
IconLexer --|> RegexLexer
UcodeLexer --|> RegexLexer
UrbiscriptLexer --|> ExtendedRegexLexer
UsdLexer --|> RegexLexer
VCLLexer --|> RegexLexer
VCLSnippetLexer --|> VCLLexer
BoogieLexer --|> RegexLexer
SilverLexer --|> RegexLexer
VerifpalLexer --|> RegexLexer
VisualPrologBaseLexer --|> RegexLexer
VisualPrologLexer --|> VisualPrologBaseLexer
VisualPrologGrammarLexer --|> VisualPrologBaseLexer
VyperLexer --|> RegexLexer
WatLexer --|> RegexLexer
WebIDLLexer --|> RegexLexer
DuelLexer --|> RegexLexer
XQueryLexer --|> ExtendedRegexLexer
QmlLexer --|> RegexLexer
CirruLexer --|> RegexLexer
SlimLexer --|> ExtendedRegexLexer
WgslLexer --|> RegexLexer
WhileyLexer --|> RegexLexer
WoWTocLexer --|> RegexLexer
WrenLexer --|> RegexLexer
X10Lexer --|> RegexLexer
XorgLexer --|> RegexLexer
YangLexer --|> RegexLexer
YaraLexer --|> RegexLexer
ZigLexer --|> RegexLexer
AbapStyle --|> Style
AlgolStyle --|> Style
Algol_NuStyle --|> Style
ArduinoStyle --|> Style
AutumnStyle --|> Style
BorlandStyle --|> Style
BlackWhiteStyle --|> Style
CoffeeStyle --|> Style
ColorfulStyle --|> Style
DefaultStyle --|> Style
DraculaStyle --|> Style
EmacsStyle --|> Style
FriendlyStyle --|> Style
FriendlyGrayscaleStyle --|> Style
FruityStyle --|> Style
GhDarkStyle --|> Style
GruvboxDarkStyle --|> Style
GruvboxLightStyle --|> Style
IgorStyle --|> Style
InkPotStyle --|> Style
LightbulbStyle --|> Style
LilyPondStyle --|> Style
LovelaceStyle --|> Style
ManniStyle --|> Style
MaterialStyle --|> Style
MonokaiStyle --|> Style
MurphyStyle --|> Style
NativeStyle --|> Style
NordStyle --|> Style
NordDarkerStyle --|> Style
OneDarkStyle --|> Style
ParaisoDarkStyle --|> Style
ParaisoLightStyle --|> Style
PastieStyle --|> Style
PerldocStyle --|> Style
RainbowDashStyle --|> Style
RrtStyle --|> Style
SasStyle --|> Style
SolarizedDarkStyle --|> Style
SolarizedLightStyle --|> SolarizedDarkStyle
StarofficeStyle --|> Style
StataDarkStyle --|> Style
StataLightStyle --|> Style
TangoStyle --|> Style
TracStyle --|> Style
VimStyle --|> Style
VisualStudioStyle --|> Style
XcodeStyle --|> Style
ZenburnStyle --|> Style
ParseError --|> FormParserError
MultipartParseError --|> ParseError
QuerystringParseError --|> ParseError
DecodeError --|> ParseError
FileError --|> FormParserError
SupportsRead --|> Protocol
FieldProtocol --|> Protocol
FileProtocol --|> Protocol
QuerystringState --|> IntEnum
MultipartState --|> IntEnum
OctetStreamParser --|> BaseParser
QuerystringParser --|> BaseParser
MultipartParser --|> BaseParser
HTTPAdapter --|> BaseAdapter
HTTPBasicAuth --|> AuthBase
HTTPProxyAuth --|> HTTPBasicAuth
HTTPDigestAuth --|> AuthBase
InvalidJSONError --|> RequestException
JSONDecodeError --|> InvalidJSONError
HTTPError --|> RequestException
ConnectionError --|> RequestException
ProxyError --|> ConnectionError
SSLError --|> ConnectionError
Timeout --|> RequestException
ConnectTimeout --|> ConnectionError
ConnectTimeout --|> Timeout
ReadTimeout --|> Timeout
URLRequired --|> RequestException
TooManyRedirects --|> RequestException
MissingSchema --|> RequestException
InvalidSchema --|> RequestException
InvalidURL --|> RequestException
InvalidHeader --|> RequestException
InvalidProxyURL --|> InvalidURL
ChunkedEncodingError --|> RequestException
ContentDecodingError --|> RequestException
StreamConsumedError --|> RequestException
RetryError --|> RequestException
UnrewindableBodyError --|> RequestException
RequestsWarning --|> Warning
FileModeWarning --|> RequestsWarning
RequestsDependencyWarning --|> RequestsWarning
Request --|> RequestHooksMixin
PreparedRequest --|> RequestEncodingMixin
PreparedRequest --|> RequestHooksMixin
Session --|> SessionRedirectMixin
Align --|> JupyterMixin
VerticalCenter --|> JupyterMixin
Bar --|> JupyterMixin
ColorSystem --|> IntEnum
ColorType --|> IntEnum
Columns --|> JupyterMixin
RichCast --|> Protocol
ConsoleRenderable --|> Protocol
Constrain --|> JupyterMixin
Emoji --|> JupyterMixin
StyleSyntaxError --|> ConsoleError
MissingStyle --|> StyleError
StyleStackError --|> ConsoleError
NotRenderableError --|> ConsoleError
MarkupError --|> ConsoleError
LiveError --|> ConsoleError
NoAltScreen --|> ConsoleError
NullHighlighter --|> Highlighter
RegexHighlighter --|> Highlighter
ReprHighlighter --|> RegexHighlighter
JSONHighlighter --|> RegexHighlighter
ISO8601Highlighter --|> RegexHighlighter
NoSplitter --|> LayoutError
RowSplitter --|> Splitter
ColumnSplitter --|> Splitter
Live --|> JupyterMixin
Live --|> RenderHook
UnknownElement --|> MarkdownElement
TextElement --|> MarkdownElement
Paragraph --|> TextElement
Heading --|> TextElement
CodeBlock --|> TextElement
BlockQuote --|> TextElement
HorizontalRule --|> MarkdownElement
TableElement --|> MarkdownElement
TableHeaderElement --|> MarkdownElement
TableBodyElement --|> MarkdownElement
TableRowElement --|> MarkdownElement
TableDataElement --|> MarkdownElement
ListElement --|> MarkdownElement
ListItem --|> TextElement
Link --|> TextElement
ImageItem --|> TextElement
Markdown --|> JupyterMixin
Padding --|> JupyterMixin
SystemPager --|> Pager
Panel --|> JupyterMixin
Pretty --|> JupyterMixin
RenderableColumn --|> ProgressColumn
SpinnerColumn --|> ProgressColumn
TextColumn --|> ProgressColumn
BarColumn --|> ProgressColumn
TimeElapsedColumn --|> ProgressColumn
TaskProgressColumn --|> TextColumn
TimeRemainingColumn --|> ProgressColumn
FileSizeColumn --|> ProgressColumn
TotalFileSizeColumn --|> ProgressColumn
MofNCompleteColumn --|> ProgressColumn
DownloadColumn --|> ProgressColumn
TransferSpeedColumn --|> ProgressColumn
Progress --|> JupyterMixin
ProgressBar --|> JupyterMixin
InvalidResponse --|> PromptError
Rule --|> JupyterMixin
ControlType --|> IntEnum
Status --|> JupyterMixin
PygmentsSyntaxTheme --|> SyntaxTheme
ANSISyntaxTheme --|> SyntaxTheme
Syntax --|> JupyterMixin
Table --|> JupyterMixin
Text --|> JupyterMixin
PathHighlighter --|> RegexHighlighter
Tree --|> JupyterMixin
Inspect --|> JupyterMixin
Edge --|> Protocol
LiveInput --|> TextInputHandler
Input --|> LiveInput
Menu --|> LiveInput
Progress --|> Live
FancyStyle --|> BaseStyle
MinimalStyle --|> BaseStyle
TaggedStyle --|> BaseStyle
get_options --|> ClientConstructor
Client --|> ClientConstructor
init --|> ClientConstructor
CounterMetric --|> Metric
GaugeMetric --|> Metric
DistributionMetric --|> Metric
SetMetric --|> Metric
ThreadScheduler --|> Scheduler
GeventScheduler --|> Scheduler
Transaction --|> Span
NoOpSpan --|> Span
HttpTransport --|> Transport
monitor --|> MonitorMixin
AioHttpIntegration --|> Integration
ArgvIntegration --|> Integration
AriadneIntegration --|> Integration
ArqIntegration --|> Integration
AsyncioIntegration --|> Integration
AsyncPGIntegration --|> Integration
AtexitIntegration --|> Integration
AwsLambdaIntegration --|> Integration
BeamIntegration --|> Integration
Boto3Integration --|> Integration
BottleIntegration --|> Integration
BottleRequestExtractor --|> RequestExtractor
CeleryIntegration --|> Integration
ChaliceIntegration --|> Integration
ClickhouseDriverIntegration --|> Integration
CloudResourceContextIntegration --|> Integration
DedupeIntegration --|> Integration
ExcepthookIntegration --|> Integration
ExecutingIntegration --|> Integration
FalconRequestExtractor --|> RequestExtractor
FalconIntegration --|> Integration
FastApiIntegration --|> StarletteIntegration
FlaskIntegration --|> Integration
FlaskRequestExtractor --|> RequestExtractor
GcpIntegration --|> Integration
GnuBacktraceIntegration --|> Integration
GQLIntegration --|> Integration
GrapheneIntegration --|> Integration
HttpxIntegration --|> Integration
HueyIntegration --|> Integration
LoggingIntegration --|> Integration
LoguruIntegration --|> Integration
LoguruEventHandler --|> EventHandler
LoguruBreadcrumbHandler --|> BreadcrumbHandler
ModulesIntegration --|> Integration
OpenAIIntegration --|> Integration
PureEvalIntegration --|> Integration
PyMongoIntegration --|> Integration
PyramidIntegration --|> Integration
PyramidRequestExtractor --|> RequestExtractor
QuartIntegration --|> Integration
RqIntegration --|> Integration
SanicIntegration --|> Integration
SanicRequestExtractor --|> RequestExtractor
SocketIntegration --|> Integration
SqlalchemyIntegration --|> Integration
StarletteIntegration --|> Integration
SentryStarliteASGIMiddleware --|> SentryAsgiMiddleware
StarliteIntegration --|> Integration
StdlibIntegration --|> Integration
StrawberryIntegration --|> Integration
SentrySyncExtension --|> SentryAsyncExtension
ThreadingIntegration --|> Integration
TornadoIntegration --|> Integration
TornadoRequestExtractor --|> RequestExtractor
StartResponse --|> Protocol
DjangoIntegration --|> Integration
DjangoRequestExtractor --|> RequestExtractor
GRPCIntegration --|> Integration
SentryUnaryUnaryClientInterceptor --|> ClientInterceptor
SentryUnaryStreamClientInterceptor --|> ClientInterceptor
OpenTelemetryIntegration --|> Integration
RedisIntegration --|> Integration
SparkIntegration --|> Integration
SentryListener --|> SparkListener
SparkWorkerIntegration --|> Integration
SQLAlchemyError --|> HasDescriptionCode
ArgumentError --|> SQLAlchemyError
DuplicateColumnError --|> ArgumentError
ObjectNotExecutableError --|> ArgumentError
NoSuchModuleError --|> ArgumentError
NoForeignKeysError --|> ArgumentError
AmbiguousForeignKeysError --|> ArgumentError
ConstraintColumnNotFoundError --|> ArgumentError
CircularDependencyError --|> SQLAlchemyError
CompileError --|> SQLAlchemyError
UnsupportedCompilationError --|> CompileError
IdentifierError --|> SQLAlchemyError
DisconnectionError --|> SQLAlchemyError
InvalidatePoolError --|> DisconnectionError
TimeoutError --|> SQLAlchemyError
InvalidRequestError --|> SQLAlchemyError
IllegalStateChangeError --|> InvalidRequestError
NoInspectionAvailable --|> InvalidRequestError
PendingRollbackError --|> InvalidRequestError
ResourceClosedError --|> InvalidRequestError
NoSuchColumnError --|> InvalidRequestError
NoResultFound --|> InvalidRequestError
MultipleResultsFound --|> InvalidRequestError
NoReferenceError --|> InvalidRequestError
AwaitRequired --|> InvalidRequestError
MissingGreenlet --|> InvalidRequestError
NoReferencedTableError --|> NoReferenceError
NoReferencedColumnError --|> NoReferenceError
NoSuchTableError --|> InvalidRequestError
UnreflectableTableError --|> InvalidRequestError
UnboundExecutionError --|> InvalidRequestError
StatementError --|> SQLAlchemyError
DBAPIError --|> StatementError
InterfaceError --|> DBAPIError
DatabaseError --|> DBAPIError
DataError --|> DatabaseError
OperationalError --|> DatabaseError
IntegrityError --|> DatabaseError
InternalError --|> DatabaseError
ProgrammingError --|> DatabaseError
NotSupportedError --|> DatabaseError
SATestSuiteWarning --|> Warning
SADeprecationWarning --|> HasDescriptionCode
Base20DeprecationWarning --|> SADeprecationWarning
LegacyAPIWarning --|> Base20DeprecationWarning
MovedIn20Warning --|> Base20DeprecationWarning
SAWarning --|> HasDescriptionCode
AsyncAdapt_aioodbc_cursor --|> AsyncAdapt_dbapi_cursor
AsyncAdapt_aioodbc_ss_cursor --|> AsyncAdapt_aioodbc_cursor
AsyncAdapt_aioodbc_ss_cursor --|> AsyncAdapt_dbapi_ss_cursor
AsyncAdapt_aioodbc_connection --|> AsyncAdapt_dbapi_connection
AsyncAdaptFallback_aioodbc_connection --|> AsyncAdaptFallback_dbapi_connection
AsyncAdaptFallback_aioodbc_connection --|> AsyncAdapt_aioodbc_connection
aiodbcConnector --|> PyODBCConnector
AsyncAdapt_dbapi_ss_cursor --|> AsyncAdapt_dbapi_cursor
AsyncAdapt_dbapi_connection --|> AdaptedConnection
AsyncAdaptFallback_dbapi_connection --|> AsyncAdapt_dbapi_connection
PyODBCConnector --|> Connector
Connector --|> Dialect
MSExecutionContext_aioodbc --|> MSExecutionContext_pyodbc
MSDialectAsync_aioodbc --|> aiodbcConnector
MSDialectAsync_aioodbc --|> MSDialect_pyodbc
ROWVERSION --|> TIMESTAMP
MSSQLStrictCompiler --|> MSSQLCompiler
CoerceUnicode --|> TypeDecorator
NumericSqlVariant --|> TypeDecorator
NVarcharSqlVariant --|> TypeDecorator
MSIdentifierPreparer_pymssql --|> MSIdentifierPreparer
MSDialect_pymssql --|> MSDialect
MSExecutionContext_pyodbc --|> MSExecutionContext
MSDialect_pyodbc --|> PyODBCConnector
MSDialect_pyodbc --|> MSDialect
AsyncAdapt_aiomysql_ss_cursor --|> AsyncAdapt_aiomysql_cursor
AsyncAdapt_aiomysql_connection --|> AdaptedConnection
AsyncAdaptFallback_aiomysql_connection --|> AsyncAdapt_aiomysql_connection
MySQLDialect_aiomysql --|> MySQLDialect_pymysql
AsyncAdapt_asyncmy_ss_cursor --|> AsyncAdapt_asyncmy_cursor
AsyncAdapt_asyncmy_connection --|> AdaptedConnection
AsyncAdaptFallback_asyncmy_connection --|> AsyncAdapt_asyncmy_connection
MySQLDialect_asyncmy --|> MySQLDialect_pymysql
MariaDBIdentifierPreparer --|> MySQLIdentifierPreparer
MySQLDialect_cymysql --|> MySQLDialect_mysqldb
OnDuplicateClause --|> ClauseElement
match --|> Generative
MariaDBTypeCompiler --|> MySQLTypeCompiler
MariaDBDialect --|> MySQLDialect
MySQLExecutionContext_mariadbconnector --|> MySQLExecutionContext
MySQLCompiler_mariadbconnector --|> MySQLCompiler
MySQLDialect_mariadbconnector --|> MySQLDialect
MySQLCompiler_mysqlconnector --|> MySQLCompiler
MySQLIdentifierPreparer_mysqlconnector --|> MySQLIdentifierPreparer
MySQLDialect_mysqlconnector --|> MySQLDialect
MySQLExecutionContext_mysqldb --|> MySQLExecutionContext
MySQLCompiler_mysqldb --|> MySQLCompiler
MySQLDialect_mysqldb --|> MySQLDialect
MySQLDialect_pymysql --|> MySQLDialect_mysqldb
MySQLExecutionContext_pyodbc --|> MySQLExecutionContext
MySQLDialect_pyodbc --|> PyODBCConnector
MySQLDialect_pyodbc --|> MySQLDialect
OracleCompiler_cx_oracle --|> OracleCompiler
OracleExecutionContext_cx_oracle --|> OracleExecutionContext
OracleDialect_cx_oracle --|> OracleDialect
AsyncAdapt_oracledb_cursor --|> AsyncAdapt_dbapi_cursor
AsyncAdapt_oracledb_ss_cursor --|> AsyncAdapt_dbapi_ss_cursor
AsyncAdapt_oracledb_ss_cursor --|> AsyncAdapt_oracledb_cursor
AsyncAdapt_oracledb_connection --|> AsyncAdapt_dbapi_connection
AsyncAdaptFallback_oracledb_connection --|> AsyncAdaptFallback_dbapi_connection
AsyncAdaptFallback_oracledb_connection --|> AsyncAdapt_oracledb_connection
OracleExecutionContextAsync_oracledb --|> OracleExecutionContext_oracledb
OracleDialectAsync_oracledb --|> OracleDialect_oracledb
VARCHAR2 --|> VARCHAR
AsyncpgREGCONFIG --|> REGCONFIG
AsyncpgBit --|> BIT
AsyncpgByteA --|> BYTEA
AsyncPgInterval --|> INTERVAL
AsyncPgEnum --|> ENUM
AsyncpgFloat --|> AsyncpgNumeric
AsyncpgREGCLASS --|> REGCLASS
AsyncpgOID --|> OID
PGExecutionContext_asyncpg --|> PGExecutionContext
PGCompiler_asyncpg --|> PGCompiler
PGIdentifierPreparer_asyncpg --|> PGIdentifierPreparer
AsyncAdapt_asyncpg_ss_cursor --|> AsyncAdapt_asyncpg_cursor
AsyncAdapt_asyncpg_connection --|> AdaptedConnection
AsyncAdaptFallback_asyncpg_connection --|> AsyncAdapt_asyncpg_connection
InterfaceError --|> Error
DatabaseError --|> Error
InternalError --|> DatabaseError
OperationalError --|> DatabaseError
ProgrammingError --|> DatabaseError
IntegrityError --|> DatabaseError
DataError --|> DatabaseError
NotSupportedError --|> DatabaseError
InternalServerError --|> InternalError
InvalidCachedStatementError --|> NotSupportedError
PGDialect_asyncpg --|> PGDialect
ReflectedDomain --|> ReflectedNamedType
ReflectedEnum --|> ReflectedNamedType
OnConflictClause --|> ClauseElement
OnConflictDoNothing --|> OnConflictClause
OnConflictDoUpdate --|> OnConflictClause
ExcludeConstraint --|> ColumnCollectionConstraint
JSONPATH --|> JSONPathType
JSONB --|> JSON
NamedTypeGenerator --|> InvokeCreateDDLBase
NamedTypeDropper --|> InvokeDropDDLBase
EnumGenerator --|> NamedTypeGenerator
EnumDropper --|> NamedTypeDropper
ENUM --|> NamedType
DomainGenerator --|> NamedTypeGenerator
DomainDropper --|> NamedTypeDropper
DOMAIN --|> NamedType
PGExecutionContext_pg8000 --|> PGExecutionContext
PGCompiler_pg8000 --|> PGCompiler
PGIdentifierPreparer_pg8000 --|> PGIdentifierPreparer
PGDialect_pg8000 --|> PGDialect
NAME --|> TypeDecorator
PG_NODE_TREE --|> TypeDecorator
INT2VECTOR --|> TypeDecorator
OIDVECTOR --|> TypeDecorator
PGCompiler_psycopg --|> PGCompiler
PGIdentifierPreparer_psycopg --|> PGIdentifierPreparer
AsyncAdapt_psycopg_ss_cursor --|> AsyncAdapt_psycopg_cursor
AsyncAdapt_psycopg_connection --|> AdaptedConnection
AsyncAdaptFallback_psycopg_connection --|> AsyncAdapt_psycopg_connection
PGDialectAsync_psycopg --|> PGDialect_psycopg
PGIdentifierPreparer_psycopg2 --|> PGIdentifierPreparer
PGDialect_psycopg2cffi --|> PGDialect_psycopg2
AsyncAdapt_aiosqlite_ss_cursor --|> AsyncAdapt_aiosqlite_cursor
AsyncAdapt_aiosqlite_connection --|> AdaptedConnection
AsyncAdaptFallback_aiosqlite_connection --|> AsyncAdapt_aiosqlite_connection
SQLiteExecutionContext_aiosqlite --|> SQLiteExecutionContext
SQLiteDialect_aiosqlite --|> SQLiteDialect_pysqlite
OnConflictClause --|> ClauseElement
OnConflictDoNothing --|> OnConflictClause
OnConflictDoUpdate --|> OnConflictClause
SQLiteDialect_pysqlcipher --|> SQLiteDialect_pysqlite
SQLiteDialect_pysqlite --|> SQLiteDialect
Connection --|> ConnectionEventsTarget
ExceptionContextImpl --|> ExceptionContext
Transaction --|> TransactionalContext
RootTransaction --|> Transaction
NestedTransaction --|> Transaction
TwoPhaseTransaction --|> RootTransaction
Engine --|> ConnectionEventsTarget
OptionEngine --|> OptionEngineMixin
OptionEngine --|> Engine
IsolationLevelCharacteristic --|> ConnectionCharacteristic
LoggingTokenCharacteristic --|> ConnectionCharacteristic
CursorResultMetaData --|> ResultMetaData
NoCursorFetchStrategy --|> ResultFetchStrategy
NoCursorDQLFetchStrategy --|> NoCursorFetchStrategy
NoCursorDMLFetchStrategy --|> NoCursorFetchStrategy
CursorFetchStrategy --|> ResultFetchStrategy
BufferedRowCursorFetchStrategy --|> CursorFetchStrategy
FullyBufferedCursorFetchStrategy --|> CursorFetchStrategy
DefaultDialect --|> Dialect
StrCompileDialect --|> DefaultDialect
DefaultExecutionContext --|> ExecutionContext
CacheStats --|> Enum
ExecuteStyle --|> Enum
DBAPIConnection --|> Protocol
DBAPIType --|> Protocol
DBAPICursor --|> Protocol
ReflectedCheckConstraint --|> ReflectedConstraint
ReflectedUniqueConstraint --|> ReflectedConstraint
ReflectedPrimaryKeyConstraint --|> ReflectedConstraint
ReflectedForeignKeyConstraint --|> ReflectedConstraint
BindTyping --|> Enum
Dialect --|> EventTarget
ConnectionEventsTarget --|> EventTarget
ObjectKind --|> Flag
ObjectScope --|> Flag
SimpleResultMetaData --|> ResultMetaData
ResultInternal --|> InPlaceGenerative
Row --|> BaseRow
ROMappingKeysValuesView --|> ROMappingView
ROMappingItemsView --|> ROMappingView
RowMapping --|> BaseRow
AssociationProxyExtensionType --|> InspectionAttrExtensionType
PythonNameForTableType --|> Protocol
NameForScalarRelationshipType --|> Protocol
NameForCollectionRelationshipType --|> Protocol
GenerateRelationshipType --|> Protocol
ShardChooser --|> Protocol
IdentityChooser --|> Protocol
ShardedSession --|> Session
set_shard_id --|> ORMOption
HybridExtensionType --|> InspectionAttrExtensionType
index_property --|> hybrid_property
ExtendedInstrumentationRegistry --|> InstrumentationFactory
Mutable --|> MutableBase
MutableComposite --|> MutableBase
MutableDict --|> Mutable
MutableList --|> Mutable
MutableSet --|> Mutable
AsyncConnection --|> AsyncConnectable
AsyncEngine --|> AsyncConnectable
AbstractConcreteBase --|> ConcreteBase
QueryableAttribute --|> EventTarget
AdHocHasEntityNamespace --|> HasCacheKey
ScalarAttributeImpl --|> AttributeImpl
ScalarObjectAttributeImpl --|> ScalarAttributeImpl
CollectionAttributeImpl --|> HasCollectionAdapter
CollectionAttributeImpl --|> AttributeImpl
LoaderCallableStatus --|> Enum
EventConstants --|> Enum
RelationshipDirection --|> Enum
InspectionAttrExtensionType --|> Enum
NotExtension --|> InspectionAttrExtensionType
InspectionAttrInfo --|> InspectionAttr
SQLORMOperations --|> TypingOnly
ORMDescriptor --|> TypingOnly
SQLORMExpression --|> TypingOnly
ORMDMLState --|> AbstractORMCompileState
BulkUDCompileState --|> ORMDMLState
default_update_options --|> Options
BulkORMInsert --|> ORMDMLState
BulkORMInsert --|> InsertDMLState
default_insert_options --|> Options
BulkORMUpdate --|> BulkUDCompileState
BulkORMUpdate --|> UpdateDMLState
BulkORMDelete --|> BulkUDCompileState
BulkORMDelete --|> DeleteDMLState
default_load_options --|> Options
AbstractORMCompileState --|> CompileState
AutoflushOnlyORMCompileState --|> AbstractORMCompileState
ORMCompileState --|> AbstractORMCompileState
default_compile_options --|> CacheableOptions
ORMFromStatementCompileState --|> ORMCompileState
FromStatement --|> GroupedElement
FromStatement --|> Generative
CompoundSelectCompileState --|> AutoflushOnlyORMCompileState
CompoundSelectCompileState --|> CompoundSelectState
ORMSelectCompileState --|> ORMCompileState
ORMSelectCompileState --|> SelectState
DCTransformDeclarative --|> DeclarativeAttributeIntercept
DeclarativeMeta --|> DeclarativeAttributeIntercept
OneToManyDP --|> DependencyProcessor
ManyToOneDP --|> DependencyProcessor
DetectKeySwitch --|> DependencyProcessor
ManyToManyDP --|> DependencyProcessor
DynamicAttributeImpl --|> WriteOnlyAttributeImpl
DynaLoader --|> WriteOnlyLoader
UnmappedInstanceError --|> UnmappedError
UnmappedClassError --|> UnmappedError
WeakInstanceDict --|> IdentityMap
ClassManager --|> HasMemoized
ClassManager --|> EventTarget
InstrumentationFactory --|> EventTarget
MapperProperty --|> HasCacheKey
MapperProperty --|> InspectionAttrInfo
PropComparator --|> ColumnOperators
ORMOption --|> ExecutableOption
CompileStateOption --|> HasCacheKey
CompileStateOption --|> ORMOption
LoaderOption --|> CompileStateOption
CriteriaOption --|> CompileStateOption
UserDefinedOption --|> ORMOption
MapperOption --|> ORMOption
Mapper --|> ORMFromClauseRole
Mapper --|> MemoizedHasCacheKey
Mapper --|> InspectionAttr
Mapper --|> EventTarget
PathRegistry --|> HasCacheKey
CreatesToken --|> PathRegistry
RootRegistry --|> CreatesToken
PathToken --|> HasCacheKey
TokenRegistry --|> PathRegistry
PropRegistry --|> PathRegistry
AbstractEntityRegistry --|> CreatesToken
SlotsEntityRegistry --|> AbstractEntityRegistry
CachingEntityRegistry --|> AbstractEntityRegistry
Query --|> SupportsCloneAnnotations
Query --|> HasPrefixes
Query --|> HasSuffixes
Query --|> HasHints
Query --|> EventTarget
Query --|> Generative
Query --|> Executable
BulkUpdate --|> BulkUD
BulkDelete --|> BulkUD
QueryPropertyDescriptor --|> Protocol
SessionTransactionOrigin --|> Enum
SessionTransaction --|> TransactionalContext
Session --|> EventTarget
UninstrumentedColumnLoader --|> LoaderStrategy
ColumnLoader --|> LoaderStrategy
ExpressionColumnLoader --|> ColumnLoader
DeferredColumnLoader --|> LoaderStrategy
AbstractRelationshipLoader --|> LoaderStrategy
DoNothingLoader --|> LoaderStrategy
NoLoader --|> AbstractRelationshipLoader
LazyLoader --|> AbstractRelationshipLoader
PostLoader --|> AbstractRelationshipLoader
ImmediateLoader --|> PostLoader
SubqueryLoader --|> PostLoader
JoinedLoader --|> AbstractRelationshipLoader
SelectInLoader --|> PostLoader
Preprocess --|> IterateMappersMixin
ProcessAll --|> IterateMappersMixin
ProcessAll --|> PostSortRec
PostUpdateAll --|> PostSortRec
SaveUpdateAll --|> PostSortRec
DeleteAll --|> PostSortRec
ProcessState --|> PostSortRec
SaveUpdateState --|> PostSortRec
DeleteState --|> PostSortRec
AliasedInsp --|> ORMFromClauseRole
AliasedInsp --|> HasCacheKey
AliasedInsp --|> InspectionAttr
AliasedInsp --|> MemoizedSlots
LoaderCriteriaOption --|> CriteriaOption
Bundle --|> SupportsCloneAnnotations
Bundle --|> MemoizedHasCacheKey
Bundle --|> InspectionAttr
ResetStyle --|> Enum
ConnectionPoolEntry --|> ManagesConnection
PoolProxiedConnection --|> ManagesConnection
QueuePool --|> Pool
AsyncAdaptedQueuePool --|> QueuePool
FallbackAsyncAdaptedQueuePool --|> AsyncAdaptedQueuePool
NullPool --|> Pool
SingletonThreadPool --|> Pool
StaticPool --|> Pool
AssertionPool --|> Pool
SupportsAnnotations --|> ExternallyTraversible
SupportsWrappingAnnotations --|> SupportsAnnotations
SupportsCloneAnnotations --|> SupportsWrappingAnnotations
Annotated --|> SupportsAnnotations
SingletonConstant --|> Immutable
Generative --|> HasMemoized
InPlaceGenerative --|> HasMemoized
HasCompileState --|> Generative
CacheableOptions --|> Options
CacheableOptions --|> HasCacheKey
ExecutableOption --|> HasCopyInternals
HasCacheKeyTraverse --|> HasTraverseInternals
HasCacheKeyTraverse --|> HasCacheKey
MemoizedHasCacheKey --|> HasCacheKey
MemoizedHasCacheKey --|> HasMemoized
SlotsMemoizedHasCacheKey --|> HasCacheKey
LiteralValueImpl --|> RoleImpl
HasCacheKeyImpl --|> RoleImpl
ExecutableOptionImpl --|> RoleImpl
ExpressionElementImpl --|> RoleImpl
BinaryElementImpl --|> ExpressionElementImpl
BinaryElementImpl --|> RoleImpl
InElementImpl --|> RoleImpl
OnClauseImpl --|> RoleImpl
WhereHavingImpl --|> RoleImpl
StatementOptionImpl --|> RoleImpl
ColumnArgumentImpl --|> RoleImpl
ColumnArgumentOrKeyImpl --|> RoleImpl
StrAsPlainColumnImpl --|> RoleImpl
ByOfImpl --|> RoleImpl
OrderByImpl --|> ByOfImpl
OrderByImpl --|> RoleImpl
GroupByImpl --|> ByOfImpl
GroupByImpl --|> RoleImpl
DMLColumnImpl --|> RoleImpl
ConstExprImpl --|> RoleImpl
TruncatedLabelImpl --|> RoleImpl
DDLExpressionImpl --|> RoleImpl
DDLConstraintColumnImpl --|> RoleImpl
DDLReferredColumnImpl --|> DDLConstraintColumnImpl
LimitOffsetImpl --|> RoleImpl
LabeledColumnExprImpl --|> ExpressionElementImpl
ColumnsClauseImpl --|> RoleImpl
ReturnsRowsImpl --|> RoleImpl
StatementImpl --|> RoleImpl
SelectStatementImpl --|> RoleImpl
HasCTEImpl --|> ReturnsRowsImpl
IsCTEImpl --|> RoleImpl
JoinTargetImpl --|> RoleImpl
FromClauseImpl --|> RoleImpl
StrictFromClauseImpl --|> FromClauseImpl
AnonymizedFromClauseImpl --|> StrictFromClauseImpl
DMLTableImpl --|> RoleImpl
DMLSelectImpl --|> RoleImpl
CompoundElementImpl --|> RoleImpl
CompilerState --|> IntEnum
Linting --|> IntEnum
SQLCompiler --|> Compiled
StrSQLCompiler --|> SQLCompiler
DDLCompiler --|> Compiled
GenericTypeCompiler --|> TypeCompiler
StrSQLTypeCompiler --|> GenericTypeCompiler
BaseDDLElement --|> ClauseElement
DDLIfCallable --|> Protocol
ExecutableDDLElement --|> Executable
ExecutableDDLElement --|> BaseDDLElement
DDL --|> ExecutableDDLElement
CreateConstraint --|> BaseDDLElement
CreateColumn --|> BaseDDLElement
InvokeDDLBase --|> SchemaVisitor
InvokeCreateDDLBase --|> InvokeDDLBase
InvokeDropDDLBase --|> InvokeDDLBase
SchemaGenerator --|> InvokeCreateDDLBase
SchemaDropper --|> InvokeDropDDLBase
DMLState --|> CompileState
InsertDMLState --|> DMLState
UpdateDMLState --|> DMLState
DeleteDMLState --|> DMLState
UpdateBase --|> HasCTE
UpdateBase --|> HasCompileState
UpdateBase --|> DialectKWArgs
UpdateBase --|> HasPrefixes
UpdateBase --|> Generative
UpdateBase --|> ExecutableReturnsRows
UpdateBase --|> ClauseElement
ValuesBase --|> UpdateBase
Insert --|> ValuesBase
ReturningInsert --|> Insert
Update --|> DMLWhereBase
Update --|> ValuesBase
ReturningUpdate --|> Update
Delete --|> DMLWhereBase
Delete --|> UpdateBase
ReturningDelete --|> Update
CompilerElement --|> Visitable
ClauseElement --|> SupportsWrappingAnnotations
ClauseElement --|> MemoizedHasCacheKey
ClauseElement --|> HasCopyInternals
ClauseElement --|> ExternallyTraversible
ClauseElement --|> CompilerElement
DQLDMLClauseElement --|> ClauseElement
CompilerColumnElement --|> CompilerElement
SQLCoreOperations --|> ColumnOperators
SQLCoreOperations --|> TypingOnly
SQLColumnExpression --|> TypingOnly
ColumnElement --|> DQLDMLClauseElement
TypeClause --|> DQLDMLClauseElement
TextClause --|> Generative
TextClause --|> Executable
TextClause --|> DQLDMLClauseElement
Null --|> SingletonConstant
False_ --|> SingletonConstant
True_ --|> SingletonConstant
ClauseList --|> DQLDMLClauseElement
Tuple --|> ClauseList
GroupedElement --|> DQLDMLClauseElement
Grouping --|> GroupedElement
FunctionFilter --|> Generative
ColumnClause --|> Immutable
AnnotatedColumnElement --|> Annotated
FunctionElement --|> Executable
FunctionElement --|> FromClause
FunctionElement --|> Generative
LambdaOptions --|> Options
DeferredLambdaElement --|> LambdaElement
StatementLambdaElement --|> LambdaElement
StatementLambdaElement --|> Executable
LinkedLambdaElement --|> StatementLambdaElement
PyWrapper --|> ColumnOperators
OperatorType --|> Protocol
custom_op --|> OperatorType
ColumnOperators --|> Operators
HasCacheKeyRole --|> SQLRole
ExecutableOptionRole --|> SQLRole
LiteralValueRole --|> SQLRole
ColumnArgumentRole --|> SQLRole
ColumnArgumentOrKeyRole --|> ColumnArgumentRole
StrAsPlainColumnRole --|> ColumnArgumentRole
ColumnListRole --|> SQLRole
StringRole --|> SQLRole
TruncatedLabelRole --|> StringRole
TruncatedLabelRole --|> SQLRole
ColumnsClauseRole --|> AllowsLambdaRole
ColumnsClauseRole --|> UsesInspection
ColumnsClauseRole --|> ColumnListRole
TypedColumnsClauseRole --|> SQLRole
LimitOffsetRole --|> SQLRole
ByOfRole --|> ColumnListRole
GroupByRole --|> AllowsLambdaRole
GroupByRole --|> UsesInspection
GroupByRole --|> ByOfRole
OrderByRole --|> AllowsLambdaRole
OrderByRole --|> ByOfRole
StructuralRole --|> SQLRole
StatementOptionRole --|> StructuralRole
OnClauseRole --|> AllowsLambdaRole
OnClauseRole --|> StructuralRole
WhereHavingRole --|> OnClauseRole
InElementRole --|> SQLRole
JoinTargetRole --|> AllowsLambdaRole
JoinTargetRole --|> UsesInspection
JoinTargetRole --|> StructuralRole
FromClauseRole --|> ColumnsClauseRole
FromClauseRole --|> JoinTargetRole
StrictFromClauseRole --|> FromClauseRole
AnonymizedFromClauseRole --|> StrictFromClauseRole
ReturnsRowsRole --|> SQLRole
StatementRole --|> SQLRole
SelectStatementRole --|> StatementRole
SelectStatementRole --|> ReturnsRowsRole
HasCTERole --|> ReturnsRowsRole
IsCTERole --|> SQLRole
CompoundElementRole --|> AllowsLambdaRole
CompoundElementRole --|> SQLRole
DMLRole --|> StatementRole
DMLTableRole --|> FromClauseRole
DMLColumnRole --|> SQLRole
DMLSelectRole --|> SQLRole
DDLRole --|> StatementRole
DDLExpressionRole --|> StructuralRole
DDLConstraintColumnRole --|> SQLRole
DDLReferredColumnRole --|> DDLConstraintColumnRole
SchemaConst --|> Enum
SchemaItem --|> SchemaEventTarget
HasSchemaAttr --|> SchemaItem
Table --|> DialectKWArgs
Table --|> HasSchemaAttr
Table --|> TableClause
Column --|> DialectKWArgs
Column --|> SchemaItem
ForeignKey --|> DialectKWArgs
ForeignKey --|> SchemaItem
DefaultGenerator --|> Executable
DefaultGenerator --|> SchemaItem
ColumnDefault --|> DefaultGenerator
ScalarElementColumnDefault --|> ColumnDefault
ColumnElementColumnDefault --|> ColumnDefault
CallableColumnDefault --|> ColumnDefault
Sequence --|> HasSchemaAttr
Sequence --|> IdentityOptions
Sequence --|> DefaultGenerator
FetchedValue --|> SchemaEventTarget
DefaultClause --|> FetchedValue
Constraint --|> DialectKWArgs
Constraint --|> HasConditionalDDL
Constraint --|> SchemaItem
ColumnCollectionConstraint --|> ColumnCollectionMixin
ColumnCollectionConstraint --|> Constraint
CheckConstraint --|> ColumnCollectionConstraint
ForeignKeyConstraint --|> ColumnCollectionConstraint
PrimaryKeyConstraint --|> ColumnCollectionConstraint
UniqueConstraint --|> ColumnCollectionConstraint
Index --|> DialectKWArgs
Index --|> ColumnCollectionMixin
Index --|> HasConditionalDDL
Index --|> SchemaItem
MetaData --|> HasSchemaAttr
Computed --|> FetchedValue
Computed --|> SchemaItem
Identity --|> IdentityOptions
Identity --|> FetchedValue
Identity --|> SchemaItem
ReturnsRows --|> DQLDMLClauseElement
ExecutableReturnsRows --|> Executable
ExecutableReturnsRows --|> ReturnsRows
TypedReturnsRows --|> ExecutableReturnsRows
Selectable --|> ReturnsRows
FromClause --|> Selectable
NamedFromClause --|> FromClause
SelectLabelStyle --|> Enum
Join --|> FromClause
LateralFromClause --|> NamedFromClause
AliasedReturnsRows --|> NoInit
AliasedReturnsRows --|> NamedFromClause
FromClauseAlias --|> AliasedReturnsRows
Alias --|> FromClauseAlias
TableValuedAlias --|> LateralFromClause
TableValuedAlias --|> Alias
Lateral --|> FromClauseAlias
Lateral --|> LateralFromClause
TableSample --|> FromClauseAlias
CTE --|> Generative
CTE --|> HasPrefixes
CTE --|> HasSuffixes
CTE --|> AliasedReturnsRows
SelectsRows --|> ReturnsRows
HasCTE --|> SelectsRows
Subquery --|> AliasedReturnsRows
FromGrouping --|> GroupedElement
FromGrouping --|> FromClause
NamedFromGrouping --|> FromGrouping
NamedFromGrouping --|> NamedFromClause
TableClause --|> Immutable
TableClause --|> NamedFromClause
ForUpdateArg --|> ClauseElement
Values --|> Generative
Values --|> LateralFromClause
ScalarValues --|> GroupedElement
SelectBase --|> HasCTE
SelectBase --|> SupportsCloneAnnotations
SelectBase --|> Selectable
SelectStatementGrouping --|> GroupedElement
SelectStatementGrouping --|> SelectBase
GenerativeSelect --|> SelectBase
GenerativeSelect --|> Generative
CompoundSelectState --|> CompileState
CompoundSelect --|> HasCompileState
CompoundSelect --|> GenerativeSelect
SelectState --|> CompileState
default_select_compile_options --|> CacheableOptions
Select --|> HasPrefixes
Select --|> HasSuffixes
Select --|> HasHints
Select --|> HasCompileState
Select --|> GenerativeSelect
ScalarSelect --|> Generative
ScalarSelect --|> GroupedElement
TextualSelect --|> SelectBase
TextualSelect --|> ExecutableReturnsRows
TextualSelect --|> Generative
AnnotatedFromClause --|> Annotated
HasExpressionLookup --|> TypeEngineMixin
Concatenable --|> TypeEngineMixin
Indexable --|> TypeEngineMixin
String --|> Concatenable
Text --|> String
Unicode --|> String
UnicodeText --|> Text
Integer --|> HasExpressionLookup
SmallInteger --|> Integer
BigInteger --|> Integer
Numeric --|> HasExpressionLookup
DateTime --|> HasExpressionLookup
Date --|> HasExpressionLookup
Time --|> HasExpressionLookup
SchemaType --|> SchemaEventTarget
SchemaType --|> TypeEngineMixin
Enum --|> String
Enum --|> SchemaType
Enum --|> Emulated
Boolean --|> SchemaType
Boolean --|> Emulated
Interval --|> Emulated
JSON --|> Indexable
JSONIndexType --|> JSONElementType
JSONIntIndexType --|> JSONIndexType
JSONStrIndexType --|> JSONIndexType
JSONPathType --|> JSONElementType
ARRAY --|> SchemaEventTarget
ARRAY --|> Indexable
ARRAY --|> Concatenable
INTEGER --|> Integer
SMALLINT --|> SmallInteger
BIGINT --|> BigInteger
TIMESTAMP --|> DateTime
DATETIME --|> DateTime
DATE --|> Date
TIME --|> Time
TEXT --|> Text
CLOB --|> Text
VARCHAR --|> String
NVARCHAR --|> Unicode
CHAR --|> String
NCHAR --|> Unicode
BLOB --|> LargeBinary
BOOLEAN --|> Boolean
TableValueType --|> HasCacheKey
MatchType --|> Boolean
Uuid --|> Emulated
HasShallowCopy --|> HasTraverseInternals
GenerativeOnTraversal --|> HasShallowCopy
HasCopyInternals --|> HasTraverseInternals
TraversalComparatorStrategy --|> HasTraversalDispatch
ColIdentityComparatorStrategy --|> TraversalComparatorStrategy
TypeEngine --|> Visitable
Comparator --|> ColumnOperators
ExternalType --|> TypeEngineMixin
UserDefinedType --|> ExternalType
UserDefinedType --|> TypeEngineMixin
Emulated --|> TypeEngineMixin
NativeForEmulated --|> TypeEngineMixin
TypeDecorator --|> SchemaEventTarget
TypeDecorator --|> ExternalType
ColumnAdapter --|> ClauseAdapter
InternalTraversal --|> Enum
ExternallyTraversible --|> HasTraverseInternals
ExternallyTraversible --|> Visitable
CloningExternalTraversal --|> ExternalTraversal
ReplacingExternalTraversal --|> CloningExternalTraversal
SQLMatchRule --|> AssertRule
CursorSQL --|> SQLMatchRule
CompiledSQL --|> SQLMatchRule
RegexSQL --|> CompiledSQL
DialectSQL --|> CompiledSQL
CountStatements --|> AssertRule
AllOf --|> AssertRule
EachOf --|> AssertRule
Conditional --|> EachOf
Or --|> AllOf
ComparableEntity --|> ComparableMixin
ComparableEntity --|> BasicEntity
BooleanPredicate --|> Predicate
SpecPredicate --|> Predicate
LambdaPredicate --|> Predicate
NotPredicate --|> Predicate
OrPredicate --|> Predicate
User --|> ComparableEntity
Order --|> ComparableEntity
Dingaling --|> ComparableEntity
EmailUser --|> User
Address --|> ComparableEntity
Child1 --|> ComparableEntity
Child2 --|> ComparableEntity
Parent --|> ComparableEntity
AddressWMixin --|> Mixin
AddressWMixin --|> ComparableEntity
SuiteRequirements --|> Requirements
MypyTest --|> TestBase
ORMTest --|> TestBase
MappedTest --|> ORMTest
MappedTest --|> TablesTest
DeclarativeMappedTest --|> MappedTest
TablesTest --|> TestBase
ComputedReflectionFixtureTest --|> TablesTest
FutureTableDDLTest --|> TableDDLTest
FutureWeCanSetDefaultSchemaWEventsTest --|> WeCanSetDefaultSchemaWEventsTest
HasTableTest --|> OneConnectionTablesTest
ComponentReflectionTest --|> ComparesTables
ComponentReflectionTest --|> OneConnectionTablesTest
ComponentReflectionTestExtra --|> ComparesIndexes
PostCompileParamsTest --|> AssertsExecutionResults
PostCompileParamsTest --|> AssertsCompiledSQL
DistinctOnTest --|> AssertsCompiledSQL
PrecisionIntervalTest --|> IntervalTest
NativeUUIDTest --|> UuidTest
ArgsTypeProtocol --|> Protocol
DescriptorProto --|> Protocol
ReadOnlyProperties --|> ReadOnlyContainer
OrderedIdentitySet --|> IdentitySet
greenlet --|> Protocol
ImmutableDictBase --|> ReadOnlyContainer
RelationshipInfo --|> Representation
SQLModelMetaclass --|> ModelMetaclass
SQLModelMetaclass --|> DeclarativeMeta
SQLModel --|> BaseModel
SQLModelConfig --|> BaseConfig
SQLModelConfig --|> BaseConfig
SimpleUser --|> BaseUser
UnauthenticatedUser --|> BaseUser
BackgroundTasks --|> BackgroundTask
MutableHeaders --|> Headers
FormMessage --|> Enum
Request --|> HTTPConnection
HTMLResponse --|> Response
PlainTextResponse --|> Response
JSONResponse --|> Response
RedirectResponse --|> Response
StreamingResponse --|> Response
FileResponse --|> Response
Match --|> Enum
Route --|> BaseRoute
WebSocketRoute --|> BaseRoute
Mount --|> BaseRoute
Host --|> BaseRoute
OpenAPIResponse --|> Response
SchemaGenerator --|> BaseSchemaGenerator
NotModifiedResponse --|> Response
WebSocketDenialResponse --|> WebSocketDisconnect
WebSocket --|> HTTPConnection
GZipResponder --|> IdentityResponder
retry_if_exception --|> retry_base
retry_if_exception_type --|> retry_if_exception
retry_if_not_exception_type --|> retry_if_exception
retry_unless_exception_type --|> retry_if_exception
retry_if_exception_cause_type --|> retry_base
retry_if_result --|> retry_base
retry_if_not_result --|> retry_base
retry_if_exception_message --|> retry_if_exception
retry_if_not_exception_message --|> retry_if_exception_message
retry_any --|> retry_base
retry_all --|> retry_base
stop_any --|> stop_base
stop_all --|> stop_base
stop_when_event_set --|> stop_base
stop_after_attempt --|> stop_base
stop_after_delay --|> stop_base
stop_before_delay --|> stop_base
TornadoRetrying --|> BaseRetrying
wait_fixed --|> wait_base
wait_none --|> wait_fixed
wait_random --|> wait_base
wait_combine --|> wait_base
wait_chain --|> wait_base
wait_incrementing --|> wait_base
wait_exponential --|> wait_base
wait_random_exponential --|> wait_exponential
wait_exponential_jitter --|> wait_base
RetryAction --|> BaseAction
Retrying --|> BaseRetrying
async_retry_base --|> retry_base
retry_if_exception --|> async_retry_base
retry_if_result --|> async_retry_base
retry_any --|> async_retry_base
retry_all --|> async_retry_base
AsyncRetrying --|> BaseRetrying
FileTextWrite --|> FileText
OptionInfo --|> ParameterInfo
ArgumentInfo --|> ParameterInfo
OptionHighlighter --|> RegexHighlighter
NegativeOptionHighlighter --|> RegexHighlighter
Shells --|> Enum
HTTPSConnection --|> HTTPConnection
HTTPConnectionPool --|> ConnectionPool
HTTPConnectionPool --|> RequestMethods
HTTPSConnectionPool --|> HTTPConnectionPool
HTTPWarning --|> Warning
PoolError --|> HTTPError
RequestError --|> PoolError
SSLError --|> HTTPError
ProxyError --|> HTTPError
DecodeError --|> HTTPError
ProtocolError --|> HTTPError
MaxRetryError --|> RequestError
HostChangedError --|> RequestError
TimeoutStateError --|> HTTPError
TimeoutError --|> HTTPError
ReadTimeoutError --|> TimeoutError
ReadTimeoutError --|> RequestError
ConnectTimeoutError --|> TimeoutError
NewConnectionError --|> ConnectTimeoutError
NewConnectionError --|> HTTPError
NameResolutionError --|> NewConnectionError
EmptyPoolError --|> PoolError
FullPoolError --|> PoolError
ClosedPoolError --|> PoolError
LocationValueError --|> HTTPError
LocationParseError --|> LocationValueError
URLSchemeUnknown --|> LocationValueError
ResponseError --|> HTTPError
SecurityWarning --|> HTTPWarning
InsecureRequestWarning --|> SecurityWarning
NotOpenSSLWarning --|> SecurityWarning
SystemTimeWarning --|> SecurityWarning
InsecurePlatformWarning --|> SecurityWarning
DependencyWarning --|> HTTPWarning
ResponseNotChunked --|> ProtocolError
BodyNotHttplibCompatible --|> HTTPError
IncompleteRead --|> HTTPError
InvalidChunkLength --|> HTTPError
InvalidHeader --|> HTTPError
ProxySchemeUnknown --|> URLSchemeUnknown
HeaderParsingError --|> HTTPError
UnrewindableBodyError --|> HTTPError
PoolManager --|> RequestMethods
ProxyManager --|> PoolManager
DeflateDecoder --|> ContentDecoder
GzipDecoder --|> ContentDecoder
BrotliDecoder --|> ContentDecoder
ZstdDecoder --|> ContentDecoder
MultiDecoder --|> ContentDecoder
HTTPResponse --|> BaseHTTPResponse
BaseHTTPConnection --|> Protocol
BaseHTTPSConnection --|> BaseHTTPConnection
BaseHTTPSConnection --|> Protocol
HasGettableStringKeys --|> Protocol
SOCKSConnection --|> HTTPConnection
SOCKSHTTPSConnection --|> SOCKSConnection
SOCKSHTTPSConnection --|> HTTPSConnection
SOCKSHTTPConnectionPool --|> HTTPConnectionPool
SOCKSHTTPSConnectionPool --|> HTTPSConnectionPool
SOCKSProxyManager --|> PoolManager
EmscriptenHTTPSConnection --|> EmscriptenHTTPConnection
EmscriptenHttpResponseWrapper --|> BaseHTTPResponse
HTTP2Connection --|> HTTPSConnection
HTTP2Response --|> BaseHTTPResponse
DefaultFormatter --|> ColourizedFormatter
AccessFormatter --|> ColourizedFormatter
UvicornWorker --|> Worker
UvicornH11Worker --|> UvicornWorker
ASGI2Protocol --|> Protocol
WebSocketProtocol --|> WebSocketServerProtocol
StatReload --|> BaseReload
WatchFilesReload --|> BaseReload
DefaultFilter --|> BaseFilter
PythonFilter --|> DefaultFilter
Change --|> IntEnum
AbstractEvent --|> Protocol
ClientProtocol --|> Protocol
ClientConnection --|> ClientProtocol
SupportsKeysAndGetItem --|> Protocol
ConnectionClosed --|> WebSocketException
ConnectionClosedOK --|> ConnectionClosed
ConnectionClosedError --|> ConnectionClosed
InvalidURI --|> WebSocketException
InvalidProxy --|> WebSocketException
InvalidHandshake --|> WebSocketException
SecurityError --|> InvalidHandshake
ProxyError --|> InvalidHandshake
InvalidProxyMessage --|> ProxyError
InvalidProxyStatus --|> ProxyError
InvalidMessage --|> InvalidHandshake
InvalidStatus --|> InvalidHandshake
InvalidHeader --|> InvalidHandshake
InvalidHeaderFormat --|> InvalidHeader
InvalidHeaderValue --|> InvalidHeader
InvalidOrigin --|> InvalidHeader
InvalidUpgrade --|> InvalidHeader
NegotiationError --|> InvalidHandshake
DuplicateParameter --|> NegotiationError
InvalidParameterName --|> NegotiationError
InvalidParameterValue --|> NegotiationError
ProtocolError --|> WebSocketException
PayloadTooBig --|> WebSocketException
InvalidState --|> WebSocketException
ConcurrencyError --|> WebSocketException
ServerProtocol --|> Protocol
ServerConnection --|> ServerProtocol
ClientConnection --|> Connection
ServerConnection --|> Connection
PerMessageDeflate --|> Extension
ClientPerMessageDeflateFactory --|> ClientExtensionFactory
ServerPerMessageDeflateFactory --|> ServerExtensionFactory
BasicAuthWebSocketServerProtocol --|> WebSocketServerProtocol
WebSocketClientProtocol --|> WebSocketCommonProtocol
InvalidStatusCode --|> InvalidHandshake
AbortHandshake --|> InvalidHandshake
RedirectHandshake --|> InvalidHandshake
WebSocketServerProtocol --|> WebSocketCommonProtocol
ClientConnection --|> Connection
ServerConnection --|> Connection
ComposerError --|> MarkedYAMLError
ConstructorError --|> MarkedYAMLError
SafeConstructor --|> BaseConstructor
FullConstructor --|> SafeConstructor
UnsafeConstructor --|> FullConstructor
Constructor --|> UnsafeConstructor
CBaseLoader --|> BaseConstructor
CBaseLoader --|> BaseResolver
CSafeLoader --|> SafeConstructor
CSafeLoader --|> Resolver
CFullLoader --|> FullConstructor
CFullLoader --|> Resolver
CUnsafeLoader --|> UnsafeConstructor
CUnsafeLoader --|> Resolver
CLoader --|> Constructor
CLoader --|> Resolver
CBaseDumper --|> BaseRepresenter
CBaseDumper --|> BaseResolver
CSafeDumper --|> SafeRepresenter
CSafeDumper --|> Resolver
CDumper --|> Serializer
CDumper --|> Representer
CDumper --|> Resolver
BaseDumper --|> Emitter
BaseDumper --|> Serializer
BaseDumper --|> BaseRepresenter
BaseDumper --|> BaseResolver
SafeDumper --|> Emitter
SafeDumper --|> Serializer
SafeDumper --|> SafeRepresenter
SafeDumper --|> Resolver
Dumper --|> Emitter
Dumper --|> Serializer
Dumper --|> Representer
Dumper --|> Resolver
EmitterError --|> YAMLError
MarkedYAMLError --|> YAMLError
NodeEvent --|> Event
CollectionStartEvent --|> NodeEvent
CollectionEndEvent --|> Event
StreamStartEvent --|> Event
StreamEndEvent --|> Event
DocumentStartEvent --|> Event
DocumentEndEvent --|> Event
AliasEvent --|> NodeEvent
ScalarEvent --|> NodeEvent
SequenceStartEvent --|> CollectionStartEvent
SequenceEndEvent --|> CollectionEndEvent
MappingStartEvent --|> CollectionStartEvent
MappingEndEvent --|> CollectionEndEvent
BaseLoader --|> Reader
BaseLoader --|> Scanner
BaseLoader --|> Parser
BaseLoader --|> Composer
BaseLoader --|> BaseConstructor
BaseLoader --|> BaseResolver
FullLoader --|> Reader
FullLoader --|> Scanner
FullLoader --|> Parser
FullLoader --|> Composer
FullLoader --|> FullConstructor
FullLoader --|> Resolver
SafeLoader --|> Reader
SafeLoader --|> Scanner
SafeLoader --|> Parser
SafeLoader --|> Composer
SafeLoader --|> SafeConstructor
SafeLoader --|> Resolver
Loader --|> Reader
Loader --|> Scanner
Loader --|> Parser
Loader --|> Composer
Loader --|> Constructor
Loader --|> Resolver
UnsafeLoader --|> Reader
UnsafeLoader --|> Scanner
UnsafeLoader --|> Parser
UnsafeLoader --|> Composer
UnsafeLoader --|> Constructor
UnsafeLoader --|> Resolver
ScalarNode --|> Node
CollectionNode --|> Node
SequenceNode --|> CollectionNode
MappingNode --|> CollectionNode
ParserError --|> MarkedYAMLError
ReaderError --|> YAMLError
RepresenterError --|> YAMLError
SafeRepresenter --|> BaseRepresenter
Representer --|> SafeRepresenter
ResolverError --|> YAMLError
Resolver --|> BaseResolver
ScannerError --|> MarkedYAMLError
SerializerError --|> YAMLError
DirectiveToken --|> Token
DocumentStartToken --|> Token
DocumentEndToken --|> Token
StreamStartToken --|> Token
StreamEndToken --|> Token
BlockSequenceStartToken --|> Token
BlockMappingStartToken --|> Token
BlockEndToken --|> Token
FlowSequenceStartToken --|> Token
FlowMappingStartToken --|> Token
FlowSequenceEndToken --|> Token
FlowMappingEndToken --|> Token
KeyToken --|> Token
ValueToken --|> Token
BlockEntryToken --|> Token
FlowEntryToken --|> Token
AliasToken --|> Token
AnchorToken --|> Token
TagToken --|> Token
ScalarToken --|> Token
DefaultDiagramFactory --|> DiagramFactory
ConfigurationError --|> UMLGeneratorError
ParserError --|> UMLGeneratorError
GeneratorError --|> UMLGeneratorError
FileSystemError --|> UMLGeneratorError
DiagramTypeError --|> UMLGeneratorError
DefaultFileSystem --|> FileSystem
BaseDiagramModel --|> DiagramModel
BaseDiagramAnalyzer --|> DiagramAnalyzer
BaseDiagramGenerator --|> DiagramGenerator
ActivityAnalyzer --|> BaseDiagramAnalyzer
ActivityDiagramGenerator --|> BaseDiagramGenerator
ActivityDiagram --|> BaseDiagramModel
ActivityModel --|> ActivityNodeModel
StartNodeModel --|> ActivityNodeModel
EndNodeModel --|> ActivityNodeModel
DecisionNodeModel --|> ActivityNodeModel
MergeNodeModel --|> ActivityNodeModel
ForkNodeModel --|> ActivityNodeModel
JoinNodeModel --|> ActivityNodeModel
ClassAnalyzer --|> BaseDiagramAnalyzer
ClassDiagramGenerator --|> BaseDiagramGenerator
Visibility --|> Enum
ClassDiagram --|> BaseDiagramModel
SequenceAnalyzer --|> BaseDiagramAnalyzer
SequenceDiagramGenerator --|> BaseDiagramGenerator
ParticipantType --|> Enum
MessageType --|> Enum
SequenceDiagram --|> BaseDiagramModel
StateAnalyzer --|> BaseDiagramAnalyzer
StateDiagramGenerator --|> BaseDiagramGenerator
StateDiagram --|> BaseDiagramModel
CompositeStateModel --|> StateModel

@enduml