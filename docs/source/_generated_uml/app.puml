@startuml
skinparam classAttributeIconSize 0
class UserBase {
    + email: EmailStr
    + is_active: bool
    + is_superuser: bool
    + full_name: str | None
}
class UserCreate {
    + password: str
}
class UserRegister {
    + email: EmailStr
    + password: str
    + full_name: str | None
}
class UserUpdate {
    + email: EmailStr | None
    + password: str | None
}
class UserUpdateMe {
    + full_name: str | None
    + email: EmailStr | None
}
class UpdatePassword {
    + current_password: str
    + new_password: str
}
class User {
    + id: uuid.UUID
    + hashed_password: str
    + items: list['Item']
}
class UserPublic {
    + id: uuid.UUID
}
class UsersPublic {
    + data: list[UserPublic]
    + count: int
}
class ItemBase {
    + title: str
    + description: str | None
}
class ItemCreate {
}
class ItemUpdate {
    + title: str | None
}
class Item {
    + id: uuid.UUID
    + title: str
    + owner_id: uuid.UUID
    + owner: User | None
}
class ItemPublic {
    + id: uuid.UUID
    + owner_id: uuid.UUID
}
class ItemsPublic {
    + data: list[ItemPublic]
    + count: int
}
class Message {
    + message: str
}
class Token {
    + access_token: str
    + token_type: str
}
class TokenPayload {
    + sub: str | None
}
class NewPassword {
    + token: str
    + new_password: str
}
class EmailData {
    + html_content: str
    + subject: str
}
class PrivateUserCreate {
    + email: str
    + password: str
    + full_name: str
    + is_verified: bool
}
class Settings {
    + model_config: Any
    + API_V1_STR: str
    + SECRET_KEY: str
    + ACCESS_TOKEN_EXPIRE_MINUTES: int
    + FRONTEND_HOST: str
    + ENVIRONMENT: Literal['local', 'staging', 'production']
    + BACKEND_CORS_ORIGINS: Annotated[list[AnyUrl] | str, BeforeValidator(parse_cors)]
    + PROJECT_NAME: str
    + SENTRY_DSN: HttpUrl | None
    + POSTGRES_SERVER: str
    + POSTGRES_PORT: int
    + POSTGRES_USER: str
    + POSTGRES_PASSWORD: str
    + POSTGRES_DB: str
    + SMTP_TLS: bool
    + SMTP_SSL: bool
    + SMTP_PORT: int
    + SMTP_HOST: str | None
    + SMTP_USER: str | None
    + SMTP_PASSWORD: str | None
    + EMAILS_FROM_EMAIL: EmailStr | None
    + EMAILS_FROM_NAME: EmailStr | None
    + EMAIL_RESET_TOKEN_EXPIRE_HOURS: int
    + EMAIL_TEST_USER: EmailStr
    + FIRST_SUPERUSER: EmailStr
    + FIRST_SUPERUSER_PASSWORD: str
    + LOG_LEVEL: str
    + LOG_FORMAT: str
    + LOG_FILE: str | None
    + LOG_ROTATION: bool
    + LOG_ROTATION_SIZE: int
    + LOG_ROTATION_BACKUPS: int
    +all_cors_origins() -> list[str]
    +SQLALCHEMY_DATABASE_URI() -> str
    #set_default_emails_from() -> Self
    +emails_enabled() -> bool
    #check_default_secret(var_name: str, value: str | None) -> None
    #enforce_non_default_secrets() -> Self
}
class LogLevel {
    + DEBUG: Any
    + INFO: Any
    + WARNING: Any
    + ERROR: Any
    + CRITICAL: Any
}
class LogFormat {
    + TEXT: Any
    + JSON: Any
}
class LogConfig {
    + level: LogLevel
    + format: LogFormat
    + file: str | None
    + rotation: bool
    + rotation_size: int
    + rotation_backups: int
    +from_env(cls: Any) -> LogConfig
}
class JsonFormatter {
    +format(record: logging.LogRecord) -> str
}
class LoggingMiddleware {
}
class TestLogging {
    +test_get_logger(monkeypatch: Any) -> Any
    +test_logger_propagation(monkeypatch: Any) -> Any
    +test_log_level_configuration(monkeypatch: Any) -> Any
    +test_log_format_text(monkeypatch: Any) -> Any
    +test_log_format_json(monkeypatch: Any) -> Any
    +test_structured_logging(monkeypatch: Any) -> Any
    +test_logging_middleware(monkeypatch: Any) -> Any
    +test_exception_logging(monkeypatch: Any) -> Any
}
SQLModel <|-- UserBase
UserBase <|-- UserCreate
SQLModel <|-- UserRegister
UserBase <|-- UserUpdate
SQLModel <|-- UserUpdateMe
SQLModel <|-- UpdatePassword
UserBase <|-- User
UserBase <|-- UserPublic
SQLModel <|-- UsersPublic
SQLModel <|-- ItemBase
ItemBase <|-- ItemCreate
ItemBase <|-- ItemUpdate
ItemBase <|-- Item
ItemBase <|-- ItemPublic
SQLModel <|-- ItemsPublic
SQLModel <|-- Message
SQLModel <|-- Token
SQLModel <|-- TokenPayload
SQLModel <|-- NewPassword
BaseModel <|-- PrivateUserCreate
BaseSettings <|-- Settings
str <|-- LogLevel
Enum <|-- LogLevel
str <|-- LogFormat
Enum <|-- LogFormat
BaseModel <|-- LogConfig
LogConfig --> LogLevel
LogConfig --> LogFormat
BaseHTTPMiddleware <|-- LoggingMiddleware
@enduml