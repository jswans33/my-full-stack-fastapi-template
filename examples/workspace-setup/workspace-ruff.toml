# Example workspace-specific Ruff configuration
# Copy this file to your project subdirectory as .ruff.toml to override global settings

# Target Python version - adjust based on project requirements
target-version = "py310"

# Line length - can be adjusted per project
line-length = 88

# Exclude patterns - customize for your project
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "migrations",
    ".mypy_cache",
    ".ruff_cache",
]

# Formatter configuration - can be customized per project
[format]
# Use double quotes for consistency
quote-style = "double"
# Indent with 4 spaces
indent-style = "space"
# Line ending style
line-ending = "auto"
# Format docstrings
docstring-code-format = true

# Linter configuration - customize rule selection per project
[lint]
# Enable specific rule sets - add or remove based on project needs
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
]

# Rules to ignore - customize per project
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

# Autofix behavior
fixable = ["ALL"]
unfixable = []

# isort configuration - customize for your project structure
[lint.isort]
known-first-party = ["myproject"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# Per-file ignores - customize for your project structure
[lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports
"tests/**/*.py" = ["PLR2004", "S101"]  # Magic values and assert statements in tests
"examples/**/*.py" = ["T201"]  # Allow print statements in examples