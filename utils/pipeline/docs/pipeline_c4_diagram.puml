@startuml "Pipeline C4 Diagram"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' LAYOUT_WITH_LEGEND()
LAYOUT_TOP_DOWN()
' LAYOUT_LEFT_RIGHT()

title "Document Pipeline Tool - C4 Architecture Diagram"

' Context diagram
Person(user, "User", "A person who wants to extract structured data from documents")
System(pipelineTool, "Document Pipeline Tool", "Extracts structured data from various document formats")
System_Ext(fileSystem, "File System", "Stores input documents and output data")
System_Ext(externalApis, "External APIs", "Optional integrations for enhanced processing")

Rel(user, pipelineTool, "Uses")
Rel(pipelineTool, fileSystem, "Reads from and writes to")
Rel(pipelineTool, externalApis, "May integrate with")

' Container diagram
Container_Boundary(pipelineToolBoundary, "Document Pipeline Tool") {
    Container(cliInterface, "CLI Interface", "Python", "Command-line interface for the pipeline tool")
    Container(pipelineCore, "Pipeline Core", "Python", "Orchestrates the document processing workflow")
    Container(strategyEngine, "Strategy Engine", "Python", "Selects and applies appropriate processing strategies")
    Container(dataStore, "Data Store", "YAML/JSON", "Stores extracted structured data")
    Container(configSystem, "Configuration System", "YAML", "Manages pipeline settings and options")
}

Rel(user, cliInterface, "Executes commands via")
Rel(cliInterface, pipelineCore, "Invokes")
Rel(pipelineCore, strategyEngine, "Uses")
Rel(pipelineCore, configSystem, "Reads configuration from")
Rel(pipelineCore, dataStore, "Writes extracted data to")
Rel(strategyEngine, fileSystem, "Reads documents from")
Rel(strategyEngine, externalApis, "May call")

' Component diagram for Pipeline Core
Component_Boundary(pipelineCoreBoundary, "Pipeline Core") {
    Component(orchestrator, "Pipeline Orchestrator", "Python", "Controls the flow of document processing")
    Component(analyzer, "Document Analyzer", "Python", "Analyzes document structure and content")
    Component(cleaner, "Content Cleaner", "Python", "Normalizes and cleans document content")
    Component(extractor, "Data Extractor", "Python", "Extracts structured data from documents")
    Component(validator, "Data Validator", "Python", "Validates extracted data against schemas")
    Component(formatter, "Output Formatter", "Python", "Formats data for output")
    Component(logger, "Logging System", "Python", "Records processing events and errors")
}

Rel(orchestrator, analyzer, "First sends document to")
Rel(analyzer, cleaner, "Passes analyzed document to")
Rel(cleaner, extractor, "Passes cleaned content to")
Rel(extractor, validator, "Passes extracted data to")
Rel(validator, formatter, "Passes validated data to")
Rel(orchestrator, logger, "Records events via")

' Component diagram for Strategy Engine
Component_Boundary(strategyEngineBoundary, "Strategy Engine") {
    Component(strategySelector, "Strategy Selector", "Python", "Selects appropriate strategies based on document type")
    Component(pdfStrategy, "PDF Strategy", "Python", "Handles PDF document processing")
    Component(excelStrategy, "Excel Strategy", "Python", "Handles Excel document processing")
    Component(wordStrategy, "Word Strategy", "Python", "Handles Word document processing")
    Component(textStrategy, "Text Strategy", "Python", "Handles plain text document processing")
    Component(strategyFactory, "Strategy Factory", "Python", "Creates strategy instances")
}

Rel(strategySelector, strategyFactory, "Requests strategy from")
Rel(strategyFactory, pdfStrategy, "Creates")
Rel(strategyFactory, excelStrategy, "Creates")
Rel(strategyFactory, wordStrategy, "Creates")
Rel(strategyFactory, textStrategy, "Creates")
Rel(pipelineCore, strategySelector, "Requests appropriate strategy from")

@enduml
