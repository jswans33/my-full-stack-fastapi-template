@startuml Pipeline Architecture

' Define styles
skinparam componentStyle uml2
skinparam backgroundColor white
skinparam ArrowColor #666666
skinparam ComponentBorderColor #999999
skinparam ComponentBackgroundColor #EEEEEE
skinparam NoteBorderColor #999999
skinparam NoteBackgroundColor #EEEEEE
skinparam RectangleBorderColor #999999
skinparam RectangleBackgroundColor #EEEEEE

' Title
title Document Pipeline Architecture

' Main components
rectangle "Input" as input #LightBlue {
  file "PDF Documents" as pdf
  note right of pdf
    - Quotes
    - Specifications
    - Technical Documents
  end note
}

rectangle "Pipeline Core" as core #LightGreen {
  component "Pipeline" as pipeline
  component "PipelineProgress" as progress
  component "StrategySelector" as selector
  note right of progress
    Rich terminal output
    with progress tracking
  end note
}

rectangle "Processing Stages" as stages #LightYellow {
  component "PDFAnalyzer" as analyzer
  component "PDFCleaner" as cleaner
  component "PDFExtractor" as extractor
  component "PDFValidator" as validator
  note bottom of extractor
    Extracts structured data:
    - Sections
    - Tables
    - Schema
  end note
}

rectangle "Formatters" as formatters #LightPink {
  component "JSONFormatter" as jsonformat
  component "MarkdownFormatter" as mdformat
  note bottom of formatters
    Converts extracted data
    to desired output format
  end note
}

rectangle "Models" as models #LightCyan {
  component "Document" as doc
  component "Section" as section
  component "Table" as table
  component "Schema" as schema
}

rectangle "Utilities" as utils #LightGray {
  component "Logging" as logging
  component "FileIO" as fileio
  component "ErrorHandling" as error
}

rectangle "Output" as output #LightBlue {
  file "JSON" as json {
    file "Content" as content
    file "Metadata" as metadata
    file "Tables" as tables
    file "Validation" as validation
  }
  file "Markdown" as markdown
}

' Flow
input --> pipeline : Input file
pipeline --> progress : Updates progress
pipeline --> selector : Select strategy
selector --> stages : Configure processors

' Processing flow
pipeline --> analyzer : 1. Analyze
analyzer --> cleaner : 2. Clean
cleaner --> extractor : 3. Extract
extractor --> validator : 4. Validate
validator --> formatters : 5. Format
formatters --> output : 6. Save

' Component relationships
stages --> models : Populates
stages --> utils : Uses
pipeline --> utils : Uses
progress --> utils : Uses

' Legend
legend right
  **Pipeline Flow**
  1. Load document
  2. Analyze structure
  3. Clean content
  4. Extract data
  5. Validate schema
  6. Format output
  
  **Progress Tracking**
  - Rich terminal output
  - Stage completion
  - Error handling
end legend

@enduml
