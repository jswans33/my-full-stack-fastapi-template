@startuml End-to-End Pipeline Flow

skinparam ParticipantPadding 20
skinparam BoxPadding 10

actor "Test Client" as Client
participant "Pipeline" as Pipeline
participant "DocumentClassifier" as Classifier
participant "ClassifierFactory" as Factory
participant "EnsembleManager" as Ensemble

box "Classifiers" #LightBlue
    participant "RuleBasedClassifier" as RuleClassifier
    participant "PatternMatcherClassifier" as PatternClassifier
    participant "MLBasedClassifier" as MLClassifier
end box

== Test Setup ==
Client -> Pipeline: initialize(config)
activate Pipeline
Pipeline -> Classifier: new(config)
activate Classifier

Classifier -> Factory: register_default_classifiers()
activate Factory
Factory -> RuleClassifier: create()
Factory -> PatternClassifier: create()
Factory --> Classifier: classifiers registered
deactivate Factory

Classifier --> Pipeline: classifier ready
deactivate Classifier
Pipeline --> Client: pipeline ready
deactivate Pipeline

== Document Processing ==
Client -> Pipeline: run(document_path)
activate Pipeline

Pipeline -> Pipeline: _detect_document_type()
Pipeline -> Pipeline: _analyze_document()
Pipeline -> Pipeline: _clean_content()

== Classification Flow ==
Pipeline -> Classifier: classify(document_data)
activate Classifier

Classifier -> Classifier: _extract_features()
note right: Extract common features\nfrom document data

Classifier -> Factory: get_available_classifiers()
activate Factory
Factory --> Classifier: classifier_list
deactivate Factory

group Rule-Based Classification
    Classifier -> RuleClassifier: classify(document_data, features)
    activate RuleClassifier
    RuleClassifier -> RuleClassifier: _get_best_match()
    note right: Check title keywords,\ncontent patterns,\nand metadata
    RuleClassifier --> Classifier: rule_result
    deactivate RuleClassifier
end

group Pattern Matching
    Classifier -> PatternClassifier: classify(document_data, features)
    activate PatternClassifier
    PatternClassifier -> PatternClassifier: _find_best_match()
    note right: Match section patterns,\ncontent patterns,\nand required features
    PatternClassifier --> Classifier: pattern_result
    deactivate PatternClassifier
end

group ML Classification
    Classifier -> MLClassifier: classify(document_data, features)
    activate MLClassifier
    MLClassifier -> MLClassifier: _extract_ml_features()
    MLClassifier -> MLClassifier: _calculate_scores()
    note right: Calculate scores using\nfeature weights and\nconfidence thresholds
    MLClassifier --> Classifier: ml_result
    deactivate MLClassifier
end

Classifier -> Ensemble: combine_results([results])
activate Ensemble
note right
Combine results using:
- Weighted average
- Classifier weights
- Confidence thresholds
end note
Ensemble --> Classifier: final_result
deactivate Ensemble

Classifier --> Pipeline: classification_result
deactivate Classifier

Pipeline -> Pipeline: _extract_data()
Pipeline -> Pipeline: _validate_data()
Pipeline -> Pipeline: _format_output()
Pipeline -> Pipeline: _verify_output_structure()

Pipeline --> Client: processed_result
deactivate Pipeline

== Test Verification ==
Client -> Client: verify_document_type()
Client -> Client: verify_confidence_score()
Client -> Client: verify_schema_pattern()
Client -> Client: verify_key_features()

@enduml
